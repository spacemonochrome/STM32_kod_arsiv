
STM32_IIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033ac  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08003538  08003538  00013538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003750  08003750  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003750  08003750  00013750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003758  08003758  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003758  08003758  00013758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002068  2000000c  0800376c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002074  0800376c  00022074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005542  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000110c  00000000  00000000  0002557e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004d0  00000000  00000000  00026690  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000438  00000000  00000000  00026b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f97d  00000000  00000000  00026f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004b41  00000000  00000000  00046915  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c068a  00000000  00000000  0004b456  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010bae0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015dc  00000000  00000000  0010bb5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800351c 	.word	0x0800351c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800351c 	.word	0x0800351c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b972 	b.w	8000e60 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4688      	mov	r8, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14b      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4615      	mov	r5, r2
 8000ba6:	d967      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0720 	rsb	r7, r2, #32
 8000bb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bba:	4095      	lsls	r5, r2
 8000bbc:	ea47 0803 	orr.w	r8, r7, r3
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bcc:	fa1f fc85 	uxth.w	ip, r5
 8000bd0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000be6:	f080 811b 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8118 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000bf0:	3f02      	subs	r7, #2
 8000bf2:	442b      	add	r3, r5
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c08:	45a4      	cmp	ip, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	192c      	adds	r4, r5, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	f080 8107 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	f240 8104 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	442c      	add	r4, r5
 8000c20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c24:	eba4 040c 	sub.w	r4, r4, ip
 8000c28:	2700      	movs	r7, #0
 8000c2a:	b11e      	cbz	r6, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c6 4300 	strd	r4, r3, [r6]
 8000c34:	4639      	mov	r1, r7
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d909      	bls.n	8000c52 <__udivmoddi4+0xbe>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80eb 	beq.w	8000e1a <__udivmoddi4+0x286>
 8000c44:	2700      	movs	r7, #0
 8000c46:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	fab3 f783 	clz	r7, r3
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d147      	bne.n	8000cea <__udivmoddi4+0x156>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xd0>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 80fa 	bhi.w	8000e58 <__udivmoddi4+0x2c4>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4698      	mov	r8, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d0e0      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000c72:	e9c6 4800 	strd	r4, r8, [r6]
 8000c76:	e7dd      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000c78:	b902      	cbnz	r2, 8000c7c <__udivmoddi4+0xe8>
 8000c7a:	deff      	udf	#255	; 0xff
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	f040 808f 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c86:	1b49      	subs	r1, r1, r5
 8000c88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8c:	fa1f f885 	uxth.w	r8, r5
 8000c90:	2701      	movs	r7, #1
 8000c92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c96:	0c23      	lsrs	r3, r4, #16
 8000c98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000cb6:	4684      	mov	ip, r0
 8000cb8:	1a59      	subs	r1, r3, r1
 8000cba:	b2a3      	uxth	r3, r4
 8000cbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cc8:	fb08 f800 	mul.w	r8, r8, r0
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x14c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x14a>
 8000cd8:	45a0      	cmp	r8, r4
 8000cda:	f200 80b6 	bhi.w	8000e4a <__udivmoddi4+0x2b6>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	eba4 0408 	sub.w	r4, r4, r8
 8000ce4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce8:	e79f      	b.n	8000c2a <__udivmoddi4+0x96>
 8000cea:	f1c7 0c20 	rsb	ip, r7, #32
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cf4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cf8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cfc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d08:	4325      	orrs	r5, r4
 8000d0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d0e:	0c2c      	lsrs	r4, r5, #16
 8000d10:	fb08 3319 	mls	r3, r8, r9, r3
 8000d14:	fa1f fa8e 	uxth.w	sl, lr
 8000d18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d20:	429c      	cmp	r4, r3
 8000d22:	fa02 f207 	lsl.w	r2, r2, r7
 8000d26:	fa00 f107 	lsl.w	r1, r0, r7
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d30:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d34:	f080 8087 	bcs.w	8000e46 <__udivmoddi4+0x2b2>
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	f240 8084 	bls.w	8000e46 <__udivmoddi4+0x2b2>
 8000d3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d42:	4473      	add	r3, lr
 8000d44:	1b1b      	subs	r3, r3, r4
 8000d46:	b2ad      	uxth	r5, r5
 8000d48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d58:	45a2      	cmp	sl, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d64:	d26b      	bcs.n	8000e3e <__udivmoddi4+0x2aa>
 8000d66:	45a2      	cmp	sl, r4
 8000d68:	d969      	bls.n	8000e3e <__udivmoddi4+0x2aa>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	4474      	add	r4, lr
 8000d6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d72:	fba0 8902 	umull	r8, r9, r0, r2
 8000d76:	eba4 040a 	sub.w	r4, r4, sl
 8000d7a:	454c      	cmp	r4, r9
 8000d7c:	46c2      	mov	sl, r8
 8000d7e:	464b      	mov	r3, r9
 8000d80:	d354      	bcc.n	8000e2c <__udivmoddi4+0x298>
 8000d82:	d051      	beq.n	8000e28 <__udivmoddi4+0x294>
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d069      	beq.n	8000e5c <__udivmoddi4+0x2c8>
 8000d88:	ebb1 050a 	subs.w	r5, r1, sl
 8000d8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d94:	40fd      	lsrs	r5, r7
 8000d96:	40fc      	lsrs	r4, r7
 8000d98:	ea4c 0505 	orr.w	r5, ip, r5
 8000d9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000da0:	2700      	movs	r7, #0
 8000da2:	e747      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000da4:	f1c2 0320 	rsb	r3, r2, #32
 8000da8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dac:	4095      	lsls	r5, r2
 8000dae:	fa01 f002 	lsl.w	r0, r1, r2
 8000db2:	fa21 f303 	lsr.w	r3, r1, r3
 8000db6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dba:	4338      	orrs	r0, r7
 8000dbc:	0c01      	lsrs	r1, r0, #16
 8000dbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dc2:	fa1f f885 	uxth.w	r8, r5
 8000dc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dce:	fb07 f308 	mul.w	r3, r7, r8
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x256>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000de0:	d22f      	bcs.n	8000e42 <__udivmoddi4+0x2ae>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d92d      	bls.n	8000e42 <__udivmoddi4+0x2ae>
 8000de6:	3f02      	subs	r7, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1acb      	subs	r3, r1, r3
 8000dec:	b281      	uxth	r1, r0
 8000dee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb00 f308 	mul.w	r3, r0, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x27e>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e08:	d217      	bcs.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d915      	bls.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e18:	e73b      	b.n	8000c92 <__udivmoddi4+0xfe>
 8000e1a:	4637      	mov	r7, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e709      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e20:	4607      	mov	r7, r0
 8000e22:	e6e7      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6fb      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e28:	4541      	cmp	r1, r8
 8000e2a:	d2ab      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e30:	eb69 020e 	sbc.w	r2, r9, lr
 8000e34:	3801      	subs	r0, #1
 8000e36:	4613      	mov	r3, r2
 8000e38:	e7a4      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3a:	4660      	mov	r0, ip
 8000e3c:	e7e9      	b.n	8000e12 <__udivmoddi4+0x27e>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	e795      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e42:	4667      	mov	r7, ip
 8000e44:	e7d1      	b.n	8000dea <__udivmoddi4+0x256>
 8000e46:	4681      	mov	r9, r0
 8000e48:	e77c      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	442c      	add	r4, r5
 8000e4e:	e747      	b.n	8000ce0 <__udivmoddi4+0x14c>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	442b      	add	r3, r5
 8000e56:	e72f      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e58:	4638      	mov	r0, r7
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xda>
 8000e5c:	4637      	mov	r7, r6
 8000e5e:	e6e9      	b.n	8000c34 <__udivmoddi4+0xa0>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	0000      	movs	r0, r0
	...

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b598      	push	{r3, r4, r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6c:	f000 fada 	bl	8001424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e70:	f000 f8ae 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e74:	f000 f94a 	bl	800110c <MX_GPIO_Init>
  MX_DAC_Init();
 8000e78:	f000 f914 	bl	80010a4 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	484e      	ldr	r0, [pc, #312]	; (8000fb8 <main+0x150>)
 8000e80:	f000 fc6b 	bl	800175a <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000e84:	2110      	movs	r1, #16
 8000e86:	484c      	ldr	r0, [pc, #304]	; (8000fb8 <main+0x150>)
 8000e88:	f000 fc67 	bl	800175a <HAL_DAC_Start>

  for(i=0;i<1024;i++)
 8000e8c:	4b4b      	ldr	r3, [pc, #300]	; (8000fbc <main+0x154>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e03b      	b.n	8000f0c <main+0xa4>
	  TestSignal[i] = (float) ((400 * sin(2*3.14*10*i*0.001)))+512;
 8000e94:	4b49      	ldr	r3, [pc, #292]	; (8000fbc <main+0x154>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fad7 	bl	800044c <__aeabi_ui2d>
 8000e9e:	a342      	add	r3, pc, #264	; (adr r3, 8000fa8 <main+0x140>)
 8000ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea4:	f7ff fb4c 	bl	8000540 <__aeabi_dmul>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	460c      	mov	r4, r1
 8000eac:	4618      	mov	r0, r3
 8000eae:	4621      	mov	r1, r4
 8000eb0:	a33f      	add	r3, pc, #252	; (adr r3, 8000fb0 <main+0x148>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	f7ff fb43 	bl	8000540 <__aeabi_dmul>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	460c      	mov	r4, r1
 8000ebe:	ec44 3b17 	vmov	d7, r3, r4
 8000ec2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ec6:	eef0 0a67 	vmov.f32	s1, s15
 8000eca:	f001 fb15 	bl	80024f8 <sin>
 8000ece:	ec51 0b10 	vmov	r0, r1, d0
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <main+0x158>)
 8000ed8:	f7ff fb32 	bl	8000540 <__aeabi_dmul>
 8000edc:	4603      	mov	r3, r0
 8000ede:	460c      	mov	r4, r1
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	4621      	mov	r1, r4
 8000ee4:	f7ff fdee 	bl	8000ac4 <__aeabi_d2f>
 8000ee8:	ee07 0a10 	vmov	s14, r0
 8000eec:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <main+0x154>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	eddf 7a34 	vldr	s15, [pc, #208]	; 8000fc4 <main+0x15c>
 8000ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef8:	4a33      	ldr	r2, [pc, #204]	; (8000fc8 <main+0x160>)
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	edc3 7a00 	vstr	s15, [r3]
  for(i=0;i<1024;i++)
 8000f02:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <main+0x154>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	3301      	adds	r3, #1
 8000f08:	4a2c      	ldr	r2, [pc, #176]	; (8000fbc <main+0x154>)
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <main+0x154>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f14:	d3be      	bcc.n	8000e94 <main+0x2c>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  for(i=100;i<900;i++)
 8000f16:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <main+0x154>)
 8000f18:	2264      	movs	r2, #100	; 0x64
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	e03b      	b.n	8000f96 <main+0x12e>
	  {
		  OutputSignal[i] = iir(TestSignal[i]);
 8000f1e:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <main+0x154>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a29      	ldr	r2, [pc, #164]	; (8000fc8 <main+0x160>)
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	edd3 7a00 	vldr	s15, [r3]
 8000f2c:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <main+0x154>)
 8000f2e:	681c      	ldr	r4, [r3, #0]
 8000f30:	eeb0 0a67 	vmov.f32	s0, s15
 8000f34:	f000 f912 	bl	800115c <iir>
 8000f38:	eef0 7a40 	vmov.f32	s15, s0
 8000f3c:	4a23      	ldr	r2, [pc, #140]	; (8000fcc <main+0x164>)
 8000f3e:	00a3      	lsls	r3, r4, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	edc3 7a00 	vstr	s15, [r3]
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)OutputSignal[i]);
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <main+0x154>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a20      	ldr	r2, [pc, #128]	; (8000fcc <main+0x164>)
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	edd3 7a00 	vldr	s15, [r3]
 8000f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f58:	ee17 3a90 	vmov	r3, s15
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4815      	ldr	r0, [pc, #84]	; (8000fb8 <main+0x150>)
 8000f62:	f000 fcad 	bl	80018c0 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)TestSignal[i]);
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <main+0x154>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <main+0x160>)
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	edd3 7a00 	vldr	s15, [r3]
 8000f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f78:	ee17 3a90 	vmov	r3, s15
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2110      	movs	r1, #16
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <main+0x150>)
 8000f82:	f000 fc9d 	bl	80018c0 <HAL_DAC_SetValue>
		  HAL_Delay(0);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f000 fabe 	bl	8001508 <HAL_Delay>
	  for(i=100;i<900;i++)
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <main+0x154>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <main+0x154>)
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <main+0x154>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000f9e:	d3be      	bcc.n	8000f1e <main+0xb6>
 8000fa0:	e7b9      	b.n	8000f16 <main+0xae>
 8000fa2:	bf00      	nop
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	66666667 	.word	0x66666667
 8000fac:	404f6666 	.word	0x404f6666
 8000fb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000fb4:	3f50624d 	.word	0x3f50624d
 8000fb8:	2000205c 	.word	0x2000205c
 8000fbc:	20001058 	.word	0x20001058
 8000fc0:	40790000 	.word	0x40790000
 8000fc4:	44000000 	.word	0x44000000
 8000fc8:	20000058 	.word	0x20000058
 8000fcc:	2000105c 	.word	0x2000105c

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	; 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	2230      	movs	r2, #48	; 0x30
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 fa80 	bl	80024e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	4b28      	ldr	r3, [pc, #160]	; (800109c <SystemClock_Config+0xcc>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a27      	ldr	r2, [pc, #156]	; (800109c <SystemClock_Config+0xcc>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001002:	6413      	str	r3, [r2, #64]	; 0x40
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <SystemClock_Config+0xcc>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <SystemClock_Config+0xd0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <SystemClock_Config+0xd0>)
 800101a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <SystemClock_Config+0xd0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800102c:	2301      	movs	r3, #1
 800102e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001036:	2302      	movs	r3, #2
 8001038:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001040:	2304      	movs	r3, #4
 8001042:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001044:	23a8      	movs	r3, #168	; 0xa8
 8001046:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001048:	2302      	movs	r3, #2
 800104a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800104c:	2304      	movs	r3, #4
 800104e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	f107 0320 	add.w	r3, r7, #32
 8001054:	4618      	mov	r0, r3
 8001056:	f000 fdf3 	bl	8001c40 <HAL_RCC_OscConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001060:	f000 f906 	bl	8001270 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001064:	230f      	movs	r3, #15
 8001066:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001068:	2302      	movs	r3, #2
 800106a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001070:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001074:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2105      	movs	r1, #5
 8001082:	4618      	mov	r0, r3
 8001084:	f001 f84c 	bl	8002120 <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800108e:	f000 f8ef 	bl	8001270 <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3750      	adds	r7, #80	; 0x50
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010aa:	463b      	mov	r3, r7
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_DAC_Init+0x60>)
 80010b4:	4a14      	ldr	r2, [pc, #80]	; (8001108 <MX_DAC_Init+0x64>)
 80010b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80010b8:	4812      	ldr	r0, [pc, #72]	; (8001104 <MX_DAC_Init+0x60>)
 80010ba:	f000 fb2c 	bl	8001716 <HAL_DAC_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80010c4:	f000 f8d4 	bl	8001270 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010d0:	463b      	mov	r3, r7
 80010d2:	2200      	movs	r2, #0
 80010d4:	4619      	mov	r1, r3
 80010d6:	480b      	ldr	r0, [pc, #44]	; (8001104 <MX_DAC_Init+0x60>)
 80010d8:	f000 fba5 	bl	8001826 <HAL_DAC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80010e2:	f000 f8c5 	bl	8001270 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	2210      	movs	r2, #16
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_DAC_Init+0x60>)
 80010ee:	f000 fb9a 	bl	8001826 <HAL_DAC_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80010f8:	f000 f8ba 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	2000205c 	.word	0x2000205c
 8001108:	40007400 	.word	0x40007400

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <MX_GPIO_Init+0x4c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <MX_GPIO_Init+0x4c>)
 800111c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <MX_GPIO_Init+0x4c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_GPIO_Init+0x4c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a08      	ldr	r2, [pc, #32]	; (8001158 <MX_GPIO_Init+0x4c>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_GPIO_Init+0x4c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]

}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <iir>:

/* USER CODE BEGIN 4 */
#define NCoef 5
float iir(float NewSample) {
 800115c:	b4b0      	push	{r4, r5, r7}
 800115e:	b091      	sub	sp, #68	; 0x44
 8001160:	af00      	add	r7, sp, #0
 8001162:	ed87 0a01 	vstr	s0, [r7, #4]
    float ACoef[NCoef+1] = {
 8001166:	4b3e      	ldr	r3, [pc, #248]	; (8001260 <iir+0x104>)
 8001168:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800116c:	461d      	mov	r5, r3
 800116e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001172:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001176:	e884 0003 	stmia.w	r4, {r0, r1}
        0.00062489615832591163,
        0.00031244807916295581,
        0.00006248961583259117
    };

    float BCoef[NCoef+1] = {
 800117a:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <iir+0x108>)
 800117c:	f107 040c 	add.w	r4, r7, #12
 8001180:	461d      	mov	r5, r3
 8001182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001186:	e895 0003 	ldmia.w	r5, {r0, r1}
 800118a:	e884 0003 	stmia.w	r4, {r0, r1}
    static float y[NCoef+1]; //output samples
    static float x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
 800118e:	2305      	movs	r3, #5
 8001190:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001192:	e018      	b.n	80011c6 <iir+0x6a>
       x[n] = x[n-1];
 8001194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001196:	3b01      	subs	r3, #1
 8001198:	4a33      	ldr	r2, [pc, #204]	; (8001268 <iir+0x10c>)
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4931      	ldr	r1, [pc, #196]	; (8001268 <iir+0x10c>)
 80011a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	601a      	str	r2, [r3, #0]
       y[n] = y[n-1];
 80011aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ac:	3b01      	subs	r3, #1
 80011ae:	4a2f      	ldr	r2, [pc, #188]	; (800126c <iir+0x110>)
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	492d      	ldr	r1, [pc, #180]	; (800126c <iir+0x110>)
 80011b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	601a      	str	r2, [r3, #0]
    for(n=NCoef; n>0; n--) {
 80011c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011c2:	3b01      	subs	r3, #1
 80011c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	dce3      	bgt.n	8001194 <iir+0x38>
    }

    //Calculate the new output
    x[0] = NewSample;
 80011cc:	4a26      	ldr	r2, [pc, #152]	; (8001268 <iir+0x10c>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
    y[0] = ACoef[0] * x[0];
 80011d2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011d6:	4b24      	ldr	r3, [pc, #144]	; (8001268 <iir+0x10c>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	4b22      	ldr	r3, [pc, #136]	; (800126c <iir+0x110>)
 80011e2:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 80011e6:	2301      	movs	r3, #1
 80011e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011ea:	e02c      	b.n	8001246 <iir+0xea>
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <iir+0x110>)
 80011ee:	ed93 7a00 	vldr	s14, [r3]
 80011f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80011fa:	4413      	add	r3, r2
 80011fc:	3b1c      	subs	r3, #28
 80011fe:	edd3 6a00 	vldr	s13, [r3]
 8001202:	4a19      	ldr	r2, [pc, #100]	; (8001268 <iir+0x10c>)
 8001204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800121a:	4413      	add	r3, r2
 800121c:	3b34      	subs	r3, #52	; 0x34
 800121e:	ed93 6a00 	vldr	s12, [r3]
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <iir+0x110>)
 8001224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	edd3 7a00 	vldr	s15, [r3]
 800122e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001232:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <iir+0x110>)
 800123c:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 8001240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001242:	3301      	adds	r3, #1
 8001244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001248:	2b05      	cmp	r3, #5
 800124a:	ddcf      	ble.n	80011ec <iir+0x90>

    return y[0];
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <iir+0x110>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	ee07 3a90 	vmov	s15, r3
}
 8001254:	eeb0 0a67 	vmov.f32	s0, s15
 8001258:	3744      	adds	r7, #68	; 0x44
 800125a:	46bd      	mov	sp, r7
 800125c:	bcb0      	pop	{r4, r5, r7}
 800125e:	4770      	bx	lr
 8001260:	08003538 	.word	0x08003538
 8001264:	08003550 	.word	0x08003550
 8001268:	20000028 	.word	0x20000028
 800126c:	20000040 	.word	0x20000040

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001276:	e7fe      	b.n	8001276 <Error_Handler+0x6>

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_MspInit+0x4c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <HAL_MspInit+0x4c>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_MspInit+0x4c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_MspInit+0x4c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_MspInit+0x4c>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_MspInit+0x4c>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800

080012c8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a17      	ldr	r2, [pc, #92]	; (8001344 <HAL_DAC_MspInit+0x7c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d127      	bne.n	800133a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_DAC_MspInit+0x80>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	4a15      	ldr	r2, [pc, #84]	; (8001348 <HAL_DAC_MspInit+0x80>)
 80012f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_DAC_MspInit+0x80>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_DAC_MspInit+0x80>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_DAC_MspInit+0x80>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_DAC_MspInit+0x80>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001322:	2330      	movs	r3, #48	; 0x30
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001326:	2303      	movs	r3, #3
 8001328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <HAL_DAC_MspInit+0x84>)
 8001336:	f000 fae9 	bl	800190c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40007400 	.word	0x40007400
 8001348:	40023800 	.word	0x40023800
 800134c:	40020000 	.word	0x40020000

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <NMI_Handler+0x4>

08001356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <MemManage_Handler+0x4>

08001362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <BusFault_Handler+0x4>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <UsageFault_Handler+0x4>

0800136e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139c:	f000 f894 	bl	80014c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <SystemInit+0x28>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ae:	4a07      	ldr	r2, [pc, #28]	; (80013cc <SystemInit+0x28>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <SystemInit+0x28>)
 80013ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013be:	609a      	str	r2, [r3, #8]
#endif
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001408 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013d6:	e003      	b.n	80013e0 <LoopCopyDataInit>

080013d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013de:	3104      	adds	r1, #4

080013e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013e8:	d3f6      	bcc.n	80013d8 <CopyDataInit>
  ldr  r2, =_sbss
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013ec:	e002      	b.n	80013f4 <LoopFillZerobss>

080013ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013f0:	f842 3b04 	str.w	r3, [r2], #4

080013f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013f8:	d3f9      	bcc.n	80013ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013fa:	f7ff ffd3 	bl	80013a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fe:	f001 f84d 	bl	800249c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001402:	f7ff fd31 	bl	8000e68 <main>
  bx  lr    
 8001406:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001408:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800140c:	08003760 	.word	0x08003760
  ldr  r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001414:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001418:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800141c:	20002074 	.word	0x20002074

08001420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC_IRQHandler>
	...

08001424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <HAL_Init+0x40>)
 800142e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001432:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <HAL_Init+0x40>)
 800143a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800143e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <HAL_Init+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a07      	ldr	r2, [pc, #28]	; (8001464 <HAL_Init+0x40>)
 8001446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144c:	2003      	movs	r0, #3
 800144e:	f000 f92f 	bl	80016b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001452:	2000      	movs	r0, #0
 8001454:	f000 f808 	bl	8001468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001458:	f7ff ff0e 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023c00 	.word	0x40023c00

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x54>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_InitTick+0x58>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001482:	fbb2 f3f3 	udiv	r3, r2, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f939 	bl	80016fe <HAL_SYSTICK_Config>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e00e      	b.n	80014b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d80a      	bhi.n	80014b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149c:	2200      	movs	r2, #0
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f000 f90f 	bl	80016c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a8:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <HAL_InitTick+0x5c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e000      	b.n	80014b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000008 	.word	0x20000008
 80014c4:	20000004 	.word	0x20000004

080014c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x20>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_IncTick+0x24>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a04      	ldr	r2, [pc, #16]	; (80014ec <HAL_IncTick+0x24>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000008 	.word	0x20000008
 80014ec:	20002070 	.word	0x20002070

080014f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_GetTick+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20002070 	.word	0x20002070

08001508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff ffee 	bl	80014f0 <HAL_GetTick>
 8001514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001520:	d005      	beq.n	800152e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_Delay+0x40>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800152e:	bf00      	nop
 8001530:	f7ff ffde 	bl	80014f0 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d8f7      	bhi.n	8001530 <HAL_Delay+0x28>
  {
  }
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000008 	.word	0x20000008

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	db0a      	blt.n	80015da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	490c      	ldr	r1, [pc, #48]	; (80015fc <__NVIC_SetPriority+0x4c>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	0112      	lsls	r2, r2, #4
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	440b      	add	r3, r1
 80015d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d8:	e00a      	b.n	80015f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4908      	ldr	r1, [pc, #32]	; (8001600 <__NVIC_SetPriority+0x50>)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	3b04      	subs	r3, #4
 80015e8:	0112      	lsls	r2, r2, #4
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	440b      	add	r3, r1
 80015ee:	761a      	strb	r2, [r3, #24]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000e100 	.word	0xe000e100
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f1c3 0307 	rsb	r3, r3, #7
 800161e:	2b04      	cmp	r3, #4
 8001620:	bf28      	it	cs
 8001622:	2304      	movcs	r3, #4
 8001624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3304      	adds	r3, #4
 800162a:	2b06      	cmp	r3, #6
 800162c:	d902      	bls.n	8001634 <NVIC_EncodePriority+0x30>
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3b03      	subs	r3, #3
 8001632:	e000      	b.n	8001636 <NVIC_EncodePriority+0x32>
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	f04f 32ff 	mov.w	r2, #4294967295
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43da      	mvns	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	401a      	ands	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800164c:	f04f 31ff 	mov.w	r1, #4294967295
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	43d9      	mvns	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	4313      	orrs	r3, r2
         );
}
 800165e:	4618      	mov	r0, r3
 8001660:	3724      	adds	r7, #36	; 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800167c:	d301      	bcc.n	8001682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167e:	2301      	movs	r3, #1
 8001680:	e00f      	b.n	80016a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <SysTick_Config+0x40>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168a:	210f      	movs	r1, #15
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f7ff ff8e 	bl	80015b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SysTick_Config+0x40>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <SysTick_Config+0x40>)
 800169c:	2207      	movs	r2, #7
 800169e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff47 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d8:	f7ff ff5c 	bl	8001594 <__NVIC_GetPriorityGrouping>
 80016dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	6978      	ldr	r0, [r7, #20]
 80016e4:	f7ff ff8e 	bl	8001604 <NVIC_EncodePriority>
 80016e8:	4602      	mov	r2, r0
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff5d 	bl	80015b0 <__NVIC_SetPriority>
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffb0 	bl	800166c <SysTick_Config>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e014      	b.n	8001752 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	791b      	ldrb	r3, [r3, #4]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d105      	bne.n	800173e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff fdc5 	bl	80012c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2202      	movs	r2, #2
 8001742:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800175a:	b480      	push	{r7}
 800175c:	b085      	sub	sp, #20
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	795b      	ldrb	r3, [r3, #5]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_DAC_Start+0x1e>
 8001774:	2302      	movs	r3, #2
 8001776:	e050      	b.n	800181a <HAL_DAC_Start+0xc0>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2202      	movs	r2, #2
 8001782:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6819      	ldr	r1, [r3, #0]
 800178a:	2201      	movs	r2, #1
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	409a      	lsls	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d11a      	bne.n	80017d4 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017b4:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d127      	bne.n	800180c <HAL_DAC_Start+0xb2>
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b38      	cmp	r3, #56	; 0x38
 80017c0:	d124      	bne.n	800180c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0201 	orr.w	r2, r2, #1
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	e01b      	b.n	800180c <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017de:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80017ea:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017f2:	d10b      	bne.n	800180c <HAL_DAC_Start+0xb2>
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80017fa:	d107      	bne.n	800180c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0202 	orr.w	r2, r2, #2
 800180a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001826:	b480      	push	{r7}
 8001828:	b087      	sub	sp, #28
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	795b      	ldrb	r3, [r3, #5]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_DAC_ConfigChannel+0x20>
 8001842:	2302      	movs	r3, #2
 8001844:	e036      	b.n	80018b4 <HAL_DAC_ConfigChannel+0x8e>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2201      	movs	r2, #1
 800184a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2202      	movs	r2, #2
 8001850:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800185a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	4013      	ands	r3, r2
 800186a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	4313      	orrs	r3, r2
 8001884:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	22c0      	movs	r2, #192	; 0xc0
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43da      	mvns	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	400a      	ands	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2201      	movs	r2, #1
 80018aa:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	371c      	adds	r7, #28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d105      	bne.n	80018ea <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4413      	add	r3, r2
 80018e4:	3308      	adds	r3, #8
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	e004      	b.n	80018f4 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4413      	add	r3, r2
 80018f0:	3314      	adds	r3, #20
 80018f2:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	461a      	mov	r2, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	e16b      	b.n	8001c00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001928:	2201      	movs	r2, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	429a      	cmp	r2, r3
 8001942:	f040 815a 	bne.w	8001bfa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d00b      	beq.n	8001966 <HAL_GPIO_Init+0x5a>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d007      	beq.n	8001966 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800195a:	2b11      	cmp	r3, #17
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b12      	cmp	r3, #18
 8001964:	d130      	bne.n	80019c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	2203      	movs	r2, #3
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800199c:	2201      	movs	r2, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	f003 0201 	and.w	r2, r3, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0xfc>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b12      	cmp	r3, #18
 8001a06:	d123      	bne.n	8001a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3208      	adds	r2, #8
 8001a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	69b9      	ldr	r1, [r7, #24]
 8001a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0203 	and.w	r2, r3, #3
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80b4 	beq.w	8001bfa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b5f      	ldr	r3, [pc, #380]	; (8001c14 <HAL_GPIO_Init+0x308>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a5e      	ldr	r2, [pc, #376]	; (8001c14 <HAL_GPIO_Init+0x308>)
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b5c      	ldr	r3, [pc, #368]	; (8001c14 <HAL_GPIO_Init+0x308>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aae:	4a5a      	ldr	r2, [pc, #360]	; (8001c18 <HAL_GPIO_Init+0x30c>)
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a51      	ldr	r2, [pc, #324]	; (8001c1c <HAL_GPIO_Init+0x310>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d02b      	beq.n	8001b32 <HAL_GPIO_Init+0x226>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a50      	ldr	r2, [pc, #320]	; (8001c20 <HAL_GPIO_Init+0x314>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d025      	beq.n	8001b2e <HAL_GPIO_Init+0x222>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4f      	ldr	r2, [pc, #316]	; (8001c24 <HAL_GPIO_Init+0x318>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d01f      	beq.n	8001b2a <HAL_GPIO_Init+0x21e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4e      	ldr	r2, [pc, #312]	; (8001c28 <HAL_GPIO_Init+0x31c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d019      	beq.n	8001b26 <HAL_GPIO_Init+0x21a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4d      	ldr	r2, [pc, #308]	; (8001c2c <HAL_GPIO_Init+0x320>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d013      	beq.n	8001b22 <HAL_GPIO_Init+0x216>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4c      	ldr	r2, [pc, #304]	; (8001c30 <HAL_GPIO_Init+0x324>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00d      	beq.n	8001b1e <HAL_GPIO_Init+0x212>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4b      	ldr	r2, [pc, #300]	; (8001c34 <HAL_GPIO_Init+0x328>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d007      	beq.n	8001b1a <HAL_GPIO_Init+0x20e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4a      	ldr	r2, [pc, #296]	; (8001c38 <HAL_GPIO_Init+0x32c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d101      	bne.n	8001b16 <HAL_GPIO_Init+0x20a>
 8001b12:	2307      	movs	r3, #7
 8001b14:	e00e      	b.n	8001b34 <HAL_GPIO_Init+0x228>
 8001b16:	2308      	movs	r3, #8
 8001b18:	e00c      	b.n	8001b34 <HAL_GPIO_Init+0x228>
 8001b1a:	2306      	movs	r3, #6
 8001b1c:	e00a      	b.n	8001b34 <HAL_GPIO_Init+0x228>
 8001b1e:	2305      	movs	r3, #5
 8001b20:	e008      	b.n	8001b34 <HAL_GPIO_Init+0x228>
 8001b22:	2304      	movs	r3, #4
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x228>
 8001b26:	2303      	movs	r3, #3
 8001b28:	e004      	b.n	8001b34 <HAL_GPIO_Init+0x228>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e002      	b.n	8001b34 <HAL_GPIO_Init+0x228>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_GPIO_Init+0x228>
 8001b32:	2300      	movs	r3, #0
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	f002 0203 	and.w	r2, r2, #3
 8001b3a:	0092      	lsls	r2, r2, #2
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b44:	4934      	ldr	r1, [pc, #208]	; (8001c18 <HAL_GPIO_Init+0x30c>)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b52:	4b3a      	ldr	r3, [pc, #232]	; (8001c3c <HAL_GPIO_Init+0x330>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b76:	4a31      	ldr	r2, [pc, #196]	; (8001c3c <HAL_GPIO_Init+0x330>)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b7c:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <HAL_GPIO_Init+0x330>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ba0:	4a26      	ldr	r2, [pc, #152]	; (8001c3c <HAL_GPIO_Init+0x330>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ba6:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <HAL_GPIO_Init+0x330>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bca:	4a1c      	ldr	r2, [pc, #112]	; (8001c3c <HAL_GPIO_Init+0x330>)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <HAL_GPIO_Init+0x330>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bf4:	4a11      	ldr	r2, [pc, #68]	; (8001c3c <HAL_GPIO_Init+0x330>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	61fb      	str	r3, [r7, #28]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	2b0f      	cmp	r3, #15
 8001c04:	f67f ae90 	bls.w	8001928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3724      	adds	r7, #36	; 0x24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40013800 	.word	0x40013800
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	40020400 	.word	0x40020400
 8001c24:	40020800 	.word	0x40020800
 8001c28:	40020c00 	.word	0x40020c00
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40021400 	.word	0x40021400
 8001c34:	40021800 	.word	0x40021800
 8001c38:	40021c00 	.word	0x40021c00
 8001c3c:	40013c00 	.word	0x40013c00

08001c40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e25b      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d075      	beq.n	8001d4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c5e:	4ba3      	ldr	r3, [pc, #652]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d00c      	beq.n	8001c84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c6a:	4ba0      	ldr	r3, [pc, #640]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d112      	bne.n	8001c9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c76:	4b9d      	ldr	r3, [pc, #628]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c82:	d10b      	bne.n	8001c9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	4b99      	ldr	r3, [pc, #612]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d05b      	beq.n	8001d48 <HAL_RCC_OscConfig+0x108>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d157      	bne.n	8001d48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e236      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca4:	d106      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x74>
 8001ca6:	4b91      	ldr	r3, [pc, #580]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a90      	ldr	r2, [pc, #576]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e01d      	b.n	8001cf0 <HAL_RCC_OscConfig+0xb0>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x98>
 8001cbe:	4b8b      	ldr	r3, [pc, #556]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a8a      	ldr	r2, [pc, #552]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b88      	ldr	r3, [pc, #544]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a87      	ldr	r2, [pc, #540]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCC_OscConfig+0xb0>
 8001cd8:	4b84      	ldr	r3, [pc, #528]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a83      	ldr	r2, [pc, #524]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b81      	ldr	r3, [pc, #516]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a80      	ldr	r2, [pc, #512]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d013      	beq.n	8001d20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fbfa 	bl	80014f0 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff fbf6 	bl	80014f0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e1fb      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	4b76      	ldr	r3, [pc, #472]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0xc0>
 8001d1e:	e014      	b.n	8001d4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fbe6 	bl	80014f0 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff fbe2 	bl	80014f0 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	; 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e1e7      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	4b6c      	ldr	r3, [pc, #432]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0xe8>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d063      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d56:	4b65      	ldr	r3, [pc, #404]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d62:	4b62      	ldr	r3, [pc, #392]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d11c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6e:	4b5f      	ldr	r3, [pc, #380]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d116      	bne.n	8001da8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7a:	4b5c      	ldr	r3, [pc, #368]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_RCC_OscConfig+0x152>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e1bb      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d92:	4b56      	ldr	r3, [pc, #344]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4952      	ldr	r1, [pc, #328]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	e03a      	b.n	8001e1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d020      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db0:	4b4f      	ldr	r3, [pc, #316]	; (8001ef0 <HAL_RCC_OscConfig+0x2b0>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7ff fb9b 	bl	80014f0 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff fb97 	bl	80014f0 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e19c      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	4b46      	ldr	r3, [pc, #280]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b43      	ldr	r3, [pc, #268]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4940      	ldr	r1, [pc, #256]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]
 8001df0:	e015      	b.n	8001e1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df2:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <HAL_RCC_OscConfig+0x2b0>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff fb7a 	bl	80014f0 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e00:	f7ff fb76 	bl	80014f0 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e17b      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	4b36      	ldr	r3, [pc, #216]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d030      	beq.n	8001e8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d016      	beq.n	8001e60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e32:	4b30      	ldr	r3, [pc, #192]	; (8001ef4 <HAL_RCC_OscConfig+0x2b4>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e38:	f7ff fb5a 	bl	80014f0 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e40:	f7ff fb56 	bl	80014f0 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e15b      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x200>
 8001e5e:	e015      	b.n	8001e8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e60:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <HAL_RCC_OscConfig+0x2b4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7ff fb43 	bl	80014f0 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6e:	f7ff fb3f 	bl	80014f0 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e144      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a0 	beq.w	8001fda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10f      	bne.n	8001eca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_OscConfig+0x2b8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d121      	bne.n	8001f1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_RCC_OscConfig+0x2b8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <HAL_RCC_OscConfig+0x2b8>)
 8001edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ee2:	f7ff fb05 	bl	80014f0 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee8:	e011      	b.n	8001f0e <HAL_RCC_OscConfig+0x2ce>
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	42470000 	.word	0x42470000
 8001ef4:	42470e80 	.word	0x42470e80
 8001ef8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efc:	f7ff faf8 	bl	80014f0 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e0fd      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0e:	4b81      	ldr	r3, [pc, #516]	; (8002114 <HAL_RCC_OscConfig+0x4d4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d106      	bne.n	8001f30 <HAL_RCC_OscConfig+0x2f0>
 8001f22:	4b7d      	ldr	r3, [pc, #500]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f26:	4a7c      	ldr	r2, [pc, #496]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f2e:	e01c      	b.n	8001f6a <HAL_RCC_OscConfig+0x32a>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2b05      	cmp	r3, #5
 8001f36:	d10c      	bne.n	8001f52 <HAL_RCC_OscConfig+0x312>
 8001f38:	4b77      	ldr	r3, [pc, #476]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3c:	4a76      	ldr	r2, [pc, #472]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 8001f3e:	f043 0304 	orr.w	r3, r3, #4
 8001f42:	6713      	str	r3, [r2, #112]	; 0x70
 8001f44:	4b74      	ldr	r3, [pc, #464]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f48:	4a73      	ldr	r2, [pc, #460]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f50:	e00b      	b.n	8001f6a <HAL_RCC_OscConfig+0x32a>
 8001f52:	4b71      	ldr	r3, [pc, #452]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a70      	ldr	r2, [pc, #448]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5e:	4b6e      	ldr	r3, [pc, #440]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	4a6d      	ldr	r2, [pc, #436]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d015      	beq.n	8001f9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f72:	f7ff fabd 	bl	80014f0 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7ff fab9 	bl	80014f0 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e0bc      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f90:	4b61      	ldr	r3, [pc, #388]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ee      	beq.n	8001f7a <HAL_RCC_OscConfig+0x33a>
 8001f9c:	e014      	b.n	8001fc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9e:	f7ff faa7 	bl	80014f0 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7ff faa3 	bl	80014f0 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e0a6      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbc:	4b56      	ldr	r3, [pc, #344]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1ee      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d105      	bne.n	8001fda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fce:	4b52      	ldr	r3, [pc, #328]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	4a51      	ldr	r2, [pc, #324]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 8001fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8092 	beq.w	8002108 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fe4:	4b4c      	ldr	r3, [pc, #304]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d05c      	beq.n	80020aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d141      	bne.n	800207c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff8:	4b48      	ldr	r3, [pc, #288]	; (800211c <HAL_RCC_OscConfig+0x4dc>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7ff fa77 	bl	80014f0 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002006:	f7ff fa73 	bl	80014f0 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e078      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002018:	4b3f      	ldr	r3, [pc, #252]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f0      	bne.n	8002006 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69da      	ldr	r2, [r3, #28]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	019b      	lsls	r3, r3, #6
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	085b      	lsrs	r3, r3, #1
 800203c:	3b01      	subs	r3, #1
 800203e:	041b      	lsls	r3, r3, #16
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002046:	061b      	lsls	r3, r3, #24
 8002048:	4933      	ldr	r1, [pc, #204]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800204e:	4b33      	ldr	r3, [pc, #204]	; (800211c <HAL_RCC_OscConfig+0x4dc>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fa4c 	bl	80014f0 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205c:	f7ff fa48 	bl	80014f0 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e04d      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x41c>
 800207a:	e045      	b.n	8002108 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <HAL_RCC_OscConfig+0x4dc>)
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7ff fa35 	bl	80014f0 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208a:	f7ff fa31 	bl	80014f0 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e036      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0x44a>
 80020a8:	e02e      	b.n	8002108 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e029      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020b6:	4b18      	ldr	r3, [pc, #96]	; (8002118 <HAL_RCC_OscConfig+0x4d8>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d11c      	bne.n	8002104 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d115      	bne.n	8002104 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020de:	4013      	ands	r3, r2
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d10d      	bne.n	8002104 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d106      	bne.n	8002104 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40007000 	.word	0x40007000
 8002118:	40023800 	.word	0x40023800
 800211c:	42470060 	.word	0x42470060

08002120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0cc      	b.n	80022ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002134:	4b68      	ldr	r3, [pc, #416]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d90c      	bls.n	800215c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b65      	ldr	r3, [pc, #404]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b63      	ldr	r3, [pc, #396]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0b8      	b.n	80022ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d020      	beq.n	80021aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002174:	4b59      	ldr	r3, [pc, #356]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4a58      	ldr	r2, [pc, #352]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800217e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800218c:	4b53      	ldr	r3, [pc, #332]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a52      	ldr	r2, [pc, #328]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002198:	4b50      	ldr	r3, [pc, #320]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	494d      	ldr	r1, [pc, #308]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d044      	beq.n	8002240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	4b47      	ldr	r3, [pc, #284]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d119      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e07f      	b.n	80022ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d003      	beq.n	80021de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021de:	4b3f      	ldr	r3, [pc, #252]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e06f      	b.n	80022ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ee:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e067      	b.n	80022ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021fe:	4b37      	ldr	r3, [pc, #220]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f023 0203 	bic.w	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4934      	ldr	r1, [pc, #208]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 800220c:	4313      	orrs	r3, r2
 800220e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002210:	f7ff f96e 	bl	80014f0 <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	e00a      	b.n	800222e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002218:	f7ff f96a 	bl	80014f0 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e04f      	b.n	80022ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 020c 	and.w	r2, r3, #12
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	429a      	cmp	r2, r3
 800223e:	d1eb      	bne.n	8002218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d20c      	bcs.n	8002268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e032      	b.n	80022ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002274:	4b19      	ldr	r3, [pc, #100]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4916      	ldr	r1, [pc, #88]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	4313      	orrs	r3, r2
 8002284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d009      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	490e      	ldr	r1, [pc, #56]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022a6:	f000 f821 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 80022aa:	4601      	mov	r1, r0
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	5cd3      	ldrb	r3, [r2, r3]
 80022ba:	fa21 f303 	lsr.w	r3, r1, r3
 80022be:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <HAL_RCC_ClockConfig+0x1c8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff f8ce 	bl	8001468 <HAL_InitTick>

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023c00 	.word	0x40023c00
 80022dc:	40023800 	.word	0x40023800
 80022e0:	08003568 	.word	0x08003568
 80022e4:	20000000 	.word	0x20000000
 80022e8:	20000004 	.word	0x20000004

080022ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	2300      	movs	r3, #0
 80022fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002302:	4b63      	ldr	r3, [pc, #396]	; (8002490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b04      	cmp	r3, #4
 800230c:	d007      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0x32>
 800230e:	2b08      	cmp	r3, #8
 8002310:	d008      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x38>
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 80b4 	bne.w	8002480 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002318:	4b5e      	ldr	r3, [pc, #376]	; (8002494 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800231a:	60bb      	str	r3, [r7, #8]
       break;
 800231c:	e0b3      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800231e:	4b5e      	ldr	r3, [pc, #376]	; (8002498 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002320:	60bb      	str	r3, [r7, #8]
      break;
 8002322:	e0b0      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002324:	4b5a      	ldr	r3, [pc, #360]	; (8002490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800232c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800232e:	4b58      	ldr	r3, [pc, #352]	; (8002490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d04a      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800233a:	4b55      	ldr	r3, [pc, #340]	; (8002490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	099b      	lsrs	r3, r3, #6
 8002340:	f04f 0400 	mov.w	r4, #0
 8002344:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	ea03 0501 	and.w	r5, r3, r1
 8002350:	ea04 0602 	and.w	r6, r4, r2
 8002354:	4629      	mov	r1, r5
 8002356:	4632      	mov	r2, r6
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	f04f 0400 	mov.w	r4, #0
 8002360:	0154      	lsls	r4, r2, #5
 8002362:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002366:	014b      	lsls	r3, r1, #5
 8002368:	4619      	mov	r1, r3
 800236a:	4622      	mov	r2, r4
 800236c:	1b49      	subs	r1, r1, r5
 800236e:	eb62 0206 	sbc.w	r2, r2, r6
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	f04f 0400 	mov.w	r4, #0
 800237a:	0194      	lsls	r4, r2, #6
 800237c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002380:	018b      	lsls	r3, r1, #6
 8002382:	1a5b      	subs	r3, r3, r1
 8002384:	eb64 0402 	sbc.w	r4, r4, r2
 8002388:	f04f 0100 	mov.w	r1, #0
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	00e2      	lsls	r2, r4, #3
 8002392:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002396:	00d9      	lsls	r1, r3, #3
 8002398:	460b      	mov	r3, r1
 800239a:	4614      	mov	r4, r2
 800239c:	195b      	adds	r3, r3, r5
 800239e:	eb44 0406 	adc.w	r4, r4, r6
 80023a2:	f04f 0100 	mov.w	r1, #0
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	0262      	lsls	r2, r4, #9
 80023ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80023b0:	0259      	lsls	r1, r3, #9
 80023b2:	460b      	mov	r3, r1
 80023b4:	4614      	mov	r4, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	4621      	mov	r1, r4
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f04f 0400 	mov.w	r4, #0
 80023c0:	461a      	mov	r2, r3
 80023c2:	4623      	mov	r3, r4
 80023c4:	f7fe fbce 	bl	8000b64 <__aeabi_uldivmod>
 80023c8:	4603      	mov	r3, r0
 80023ca:	460c      	mov	r4, r1
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	e049      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d0:	4b2f      	ldr	r3, [pc, #188]	; (8002490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	099b      	lsrs	r3, r3, #6
 80023d6:	f04f 0400 	mov.w	r4, #0
 80023da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	ea03 0501 	and.w	r5, r3, r1
 80023e6:	ea04 0602 	and.w	r6, r4, r2
 80023ea:	4629      	mov	r1, r5
 80023ec:	4632      	mov	r2, r6
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	f04f 0400 	mov.w	r4, #0
 80023f6:	0154      	lsls	r4, r2, #5
 80023f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023fc:	014b      	lsls	r3, r1, #5
 80023fe:	4619      	mov	r1, r3
 8002400:	4622      	mov	r2, r4
 8002402:	1b49      	subs	r1, r1, r5
 8002404:	eb62 0206 	sbc.w	r2, r2, r6
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	f04f 0400 	mov.w	r4, #0
 8002410:	0194      	lsls	r4, r2, #6
 8002412:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002416:	018b      	lsls	r3, r1, #6
 8002418:	1a5b      	subs	r3, r3, r1
 800241a:	eb64 0402 	sbc.w	r4, r4, r2
 800241e:	f04f 0100 	mov.w	r1, #0
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	00e2      	lsls	r2, r4, #3
 8002428:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800242c:	00d9      	lsls	r1, r3, #3
 800242e:	460b      	mov	r3, r1
 8002430:	4614      	mov	r4, r2
 8002432:	195b      	adds	r3, r3, r5
 8002434:	eb44 0406 	adc.w	r4, r4, r6
 8002438:	f04f 0100 	mov.w	r1, #0
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	02a2      	lsls	r2, r4, #10
 8002442:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002446:	0299      	lsls	r1, r3, #10
 8002448:	460b      	mov	r3, r1
 800244a:	4614      	mov	r4, r2
 800244c:	4618      	mov	r0, r3
 800244e:	4621      	mov	r1, r4
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f04f 0400 	mov.w	r4, #0
 8002456:	461a      	mov	r2, r3
 8002458:	4623      	mov	r3, r4
 800245a:	f7fe fb83 	bl	8000b64 <__aeabi_uldivmod>
 800245e:	4603      	mov	r3, r0
 8002460:	460c      	mov	r4, r1
 8002462:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002464:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	3301      	adds	r3, #1
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	fbb2 f3f3 	udiv	r3, r2, r3
 800247c:	60bb      	str	r3, [r7, #8]
      break;
 800247e:	e002      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002482:	60bb      	str	r3, [r7, #8]
      break;
 8002484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002486:	68bb      	ldr	r3, [r7, #8]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002490:	40023800 	.word	0x40023800
 8002494:	00f42400 	.word	0x00f42400
 8002498:	007a1200 	.word	0x007a1200

0800249c <__libc_init_array>:
 800249c:	b570      	push	{r4, r5, r6, lr}
 800249e:	4e0d      	ldr	r6, [pc, #52]	; (80024d4 <__libc_init_array+0x38>)
 80024a0:	4c0d      	ldr	r4, [pc, #52]	; (80024d8 <__libc_init_array+0x3c>)
 80024a2:	1ba4      	subs	r4, r4, r6
 80024a4:	10a4      	asrs	r4, r4, #2
 80024a6:	2500      	movs	r5, #0
 80024a8:	42a5      	cmp	r5, r4
 80024aa:	d109      	bne.n	80024c0 <__libc_init_array+0x24>
 80024ac:	4e0b      	ldr	r6, [pc, #44]	; (80024dc <__libc_init_array+0x40>)
 80024ae:	4c0c      	ldr	r4, [pc, #48]	; (80024e0 <__libc_init_array+0x44>)
 80024b0:	f001 f834 	bl	800351c <_init>
 80024b4:	1ba4      	subs	r4, r4, r6
 80024b6:	10a4      	asrs	r4, r4, #2
 80024b8:	2500      	movs	r5, #0
 80024ba:	42a5      	cmp	r5, r4
 80024bc:	d105      	bne.n	80024ca <__libc_init_array+0x2e>
 80024be:	bd70      	pop	{r4, r5, r6, pc}
 80024c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024c4:	4798      	blx	r3
 80024c6:	3501      	adds	r5, #1
 80024c8:	e7ee      	b.n	80024a8 <__libc_init_array+0xc>
 80024ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024ce:	4798      	blx	r3
 80024d0:	3501      	adds	r5, #1
 80024d2:	e7f2      	b.n	80024ba <__libc_init_array+0x1e>
 80024d4:	08003758 	.word	0x08003758
 80024d8:	08003758 	.word	0x08003758
 80024dc:	08003758 	.word	0x08003758
 80024e0:	0800375c 	.word	0x0800375c

080024e4 <memset>:
 80024e4:	4402      	add	r2, r0
 80024e6:	4603      	mov	r3, r0
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d100      	bne.n	80024ee <memset+0xa>
 80024ec:	4770      	bx	lr
 80024ee:	f803 1b01 	strb.w	r1, [r3], #1
 80024f2:	e7f9      	b.n	80024e8 <memset+0x4>
 80024f4:	0000      	movs	r0, r0
	...

080024f8 <sin>:
 80024f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80024fa:	ec51 0b10 	vmov	r0, r1, d0
 80024fe:	4a20      	ldr	r2, [pc, #128]	; (8002580 <sin+0x88>)
 8002500:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002504:	4293      	cmp	r3, r2
 8002506:	dc07      	bgt.n	8002518 <sin+0x20>
 8002508:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8002578 <sin+0x80>
 800250c:	2000      	movs	r0, #0
 800250e:	f000 fe37 	bl	8003180 <__kernel_sin>
 8002512:	ec51 0b10 	vmov	r0, r1, d0
 8002516:	e007      	b.n	8002528 <sin+0x30>
 8002518:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <sin+0x8c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	dd09      	ble.n	8002532 <sin+0x3a>
 800251e:	ee10 2a10 	vmov	r2, s0
 8002522:	460b      	mov	r3, r1
 8002524:	f7fd fe54 	bl	80001d0 <__aeabi_dsub>
 8002528:	ec41 0b10 	vmov	d0, r0, r1
 800252c:	b005      	add	sp, #20
 800252e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002532:	4668      	mov	r0, sp
 8002534:	f000 f828 	bl	8002588 <__ieee754_rem_pio2>
 8002538:	f000 0003 	and.w	r0, r0, #3
 800253c:	2801      	cmp	r0, #1
 800253e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002542:	ed9d 0b00 	vldr	d0, [sp]
 8002546:	d004      	beq.n	8002552 <sin+0x5a>
 8002548:	2802      	cmp	r0, #2
 800254a:	d005      	beq.n	8002558 <sin+0x60>
 800254c:	b970      	cbnz	r0, 800256c <sin+0x74>
 800254e:	2001      	movs	r0, #1
 8002550:	e7dd      	b.n	800250e <sin+0x16>
 8002552:	f000 fa0d 	bl	8002970 <__kernel_cos>
 8002556:	e7dc      	b.n	8002512 <sin+0x1a>
 8002558:	2001      	movs	r0, #1
 800255a:	f000 fe11 	bl	8003180 <__kernel_sin>
 800255e:	ec53 2b10 	vmov	r2, r3, d0
 8002562:	ee10 0a10 	vmov	r0, s0
 8002566:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800256a:	e7dd      	b.n	8002528 <sin+0x30>
 800256c:	f000 fa00 	bl	8002970 <__kernel_cos>
 8002570:	e7f5      	b.n	800255e <sin+0x66>
 8002572:	bf00      	nop
 8002574:	f3af 8000 	nop.w
	...
 8002580:	3fe921fb 	.word	0x3fe921fb
 8002584:	7fefffff 	.word	0x7fefffff

08002588 <__ieee754_rem_pio2>:
 8002588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800258c:	ec57 6b10 	vmov	r6, r7, d0
 8002590:	4bc3      	ldr	r3, [pc, #780]	; (80028a0 <__ieee754_rem_pio2+0x318>)
 8002592:	b08d      	sub	sp, #52	; 0x34
 8002594:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8002598:	4598      	cmp	r8, r3
 800259a:	4604      	mov	r4, r0
 800259c:	9704      	str	r7, [sp, #16]
 800259e:	dc07      	bgt.n	80025b0 <__ieee754_rem_pio2+0x28>
 80025a0:	2200      	movs	r2, #0
 80025a2:	2300      	movs	r3, #0
 80025a4:	ed84 0b00 	vstr	d0, [r4]
 80025a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80025ac:	2500      	movs	r5, #0
 80025ae:	e027      	b.n	8002600 <__ieee754_rem_pio2+0x78>
 80025b0:	4bbc      	ldr	r3, [pc, #752]	; (80028a4 <__ieee754_rem_pio2+0x31c>)
 80025b2:	4598      	cmp	r8, r3
 80025b4:	dc75      	bgt.n	80026a2 <__ieee754_rem_pio2+0x11a>
 80025b6:	9b04      	ldr	r3, [sp, #16]
 80025b8:	4dbb      	ldr	r5, [pc, #748]	; (80028a8 <__ieee754_rem_pio2+0x320>)
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	ee10 0a10 	vmov	r0, s0
 80025c0:	a3a9      	add	r3, pc, #676	; (adr r3, 8002868 <__ieee754_rem_pio2+0x2e0>)
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	4639      	mov	r1, r7
 80025c8:	dd36      	ble.n	8002638 <__ieee754_rem_pio2+0xb0>
 80025ca:	f7fd fe01 	bl	80001d0 <__aeabi_dsub>
 80025ce:	45a8      	cmp	r8, r5
 80025d0:	4606      	mov	r6, r0
 80025d2:	460f      	mov	r7, r1
 80025d4:	d018      	beq.n	8002608 <__ieee754_rem_pio2+0x80>
 80025d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8002870 <__ieee754_rem_pio2+0x2e8>)
 80025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025dc:	f7fd fdf8 	bl	80001d0 <__aeabi_dsub>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	e9c4 2300 	strd	r2, r3, [r4]
 80025e8:	4630      	mov	r0, r6
 80025ea:	4639      	mov	r1, r7
 80025ec:	f7fd fdf0 	bl	80001d0 <__aeabi_dsub>
 80025f0:	a39f      	add	r3, pc, #636	; (adr r3, 8002870 <__ieee754_rem_pio2+0x2e8>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	f7fd fdeb 	bl	80001d0 <__aeabi_dsub>
 80025fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80025fe:	2501      	movs	r5, #1
 8002600:	4628      	mov	r0, r5
 8002602:	b00d      	add	sp, #52	; 0x34
 8002604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002608:	a39b      	add	r3, pc, #620	; (adr r3, 8002878 <__ieee754_rem_pio2+0x2f0>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	f7fd fddf 	bl	80001d0 <__aeabi_dsub>
 8002612:	a39b      	add	r3, pc, #620	; (adr r3, 8002880 <__ieee754_rem_pio2+0x2f8>)
 8002614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002618:	4606      	mov	r6, r0
 800261a:	460f      	mov	r7, r1
 800261c:	f7fd fdd8 	bl	80001d0 <__aeabi_dsub>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	e9c4 2300 	strd	r2, r3, [r4]
 8002628:	4630      	mov	r0, r6
 800262a:	4639      	mov	r1, r7
 800262c:	f7fd fdd0 	bl	80001d0 <__aeabi_dsub>
 8002630:	a393      	add	r3, pc, #588	; (adr r3, 8002880 <__ieee754_rem_pio2+0x2f8>)
 8002632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002636:	e7de      	b.n	80025f6 <__ieee754_rem_pio2+0x6e>
 8002638:	f7fd fdcc 	bl	80001d4 <__adddf3>
 800263c:	45a8      	cmp	r8, r5
 800263e:	4606      	mov	r6, r0
 8002640:	460f      	mov	r7, r1
 8002642:	d016      	beq.n	8002672 <__ieee754_rem_pio2+0xea>
 8002644:	a38a      	add	r3, pc, #552	; (adr r3, 8002870 <__ieee754_rem_pio2+0x2e8>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f7fd fdc3 	bl	80001d4 <__adddf3>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	e9c4 2300 	strd	r2, r3, [r4]
 8002656:	4630      	mov	r0, r6
 8002658:	4639      	mov	r1, r7
 800265a:	f7fd fdb9 	bl	80001d0 <__aeabi_dsub>
 800265e:	a384      	add	r3, pc, #528	; (adr r3, 8002870 <__ieee754_rem_pio2+0x2e8>)
 8002660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002664:	f7fd fdb6 	bl	80001d4 <__adddf3>
 8002668:	f04f 35ff 	mov.w	r5, #4294967295
 800266c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002670:	e7c6      	b.n	8002600 <__ieee754_rem_pio2+0x78>
 8002672:	a381      	add	r3, pc, #516	; (adr r3, 8002878 <__ieee754_rem_pio2+0x2f0>)
 8002674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002678:	f7fd fdac 	bl	80001d4 <__adddf3>
 800267c:	a380      	add	r3, pc, #512	; (adr r3, 8002880 <__ieee754_rem_pio2+0x2f8>)
 800267e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002682:	4606      	mov	r6, r0
 8002684:	460f      	mov	r7, r1
 8002686:	f7fd fda5 	bl	80001d4 <__adddf3>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	e9c4 2300 	strd	r2, r3, [r4]
 8002692:	4630      	mov	r0, r6
 8002694:	4639      	mov	r1, r7
 8002696:	f7fd fd9b 	bl	80001d0 <__aeabi_dsub>
 800269a:	a379      	add	r3, pc, #484	; (adr r3, 8002880 <__ieee754_rem_pio2+0x2f8>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	e7e0      	b.n	8002664 <__ieee754_rem_pio2+0xdc>
 80026a2:	4b82      	ldr	r3, [pc, #520]	; (80028ac <__ieee754_rem_pio2+0x324>)
 80026a4:	4598      	cmp	r8, r3
 80026a6:	f300 80d0 	bgt.w	800284a <__ieee754_rem_pio2+0x2c2>
 80026aa:	f000 fe23 	bl	80032f4 <fabs>
 80026ae:	ec57 6b10 	vmov	r6, r7, d0
 80026b2:	ee10 0a10 	vmov	r0, s0
 80026b6:	a374      	add	r3, pc, #464	; (adr r3, 8002888 <__ieee754_rem_pio2+0x300>)
 80026b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026bc:	4639      	mov	r1, r7
 80026be:	f7fd ff3f 	bl	8000540 <__aeabi_dmul>
 80026c2:	2200      	movs	r2, #0
 80026c4:	4b7a      	ldr	r3, [pc, #488]	; (80028b0 <__ieee754_rem_pio2+0x328>)
 80026c6:	f7fd fd85 	bl	80001d4 <__adddf3>
 80026ca:	f7fe f9d3 	bl	8000a74 <__aeabi_d2iz>
 80026ce:	4605      	mov	r5, r0
 80026d0:	f7fd fecc 	bl	800046c <__aeabi_i2d>
 80026d4:	a364      	add	r3, pc, #400	; (adr r3, 8002868 <__ieee754_rem_pio2+0x2e0>)
 80026d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026de:	f7fd ff2f 	bl	8000540 <__aeabi_dmul>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4630      	mov	r0, r6
 80026e8:	4639      	mov	r1, r7
 80026ea:	f7fd fd71 	bl	80001d0 <__aeabi_dsub>
 80026ee:	a360      	add	r3, pc, #384	; (adr r3, 8002870 <__ieee754_rem_pio2+0x2e8>)
 80026f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f4:	4682      	mov	sl, r0
 80026f6:	468b      	mov	fp, r1
 80026f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80026fc:	f7fd ff20 	bl	8000540 <__aeabi_dmul>
 8002700:	2d1f      	cmp	r5, #31
 8002702:	4606      	mov	r6, r0
 8002704:	460f      	mov	r7, r1
 8002706:	dc0c      	bgt.n	8002722 <__ieee754_rem_pio2+0x19a>
 8002708:	1e6a      	subs	r2, r5, #1
 800270a:	4b6a      	ldr	r3, [pc, #424]	; (80028b4 <__ieee754_rem_pio2+0x32c>)
 800270c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002710:	4543      	cmp	r3, r8
 8002712:	d006      	beq.n	8002722 <__ieee754_rem_pio2+0x19a>
 8002714:	4632      	mov	r2, r6
 8002716:	463b      	mov	r3, r7
 8002718:	4650      	mov	r0, sl
 800271a:	4659      	mov	r1, fp
 800271c:	f7fd fd58 	bl	80001d0 <__aeabi_dsub>
 8002720:	e00e      	b.n	8002740 <__ieee754_rem_pio2+0x1b8>
 8002722:	4632      	mov	r2, r6
 8002724:	463b      	mov	r3, r7
 8002726:	4650      	mov	r0, sl
 8002728:	4659      	mov	r1, fp
 800272a:	f7fd fd51 	bl	80001d0 <__aeabi_dsub>
 800272e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8002732:	9305      	str	r3, [sp, #20]
 8002734:	9a05      	ldr	r2, [sp, #20]
 8002736:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b10      	cmp	r3, #16
 800273e:	dc02      	bgt.n	8002746 <__ieee754_rem_pio2+0x1be>
 8002740:	e9c4 0100 	strd	r0, r1, [r4]
 8002744:	e039      	b.n	80027ba <__ieee754_rem_pio2+0x232>
 8002746:	a34c      	add	r3, pc, #304	; (adr r3, 8002878 <__ieee754_rem_pio2+0x2f0>)
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002750:	f7fd fef6 	bl	8000540 <__aeabi_dmul>
 8002754:	4606      	mov	r6, r0
 8002756:	460f      	mov	r7, r1
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4650      	mov	r0, sl
 800275e:	4659      	mov	r1, fp
 8002760:	f7fd fd36 	bl	80001d0 <__aeabi_dsub>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4680      	mov	r8, r0
 800276a:	4689      	mov	r9, r1
 800276c:	4650      	mov	r0, sl
 800276e:	4659      	mov	r1, fp
 8002770:	f7fd fd2e 	bl	80001d0 <__aeabi_dsub>
 8002774:	4632      	mov	r2, r6
 8002776:	463b      	mov	r3, r7
 8002778:	f7fd fd2a 	bl	80001d0 <__aeabi_dsub>
 800277c:	a340      	add	r3, pc, #256	; (adr r3, 8002880 <__ieee754_rem_pio2+0x2f8>)
 800277e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002782:	4606      	mov	r6, r0
 8002784:	460f      	mov	r7, r1
 8002786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800278a:	f7fd fed9 	bl	8000540 <__aeabi_dmul>
 800278e:	4632      	mov	r2, r6
 8002790:	463b      	mov	r3, r7
 8002792:	f7fd fd1d 	bl	80001d0 <__aeabi_dsub>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4606      	mov	r6, r0
 800279c:	460f      	mov	r7, r1
 800279e:	4640      	mov	r0, r8
 80027a0:	4649      	mov	r1, r9
 80027a2:	f7fd fd15 	bl	80001d0 <__aeabi_dsub>
 80027a6:	9a05      	ldr	r2, [sp, #20]
 80027a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b31      	cmp	r3, #49	; 0x31
 80027b0:	dc20      	bgt.n	80027f4 <__ieee754_rem_pio2+0x26c>
 80027b2:	e9c4 0100 	strd	r0, r1, [r4]
 80027b6:	46c2      	mov	sl, r8
 80027b8:	46cb      	mov	fp, r9
 80027ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80027be:	4650      	mov	r0, sl
 80027c0:	4642      	mov	r2, r8
 80027c2:	464b      	mov	r3, r9
 80027c4:	4659      	mov	r1, fp
 80027c6:	f7fd fd03 	bl	80001d0 <__aeabi_dsub>
 80027ca:	463b      	mov	r3, r7
 80027cc:	4632      	mov	r2, r6
 80027ce:	f7fd fcff 	bl	80001d0 <__aeabi_dsub>
 80027d2:	9b04      	ldr	r3, [sp, #16]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80027da:	f6bf af11 	bge.w	8002600 <__ieee754_rem_pio2+0x78>
 80027de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80027e2:	6063      	str	r3, [r4, #4]
 80027e4:	f8c4 8000 	str.w	r8, [r4]
 80027e8:	60a0      	str	r0, [r4, #8]
 80027ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80027ee:	60e3      	str	r3, [r4, #12]
 80027f0:	426d      	negs	r5, r5
 80027f2:	e705      	b.n	8002600 <__ieee754_rem_pio2+0x78>
 80027f4:	a326      	add	r3, pc, #152	; (adr r3, 8002890 <__ieee754_rem_pio2+0x308>)
 80027f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80027fe:	f7fd fe9f 	bl	8000540 <__aeabi_dmul>
 8002802:	4606      	mov	r6, r0
 8002804:	460f      	mov	r7, r1
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4640      	mov	r0, r8
 800280c:	4649      	mov	r1, r9
 800280e:	f7fd fcdf 	bl	80001d0 <__aeabi_dsub>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4682      	mov	sl, r0
 8002818:	468b      	mov	fp, r1
 800281a:	4640      	mov	r0, r8
 800281c:	4649      	mov	r1, r9
 800281e:	f7fd fcd7 	bl	80001d0 <__aeabi_dsub>
 8002822:	4632      	mov	r2, r6
 8002824:	463b      	mov	r3, r7
 8002826:	f7fd fcd3 	bl	80001d0 <__aeabi_dsub>
 800282a:	a31b      	add	r3, pc, #108	; (adr r3, 8002898 <__ieee754_rem_pio2+0x310>)
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	4606      	mov	r6, r0
 8002832:	460f      	mov	r7, r1
 8002834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002838:	f7fd fe82 	bl	8000540 <__aeabi_dmul>
 800283c:	4632      	mov	r2, r6
 800283e:	463b      	mov	r3, r7
 8002840:	f7fd fcc6 	bl	80001d0 <__aeabi_dsub>
 8002844:	4606      	mov	r6, r0
 8002846:	460f      	mov	r7, r1
 8002848:	e764      	b.n	8002714 <__ieee754_rem_pio2+0x18c>
 800284a:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <__ieee754_rem_pio2+0x330>)
 800284c:	4598      	cmp	r8, r3
 800284e:	dd35      	ble.n	80028bc <__ieee754_rem_pio2+0x334>
 8002850:	ee10 2a10 	vmov	r2, s0
 8002854:	463b      	mov	r3, r7
 8002856:	4630      	mov	r0, r6
 8002858:	4639      	mov	r1, r7
 800285a:	f7fd fcb9 	bl	80001d0 <__aeabi_dsub>
 800285e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002862:	e9c4 0100 	strd	r0, r1, [r4]
 8002866:	e6a1      	b.n	80025ac <__ieee754_rem_pio2+0x24>
 8002868:	54400000 	.word	0x54400000
 800286c:	3ff921fb 	.word	0x3ff921fb
 8002870:	1a626331 	.word	0x1a626331
 8002874:	3dd0b461 	.word	0x3dd0b461
 8002878:	1a600000 	.word	0x1a600000
 800287c:	3dd0b461 	.word	0x3dd0b461
 8002880:	2e037073 	.word	0x2e037073
 8002884:	3ba3198a 	.word	0x3ba3198a
 8002888:	6dc9c883 	.word	0x6dc9c883
 800288c:	3fe45f30 	.word	0x3fe45f30
 8002890:	2e000000 	.word	0x2e000000
 8002894:	3ba3198a 	.word	0x3ba3198a
 8002898:	252049c1 	.word	0x252049c1
 800289c:	397b839a 	.word	0x397b839a
 80028a0:	3fe921fb 	.word	0x3fe921fb
 80028a4:	4002d97b 	.word	0x4002d97b
 80028a8:	3ff921fb 	.word	0x3ff921fb
 80028ac:	413921fb 	.word	0x413921fb
 80028b0:	3fe00000 	.word	0x3fe00000
 80028b4:	08003578 	.word	0x08003578
 80028b8:	7fefffff 	.word	0x7fefffff
 80028bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80028c0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80028c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80028c8:	4630      	mov	r0, r6
 80028ca:	460f      	mov	r7, r1
 80028cc:	f7fe f8d2 	bl	8000a74 <__aeabi_d2iz>
 80028d0:	f7fd fdcc 	bl	800046c <__aeabi_i2d>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4630      	mov	r0, r6
 80028da:	4639      	mov	r1, r7
 80028dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80028e0:	f7fd fc76 	bl	80001d0 <__aeabi_dsub>
 80028e4:	2200      	movs	r2, #0
 80028e6:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <__ieee754_rem_pio2+0x3dc>)
 80028e8:	f7fd fe2a 	bl	8000540 <__aeabi_dmul>
 80028ec:	460f      	mov	r7, r1
 80028ee:	4606      	mov	r6, r0
 80028f0:	f7fe f8c0 	bl	8000a74 <__aeabi_d2iz>
 80028f4:	f7fd fdba 	bl	800046c <__aeabi_i2d>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4630      	mov	r0, r6
 80028fe:	4639      	mov	r1, r7
 8002900:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002904:	f7fd fc64 	bl	80001d0 <__aeabi_dsub>
 8002908:	2200      	movs	r2, #0
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <__ieee754_rem_pio2+0x3dc>)
 800290c:	f7fd fe18 	bl	8000540 <__aeabi_dmul>
 8002910:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002914:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8002918:	f04f 0803 	mov.w	r8, #3
 800291c:	2600      	movs	r6, #0
 800291e:	2700      	movs	r7, #0
 8002920:	4632      	mov	r2, r6
 8002922:	463b      	mov	r3, r7
 8002924:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8002928:	f108 3aff 	add.w	sl, r8, #4294967295
 800292c:	f7fe f870 	bl	8000a10 <__aeabi_dcmpeq>
 8002930:	b9b0      	cbnz	r0, 8002960 <__ieee754_rem_pio2+0x3d8>
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <__ieee754_rem_pio2+0x3e0>)
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	2302      	movs	r3, #2
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	462a      	mov	r2, r5
 800293c:	4643      	mov	r3, r8
 800293e:	4621      	mov	r1, r4
 8002940:	a806      	add	r0, sp, #24
 8002942:	f000 f8dd 	bl	8002b00 <__kernel_rem_pio2>
 8002946:	9b04      	ldr	r3, [sp, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	4605      	mov	r5, r0
 800294c:	f6bf ae58 	bge.w	8002600 <__ieee754_rem_pio2+0x78>
 8002950:	6863      	ldr	r3, [r4, #4]
 8002952:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002956:	6063      	str	r3, [r4, #4]
 8002958:	68e3      	ldr	r3, [r4, #12]
 800295a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800295e:	e746      	b.n	80027ee <__ieee754_rem_pio2+0x266>
 8002960:	46d0      	mov	r8, sl
 8002962:	e7dd      	b.n	8002920 <__ieee754_rem_pio2+0x398>
 8002964:	41700000 	.word	0x41700000
 8002968:	080035f8 	.word	0x080035f8
 800296c:	00000000 	.word	0x00000000

08002970 <__kernel_cos>:
 8002970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002974:	ec59 8b10 	vmov	r8, r9, d0
 8002978:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800297c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8002980:	ed2d 8b02 	vpush	{d8}
 8002984:	eeb0 8a41 	vmov.f32	s16, s2
 8002988:	eef0 8a61 	vmov.f32	s17, s3
 800298c:	da07      	bge.n	800299e <__kernel_cos+0x2e>
 800298e:	ee10 0a10 	vmov	r0, s0
 8002992:	4649      	mov	r1, r9
 8002994:	f7fe f86e 	bl	8000a74 <__aeabi_d2iz>
 8002998:	2800      	cmp	r0, #0
 800299a:	f000 8089 	beq.w	8002ab0 <__kernel_cos+0x140>
 800299e:	4642      	mov	r2, r8
 80029a0:	464b      	mov	r3, r9
 80029a2:	4640      	mov	r0, r8
 80029a4:	4649      	mov	r1, r9
 80029a6:	f7fd fdcb 	bl	8000540 <__aeabi_dmul>
 80029aa:	2200      	movs	r2, #0
 80029ac:	4b4e      	ldr	r3, [pc, #312]	; (8002ae8 <__kernel_cos+0x178>)
 80029ae:	4604      	mov	r4, r0
 80029b0:	460d      	mov	r5, r1
 80029b2:	f7fd fdc5 	bl	8000540 <__aeabi_dmul>
 80029b6:	a340      	add	r3, pc, #256	; (adr r3, 8002ab8 <__kernel_cos+0x148>)
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	4682      	mov	sl, r0
 80029be:	468b      	mov	fp, r1
 80029c0:	4620      	mov	r0, r4
 80029c2:	4629      	mov	r1, r5
 80029c4:	f7fd fdbc 	bl	8000540 <__aeabi_dmul>
 80029c8:	a33d      	add	r3, pc, #244	; (adr r3, 8002ac0 <__kernel_cos+0x150>)
 80029ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ce:	f7fd fc01 	bl	80001d4 <__adddf3>
 80029d2:	4622      	mov	r2, r4
 80029d4:	462b      	mov	r3, r5
 80029d6:	f7fd fdb3 	bl	8000540 <__aeabi_dmul>
 80029da:	a33b      	add	r3, pc, #236	; (adr r3, 8002ac8 <__kernel_cos+0x158>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f7fd fbf6 	bl	80001d0 <__aeabi_dsub>
 80029e4:	4622      	mov	r2, r4
 80029e6:	462b      	mov	r3, r5
 80029e8:	f7fd fdaa 	bl	8000540 <__aeabi_dmul>
 80029ec:	a338      	add	r3, pc, #224	; (adr r3, 8002ad0 <__kernel_cos+0x160>)
 80029ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f2:	f7fd fbef 	bl	80001d4 <__adddf3>
 80029f6:	4622      	mov	r2, r4
 80029f8:	462b      	mov	r3, r5
 80029fa:	f7fd fda1 	bl	8000540 <__aeabi_dmul>
 80029fe:	a336      	add	r3, pc, #216	; (adr r3, 8002ad8 <__kernel_cos+0x168>)
 8002a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a04:	f7fd fbe4 	bl	80001d0 <__aeabi_dsub>
 8002a08:	4622      	mov	r2, r4
 8002a0a:	462b      	mov	r3, r5
 8002a0c:	f7fd fd98 	bl	8000540 <__aeabi_dmul>
 8002a10:	a333      	add	r3, pc, #204	; (adr r3, 8002ae0 <__kernel_cos+0x170>)
 8002a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a16:	f7fd fbdd 	bl	80001d4 <__adddf3>
 8002a1a:	4622      	mov	r2, r4
 8002a1c:	462b      	mov	r3, r5
 8002a1e:	f7fd fd8f 	bl	8000540 <__aeabi_dmul>
 8002a22:	4622      	mov	r2, r4
 8002a24:	462b      	mov	r3, r5
 8002a26:	f7fd fd8b 	bl	8000540 <__aeabi_dmul>
 8002a2a:	ec53 2b18 	vmov	r2, r3, d8
 8002a2e:	4604      	mov	r4, r0
 8002a30:	460d      	mov	r5, r1
 8002a32:	4640      	mov	r0, r8
 8002a34:	4649      	mov	r1, r9
 8002a36:	f7fd fd83 	bl	8000540 <__aeabi_dmul>
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	4629      	mov	r1, r5
 8002a40:	4620      	mov	r0, r4
 8002a42:	f7fd fbc5 	bl	80001d0 <__aeabi_dsub>
 8002a46:	4b29      	ldr	r3, [pc, #164]	; (8002aec <__kernel_cos+0x17c>)
 8002a48:	429e      	cmp	r6, r3
 8002a4a:	4680      	mov	r8, r0
 8002a4c:	4689      	mov	r9, r1
 8002a4e:	dc11      	bgt.n	8002a74 <__kernel_cos+0x104>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4650      	mov	r0, sl
 8002a56:	4659      	mov	r1, fp
 8002a58:	f7fd fbba 	bl	80001d0 <__aeabi_dsub>
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4924      	ldr	r1, [pc, #144]	; (8002af0 <__kernel_cos+0x180>)
 8002a60:	4602      	mov	r2, r0
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7fd fbb4 	bl	80001d0 <__aeabi_dsub>
 8002a68:	ecbd 8b02 	vpop	{d8}
 8002a6c:	ec41 0b10 	vmov	d0, r0, r1
 8002a70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a74:	4b1f      	ldr	r3, [pc, #124]	; (8002af4 <__kernel_cos+0x184>)
 8002a76:	491e      	ldr	r1, [pc, #120]	; (8002af0 <__kernel_cos+0x180>)
 8002a78:	429e      	cmp	r6, r3
 8002a7a:	bfcc      	ite	gt
 8002a7c:	4d1e      	ldrgt	r5, [pc, #120]	; (8002af8 <__kernel_cos+0x188>)
 8002a7e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8002a82:	2400      	movs	r4, #0
 8002a84:	4622      	mov	r2, r4
 8002a86:	462b      	mov	r3, r5
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f7fd fba1 	bl	80001d0 <__aeabi_dsub>
 8002a8e:	4622      	mov	r2, r4
 8002a90:	4606      	mov	r6, r0
 8002a92:	460f      	mov	r7, r1
 8002a94:	462b      	mov	r3, r5
 8002a96:	4650      	mov	r0, sl
 8002a98:	4659      	mov	r1, fp
 8002a9a:	f7fd fb99 	bl	80001d0 <__aeabi_dsub>
 8002a9e:	4642      	mov	r2, r8
 8002aa0:	464b      	mov	r3, r9
 8002aa2:	f7fd fb95 	bl	80001d0 <__aeabi_dsub>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4630      	mov	r0, r6
 8002aac:	4639      	mov	r1, r7
 8002aae:	e7d9      	b.n	8002a64 <__kernel_cos+0xf4>
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	490f      	ldr	r1, [pc, #60]	; (8002af0 <__kernel_cos+0x180>)
 8002ab4:	e7d8      	b.n	8002a68 <__kernel_cos+0xf8>
 8002ab6:	bf00      	nop
 8002ab8:	be8838d4 	.word	0xbe8838d4
 8002abc:	bda8fae9 	.word	0xbda8fae9
 8002ac0:	bdb4b1c4 	.word	0xbdb4b1c4
 8002ac4:	3e21ee9e 	.word	0x3e21ee9e
 8002ac8:	809c52ad 	.word	0x809c52ad
 8002acc:	3e927e4f 	.word	0x3e927e4f
 8002ad0:	19cb1590 	.word	0x19cb1590
 8002ad4:	3efa01a0 	.word	0x3efa01a0
 8002ad8:	16c15177 	.word	0x16c15177
 8002adc:	3f56c16c 	.word	0x3f56c16c
 8002ae0:	5555554c 	.word	0x5555554c
 8002ae4:	3fa55555 	.word	0x3fa55555
 8002ae8:	3fe00000 	.word	0x3fe00000
 8002aec:	3fd33332 	.word	0x3fd33332
 8002af0:	3ff00000 	.word	0x3ff00000
 8002af4:	3fe90000 	.word	0x3fe90000
 8002af8:	3fd20000 	.word	0x3fd20000
 8002afc:	00000000 	.word	0x00000000

08002b00 <__kernel_rem_pio2>:
 8002b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b04:	ed2d 8b02 	vpush	{d8}
 8002b08:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8002b0c:	1ed4      	subs	r4, r2, #3
 8002b0e:	9308      	str	r3, [sp, #32]
 8002b10:	9101      	str	r1, [sp, #4]
 8002b12:	4bc5      	ldr	r3, [pc, #788]	; (8002e28 <__kernel_rem_pio2+0x328>)
 8002b14:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8002b16:	9009      	str	r0, [sp, #36]	; 0x24
 8002b18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b1c:	9304      	str	r3, [sp, #16]
 8002b1e:	9b08      	ldr	r3, [sp, #32]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	9307      	str	r3, [sp, #28]
 8002b24:	2318      	movs	r3, #24
 8002b26:	fb94 f4f3 	sdiv	r4, r4, r3
 8002b2a:	f06f 0317 	mvn.w	r3, #23
 8002b2e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8002b32:	fb04 3303 	mla	r3, r4, r3, r3
 8002b36:	eb03 0a02 	add.w	sl, r3, r2
 8002b3a:	9b04      	ldr	r3, [sp, #16]
 8002b3c:	9a07      	ldr	r2, [sp, #28]
 8002b3e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8002e18 <__kernel_rem_pio2+0x318>
 8002b42:	eb03 0802 	add.w	r8, r3, r2
 8002b46:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8002b48:	1aa7      	subs	r7, r4, r2
 8002b4a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8002b4e:	ae22      	add	r6, sp, #136	; 0x88
 8002b50:	2500      	movs	r5, #0
 8002b52:	4545      	cmp	r5, r8
 8002b54:	dd13      	ble.n	8002b7e <__kernel_rem_pio2+0x7e>
 8002b56:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8002e18 <__kernel_rem_pio2+0x318>
 8002b5a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8002b5e:	2600      	movs	r6, #0
 8002b60:	9b04      	ldr	r3, [sp, #16]
 8002b62:	429e      	cmp	r6, r3
 8002b64:	dc32      	bgt.n	8002bcc <__kernel_rem_pio2+0xcc>
 8002b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b68:	9302      	str	r3, [sp, #8]
 8002b6a:	9b08      	ldr	r3, [sp, #32]
 8002b6c:	199d      	adds	r5, r3, r6
 8002b6e:	ab22      	add	r3, sp, #136	; 0x88
 8002b70:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002b74:	9306      	str	r3, [sp, #24]
 8002b76:	ec59 8b18 	vmov	r8, r9, d8
 8002b7a:	2700      	movs	r7, #0
 8002b7c:	e01f      	b.n	8002bbe <__kernel_rem_pio2+0xbe>
 8002b7e:	42ef      	cmn	r7, r5
 8002b80:	d407      	bmi.n	8002b92 <__kernel_rem_pio2+0x92>
 8002b82:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8002b86:	f7fd fc71 	bl	800046c <__aeabi_i2d>
 8002b8a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8002b8e:	3501      	adds	r5, #1
 8002b90:	e7df      	b.n	8002b52 <__kernel_rem_pio2+0x52>
 8002b92:	ec51 0b18 	vmov	r0, r1, d8
 8002b96:	e7f8      	b.n	8002b8a <__kernel_rem_pio2+0x8a>
 8002b98:	9906      	ldr	r1, [sp, #24]
 8002b9a:	9d02      	ldr	r5, [sp, #8]
 8002b9c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8002ba0:	9106      	str	r1, [sp, #24]
 8002ba2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8002ba6:	9502      	str	r5, [sp, #8]
 8002ba8:	f7fd fcca 	bl	8000540 <__aeabi_dmul>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4640      	mov	r0, r8
 8002bb2:	4649      	mov	r1, r9
 8002bb4:	f7fd fb0e 	bl	80001d4 <__adddf3>
 8002bb8:	3701      	adds	r7, #1
 8002bba:	4680      	mov	r8, r0
 8002bbc:	4689      	mov	r9, r1
 8002bbe:	9b07      	ldr	r3, [sp, #28]
 8002bc0:	429f      	cmp	r7, r3
 8002bc2:	dde9      	ble.n	8002b98 <__kernel_rem_pio2+0x98>
 8002bc4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8002bc8:	3601      	adds	r6, #1
 8002bca:	e7c9      	b.n	8002b60 <__kernel_rem_pio2+0x60>
 8002bcc:	9b04      	ldr	r3, [sp, #16]
 8002bce:	aa0e      	add	r2, sp, #56	; 0x38
 8002bd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002bd4:	930c      	str	r3, [sp, #48]	; 0x30
 8002bd6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8002bd8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002bdc:	9c04      	ldr	r4, [sp, #16]
 8002bde:	930b      	str	r3, [sp, #44]	; 0x2c
 8002be0:	ab9a      	add	r3, sp, #616	; 0x268
 8002be2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8002be6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002bea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002bee:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8002bf2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8002bf6:	ab9a      	add	r3, sp, #616	; 0x268
 8002bf8:	445b      	add	r3, fp
 8002bfa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8002bfe:	2500      	movs	r5, #0
 8002c00:	1b63      	subs	r3, r4, r5
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	dc78      	bgt.n	8002cf8 <__kernel_rem_pio2+0x1f8>
 8002c06:	4650      	mov	r0, sl
 8002c08:	ec49 8b10 	vmov	d0, r8, r9
 8002c0c:	f000 fc00 	bl	8003410 <scalbn>
 8002c10:	ec57 6b10 	vmov	r6, r7, d0
 8002c14:	2200      	movs	r2, #0
 8002c16:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002c1a:	ee10 0a10 	vmov	r0, s0
 8002c1e:	4639      	mov	r1, r7
 8002c20:	f7fd fc8e 	bl	8000540 <__aeabi_dmul>
 8002c24:	ec41 0b10 	vmov	d0, r0, r1
 8002c28:	f000 fb6e 	bl	8003308 <floor>
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	ec51 0b10 	vmov	r0, r1, d0
 8002c32:	4b7e      	ldr	r3, [pc, #504]	; (8002e2c <__kernel_rem_pio2+0x32c>)
 8002c34:	f7fd fc84 	bl	8000540 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4630      	mov	r0, r6
 8002c3e:	4639      	mov	r1, r7
 8002c40:	f7fd fac6 	bl	80001d0 <__aeabi_dsub>
 8002c44:	460f      	mov	r7, r1
 8002c46:	4606      	mov	r6, r0
 8002c48:	f7fd ff14 	bl	8000a74 <__aeabi_d2iz>
 8002c4c:	9006      	str	r0, [sp, #24]
 8002c4e:	f7fd fc0d 	bl	800046c <__aeabi_i2d>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4630      	mov	r0, r6
 8002c58:	4639      	mov	r1, r7
 8002c5a:	f7fd fab9 	bl	80001d0 <__aeabi_dsub>
 8002c5e:	f1ba 0f00 	cmp.w	sl, #0
 8002c62:	4606      	mov	r6, r0
 8002c64:	460f      	mov	r7, r1
 8002c66:	dd6c      	ble.n	8002d42 <__kernel_rem_pio2+0x242>
 8002c68:	1e62      	subs	r2, r4, #1
 8002c6a:	ab0e      	add	r3, sp, #56	; 0x38
 8002c6c:	f1ca 0118 	rsb	r1, sl, #24
 8002c70:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002c74:	9d06      	ldr	r5, [sp, #24]
 8002c76:	fa40 f301 	asr.w	r3, r0, r1
 8002c7a:	441d      	add	r5, r3
 8002c7c:	408b      	lsls	r3, r1
 8002c7e:	1ac0      	subs	r0, r0, r3
 8002c80:	ab0e      	add	r3, sp, #56	; 0x38
 8002c82:	9506      	str	r5, [sp, #24]
 8002c84:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002c88:	f1ca 0317 	rsb	r3, sl, #23
 8002c8c:	fa40 f303 	asr.w	r3, r0, r3
 8002c90:	9302      	str	r3, [sp, #8]
 8002c92:	9b02      	ldr	r3, [sp, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	dd62      	ble.n	8002d5e <__kernel_rem_pio2+0x25e>
 8002c98:	9b06      	ldr	r3, [sp, #24]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	9306      	str	r3, [sp, #24]
 8002ca0:	4615      	mov	r5, r2
 8002ca2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002ca6:	4294      	cmp	r4, r2
 8002ca8:	f300 8095 	bgt.w	8002dd6 <__kernel_rem_pio2+0x2d6>
 8002cac:	f1ba 0f00 	cmp.w	sl, #0
 8002cb0:	dd07      	ble.n	8002cc2 <__kernel_rem_pio2+0x1c2>
 8002cb2:	f1ba 0f01 	cmp.w	sl, #1
 8002cb6:	f000 80a2 	beq.w	8002dfe <__kernel_rem_pio2+0x2fe>
 8002cba:	f1ba 0f02 	cmp.w	sl, #2
 8002cbe:	f000 80c1 	beq.w	8002e44 <__kernel_rem_pio2+0x344>
 8002cc2:	9b02      	ldr	r3, [sp, #8]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d14a      	bne.n	8002d5e <__kernel_rem_pio2+0x25e>
 8002cc8:	4632      	mov	r2, r6
 8002cca:	463b      	mov	r3, r7
 8002ccc:	2000      	movs	r0, #0
 8002cce:	4958      	ldr	r1, [pc, #352]	; (8002e30 <__kernel_rem_pio2+0x330>)
 8002cd0:	f7fd fa7e 	bl	80001d0 <__aeabi_dsub>
 8002cd4:	4606      	mov	r6, r0
 8002cd6:	460f      	mov	r7, r1
 8002cd8:	2d00      	cmp	r5, #0
 8002cda:	d040      	beq.n	8002d5e <__kernel_rem_pio2+0x25e>
 8002cdc:	4650      	mov	r0, sl
 8002cde:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8002e20 <__kernel_rem_pio2+0x320>
 8002ce2:	f000 fb95 	bl	8003410 <scalbn>
 8002ce6:	4630      	mov	r0, r6
 8002ce8:	4639      	mov	r1, r7
 8002cea:	ec53 2b10 	vmov	r2, r3, d0
 8002cee:	f7fd fa6f 	bl	80001d0 <__aeabi_dsub>
 8002cf2:	4606      	mov	r6, r0
 8002cf4:	460f      	mov	r7, r1
 8002cf6:	e032      	b.n	8002d5e <__kernel_rem_pio2+0x25e>
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	4b4e      	ldr	r3, [pc, #312]	; (8002e34 <__kernel_rem_pio2+0x334>)
 8002cfc:	4640      	mov	r0, r8
 8002cfe:	4649      	mov	r1, r9
 8002d00:	f7fd fc1e 	bl	8000540 <__aeabi_dmul>
 8002d04:	f7fd feb6 	bl	8000a74 <__aeabi_d2iz>
 8002d08:	f7fd fbb0 	bl	800046c <__aeabi_i2d>
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4b4a      	ldr	r3, [pc, #296]	; (8002e38 <__kernel_rem_pio2+0x338>)
 8002d10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d14:	f7fd fc14 	bl	8000540 <__aeabi_dmul>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4640      	mov	r0, r8
 8002d1e:	4649      	mov	r1, r9
 8002d20:	f7fd fa56 	bl	80001d0 <__aeabi_dsub>
 8002d24:	f7fd fea6 	bl	8000a74 <__aeabi_d2iz>
 8002d28:	ab0e      	add	r3, sp, #56	; 0x38
 8002d2a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8002d2e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8002d32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d36:	f7fd fa4d 	bl	80001d4 <__adddf3>
 8002d3a:	3501      	adds	r5, #1
 8002d3c:	4680      	mov	r8, r0
 8002d3e:	4689      	mov	r9, r1
 8002d40:	e75e      	b.n	8002c00 <__kernel_rem_pio2+0x100>
 8002d42:	d105      	bne.n	8002d50 <__kernel_rem_pio2+0x250>
 8002d44:	1e63      	subs	r3, r4, #1
 8002d46:	aa0e      	add	r2, sp, #56	; 0x38
 8002d48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002d4c:	15c3      	asrs	r3, r0, #23
 8002d4e:	e79f      	b.n	8002c90 <__kernel_rem_pio2+0x190>
 8002d50:	2200      	movs	r2, #0
 8002d52:	4b3a      	ldr	r3, [pc, #232]	; (8002e3c <__kernel_rem_pio2+0x33c>)
 8002d54:	f7fd fe7a 	bl	8000a4c <__aeabi_dcmpge>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d139      	bne.n	8002dd0 <__kernel_rem_pio2+0x2d0>
 8002d5c:	9002      	str	r0, [sp, #8]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2300      	movs	r3, #0
 8002d62:	4630      	mov	r0, r6
 8002d64:	4639      	mov	r1, r7
 8002d66:	f7fd fe53 	bl	8000a10 <__aeabi_dcmpeq>
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	f000 80c7 	beq.w	8002efe <__kernel_rem_pio2+0x3fe>
 8002d70:	1e65      	subs	r5, r4, #1
 8002d72:	462b      	mov	r3, r5
 8002d74:	2200      	movs	r2, #0
 8002d76:	9904      	ldr	r1, [sp, #16]
 8002d78:	428b      	cmp	r3, r1
 8002d7a:	da6a      	bge.n	8002e52 <__kernel_rem_pio2+0x352>
 8002d7c:	2a00      	cmp	r2, #0
 8002d7e:	f000 8088 	beq.w	8002e92 <__kernel_rem_pio2+0x392>
 8002d82:	ab0e      	add	r3, sp, #56	; 0x38
 8002d84:	f1aa 0a18 	sub.w	sl, sl, #24
 8002d88:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80b4 	beq.w	8002efa <__kernel_rem_pio2+0x3fa>
 8002d92:	4650      	mov	r0, sl
 8002d94:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8002e20 <__kernel_rem_pio2+0x320>
 8002d98:	f000 fb3a 	bl	8003410 <scalbn>
 8002d9c:	00ec      	lsls	r4, r5, #3
 8002d9e:	ab72      	add	r3, sp, #456	; 0x1c8
 8002da0:	191e      	adds	r6, r3, r4
 8002da2:	ec59 8b10 	vmov	r8, r9, d0
 8002da6:	f106 0a08 	add.w	sl, r6, #8
 8002daa:	462f      	mov	r7, r5
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	f280 80df 	bge.w	8002f70 <__kernel_rem_pio2+0x470>
 8002db2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8002e18 <__kernel_rem_pio2+0x318>
 8002db6:	f04f 0a00 	mov.w	sl, #0
 8002dba:	eba5 030a 	sub.w	r3, r5, sl
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f2c0 810a 	blt.w	8002fd8 <__kernel_rem_pio2+0x4d8>
 8002dc4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8002e40 <__kernel_rem_pio2+0x340>
 8002dc8:	ec59 8b18 	vmov	r8, r9, d8
 8002dcc:	2700      	movs	r7, #0
 8002dce:	e0f5      	b.n	8002fbc <__kernel_rem_pio2+0x4bc>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9302      	str	r3, [sp, #8]
 8002dd4:	e760      	b.n	8002c98 <__kernel_rem_pio2+0x198>
 8002dd6:	ab0e      	add	r3, sp, #56	; 0x38
 8002dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ddc:	b94d      	cbnz	r5, 8002df2 <__kernel_rem_pio2+0x2f2>
 8002dde:	b12b      	cbz	r3, 8002dec <__kernel_rem_pio2+0x2ec>
 8002de0:	a80e      	add	r0, sp, #56	; 0x38
 8002de2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8002de6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8002dea:	2301      	movs	r3, #1
 8002dec:	3201      	adds	r2, #1
 8002dee:	461d      	mov	r5, r3
 8002df0:	e759      	b.n	8002ca6 <__kernel_rem_pio2+0x1a6>
 8002df2:	a80e      	add	r0, sp, #56	; 0x38
 8002df4:	1acb      	subs	r3, r1, r3
 8002df6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8002dfa:	462b      	mov	r3, r5
 8002dfc:	e7f6      	b.n	8002dec <__kernel_rem_pio2+0x2ec>
 8002dfe:	1e62      	subs	r2, r4, #1
 8002e00:	ab0e      	add	r3, sp, #56	; 0x38
 8002e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e06:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002e0a:	a90e      	add	r1, sp, #56	; 0x38
 8002e0c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8002e10:	e757      	b.n	8002cc2 <__kernel_rem_pio2+0x1c2>
 8002e12:	bf00      	nop
 8002e14:	f3af 8000 	nop.w
	...
 8002e24:	3ff00000 	.word	0x3ff00000
 8002e28:	08003740 	.word	0x08003740
 8002e2c:	40200000 	.word	0x40200000
 8002e30:	3ff00000 	.word	0x3ff00000
 8002e34:	3e700000 	.word	0x3e700000
 8002e38:	41700000 	.word	0x41700000
 8002e3c:	3fe00000 	.word	0x3fe00000
 8002e40:	08003700 	.word	0x08003700
 8002e44:	1e62      	subs	r2, r4, #1
 8002e46:	ab0e      	add	r3, sp, #56	; 0x38
 8002e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e4c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002e50:	e7db      	b.n	8002e0a <__kernel_rem_pio2+0x30a>
 8002e52:	a90e      	add	r1, sp, #56	; 0x38
 8002e54:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	e78b      	b.n	8002d76 <__kernel_rem_pio2+0x276>
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8002e64:	2900      	cmp	r1, #0
 8002e66:	d0fa      	beq.n	8002e5e <__kernel_rem_pio2+0x35e>
 8002e68:	9a08      	ldr	r2, [sp, #32]
 8002e6a:	4422      	add	r2, r4
 8002e6c:	00d2      	lsls	r2, r2, #3
 8002e6e:	a922      	add	r1, sp, #136	; 0x88
 8002e70:	18e3      	adds	r3, r4, r3
 8002e72:	9206      	str	r2, [sp, #24]
 8002e74:	440a      	add	r2, r1
 8002e76:	9302      	str	r3, [sp, #8]
 8002e78:	f10b 0108 	add.w	r1, fp, #8
 8002e7c:	f102 0308 	add.w	r3, r2, #8
 8002e80:	1c66      	adds	r6, r4, #1
 8002e82:	910a      	str	r1, [sp, #40]	; 0x28
 8002e84:	2500      	movs	r5, #0
 8002e86:	930d      	str	r3, [sp, #52]	; 0x34
 8002e88:	9b02      	ldr	r3, [sp, #8]
 8002e8a:	42b3      	cmp	r3, r6
 8002e8c:	da04      	bge.n	8002e98 <__kernel_rem_pio2+0x398>
 8002e8e:	461c      	mov	r4, r3
 8002e90:	e6a6      	b.n	8002be0 <__kernel_rem_pio2+0xe0>
 8002e92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002e94:	2301      	movs	r3, #1
 8002e96:	e7e3      	b.n	8002e60 <__kernel_rem_pio2+0x360>
 8002e98:	9b06      	ldr	r3, [sp, #24]
 8002e9a:	18ef      	adds	r7, r5, r3
 8002e9c:	ab22      	add	r3, sp, #136	; 0x88
 8002e9e:	441f      	add	r7, r3
 8002ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ea2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8002ea6:	f7fd fae1 	bl	800046c <__aeabi_i2d>
 8002eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002eac:	461c      	mov	r4, r3
 8002eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002eb0:	e9c7 0100 	strd	r0, r1, [r7]
 8002eb4:	eb03 0b05 	add.w	fp, r3, r5
 8002eb8:	2700      	movs	r7, #0
 8002eba:	f04f 0800 	mov.w	r8, #0
 8002ebe:	f04f 0900 	mov.w	r9, #0
 8002ec2:	9b07      	ldr	r3, [sp, #28]
 8002ec4:	429f      	cmp	r7, r3
 8002ec6:	dd08      	ble.n	8002eda <__kernel_rem_pio2+0x3da>
 8002ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002eca:	aa72      	add	r2, sp, #456	; 0x1c8
 8002ecc:	18eb      	adds	r3, r5, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8002ed4:	3601      	adds	r6, #1
 8002ed6:	3508      	adds	r5, #8
 8002ed8:	e7d6      	b.n	8002e88 <__kernel_rem_pio2+0x388>
 8002eda:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8002ede:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8002ee2:	f7fd fb2d 	bl	8000540 <__aeabi_dmul>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4640      	mov	r0, r8
 8002eec:	4649      	mov	r1, r9
 8002eee:	f7fd f971 	bl	80001d4 <__adddf3>
 8002ef2:	3701      	adds	r7, #1
 8002ef4:	4680      	mov	r8, r0
 8002ef6:	4689      	mov	r9, r1
 8002ef8:	e7e3      	b.n	8002ec2 <__kernel_rem_pio2+0x3c2>
 8002efa:	3d01      	subs	r5, #1
 8002efc:	e741      	b.n	8002d82 <__kernel_rem_pio2+0x282>
 8002efe:	f1ca 0000 	rsb	r0, sl, #0
 8002f02:	ec47 6b10 	vmov	d0, r6, r7
 8002f06:	f000 fa83 	bl	8003410 <scalbn>
 8002f0a:	ec57 6b10 	vmov	r6, r7, d0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	4b99      	ldr	r3, [pc, #612]	; (8003178 <__kernel_rem_pio2+0x678>)
 8002f12:	ee10 0a10 	vmov	r0, s0
 8002f16:	4639      	mov	r1, r7
 8002f18:	f7fd fd98 	bl	8000a4c <__aeabi_dcmpge>
 8002f1c:	b1f8      	cbz	r0, 8002f5e <__kernel_rem_pio2+0x45e>
 8002f1e:	2200      	movs	r2, #0
 8002f20:	4b96      	ldr	r3, [pc, #600]	; (800317c <__kernel_rem_pio2+0x67c>)
 8002f22:	4630      	mov	r0, r6
 8002f24:	4639      	mov	r1, r7
 8002f26:	f7fd fb0b 	bl	8000540 <__aeabi_dmul>
 8002f2a:	f7fd fda3 	bl	8000a74 <__aeabi_d2iz>
 8002f2e:	4680      	mov	r8, r0
 8002f30:	f7fd fa9c 	bl	800046c <__aeabi_i2d>
 8002f34:	2200      	movs	r2, #0
 8002f36:	4b90      	ldr	r3, [pc, #576]	; (8003178 <__kernel_rem_pio2+0x678>)
 8002f38:	f7fd fb02 	bl	8000540 <__aeabi_dmul>
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4602      	mov	r2, r0
 8002f40:	4639      	mov	r1, r7
 8002f42:	4630      	mov	r0, r6
 8002f44:	f7fd f944 	bl	80001d0 <__aeabi_dsub>
 8002f48:	f7fd fd94 	bl	8000a74 <__aeabi_d2iz>
 8002f4c:	1c65      	adds	r5, r4, #1
 8002f4e:	ab0e      	add	r3, sp, #56	; 0x38
 8002f50:	f10a 0a18 	add.w	sl, sl, #24
 8002f54:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8002f58:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8002f5c:	e719      	b.n	8002d92 <__kernel_rem_pio2+0x292>
 8002f5e:	4630      	mov	r0, r6
 8002f60:	4639      	mov	r1, r7
 8002f62:	f7fd fd87 	bl	8000a74 <__aeabi_d2iz>
 8002f66:	ab0e      	add	r3, sp, #56	; 0x38
 8002f68:	4625      	mov	r5, r4
 8002f6a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8002f6e:	e710      	b.n	8002d92 <__kernel_rem_pio2+0x292>
 8002f70:	ab0e      	add	r3, sp, #56	; 0x38
 8002f72:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8002f76:	f7fd fa79 	bl	800046c <__aeabi_i2d>
 8002f7a:	4642      	mov	r2, r8
 8002f7c:	464b      	mov	r3, r9
 8002f7e:	f7fd fadf 	bl	8000540 <__aeabi_dmul>
 8002f82:	2200      	movs	r2, #0
 8002f84:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8002f88:	4b7c      	ldr	r3, [pc, #496]	; (800317c <__kernel_rem_pio2+0x67c>)
 8002f8a:	4640      	mov	r0, r8
 8002f8c:	4649      	mov	r1, r9
 8002f8e:	f7fd fad7 	bl	8000540 <__aeabi_dmul>
 8002f92:	3f01      	subs	r7, #1
 8002f94:	4680      	mov	r8, r0
 8002f96:	4689      	mov	r9, r1
 8002f98:	e708      	b.n	8002dac <__kernel_rem_pio2+0x2ac>
 8002f9a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8002f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8002fa6:	f7fd facb 	bl	8000540 <__aeabi_dmul>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4640      	mov	r0, r8
 8002fb0:	4649      	mov	r1, r9
 8002fb2:	f7fd f90f 	bl	80001d4 <__adddf3>
 8002fb6:	3701      	adds	r7, #1
 8002fb8:	4680      	mov	r8, r0
 8002fba:	4689      	mov	r9, r1
 8002fbc:	9b04      	ldr	r3, [sp, #16]
 8002fbe:	429f      	cmp	r7, r3
 8002fc0:	dc01      	bgt.n	8002fc6 <__kernel_rem_pio2+0x4c6>
 8002fc2:	45ba      	cmp	sl, r7
 8002fc4:	dae9      	bge.n	8002f9a <__kernel_rem_pio2+0x49a>
 8002fc6:	ab4a      	add	r3, sp, #296	; 0x128
 8002fc8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002fcc:	e9c3 8900 	strd	r8, r9, [r3]
 8002fd0:	f10a 0a01 	add.w	sl, sl, #1
 8002fd4:	3e08      	subs	r6, #8
 8002fd6:	e6f0      	b.n	8002dba <__kernel_rem_pio2+0x2ba>
 8002fd8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d85b      	bhi.n	8003096 <__kernel_rem_pio2+0x596>
 8002fde:	e8df f003 	tbb	[pc, r3]
 8002fe2:	264a      	.short	0x264a
 8002fe4:	0226      	.short	0x0226
 8002fe6:	ab9a      	add	r3, sp, #616	; 0x268
 8002fe8:	441c      	add	r4, r3
 8002fea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8002fee:	46a2      	mov	sl, r4
 8002ff0:	46ab      	mov	fp, r5
 8002ff2:	f1bb 0f00 	cmp.w	fp, #0
 8002ff6:	dc6c      	bgt.n	80030d2 <__kernel_rem_pio2+0x5d2>
 8002ff8:	46a2      	mov	sl, r4
 8002ffa:	46ab      	mov	fp, r5
 8002ffc:	f1bb 0f01 	cmp.w	fp, #1
 8003000:	f300 8086 	bgt.w	8003110 <__kernel_rem_pio2+0x610>
 8003004:	2000      	movs	r0, #0
 8003006:	2100      	movs	r1, #0
 8003008:	2d01      	cmp	r5, #1
 800300a:	f300 80a0 	bgt.w	800314e <__kernel_rem_pio2+0x64e>
 800300e:	9b02      	ldr	r3, [sp, #8]
 8003010:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8003014:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8003018:	2b00      	cmp	r3, #0
 800301a:	f040 809e 	bne.w	800315a <__kernel_rem_pio2+0x65a>
 800301e:	9b01      	ldr	r3, [sp, #4]
 8003020:	e9c3 7800 	strd	r7, r8, [r3]
 8003024:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8003028:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800302c:	e033      	b.n	8003096 <__kernel_rem_pio2+0x596>
 800302e:	3408      	adds	r4, #8
 8003030:	ab4a      	add	r3, sp, #296	; 0x128
 8003032:	441c      	add	r4, r3
 8003034:	462e      	mov	r6, r5
 8003036:	2000      	movs	r0, #0
 8003038:	2100      	movs	r1, #0
 800303a:	2e00      	cmp	r6, #0
 800303c:	da3a      	bge.n	80030b4 <__kernel_rem_pio2+0x5b4>
 800303e:	9b02      	ldr	r3, [sp, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d03d      	beq.n	80030c0 <__kernel_rem_pio2+0x5c0>
 8003044:	4602      	mov	r2, r0
 8003046:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800304a:	9c01      	ldr	r4, [sp, #4]
 800304c:	e9c4 2300 	strd	r2, r3, [r4]
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8003058:	f7fd f8ba 	bl	80001d0 <__aeabi_dsub>
 800305c:	ae4c      	add	r6, sp, #304	; 0x130
 800305e:	2401      	movs	r4, #1
 8003060:	42a5      	cmp	r5, r4
 8003062:	da30      	bge.n	80030c6 <__kernel_rem_pio2+0x5c6>
 8003064:	9b02      	ldr	r3, [sp, #8]
 8003066:	b113      	cbz	r3, 800306e <__kernel_rem_pio2+0x56e>
 8003068:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800306c:	4619      	mov	r1, r3
 800306e:	9b01      	ldr	r3, [sp, #4]
 8003070:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003074:	e00f      	b.n	8003096 <__kernel_rem_pio2+0x596>
 8003076:	ab9a      	add	r3, sp, #616	; 0x268
 8003078:	441c      	add	r4, r3
 800307a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800307e:	2000      	movs	r0, #0
 8003080:	2100      	movs	r1, #0
 8003082:	2d00      	cmp	r5, #0
 8003084:	da10      	bge.n	80030a8 <__kernel_rem_pio2+0x5a8>
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	b113      	cbz	r3, 8003090 <__kernel_rem_pio2+0x590>
 800308a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800308e:	4619      	mov	r1, r3
 8003090:	9b01      	ldr	r3, [sp, #4]
 8003092:	e9c3 0100 	strd	r0, r1, [r3]
 8003096:	9b06      	ldr	r3, [sp, #24]
 8003098:	f003 0007 	and.w	r0, r3, #7
 800309c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80030a0:	ecbd 8b02 	vpop	{d8}
 80030a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030a8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80030ac:	f7fd f892 	bl	80001d4 <__adddf3>
 80030b0:	3d01      	subs	r5, #1
 80030b2:	e7e6      	b.n	8003082 <__kernel_rem_pio2+0x582>
 80030b4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80030b8:	f7fd f88c 	bl	80001d4 <__adddf3>
 80030bc:	3e01      	subs	r6, #1
 80030be:	e7bc      	b.n	800303a <__kernel_rem_pio2+0x53a>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	e7c1      	b.n	800304a <__kernel_rem_pio2+0x54a>
 80030c6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80030ca:	f7fd f883 	bl	80001d4 <__adddf3>
 80030ce:	3401      	adds	r4, #1
 80030d0:	e7c6      	b.n	8003060 <__kernel_rem_pio2+0x560>
 80030d2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80030d6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80030da:	4640      	mov	r0, r8
 80030dc:	ec53 2b17 	vmov	r2, r3, d7
 80030e0:	4649      	mov	r1, r9
 80030e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80030e6:	f7fd f875 	bl	80001d4 <__adddf3>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4606      	mov	r6, r0
 80030f0:	460f      	mov	r7, r1
 80030f2:	4640      	mov	r0, r8
 80030f4:	4649      	mov	r1, r9
 80030f6:	f7fd f86b 	bl	80001d0 <__aeabi_dsub>
 80030fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80030fe:	f7fd f869 	bl	80001d4 <__adddf3>
 8003102:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003106:	e9ca 0100 	strd	r0, r1, [sl]
 800310a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800310e:	e770      	b.n	8002ff2 <__kernel_rem_pio2+0x4f2>
 8003110:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8003114:	ed3a 7b02 	vldmdb	sl!, {d7}
 8003118:	4630      	mov	r0, r6
 800311a:	ec53 2b17 	vmov	r2, r3, d7
 800311e:	4639      	mov	r1, r7
 8003120:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003124:	f7fd f856 	bl	80001d4 <__adddf3>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4680      	mov	r8, r0
 800312e:	4689      	mov	r9, r1
 8003130:	4630      	mov	r0, r6
 8003132:	4639      	mov	r1, r7
 8003134:	f7fd f84c 	bl	80001d0 <__aeabi_dsub>
 8003138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800313c:	f7fd f84a 	bl	80001d4 <__adddf3>
 8003140:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003144:	e9ca 0100 	strd	r0, r1, [sl]
 8003148:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800314c:	e756      	b.n	8002ffc <__kernel_rem_pio2+0x4fc>
 800314e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003152:	f7fd f83f 	bl	80001d4 <__adddf3>
 8003156:	3d01      	subs	r5, #1
 8003158:	e756      	b.n	8003008 <__kernel_rem_pio2+0x508>
 800315a:	9b01      	ldr	r3, [sp, #4]
 800315c:	9a01      	ldr	r2, [sp, #4]
 800315e:	601f      	str	r7, [r3, #0]
 8003160:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8003164:	605c      	str	r4, [r3, #4]
 8003166:	609d      	str	r5, [r3, #8]
 8003168:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800316c:	60d3      	str	r3, [r2, #12]
 800316e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003172:	6110      	str	r0, [r2, #16]
 8003174:	6153      	str	r3, [r2, #20]
 8003176:	e78e      	b.n	8003096 <__kernel_rem_pio2+0x596>
 8003178:	41700000 	.word	0x41700000
 800317c:	3e700000 	.word	0x3e700000

08003180 <__kernel_sin>:
 8003180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003184:	ec55 4b10 	vmov	r4, r5, d0
 8003188:	b085      	sub	sp, #20
 800318a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800318e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003192:	ed8d 1b00 	vstr	d1, [sp]
 8003196:	9002      	str	r0, [sp, #8]
 8003198:	da06      	bge.n	80031a8 <__kernel_sin+0x28>
 800319a:	ee10 0a10 	vmov	r0, s0
 800319e:	4629      	mov	r1, r5
 80031a0:	f7fd fc68 	bl	8000a74 <__aeabi_d2iz>
 80031a4:	2800      	cmp	r0, #0
 80031a6:	d051      	beq.n	800324c <__kernel_sin+0xcc>
 80031a8:	4622      	mov	r2, r4
 80031aa:	462b      	mov	r3, r5
 80031ac:	4620      	mov	r0, r4
 80031ae:	4629      	mov	r1, r5
 80031b0:	f7fd f9c6 	bl	8000540 <__aeabi_dmul>
 80031b4:	4682      	mov	sl, r0
 80031b6:	468b      	mov	fp, r1
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4620      	mov	r0, r4
 80031be:	4629      	mov	r1, r5
 80031c0:	f7fd f9be 	bl	8000540 <__aeabi_dmul>
 80031c4:	a341      	add	r3, pc, #260	; (adr r3, 80032cc <__kernel_sin+0x14c>)
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	4680      	mov	r8, r0
 80031cc:	4689      	mov	r9, r1
 80031ce:	4650      	mov	r0, sl
 80031d0:	4659      	mov	r1, fp
 80031d2:	f7fd f9b5 	bl	8000540 <__aeabi_dmul>
 80031d6:	a33f      	add	r3, pc, #252	; (adr r3, 80032d4 <__kernel_sin+0x154>)
 80031d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031dc:	f7fc fff8 	bl	80001d0 <__aeabi_dsub>
 80031e0:	4652      	mov	r2, sl
 80031e2:	465b      	mov	r3, fp
 80031e4:	f7fd f9ac 	bl	8000540 <__aeabi_dmul>
 80031e8:	a33c      	add	r3, pc, #240	; (adr r3, 80032dc <__kernel_sin+0x15c>)
 80031ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ee:	f7fc fff1 	bl	80001d4 <__adddf3>
 80031f2:	4652      	mov	r2, sl
 80031f4:	465b      	mov	r3, fp
 80031f6:	f7fd f9a3 	bl	8000540 <__aeabi_dmul>
 80031fa:	a33a      	add	r3, pc, #232	; (adr r3, 80032e4 <__kernel_sin+0x164>)
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	f7fc ffe6 	bl	80001d0 <__aeabi_dsub>
 8003204:	4652      	mov	r2, sl
 8003206:	465b      	mov	r3, fp
 8003208:	f7fd f99a 	bl	8000540 <__aeabi_dmul>
 800320c:	a337      	add	r3, pc, #220	; (adr r3, 80032ec <__kernel_sin+0x16c>)
 800320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003212:	f7fc ffdf 	bl	80001d4 <__adddf3>
 8003216:	9b02      	ldr	r3, [sp, #8]
 8003218:	4606      	mov	r6, r0
 800321a:	460f      	mov	r7, r1
 800321c:	b9db      	cbnz	r3, 8003256 <__kernel_sin+0xd6>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4650      	mov	r0, sl
 8003224:	4659      	mov	r1, fp
 8003226:	f7fd f98b 	bl	8000540 <__aeabi_dmul>
 800322a:	a325      	add	r3, pc, #148	; (adr r3, 80032c0 <__kernel_sin+0x140>)
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f7fc ffce 	bl	80001d0 <__aeabi_dsub>
 8003234:	4642      	mov	r2, r8
 8003236:	464b      	mov	r3, r9
 8003238:	f7fd f982 	bl	8000540 <__aeabi_dmul>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4620      	mov	r0, r4
 8003242:	4629      	mov	r1, r5
 8003244:	f7fc ffc6 	bl	80001d4 <__adddf3>
 8003248:	4604      	mov	r4, r0
 800324a:	460d      	mov	r5, r1
 800324c:	ec45 4b10 	vmov	d0, r4, r5
 8003250:	b005      	add	sp, #20
 8003252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003256:	2200      	movs	r2, #0
 8003258:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <__kernel_sin+0x148>)
 800325a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800325e:	f7fd f96f 	bl	8000540 <__aeabi_dmul>
 8003262:	4632      	mov	r2, r6
 8003264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003268:	463b      	mov	r3, r7
 800326a:	4640      	mov	r0, r8
 800326c:	4649      	mov	r1, r9
 800326e:	f7fd f967 	bl	8000540 <__aeabi_dmul>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800327a:	f7fc ffa9 	bl	80001d0 <__aeabi_dsub>
 800327e:	4652      	mov	r2, sl
 8003280:	465b      	mov	r3, fp
 8003282:	f7fd f95d 	bl	8000540 <__aeabi_dmul>
 8003286:	e9dd 2300 	ldrd	r2, r3, [sp]
 800328a:	f7fc ffa1 	bl	80001d0 <__aeabi_dsub>
 800328e:	a30c      	add	r3, pc, #48	; (adr r3, 80032c0 <__kernel_sin+0x140>)
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	4606      	mov	r6, r0
 8003296:	460f      	mov	r7, r1
 8003298:	4640      	mov	r0, r8
 800329a:	4649      	mov	r1, r9
 800329c:	f7fd f950 	bl	8000540 <__aeabi_dmul>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4630      	mov	r0, r6
 80032a6:	4639      	mov	r1, r7
 80032a8:	f7fc ff94 	bl	80001d4 <__adddf3>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4620      	mov	r0, r4
 80032b2:	4629      	mov	r1, r5
 80032b4:	f7fc ff8c 	bl	80001d0 <__aeabi_dsub>
 80032b8:	e7c6      	b.n	8003248 <__kernel_sin+0xc8>
 80032ba:	bf00      	nop
 80032bc:	f3af 8000 	nop.w
 80032c0:	55555549 	.word	0x55555549
 80032c4:	3fc55555 	.word	0x3fc55555
 80032c8:	3fe00000 	.word	0x3fe00000
 80032cc:	5acfd57c 	.word	0x5acfd57c
 80032d0:	3de5d93a 	.word	0x3de5d93a
 80032d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80032d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80032dc:	57b1fe7d 	.word	0x57b1fe7d
 80032e0:	3ec71de3 	.word	0x3ec71de3
 80032e4:	19c161d5 	.word	0x19c161d5
 80032e8:	3f2a01a0 	.word	0x3f2a01a0
 80032ec:	1110f8a6 	.word	0x1110f8a6
 80032f0:	3f811111 	.word	0x3f811111

080032f4 <fabs>:
 80032f4:	ec51 0b10 	vmov	r0, r1, d0
 80032f8:	ee10 2a10 	vmov	r2, s0
 80032fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003300:	ec43 2b10 	vmov	d0, r2, r3
 8003304:	4770      	bx	lr
	...

08003308 <floor>:
 8003308:	ec51 0b10 	vmov	r0, r1, d0
 800330c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003310:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003314:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8003318:	2e13      	cmp	r6, #19
 800331a:	460c      	mov	r4, r1
 800331c:	ee10 5a10 	vmov	r5, s0
 8003320:	4680      	mov	r8, r0
 8003322:	dc34      	bgt.n	800338e <floor+0x86>
 8003324:	2e00      	cmp	r6, #0
 8003326:	da16      	bge.n	8003356 <floor+0x4e>
 8003328:	a335      	add	r3, pc, #212	; (adr r3, 8003400 <floor+0xf8>)
 800332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332e:	f7fc ff51 	bl	80001d4 <__adddf3>
 8003332:	2200      	movs	r2, #0
 8003334:	2300      	movs	r3, #0
 8003336:	f7fd fb93 	bl	8000a60 <__aeabi_dcmpgt>
 800333a:	b148      	cbz	r0, 8003350 <floor+0x48>
 800333c:	2c00      	cmp	r4, #0
 800333e:	da59      	bge.n	80033f4 <floor+0xec>
 8003340:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003344:	4a30      	ldr	r2, [pc, #192]	; (8003408 <floor+0x100>)
 8003346:	432b      	orrs	r3, r5
 8003348:	2500      	movs	r5, #0
 800334a:	42ab      	cmp	r3, r5
 800334c:	bf18      	it	ne
 800334e:	4614      	movne	r4, r2
 8003350:	4621      	mov	r1, r4
 8003352:	4628      	mov	r0, r5
 8003354:	e025      	b.n	80033a2 <floor+0x9a>
 8003356:	4f2d      	ldr	r7, [pc, #180]	; (800340c <floor+0x104>)
 8003358:	4137      	asrs	r7, r6
 800335a:	ea01 0307 	and.w	r3, r1, r7
 800335e:	4303      	orrs	r3, r0
 8003360:	d01f      	beq.n	80033a2 <floor+0x9a>
 8003362:	a327      	add	r3, pc, #156	; (adr r3, 8003400 <floor+0xf8>)
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	f7fc ff34 	bl	80001d4 <__adddf3>
 800336c:	2200      	movs	r2, #0
 800336e:	2300      	movs	r3, #0
 8003370:	f7fd fb76 	bl	8000a60 <__aeabi_dcmpgt>
 8003374:	2800      	cmp	r0, #0
 8003376:	d0eb      	beq.n	8003350 <floor+0x48>
 8003378:	2c00      	cmp	r4, #0
 800337a:	bfbe      	ittt	lt
 800337c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003380:	fa43 f606 	asrlt.w	r6, r3, r6
 8003384:	19a4      	addlt	r4, r4, r6
 8003386:	ea24 0407 	bic.w	r4, r4, r7
 800338a:	2500      	movs	r5, #0
 800338c:	e7e0      	b.n	8003350 <floor+0x48>
 800338e:	2e33      	cmp	r6, #51	; 0x33
 8003390:	dd0b      	ble.n	80033aa <floor+0xa2>
 8003392:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003396:	d104      	bne.n	80033a2 <floor+0x9a>
 8003398:	ee10 2a10 	vmov	r2, s0
 800339c:	460b      	mov	r3, r1
 800339e:	f7fc ff19 	bl	80001d4 <__adddf3>
 80033a2:	ec41 0b10 	vmov	d0, r0, r1
 80033a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033aa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80033ae:	f04f 33ff 	mov.w	r3, #4294967295
 80033b2:	fa23 f707 	lsr.w	r7, r3, r7
 80033b6:	4207      	tst	r7, r0
 80033b8:	d0f3      	beq.n	80033a2 <floor+0x9a>
 80033ba:	a311      	add	r3, pc, #68	; (adr r3, 8003400 <floor+0xf8>)
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	f7fc ff08 	bl	80001d4 <__adddf3>
 80033c4:	2200      	movs	r2, #0
 80033c6:	2300      	movs	r3, #0
 80033c8:	f7fd fb4a 	bl	8000a60 <__aeabi_dcmpgt>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d0bf      	beq.n	8003350 <floor+0x48>
 80033d0:	2c00      	cmp	r4, #0
 80033d2:	da02      	bge.n	80033da <floor+0xd2>
 80033d4:	2e14      	cmp	r6, #20
 80033d6:	d103      	bne.n	80033e0 <floor+0xd8>
 80033d8:	3401      	adds	r4, #1
 80033da:	ea25 0507 	bic.w	r5, r5, r7
 80033de:	e7b7      	b.n	8003350 <floor+0x48>
 80033e0:	2301      	movs	r3, #1
 80033e2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80033e6:	fa03 f606 	lsl.w	r6, r3, r6
 80033ea:	4435      	add	r5, r6
 80033ec:	4545      	cmp	r5, r8
 80033ee:	bf38      	it	cc
 80033f0:	18e4      	addcc	r4, r4, r3
 80033f2:	e7f2      	b.n	80033da <floor+0xd2>
 80033f4:	2500      	movs	r5, #0
 80033f6:	462c      	mov	r4, r5
 80033f8:	e7aa      	b.n	8003350 <floor+0x48>
 80033fa:	bf00      	nop
 80033fc:	f3af 8000 	nop.w
 8003400:	8800759c 	.word	0x8800759c
 8003404:	7e37e43c 	.word	0x7e37e43c
 8003408:	bff00000 	.word	0xbff00000
 800340c:	000fffff 	.word	0x000fffff

08003410 <scalbn>:
 8003410:	b570      	push	{r4, r5, r6, lr}
 8003412:	ec55 4b10 	vmov	r4, r5, d0
 8003416:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800341a:	4606      	mov	r6, r0
 800341c:	462b      	mov	r3, r5
 800341e:	b9aa      	cbnz	r2, 800344c <scalbn+0x3c>
 8003420:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003424:	4323      	orrs	r3, r4
 8003426:	d03b      	beq.n	80034a0 <scalbn+0x90>
 8003428:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <scalbn+0xe0>)
 800342a:	4629      	mov	r1, r5
 800342c:	2200      	movs	r2, #0
 800342e:	ee10 0a10 	vmov	r0, s0
 8003432:	f7fd f885 	bl	8000540 <__aeabi_dmul>
 8003436:	4b2f      	ldr	r3, [pc, #188]	; (80034f4 <scalbn+0xe4>)
 8003438:	429e      	cmp	r6, r3
 800343a:	4604      	mov	r4, r0
 800343c:	460d      	mov	r5, r1
 800343e:	da12      	bge.n	8003466 <scalbn+0x56>
 8003440:	a327      	add	r3, pc, #156	; (adr r3, 80034e0 <scalbn+0xd0>)
 8003442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003446:	f7fd f87b 	bl	8000540 <__aeabi_dmul>
 800344a:	e009      	b.n	8003460 <scalbn+0x50>
 800344c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003450:	428a      	cmp	r2, r1
 8003452:	d10c      	bne.n	800346e <scalbn+0x5e>
 8003454:	ee10 2a10 	vmov	r2, s0
 8003458:	4620      	mov	r0, r4
 800345a:	4629      	mov	r1, r5
 800345c:	f7fc feba 	bl	80001d4 <__adddf3>
 8003460:	4604      	mov	r4, r0
 8003462:	460d      	mov	r5, r1
 8003464:	e01c      	b.n	80034a0 <scalbn+0x90>
 8003466:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800346a:	460b      	mov	r3, r1
 800346c:	3a36      	subs	r2, #54	; 0x36
 800346e:	4432      	add	r2, r6
 8003470:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003474:	428a      	cmp	r2, r1
 8003476:	dd0b      	ble.n	8003490 <scalbn+0x80>
 8003478:	ec45 4b11 	vmov	d1, r4, r5
 800347c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80034e8 <scalbn+0xd8>
 8003480:	f000 f83c 	bl	80034fc <copysign>
 8003484:	a318      	add	r3, pc, #96	; (adr r3, 80034e8 <scalbn+0xd8>)
 8003486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348a:	ec51 0b10 	vmov	r0, r1, d0
 800348e:	e7da      	b.n	8003446 <scalbn+0x36>
 8003490:	2a00      	cmp	r2, #0
 8003492:	dd08      	ble.n	80034a6 <scalbn+0x96>
 8003494:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003498:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800349c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80034a0:	ec45 4b10 	vmov	d0, r4, r5
 80034a4:	bd70      	pop	{r4, r5, r6, pc}
 80034a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80034aa:	da0d      	bge.n	80034c8 <scalbn+0xb8>
 80034ac:	f24c 3350 	movw	r3, #50000	; 0xc350
 80034b0:	429e      	cmp	r6, r3
 80034b2:	ec45 4b11 	vmov	d1, r4, r5
 80034b6:	dce1      	bgt.n	800347c <scalbn+0x6c>
 80034b8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80034e0 <scalbn+0xd0>
 80034bc:	f000 f81e 	bl	80034fc <copysign>
 80034c0:	a307      	add	r3, pc, #28	; (adr r3, 80034e0 <scalbn+0xd0>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	e7e0      	b.n	800348a <scalbn+0x7a>
 80034c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80034cc:	3236      	adds	r2, #54	; 0x36
 80034ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80034d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80034d6:	4620      	mov	r0, r4
 80034d8:	4629      	mov	r1, r5
 80034da:	2200      	movs	r2, #0
 80034dc:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <scalbn+0xe8>)
 80034de:	e7b2      	b.n	8003446 <scalbn+0x36>
 80034e0:	c2f8f359 	.word	0xc2f8f359
 80034e4:	01a56e1f 	.word	0x01a56e1f
 80034e8:	8800759c 	.word	0x8800759c
 80034ec:	7e37e43c 	.word	0x7e37e43c
 80034f0:	43500000 	.word	0x43500000
 80034f4:	ffff3cb0 	.word	0xffff3cb0
 80034f8:	3c900000 	.word	0x3c900000

080034fc <copysign>:
 80034fc:	ec51 0b10 	vmov	r0, r1, d0
 8003500:	ee11 0a90 	vmov	r0, s3
 8003504:	ee10 2a10 	vmov	r2, s0
 8003508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800350c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003510:	ea41 0300 	orr.w	r3, r1, r0
 8003514:	ec43 2b10 	vmov	d0, r2, r3
 8003518:	4770      	bx	lr
	...

0800351c <_init>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	bf00      	nop
 8003520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003522:	bc08      	pop	{r3}
 8003524:	469e      	mov	lr, r3
 8003526:	4770      	bx	lr

08003528 <_fini>:
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352a:	bf00      	nop
 800352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352e:	bc08      	pop	{r3}
 8003530:	469e      	mov	lr, r3
 8003532:	4770      	bx	lr
