
USB_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006be8  08006be8  00016be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c70  08006c70  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006c70  08006c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c78  08006c78  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c78  08006c78  00016c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08006c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001948  200001e4  08006e64  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001b2c  08006e64  00021b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001197f  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ac7  00000000  00000000  00031b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b08  00000000  00000000  00034660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c0  00000000  00000000  00035168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022c57  00000000  00000000  00035b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c27b  00000000  00000000  0005877f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3432  00000000  00000000  000649fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00127e2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ecc  00000000  00000000  00127ea8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bd0 	.word	0x08006bd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08006bd0 	.word	0x08006bd0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 f99c 	bl	80008c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f834 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f89c 	bl	80006c8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000590:	f005 f9b4 	bl	80058fc <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  sprintf(Tx_Buf,"Hello World %d\r\n",cnt++);
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <main+0x60>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	1c5a      	adds	r2, r3, #1
 800059a:	b2d1      	uxtb	r1, r2
 800059c:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <main+0x60>)
 800059e:	7011      	strb	r1, [r2, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	4910      	ldr	r1, [pc, #64]	; (80005e4 <main+0x64>)
 80005a4:	4810      	ldr	r0, [pc, #64]	; (80005e8 <main+0x68>)
 80005a6:	f005 ffaf 	bl	8006508 <siprintf>
	  CDC_Transmit_FS(Tx_Buf,strlen(Tx_Buf));
 80005aa:	480f      	ldr	r0, [pc, #60]	; (80005e8 <main+0x68>)
 80005ac:	f7ff fe10 	bl	80001d0 <strlen>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4619      	mov	r1, r3
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <main+0x68>)
 80005b6:	f005 fa6b 	bl	8005a90 <CDC_Transmit_FS>
	  HAL_Delay(250);
 80005ba:	20fa      	movs	r0, #250	; 0xfa
 80005bc:	f000 f9f2 	bl	80009a4 <HAL_Delay>

	  if(Rx_Flag)
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <main+0x6c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0e5      	beq.n	8000594 <main+0x14>
	  {
		  Rx_Flag = 0;
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <main+0x6c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS(Rx_Buf,strlen(Rx_Buf));
 80005ce:	4808      	ldr	r0, [pc, #32]	; (80005f0 <main+0x70>)
 80005d0:	f7ff fdfe 	bl	80001d0 <strlen>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	; (80005f0 <main+0x70>)
 80005da:	f005 fa59 	bl	8005a90 <CDC_Transmit_FS>
  {
 80005de:	e7d9      	b.n	8000594 <main+0x14>
 80005e0:	20000200 	.word	0x20000200
 80005e4:	08006be8 	.word	0x08006be8
 80005e8:	20000214 	.word	0x20000214
 80005ec:	20000201 	.word	0x20000201
 80005f0:	20000230 	.word	0x20000230

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f005 fec0 	bl	8006388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a27      	ldr	r2, [pc, #156]	; (80006c0 <SystemClock_Config+0xcc>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <SystemClock_Config+0xd0>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000668:	23a8      	movs	r3, #168	; 0xa8
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000670:	2307      	movs	r3, #7
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fde5 	bl	8002248 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000684:	f000 f848 	bl	8000718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000694:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2105      	movs	r1, #5
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 f83e 	bl	8002728 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006b2:	f000 f831 	bl	8000718 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_GPIO_Init+0x4c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <MX_GPIO_Init+0x4c>)
 80006d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <MX_GPIO_Init+0x4c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_GPIO_Init+0x4c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <MX_GPIO_Init+0x4c>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_GPIO_Init+0x4c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]

}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
	...

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <HAL_MspInit+0x4c>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <HAL_MspInit+0x4c>)
 8000738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073c:	6453      	str	r3, [r2, #68]	; 0x44
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <HAL_MspInit+0x4c>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_MspInit+0x4c>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <HAL_MspInit+0x4c>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	6413      	str	r3, [r2, #64]	; 0x40
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_MspInit+0x4c>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <MemManage_Handler+0x4>

08000792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <UsageFault_Handler+0x4>

0800079e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 f8ca 	bl	8000964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <OTG_FS_IRQHandler+0x10>)
 80007da:	f000 fd01 	bl	80011e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20001720 	.word	0x20001720

080007e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <_sbrk+0x50>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d102      	bne.n	80007fe <_sbrk+0x16>
		heap_end = &end;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <_sbrk+0x50>)
 80007fa:	4a10      	ldr	r2, [pc, #64]	; (800083c <_sbrk+0x54>)
 80007fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <_sbrk+0x50>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <_sbrk+0x50>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4413      	add	r3, r2
 800080c:	466a      	mov	r2, sp
 800080e:	4293      	cmp	r3, r2
 8000810:	d907      	bls.n	8000822 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000812:	f005 fd7f 	bl	8006314 <__errno>
 8000816:	4602      	mov	r2, r0
 8000818:	230c      	movs	r3, #12
 800081a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
 8000820:	e006      	b.n	8000830 <_sbrk+0x48>
	}

	heap_end += incr;
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <_sbrk+0x50>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	4a03      	ldr	r2, [pc, #12]	; (8000838 <_sbrk+0x50>)
 800082c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800082e:	68fb      	ldr	r3, [r7, #12]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000204 	.word	0x20000204
 800083c:	20001b30 	.word	0x20001b30

08000840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <SystemInit+0x28>)
 8000846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084a:	4a07      	ldr	r2, [pc, #28]	; (8000868 <SystemInit+0x28>)
 800084c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <SystemInit+0x28>)
 8000856:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800085a:	609a      	str	r2, [r3, #8]
#endif
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800086c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000870:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000872:	e003      	b.n	800087c <LoopCopyDataInit>

08000874 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000876:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000878:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800087a:	3104      	adds	r1, #4

0800087c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800087c:	480b      	ldr	r0, [pc, #44]	; (80008ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000880:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000882:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000884:	d3f6      	bcc.n	8000874 <CopyDataInit>
  ldr  r2, =_sbss
 8000886:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000888:	e002      	b.n	8000890 <LoopFillZerobss>

0800088a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800088a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800088c:	f842 3b04 	str.w	r3, [r2], #4

08000890 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000892:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000894:	d3f9      	bcc.n	800088a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000896:	f7ff ffd3 	bl	8000840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800089a:	f005 fd41 	bl	8006320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800089e:	f7ff fe6f 	bl	8000580 <main>
  bx  lr    
 80008a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008a8:	08006c80 	.word	0x08006c80
  ldr  r0, =_sdata
 80008ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008b0:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80008b4:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80008b8:	20001b2c 	.word	0x20001b2c

080008bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008bc:	e7fe      	b.n	80008bc <ADC_IRQHandler>
	...

080008c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <HAL_Init+0x40>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0d      	ldr	r2, [pc, #52]	; (8000900 <HAL_Init+0x40>)
 80008ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <HAL_Init+0x40>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <HAL_Init+0x40>)
 80008d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <HAL_Init+0x40>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a07      	ldr	r2, [pc, #28]	; (8000900 <HAL_Init+0x40>)
 80008e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e8:	2003      	movs	r0, #3
 80008ea:	f000 f94d 	bl	8000b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f000 f808 	bl	8000904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f4:	f7ff ff18 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023c00 	.word	0x40023c00

08000904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_InitTick+0x54>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_InitTick+0x58>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091a:	fbb3 f3f1 	udiv	r3, r3, r1
 800091e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f965 	bl	8000bf2 <HAL_SYSTICK_Config>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e00e      	b.n	8000950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b0f      	cmp	r3, #15
 8000936:	d80a      	bhi.n	800094e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000938:	2200      	movs	r2, #0
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	f04f 30ff 	mov.w	r0, #4294967295
 8000940:	f000 f92d 	bl	8000b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000944:	4a06      	ldr	r2, [pc, #24]	; (8000960 <HAL_InitTick+0x5c>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094a:	2300      	movs	r3, #0
 800094c:	e000      	b.n	8000950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000000 	.word	0x20000000
 800095c:	20000008 	.word	0x20000008
 8000960:	20000004 	.word	0x20000004

08000964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_IncTick+0x20>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_IncTick+0x24>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4413      	add	r3, r2
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <HAL_IncTick+0x24>)
 8000976:	6013      	str	r3, [r2, #0]
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20000008 	.word	0x20000008
 8000988:	2000024c 	.word	0x2000024c

0800098c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return uwTick;
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <HAL_GetTick+0x14>)
 8000992:	681b      	ldr	r3, [r3, #0]
}
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	2000024c 	.word	0x2000024c

080009a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009ac:	f7ff ffee 	bl	800098c <HAL_GetTick>
 80009b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009bc:	d005      	beq.n	80009ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_Delay+0x40>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	461a      	mov	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009ca:	bf00      	nop
 80009cc:	f7ff ffde 	bl	800098c <HAL_GetTick>
 80009d0:	4602      	mov	r2, r0
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d8f7      	bhi.n	80009cc <HAL_Delay+0x28>
  {
  }
}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000008 	.word	0x20000008

080009e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1a:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <__NVIC_GetPriorityGrouping+0x18>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	f003 0307 	and.w	r3, r3, #7
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db0b      	blt.n	8000a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 021f 	and.w	r2, r3, #31
 8000a64:	4907      	ldr	r1, [pc, #28]	; (8000a84 <__NVIC_EnableIRQ+0x38>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	095b      	lsrs	r3, r3, #5
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	db0a      	blt.n	8000ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	490c      	ldr	r1, [pc, #48]	; (8000ad4 <__NVIC_SetPriority+0x4c>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	0112      	lsls	r2, r2, #4
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	440b      	add	r3, r1
 8000aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab0:	e00a      	b.n	8000ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <__NVIC_SetPriority+0x50>)
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	3b04      	subs	r3, #4
 8000ac0:	0112      	lsls	r2, r2, #4
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	761a      	strb	r2, [r3, #24]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	f1c3 0307 	rsb	r3, r3, #7
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	bf28      	it	cs
 8000afa:	2304      	movcs	r3, #4
 8000afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3304      	adds	r3, #4
 8000b02:	2b06      	cmp	r3, #6
 8000b04:	d902      	bls.n	8000b0c <NVIC_EncodePriority+0x30>
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3b03      	subs	r3, #3
 8000b0a:	e000      	b.n	8000b0e <NVIC_EncodePriority+0x32>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	f04f 32ff 	mov.w	r2, #4294967295
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	401a      	ands	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	43d9      	mvns	r1, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	4313      	orrs	r3, r2
         );
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3724      	adds	r7, #36	; 0x24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b54:	d301      	bcc.n	8000b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00f      	b.n	8000b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <SysTick_Config+0x40>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b62:	210f      	movs	r1, #15
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f7ff ff8e 	bl	8000a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <SysTick_Config+0x40>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <SysTick_Config+0x40>)
 8000b74:	2207      	movs	r2, #7
 8000b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	e000e010 	.word	0xe000e010

08000b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff29 	bl	80009e8 <__NVIC_SetPriorityGrouping>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb0:	f7ff ff3e 	bl	8000a30 <__NVIC_GetPriorityGrouping>
 8000bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	6978      	ldr	r0, [r7, #20]
 8000bbc:	f7ff ff8e 	bl	8000adc <NVIC_EncodePriority>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff5d 	bl	8000a88 <__NVIC_SetPriority>
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff31 	bl	8000a4c <__NVIC_EnableIRQ>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ffa2 	bl	8000b44 <SysTick_Config>
 8000c00:	4603      	mov	r3, r0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
 8000c26:	e16b      	b.n	8000f00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c28:	2201      	movs	r2, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f040 815a 	bne.w	8000efa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d00b      	beq.n	8000c66 <HAL_GPIO_Init+0x5a>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d007      	beq.n	8000c66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c5a:	2b11      	cmp	r3, #17
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2b12      	cmp	r3, #18
 8000c64:	d130      	bne.n	8000cc8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	f003 0201 	and.w	r2, r3, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0xfc>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b12      	cmp	r3, #18
 8000d06:	d123      	bne.n	8000d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	08da      	lsrs	r2, r3, #3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3208      	adds	r2, #8
 8000d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	691a      	ldr	r2, [r3, #16]
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	69b9      	ldr	r1, [r7, #24]
 8000d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0203 	and.w	r2, r3, #3
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 80b4 	beq.w	8000efa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b5f      	ldr	r3, [pc, #380]	; (8000f14 <HAL_GPIO_Init+0x308>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a5e      	ldr	r2, [pc, #376]	; (8000f14 <HAL_GPIO_Init+0x308>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b5c      	ldr	r3, [pc, #368]	; (8000f14 <HAL_GPIO_Init+0x308>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dae:	4a5a      	ldr	r2, [pc, #360]	; (8000f18 <HAL_GPIO_Init+0x30c>)
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	3302      	adds	r3, #2
 8000db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a51      	ldr	r2, [pc, #324]	; (8000f1c <HAL_GPIO_Init+0x310>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d02b      	beq.n	8000e32 <HAL_GPIO_Init+0x226>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a50      	ldr	r2, [pc, #320]	; (8000f20 <HAL_GPIO_Init+0x314>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d025      	beq.n	8000e2e <HAL_GPIO_Init+0x222>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a4f      	ldr	r2, [pc, #316]	; (8000f24 <HAL_GPIO_Init+0x318>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d01f      	beq.n	8000e2a <HAL_GPIO_Init+0x21e>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a4e      	ldr	r2, [pc, #312]	; (8000f28 <HAL_GPIO_Init+0x31c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d019      	beq.n	8000e26 <HAL_GPIO_Init+0x21a>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4d      	ldr	r2, [pc, #308]	; (8000f2c <HAL_GPIO_Init+0x320>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d013      	beq.n	8000e22 <HAL_GPIO_Init+0x216>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4c      	ldr	r2, [pc, #304]	; (8000f30 <HAL_GPIO_Init+0x324>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d00d      	beq.n	8000e1e <HAL_GPIO_Init+0x212>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4b      	ldr	r2, [pc, #300]	; (8000f34 <HAL_GPIO_Init+0x328>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d007      	beq.n	8000e1a <HAL_GPIO_Init+0x20e>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4a      	ldr	r2, [pc, #296]	; (8000f38 <HAL_GPIO_Init+0x32c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d101      	bne.n	8000e16 <HAL_GPIO_Init+0x20a>
 8000e12:	2307      	movs	r3, #7
 8000e14:	e00e      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e16:	2308      	movs	r3, #8
 8000e18:	e00c      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e1a:	2306      	movs	r3, #6
 8000e1c:	e00a      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e1e:	2305      	movs	r3, #5
 8000e20:	e008      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e22:	2304      	movs	r3, #4
 8000e24:	e006      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e26:	2303      	movs	r3, #3
 8000e28:	e004      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e002      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e32:	2300      	movs	r3, #0
 8000e34:	69fa      	ldr	r2, [r7, #28]
 8000e36:	f002 0203 	and.w	r2, r2, #3
 8000e3a:	0092      	lsls	r2, r2, #2
 8000e3c:	4093      	lsls	r3, r2
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e44:	4934      	ldr	r1, [pc, #208]	; (8000f18 <HAL_GPIO_Init+0x30c>)
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e52:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <HAL_GPIO_Init+0x330>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e76:	4a31      	ldr	r2, [pc, #196]	; (8000f3c <HAL_GPIO_Init+0x330>)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <HAL_GPIO_Init+0x330>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ea0:	4a26      	ldr	r2, [pc, #152]	; (8000f3c <HAL_GPIO_Init+0x330>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ea6:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <HAL_GPIO_Init+0x330>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eca:	4a1c      	ldr	r2, [pc, #112]	; (8000f3c <HAL_GPIO_Init+0x330>)
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <HAL_GPIO_Init+0x330>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ef4:	4a11      	ldr	r2, [pc, #68]	; (8000f3c <HAL_GPIO_Init+0x330>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3301      	adds	r3, #1
 8000efe:	61fb      	str	r3, [r7, #28]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	f67f ae90 	bls.w	8000c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3724      	adds	r7, #36	; 0x24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40013800 	.word	0x40013800
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	40020400 	.word	0x40020400
 8000f24:	40020800 	.word	0x40020800
 8000f28:	40020c00 	.word	0x40020c00
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40021400 	.word	0x40021400
 8000f34:	40021800 	.word	0x40021800
 8000f38:	40021c00 	.word	0x40021c00
 8000f3c:	40013c00 	.word	0x40013c00

08000f40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f42:	b08f      	sub	sp, #60	; 0x3c
 8000f44:	af0a      	add	r7, sp, #40	; 0x28
 8000f46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e10f      	b.n	8001172 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d106      	bne.n	8000f72 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f004 fed5 	bl	8005d1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2203      	movs	r2, #3
 8000f76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d102      	bne.n	8000f8c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 fea8 	bl	8002ce6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	687e      	ldr	r6, [r7, #4]
 8000f9e:	466d      	mov	r5, sp
 8000fa0:	f106 0410 	add.w	r4, r6, #16
 8000fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000faa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fb4:	1d33      	adds	r3, r6, #4
 8000fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fb8:	6838      	ldr	r0, [r7, #0]
 8000fba:	f001 fd7f 	bl	8002abc <USB_CoreInit>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d005      	beq.n	8000fd0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e0d0      	b.n	8001172 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 fe96 	bl	8002d08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e04a      	b.n	8001078 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	1a9b      	subs	r3, r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	333d      	adds	r3, #61	; 0x3d
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	1a9b      	subs	r3, r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	333c      	adds	r3, #60	; 0x3c
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	b298      	uxth	r0, r3
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	1a9b      	subs	r3, r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	3342      	adds	r3, #66	; 0x42
 800101e:	4602      	mov	r2, r0
 8001020:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	1a9b      	subs	r3, r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	333f      	adds	r3, #63	; 0x3f
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	1a9b      	subs	r3, r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	3344      	adds	r3, #68	; 0x44
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	1a9b      	subs	r3, r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	3348      	adds	r3, #72	; 0x48
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	1a9b      	subs	r3, r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	3350      	adds	r3, #80	; 0x50
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	3301      	adds	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	d3af      	bcc.n	8000fe2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001082:	2300      	movs	r3, #0
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	e044      	b.n	8001112 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	1a9b      	subs	r3, r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	1a9b      	subs	r3, r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	1a9b      	subs	r3, r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	1a9b      	subs	r3, r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	1a9b      	subs	r3, r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	3301      	adds	r3, #1
 8001110:	73fb      	strb	r3, [r7, #15]
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	429a      	cmp	r2, r3
 800111a:	d3b5      	bcc.n	8001088 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	687e      	ldr	r6, [r7, #4]
 8001124:	466d      	mov	r5, sp
 8001126:	f106 0410 	add.w	r4, r6, #16
 800112a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800112c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800112e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001132:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001136:	e885 0003 	stmia.w	r5, {r0, r1}
 800113a:	1d33      	adds	r3, r6, #4
 800113c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800113e:	6838      	ldr	r0, [r7, #0]
 8001140:	f001 fe0c 	bl	8002d5c <USB_DevInit>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d005      	beq.n	8001156 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2202      	movs	r2, #2
 800114e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e00d      	b.n	8001172 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f002 fe4b 	bl	8003e06 <USB_DevDisconnect>

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800117a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800118e:	2b01      	cmp	r3, #1
 8001190:	d101      	bne.n	8001196 <HAL_PCD_Start+0x1c>
 8001192:	2302      	movs	r3, #2
 8001194:	e020      	b.n	80011d8 <HAL_PCD_Start+0x5e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d109      	bne.n	80011ba <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d005      	beq.n	80011ba <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 fe09 	bl	8003dd6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 fd7b 	bl	8002cc4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b08d      	sub	sp, #52	; 0x34
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 feb0 	bl	8003f5c <USB_GetMode>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f040 839d 	bne.w	800193e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f002 fe14 	bl	8003e36 <USB_ReadInterrupts>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 8393 	beq.w	800193c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f002 fe0b 	bl	8003e36 <USB_ReadInterrupts>
 8001220:	4603      	mov	r3, r0
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b02      	cmp	r3, #2
 8001228:	d107      	bne.n	800123a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	695a      	ldr	r2, [r3, #20]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f002 0202 	and.w	r2, r2, #2
 8001238:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f002 fdf9 	bl	8003e36 <USB_ReadInterrupts>
 8001244:	4603      	mov	r3, r0
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b10      	cmp	r3, #16
 800124c:	d161      	bne.n	8001312 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	699a      	ldr	r2, [r3, #24]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0210 	bic.w	r2, r2, #16
 800125c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	f003 020f 	and.w	r2, r3, #15
 800126a:	4613      	mov	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	1a9b      	subs	r3, r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	3304      	adds	r3, #4
 800127c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	0c5b      	lsrs	r3, r3, #17
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	2b02      	cmp	r3, #2
 8001288:	d124      	bne.n	80012d4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001290:	4013      	ands	r3, r2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d035      	beq.n	8001302 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	6a38      	ldr	r0, [r7, #32]
 80012aa:	f002 fc71 	bl	8003b90 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ba:	441a      	add	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	699a      	ldr	r2, [r3, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012cc:	441a      	add	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	619a      	str	r2, [r3, #24]
 80012d2:	e016      	b.n	8001302 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	0c5b      	lsrs	r3, r3, #17
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	2b06      	cmp	r3, #6
 80012de:	d110      	bne.n	8001302 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80012e6:	2208      	movs	r2, #8
 80012e8:	4619      	mov	r1, r3
 80012ea:	6a38      	ldr	r0, [r7, #32]
 80012ec:	f002 fc50 	bl	8003b90 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	699a      	ldr	r2, [r3, #24]
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012fc:	441a      	add	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	699a      	ldr	r2, [r3, #24]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0210 	orr.w	r2, r2, #16
 8001310:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f002 fd8d 	bl	8003e36 <USB_ReadInterrupts>
 800131c:	4603      	mov	r3, r0
 800131e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001322:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001326:	d16e      	bne.n	8001406 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fd93 	bl	8003e5c <USB_ReadDevAllOutEpInterrupt>
 8001336:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001338:	e062      	b.n	8001400 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800133a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d057      	beq.n	80013f4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f002 fdb8 	bl	8003ec4 <USB_ReadDevOutEPInterrupt>
 8001354:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00c      	beq.n	800137a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	015a      	lsls	r2, r3, #5
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	4413      	add	r3, r2
 8001368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800136c:	461a      	mov	r2, r3
 800136e:	2301      	movs	r3, #1
 8001370:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001372:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 fdb1 	bl	8001edc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00c      	beq.n	800139e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	015a      	lsls	r2, r3, #5
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	4413      	add	r3, r2
 800138c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001390:	461a      	mov	r2, r3
 8001392:	2308      	movs	r3, #8
 8001394:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001396:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 feab 	bl	80020f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	f003 0310 	and.w	r3, r3, #16
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	015a      	lsls	r2, r3, #5
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	4413      	add	r3, r2
 80013b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013b4:	461a      	mov	r2, r3
 80013b6:	2310      	movs	r3, #16
 80013b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	f003 0320 	and.w	r3, r3, #32
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d008      	beq.n	80013d6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	015a      	lsls	r2, r3, #5
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	4413      	add	r3, r2
 80013cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013d0:	461a      	mov	r2, r3
 80013d2:	2320      	movs	r3, #32
 80013d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d009      	beq.n	80013f4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	015a      	lsls	r2, r3, #5
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	4413      	add	r3, r2
 80013e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ec:	461a      	mov	r2, r3
 80013ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	3301      	adds	r3, #1
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	2b00      	cmp	r3, #0
 8001404:	d199      	bne.n	800133a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f002 fd13 	bl	8003e36 <USB_ReadInterrupts>
 8001410:	4603      	mov	r3, r0
 8001412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001416:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800141a:	f040 80c0 	bne.w	800159e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f002 fd34 	bl	8003e90 <USB_ReadDevAllInEpInterrupt>
 8001428:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800142e:	e0b2      	b.n	8001596 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 80a7 	beq.w	800158a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f002 fd5a 	bl	8003f00 <USB_ReadDevInEPInterrupt>
 800144c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d057      	beq.n	8001508 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	2201      	movs	r2, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800146c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43db      	mvns	r3, r3
 8001472:	69f9      	ldr	r1, [r7, #28]
 8001474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001478:	4013      	ands	r3, r2
 800147a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	015a      	lsls	r2, r3, #5
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	4413      	add	r3, r2
 8001484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001488:	461a      	mov	r2, r3
 800148a:	2301      	movs	r3, #1
 800148c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d132      	bne.n	80014fc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149a:	4613      	mov	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	1a9b      	subs	r3, r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	3348      	adds	r3, #72	; 0x48
 80014a6:	6819      	ldr	r1, [r3, #0]
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ac:	4613      	mov	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	1a9b      	subs	r3, r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4403      	add	r3, r0
 80014b6:	3344      	adds	r3, #68	; 0x44
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4419      	add	r1, r3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4403      	add	r3, r0
 80014ca:	3348      	adds	r3, #72	; 0x48
 80014cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d113      	bne.n	80014fc <HAL_PCD_IRQHandler+0x31c>
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d8:	4613      	mov	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	1a9b      	subs	r3, r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	3350      	adds	r3, #80	; 0x50
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d108      	bne.n	80014fc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80014f4:	461a      	mov	r2, r3
 80014f6:	2101      	movs	r1, #1
 80014f8:	f002 fd62 	bl	8003fc0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	4619      	mov	r1, r3
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f004 fc8b 	bl	8005e1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d008      	beq.n	8001524 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	015a      	lsls	r2, r3, #5
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	4413      	add	r3, r2
 800151a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800151e:	461a      	mov	r2, r3
 8001520:	2308      	movs	r3, #8
 8001522:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	2b00      	cmp	r3, #0
 800152c:	d008      	beq.n	8001540 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	015a      	lsls	r2, r3, #5
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	4413      	add	r3, r2
 8001536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800153a:	461a      	mov	r2, r3
 800153c:	2310      	movs	r3, #16
 800153e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001546:	2b00      	cmp	r3, #0
 8001548:	d008      	beq.n	800155c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	015a      	lsls	r2, r3, #5
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	4413      	add	r3, r2
 8001552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001556:	461a      	mov	r2, r3
 8001558:	2340      	movs	r3, #64	; 0x40
 800155a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d008      	beq.n	8001578 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	015a      	lsls	r2, r3, #5
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001572:	461a      	mov	r2, r3
 8001574:	2302      	movs	r3, #2
 8001576:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fc1b 	bl	8001dc0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	3301      	adds	r3, #1
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001592:	085b      	lsrs	r3, r3, #1
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001598:	2b00      	cmp	r3, #0
 800159a:	f47f af49 	bne.w	8001430 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 fc47 	bl	8003e36 <USB_ReadInterrupts>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015b2:	d122      	bne.n	80015fa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015c2:	f023 0301 	bic.w	r3, r3, #1
 80015c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d108      	bne.n	80015e4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015da:	2100      	movs	r1, #0
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 fe27 	bl	8002230 <HAL_PCDEx_LPM_Callback>
 80015e2:	e002      	b.n	80015ea <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f004 fc91 	bl	8005f0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f002 fc19 	bl	8003e36 <USB_ReadInterrupts>
 8001604:	4603      	mov	r3, r0
 8001606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800160e:	d112      	bne.n	8001636 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b01      	cmp	r3, #1
 800161e:	d102      	bne.n	8001626 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f004 fc4d 	bl	8005ec0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001634:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f002 fbfb 	bl	8003e36 <USB_ReadInterrupts>
 8001640:	4603      	mov	r3, r0
 8001642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800164a:	f040 80c7 	bne.w	80017dc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2110      	movs	r1, #16
 8001668:	4618      	mov	r0, r3
 800166a:	f001 fcdb 	bl	8003024 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001672:	e056      	b.n	8001722 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001676:	015a      	lsls	r2, r3, #5
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	4413      	add	r3, r2
 800167c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001680:	461a      	mov	r2, r3
 8001682:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001686:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168a:	015a      	lsls	r2, r3, #5
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	4413      	add	r3, r2
 8001690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001698:	0151      	lsls	r1, r2, #5
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	440a      	add	r2, r1
 800169e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016a6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80016a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b8:	0151      	lsls	r1, r2, #5
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	440a      	add	r2, r1
 80016be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ca:	015a      	lsls	r2, r3, #5
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	4413      	add	r3, r2
 80016d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016d4:	461a      	mov	r2, r3
 80016d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016de:	015a      	lsls	r2, r3, #5
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ec:	0151      	lsls	r1, r2, #5
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	440a      	add	r2, r1
 80016f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	015a      	lsls	r2, r3, #5
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	4413      	add	r3, r2
 8001704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800170c:	0151      	lsls	r1, r2, #5
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	440a      	add	r2, r1
 8001712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001716:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800171a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171e:	3301      	adds	r3, #1
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001728:	429a      	cmp	r2, r3
 800172a:	d3a3      	bcc.n	8001674 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800173a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800173e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	2b00      	cmp	r3, #0
 8001746:	d016      	beq.n	8001776 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800174e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001758:	f043 030b 	orr.w	r3, r3, #11
 800175c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800176e:	f043 030b 	orr.w	r3, r3, #11
 8001772:	6453      	str	r3, [r2, #68]	; 0x44
 8001774:	e015      	b.n	80017a2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001784:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001788:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800178c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800179c:	f043 030b 	orr.w	r3, r3, #11
 80017a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017c6:	461a      	mov	r2, r3
 80017c8:	f002 fbfa 	bl	8003fc0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fb28 	bl	8003e36 <USB_ReadInterrupts>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017f0:	d124      	bne.n	800183c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 fbbe 	bl	8003f78 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f001 fc70 	bl	80030e6 <USB_GetDevSpeed>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681c      	ldr	r4, [r3, #0]
 8001812:	f001 f947 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8001816:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800181c:	b2db      	uxtb	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	4620      	mov	r0, r4
 8001822:	f001 f9ad 	bl	8002b80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f004 fb21 	bl	8005e6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800183a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f002 faf8 	bl	8003e36 <USB_ReadInterrupts>
 8001846:	4603      	mov	r3, r0
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b08      	cmp	r3, #8
 800184e:	d10a      	bne.n	8001866 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f004 fafe 	bl	8005e52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f002 0208 	and.w	r2, r2, #8
 8001864:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f002 fae3 	bl	8003e36 <USB_ReadInterrupts>
 8001870:	4603      	mov	r3, r0
 8001872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800187a:	d10f      	bne.n	800189c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	b2db      	uxtb	r3, r3
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f004 fb60 	bl	8005f4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800189a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f002 fac8 	bl	8003e36 <USB_ReadInterrupts>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018b0:	d10f      	bne.n	80018d2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4619      	mov	r1, r3
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f004 fb33 	bl	8005f28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695a      	ldr	r2, [r3, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80018d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 faad 	bl	8003e36 <USB_ReadInterrupts>
 80018dc:	4603      	mov	r3, r0
 80018de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e6:	d10a      	bne.n	80018fe <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f004 fb41 	bl	8005f70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80018fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f002 fa97 	bl	8003e36 <USB_ReadInterrupts>
 8001908:	4603      	mov	r3, r0
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b04      	cmp	r3, #4
 8001910:	d115      	bne.n	800193e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f004 fb31 	bl	8005f8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	430a      	orrs	r2, r1
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	e000      	b.n	800193e <HAL_PCD_IRQHandler+0x75e>
      return;
 800193c:	bf00      	nop
    }
  }
}
 800193e:	3734      	adds	r7, #52	; 0x34
 8001940:	46bd      	mov	sp, r7
 8001942:	bd90      	pop	{r4, r7, pc}

08001944 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_PCD_SetAddress+0x1a>
 800195a:	2302      	movs	r3, #2
 800195c:	e013      	b.n	8001986 <HAL_PCD_SetAddress+0x42>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f002 fa07 	bl	8003d8a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	4608      	mov	r0, r1
 8001998:	4611      	mov	r1, r2
 800199a:	461a      	mov	r2, r3
 800199c:	4603      	mov	r3, r0
 800199e:	70fb      	strb	r3, [r7, #3]
 80019a0:	460b      	mov	r3, r1
 80019a2:	803b      	strh	r3, [r7, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	da0f      	bge.n	80019d4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	f003 020f 	and.w	r2, r3, #15
 80019ba:	4613      	mov	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	1a9b      	subs	r3, r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	3338      	adds	r3, #56	; 0x38
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	4413      	add	r3, r2
 80019c8:	3304      	adds	r3, #4
 80019ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2201      	movs	r2, #1
 80019d0:	705a      	strb	r2, [r3, #1]
 80019d2:	e00f      	b.n	80019f4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	f003 020f 	and.w	r2, r3, #15
 80019da:	4613      	mov	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	1a9b      	subs	r3, r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	3304      	adds	r3, #4
 80019ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a00:	883a      	ldrh	r2, [r7, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	78ba      	ldrb	r2, [r7, #2]
 8001a0a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	785b      	ldrb	r3, [r3, #1]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d004      	beq.n	8001a1e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a1e:	78bb      	ldrb	r3, [r7, #2]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d102      	bne.n	8001a2a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_PCD_EP_Open+0xaa>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e00e      	b.n	8001a56 <HAL_PCD_EP_Open+0xc8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68f9      	ldr	r1, [r7, #12]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f001 fb72 	bl	8003130 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001a54:	7afb      	ldrb	r3, [r7, #11]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	da0f      	bge.n	8001a92 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	f003 020f 	and.w	r2, r3, #15
 8001a78:	4613      	mov	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	3338      	adds	r3, #56	; 0x38
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	3304      	adds	r3, #4
 8001a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	705a      	strb	r2, [r3, #1]
 8001a90:	e00f      	b.n	8001ab2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	f003 020f 	and.w	r2, r3, #15
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_PCD_EP_Close+0x6e>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e00e      	b.n	8001aea <HAL_PCD_EP_Close+0x8c>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68f9      	ldr	r1, [r7, #12]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f001 fbb0 	bl	8003240 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	460b      	mov	r3, r1
 8001b00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b02:	7afb      	ldrb	r3, [r7, #11]
 8001b04:	f003 020f 	and.w	r2, r3, #15
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	1a9b      	subs	r3, r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	3304      	adds	r3, #4
 8001b1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2200      	movs	r2, #0
 8001b32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b34:	7afb      	ldrb	r3, [r7, #11]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d102      	bne.n	8001b4e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b4e:	7afb      	ldrb	r3, [r7, #11]
 8001b50:	f003 030f 	and.w	r3, r3, #15
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d109      	bne.n	8001b6c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	6979      	ldr	r1, [r7, #20]
 8001b66:	f001 fe8b 	bl	8003880 <USB_EP0StartXfer>
 8001b6a:	e008      	b.n	8001b7e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	6979      	ldr	r1, [r7, #20]
 8001b7a:	f001 fc3d 	bl	80033f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	f003 020f 	and.w	r2, r3, #15
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bc8:	7afb      	ldrb	r3, [r7, #11]
 8001bca:	f003 020f 	and.w	r2, r3, #15
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	1a9b      	subs	r3, r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	3338      	adds	r3, #56	; 0x38
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	3304      	adds	r3, #4
 8001bde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bf8:	7afb      	ldrb	r3, [r7, #11]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d102      	bne.n	8001c12 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c12:	7afb      	ldrb	r3, [r7, #11]
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d109      	bne.n	8001c30 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	6979      	ldr	r1, [r7, #20]
 8001c2a:	f001 fe29 	bl	8003880 <USB_EP0StartXfer>
 8001c2e:	e008      	b.n	8001c42 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	6979      	ldr	r1, [r7, #20]
 8001c3e:	f001 fbdb 	bl	80033f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	f003 020f 	and.w	r2, r3, #15
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d901      	bls.n	8001c6a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e050      	b.n	8001d0c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	da0f      	bge.n	8001c92 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	f003 020f 	and.w	r2, r3, #15
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	1a9b      	subs	r3, r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3338      	adds	r3, #56	; 0x38
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	3304      	adds	r3, #4
 8001c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	705a      	strb	r2, [r3, #1]
 8001c90:	e00d      	b.n	8001cae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c92:	78fa      	ldrb	r2, [r7, #3]
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_PCD_EP_SetStall+0x82>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e01e      	b.n	8001d0c <HAL_PCD_EP_SetStall+0xc0>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68f9      	ldr	r1, [r7, #12]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f001 ff80 	bl	8003be2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10a      	bne.n	8001d02 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	b2d9      	uxtb	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f002 f95f 	bl	8003fc0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	f003 020f 	and.w	r2, r3, #15
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d901      	bls.n	8001d32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e042      	b.n	8001db8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	da0f      	bge.n	8001d5a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	f003 020f 	and.w	r2, r3, #15
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	3338      	adds	r3, #56	; 0x38
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3304      	adds	r3, #4
 8001d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2201      	movs	r2, #1
 8001d56:	705a      	strb	r2, [r3, #1]
 8001d58:	e00f      	b.n	8001d7a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	f003 020f 	and.w	r2, r3, #15
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	3304      	adds	r3, #4
 8001d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_PCD_EP_ClrStall+0x86>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e00e      	b.n	8001db8 <HAL_PCD_EP_ClrStall+0xa4>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68f9      	ldr	r1, [r7, #12]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f001 ff88 	bl	8003cbe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	1a9b      	subs	r3, r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	3338      	adds	r3, #56	; 0x38
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	3304      	adds	r3, #4
 8001de6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	699a      	ldr	r2, [r3, #24]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d901      	bls.n	8001df8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e06c      	b.n	8001ed2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d902      	bls.n	8001e14 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	3303      	adds	r3, #3
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e1c:	e02b      	b.n	8001e76 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d902      	bls.n	8001e3a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3303      	adds	r3, #3
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	68d9      	ldr	r1, [r3, #12]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	4603      	mov	r3, r0
 8001e58:	6978      	ldr	r0, [r7, #20]
 8001e5a:	f001 fe64 	bl	8003b26 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	441a      	add	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	441a      	add	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	015a      	lsls	r2, r3, #5
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d809      	bhi.n	8001ea0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	699a      	ldr	r2, [r3, #24]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d203      	bcs.n	8001ea0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1be      	bne.n	8001e1e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	695a      	ldr	r2, [r3, #20]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d811      	bhi.n	8001ed0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	6939      	ldr	r1, [r7, #16]
 8001ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ecc:	4013      	ands	r3, r2
 8001ece:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3720      	adds	r7, #32
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	333c      	adds	r3, #60	; 0x3c
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	f040 80a0 	bne.w	8002054 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d015      	beq.n	8001f4a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4a72      	ldr	r2, [pc, #456]	; (80020ec <PCD_EP_OutXfrComplete_int+0x210>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	f240 80dd 	bls.w	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80d7 	beq.w	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	015a      	lsls	r2, r3, #5
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f40:	461a      	mov	r2, r3
 8001f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f46:	6093      	str	r3, [r2, #8]
 8001f48:	e0cb      	b.n	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d009      	beq.n	8001f68 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f60:	461a      	mov	r2, r3
 8001f62:	2320      	movs	r3, #32
 8001f64:	6093      	str	r3, [r2, #8]
 8001f66:	e0bc      	b.n	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 80b7 	bne.w	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4a5d      	ldr	r2, [pc, #372]	; (80020ec <PCD_EP_OutXfrComplete_int+0x210>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d90f      	bls.n	8001f9c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f92:	461a      	mov	r2, r3
 8001f94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f98:	6093      	str	r3, [r2, #8]
 8001f9a:	e0a2      	b.n	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fae:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	0159      	lsls	r1, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001fc2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4403      	add	r3, r0
 8001fd2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001fd6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fea:	6819      	ldr	r1, [r3, #0]
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4403      	add	r3, r0
 8001ffa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4419      	add	r1, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4403      	add	r3, r0
 8002010:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002014:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d114      	bne.n	8002046 <PCD_EP_OutXfrComplete_int+0x16a>
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	1a9b      	subs	r3, r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d108      	bne.n	8002046 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800203e:	461a      	mov	r2, r3
 8002040:	2101      	movs	r1, #1
 8002042:	f001 ffbd 	bl	8003fc0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	4619      	mov	r1, r3
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f003 fecb 	bl	8005de8 <HAL_PCD_DataOutStageCallback>
 8002052:	e046      	b.n	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4a26      	ldr	r2, [pc, #152]	; (80020f0 <PCD_EP_OutXfrComplete_int+0x214>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d124      	bne.n	80020a6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4413      	add	r3, r2
 800206e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002072:	461a      	mov	r2, r3
 8002074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002078:	6093      	str	r3, [r2, #8]
 800207a:	e032      	b.n	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b00      	cmp	r3, #0
 8002084:	d008      	beq.n	8002098 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002092:	461a      	mov	r2, r3
 8002094:	2320      	movs	r3, #32
 8002096:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	4619      	mov	r1, r3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f003 fea2 	bl	8005de8 <HAL_PCD_DataOutStageCallback>
 80020a4:	e01d      	b.n	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d114      	bne.n	80020d6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d108      	bne.n	80020d6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020ce:	461a      	mov	r2, r3
 80020d0:	2100      	movs	r1, #0
 80020d2:	f001 ff75 	bl	8003fc0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	4619      	mov	r1, r3
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f003 fe83 	bl	8005de8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	4f54300a 	.word	0x4f54300a
 80020f0:	4f54310a 	.word	0x4f54310a

080020f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	333c      	adds	r3, #60	; 0x3c
 800210c:	3304      	adds	r3, #4
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4a15      	ldr	r2, [pc, #84]	; (800217c <PCD_EP_OutSetupPacket_int+0x88>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d90e      	bls.n	8002148 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002130:	2b00      	cmp	r3, #0
 8002132:	d009      	beq.n	8002148 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	015a      	lsls	r2, r3, #5
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4413      	add	r3, r2
 800213c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002140:	461a      	mov	r2, r3
 8002142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002146:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f003 fe3b 	bl	8005dc4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4a0a      	ldr	r2, [pc, #40]	; (800217c <PCD_EP_OutSetupPacket_int+0x88>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d90c      	bls.n	8002170 <PCD_EP_OutSetupPacket_int+0x7c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d108      	bne.n	8002170 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002168:	461a      	mov	r2, r3
 800216a:	2101      	movs	r1, #1
 800216c:	f001 ff28 	bl	8003fc0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	4f54300a 	.word	0x4f54300a

08002180 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
 800218c:	4613      	mov	r3, r2
 800218e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d107      	bne.n	80021ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800219e:	883b      	ldrh	r3, [r7, #0]
 80021a0:	0419      	lsls	r1, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28
 80021ac:	e028      	b.n	8002200 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	0c1b      	lsrs	r3, r3, #16
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	4413      	add	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e00d      	b.n	80021de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	3340      	adds	r3, #64	; 0x40
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	4413      	add	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	3301      	adds	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d3ec      	bcc.n	80021c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80021e8:	883b      	ldrh	r3, [r7, #0]
 80021ea:	0418      	lsls	r0, r3, #16
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6819      	ldr	r1, [r3, #0]
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	4302      	orrs	r2, r0
 80021f8:	3340      	adds	r3, #64	; 0x40
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e25b      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d075      	beq.n	8002352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002266:	4ba3      	ldr	r3, [pc, #652]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b04      	cmp	r3, #4
 8002270:	d00c      	beq.n	800228c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002272:	4ba0      	ldr	r3, [pc, #640]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800227a:	2b08      	cmp	r3, #8
 800227c:	d112      	bne.n	80022a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227e:	4b9d      	ldr	r3, [pc, #628]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800228a:	d10b      	bne.n	80022a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	4b99      	ldr	r3, [pc, #612]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d05b      	beq.n	8002350 <HAL_RCC_OscConfig+0x108>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d157      	bne.n	8002350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e236      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ac:	d106      	bne.n	80022bc <HAL_RCC_OscConfig+0x74>
 80022ae:	4b91      	ldr	r3, [pc, #580]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a90      	ldr	r2, [pc, #576]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e01d      	b.n	80022f8 <HAL_RCC_OscConfig+0xb0>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x98>
 80022c6:	4b8b      	ldr	r3, [pc, #556]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a8a      	ldr	r2, [pc, #552]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b88      	ldr	r3, [pc, #544]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a87      	ldr	r2, [pc, #540]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e00b      	b.n	80022f8 <HAL_RCC_OscConfig+0xb0>
 80022e0:	4b84      	ldr	r3, [pc, #528]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a83      	ldr	r2, [pc, #524]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b81      	ldr	r3, [pc, #516]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a80      	ldr	r2, [pc, #512]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe fb44 	bl	800098c <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002308:	f7fe fb40 	bl	800098c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1fb      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	4b76      	ldr	r3, [pc, #472]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0xc0>
 8002326:	e014      	b.n	8002352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7fe fb30 	bl	800098c <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002330:	f7fe fb2c 	bl	800098c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e1e7      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002342:	4b6c      	ldr	r3, [pc, #432]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0xe8>
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d063      	beq.n	8002426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800235e:	4b65      	ldr	r3, [pc, #404]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800236a:	4b62      	ldr	r3, [pc, #392]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002372:	2b08      	cmp	r3, #8
 8002374:	d11c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002376:	4b5f      	ldr	r3, [pc, #380]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d116      	bne.n	80023b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	4b5c      	ldr	r3, [pc, #368]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_RCC_OscConfig+0x152>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d001      	beq.n	800239a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e1bb      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239a:	4b56      	ldr	r3, [pc, #344]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4952      	ldr	r1, [pc, #328]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ae:	e03a      	b.n	8002426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b8:	4b4f      	ldr	r3, [pc, #316]	; (80024f8 <HAL_RCC_OscConfig+0x2b0>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023be:	f7fe fae5 	bl	800098c <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c6:	f7fe fae1 	bl	800098c <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e19c      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d8:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e4:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4940      	ldr	r1, [pc, #256]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
 80023f8:	e015      	b.n	8002426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fa:	4b3f      	ldr	r3, [pc, #252]	; (80024f8 <HAL_RCC_OscConfig+0x2b0>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7fe fac4 	bl	800098c <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002408:	f7fe fac0 	bl	800098c <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e17b      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241a:	4b36      	ldr	r3, [pc, #216]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d030      	beq.n	8002494 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d016      	beq.n	8002468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243a:	4b30      	ldr	r3, [pc, #192]	; (80024fc <HAL_RCC_OscConfig+0x2b4>)
 800243c:	2201      	movs	r2, #1
 800243e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7fe faa4 	bl	800098c <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002448:	f7fe faa0 	bl	800098c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e15b      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x200>
 8002466:	e015      	b.n	8002494 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002468:	4b24      	ldr	r3, [pc, #144]	; (80024fc <HAL_RCC_OscConfig+0x2b4>)
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7fe fa8d 	bl	800098c <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002476:	f7fe fa89 	bl	800098c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e144      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002488:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800248a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f0      	bne.n	8002476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80a0 	beq.w	80025e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10f      	bne.n	80024d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c0:	6413      	str	r3, [r2, #64]	; 0x40
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ce:	2301      	movs	r3, #1
 80024d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_OscConfig+0x2b8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d121      	bne.n	8002522 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_RCC_OscConfig+0x2b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a07      	ldr	r2, [pc, #28]	; (8002500 <HAL_RCC_OscConfig+0x2b8>)
 80024e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ea:	f7fe fa4f 	bl	800098c <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	e011      	b.n	8002516 <HAL_RCC_OscConfig+0x2ce>
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800
 80024f8:	42470000 	.word	0x42470000
 80024fc:	42470e80 	.word	0x42470e80
 8002500:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002504:	f7fe fa42 	bl	800098c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e0fd      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002516:	4b81      	ldr	r3, [pc, #516]	; (800271c <HAL_RCC_OscConfig+0x4d4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d106      	bne.n	8002538 <HAL_RCC_OscConfig+0x2f0>
 800252a:	4b7d      	ldr	r3, [pc, #500]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	4a7c      	ldr	r2, [pc, #496]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6713      	str	r3, [r2, #112]	; 0x70
 8002536:	e01c      	b.n	8002572 <HAL_RCC_OscConfig+0x32a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b05      	cmp	r3, #5
 800253e:	d10c      	bne.n	800255a <HAL_RCC_OscConfig+0x312>
 8002540:	4b77      	ldr	r3, [pc, #476]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002544:	4a76      	ldr	r2, [pc, #472]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	6713      	str	r3, [r2, #112]	; 0x70
 800254c:	4b74      	ldr	r3, [pc, #464]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	4a73      	ldr	r2, [pc, #460]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6713      	str	r3, [r2, #112]	; 0x70
 8002558:	e00b      	b.n	8002572 <HAL_RCC_OscConfig+0x32a>
 800255a:	4b71      	ldr	r3, [pc, #452]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	4a70      	ldr	r2, [pc, #448]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	6713      	str	r3, [r2, #112]	; 0x70
 8002566:	4b6e      	ldr	r3, [pc, #440]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	4a6d      	ldr	r2, [pc, #436]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 800256c:	f023 0304 	bic.w	r3, r3, #4
 8002570:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d015      	beq.n	80025a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257a:	f7fe fa07 	bl	800098c <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7fe fa03 	bl	800098c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0bc      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002598:	4b61      	ldr	r3, [pc, #388]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ee      	beq.n	8002582 <HAL_RCC_OscConfig+0x33a>
 80025a4:	e014      	b.n	80025d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a6:	f7fe f9f1 	bl	800098c <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7fe f9ed 	bl	800098c <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e0a6      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c4:	4b56      	ldr	r3, [pc, #344]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ee      	bne.n	80025ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d105      	bne.n	80025e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d6:	4b52      	ldr	r3, [pc, #328]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	4a51      	ldr	r2, [pc, #324]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80025dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8092 	beq.w	8002710 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ec:	4b4c      	ldr	r3, [pc, #304]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d05c      	beq.n	80026b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d141      	bne.n	8002684 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002600:	4b48      	ldr	r3, [pc, #288]	; (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7fe f9c1 	bl	800098c <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260e:	f7fe f9bd 	bl	800098c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e078      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002620:	4b3f      	ldr	r3, [pc, #252]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69da      	ldr	r2, [r3, #28]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	019b      	lsls	r3, r3, #6
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	085b      	lsrs	r3, r3, #1
 8002644:	3b01      	subs	r3, #1
 8002646:	041b      	lsls	r3, r3, #16
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264e:	061b      	lsls	r3, r3, #24
 8002650:	4933      	ldr	r1, [pc, #204]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002656:	4b33      	ldr	r3, [pc, #204]	; (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7fe f996 	bl	800098c <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe f992 	bl	800098c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e04d      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002676:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x41c>
 8002682:	e045      	b.n	8002710 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002684:	4b27      	ldr	r3, [pc, #156]	; (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7fe f97f 	bl	800098c <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002692:	f7fe f97b 	bl	800098c <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e036      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a4:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f0      	bne.n	8002692 <HAL_RCC_OscConfig+0x44a>
 80026b0:	e02e      	b.n	8002710 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e029      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026be:	4b18      	ldr	r3, [pc, #96]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d11c      	bne.n	800270c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d115      	bne.n	800270c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026e6:	4013      	ands	r3, r2
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d10d      	bne.n	800270c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d106      	bne.n	800270c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40007000 	.word	0x40007000
 8002720:	40023800 	.word	0x40023800
 8002724:	42470060 	.word	0x42470060

08002728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0cc      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800273c:	4b68      	ldr	r3, [pc, #416]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d90c      	bls.n	8002764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b65      	ldr	r3, [pc, #404]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b63      	ldr	r3, [pc, #396]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0b8      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800277c:	4b59      	ldr	r3, [pc, #356]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a58      	ldr	r2, [pc, #352]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002794:	4b53      	ldr	r3, [pc, #332]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800279e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a0:	4b50      	ldr	r3, [pc, #320]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	494d      	ldr	r1, [pc, #308]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d044      	beq.n	8002848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	4b47      	ldr	r3, [pc, #284]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d119      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e07f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d003      	beq.n	80027e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e6:	4b3f      	ldr	r3, [pc, #252]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e06f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f6:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e067      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002806:	4b37      	ldr	r3, [pc, #220]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f023 0203 	bic.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4934      	ldr	r1, [pc, #208]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	4313      	orrs	r3, r2
 8002816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002818:	f7fe f8b8 	bl	800098c <HAL_GetTick>
 800281c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	e00a      	b.n	8002836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002820:	f7fe f8b4 	bl	800098c <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	; 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e04f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 020c 	and.w	r2, r3, #12
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	429a      	cmp	r2, r3
 8002846:	d1eb      	bne.n	8002820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002848:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d20c      	bcs.n	8002870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e032      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4916      	ldr	r1, [pc, #88]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	490e      	ldr	r1, [pc, #56]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ae:	f000 f821 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 80028b2:	4601      	mov	r1, r0
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	5cd3      	ldrb	r3, [r2, r3]
 80028c2:	fa21 f303 	lsr.w	r3, r1, r3
 80028c6:	4a09      	ldr	r2, [pc, #36]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe f818 	bl	8000904 <HAL_InitTick>

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023c00 	.word	0x40023c00
 80028e4:	40023800 	.word	0x40023800
 80028e8:	08006c2c 	.word	0x08006c2c
 80028ec:	20000000 	.word	0x20000000
 80028f0:	20000004 	.word	0x20000004

080028f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	2300      	movs	r3, #0
 8002904:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800290a:	4b63      	ldr	r3, [pc, #396]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b04      	cmp	r3, #4
 8002914:	d007      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0x32>
 8002916:	2b08      	cmp	r3, #8
 8002918:	d008      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x38>
 800291a:	2b00      	cmp	r3, #0
 800291c:	f040 80b4 	bne.w	8002a88 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002920:	4b5e      	ldr	r3, [pc, #376]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002922:	60bb      	str	r3, [r7, #8]
       break;
 8002924:	e0b3      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002926:	4b5e      	ldr	r3, [pc, #376]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002928:	60bb      	str	r3, [r7, #8]
      break;
 800292a:	e0b0      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800292c:	4b5a      	ldr	r3, [pc, #360]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002934:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002936:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d04a      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002942:	4b55      	ldr	r3, [pc, #340]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	099b      	lsrs	r3, r3, #6
 8002948:	f04f 0400 	mov.w	r4, #0
 800294c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	ea03 0501 	and.w	r5, r3, r1
 8002958:	ea04 0602 	and.w	r6, r4, r2
 800295c:	4629      	mov	r1, r5
 800295e:	4632      	mov	r2, r6
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	f04f 0400 	mov.w	r4, #0
 8002968:	0154      	lsls	r4, r2, #5
 800296a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800296e:	014b      	lsls	r3, r1, #5
 8002970:	4619      	mov	r1, r3
 8002972:	4622      	mov	r2, r4
 8002974:	1b49      	subs	r1, r1, r5
 8002976:	eb62 0206 	sbc.w	r2, r2, r6
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	f04f 0400 	mov.w	r4, #0
 8002982:	0194      	lsls	r4, r2, #6
 8002984:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002988:	018b      	lsls	r3, r1, #6
 800298a:	1a5b      	subs	r3, r3, r1
 800298c:	eb64 0402 	sbc.w	r4, r4, r2
 8002990:	f04f 0100 	mov.w	r1, #0
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	00e2      	lsls	r2, r4, #3
 800299a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800299e:	00d9      	lsls	r1, r3, #3
 80029a0:	460b      	mov	r3, r1
 80029a2:	4614      	mov	r4, r2
 80029a4:	195b      	adds	r3, r3, r5
 80029a6:	eb44 0406 	adc.w	r4, r4, r6
 80029aa:	f04f 0100 	mov.w	r1, #0
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	0262      	lsls	r2, r4, #9
 80029b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80029b8:	0259      	lsls	r1, r3, #9
 80029ba:	460b      	mov	r3, r1
 80029bc:	4614      	mov	r4, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	4621      	mov	r1, r4
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f04f 0400 	mov.w	r4, #0
 80029c8:	461a      	mov	r2, r3
 80029ca:	4623      	mov	r3, r4
 80029cc:	f7fd fc58 	bl	8000280 <__aeabi_uldivmod>
 80029d0:	4603      	mov	r3, r0
 80029d2:	460c      	mov	r4, r1
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	e049      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d8:	4b2f      	ldr	r3, [pc, #188]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	f04f 0400 	mov.w	r4, #0
 80029e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	ea03 0501 	and.w	r5, r3, r1
 80029ee:	ea04 0602 	and.w	r6, r4, r2
 80029f2:	4629      	mov	r1, r5
 80029f4:	4632      	mov	r2, r6
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	f04f 0400 	mov.w	r4, #0
 80029fe:	0154      	lsls	r4, r2, #5
 8002a00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a04:	014b      	lsls	r3, r1, #5
 8002a06:	4619      	mov	r1, r3
 8002a08:	4622      	mov	r2, r4
 8002a0a:	1b49      	subs	r1, r1, r5
 8002a0c:	eb62 0206 	sbc.w	r2, r2, r6
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	f04f 0400 	mov.w	r4, #0
 8002a18:	0194      	lsls	r4, r2, #6
 8002a1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a1e:	018b      	lsls	r3, r1, #6
 8002a20:	1a5b      	subs	r3, r3, r1
 8002a22:	eb64 0402 	sbc.w	r4, r4, r2
 8002a26:	f04f 0100 	mov.w	r1, #0
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	00e2      	lsls	r2, r4, #3
 8002a30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a34:	00d9      	lsls	r1, r3, #3
 8002a36:	460b      	mov	r3, r1
 8002a38:	4614      	mov	r4, r2
 8002a3a:	195b      	adds	r3, r3, r5
 8002a3c:	eb44 0406 	adc.w	r4, r4, r6
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	02a2      	lsls	r2, r4, #10
 8002a4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a4e:	0299      	lsls	r1, r3, #10
 8002a50:	460b      	mov	r3, r1
 8002a52:	4614      	mov	r4, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	4621      	mov	r1, r4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f04f 0400 	mov.w	r4, #0
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4623      	mov	r3, r4
 8002a62:	f7fd fc0d 	bl	8000280 <__aeabi_uldivmod>
 8002a66:	4603      	mov	r3, r0
 8002a68:	460c      	mov	r4, r1
 8002a6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	3301      	adds	r3, #1
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	60bb      	str	r3, [r7, #8]
      break;
 8002a86:	e002      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a8a:	60bb      	str	r3, [r7, #8]
      break;
 8002a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	00f42400 	.word	0x00f42400
 8002aa0:	007a1200 	.word	0x007a1200

08002aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000000 	.word	0x20000000

08002abc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002abc:	b084      	sub	sp, #16
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	f107 001c 	add.w	r0, r7, #28
 8002aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d122      	bne.n	8002b1a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d105      	bne.n	8002b0e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f001 fab4 	bl	800407c <USB_CoreReset>
 8002b14:	4603      	mov	r3, r0
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	e01a      	b.n	8002b50 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f001 faa8 	bl	800407c <USB_CoreReset>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	639a      	str	r2, [r3, #56]	; 0x38
 8002b42:	e005      	b.n	8002b50 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d10b      	bne.n	8002b6e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f043 0206 	orr.w	r2, r3, #6
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f043 0220 	orr.w	r2, r3, #32
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b7a:	b004      	add	sp, #16
 8002b7c:	4770      	bx	lr
	...

08002b80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d165      	bne.n	8002c60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4a41      	ldr	r2, [pc, #260]	; (8002c9c <USB_SetTurnaroundTime+0x11c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d906      	bls.n	8002baa <USB_SetTurnaroundTime+0x2a>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4a40      	ldr	r2, [pc, #256]	; (8002ca0 <USB_SetTurnaroundTime+0x120>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d802      	bhi.n	8002baa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002ba4:	230f      	movs	r3, #15
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e062      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	4a3c      	ldr	r2, [pc, #240]	; (8002ca0 <USB_SetTurnaroundTime+0x120>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d906      	bls.n	8002bc0 <USB_SetTurnaroundTime+0x40>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	4a3b      	ldr	r2, [pc, #236]	; (8002ca4 <USB_SetTurnaroundTime+0x124>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d802      	bhi.n	8002bc0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002bba:	230e      	movs	r3, #14
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	e057      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4a38      	ldr	r2, [pc, #224]	; (8002ca4 <USB_SetTurnaroundTime+0x124>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d906      	bls.n	8002bd6 <USB_SetTurnaroundTime+0x56>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4a37      	ldr	r2, [pc, #220]	; (8002ca8 <USB_SetTurnaroundTime+0x128>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d802      	bhi.n	8002bd6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002bd0:	230d      	movs	r3, #13
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e04c      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	4a33      	ldr	r2, [pc, #204]	; (8002ca8 <USB_SetTurnaroundTime+0x128>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d906      	bls.n	8002bec <USB_SetTurnaroundTime+0x6c>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4a32      	ldr	r2, [pc, #200]	; (8002cac <USB_SetTurnaroundTime+0x12c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d802      	bhi.n	8002bec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002be6:	230c      	movs	r3, #12
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	e041      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4a2f      	ldr	r2, [pc, #188]	; (8002cac <USB_SetTurnaroundTime+0x12c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d906      	bls.n	8002c02 <USB_SetTurnaroundTime+0x82>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4a2e      	ldr	r2, [pc, #184]	; (8002cb0 <USB_SetTurnaroundTime+0x130>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d802      	bhi.n	8002c02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002bfc:	230b      	movs	r3, #11
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	e036      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	4a2a      	ldr	r2, [pc, #168]	; (8002cb0 <USB_SetTurnaroundTime+0x130>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d906      	bls.n	8002c18 <USB_SetTurnaroundTime+0x98>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4a29      	ldr	r2, [pc, #164]	; (8002cb4 <USB_SetTurnaroundTime+0x134>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d802      	bhi.n	8002c18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002c12:	230a      	movs	r3, #10
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e02b      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4a26      	ldr	r2, [pc, #152]	; (8002cb4 <USB_SetTurnaroundTime+0x134>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d906      	bls.n	8002c2e <USB_SetTurnaroundTime+0xae>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4a25      	ldr	r2, [pc, #148]	; (8002cb8 <USB_SetTurnaroundTime+0x138>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d802      	bhi.n	8002c2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002c28:	2309      	movs	r3, #9
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e020      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4a21      	ldr	r2, [pc, #132]	; (8002cb8 <USB_SetTurnaroundTime+0x138>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d906      	bls.n	8002c44 <USB_SetTurnaroundTime+0xc4>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	4a20      	ldr	r2, [pc, #128]	; (8002cbc <USB_SetTurnaroundTime+0x13c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d802      	bhi.n	8002c44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002c3e:	2308      	movs	r3, #8
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	e015      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <USB_SetTurnaroundTime+0x13c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d906      	bls.n	8002c5a <USB_SetTurnaroundTime+0xda>
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <USB_SetTurnaroundTime+0x140>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d802      	bhi.n	8002c5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002c54:	2307      	movs	r3, #7
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	e00a      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002c5a:	2306      	movs	r3, #6
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	e007      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002c66:	2309      	movs	r3, #9
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e001      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002c6c:	2309      	movs	r3, #9
 8002c6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	029b      	lsls	r3, r3, #10
 8002c84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	371c      	adds	r7, #28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	00d8acbf 	.word	0x00d8acbf
 8002ca0:	00e4e1bf 	.word	0x00e4e1bf
 8002ca4:	00f423ff 	.word	0x00f423ff
 8002ca8:	0106737f 	.word	0x0106737f
 8002cac:	011a499f 	.word	0x011a499f
 8002cb0:	01312cff 	.word	0x01312cff
 8002cb4:	014ca43f 	.word	0x014ca43f
 8002cb8:	016e35ff 	.word	0x016e35ff
 8002cbc:	01a6ab1f 	.word	0x01a6ab1f
 8002cc0:	01e847ff 	.word	0x01e847ff

08002cc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f043 0201 	orr.w	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f023 0201 	bic.w	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d106      	bne.n	8002d34 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	e00b      	b.n	8002d4c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	e001      	b.n	8002d4c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e003      	b.n	8002d54 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002d4c:	2032      	movs	r0, #50	; 0x32
 8002d4e:	f7fd fe29 	bl	80009a4 <HAL_Delay>

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b086      	sub	sp, #24
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	e009      	b.n	8002d90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	3340      	adds	r3, #64	; 0x40
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	2200      	movs	r2, #0
 8002d88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b0e      	cmp	r3, #14
 8002d94:	d9f2      	bls.n	8002d7c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d11c      	bne.n	8002dd6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002daa:	f043 0302 	orr.w	r3, r3, #2
 8002dae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	639a      	str	r2, [r3, #56]	; 0x38
 8002dd4:	e00b      	b.n	8002dee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002df4:	461a      	mov	r2, r3
 8002df6:	2300      	movs	r3, #0
 8002df8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e00:	4619      	mov	r1, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e08:	461a      	mov	r2, r3
 8002e0a:	680b      	ldr	r3, [r1, #0]
 8002e0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d10c      	bne.n	8002e2e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d104      	bne.n	8002e24 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f949 	bl	80030b4 <USB_SetDevSpeed>
 8002e22:	e008      	b.n	8002e36 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002e24:	2101      	movs	r1, #1
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f944 	bl	80030b4 <USB_SetDevSpeed>
 8002e2c:	e003      	b.n	8002e36 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002e2e:	2103      	movs	r1, #3
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f93f 	bl	80030b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002e36:	2110      	movs	r1, #16
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f8f3 	bl	8003024 <USB_FlushTxFifo>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f911 	bl	8003070 <USB_FlushRxFifo>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2300      	movs	r3, #0
 8002e62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e76:	461a      	mov	r2, r3
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	e043      	b.n	8002f0a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e98:	d118      	bne.n	8002ecc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10a      	bne.n	8002eb6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eac:	461a      	mov	r2, r3
 8002eae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	e013      	b.n	8002ede <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e008      	b.n	8002ede <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2300      	movs	r3, #0
 8002edc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eea:	461a      	mov	r2, r3
 8002eec:	2300      	movs	r3, #0
 8002eee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002efc:	461a      	mov	r2, r3
 8002efe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	3301      	adds	r3, #1
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d3b7      	bcc.n	8002e82 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	e043      	b.n	8002fa0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f2e:	d118      	bne.n	8002f62 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10a      	bne.n	8002f4c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f42:	461a      	mov	r2, r3
 8002f44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e013      	b.n	8002f74 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	e008      	b.n	8002f74 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2300      	movs	r3, #0
 8002f72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f80:	461a      	mov	r2, r3
 8002f82:	2300      	movs	r3, #0
 8002f84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f92:	461a      	mov	r2, r3
 8002f94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d3b7      	bcc.n	8002f18 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002fc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d105      	bne.n	8002fdc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f043 0210 	orr.w	r2, r3, #16
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699a      	ldr	r2, [r3, #24]
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <USB_DevInit+0x2c4>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f043 0208 	orr.w	r2, r3, #8
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d107      	bne.n	8003010 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003008:	f043 0304 	orr.w	r3, r3, #4
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003010:	7dfb      	ldrb	r3, [r7, #23]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800301c:	b004      	add	sp, #16
 800301e:	4770      	bx	lr
 8003020:	803c3800 	.word	0x803c3800

08003024 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	019b      	lsls	r3, r3, #6
 8003036:	f043 0220 	orr.w	r2, r3, #32
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3301      	adds	r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a09      	ldr	r2, [pc, #36]	; (800306c <USB_FlushTxFifo+0x48>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e006      	b.n	800305e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b20      	cmp	r3, #32
 800305a:	d0f0      	beq.n	800303e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	00030d40 	.word	0x00030d40

08003070 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2210      	movs	r2, #16
 8003080:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3301      	adds	r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <USB_FlushRxFifo+0x40>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e006      	b.n	80030a2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b10      	cmp	r3, #16
 800309e:	d0f0      	beq.n	8003082 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	00030d40 	.word	0x00030d40

080030b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	68f9      	ldr	r1, [r7, #12]
 80030d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b087      	sub	sp, #28
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0306 	and.w	r3, r3, #6
 80030fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d102      	bne.n	800310c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003106:	2300      	movs	r3, #0
 8003108:	75fb      	strb	r3, [r7, #23]
 800310a:	e00a      	b.n	8003122 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d002      	beq.n	8003118 <USB_GetDevSpeed+0x32>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b06      	cmp	r3, #6
 8003116:	d102      	bne.n	800311e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003118:	2302      	movs	r3, #2
 800311a:	75fb      	strb	r3, [r7, #23]
 800311c:	e001      	b.n	8003122 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800311e:	230f      	movs	r3, #15
 8003120:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003122:	7dfb      	ldrb	r3, [r7, #23]
}
 8003124:	4618      	mov	r0, r3
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	785b      	ldrb	r3, [r3, #1]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d13a      	bne.n	80031c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	2101      	movs	r1, #1
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	b29b      	uxth	r3, r3
 8003164:	68f9      	ldr	r1, [r7, #12]
 8003166:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800316a:	4313      	orrs	r3, r2
 800316c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d155      	bne.n	8003230 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	78db      	ldrb	r3, [r3, #3]
 800319e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80031a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	059b      	lsls	r3, r3, #22
 80031a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80031a8:	4313      	orrs	r3, r2
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	0151      	lsls	r1, r2, #5
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	440a      	add	r2, r1
 80031b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	e036      	b.n	8003230 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c8:	69da      	ldr	r2, [r3, #28]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	2101      	movs	r1, #1
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	041b      	lsls	r3, r3, #16
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11a      	bne.n	8003230 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	78db      	ldrb	r3, [r3, #3]
 8003214:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003216:	430b      	orrs	r3, r1
 8003218:	4313      	orrs	r3, r2
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	0151      	lsls	r1, r2, #5
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	440a      	add	r2, r1
 8003222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800322e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	785b      	ldrb	r3, [r3, #1]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d161      	bne.n	8003320 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800326e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003272:	d11f      	bne.n	80032b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	0151      	lsls	r1, r2, #5
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	440a      	add	r2, r1
 800328a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800328e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003292:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	0151      	lsls	r1, r2, #5
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	440a      	add	r2, r1
 80032aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	68f9      	ldr	r1, [r7, #12]
 80032d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032d4:	4013      	ands	r3, r2
 80032d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	68f9      	ldr	r1, [r7, #12]
 80032f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032f8:	4013      	ands	r3, r2
 80032fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4413      	add	r3, r2
 8003304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	0159      	lsls	r1, r3, #5
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	440b      	add	r3, r1
 8003312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003316:	4619      	mov	r1, r3
 8003318:	4b35      	ldr	r3, [pc, #212]	; (80033f0 <USB_DeactivateEndpoint+0x1b0>)
 800331a:	4013      	ands	r3, r2
 800331c:	600b      	str	r3, [r1, #0]
 800331e:	e060      	b.n	80033e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003336:	d11f      	bne.n	8003378 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	0151      	lsls	r1, r2, #5
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	440a      	add	r2, r1
 800334e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003352:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003356:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	0151      	lsls	r1, r2, #5
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	440a      	add	r2, r1
 800336e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003372:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003376:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	2101      	movs	r1, #1
 800338a:	fa01 f303 	lsl.w	r3, r1, r3
 800338e:	041b      	lsls	r3, r3, #16
 8003390:	43db      	mvns	r3, r3
 8003392:	68f9      	ldr	r1, [r7, #12]
 8003394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003398:	4013      	ands	r3, r2
 800339a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a2:	69da      	ldr	r2, [r3, #28]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	2101      	movs	r1, #1
 80033ae:	fa01 f303 	lsl.w	r3, r1, r3
 80033b2:	041b      	lsls	r3, r3, #16
 80033b4:	43db      	mvns	r3, r3
 80033b6:	68f9      	ldr	r1, [r7, #12]
 80033b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033bc:	4013      	ands	r3, r2
 80033be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	0159      	lsls	r1, r3, #5
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	440b      	add	r3, r1
 80033d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033da:	4619      	mov	r1, r3
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <USB_DeactivateEndpoint+0x1b4>)
 80033de:	4013      	ands	r3, r2
 80033e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	ec337800 	.word	0xec337800
 80033f4:	eff37800 	.word	0xeff37800

080033f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	4613      	mov	r3, r2
 8003404:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	785b      	ldrb	r3, [r3, #1]
 8003414:	2b01      	cmp	r3, #1
 8003416:	f040 815c 	bne.w	80036d2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d132      	bne.n	8003488 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	4413      	add	r3, r2
 800342a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	0151      	lsls	r1, r2, #5
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	440a      	add	r2, r1
 8003438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800343c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003440:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003444:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	0151      	lsls	r1, r2, #5
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	440a      	add	r2, r1
 800345c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003464:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	0151      	lsls	r1, r2, #5
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	440a      	add	r2, r1
 800347c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003480:	0cdb      	lsrs	r3, r3, #19
 8003482:	04db      	lsls	r3, r3, #19
 8003484:	6113      	str	r3, [r2, #16]
 8003486:	e074      	b.n	8003572 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	0151      	lsls	r1, r2, #5
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	440a      	add	r2, r1
 800349e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034a2:	0cdb      	lsrs	r3, r3, #19
 80034a4:	04db      	lsls	r3, r3, #19
 80034a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	0151      	lsls	r1, r2, #5
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	440a      	add	r2, r1
 80034be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80034c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80034ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	6959      	ldr	r1, [r3, #20]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	440b      	add	r3, r1
 80034e4:	1e59      	subs	r1, r3, #1
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ee:	04d9      	lsls	r1, r3, #19
 80034f0:	4b9d      	ldr	r3, [pc, #628]	; (8003768 <USB_EPStartXfer+0x370>)
 80034f2:	400b      	ands	r3, r1
 80034f4:	69b9      	ldr	r1, [r7, #24]
 80034f6:	0148      	lsls	r0, r1, #5
 80034f8:	69f9      	ldr	r1, [r7, #28]
 80034fa:	4401      	add	r1, r0
 80034fc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003500:	4313      	orrs	r3, r2
 8003502:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	4413      	add	r3, r2
 800350c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800351a:	69b9      	ldr	r1, [r7, #24]
 800351c:	0148      	lsls	r0, r1, #5
 800351e:	69f9      	ldr	r1, [r7, #28]
 8003520:	4401      	add	r1, r0
 8003522:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003526:	4313      	orrs	r3, r2
 8003528:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	78db      	ldrb	r3, [r3, #3]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d11f      	bne.n	8003572 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	0151      	lsls	r1, r2, #5
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	440a      	add	r2, r1
 8003548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800354c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003550:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	0151      	lsls	r1, r2, #5
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	440a      	add	r2, r1
 8003568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800356c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003570:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d14b      	bne.n	8003610 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d009      	beq.n	8003594 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	461a      	mov	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	78db      	ldrb	r3, [r3, #3]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d128      	bne.n	80035ee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d110      	bne.n	80035ce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	0151      	lsls	r1, r2, #5
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	440a      	add	r2, r1
 80035c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e00f      	b.n	80035ee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	0151      	lsls	r1, r2, #5
 80035e0:	69fa      	ldr	r2, [r7, #28]
 80035e2:	440a      	add	r2, r1
 80035e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	0151      	lsls	r1, r2, #5
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	440a      	add	r2, r1
 8003604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003608:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e12f      	b.n	8003870 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	4413      	add	r3, r2
 8003618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	0151      	lsls	r1, r2, #5
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	440a      	add	r2, r1
 8003626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800362a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800362e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	78db      	ldrb	r3, [r3, #3]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d015      	beq.n	8003664 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8117 	beq.w	8003870 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	2101      	movs	r1, #1
 8003654:	fa01 f303 	lsl.w	r3, r1, r3
 8003658:	69f9      	ldr	r1, [r7, #28]
 800365a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800365e:	4313      	orrs	r3, r2
 8003660:	634b      	str	r3, [r1, #52]	; 0x34
 8003662:	e105      	b.n	8003870 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d110      	bne.n	8003696 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	0151      	lsls	r1, r2, #5
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	440a      	add	r2, r1
 800368a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800368e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	e00f      	b.n	80036b6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	0151      	lsls	r1, r2, #5
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	440a      	add	r2, r1
 80036ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	68d9      	ldr	r1, [r3, #12]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	b298      	uxth	r0, r3
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	4603      	mov	r3, r0
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fa2b 	bl	8003b26 <USB_WritePacket>
 80036d0:	e0ce      	b.n	8003870 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	0151      	lsls	r1, r2, #5
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	440a      	add	r2, r1
 80036e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036ec:	0cdb      	lsrs	r3, r3, #19
 80036ee:	04db      	lsls	r3, r3, #19
 80036f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	0151      	lsls	r1, r2, #5
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	440a      	add	r2, r1
 8003708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800370c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003710:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003714:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d126      	bne.n	800376c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003734:	69b9      	ldr	r1, [r7, #24]
 8003736:	0148      	lsls	r0, r1, #5
 8003738:	69f9      	ldr	r1, [r7, #28]
 800373a:	4401      	add	r1, r0
 800373c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003740:	4313      	orrs	r3, r2
 8003742:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	0151      	lsls	r1, r2, #5
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	440a      	add	r2, r1
 800375a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800375e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003762:	6113      	str	r3, [r2, #16]
 8003764:	e036      	b.n	80037d4 <USB_EPStartXfer+0x3dc>
 8003766:	bf00      	nop
 8003768:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4413      	add	r3, r2
 8003776:	1e5a      	subs	r2, r3, #1
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003780:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	8afb      	ldrh	r3, [r7, #22]
 8003792:	04d9      	lsls	r1, r3, #19
 8003794:	4b39      	ldr	r3, [pc, #228]	; (800387c <USB_EPStartXfer+0x484>)
 8003796:	400b      	ands	r3, r1
 8003798:	69b9      	ldr	r1, [r7, #24]
 800379a:	0148      	lsls	r0, r1, #5
 800379c:	69f9      	ldr	r1, [r7, #28]
 800379e:	4401      	add	r1, r0
 80037a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80037a4:	4313      	orrs	r3, r2
 80037a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	8af9      	ldrh	r1, [r7, #22]
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c4:	69b9      	ldr	r1, [r7, #24]
 80037c6:	0148      	lsls	r0, r1, #5
 80037c8:	69f9      	ldr	r1, [r7, #28]
 80037ca:	4401      	add	r1, r0
 80037cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80037d0:	4313      	orrs	r3, r2
 80037d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d10d      	bne.n	80037f6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	68d9      	ldr	r1, [r3, #12]
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f2:	460a      	mov	r2, r1
 80037f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	78db      	ldrb	r3, [r3, #3]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d128      	bne.n	8003850 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d110      	bne.n	8003830 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	0151      	lsls	r1, r2, #5
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	440a      	add	r2, r1
 8003824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003828:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e00f      	b.n	8003850 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	0151      	lsls	r1, r2, #5
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	440a      	add	r2, r1
 8003846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800384a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	0151      	lsls	r1, r2, #5
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	440a      	add	r2, r1
 8003866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800386a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800386e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3720      	adds	r7, #32
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	1ff80000 	.word	0x1ff80000

08003880 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	4613      	mov	r3, r2
 800388c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	785b      	ldrb	r3, [r3, #1]
 800389c:	2b01      	cmp	r3, #1
 800389e:	f040 80cd 	bne.w	8003a3c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d132      	bne.n	8003910 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	0151      	lsls	r1, r2, #5
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	440a      	add	r2, r1
 80038c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	0151      	lsls	r1, r2, #5
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	440a      	add	r2, r1
 80038e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	0151      	lsls	r1, r2, #5
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	440a      	add	r2, r1
 8003904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003908:	0cdb      	lsrs	r3, r3, #19
 800390a:	04db      	lsls	r3, r3, #19
 800390c:	6113      	str	r3, [r2, #16]
 800390e:	e04e      	b.n	80039ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	0151      	lsls	r1, r2, #5
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	440a      	add	r2, r1
 8003926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800392a:	0cdb      	lsrs	r3, r3, #19
 800392c:	04db      	lsls	r3, r3, #19
 800392e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	0151      	lsls	r1, r2, #5
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	440a      	add	r2, r1
 8003946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800394a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800394e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003952:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	429a      	cmp	r2, r3
 800395e:	d903      	bls.n	8003968 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	0151      	lsls	r1, r2, #5
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	440a      	add	r2, r1
 800397e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003982:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003986:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399e:	6939      	ldr	r1, [r7, #16]
 80039a0:	0148      	lsls	r0, r1, #5
 80039a2:	6979      	ldr	r1, [r7, #20]
 80039a4:	4401      	add	r1, r0
 80039a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80039aa:	4313      	orrs	r3, r2
 80039ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d11e      	bne.n	80039f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d009      	beq.n	80039d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c8:	461a      	mov	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	0151      	lsls	r1, r2, #5
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	440a      	add	r2, r1
 80039e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	e092      	b.n	8003b18 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	0151      	lsls	r1, r2, #5
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	440a      	add	r2, r1
 8003a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a10:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d07e      	beq.n	8003b18 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	6979      	ldr	r1, [r7, #20]
 8003a32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a36:	4313      	orrs	r3, r2
 8003a38:	634b      	str	r3, [r1, #52]	; 0x34
 8003a3a:	e06d      	b.n	8003b18 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	0151      	lsls	r1, r2, #5
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	440a      	add	r2, r1
 8003a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a56:	0cdb      	lsrs	r3, r3, #19
 8003a58:	04db      	lsls	r3, r3, #19
 8003a5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	0151      	lsls	r1, r2, #5
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	440a      	add	r2, r1
 8003a72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a7e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	0151      	lsls	r1, r2, #5
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	440a      	add	r2, r1
 8003aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003aae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac6:	6939      	ldr	r1, [r7, #16]
 8003ac8:	0148      	lsls	r0, r1, #5
 8003aca:	6979      	ldr	r1, [r7, #20]
 8003acc:	4401      	add	r1, r0
 8003ace:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d10d      	bne.n	8003af8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d009      	beq.n	8003af8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	68d9      	ldr	r1, [r3, #12]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af4:	460a      	mov	r2, r1
 8003af6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	0151      	lsls	r1, r2, #5
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	440a      	add	r2, r1
 8003b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b089      	sub	sp, #36	; 0x24
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	4611      	mov	r1, r2
 8003b32:	461a      	mov	r2, r3
 8003b34:	460b      	mov	r3, r1
 8003b36:	71fb      	strb	r3, [r7, #7]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003b44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d11a      	bne.n	8003b82 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003b4c:	88bb      	ldrh	r3, [r7, #4]
 8003b4e:	3303      	adds	r3, #3
 8003b50:	089b      	lsrs	r3, r3, #2
 8003b52:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	e00f      	b.n	8003b7a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	031a      	lsls	r2, r3, #12
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b66:	461a      	mov	r2, r3
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3304      	adds	r3, #4
 8003b72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	3301      	adds	r3, #1
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d3eb      	bcc.n	8003b5a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3724      	adds	r7, #36	; 0x24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	; 0x24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	3303      	adds	r3, #3
 8003baa:	089b      	lsrs	r3, r3, #2
 8003bac:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	e00b      	b.n	8003bcc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	601a      	str	r2, [r3, #0]
    pDest++;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d3ef      	bcc.n	8003bb4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003bd4:	69fb      	ldr	r3, [r7, #28]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3724      	adds	r7, #36	; 0x24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b085      	sub	sp, #20
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	785b      	ldrb	r3, [r3, #1]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d12c      	bne.n	8003c58 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	db12      	blt.n	8003c36 <USB_EPSetStall+0x54>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00f      	beq.n	8003c36 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	0151      	lsls	r1, r2, #5
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	440a      	add	r2, r1
 8003c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c34:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	0151      	lsls	r1, r2, #5
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	440a      	add	r2, r1
 8003c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e02b      	b.n	8003cb0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	db12      	blt.n	8003c90 <USB_EPSetStall+0xae>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00f      	beq.n	8003c90 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	0151      	lsls	r1, r2, #5
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	440a      	add	r2, r1
 8003c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c8e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	0151      	lsls	r1, r2, #5
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003caa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b085      	sub	sp, #20
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	785b      	ldrb	r3, [r3, #1]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d128      	bne.n	8003d2c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	0151      	lsls	r1, r2, #5
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	440a      	add	r2, r1
 8003cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cf8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	78db      	ldrb	r3, [r3, #3]
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d003      	beq.n	8003d0a <USB_EPClearStall+0x4c>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	78db      	ldrb	r3, [r3, #3]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d138      	bne.n	8003d7c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	0151      	lsls	r1, r2, #5
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	440a      	add	r2, r1
 8003d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	e027      	b.n	8003d7c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	0151      	lsls	r1, r2, #5
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	440a      	add	r2, r1
 8003d42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d4a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	78db      	ldrb	r3, [r3, #3]
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d003      	beq.n	8003d5c <USB_EPClearStall+0x9e>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	78db      	ldrb	r3, [r3, #3]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d10f      	bne.n	8003d7c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	0151      	lsls	r1, r2, #5
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	440a      	add	r2, r1
 8003d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b085      	sub	sp, #20
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003da8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003dac:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003dbe:	68f9      	ldr	r1, [r7, #12]
 8003dc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003df0:	f023 0302 	bic.w	r3, r3, #2
 8003df4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003df6:	2003      	movs	r0, #3
 8003df8:	f7fc fdd4 	bl	80009a4 <HAL_Delay>

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e20:	f043 0302 	orr.w	r3, r3, #2
 8003e24:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003e26:	2003      	movs	r0, #3
 8003e28:	f7fc fdbc 	bl	80009a4 <HAL_Delay>

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	0c1b      	lsrs	r3, r3, #16
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	b29b      	uxth	r3, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f22:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f30:	01db      	lsls	r3, r3, #7
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	f003 0301 	and.w	r3, r3, #1
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f92:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f96:	f023 0307 	bic.w	r3, r3, #7
 8003f9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	333c      	adds	r3, #60	; 0x3c
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4a26      	ldr	r2, [pc, #152]	; (8004078 <USB_EP0_OutStart+0xb8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d90a      	bls.n	8003ffa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ff4:	d101      	bne.n	8003ffa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e037      	b.n	800406a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004000:	461a      	mov	r2, r3
 8004002:	2300      	movs	r3, #0
 8004004:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004014:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004018:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004028:	f043 0318 	orr.w	r3, r3, #24
 800402c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800403c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004040:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004042:	7afb      	ldrb	r3, [r7, #11]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d10f      	bne.n	8004068 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404e:	461a      	mov	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004062:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004066:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	371c      	adds	r7, #28
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	4f54300a 	.word	0x4f54300a

0800407c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3301      	adds	r3, #1
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <USB_CoreReset+0x64>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e01b      	b.n	80040d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	daf2      	bge.n	8004088 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f043 0201 	orr.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3301      	adds	r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <USB_CoreReset+0x64>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e006      	b.n	80040d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d0f0      	beq.n	80040b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	00030d40 	.word	0x00030d40

080040e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80040f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80040f4:	f002 f938 	bl	8006368 <malloc>
 80040f8:	4603      	mov	r3, r0
 80040fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d105      	bne.n	800410e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800410a:	2302      	movs	r3, #2
 800410c:	e066      	b.n	80041dc <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	7c1b      	ldrb	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d119      	bne.n	8004152 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800411e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004122:	2202      	movs	r2, #2
 8004124:	2181      	movs	r1, #129	; 0x81
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f001 ffa5 	bl	8006076 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004136:	2202      	movs	r2, #2
 8004138:	2101      	movs	r1, #1
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f001 ff9b 	bl	8006076 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2210      	movs	r2, #16
 800414c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004150:	e016      	b.n	8004180 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004152:	2340      	movs	r3, #64	; 0x40
 8004154:	2202      	movs	r2, #2
 8004156:	2181      	movs	r1, #129	; 0x81
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f001 ff8c 	bl	8006076 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004164:	2340      	movs	r3, #64	; 0x40
 8004166:	2202      	movs	r2, #2
 8004168:	2101      	movs	r1, #1
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f001 ff83 	bl	8006076 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2210      	movs	r2, #16
 800417c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004180:	2308      	movs	r3, #8
 8004182:	2203      	movs	r2, #3
 8004184:	2182      	movs	r1, #130	; 0x82
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f001 ff75 	bl	8006076 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	7c1b      	ldrb	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041c0:	2101      	movs	r1, #1
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f002 f846 	bl	8006254 <USBD_LL_PrepareReceive>
 80041c8:	e007      	b.n	80041da <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041d0:	2340      	movs	r3, #64	; 0x40
 80041d2:	2101      	movs	r1, #1
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f002 f83d 	bl	8006254 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80041f4:	2181      	movs	r1, #129	; 0x81
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f001 ff63 	bl	80060c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004202:	2101      	movs	r1, #1
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f001 ff5c 	bl	80060c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004212:	2182      	movs	r1, #130	; 0x82
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f001 ff54 	bl	80060c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00e      	beq.n	8004252 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004244:	4618      	mov	r0, r3
 8004246:	f002 f897 	bl	8006378 <free>
    pdev->pClassData = NULL;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004252:	7bfb      	ldrb	r3, [r7, #15]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800426c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004282:	2b00      	cmp	r3, #0
 8004284:	d03a      	beq.n	80042fc <USBD_CDC_Setup+0xa0>
 8004286:	2b20      	cmp	r3, #32
 8004288:	f040 8097 	bne.w	80043ba <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	88db      	ldrh	r3, [r3, #6]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d029      	beq.n	80042e8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	b25b      	sxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	da11      	bge.n	80042c2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80042aa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	88d2      	ldrh	r2, [r2, #6]
 80042b0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80042b2:	6939      	ldr	r1, [r7, #16]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	88db      	ldrh	r3, [r3, #6]
 80042b8:	461a      	mov	r2, r3
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f001 fa9d 	bl	80057fa <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80042c0:	e082      	b.n	80043c8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	785a      	ldrb	r2, [r3, #1]
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	88db      	ldrh	r3, [r3, #6]
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80042d8:	6939      	ldr	r1, [r7, #16]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	88db      	ldrh	r3, [r3, #6]
 80042de:	461a      	mov	r2, r3
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f001 fab6 	bl	8005852 <USBD_CtlPrepareRx>
    break;
 80042e6:	e06f      	b.n	80043c8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	7850      	ldrb	r0, [r2, #1]
 80042f4:	2200      	movs	r2, #0
 80042f6:	6839      	ldr	r1, [r7, #0]
 80042f8:	4798      	blx	r3
    break;
 80042fa:	e065      	b.n	80043c8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	785b      	ldrb	r3, [r3, #1]
 8004300:	2b0b      	cmp	r3, #11
 8004302:	d84f      	bhi.n	80043a4 <USBD_CDC_Setup+0x148>
 8004304:	a201      	add	r2, pc, #4	; (adr r2, 800430c <USBD_CDC_Setup+0xb0>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	0800433d 	.word	0x0800433d
 8004310:	080043b3 	.word	0x080043b3
 8004314:	080043a5 	.word	0x080043a5
 8004318:	080043a5 	.word	0x080043a5
 800431c:	080043a5 	.word	0x080043a5
 8004320:	080043a5 	.word	0x080043a5
 8004324:	080043a5 	.word	0x080043a5
 8004328:	080043a5 	.word	0x080043a5
 800432c:	080043a5 	.word	0x080043a5
 8004330:	080043a5 	.word	0x080043a5
 8004334:	08004365 	.word	0x08004365
 8004338:	0800438d 	.word	0x0800438d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004342:	2b03      	cmp	r3, #3
 8004344:	d107      	bne.n	8004356 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004346:	f107 030c 	add.w	r3, r7, #12
 800434a:	2202      	movs	r2, #2
 800434c:	4619      	mov	r1, r3
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f001 fa53 	bl	80057fa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004354:	e030      	b.n	80043b8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004356:	6839      	ldr	r1, [r7, #0]
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f001 f9dd 	bl	8005718 <USBD_CtlError>
        ret = USBD_FAIL;
 800435e:	2303      	movs	r3, #3
 8004360:	75fb      	strb	r3, [r7, #23]
      break;
 8004362:	e029      	b.n	80043b8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800436a:	2b03      	cmp	r3, #3
 800436c:	d107      	bne.n	800437e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800436e:	f107 030f 	add.w	r3, r7, #15
 8004372:	2201      	movs	r2, #1
 8004374:	4619      	mov	r1, r3
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f001 fa3f 	bl	80057fa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800437c:	e01c      	b.n	80043b8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800437e:	6839      	ldr	r1, [r7, #0]
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f001 f9c9 	bl	8005718 <USBD_CtlError>
        ret = USBD_FAIL;
 8004386:	2303      	movs	r3, #3
 8004388:	75fb      	strb	r3, [r7, #23]
      break;
 800438a:	e015      	b.n	80043b8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004392:	2b03      	cmp	r3, #3
 8004394:	d00f      	beq.n	80043b6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004396:	6839      	ldr	r1, [r7, #0]
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f001 f9bd 	bl	8005718 <USBD_CtlError>
        ret = USBD_FAIL;
 800439e:	2303      	movs	r3, #3
 80043a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80043a2:	e008      	b.n	80043b6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80043a4:	6839      	ldr	r1, [r7, #0]
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f001 f9b6 	bl	8005718 <USBD_CtlError>
      ret = USBD_FAIL;
 80043ac:	2303      	movs	r3, #3
 80043ae:	75fb      	strb	r3, [r7, #23]
      break;
 80043b0:	e002      	b.n	80043b8 <USBD_CDC_Setup+0x15c>
      break;
 80043b2:	bf00      	nop
 80043b4:	e008      	b.n	80043c8 <USBD_CDC_Setup+0x16c>
      break;
 80043b6:	bf00      	nop
    }
    break;
 80043b8:	e006      	b.n	80043c8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80043ba:	6839      	ldr	r1, [r7, #0]
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f001 f9ab 	bl	8005718 <USBD_CtlError>
    ret = USBD_FAIL;
 80043c2:	2303      	movs	r3, #3
 80043c4:	75fb      	strb	r3, [r7, #23]
    break;
 80043c6:	bf00      	nop
  }

  return (uint8_t)ret;
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop

080043d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80043e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e049      	b.n	800448a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	3318      	adds	r3, #24
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d029      	beq.n	8004468 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004414:	78fa      	ldrb	r2, [r7, #3]
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	3318      	adds	r3, #24
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	78f9      	ldrb	r1, [r7, #3]
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	460b      	mov	r3, r1
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	1a5b      	subs	r3, r3, r1
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4403      	add	r3, r0
 8004434:	3344      	adds	r3, #68	; 0x44
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	fbb2 f1f3 	udiv	r1, r2, r3
 800443c:	fb03 f301 	mul.w	r3, r3, r1
 8004440:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004442:	2b00      	cmp	r3, #0
 8004444:	d110      	bne.n	8004468 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004446:	78fa      	ldrb	r2, [r7, #3]
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	440b      	add	r3, r1
 8004454:	3318      	adds	r3, #24
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800445a:	78f9      	ldrb	r1, [r7, #3]
 800445c:	2300      	movs	r3, #0
 800445e:	2200      	movs	r2, #0
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f001 fed6 	bl	8006212 <USBD_LL_Transmit>
 8004466:	e00f      	b.n	8004488 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2200      	movs	r2, #0
 800446c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004484:	78fa      	ldrb	r2, [r7, #3]
 8004486:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	460b      	mov	r3, r1
 800449c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e015      	b.n	80044e0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	4619      	mov	r1, r3
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f001 feec 	bl	8006296 <USBD_LL_GetRxDataSize>
 80044be:	4602      	mov	r2, r0
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80044da:	4611      	mov	r1, r2
 80044dc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044f6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d015      	beq.n	800452e <USBD_CDC_EP0_RxReady+0x46>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004508:	2bff      	cmp	r3, #255	; 0xff
 800450a:	d010      	beq.n	800452e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800451a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004522:	b292      	uxth	r2, r2
 8004524:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	22ff      	movs	r2, #255	; 0xff
 800452a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2243      	movs	r2, #67	; 0x43
 8004544:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004546:	4b03      	ldr	r3, [pc, #12]	; (8004554 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	20000094 	.word	0x20000094

08004558 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2243      	movs	r2, #67	; 0x43
 8004564:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004566:	4b03      	ldr	r3, [pc, #12]	; (8004574 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004568:	4618      	mov	r0, r3
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	20000050 	.word	0x20000050

08004578 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2243      	movs	r2, #67	; 0x43
 8004584:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004586:	4b03      	ldr	r3, [pc, #12]	; (8004594 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	200000d8 	.word	0x200000d8

08004598 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	220a      	movs	r2, #10
 80045a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80045a6:	4b03      	ldr	r3, [pc, #12]	; (80045b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	2000000c 	.word	0x2000000c

080045b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e004      	b.n	80045d6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b087      	sub	sp, #28
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045f4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004624:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800464a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800464c:	2301      	movs	r3, #1
 800464e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800465a:	2303      	movs	r3, #3
 800465c:	e01a      	b.n	8004694 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004664:	2b00      	cmp	r3, #0
 8004666:	d114      	bne.n	8004692 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2201      	movs	r2, #1
 800466c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004686:	2181      	movs	r1, #129	; 0x81
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f001 fdc2 	bl	8006212 <USBD_LL_Transmit>

    ret = USBD_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004692:	7bfb      	ldrb	r3, [r7, #15]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e016      	b.n	80046e8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	7c1b      	ldrb	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046cc:	2101      	movs	r1, #1
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f001 fdc0 	bl	8006254 <USBD_LL_PrepareReceive>
 80046d4:	e007      	b.n	80046e6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046dc:	2340      	movs	r3, #64	; 0x40
 80046de:	2101      	movs	r1, #1
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f001 fdb7 	bl	8006254 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	4613      	mov	r3, r2
 80046fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004704:	2303      	movs	r3, #3
 8004706:	e025      	b.n	8004754 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	79fa      	ldrb	r2, [r7, #7]
 8004746:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f001 fc2d 	bl	8005fa8 <USBD_LL_Init>
 800474e:	4603      	mov	r3, r0
 8004750:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004752:	7dfb      	ldrb	r3, [r7, #23]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004770:	2303      	movs	r3, #3
 8004772:	e010      	b.n	8004796 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	f107 020e 	add.w	r2, r7, #14
 8004788:	4610      	mov	r0, r2
 800478a:	4798      	blx	r3
 800478c:	4602      	mov	r2, r0
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f001 fc4a 	bl	8006040 <USBD_LL_Start>
 80047ac:	4603      	mov	r3, r0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80047d8:	2303      	movs	r3, #3
 80047da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	78fa      	ldrb	r2, [r7, #3]
 80047f0:	4611      	mov	r1, r2
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	4798      	blx	r3
 80047f6:	4603      	mov	r3, r0
 80047f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	78fa      	ldrb	r2, [r7, #3]
 8004824:	4611      	mov	r1, r2
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	4798      	blx	r3
  }

  return USBD_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004844:	6839      	ldr	r1, [r7, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 ff2c 	bl	80056a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800485a:	461a      	mov	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004868:	f003 031f 	and.w	r3, r3, #31
 800486c:	2b01      	cmp	r3, #1
 800486e:	d00e      	beq.n	800488e <USBD_LL_SetupStage+0x5a>
 8004870:	2b01      	cmp	r3, #1
 8004872:	d302      	bcc.n	800487a <USBD_LL_SetupStage+0x46>
 8004874:	2b02      	cmp	r3, #2
 8004876:	d014      	beq.n	80048a2 <USBD_LL_SetupStage+0x6e>
 8004878:	e01d      	b.n	80048b6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004880:	4619      	mov	r1, r3
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fa18 	bl	8004cb8 <USBD_StdDevReq>
 8004888:	4603      	mov	r3, r0
 800488a:	73fb      	strb	r3, [r7, #15]
      break;
 800488c:	e020      	b.n	80048d0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004894:	4619      	mov	r1, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fa7c 	bl	8004d94 <USBD_StdItfReq>
 800489c:	4603      	mov	r3, r0
 800489e:	73fb      	strb	r3, [r7, #15]
      break;
 80048a0:	e016      	b.n	80048d0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fab8 	bl	8004e20 <USBD_StdEPReq>
 80048b0:	4603      	mov	r3, r0
 80048b2:	73fb      	strb	r3, [r7, #15]
      break;
 80048b4:	e00c      	b.n	80048d0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80048bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	4619      	mov	r1, r3
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f001 fc1b 	bl	8006100 <USBD_LL_StallEP>
 80048ca:	4603      	mov	r3, r0
 80048cc:	73fb      	strb	r3, [r7, #15]
      break;
 80048ce:	bf00      	nop
  }

  return ret;
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b086      	sub	sp, #24
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	460b      	mov	r3, r1
 80048e4:	607a      	str	r2, [r7, #4]
 80048e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80048e8:	7afb      	ldrb	r3, [r7, #11]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d137      	bne.n	800495e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80048f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d14a      	bne.n	8004996 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	429a      	cmp	r2, r3
 800490a:	d913      	bls.n	8004934 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	1ad2      	subs	r2, r2, r3
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	4293      	cmp	r3, r2
 8004924:	bf28      	it	cs
 8004926:	4613      	movcs	r3, r2
 8004928:	461a      	mov	r2, r3
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 ffad 	bl	800588c <USBD_CtlContinueRx>
 8004932:	e030      	b.n	8004996 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004946:	2b03      	cmp	r3, #3
 8004948:	d105      	bne.n	8004956 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 ffa9 	bl	80058ae <USBD_CtlSendStatus>
 800495c:	e01b      	b.n	8004996 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d013      	beq.n	8004992 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004970:	2b03      	cmp	r3, #3
 8004972:	d10e      	bne.n	8004992 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	7afa      	ldrb	r2, [r7, #11]
 800497e:	4611      	mov	r1, r2
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	4798      	blx	r3
 8004984:	4603      	mov	r3, r0
 8004986:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004988:	7dfb      	ldrb	r3, [r7, #23]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800498e:	7dfb      	ldrb	r3, [r7, #23]
 8004990:	e002      	b.n	8004998 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004992:	2303      	movs	r3, #3
 8004994:	e000      	b.n	8004998 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	460b      	mov	r3, r1
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80049ae:	7afb      	ldrb	r3, [r7, #11]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d16a      	bne.n	8004a8a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3314      	adds	r3, #20
 80049b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d155      	bne.n	8004a70 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d914      	bls.n	80049fa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	1ad2      	subs	r2, r2, r3
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	461a      	mov	r2, r3
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 ff22 	bl	8005830 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80049ec:	2300      	movs	r3, #0
 80049ee:	2200      	movs	r2, #0
 80049f0:	2100      	movs	r1, #0
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f001 fc2e 	bl	8006254 <USBD_LL_PrepareReceive>
 80049f8:	e03a      	b.n	8004a70 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d11c      	bne.n	8004a40 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d316      	bcc.n	8004a40 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d20f      	bcs.n	8004a40 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004a20:	2200      	movs	r2, #0
 8004a22:	2100      	movs	r1, #0
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 ff03 	bl	8005830 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a32:	2300      	movs	r3, #0
 8004a34:	2200      	movs	r2, #0
 8004a36:	2100      	movs	r1, #0
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f001 fc0b 	bl	8006254 <USBD_LL_PrepareReceive>
 8004a3e:	e017      	b.n	8004a70 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00a      	beq.n	8004a62 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d105      	bne.n	8004a62 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004a62:	2180      	movs	r1, #128	; 0x80
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f001 fb4b 	bl	8006100 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 ff32 	bl	80058d4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d123      	bne.n	8004ac2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f7ff fe9b 	bl	80047b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004a88:	e01b      	b.n	8004ac2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d013      	beq.n	8004abe <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d10e      	bne.n	8004abe <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	7afa      	ldrb	r2, [r7, #11]
 8004aaa:	4611      	mov	r1, r2
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	4798      	blx	r3
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004ab4:	7dfb      	ldrb	r3, [r7, #23]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8004aba:	7dfb      	ldrb	r3, [r7, #23]
 8004abc:	e002      	b.n	8004ac4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e000      	b.n	8004ac4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d009      	beq.n	8004b10 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6852      	ldr	r2, [r2, #4]
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b10:	2340      	movs	r3, #64	; 0x40
 8004b12:	2200      	movs	r2, #0
 8004b14:	2100      	movs	r1, #0
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f001 faad 	bl	8006076 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2240      	movs	r2, #64	; 0x40
 8004b28:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b2c:	2340      	movs	r3, #64	; 0x40
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2180      	movs	r1, #128	; 0x80
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f001 fa9f 	bl	8006076 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2240      	movs	r2, #64	; 0x40
 8004b42:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	460b      	mov	r3, r1
 8004b58:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	78fa      	ldrb	r2, [r7, #3]
 8004b5e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2204      	movs	r2, #4
 8004b86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d105      	bne.n	8004bb6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d10b      	bne.n	8004bee <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b082      	sub	sp, #8
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d009      	beq.n	8004c70 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6852      	ldr	r2, [r2, #4]
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	4798      	blx	r3
  }

  return USBD_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b087      	sub	sp, #28
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004c98:	8a3b      	ldrh	r3, [r7, #16]
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	b21a      	sxth	r2, r3
 8004c9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	b21b      	sxth	r3, r3
 8004ca6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004ca8:	89fb      	ldrh	r3, [r7, #14]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
	...

08004cb8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	d004      	beq.n	8004cdc <USBD_StdDevReq+0x24>
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d002      	beq.n	8004cdc <USBD_StdDevReq+0x24>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <USBD_StdDevReq+0x38>
 8004cda:	e050      	b.n	8004d7e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	6839      	ldr	r1, [r7, #0]
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	4798      	blx	r3
 8004cea:	4603      	mov	r3, r0
 8004cec:	73fb      	strb	r3, [r7, #15]
    break;
 8004cee:	e04b      	b.n	8004d88 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	785b      	ldrb	r3, [r3, #1]
 8004cf4:	2b09      	cmp	r3, #9
 8004cf6:	d83c      	bhi.n	8004d72 <USBD_StdDevReq+0xba>
 8004cf8:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <USBD_StdDevReq+0x48>)
 8004cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfe:	bf00      	nop
 8004d00:	08004d55 	.word	0x08004d55
 8004d04:	08004d69 	.word	0x08004d69
 8004d08:	08004d73 	.word	0x08004d73
 8004d0c:	08004d5f 	.word	0x08004d5f
 8004d10:	08004d73 	.word	0x08004d73
 8004d14:	08004d33 	.word	0x08004d33
 8004d18:	08004d29 	.word	0x08004d29
 8004d1c:	08004d73 	.word	0x08004d73
 8004d20:	08004d4b 	.word	0x08004d4b
 8004d24:	08004d3d 	.word	0x08004d3d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8004d28:	6839      	ldr	r1, [r7, #0]
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f9ce 	bl	80050cc <USBD_GetDescriptor>
      break;
 8004d30:	e024      	b.n	8004d7c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8004d32:	6839      	ldr	r1, [r7, #0]
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fb33 	bl	80053a0 <USBD_SetAddress>
      break;
 8004d3a:	e01f      	b.n	8004d7c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8004d3c:	6839      	ldr	r1, [r7, #0]
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fb70 	bl	8005424 <USBD_SetConfig>
 8004d44:	4603      	mov	r3, r0
 8004d46:	73fb      	strb	r3, [r7, #15]
      break;
 8004d48:	e018      	b.n	8004d7c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8004d4a:	6839      	ldr	r1, [r7, #0]
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fc0d 	bl	800556c <USBD_GetConfig>
      break;
 8004d52:	e013      	b.n	8004d7c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8004d54:	6839      	ldr	r1, [r7, #0]
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fc3c 	bl	80055d4 <USBD_GetStatus>
      break;
 8004d5c:	e00e      	b.n	8004d7c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8004d5e:	6839      	ldr	r1, [r7, #0]
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fc6a 	bl	800563a <USBD_SetFeature>
      break;
 8004d66:	e009      	b.n	8004d7c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8004d68:	6839      	ldr	r1, [r7, #0]
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fc79 	bl	8005662 <USBD_ClrFeature>
      break;
 8004d70:	e004      	b.n	8004d7c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8004d72:	6839      	ldr	r1, [r7, #0]
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fccf 	bl	8005718 <USBD_CtlError>
      break;
 8004d7a:	bf00      	nop
    }
    break;
 8004d7c:	e004      	b.n	8004d88 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8004d7e:	6839      	ldr	r1, [r7, #0]
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fcc9 	bl	8005718 <USBD_CtlError>
    break;
 8004d86:	bf00      	nop
  }

  return ret;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop

08004d94 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d003      	beq.n	8004db6 <USBD_StdItfReq+0x22>
 8004dae:	2b40      	cmp	r3, #64	; 0x40
 8004db0:	d001      	beq.n	8004db6 <USBD_StdItfReq+0x22>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d12a      	bne.n	8004e0c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d81d      	bhi.n	8004dfe <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	889b      	ldrh	r3, [r3, #4]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d813      	bhi.n	8004df4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	6839      	ldr	r1, [r7, #0]
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	4798      	blx	r3
 8004dda:	4603      	mov	r3, r0
 8004ddc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	88db      	ldrh	r3, [r3, #6]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d110      	bne.n	8004e08 <USBD_StdItfReq+0x74>
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10d      	bne.n	8004e08 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fd5e 	bl	80058ae <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8004df2:	e009      	b.n	8004e08 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8004df4:	6839      	ldr	r1, [r7, #0]
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fc8e 	bl	8005718 <USBD_CtlError>
      break;
 8004dfc:	e004      	b.n	8004e08 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8004dfe:	6839      	ldr	r1, [r7, #0]
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fc89 	bl	8005718 <USBD_CtlError>
      break;
 8004e06:	e000      	b.n	8004e0a <USBD_StdItfReq+0x76>
      break;
 8004e08:	bf00      	nop
    }
    break;
 8004e0a:	e004      	b.n	8004e16 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8004e0c:	6839      	ldr	r1, [r7, #0]
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fc82 	bl	8005718 <USBD_CtlError>
    break;
 8004e14:	bf00      	nop
  }

  return ret;
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	889b      	ldrh	r3, [r3, #4]
 8004e32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d004      	beq.n	8004e4a <USBD_StdEPReq+0x2a>
 8004e40:	2b40      	cmp	r3, #64	; 0x40
 8004e42:	d002      	beq.n	8004e4a <USBD_StdEPReq+0x2a>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <USBD_StdEPReq+0x3e>
 8004e48:	e135      	b.n	80050b6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	6839      	ldr	r1, [r7, #0]
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	4798      	blx	r3
 8004e58:	4603      	mov	r3, r0
 8004e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8004e5c:	e130      	b.n	80050c0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	785b      	ldrb	r3, [r3, #1]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d03e      	beq.n	8004ee4 <USBD_StdEPReq+0xc4>
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d002      	beq.n	8004e70 <USBD_StdEPReq+0x50>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d077      	beq.n	8004f5e <USBD_StdEPReq+0x13e>
 8004e6e:	e11c      	b.n	80050aa <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d002      	beq.n	8004e80 <USBD_StdEPReq+0x60>
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d015      	beq.n	8004eaa <USBD_StdEPReq+0x8a>
 8004e7e:	e02b      	b.n	8004ed8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e80:	7bbb      	ldrb	r3, [r7, #14]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00c      	beq.n	8004ea0 <USBD_StdEPReq+0x80>
 8004e86:	7bbb      	ldrb	r3, [r7, #14]
 8004e88:	2b80      	cmp	r3, #128	; 0x80
 8004e8a:	d009      	beq.n	8004ea0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004e8c:	7bbb      	ldrb	r3, [r7, #14]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f001 f935 	bl	8006100 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e96:	2180      	movs	r1, #128	; 0x80
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f001 f931 	bl	8006100 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004e9e:	e020      	b.n	8004ee2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fc38 	bl	8005718 <USBD_CtlError>
        break;
 8004ea8:	e01b      	b.n	8004ee2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	885b      	ldrh	r3, [r3, #2]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10e      	bne.n	8004ed0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004eb2:	7bbb      	ldrb	r3, [r7, #14]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00b      	beq.n	8004ed0 <USBD_StdEPReq+0xb0>
 8004eb8:	7bbb      	ldrb	r3, [r7, #14]
 8004eba:	2b80      	cmp	r3, #128	; 0x80
 8004ebc:	d008      	beq.n	8004ed0 <USBD_StdEPReq+0xb0>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	88db      	ldrh	r3, [r3, #6]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d104      	bne.n	8004ed0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8004ec6:	7bbb      	ldrb	r3, [r7, #14]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f001 f918 	bl	8006100 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fcec 	bl	80058ae <USBD_CtlSendStatus>

        break;
 8004ed6:	e004      	b.n	8004ee2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8004ed8:	6839      	ldr	r1, [r7, #0]
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fc1c 	bl	8005718 <USBD_CtlError>
        break;
 8004ee0:	bf00      	nop
      }
      break;
 8004ee2:	e0e7      	b.n	80050b4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d002      	beq.n	8004ef4 <USBD_StdEPReq+0xd4>
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d015      	beq.n	8004f1e <USBD_StdEPReq+0xfe>
 8004ef2:	e02d      	b.n	8004f50 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ef4:	7bbb      	ldrb	r3, [r7, #14]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00c      	beq.n	8004f14 <USBD_StdEPReq+0xf4>
 8004efa:	7bbb      	ldrb	r3, [r7, #14]
 8004efc:	2b80      	cmp	r3, #128	; 0x80
 8004efe:	d009      	beq.n	8004f14 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f00:	7bbb      	ldrb	r3, [r7, #14]
 8004f02:	4619      	mov	r1, r3
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f001 f8fb 	bl	8006100 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f0a:	2180      	movs	r1, #128	; 0x80
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f001 f8f7 	bl	8006100 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004f12:	e023      	b.n	8004f5c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8004f14:	6839      	ldr	r1, [r7, #0]
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fbfe 	bl	8005718 <USBD_CtlError>
        break;
 8004f1c:	e01e      	b.n	8004f5c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	885b      	ldrh	r3, [r3, #2]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d119      	bne.n	8004f5a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004f26:	7bbb      	ldrb	r3, [r7, #14]
 8004f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d004      	beq.n	8004f3a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004f30:	7bbb      	ldrb	r3, [r7, #14]
 8004f32:	4619      	mov	r1, r3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f001 f902 	bl	800613e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fcb7 	bl	80058ae <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	6839      	ldr	r1, [r7, #0]
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	4798      	blx	r3
        }
        break;
 8004f4e:	e004      	b.n	8004f5a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fbe0 	bl	8005718 <USBD_CtlError>
        break;
 8004f58:	e000      	b.n	8004f5c <USBD_StdEPReq+0x13c>
        break;
 8004f5a:	bf00      	nop
      }
      break;
 8004f5c:	e0aa      	b.n	80050b4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d002      	beq.n	8004f6e <USBD_StdEPReq+0x14e>
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d032      	beq.n	8004fd2 <USBD_StdEPReq+0x1b2>
 8004f6c:	e097      	b.n	800509e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f6e:	7bbb      	ldrb	r3, [r7, #14]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <USBD_StdEPReq+0x164>
 8004f74:	7bbb      	ldrb	r3, [r7, #14]
 8004f76:	2b80      	cmp	r3, #128	; 0x80
 8004f78:	d004      	beq.n	8004f84 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 fbcb 	bl	8005718 <USBD_CtlError>
          break;
 8004f82:	e091      	b.n	80050a8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	da0b      	bge.n	8004fa4 <USBD_StdEPReq+0x184>
 8004f8c:	7bbb      	ldrb	r3, [r7, #14]
 8004f8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	3310      	adds	r3, #16
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	e00b      	b.n	8004fbc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8004fa4:	7bbb      	ldrb	r3, [r7, #14]
 8004fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	4413      	add	r3, r2
 8004fba:	3304      	adds	r3, #4
 8004fbc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fc15 	bl	80057fa <USBD_CtlSendData>
        break;
 8004fd0:	e06a      	b.n	80050a8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8004fd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	da11      	bge.n	8004ffe <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004fda:	7bbb      	ldrb	r3, [r7, #14]
 8004fdc:	f003 020f 	and.w	r2, r3, #15
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	3324      	adds	r3, #36	; 0x24
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d117      	bne.n	8005024 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8004ff4:	6839      	ldr	r1, [r7, #0]
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fb8e 	bl	8005718 <USBD_CtlError>
            break;
 8004ffc:	e054      	b.n	80050a8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004ffe:	7bbb      	ldrb	r3, [r7, #14]
 8005000:	f003 020f 	and.w	r2, r3, #15
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d104      	bne.n	8005024 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800501a:	6839      	ldr	r1, [r7, #0]
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fb7b 	bl	8005718 <USBD_CtlError>
            break;
 8005022:	e041      	b.n	80050a8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005024:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005028:	2b00      	cmp	r3, #0
 800502a:	da0b      	bge.n	8005044 <USBD_StdEPReq+0x224>
 800502c:	7bbb      	ldrb	r3, [r7, #14]
 800502e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	3310      	adds	r3, #16
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	4413      	add	r3, r2
 8005040:	3304      	adds	r3, #4
 8005042:	e00b      	b.n	800505c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005044:	7bbb      	ldrb	r3, [r7, #14]
 8005046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	4413      	add	r3, r2
 800505a:	3304      	adds	r3, #4
 800505c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800505e:	7bbb      	ldrb	r3, [r7, #14]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <USBD_StdEPReq+0x24a>
 8005064:	7bbb      	ldrb	r3, [r7, #14]
 8005066:	2b80      	cmp	r3, #128	; 0x80
 8005068:	d103      	bne.n	8005072 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	e00e      	b.n	8005090 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005072:	7bbb      	ldrb	r3, [r7, #14]
 8005074:	4619      	mov	r1, r3
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f001 f880 	bl	800617c <USBD_LL_IsStallEP>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2201      	movs	r2, #1
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	e002      	b.n	8005090 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2202      	movs	r2, #2
 8005094:	4619      	mov	r1, r3
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fbaf 	bl	80057fa <USBD_CtlSendData>
          break;
 800509c:	e004      	b.n	80050a8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800509e:	6839      	ldr	r1, [r7, #0]
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fb39 	bl	8005718 <USBD_CtlError>
        break;
 80050a6:	bf00      	nop
      }
      break;
 80050a8:	e004      	b.n	80050b4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80050aa:	6839      	ldr	r1, [r7, #0]
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fb33 	bl	8005718 <USBD_CtlError>
      break;
 80050b2:	bf00      	nop
    }
    break;
 80050b4:	e004      	b.n	80050c0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80050b6:	6839      	ldr	r1, [r7, #0]
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fb2d 	bl	8005718 <USBD_CtlError>
    break;
 80050be:	bf00      	nop
  }

  return ret;
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	885b      	ldrh	r3, [r3, #2]
 80050e6:	0a1b      	lsrs	r3, r3, #8
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	2b06      	cmp	r3, #6
 80050ee:	f200 8128 	bhi.w	8005342 <USBD_GetDescriptor+0x276>
 80050f2:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <USBD_GetDescriptor+0x2c>)
 80050f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f8:	08005115 	.word	0x08005115
 80050fc:	0800512d 	.word	0x0800512d
 8005100:	0800516d 	.word	0x0800516d
 8005104:	08005343 	.word	0x08005343
 8005108:	08005343 	.word	0x08005343
 800510c:	080052e3 	.word	0x080052e3
 8005110:	0800530f 	.word	0x0800530f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	7c12      	ldrb	r2, [r2, #16]
 8005120:	f107 0108 	add.w	r1, r7, #8
 8005124:	4610      	mov	r0, r2
 8005126:	4798      	blx	r3
 8005128:	60f8      	str	r0, [r7, #12]
    break;
 800512a:	e112      	b.n	8005352 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	7c1b      	ldrb	r3, [r3, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10d      	bne.n	8005150 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	f107 0208 	add.w	r2, r7, #8
 8005140:	4610      	mov	r0, r2
 8005142:	4798      	blx	r3
 8005144:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	3301      	adds	r3, #1
 800514a:	2202      	movs	r2, #2
 800514c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800514e:	e100      	b.n	8005352 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	f107 0208 	add.w	r2, r7, #8
 800515c:	4610      	mov	r0, r2
 800515e:	4798      	blx	r3
 8005160:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3301      	adds	r3, #1
 8005166:	2202      	movs	r2, #2
 8005168:	701a      	strb	r2, [r3, #0]
    break;
 800516a:	e0f2      	b.n	8005352 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	885b      	ldrh	r3, [r3, #2]
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b05      	cmp	r3, #5
 8005174:	f200 80ac 	bhi.w	80052d0 <USBD_GetDescriptor+0x204>
 8005178:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <USBD_GetDescriptor+0xb4>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	08005199 	.word	0x08005199
 8005184:	080051cd 	.word	0x080051cd
 8005188:	08005201 	.word	0x08005201
 800518c:	08005235 	.word	0x08005235
 8005190:	08005269 	.word	0x08005269
 8005194:	0800529d 	.word	0x0800529d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00b      	beq.n	80051bc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	7c12      	ldrb	r2, [r2, #16]
 80051b0:	f107 0108 	add.w	r1, r7, #8
 80051b4:	4610      	mov	r0, r2
 80051b6:	4798      	blx	r3
 80051b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80051ba:	e091      	b.n	80052e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 faaa 	bl	8005718 <USBD_CtlError>
        err++;
 80051c4:	7afb      	ldrb	r3, [r7, #11]
 80051c6:	3301      	adds	r3, #1
 80051c8:	72fb      	strb	r3, [r7, #11]
      break;
 80051ca:	e089      	b.n	80052e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00b      	beq.n	80051f0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	7c12      	ldrb	r2, [r2, #16]
 80051e4:	f107 0108 	add.w	r1, r7, #8
 80051e8:	4610      	mov	r0, r2
 80051ea:	4798      	blx	r3
 80051ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80051ee:	e077      	b.n	80052e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80051f0:	6839      	ldr	r1, [r7, #0]
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fa90 	bl	8005718 <USBD_CtlError>
        err++;
 80051f8:	7afb      	ldrb	r3, [r7, #11]
 80051fa:	3301      	adds	r3, #1
 80051fc:	72fb      	strb	r3, [r7, #11]
      break;
 80051fe:	e06f      	b.n	80052e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00b      	beq.n	8005224 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	7c12      	ldrb	r2, [r2, #16]
 8005218:	f107 0108 	add.w	r1, r7, #8
 800521c:	4610      	mov	r0, r2
 800521e:	4798      	blx	r3
 8005220:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005222:	e05d      	b.n	80052e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005224:	6839      	ldr	r1, [r7, #0]
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fa76 	bl	8005718 <USBD_CtlError>
        err++;
 800522c:	7afb      	ldrb	r3, [r7, #11]
 800522e:	3301      	adds	r3, #1
 8005230:	72fb      	strb	r3, [r7, #11]
      break;
 8005232:	e055      	b.n	80052e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00b      	beq.n	8005258 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	7c12      	ldrb	r2, [r2, #16]
 800524c:	f107 0108 	add.w	r1, r7, #8
 8005250:	4610      	mov	r0, r2
 8005252:	4798      	blx	r3
 8005254:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005256:	e043      	b.n	80052e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005258:	6839      	ldr	r1, [r7, #0]
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fa5c 	bl	8005718 <USBD_CtlError>
        err++;
 8005260:	7afb      	ldrb	r3, [r7, #11]
 8005262:	3301      	adds	r3, #1
 8005264:	72fb      	strb	r3, [r7, #11]
      break;
 8005266:	e03b      	b.n	80052e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00b      	beq.n	800528c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	7c12      	ldrb	r2, [r2, #16]
 8005280:	f107 0108 	add.w	r1, r7, #8
 8005284:	4610      	mov	r0, r2
 8005286:	4798      	blx	r3
 8005288:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800528a:	e029      	b.n	80052e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800528c:	6839      	ldr	r1, [r7, #0]
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fa42 	bl	8005718 <USBD_CtlError>
        err++;
 8005294:	7afb      	ldrb	r3, [r7, #11]
 8005296:	3301      	adds	r3, #1
 8005298:	72fb      	strb	r3, [r7, #11]
      break;
 800529a:	e021      	b.n	80052e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00b      	beq.n	80052c0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	7c12      	ldrb	r2, [r2, #16]
 80052b4:	f107 0108 	add.w	r1, r7, #8
 80052b8:	4610      	mov	r0, r2
 80052ba:	4798      	blx	r3
 80052bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80052be:	e00f      	b.n	80052e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80052c0:	6839      	ldr	r1, [r7, #0]
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fa28 	bl	8005718 <USBD_CtlError>
        err++;
 80052c8:	7afb      	ldrb	r3, [r7, #11]
 80052ca:	3301      	adds	r3, #1
 80052cc:	72fb      	strb	r3, [r7, #11]
      break;
 80052ce:	e007      	b.n	80052e0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fa20 	bl	8005718 <USBD_CtlError>
      err++;
 80052d8:	7afb      	ldrb	r3, [r7, #11]
 80052da:	3301      	adds	r3, #1
 80052dc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80052de:	bf00      	nop
    }
    break;
 80052e0:	e037      	b.n	8005352 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	7c1b      	ldrb	r3, [r3, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f2:	f107 0208 	add.w	r2, r7, #8
 80052f6:	4610      	mov	r0, r2
 80052f8:	4798      	blx	r3
 80052fa:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80052fc:	e029      	b.n	8005352 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fa09 	bl	8005718 <USBD_CtlError>
      err++;
 8005306:	7afb      	ldrb	r3, [r7, #11]
 8005308:	3301      	adds	r3, #1
 800530a:	72fb      	strb	r3, [r7, #11]
    break;
 800530c:	e021      	b.n	8005352 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	7c1b      	ldrb	r3, [r3, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10d      	bne.n	8005332 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	f107 0208 	add.w	r2, r7, #8
 8005322:	4610      	mov	r0, r2
 8005324:	4798      	blx	r3
 8005326:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3301      	adds	r3, #1
 800532c:	2207      	movs	r2, #7
 800532e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005330:	e00f      	b.n	8005352 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005332:	6839      	ldr	r1, [r7, #0]
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f9ef 	bl	8005718 <USBD_CtlError>
      err++;
 800533a:	7afb      	ldrb	r3, [r7, #11]
 800533c:	3301      	adds	r3, #1
 800533e:	72fb      	strb	r3, [r7, #11]
    break;
 8005340:	e007      	b.n	8005352 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005342:	6839      	ldr	r1, [r7, #0]
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f9e7 	bl	8005718 <USBD_CtlError>
    err++;
 800534a:	7afb      	ldrb	r3, [r7, #11]
 800534c:	3301      	adds	r3, #1
 800534e:	72fb      	strb	r3, [r7, #11]
    break;
 8005350:	bf00      	nop
  }

  if (err != 0U)
 8005352:	7afb      	ldrb	r3, [r7, #11]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d11e      	bne.n	8005396 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	88db      	ldrh	r3, [r3, #6]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d016      	beq.n	800538e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005360:	893b      	ldrh	r3, [r7, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00e      	beq.n	8005384 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	88da      	ldrh	r2, [r3, #6]
 800536a:	893b      	ldrh	r3, [r7, #8]
 800536c:	4293      	cmp	r3, r2
 800536e:	bf28      	it	cs
 8005370:	4613      	movcs	r3, r2
 8005372:	b29b      	uxth	r3, r3
 8005374:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005376:	893b      	ldrh	r3, [r7, #8]
 8005378:	461a      	mov	r2, r3
 800537a:	68f9      	ldr	r1, [r7, #12]
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fa3c 	bl	80057fa <USBD_CtlSendData>
 8005382:	e009      	b.n	8005398 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005384:	6839      	ldr	r1, [r7, #0]
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f9c6 	bl	8005718 <USBD_CtlError>
 800538c:	e004      	b.n	8005398 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fa8d 	bl	80058ae <USBD_CtlSendStatus>
 8005394:	e000      	b.n	8005398 <USBD_GetDescriptor+0x2cc>
    return;
 8005396:	bf00      	nop
    }
  }
}
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop

080053a0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	889b      	ldrh	r3, [r3, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d130      	bne.n	8005414 <USBD_SetAddress+0x74>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	88db      	ldrh	r3, [r3, #6]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d12c      	bne.n	8005414 <USBD_SetAddress+0x74>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	885b      	ldrh	r3, [r3, #2]
 80053be:	2b7f      	cmp	r3, #127	; 0x7f
 80053c0:	d828      	bhi.n	8005414 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	885b      	ldrh	r3, [r3, #2]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d104      	bne.n	80053e2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80053d8:	6839      	ldr	r1, [r7, #0]
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f99c 	bl	8005718 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053e0:	e01c      	b.n	800541c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	7bfa      	ldrb	r2, [r7, #15]
 80053e6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	4619      	mov	r1, r3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fef0 	bl	80061d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fa5a 	bl	80058ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d004      	beq.n	800540a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005408:	e008      	b.n	800541c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005412:	e003      	b.n	800541c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005414:	6839      	ldr	r1, [r7, #0]
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f97e 	bl	8005718 <USBD_CtlError>
  }
}
 800541c:	bf00      	nop
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	885b      	ldrh	r3, [r3, #2]
 8005436:	b2da      	uxtb	r2, r3
 8005438:	4b4b      	ldr	r3, [pc, #300]	; (8005568 <USBD_SetConfig+0x144>)
 800543a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800543c:	4b4a      	ldr	r3, [pc, #296]	; (8005568 <USBD_SetConfig+0x144>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d905      	bls.n	8005450 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005444:	6839      	ldr	r1, [r7, #0]
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f966 	bl	8005718 <USBD_CtlError>
    return USBD_FAIL;
 800544c:	2303      	movs	r3, #3
 800544e:	e087      	b.n	8005560 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005456:	2b02      	cmp	r3, #2
 8005458:	d002      	beq.n	8005460 <USBD_SetConfig+0x3c>
 800545a:	2b03      	cmp	r3, #3
 800545c:	d025      	beq.n	80054aa <USBD_SetConfig+0x86>
 800545e:	e071      	b.n	8005544 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005460:	4b41      	ldr	r3, [pc, #260]	; (8005568 <USBD_SetConfig+0x144>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01c      	beq.n	80054a2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005468:	4b3f      	ldr	r3, [pc, #252]	; (8005568 <USBD_SetConfig+0x144>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005472:	4b3d      	ldr	r3, [pc, #244]	; (8005568 <USBD_SetConfig+0x144>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff f9a7 	bl	80047cc <USBD_SetClassConfig>
 800547e:	4603      	mov	r3, r0
 8005480:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d004      	beq.n	8005492 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005488:	6839      	ldr	r1, [r7, #0]
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f944 	bl	8005718 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005490:	e065      	b.n	800555e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fa0b 	bl	80058ae <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2203      	movs	r2, #3
 800549c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80054a0:	e05d      	b.n	800555e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fa03 	bl	80058ae <USBD_CtlSendStatus>
    break;
 80054a8:	e059      	b.n	800555e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80054aa:	4b2f      	ldr	r3, [pc, #188]	; (8005568 <USBD_SetConfig+0x144>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d112      	bne.n	80054d8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80054ba:	4b2b      	ldr	r3, [pc, #172]	; (8005568 <USBD_SetConfig+0x144>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80054c4:	4b28      	ldr	r3, [pc, #160]	; (8005568 <USBD_SetConfig+0x144>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	4619      	mov	r1, r3
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff f99a 	bl	8004804 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f9ec 	bl	80058ae <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80054d6:	e042      	b.n	800555e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80054d8:	4b23      	ldr	r3, [pc, #140]	; (8005568 <USBD_SetConfig+0x144>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	461a      	mov	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d02a      	beq.n	800553c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	4619      	mov	r1, r3
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff f988 	bl	8004804 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80054f4:	4b1c      	ldr	r3, [pc, #112]	; (8005568 <USBD_SetConfig+0x144>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80054fe:	4b1a      	ldr	r3, [pc, #104]	; (8005568 <USBD_SetConfig+0x144>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff f961 	bl	80047cc <USBD_SetClassConfig>
 800550a:	4603      	mov	r3, r0
 800550c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800550e:	7bfb      	ldrb	r3, [r7, #15]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00f      	beq.n	8005534 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f8fe 	bl	8005718 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	b2db      	uxtb	r3, r3
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff f96d 	bl	8004804 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2202      	movs	r2, #2
 800552e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005532:	e014      	b.n	800555e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f9ba 	bl	80058ae <USBD_CtlSendStatus>
    break;
 800553a:	e010      	b.n	800555e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f9b6 	bl	80058ae <USBD_CtlSendStatus>
    break;
 8005542:	e00c      	b.n	800555e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f8e6 	bl	8005718 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800554c:	4b06      	ldr	r3, [pc, #24]	; (8005568 <USBD_SetConfig+0x144>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	4619      	mov	r1, r3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff f956 	bl	8004804 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005558:	2303      	movs	r3, #3
 800555a:	73fb      	strb	r3, [r7, #15]
    break;
 800555c:	bf00      	nop
  }

  return ret;
 800555e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20000208 	.word	0x20000208

0800556c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	88db      	ldrh	r3, [r3, #6]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d004      	beq.n	8005588 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f8c9 	bl	8005718 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005586:	e021      	b.n	80055cc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800558e:	2b01      	cmp	r3, #1
 8005590:	db17      	blt.n	80055c2 <USBD_GetConfig+0x56>
 8005592:	2b02      	cmp	r3, #2
 8005594:	dd02      	ble.n	800559c <USBD_GetConfig+0x30>
 8005596:	2b03      	cmp	r3, #3
 8005598:	d00b      	beq.n	80055b2 <USBD_GetConfig+0x46>
 800559a:	e012      	b.n	80055c2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3308      	adds	r3, #8
 80055a6:	2201      	movs	r2, #1
 80055a8:	4619      	mov	r1, r3
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f925 	bl	80057fa <USBD_CtlSendData>
      break;
 80055b0:	e00c      	b.n	80055cc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3304      	adds	r3, #4
 80055b6:	2201      	movs	r2, #1
 80055b8:	4619      	mov	r1, r3
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f91d 	bl	80057fa <USBD_CtlSendData>
      break;
 80055c0:	e004      	b.n	80055cc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80055c2:	6839      	ldr	r1, [r7, #0]
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f8a7 	bl	8005718 <USBD_CtlError>
      break;
 80055ca:	bf00      	nop
}
 80055cc:	bf00      	nop
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055e4:	3b01      	subs	r3, #1
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d81e      	bhi.n	8005628 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	88db      	ldrh	r3, [r3, #6]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d004      	beq.n	80055fc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80055f2:	6839      	ldr	r1, [r7, #0]
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f88f 	bl	8005718 <USBD_CtlError>
      break;
 80055fa:	e01a      	b.n	8005632 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f043 0202 	orr.w	r2, r3, #2
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	330c      	adds	r3, #12
 800561c:	2202      	movs	r2, #2
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f8ea 	bl	80057fa <USBD_CtlSendData>
    break;
 8005626:	e004      	b.n	8005632 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005628:	6839      	ldr	r1, [r7, #0]
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f874 	bl	8005718 <USBD_CtlError>
    break;
 8005630:	bf00      	nop
  }
}
 8005632:	bf00      	nop
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b082      	sub	sp, #8
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	885b      	ldrh	r3, [r3, #2]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d106      	bne.n	800565a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f92a 	bl	80058ae <USBD_CtlSendStatus>
  }
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005672:	3b01      	subs	r3, #1
 8005674:	2b02      	cmp	r3, #2
 8005676:	d80b      	bhi.n	8005690 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	885b      	ldrh	r3, [r3, #2]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d10c      	bne.n	800569a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f910 	bl	80058ae <USBD_CtlSendStatus>
      }
      break;
 800568e:	e004      	b.n	800569a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f840 	bl	8005718 <USBD_CtlError>
      break;
 8005698:	e000      	b.n	800569c <USBD_ClrFeature+0x3a>
      break;
 800569a:	bf00      	nop
  }
}
 800569c:	bf00      	nop
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	781a      	ldrb	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3301      	adds	r3, #1
 80056be:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	781a      	ldrb	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3301      	adds	r3, #1
 80056cc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f7ff fad3 	bl	8004c7a <SWAPBYTE>
 80056d4:	4603      	mov	r3, r0
 80056d6:	461a      	mov	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	3301      	adds	r3, #1
 80056e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3301      	adds	r3, #1
 80056e6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f7ff fac6 	bl	8004c7a <SWAPBYTE>
 80056ee:	4603      	mov	r3, r0
 80056f0:	461a      	mov	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3301      	adds	r3, #1
 80056fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3301      	adds	r3, #1
 8005700:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f7ff fab9 	bl	8004c7a <SWAPBYTE>
 8005708:	4603      	mov	r3, r0
 800570a:	461a      	mov	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	80da      	strh	r2, [r3, #6]
}
 8005710:	bf00      	nop
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005722:	2180      	movs	r1, #128	; 0x80
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fceb 	bl	8006100 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800572a:	2100      	movs	r1, #0
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fce7 	bl	8006100 <USBD_LL_StallEP>
}
 8005732:	bf00      	nop
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b086      	sub	sp, #24
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d036      	beq.n	80057be <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005754:	6938      	ldr	r0, [r7, #16]
 8005756:	f000 f836 	bl	80057c6 <USBD_GetLen>
 800575a:	4603      	mov	r3, r0
 800575c:	3301      	adds	r3, #1
 800575e:	b29b      	uxth	r3, r3
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005768:	7dfb      	ldrb	r3, [r7, #23]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	4413      	add	r3, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	7812      	ldrb	r2, [r2, #0]
 8005772:	701a      	strb	r2, [r3, #0]
  idx++;
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	3301      	adds	r3, #1
 8005778:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800577a:	7dfb      	ldrb	r3, [r7, #23]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	4413      	add	r3, r2
 8005780:	2203      	movs	r2, #3
 8005782:	701a      	strb	r2, [r3, #0]
  idx++;
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	3301      	adds	r3, #1
 8005788:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800578a:	e013      	b.n	80057b4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800578c:	7dfb      	ldrb	r3, [r7, #23]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	4413      	add	r3, r2
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	7812      	ldrb	r2, [r2, #0]
 8005796:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	3301      	adds	r3, #1
 800579c:	613b      	str	r3, [r7, #16]
    idx++;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
 80057a0:	3301      	adds	r3, #1
 80057a2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80057a4:	7dfb      	ldrb	r3, [r7, #23]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	4413      	add	r3, r2
 80057aa:	2200      	movs	r2, #0
 80057ac:	701a      	strb	r2, [r3, #0]
    idx++;
 80057ae:	7dfb      	ldrb	r3, [r7, #23]
 80057b0:	3301      	adds	r3, #1
 80057b2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e7      	bne.n	800578c <USBD_GetString+0x52>
 80057bc:	e000      	b.n	80057c0 <USBD_GetString+0x86>
    return;
 80057be:	bf00      	nop
  }
}
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b085      	sub	sp, #20
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80057ce:	2300      	movs	r3, #0
 80057d0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80057d6:	e005      	b.n	80057e4 <USBD_GetLen+0x1e>
  {
    len++;
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	3301      	adds	r3, #1
 80057dc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1f5      	bne.n	80057d8 <USBD_GetLen+0x12>
  }

  return len;
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2202      	movs	r2, #2
 800580a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	2100      	movs	r1, #0
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 fcf6 	bl	8006212 <USBD_LL_Transmit>

  return USBD_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	2100      	movs	r1, #0
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fce5 	bl	8006212 <USBD_LL_Transmit>

  return USBD_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2203      	movs	r2, #3
 8005862:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	2100      	movs	r1, #0
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 fce9 	bl	8006254 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	2100      	movs	r1, #0
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 fcd8 	bl	8006254 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2204      	movs	r2, #4
 80058ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80058be:	2300      	movs	r3, #0
 80058c0:	2200      	movs	r2, #0
 80058c2:	2100      	movs	r1, #0
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fca4 	bl	8006212 <USBD_LL_Transmit>

  return USBD_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2205      	movs	r2, #5
 80058e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058e4:	2300      	movs	r3, #0
 80058e6:	2200      	movs	r2, #0
 80058e8:	2100      	movs	r1, #0
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fcb2 	bl	8006254 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005900:	2200      	movs	r2, #0
 8005902:	4912      	ldr	r1, [pc, #72]	; (800594c <MX_USB_DEVICE_Init+0x50>)
 8005904:	4812      	ldr	r0, [pc, #72]	; (8005950 <MX_USB_DEVICE_Init+0x54>)
 8005906:	f7fe fef3 	bl	80046f0 <USBD_Init>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005910:	f7fa ff02 	bl	8000718 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005914:	490f      	ldr	r1, [pc, #60]	; (8005954 <MX_USB_DEVICE_Init+0x58>)
 8005916:	480e      	ldr	r0, [pc, #56]	; (8005950 <MX_USB_DEVICE_Init+0x54>)
 8005918:	f7fe ff20 	bl	800475c <USBD_RegisterClass>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005922:	f7fa fef9 	bl	8000718 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005926:	490c      	ldr	r1, [pc, #48]	; (8005958 <MX_USB_DEVICE_Init+0x5c>)
 8005928:	4809      	ldr	r0, [pc, #36]	; (8005950 <MX_USB_DEVICE_Init+0x54>)
 800592a:	f7fe fe45 	bl	80045b8 <USBD_CDC_RegisterInterface>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005934:	f7fa fef0 	bl	8000718 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005938:	4805      	ldr	r0, [pc, #20]	; (8005950 <MX_USB_DEVICE_Init+0x54>)
 800593a:	f7fe ff30 	bl	800479e <USBD_Start>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005944:	f7fa fee8 	bl	8000718 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005948:	bf00      	nop
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20000130 	.word	0x20000130
 8005950:	20000250 	.word	0x20000250
 8005954:	20000018 	.word	0x20000018
 8005958:	2000011c 	.word	0x2000011c

0800595c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005960:	2200      	movs	r2, #0
 8005962:	4905      	ldr	r1, [pc, #20]	; (8005978 <CDC_Init_FS+0x1c>)
 8005964:	4805      	ldr	r0, [pc, #20]	; (800597c <CDC_Init_FS+0x20>)
 8005966:	f7fe fe3c 	bl	80045e2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800596a:	4905      	ldr	r1, [pc, #20]	; (8005980 <CDC_Init_FS+0x24>)
 800596c:	4803      	ldr	r0, [pc, #12]	; (800597c <CDC_Init_FS+0x20>)
 800596e:	f7fe fe51 	bl	8004614 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005972:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005974:	4618      	mov	r0, r3
 8005976:	bd80      	pop	{r7, pc}
 8005978:	20000d20 	.word	0x20000d20
 800597c:	20000250 	.word	0x20000250
 8005980:	20000520 	.word	0x20000520

08005984 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005988:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800598a:	4618      	mov	r0, r3
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	4603      	mov	r3, r0
 800599c:	6039      	str	r1, [r7, #0]
 800599e:	71fb      	strb	r3, [r7, #7]
 80059a0:	4613      	mov	r3, r2
 80059a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	2b23      	cmp	r3, #35	; 0x23
 80059a8:	d84a      	bhi.n	8005a40 <CDC_Control_FS+0xac>
 80059aa:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <CDC_Control_FS+0x1c>)
 80059ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b0:	08005a41 	.word	0x08005a41
 80059b4:	08005a41 	.word	0x08005a41
 80059b8:	08005a41 	.word	0x08005a41
 80059bc:	08005a41 	.word	0x08005a41
 80059c0:	08005a41 	.word	0x08005a41
 80059c4:	08005a41 	.word	0x08005a41
 80059c8:	08005a41 	.word	0x08005a41
 80059cc:	08005a41 	.word	0x08005a41
 80059d0:	08005a41 	.word	0x08005a41
 80059d4:	08005a41 	.word	0x08005a41
 80059d8:	08005a41 	.word	0x08005a41
 80059dc:	08005a41 	.word	0x08005a41
 80059e0:	08005a41 	.word	0x08005a41
 80059e4:	08005a41 	.word	0x08005a41
 80059e8:	08005a41 	.word	0x08005a41
 80059ec:	08005a41 	.word	0x08005a41
 80059f0:	08005a41 	.word	0x08005a41
 80059f4:	08005a41 	.word	0x08005a41
 80059f8:	08005a41 	.word	0x08005a41
 80059fc:	08005a41 	.word	0x08005a41
 8005a00:	08005a41 	.word	0x08005a41
 8005a04:	08005a41 	.word	0x08005a41
 8005a08:	08005a41 	.word	0x08005a41
 8005a0c:	08005a41 	.word	0x08005a41
 8005a10:	08005a41 	.word	0x08005a41
 8005a14:	08005a41 	.word	0x08005a41
 8005a18:	08005a41 	.word	0x08005a41
 8005a1c:	08005a41 	.word	0x08005a41
 8005a20:	08005a41 	.word	0x08005a41
 8005a24:	08005a41 	.word	0x08005a41
 8005a28:	08005a41 	.word	0x08005a41
 8005a2c:	08005a41 	.word	0x08005a41
 8005a30:	08005a41 	.word	0x08005a41
 8005a34:	08005a41 	.word	0x08005a41
 8005a38:	08005a41 	.word	0x08005a41
 8005a3c:	08005a41 	.word	0x08005a41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005a40:	bf00      	nop
  }

  return (USBD_OK);
 8005a42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	4809      	ldr	r0, [pc, #36]	; (8005a84 <CDC_Receive_FS+0x34>)
 8005a5e:	f7fe fdd9 	bl	8004614 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005a62:	4808      	ldr	r0, [pc, #32]	; (8005a84 <CDC_Receive_FS+0x34>)
 8005a64:	f7fe fe1a 	bl	800469c <USBD_CDC_ReceivePacket>

  strncpy(&Rx_Buf[0],&Buf[0],25);
 8005a68:	2219      	movs	r2, #25
 8005a6a:	6879      	ldr	r1, [r7, #4]
 8005a6c:	4806      	ldr	r0, [pc, #24]	; (8005a88 <CDC_Receive_FS+0x38>)
 8005a6e:	f000 fd6b 	bl	8006548 <strncpy>
  Rx_Flag = 1;
 8005a72:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <CDC_Receive_FS+0x3c>)
 8005a74:	2201      	movs	r2, #1
 8005a76:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 8005a78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20000250 	.word	0x20000250
 8005a88:	20000230 	.word	0x20000230
 8005a8c:	20000201 	.word	0x20000201

08005a90 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005aa0:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <CDC_Transmit_FS+0x48>)
 8005aa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aa6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e00b      	b.n	8005ace <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005ab6:	887b      	ldrh	r3, [r7, #2]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	4806      	ldr	r0, [pc, #24]	; (8005ad8 <CDC_Transmit_FS+0x48>)
 8005abe:	f7fe fd90 	bl	80045e2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005ac2:	4805      	ldr	r0, [pc, #20]	; (8005ad8 <CDC_Transmit_FS+0x48>)
 8005ac4:	f7fe fdba 	bl	800463c <USBD_CDC_TransmitPacket>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000250 	.word	0x20000250

08005adc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005aee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
	...

08005b00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	6039      	str	r1, [r7, #0]
 8005b0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2212      	movs	r2, #18
 8005b10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005b12:	4b03      	ldr	r3, [pc, #12]	; (8005b20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	2000014c 	.word	0x2000014c

08005b24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	6039      	str	r1, [r7, #0]
 8005b2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2204      	movs	r2, #4
 8005b34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005b36:	4b03      	ldr	r3, [pc, #12]	; (8005b44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	20000160 	.word	0x20000160

08005b48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	6039      	str	r1, [r7, #0]
 8005b52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d105      	bne.n	8005b66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	4907      	ldr	r1, [pc, #28]	; (8005b7c <USBD_FS_ProductStrDescriptor+0x34>)
 8005b5e:	4808      	ldr	r0, [pc, #32]	; (8005b80 <USBD_FS_ProductStrDescriptor+0x38>)
 8005b60:	f7ff fdeb 	bl	800573a <USBD_GetString>
 8005b64:	e004      	b.n	8005b70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	4904      	ldr	r1, [pc, #16]	; (8005b7c <USBD_FS_ProductStrDescriptor+0x34>)
 8005b6a:	4805      	ldr	r0, [pc, #20]	; (8005b80 <USBD_FS_ProductStrDescriptor+0x38>)
 8005b6c:	f7ff fde5 	bl	800573a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005b70:	4b02      	ldr	r3, [pc, #8]	; (8005b7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20001520 	.word	0x20001520
 8005b80:	08006bfc 	.word	0x08006bfc

08005b84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	6039      	str	r1, [r7, #0]
 8005b8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	4904      	ldr	r1, [pc, #16]	; (8005ba4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005b94:	4804      	ldr	r0, [pc, #16]	; (8005ba8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005b96:	f7ff fdd0 	bl	800573a <USBD_GetString>
  return USBD_StrDesc;
 8005b9a:	4b02      	ldr	r3, [pc, #8]	; (8005ba4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	20001520 	.word	0x20001520
 8005ba8:	08006c08 	.word	0x08006c08

08005bac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	6039      	str	r1, [r7, #0]
 8005bb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	221a      	movs	r2, #26
 8005bbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005bbe:	f000 f843 	bl	8005c48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005bc2:	4b02      	ldr	r3, [pc, #8]	; (8005bcc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	20000164 	.word	0x20000164

08005bd0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	6039      	str	r1, [r7, #0]
 8005bda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d105      	bne.n	8005bee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	4907      	ldr	r1, [pc, #28]	; (8005c04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005be6:	4808      	ldr	r0, [pc, #32]	; (8005c08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005be8:	f7ff fda7 	bl	800573a <USBD_GetString>
 8005bec:	e004      	b.n	8005bf8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	4904      	ldr	r1, [pc, #16]	; (8005c04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005bf2:	4805      	ldr	r0, [pc, #20]	; (8005c08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005bf4:	f7ff fda1 	bl	800573a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005bf8:	4b02      	ldr	r3, [pc, #8]	; (8005c04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20001520 	.word	0x20001520
 8005c08:	08006c10 	.word	0x08006c10

08005c0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	6039      	str	r1, [r7, #0]
 8005c16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d105      	bne.n	8005c2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	4907      	ldr	r1, [pc, #28]	; (8005c40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005c22:	4808      	ldr	r0, [pc, #32]	; (8005c44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005c24:	f7ff fd89 	bl	800573a <USBD_GetString>
 8005c28:	e004      	b.n	8005c34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	4904      	ldr	r1, [pc, #16]	; (8005c40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005c2e:	4805      	ldr	r0, [pc, #20]	; (8005c44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005c30:	f7ff fd83 	bl	800573a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005c34:	4b02      	ldr	r3, [pc, #8]	; (8005c40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20001520 	.word	0x20001520
 8005c44:	08006c1c 	.word	0x08006c1c

08005c48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005c4e:	4b0f      	ldr	r3, [pc, #60]	; (8005c8c <Get_SerialNum+0x44>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005c54:	4b0e      	ldr	r3, [pc, #56]	; (8005c90 <Get_SerialNum+0x48>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005c5a:	4b0e      	ldr	r3, [pc, #56]	; (8005c94 <Get_SerialNum+0x4c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4413      	add	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d009      	beq.n	8005c82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005c6e:	2208      	movs	r2, #8
 8005c70:	4909      	ldr	r1, [pc, #36]	; (8005c98 <Get_SerialNum+0x50>)
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 f814 	bl	8005ca0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005c78:	2204      	movs	r2, #4
 8005c7a:	4908      	ldr	r1, [pc, #32]	; (8005c9c <Get_SerialNum+0x54>)
 8005c7c:	68b8      	ldr	r0, [r7, #8]
 8005c7e:	f000 f80f 	bl	8005ca0 <IntToUnicode>
  }
}
 8005c82:	bf00      	nop
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	1fff7a10 	.word	0x1fff7a10
 8005c90:	1fff7a14 	.word	0x1fff7a14
 8005c94:	1fff7a18 	.word	0x1fff7a18
 8005c98:	20000166 	.word	0x20000166
 8005c9c:	20000176 	.word	0x20000176

08005ca0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	75fb      	strb	r3, [r7, #23]
 8005cb6:	e027      	b.n	8005d08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	0f1b      	lsrs	r3, r3, #28
 8005cbc:	2b09      	cmp	r3, #9
 8005cbe:	d80b      	bhi.n	8005cd8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	0f1b      	lsrs	r3, r3, #28
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	7dfb      	ldrb	r3, [r7, #23]
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	4619      	mov	r1, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	440b      	add	r3, r1
 8005cd0:	3230      	adds	r2, #48	; 0x30
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	e00a      	b.n	8005cee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	0f1b      	lsrs	r3, r3, #28
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	440b      	add	r3, r1
 8005ce8:	3237      	adds	r2, #55	; 0x37
 8005cea:	b2d2      	uxtb	r2, r2
 8005cec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	2200      	movs	r2, #0
 8005d00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005d02:	7dfb      	ldrb	r3, [r7, #23]
 8005d04:	3301      	adds	r3, #1
 8005d06:	75fb      	strb	r3, [r7, #23]
 8005d08:	7dfa      	ldrb	r2, [r7, #23]
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d3d3      	bcc.n	8005cb8 <IntToUnicode+0x18>
  }
}
 8005d10:	bf00      	nop
 8005d12:	371c      	adds	r7, #28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08a      	sub	sp, #40	; 0x28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d24:	f107 0314 	add.w	r3, r7, #20
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	605a      	str	r2, [r3, #4]
 8005d2e:	609a      	str	r2, [r3, #8]
 8005d30:	60da      	str	r2, [r3, #12]
 8005d32:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d3c:	d13a      	bne.n	8005db4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d3e:	2300      	movs	r3, #0
 8005d40:	613b      	str	r3, [r7, #16]
 8005d42:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <HAL_PCD_MspInit+0xa0>)
 8005d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d46:	4a1d      	ldr	r2, [pc, #116]	; (8005dbc <HAL_PCD_MspInit+0xa0>)
 8005d48:	f043 0301 	orr.w	r3, r3, #1
 8005d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005d4e:	4b1b      	ldr	r3, [pc, #108]	; (8005dbc <HAL_PCD_MspInit+0xa0>)
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	613b      	str	r3, [r7, #16]
 8005d58:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005d5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d60:	2302      	movs	r3, #2
 8005d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005d6c:	230a      	movs	r3, #10
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d70:	f107 0314 	add.w	r3, r7, #20
 8005d74:	4619      	mov	r1, r3
 8005d76:	4812      	ldr	r0, [pc, #72]	; (8005dc0 <HAL_PCD_MspInit+0xa4>)
 8005d78:	f7fa ff48 	bl	8000c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005d7c:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <HAL_PCD_MspInit+0xa0>)
 8005d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d80:	4a0e      	ldr	r2, [pc, #56]	; (8005dbc <HAL_PCD_MspInit+0xa0>)
 8005d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d86:	6353      	str	r3, [r2, #52]	; 0x34
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <HAL_PCD_MspInit+0xa0>)
 8005d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d90:	4a0a      	ldr	r2, [pc, #40]	; (8005dbc <HAL_PCD_MspInit+0xa0>)
 8005d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d96:	6453      	str	r3, [r2, #68]	; 0x44
 8005d98:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <HAL_PCD_MspInit+0xa0>)
 8005d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005da4:	2200      	movs	r2, #0
 8005da6:	2100      	movs	r1, #0
 8005da8:	2043      	movs	r0, #67	; 0x43
 8005daa:	f7fa fef8 	bl	8000b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005dae:	2043      	movs	r0, #67	; 0x43
 8005db0:	f7fa ff11 	bl	8000bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005db4:	bf00      	nop
 8005db6:	3728      	adds	r7, #40	; 0x28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	40020000 	.word	0x40020000

08005dc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	f7fe fd2a 	bl	8004834 <USBD_LL_SetupStage>
}
 8005de0:	bf00      	nop
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005dfa:	78fa      	ldrb	r2, [r7, #3]
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	1a9b      	subs	r3, r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	440b      	add	r3, r1
 8005e08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	78fb      	ldrb	r3, [r7, #3]
 8005e10:	4619      	mov	r1, r3
 8005e12:	f7fe fd62 	bl	80048da <USBD_LL_DataOutStage>
}
 8005e16:	bf00      	nop
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b082      	sub	sp, #8
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	460b      	mov	r3, r1
 8005e28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005e30:	78fa      	ldrb	r2, [r7, #3]
 8005e32:	6879      	ldr	r1, [r7, #4]
 8005e34:	4613      	mov	r3, r2
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	1a9b      	subs	r3, r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	440b      	add	r3, r1
 8005e3e:	3348      	adds	r3, #72	; 0x48
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	78fb      	ldrb	r3, [r7, #3]
 8005e44:	4619      	mov	r1, r3
 8005e46:	f7fe fdab 	bl	80049a0 <USBD_LL_DataInStage>
}
 8005e4a:	bf00      	nop
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b082      	sub	sp, #8
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fe feaf 	bl	8004bc4 <USBD_LL_SOF>
}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005e76:	2301      	movs	r3, #1
 8005e78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d102      	bne.n	8005e88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005e82:	2300      	movs	r3, #0
 8005e84:	73fb      	strb	r3, [r7, #15]
 8005e86:	e008      	b.n	8005e9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d102      	bne.n	8005e96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005e90:	2301      	movs	r3, #1
 8005e92:	73fb      	strb	r3, [r7, #15]
 8005e94:	e001      	b.n	8005e9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005e96:	f7fa fc3f 	bl	8000718 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ea0:	7bfa      	ldrb	r2, [r7, #15]
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fe fe52 	bl	8004b4e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fe fe0b 	bl	8004acc <USBD_LL_Reset>
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fe fe4d 	bl	8004b6e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d005      	beq.n	8005f00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005ef4:	4b04      	ldr	r3, [pc, #16]	; (8005f08 <HAL_PCD_SuspendCallback+0x48>)
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	4a03      	ldr	r2, [pc, #12]	; (8005f08 <HAL_PCD_SuspendCallback+0x48>)
 8005efa:	f043 0306 	orr.w	r3, r3, #6
 8005efe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005f00:	bf00      	nop
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	e000ed00 	.word	0xe000ed00

08005f0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fe fe3c 	bl	8004b98 <USBD_LL_Resume>
}
 8005f20:	bf00      	nop
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f3a:	78fa      	ldrb	r2, [r7, #3]
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fe fe67 	bl	8004c12 <USBD_LL_IsoOUTIncomplete>
}
 8005f44:	bf00      	nop
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f5e:	78fa      	ldrb	r2, [r7, #3]
 8005f60:	4611      	mov	r1, r2
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fe fe48 	bl	8004bf8 <USBD_LL_IsoINIncomplete>
}
 8005f68:	bf00      	nop
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fe54 	bl	8004c2c <USBD_LL_DevConnected>
}
 8005f84:	bf00      	nop
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fe fe51 	bl	8004c42 <USBD_LL_DevDisconnected>
}
 8005fa0:	bf00      	nop
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d13c      	bne.n	8006032 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005fb8:	4a20      	ldr	r2, [pc, #128]	; (800603c <USBD_LL_Init+0x94>)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a1e      	ldr	r2, [pc, #120]	; (800603c <USBD_LL_Init+0x94>)
 8005fc4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005fc8:	4b1c      	ldr	r3, [pc, #112]	; (800603c <USBD_LL_Init+0x94>)
 8005fca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005fce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005fd0:	4b1a      	ldr	r3, [pc, #104]	; (800603c <USBD_LL_Init+0x94>)
 8005fd2:	2204      	movs	r2, #4
 8005fd4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005fd6:	4b19      	ldr	r3, [pc, #100]	; (800603c <USBD_LL_Init+0x94>)
 8005fd8:	2202      	movs	r2, #2
 8005fda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005fdc:	4b17      	ldr	r3, [pc, #92]	; (800603c <USBD_LL_Init+0x94>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005fe2:	4b16      	ldr	r3, [pc, #88]	; (800603c <USBD_LL_Init+0x94>)
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005fe8:	4b14      	ldr	r3, [pc, #80]	; (800603c <USBD_LL_Init+0x94>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005fee:	4b13      	ldr	r3, [pc, #76]	; (800603c <USBD_LL_Init+0x94>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005ff4:	4b11      	ldr	r3, [pc, #68]	; (800603c <USBD_LL_Init+0x94>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005ffa:	4b10      	ldr	r3, [pc, #64]	; (800603c <USBD_LL_Init+0x94>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006000:	4b0e      	ldr	r3, [pc, #56]	; (800603c <USBD_LL_Init+0x94>)
 8006002:	2200      	movs	r2, #0
 8006004:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006006:	480d      	ldr	r0, [pc, #52]	; (800603c <USBD_LL_Init+0x94>)
 8006008:	f7fa ff9a 	bl	8000f40 <HAL_PCD_Init>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006012:	f7fa fb81 	bl	8000718 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006016:	2180      	movs	r1, #128	; 0x80
 8006018:	4808      	ldr	r0, [pc, #32]	; (800603c <USBD_LL_Init+0x94>)
 800601a:	f7fc f8f8 	bl	800220e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800601e:	2240      	movs	r2, #64	; 0x40
 8006020:	2100      	movs	r1, #0
 8006022:	4806      	ldr	r0, [pc, #24]	; (800603c <USBD_LL_Init+0x94>)
 8006024:	f7fc f8ac 	bl	8002180 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006028:	2280      	movs	r2, #128	; 0x80
 800602a:	2101      	movs	r1, #1
 800602c:	4803      	ldr	r0, [pc, #12]	; (800603c <USBD_LL_Init+0x94>)
 800602e:	f7fc f8a7 	bl	8002180 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	20001720 	.word	0x20001720

08006040 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006056:	4618      	mov	r0, r3
 8006058:	f7fb f88f 	bl	800117a <HAL_PCD_Start>
 800605c:	4603      	mov	r3, r0
 800605e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	4618      	mov	r0, r3
 8006064:	f000 f92a 	bl	80062bc <USBD_Get_USB_Status>
 8006068:	4603      	mov	r3, r0
 800606a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800606c:	7bbb      	ldrb	r3, [r7, #14]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b084      	sub	sp, #16
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	4608      	mov	r0, r1
 8006080:	4611      	mov	r1, r2
 8006082:	461a      	mov	r2, r3
 8006084:	4603      	mov	r3, r0
 8006086:	70fb      	strb	r3, [r7, #3]
 8006088:	460b      	mov	r3, r1
 800608a:	70bb      	strb	r3, [r7, #2]
 800608c:	4613      	mov	r3, r2
 800608e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006094:	2300      	movs	r3, #0
 8006096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800609e:	78bb      	ldrb	r3, [r7, #2]
 80060a0:	883a      	ldrh	r2, [r7, #0]
 80060a2:	78f9      	ldrb	r1, [r7, #3]
 80060a4:	f7fb fc73 	bl	800198e <HAL_PCD_EP_Open>
 80060a8:	4603      	mov	r3, r0
 80060aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 f904 	bl	80062bc <USBD_Get_USB_Status>
 80060b4:	4603      	mov	r3, r0
 80060b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80060b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	460b      	mov	r3, r1
 80060cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060d2:	2300      	movs	r3, #0
 80060d4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80060dc:	78fa      	ldrb	r2, [r7, #3]
 80060de:	4611      	mov	r1, r2
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fb fcbc 	bl	8001a5e <HAL_PCD_EP_Close>
 80060e6:	4603      	mov	r3, r0
 80060e8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 f8e5 	bl	80062bc <USBD_Get_USB_Status>
 80060f2:	4603      	mov	r3, r0
 80060f4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80060f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006110:	2300      	movs	r3, #0
 8006112:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800611a:	78fa      	ldrb	r2, [r7, #3]
 800611c:	4611      	mov	r1, r2
 800611e:	4618      	mov	r0, r3
 8006120:	f7fb fd94 	bl	8001c4c <HAL_PCD_EP_SetStall>
 8006124:	4603      	mov	r3, r0
 8006126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 f8c6 	bl	80062bc <USBD_Get_USB_Status>
 8006130:	4603      	mov	r3, r0
 8006132:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006134:	7bbb      	ldrb	r3, [r7, #14]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006158:	78fa      	ldrb	r2, [r7, #3]
 800615a:	4611      	mov	r1, r2
 800615c:	4618      	mov	r0, r3
 800615e:	f7fb fdd9 	bl	8001d14 <HAL_PCD_EP_ClrStall>
 8006162:	4603      	mov	r3, r0
 8006164:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8006166:	7bfb      	ldrb	r3, [r7, #15]
 8006168:	4618      	mov	r0, r3
 800616a:	f000 f8a7 	bl	80062bc <USBD_Get_USB_Status>
 800616e:	4603      	mov	r3, r0
 8006170:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8006172:	7bbb      	ldrb	r3, [r7, #14]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800618e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006194:	2b00      	cmp	r3, #0
 8006196:	da0b      	bge.n	80061b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800619e:	68f9      	ldr	r1, [r7, #12]
 80061a0:	4613      	mov	r3, r2
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	333e      	adds	r3, #62	; 0x3e
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	e00b      	b.n	80061c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061b6:	68f9      	ldr	r1, [r7, #12]
 80061b8:	4613      	mov	r3, r2
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	1a9b      	subs	r3, r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	440b      	add	r3, r1
 80061c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80061c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061ee:	78fa      	ldrb	r2, [r7, #3]
 80061f0:	4611      	mov	r1, r2
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fb fba6 	bl	8001944 <HAL_PCD_SetAddress>
 80061f8:	4603      	mov	r3, r0
 80061fa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 f85c 	bl	80062bc <USBD_Get_USB_Status>
 8006204:	4603      	mov	r3, r0
 8006206:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006208:	7bbb      	ldrb	r3, [r7, #14]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b086      	sub	sp, #24
 8006216:	af00      	add	r7, sp, #0
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
 800621e:	460b      	mov	r3, r1
 8006220:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006230:	7af9      	ldrb	r1, [r7, #11]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	f7fb fcbf 	bl	8001bb8 <HAL_PCD_EP_Transmit>
 800623a:	4603      	mov	r3, r0
 800623c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800623e:	7dfb      	ldrb	r3, [r7, #23]
 8006240:	4618      	mov	r0, r3
 8006242:	f000 f83b 	bl	80062bc <USBD_Get_USB_Status>
 8006246:	4603      	mov	r3, r0
 8006248:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800624a:	7dbb      	ldrb	r3, [r7, #22]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	607a      	str	r2, [r7, #4]
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	460b      	mov	r3, r1
 8006262:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006264:	2300      	movs	r3, #0
 8006266:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006272:	7af9      	ldrb	r1, [r7, #11]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	f7fb fc3b 	bl	8001af2 <HAL_PCD_EP_Receive>
 800627c:	4603      	mov	r3, r0
 800627e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8006280:	7dfb      	ldrb	r3, [r7, #23]
 8006282:	4618      	mov	r0, r3
 8006284:	f000 f81a 	bl	80062bc <USBD_Get_USB_Status>
 8006288:	4603      	mov	r3, r0
 800628a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800628c:	7dbb      	ldrb	r3, [r7, #22]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	460b      	mov	r3, r1
 80062a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062a8:	78fa      	ldrb	r2, [r7, #3]
 80062aa:	4611      	mov	r1, r2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7fb fc6b 	bl	8001b88 <HAL_PCD_EP_GetRxCount>
 80062b2:	4603      	mov	r3, r0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	4603      	mov	r3, r0
 80062c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d817      	bhi.n	8006300 <USBD_Get_USB_Status+0x44>
 80062d0:	a201      	add	r2, pc, #4	; (adr r2, 80062d8 <USBD_Get_USB_Status+0x1c>)
 80062d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d6:	bf00      	nop
 80062d8:	080062e9 	.word	0x080062e9
 80062dc:	080062ef 	.word	0x080062ef
 80062e0:	080062f5 	.word	0x080062f5
 80062e4:	080062fb 	.word	0x080062fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	73fb      	strb	r3, [r7, #15]
    break;
 80062ec:	e00b      	b.n	8006306 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80062ee:	2303      	movs	r3, #3
 80062f0:	73fb      	strb	r3, [r7, #15]
    break;
 80062f2:	e008      	b.n	8006306 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80062f4:	2301      	movs	r3, #1
 80062f6:	73fb      	strb	r3, [r7, #15]
    break;
 80062f8:	e005      	b.n	8006306 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80062fa:	2303      	movs	r3, #3
 80062fc:	73fb      	strb	r3, [r7, #15]
    break;
 80062fe:	e002      	b.n	8006306 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006300:	2303      	movs	r3, #3
 8006302:	73fb      	strb	r3, [r7, #15]
    break;
 8006304:	bf00      	nop
  }
  return usb_status;
 8006306:	7bfb      	ldrb	r3, [r7, #15]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <__errno>:
 8006314:	4b01      	ldr	r3, [pc, #4]	; (800631c <__errno+0x8>)
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000180 	.word	0x20000180

08006320 <__libc_init_array>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	4e0d      	ldr	r6, [pc, #52]	; (8006358 <__libc_init_array+0x38>)
 8006324:	4c0d      	ldr	r4, [pc, #52]	; (800635c <__libc_init_array+0x3c>)
 8006326:	1ba4      	subs	r4, r4, r6
 8006328:	10a4      	asrs	r4, r4, #2
 800632a:	2500      	movs	r5, #0
 800632c:	42a5      	cmp	r5, r4
 800632e:	d109      	bne.n	8006344 <__libc_init_array+0x24>
 8006330:	4e0b      	ldr	r6, [pc, #44]	; (8006360 <__libc_init_array+0x40>)
 8006332:	4c0c      	ldr	r4, [pc, #48]	; (8006364 <__libc_init_array+0x44>)
 8006334:	f000 fc4c 	bl	8006bd0 <_init>
 8006338:	1ba4      	subs	r4, r4, r6
 800633a:	10a4      	asrs	r4, r4, #2
 800633c:	2500      	movs	r5, #0
 800633e:	42a5      	cmp	r5, r4
 8006340:	d105      	bne.n	800634e <__libc_init_array+0x2e>
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006348:	4798      	blx	r3
 800634a:	3501      	adds	r5, #1
 800634c:	e7ee      	b.n	800632c <__libc_init_array+0xc>
 800634e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006352:	4798      	blx	r3
 8006354:	3501      	adds	r5, #1
 8006356:	e7f2      	b.n	800633e <__libc_init_array+0x1e>
 8006358:	08006c78 	.word	0x08006c78
 800635c:	08006c78 	.word	0x08006c78
 8006360:	08006c78 	.word	0x08006c78
 8006364:	08006c7c 	.word	0x08006c7c

08006368 <malloc>:
 8006368:	4b02      	ldr	r3, [pc, #8]	; (8006374 <malloc+0xc>)
 800636a:	4601      	mov	r1, r0
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	f000 b861 	b.w	8006434 <_malloc_r>
 8006372:	bf00      	nop
 8006374:	20000180 	.word	0x20000180

08006378 <free>:
 8006378:	4b02      	ldr	r3, [pc, #8]	; (8006384 <free+0xc>)
 800637a:	4601      	mov	r1, r0
 800637c:	6818      	ldr	r0, [r3, #0]
 800637e:	f000 b80b 	b.w	8006398 <_free_r>
 8006382:	bf00      	nop
 8006384:	20000180 	.word	0x20000180

08006388 <memset>:
 8006388:	4402      	add	r2, r0
 800638a:	4603      	mov	r3, r0
 800638c:	4293      	cmp	r3, r2
 800638e:	d100      	bne.n	8006392 <memset+0xa>
 8006390:	4770      	bx	lr
 8006392:	f803 1b01 	strb.w	r1, [r3], #1
 8006396:	e7f9      	b.n	800638c <memset+0x4>

08006398 <_free_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	4605      	mov	r5, r0
 800639c:	2900      	cmp	r1, #0
 800639e:	d045      	beq.n	800642c <_free_r+0x94>
 80063a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a4:	1f0c      	subs	r4, r1, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bfb8      	it	lt
 80063aa:	18e4      	addlt	r4, r4, r3
 80063ac:	f000 f8e1 	bl	8006572 <__malloc_lock>
 80063b0:	4a1f      	ldr	r2, [pc, #124]	; (8006430 <_free_r+0x98>)
 80063b2:	6813      	ldr	r3, [r2, #0]
 80063b4:	4610      	mov	r0, r2
 80063b6:	b933      	cbnz	r3, 80063c6 <_free_r+0x2e>
 80063b8:	6063      	str	r3, [r4, #4]
 80063ba:	6014      	str	r4, [r2, #0]
 80063bc:	4628      	mov	r0, r5
 80063be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063c2:	f000 b8d7 	b.w	8006574 <__malloc_unlock>
 80063c6:	42a3      	cmp	r3, r4
 80063c8:	d90c      	bls.n	80063e4 <_free_r+0x4c>
 80063ca:	6821      	ldr	r1, [r4, #0]
 80063cc:	1862      	adds	r2, r4, r1
 80063ce:	4293      	cmp	r3, r2
 80063d0:	bf04      	itt	eq
 80063d2:	681a      	ldreq	r2, [r3, #0]
 80063d4:	685b      	ldreq	r3, [r3, #4]
 80063d6:	6063      	str	r3, [r4, #4]
 80063d8:	bf04      	itt	eq
 80063da:	1852      	addeq	r2, r2, r1
 80063dc:	6022      	streq	r2, [r4, #0]
 80063de:	6004      	str	r4, [r0, #0]
 80063e0:	e7ec      	b.n	80063bc <_free_r+0x24>
 80063e2:	4613      	mov	r3, r2
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	b10a      	cbz	r2, 80063ec <_free_r+0x54>
 80063e8:	42a2      	cmp	r2, r4
 80063ea:	d9fa      	bls.n	80063e2 <_free_r+0x4a>
 80063ec:	6819      	ldr	r1, [r3, #0]
 80063ee:	1858      	adds	r0, r3, r1
 80063f0:	42a0      	cmp	r0, r4
 80063f2:	d10b      	bne.n	800640c <_free_r+0x74>
 80063f4:	6820      	ldr	r0, [r4, #0]
 80063f6:	4401      	add	r1, r0
 80063f8:	1858      	adds	r0, r3, r1
 80063fa:	4282      	cmp	r2, r0
 80063fc:	6019      	str	r1, [r3, #0]
 80063fe:	d1dd      	bne.n	80063bc <_free_r+0x24>
 8006400:	6810      	ldr	r0, [r2, #0]
 8006402:	6852      	ldr	r2, [r2, #4]
 8006404:	605a      	str	r2, [r3, #4]
 8006406:	4401      	add	r1, r0
 8006408:	6019      	str	r1, [r3, #0]
 800640a:	e7d7      	b.n	80063bc <_free_r+0x24>
 800640c:	d902      	bls.n	8006414 <_free_r+0x7c>
 800640e:	230c      	movs	r3, #12
 8006410:	602b      	str	r3, [r5, #0]
 8006412:	e7d3      	b.n	80063bc <_free_r+0x24>
 8006414:	6820      	ldr	r0, [r4, #0]
 8006416:	1821      	adds	r1, r4, r0
 8006418:	428a      	cmp	r2, r1
 800641a:	bf04      	itt	eq
 800641c:	6811      	ldreq	r1, [r2, #0]
 800641e:	6852      	ldreq	r2, [r2, #4]
 8006420:	6062      	str	r2, [r4, #4]
 8006422:	bf04      	itt	eq
 8006424:	1809      	addeq	r1, r1, r0
 8006426:	6021      	streq	r1, [r4, #0]
 8006428:	605c      	str	r4, [r3, #4]
 800642a:	e7c7      	b.n	80063bc <_free_r+0x24>
 800642c:	bd38      	pop	{r3, r4, r5, pc}
 800642e:	bf00      	nop
 8006430:	2000020c 	.word	0x2000020c

08006434 <_malloc_r>:
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	1ccd      	adds	r5, r1, #3
 8006438:	f025 0503 	bic.w	r5, r5, #3
 800643c:	3508      	adds	r5, #8
 800643e:	2d0c      	cmp	r5, #12
 8006440:	bf38      	it	cc
 8006442:	250c      	movcc	r5, #12
 8006444:	2d00      	cmp	r5, #0
 8006446:	4606      	mov	r6, r0
 8006448:	db01      	blt.n	800644e <_malloc_r+0x1a>
 800644a:	42a9      	cmp	r1, r5
 800644c:	d903      	bls.n	8006456 <_malloc_r+0x22>
 800644e:	230c      	movs	r3, #12
 8006450:	6033      	str	r3, [r6, #0]
 8006452:	2000      	movs	r0, #0
 8006454:	bd70      	pop	{r4, r5, r6, pc}
 8006456:	f000 f88c 	bl	8006572 <__malloc_lock>
 800645a:	4a21      	ldr	r2, [pc, #132]	; (80064e0 <_malloc_r+0xac>)
 800645c:	6814      	ldr	r4, [r2, #0]
 800645e:	4621      	mov	r1, r4
 8006460:	b991      	cbnz	r1, 8006488 <_malloc_r+0x54>
 8006462:	4c20      	ldr	r4, [pc, #128]	; (80064e4 <_malloc_r+0xb0>)
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	b91b      	cbnz	r3, 8006470 <_malloc_r+0x3c>
 8006468:	4630      	mov	r0, r6
 800646a:	f000 f83d 	bl	80064e8 <_sbrk_r>
 800646e:	6020      	str	r0, [r4, #0]
 8006470:	4629      	mov	r1, r5
 8006472:	4630      	mov	r0, r6
 8006474:	f000 f838 	bl	80064e8 <_sbrk_r>
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	d124      	bne.n	80064c6 <_malloc_r+0x92>
 800647c:	230c      	movs	r3, #12
 800647e:	6033      	str	r3, [r6, #0]
 8006480:	4630      	mov	r0, r6
 8006482:	f000 f877 	bl	8006574 <__malloc_unlock>
 8006486:	e7e4      	b.n	8006452 <_malloc_r+0x1e>
 8006488:	680b      	ldr	r3, [r1, #0]
 800648a:	1b5b      	subs	r3, r3, r5
 800648c:	d418      	bmi.n	80064c0 <_malloc_r+0x8c>
 800648e:	2b0b      	cmp	r3, #11
 8006490:	d90f      	bls.n	80064b2 <_malloc_r+0x7e>
 8006492:	600b      	str	r3, [r1, #0]
 8006494:	50cd      	str	r5, [r1, r3]
 8006496:	18cc      	adds	r4, r1, r3
 8006498:	4630      	mov	r0, r6
 800649a:	f000 f86b 	bl	8006574 <__malloc_unlock>
 800649e:	f104 000b 	add.w	r0, r4, #11
 80064a2:	1d23      	adds	r3, r4, #4
 80064a4:	f020 0007 	bic.w	r0, r0, #7
 80064a8:	1ac3      	subs	r3, r0, r3
 80064aa:	d0d3      	beq.n	8006454 <_malloc_r+0x20>
 80064ac:	425a      	negs	r2, r3
 80064ae:	50e2      	str	r2, [r4, r3]
 80064b0:	e7d0      	b.n	8006454 <_malloc_r+0x20>
 80064b2:	428c      	cmp	r4, r1
 80064b4:	684b      	ldr	r3, [r1, #4]
 80064b6:	bf16      	itet	ne
 80064b8:	6063      	strne	r3, [r4, #4]
 80064ba:	6013      	streq	r3, [r2, #0]
 80064bc:	460c      	movne	r4, r1
 80064be:	e7eb      	b.n	8006498 <_malloc_r+0x64>
 80064c0:	460c      	mov	r4, r1
 80064c2:	6849      	ldr	r1, [r1, #4]
 80064c4:	e7cc      	b.n	8006460 <_malloc_r+0x2c>
 80064c6:	1cc4      	adds	r4, r0, #3
 80064c8:	f024 0403 	bic.w	r4, r4, #3
 80064cc:	42a0      	cmp	r0, r4
 80064ce:	d005      	beq.n	80064dc <_malloc_r+0xa8>
 80064d0:	1a21      	subs	r1, r4, r0
 80064d2:	4630      	mov	r0, r6
 80064d4:	f000 f808 	bl	80064e8 <_sbrk_r>
 80064d8:	3001      	adds	r0, #1
 80064da:	d0cf      	beq.n	800647c <_malloc_r+0x48>
 80064dc:	6025      	str	r5, [r4, #0]
 80064de:	e7db      	b.n	8006498 <_malloc_r+0x64>
 80064e0:	2000020c 	.word	0x2000020c
 80064e4:	20000210 	.word	0x20000210

080064e8 <_sbrk_r>:
 80064e8:	b538      	push	{r3, r4, r5, lr}
 80064ea:	4c06      	ldr	r4, [pc, #24]	; (8006504 <_sbrk_r+0x1c>)
 80064ec:	2300      	movs	r3, #0
 80064ee:	4605      	mov	r5, r0
 80064f0:	4608      	mov	r0, r1
 80064f2:	6023      	str	r3, [r4, #0]
 80064f4:	f7fa f978 	bl	80007e8 <_sbrk>
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	d102      	bne.n	8006502 <_sbrk_r+0x1a>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	b103      	cbz	r3, 8006502 <_sbrk_r+0x1a>
 8006500:	602b      	str	r3, [r5, #0]
 8006502:	bd38      	pop	{r3, r4, r5, pc}
 8006504:	20001b28 	.word	0x20001b28

08006508 <siprintf>:
 8006508:	b40e      	push	{r1, r2, r3}
 800650a:	b500      	push	{lr}
 800650c:	b09c      	sub	sp, #112	; 0x70
 800650e:	ab1d      	add	r3, sp, #116	; 0x74
 8006510:	9002      	str	r0, [sp, #8]
 8006512:	9006      	str	r0, [sp, #24]
 8006514:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006518:	4809      	ldr	r0, [pc, #36]	; (8006540 <siprintf+0x38>)
 800651a:	9107      	str	r1, [sp, #28]
 800651c:	9104      	str	r1, [sp, #16]
 800651e:	4909      	ldr	r1, [pc, #36]	; (8006544 <siprintf+0x3c>)
 8006520:	f853 2b04 	ldr.w	r2, [r3], #4
 8006524:	9105      	str	r1, [sp, #20]
 8006526:	6800      	ldr	r0, [r0, #0]
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	a902      	add	r1, sp, #8
 800652c:	f000 f87e 	bl	800662c <_svfiprintf_r>
 8006530:	9b02      	ldr	r3, [sp, #8]
 8006532:	2200      	movs	r2, #0
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	b01c      	add	sp, #112	; 0x70
 8006538:	f85d eb04 	ldr.w	lr, [sp], #4
 800653c:	b003      	add	sp, #12
 800653e:	4770      	bx	lr
 8006540:	20000180 	.word	0x20000180
 8006544:	ffff0208 	.word	0xffff0208

08006548 <strncpy>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	3901      	subs	r1, #1
 800654c:	4604      	mov	r4, r0
 800654e:	b902      	cbnz	r2, 8006552 <strncpy+0xa>
 8006550:	bd70      	pop	{r4, r5, r6, pc}
 8006552:	4623      	mov	r3, r4
 8006554:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8006558:	f803 5b01 	strb.w	r5, [r3], #1
 800655c:	1e56      	subs	r6, r2, #1
 800655e:	b92d      	cbnz	r5, 800656c <strncpy+0x24>
 8006560:	4414      	add	r4, r2
 8006562:	42a3      	cmp	r3, r4
 8006564:	d0f4      	beq.n	8006550 <strncpy+0x8>
 8006566:	f803 5b01 	strb.w	r5, [r3], #1
 800656a:	e7fa      	b.n	8006562 <strncpy+0x1a>
 800656c:	461c      	mov	r4, r3
 800656e:	4632      	mov	r2, r6
 8006570:	e7ed      	b.n	800654e <strncpy+0x6>

08006572 <__malloc_lock>:
 8006572:	4770      	bx	lr

08006574 <__malloc_unlock>:
 8006574:	4770      	bx	lr

08006576 <__ssputs_r>:
 8006576:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800657a:	688e      	ldr	r6, [r1, #8]
 800657c:	429e      	cmp	r6, r3
 800657e:	4682      	mov	sl, r0
 8006580:	460c      	mov	r4, r1
 8006582:	4690      	mov	r8, r2
 8006584:	4699      	mov	r9, r3
 8006586:	d837      	bhi.n	80065f8 <__ssputs_r+0x82>
 8006588:	898a      	ldrh	r2, [r1, #12]
 800658a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800658e:	d031      	beq.n	80065f4 <__ssputs_r+0x7e>
 8006590:	6825      	ldr	r5, [r4, #0]
 8006592:	6909      	ldr	r1, [r1, #16]
 8006594:	1a6f      	subs	r7, r5, r1
 8006596:	6965      	ldr	r5, [r4, #20]
 8006598:	2302      	movs	r3, #2
 800659a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800659e:	fb95 f5f3 	sdiv	r5, r5, r3
 80065a2:	f109 0301 	add.w	r3, r9, #1
 80065a6:	443b      	add	r3, r7
 80065a8:	429d      	cmp	r5, r3
 80065aa:	bf38      	it	cc
 80065ac:	461d      	movcc	r5, r3
 80065ae:	0553      	lsls	r3, r2, #21
 80065b0:	d530      	bpl.n	8006614 <__ssputs_r+0x9e>
 80065b2:	4629      	mov	r1, r5
 80065b4:	f7ff ff3e 	bl	8006434 <_malloc_r>
 80065b8:	4606      	mov	r6, r0
 80065ba:	b950      	cbnz	r0, 80065d2 <__ssputs_r+0x5c>
 80065bc:	230c      	movs	r3, #12
 80065be:	f8ca 3000 	str.w	r3, [sl]
 80065c2:	89a3      	ldrh	r3, [r4, #12]
 80065c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065c8:	81a3      	strh	r3, [r4, #12]
 80065ca:	f04f 30ff 	mov.w	r0, #4294967295
 80065ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d2:	463a      	mov	r2, r7
 80065d4:	6921      	ldr	r1, [r4, #16]
 80065d6:	f000 faa9 	bl	8006b2c <memcpy>
 80065da:	89a3      	ldrh	r3, [r4, #12]
 80065dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e4:	81a3      	strh	r3, [r4, #12]
 80065e6:	6126      	str	r6, [r4, #16]
 80065e8:	6165      	str	r5, [r4, #20]
 80065ea:	443e      	add	r6, r7
 80065ec:	1bed      	subs	r5, r5, r7
 80065ee:	6026      	str	r6, [r4, #0]
 80065f0:	60a5      	str	r5, [r4, #8]
 80065f2:	464e      	mov	r6, r9
 80065f4:	454e      	cmp	r6, r9
 80065f6:	d900      	bls.n	80065fa <__ssputs_r+0x84>
 80065f8:	464e      	mov	r6, r9
 80065fa:	4632      	mov	r2, r6
 80065fc:	4641      	mov	r1, r8
 80065fe:	6820      	ldr	r0, [r4, #0]
 8006600:	f000 fa9f 	bl	8006b42 <memmove>
 8006604:	68a3      	ldr	r3, [r4, #8]
 8006606:	1b9b      	subs	r3, r3, r6
 8006608:	60a3      	str	r3, [r4, #8]
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	441e      	add	r6, r3
 800660e:	6026      	str	r6, [r4, #0]
 8006610:	2000      	movs	r0, #0
 8006612:	e7dc      	b.n	80065ce <__ssputs_r+0x58>
 8006614:	462a      	mov	r2, r5
 8006616:	f000 faad 	bl	8006b74 <_realloc_r>
 800661a:	4606      	mov	r6, r0
 800661c:	2800      	cmp	r0, #0
 800661e:	d1e2      	bne.n	80065e6 <__ssputs_r+0x70>
 8006620:	6921      	ldr	r1, [r4, #16]
 8006622:	4650      	mov	r0, sl
 8006624:	f7ff feb8 	bl	8006398 <_free_r>
 8006628:	e7c8      	b.n	80065bc <__ssputs_r+0x46>
	...

0800662c <_svfiprintf_r>:
 800662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	461d      	mov	r5, r3
 8006632:	898b      	ldrh	r3, [r1, #12]
 8006634:	061f      	lsls	r7, r3, #24
 8006636:	b09d      	sub	sp, #116	; 0x74
 8006638:	4680      	mov	r8, r0
 800663a:	460c      	mov	r4, r1
 800663c:	4616      	mov	r6, r2
 800663e:	d50f      	bpl.n	8006660 <_svfiprintf_r+0x34>
 8006640:	690b      	ldr	r3, [r1, #16]
 8006642:	b96b      	cbnz	r3, 8006660 <_svfiprintf_r+0x34>
 8006644:	2140      	movs	r1, #64	; 0x40
 8006646:	f7ff fef5 	bl	8006434 <_malloc_r>
 800664a:	6020      	str	r0, [r4, #0]
 800664c:	6120      	str	r0, [r4, #16]
 800664e:	b928      	cbnz	r0, 800665c <_svfiprintf_r+0x30>
 8006650:	230c      	movs	r3, #12
 8006652:	f8c8 3000 	str.w	r3, [r8]
 8006656:	f04f 30ff 	mov.w	r0, #4294967295
 800665a:	e0c8      	b.n	80067ee <_svfiprintf_r+0x1c2>
 800665c:	2340      	movs	r3, #64	; 0x40
 800665e:	6163      	str	r3, [r4, #20]
 8006660:	2300      	movs	r3, #0
 8006662:	9309      	str	r3, [sp, #36]	; 0x24
 8006664:	2320      	movs	r3, #32
 8006666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800666a:	2330      	movs	r3, #48	; 0x30
 800666c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006670:	9503      	str	r5, [sp, #12]
 8006672:	f04f 0b01 	mov.w	fp, #1
 8006676:	4637      	mov	r7, r6
 8006678:	463d      	mov	r5, r7
 800667a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800667e:	b10b      	cbz	r3, 8006684 <_svfiprintf_r+0x58>
 8006680:	2b25      	cmp	r3, #37	; 0x25
 8006682:	d13e      	bne.n	8006702 <_svfiprintf_r+0xd6>
 8006684:	ebb7 0a06 	subs.w	sl, r7, r6
 8006688:	d00b      	beq.n	80066a2 <_svfiprintf_r+0x76>
 800668a:	4653      	mov	r3, sl
 800668c:	4632      	mov	r2, r6
 800668e:	4621      	mov	r1, r4
 8006690:	4640      	mov	r0, r8
 8006692:	f7ff ff70 	bl	8006576 <__ssputs_r>
 8006696:	3001      	adds	r0, #1
 8006698:	f000 80a4 	beq.w	80067e4 <_svfiprintf_r+0x1b8>
 800669c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800669e:	4453      	add	r3, sl
 80066a0:	9309      	str	r3, [sp, #36]	; 0x24
 80066a2:	783b      	ldrb	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 809d 	beq.w	80067e4 <_svfiprintf_r+0x1b8>
 80066aa:	2300      	movs	r3, #0
 80066ac:	f04f 32ff 	mov.w	r2, #4294967295
 80066b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066b4:	9304      	str	r3, [sp, #16]
 80066b6:	9307      	str	r3, [sp, #28]
 80066b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066bc:	931a      	str	r3, [sp, #104]	; 0x68
 80066be:	462f      	mov	r7, r5
 80066c0:	2205      	movs	r2, #5
 80066c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80066c6:	4850      	ldr	r0, [pc, #320]	; (8006808 <_svfiprintf_r+0x1dc>)
 80066c8:	f7f9 fd8a 	bl	80001e0 <memchr>
 80066cc:	9b04      	ldr	r3, [sp, #16]
 80066ce:	b9d0      	cbnz	r0, 8006706 <_svfiprintf_r+0xda>
 80066d0:	06d9      	lsls	r1, r3, #27
 80066d2:	bf44      	itt	mi
 80066d4:	2220      	movmi	r2, #32
 80066d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066da:	071a      	lsls	r2, r3, #28
 80066dc:	bf44      	itt	mi
 80066de:	222b      	movmi	r2, #43	; 0x2b
 80066e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066e4:	782a      	ldrb	r2, [r5, #0]
 80066e6:	2a2a      	cmp	r2, #42	; 0x2a
 80066e8:	d015      	beq.n	8006716 <_svfiprintf_r+0xea>
 80066ea:	9a07      	ldr	r2, [sp, #28]
 80066ec:	462f      	mov	r7, r5
 80066ee:	2000      	movs	r0, #0
 80066f0:	250a      	movs	r5, #10
 80066f2:	4639      	mov	r1, r7
 80066f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066f8:	3b30      	subs	r3, #48	; 0x30
 80066fa:	2b09      	cmp	r3, #9
 80066fc:	d94d      	bls.n	800679a <_svfiprintf_r+0x16e>
 80066fe:	b1b8      	cbz	r0, 8006730 <_svfiprintf_r+0x104>
 8006700:	e00f      	b.n	8006722 <_svfiprintf_r+0xf6>
 8006702:	462f      	mov	r7, r5
 8006704:	e7b8      	b.n	8006678 <_svfiprintf_r+0x4c>
 8006706:	4a40      	ldr	r2, [pc, #256]	; (8006808 <_svfiprintf_r+0x1dc>)
 8006708:	1a80      	subs	r0, r0, r2
 800670a:	fa0b f000 	lsl.w	r0, fp, r0
 800670e:	4318      	orrs	r0, r3
 8006710:	9004      	str	r0, [sp, #16]
 8006712:	463d      	mov	r5, r7
 8006714:	e7d3      	b.n	80066be <_svfiprintf_r+0x92>
 8006716:	9a03      	ldr	r2, [sp, #12]
 8006718:	1d11      	adds	r1, r2, #4
 800671a:	6812      	ldr	r2, [r2, #0]
 800671c:	9103      	str	r1, [sp, #12]
 800671e:	2a00      	cmp	r2, #0
 8006720:	db01      	blt.n	8006726 <_svfiprintf_r+0xfa>
 8006722:	9207      	str	r2, [sp, #28]
 8006724:	e004      	b.n	8006730 <_svfiprintf_r+0x104>
 8006726:	4252      	negs	r2, r2
 8006728:	f043 0302 	orr.w	r3, r3, #2
 800672c:	9207      	str	r2, [sp, #28]
 800672e:	9304      	str	r3, [sp, #16]
 8006730:	783b      	ldrb	r3, [r7, #0]
 8006732:	2b2e      	cmp	r3, #46	; 0x2e
 8006734:	d10c      	bne.n	8006750 <_svfiprintf_r+0x124>
 8006736:	787b      	ldrb	r3, [r7, #1]
 8006738:	2b2a      	cmp	r3, #42	; 0x2a
 800673a:	d133      	bne.n	80067a4 <_svfiprintf_r+0x178>
 800673c:	9b03      	ldr	r3, [sp, #12]
 800673e:	1d1a      	adds	r2, r3, #4
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	9203      	str	r2, [sp, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	bfb8      	it	lt
 8006748:	f04f 33ff 	movlt.w	r3, #4294967295
 800674c:	3702      	adds	r7, #2
 800674e:	9305      	str	r3, [sp, #20]
 8006750:	4d2e      	ldr	r5, [pc, #184]	; (800680c <_svfiprintf_r+0x1e0>)
 8006752:	7839      	ldrb	r1, [r7, #0]
 8006754:	2203      	movs	r2, #3
 8006756:	4628      	mov	r0, r5
 8006758:	f7f9 fd42 	bl	80001e0 <memchr>
 800675c:	b138      	cbz	r0, 800676e <_svfiprintf_r+0x142>
 800675e:	2340      	movs	r3, #64	; 0x40
 8006760:	1b40      	subs	r0, r0, r5
 8006762:	fa03 f000 	lsl.w	r0, r3, r0
 8006766:	9b04      	ldr	r3, [sp, #16]
 8006768:	4303      	orrs	r3, r0
 800676a:	3701      	adds	r7, #1
 800676c:	9304      	str	r3, [sp, #16]
 800676e:	7839      	ldrb	r1, [r7, #0]
 8006770:	4827      	ldr	r0, [pc, #156]	; (8006810 <_svfiprintf_r+0x1e4>)
 8006772:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006776:	2206      	movs	r2, #6
 8006778:	1c7e      	adds	r6, r7, #1
 800677a:	f7f9 fd31 	bl	80001e0 <memchr>
 800677e:	2800      	cmp	r0, #0
 8006780:	d038      	beq.n	80067f4 <_svfiprintf_r+0x1c8>
 8006782:	4b24      	ldr	r3, [pc, #144]	; (8006814 <_svfiprintf_r+0x1e8>)
 8006784:	bb13      	cbnz	r3, 80067cc <_svfiprintf_r+0x1a0>
 8006786:	9b03      	ldr	r3, [sp, #12]
 8006788:	3307      	adds	r3, #7
 800678a:	f023 0307 	bic.w	r3, r3, #7
 800678e:	3308      	adds	r3, #8
 8006790:	9303      	str	r3, [sp, #12]
 8006792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006794:	444b      	add	r3, r9
 8006796:	9309      	str	r3, [sp, #36]	; 0x24
 8006798:	e76d      	b.n	8006676 <_svfiprintf_r+0x4a>
 800679a:	fb05 3202 	mla	r2, r5, r2, r3
 800679e:	2001      	movs	r0, #1
 80067a0:	460f      	mov	r7, r1
 80067a2:	e7a6      	b.n	80066f2 <_svfiprintf_r+0xc6>
 80067a4:	2300      	movs	r3, #0
 80067a6:	3701      	adds	r7, #1
 80067a8:	9305      	str	r3, [sp, #20]
 80067aa:	4619      	mov	r1, r3
 80067ac:	250a      	movs	r5, #10
 80067ae:	4638      	mov	r0, r7
 80067b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067b4:	3a30      	subs	r2, #48	; 0x30
 80067b6:	2a09      	cmp	r2, #9
 80067b8:	d903      	bls.n	80067c2 <_svfiprintf_r+0x196>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0c8      	beq.n	8006750 <_svfiprintf_r+0x124>
 80067be:	9105      	str	r1, [sp, #20]
 80067c0:	e7c6      	b.n	8006750 <_svfiprintf_r+0x124>
 80067c2:	fb05 2101 	mla	r1, r5, r1, r2
 80067c6:	2301      	movs	r3, #1
 80067c8:	4607      	mov	r7, r0
 80067ca:	e7f0      	b.n	80067ae <_svfiprintf_r+0x182>
 80067cc:	ab03      	add	r3, sp, #12
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	4622      	mov	r2, r4
 80067d2:	4b11      	ldr	r3, [pc, #68]	; (8006818 <_svfiprintf_r+0x1ec>)
 80067d4:	a904      	add	r1, sp, #16
 80067d6:	4640      	mov	r0, r8
 80067d8:	f3af 8000 	nop.w
 80067dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80067e0:	4681      	mov	r9, r0
 80067e2:	d1d6      	bne.n	8006792 <_svfiprintf_r+0x166>
 80067e4:	89a3      	ldrh	r3, [r4, #12]
 80067e6:	065b      	lsls	r3, r3, #25
 80067e8:	f53f af35 	bmi.w	8006656 <_svfiprintf_r+0x2a>
 80067ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ee:	b01d      	add	sp, #116	; 0x74
 80067f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f4:	ab03      	add	r3, sp, #12
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	4622      	mov	r2, r4
 80067fa:	4b07      	ldr	r3, [pc, #28]	; (8006818 <_svfiprintf_r+0x1ec>)
 80067fc:	a904      	add	r1, sp, #16
 80067fe:	4640      	mov	r0, r8
 8006800:	f000 f882 	bl	8006908 <_printf_i>
 8006804:	e7ea      	b.n	80067dc <_svfiprintf_r+0x1b0>
 8006806:	bf00      	nop
 8006808:	08006c3c 	.word	0x08006c3c
 800680c:	08006c42 	.word	0x08006c42
 8006810:	08006c46 	.word	0x08006c46
 8006814:	00000000 	.word	0x00000000
 8006818:	08006577 	.word	0x08006577

0800681c <_printf_common>:
 800681c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006820:	4691      	mov	r9, r2
 8006822:	461f      	mov	r7, r3
 8006824:	688a      	ldr	r2, [r1, #8]
 8006826:	690b      	ldr	r3, [r1, #16]
 8006828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800682c:	4293      	cmp	r3, r2
 800682e:	bfb8      	it	lt
 8006830:	4613      	movlt	r3, r2
 8006832:	f8c9 3000 	str.w	r3, [r9]
 8006836:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800683a:	4606      	mov	r6, r0
 800683c:	460c      	mov	r4, r1
 800683e:	b112      	cbz	r2, 8006846 <_printf_common+0x2a>
 8006840:	3301      	adds	r3, #1
 8006842:	f8c9 3000 	str.w	r3, [r9]
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	0699      	lsls	r1, r3, #26
 800684a:	bf42      	ittt	mi
 800684c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006850:	3302      	addmi	r3, #2
 8006852:	f8c9 3000 	strmi.w	r3, [r9]
 8006856:	6825      	ldr	r5, [r4, #0]
 8006858:	f015 0506 	ands.w	r5, r5, #6
 800685c:	d107      	bne.n	800686e <_printf_common+0x52>
 800685e:	f104 0a19 	add.w	sl, r4, #25
 8006862:	68e3      	ldr	r3, [r4, #12]
 8006864:	f8d9 2000 	ldr.w	r2, [r9]
 8006868:	1a9b      	subs	r3, r3, r2
 800686a:	42ab      	cmp	r3, r5
 800686c:	dc28      	bgt.n	80068c0 <_printf_common+0xa4>
 800686e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006872:	6822      	ldr	r2, [r4, #0]
 8006874:	3300      	adds	r3, #0
 8006876:	bf18      	it	ne
 8006878:	2301      	movne	r3, #1
 800687a:	0692      	lsls	r2, r2, #26
 800687c:	d42d      	bmi.n	80068da <_printf_common+0xbe>
 800687e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006882:	4639      	mov	r1, r7
 8006884:	4630      	mov	r0, r6
 8006886:	47c0      	blx	r8
 8006888:	3001      	adds	r0, #1
 800688a:	d020      	beq.n	80068ce <_printf_common+0xb2>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	68e5      	ldr	r5, [r4, #12]
 8006890:	f8d9 2000 	ldr.w	r2, [r9]
 8006894:	f003 0306 	and.w	r3, r3, #6
 8006898:	2b04      	cmp	r3, #4
 800689a:	bf08      	it	eq
 800689c:	1aad      	subeq	r5, r5, r2
 800689e:	68a3      	ldr	r3, [r4, #8]
 80068a0:	6922      	ldr	r2, [r4, #16]
 80068a2:	bf0c      	ite	eq
 80068a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068a8:	2500      	movne	r5, #0
 80068aa:	4293      	cmp	r3, r2
 80068ac:	bfc4      	itt	gt
 80068ae:	1a9b      	subgt	r3, r3, r2
 80068b0:	18ed      	addgt	r5, r5, r3
 80068b2:	f04f 0900 	mov.w	r9, #0
 80068b6:	341a      	adds	r4, #26
 80068b8:	454d      	cmp	r5, r9
 80068ba:	d11a      	bne.n	80068f2 <_printf_common+0xd6>
 80068bc:	2000      	movs	r0, #0
 80068be:	e008      	b.n	80068d2 <_printf_common+0xb6>
 80068c0:	2301      	movs	r3, #1
 80068c2:	4652      	mov	r2, sl
 80068c4:	4639      	mov	r1, r7
 80068c6:	4630      	mov	r0, r6
 80068c8:	47c0      	blx	r8
 80068ca:	3001      	adds	r0, #1
 80068cc:	d103      	bne.n	80068d6 <_printf_common+0xba>
 80068ce:	f04f 30ff 	mov.w	r0, #4294967295
 80068d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d6:	3501      	adds	r5, #1
 80068d8:	e7c3      	b.n	8006862 <_printf_common+0x46>
 80068da:	18e1      	adds	r1, r4, r3
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	2030      	movs	r0, #48	; 0x30
 80068e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068e4:	4422      	add	r2, r4
 80068e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068ee:	3302      	adds	r3, #2
 80068f0:	e7c5      	b.n	800687e <_printf_common+0x62>
 80068f2:	2301      	movs	r3, #1
 80068f4:	4622      	mov	r2, r4
 80068f6:	4639      	mov	r1, r7
 80068f8:	4630      	mov	r0, r6
 80068fa:	47c0      	blx	r8
 80068fc:	3001      	adds	r0, #1
 80068fe:	d0e6      	beq.n	80068ce <_printf_common+0xb2>
 8006900:	f109 0901 	add.w	r9, r9, #1
 8006904:	e7d8      	b.n	80068b8 <_printf_common+0x9c>
	...

08006908 <_printf_i>:
 8006908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800690c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006910:	460c      	mov	r4, r1
 8006912:	7e09      	ldrb	r1, [r1, #24]
 8006914:	b085      	sub	sp, #20
 8006916:	296e      	cmp	r1, #110	; 0x6e
 8006918:	4617      	mov	r7, r2
 800691a:	4606      	mov	r6, r0
 800691c:	4698      	mov	r8, r3
 800691e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006920:	f000 80b3 	beq.w	8006a8a <_printf_i+0x182>
 8006924:	d822      	bhi.n	800696c <_printf_i+0x64>
 8006926:	2963      	cmp	r1, #99	; 0x63
 8006928:	d036      	beq.n	8006998 <_printf_i+0x90>
 800692a:	d80a      	bhi.n	8006942 <_printf_i+0x3a>
 800692c:	2900      	cmp	r1, #0
 800692e:	f000 80b9 	beq.w	8006aa4 <_printf_i+0x19c>
 8006932:	2958      	cmp	r1, #88	; 0x58
 8006934:	f000 8083 	beq.w	8006a3e <_printf_i+0x136>
 8006938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800693c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006940:	e032      	b.n	80069a8 <_printf_i+0xa0>
 8006942:	2964      	cmp	r1, #100	; 0x64
 8006944:	d001      	beq.n	800694a <_printf_i+0x42>
 8006946:	2969      	cmp	r1, #105	; 0x69
 8006948:	d1f6      	bne.n	8006938 <_printf_i+0x30>
 800694a:	6820      	ldr	r0, [r4, #0]
 800694c:	6813      	ldr	r3, [r2, #0]
 800694e:	0605      	lsls	r5, r0, #24
 8006950:	f103 0104 	add.w	r1, r3, #4
 8006954:	d52a      	bpl.n	80069ac <_printf_i+0xa4>
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6011      	str	r1, [r2, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	da03      	bge.n	8006966 <_printf_i+0x5e>
 800695e:	222d      	movs	r2, #45	; 0x2d
 8006960:	425b      	negs	r3, r3
 8006962:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006966:	486f      	ldr	r0, [pc, #444]	; (8006b24 <_printf_i+0x21c>)
 8006968:	220a      	movs	r2, #10
 800696a:	e039      	b.n	80069e0 <_printf_i+0xd8>
 800696c:	2973      	cmp	r1, #115	; 0x73
 800696e:	f000 809d 	beq.w	8006aac <_printf_i+0x1a4>
 8006972:	d808      	bhi.n	8006986 <_printf_i+0x7e>
 8006974:	296f      	cmp	r1, #111	; 0x6f
 8006976:	d020      	beq.n	80069ba <_printf_i+0xb2>
 8006978:	2970      	cmp	r1, #112	; 0x70
 800697a:	d1dd      	bne.n	8006938 <_printf_i+0x30>
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	f043 0320 	orr.w	r3, r3, #32
 8006982:	6023      	str	r3, [r4, #0]
 8006984:	e003      	b.n	800698e <_printf_i+0x86>
 8006986:	2975      	cmp	r1, #117	; 0x75
 8006988:	d017      	beq.n	80069ba <_printf_i+0xb2>
 800698a:	2978      	cmp	r1, #120	; 0x78
 800698c:	d1d4      	bne.n	8006938 <_printf_i+0x30>
 800698e:	2378      	movs	r3, #120	; 0x78
 8006990:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006994:	4864      	ldr	r0, [pc, #400]	; (8006b28 <_printf_i+0x220>)
 8006996:	e055      	b.n	8006a44 <_printf_i+0x13c>
 8006998:	6813      	ldr	r3, [r2, #0]
 800699a:	1d19      	adds	r1, r3, #4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6011      	str	r1, [r2, #0]
 80069a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069a8:	2301      	movs	r3, #1
 80069aa:	e08c      	b.n	8006ac6 <_printf_i+0x1be>
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6011      	str	r1, [r2, #0]
 80069b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069b4:	bf18      	it	ne
 80069b6:	b21b      	sxthne	r3, r3
 80069b8:	e7cf      	b.n	800695a <_printf_i+0x52>
 80069ba:	6813      	ldr	r3, [r2, #0]
 80069bc:	6825      	ldr	r5, [r4, #0]
 80069be:	1d18      	adds	r0, r3, #4
 80069c0:	6010      	str	r0, [r2, #0]
 80069c2:	0628      	lsls	r0, r5, #24
 80069c4:	d501      	bpl.n	80069ca <_printf_i+0xc2>
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	e002      	b.n	80069d0 <_printf_i+0xc8>
 80069ca:	0668      	lsls	r0, r5, #25
 80069cc:	d5fb      	bpl.n	80069c6 <_printf_i+0xbe>
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	4854      	ldr	r0, [pc, #336]	; (8006b24 <_printf_i+0x21c>)
 80069d2:	296f      	cmp	r1, #111	; 0x6f
 80069d4:	bf14      	ite	ne
 80069d6:	220a      	movne	r2, #10
 80069d8:	2208      	moveq	r2, #8
 80069da:	2100      	movs	r1, #0
 80069dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069e0:	6865      	ldr	r5, [r4, #4]
 80069e2:	60a5      	str	r5, [r4, #8]
 80069e4:	2d00      	cmp	r5, #0
 80069e6:	f2c0 8095 	blt.w	8006b14 <_printf_i+0x20c>
 80069ea:	6821      	ldr	r1, [r4, #0]
 80069ec:	f021 0104 	bic.w	r1, r1, #4
 80069f0:	6021      	str	r1, [r4, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d13d      	bne.n	8006a72 <_printf_i+0x16a>
 80069f6:	2d00      	cmp	r5, #0
 80069f8:	f040 808e 	bne.w	8006b18 <_printf_i+0x210>
 80069fc:	4665      	mov	r5, ip
 80069fe:	2a08      	cmp	r2, #8
 8006a00:	d10b      	bne.n	8006a1a <_printf_i+0x112>
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	07db      	lsls	r3, r3, #31
 8006a06:	d508      	bpl.n	8006a1a <_printf_i+0x112>
 8006a08:	6923      	ldr	r3, [r4, #16]
 8006a0a:	6862      	ldr	r2, [r4, #4]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	bfde      	ittt	le
 8006a10:	2330      	movle	r3, #48	; 0x30
 8006a12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a1a:	ebac 0305 	sub.w	r3, ip, r5
 8006a1e:	6123      	str	r3, [r4, #16]
 8006a20:	f8cd 8000 	str.w	r8, [sp]
 8006a24:	463b      	mov	r3, r7
 8006a26:	aa03      	add	r2, sp, #12
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f7ff fef6 	bl	800681c <_printf_common>
 8006a30:	3001      	adds	r0, #1
 8006a32:	d14d      	bne.n	8006ad0 <_printf_i+0x1c8>
 8006a34:	f04f 30ff 	mov.w	r0, #4294967295
 8006a38:	b005      	add	sp, #20
 8006a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a3e:	4839      	ldr	r0, [pc, #228]	; (8006b24 <_printf_i+0x21c>)
 8006a40:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006a44:	6813      	ldr	r3, [r2, #0]
 8006a46:	6821      	ldr	r1, [r4, #0]
 8006a48:	1d1d      	adds	r5, r3, #4
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6015      	str	r5, [r2, #0]
 8006a4e:	060a      	lsls	r2, r1, #24
 8006a50:	d50b      	bpl.n	8006a6a <_printf_i+0x162>
 8006a52:	07ca      	lsls	r2, r1, #31
 8006a54:	bf44      	itt	mi
 8006a56:	f041 0120 	orrmi.w	r1, r1, #32
 8006a5a:	6021      	strmi	r1, [r4, #0]
 8006a5c:	b91b      	cbnz	r3, 8006a66 <_printf_i+0x15e>
 8006a5e:	6822      	ldr	r2, [r4, #0]
 8006a60:	f022 0220 	bic.w	r2, r2, #32
 8006a64:	6022      	str	r2, [r4, #0]
 8006a66:	2210      	movs	r2, #16
 8006a68:	e7b7      	b.n	80069da <_printf_i+0xd2>
 8006a6a:	064d      	lsls	r5, r1, #25
 8006a6c:	bf48      	it	mi
 8006a6e:	b29b      	uxthmi	r3, r3
 8006a70:	e7ef      	b.n	8006a52 <_printf_i+0x14a>
 8006a72:	4665      	mov	r5, ip
 8006a74:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a78:	fb02 3311 	mls	r3, r2, r1, r3
 8006a7c:	5cc3      	ldrb	r3, [r0, r3]
 8006a7e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006a82:	460b      	mov	r3, r1
 8006a84:	2900      	cmp	r1, #0
 8006a86:	d1f5      	bne.n	8006a74 <_printf_i+0x16c>
 8006a88:	e7b9      	b.n	80069fe <_printf_i+0xf6>
 8006a8a:	6813      	ldr	r3, [r2, #0]
 8006a8c:	6825      	ldr	r5, [r4, #0]
 8006a8e:	6961      	ldr	r1, [r4, #20]
 8006a90:	1d18      	adds	r0, r3, #4
 8006a92:	6010      	str	r0, [r2, #0]
 8006a94:	0628      	lsls	r0, r5, #24
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	d501      	bpl.n	8006a9e <_printf_i+0x196>
 8006a9a:	6019      	str	r1, [r3, #0]
 8006a9c:	e002      	b.n	8006aa4 <_printf_i+0x19c>
 8006a9e:	066a      	lsls	r2, r5, #25
 8006aa0:	d5fb      	bpl.n	8006a9a <_printf_i+0x192>
 8006aa2:	8019      	strh	r1, [r3, #0]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	6123      	str	r3, [r4, #16]
 8006aa8:	4665      	mov	r5, ip
 8006aaa:	e7b9      	b.n	8006a20 <_printf_i+0x118>
 8006aac:	6813      	ldr	r3, [r2, #0]
 8006aae:	1d19      	adds	r1, r3, #4
 8006ab0:	6011      	str	r1, [r2, #0]
 8006ab2:	681d      	ldr	r5, [r3, #0]
 8006ab4:	6862      	ldr	r2, [r4, #4]
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f7f9 fb91 	bl	80001e0 <memchr>
 8006abe:	b108      	cbz	r0, 8006ac4 <_printf_i+0x1bc>
 8006ac0:	1b40      	subs	r0, r0, r5
 8006ac2:	6060      	str	r0, [r4, #4]
 8006ac4:	6863      	ldr	r3, [r4, #4]
 8006ac6:	6123      	str	r3, [r4, #16]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ace:	e7a7      	b.n	8006a20 <_printf_i+0x118>
 8006ad0:	6923      	ldr	r3, [r4, #16]
 8006ad2:	462a      	mov	r2, r5
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	47c0      	blx	r8
 8006ada:	3001      	adds	r0, #1
 8006adc:	d0aa      	beq.n	8006a34 <_printf_i+0x12c>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	079b      	lsls	r3, r3, #30
 8006ae2:	d413      	bmi.n	8006b0c <_printf_i+0x204>
 8006ae4:	68e0      	ldr	r0, [r4, #12]
 8006ae6:	9b03      	ldr	r3, [sp, #12]
 8006ae8:	4298      	cmp	r0, r3
 8006aea:	bfb8      	it	lt
 8006aec:	4618      	movlt	r0, r3
 8006aee:	e7a3      	b.n	8006a38 <_printf_i+0x130>
 8006af0:	2301      	movs	r3, #1
 8006af2:	464a      	mov	r2, r9
 8006af4:	4639      	mov	r1, r7
 8006af6:	4630      	mov	r0, r6
 8006af8:	47c0      	blx	r8
 8006afa:	3001      	adds	r0, #1
 8006afc:	d09a      	beq.n	8006a34 <_printf_i+0x12c>
 8006afe:	3501      	adds	r5, #1
 8006b00:	68e3      	ldr	r3, [r4, #12]
 8006b02:	9a03      	ldr	r2, [sp, #12]
 8006b04:	1a9b      	subs	r3, r3, r2
 8006b06:	42ab      	cmp	r3, r5
 8006b08:	dcf2      	bgt.n	8006af0 <_printf_i+0x1e8>
 8006b0a:	e7eb      	b.n	8006ae4 <_printf_i+0x1dc>
 8006b0c:	2500      	movs	r5, #0
 8006b0e:	f104 0919 	add.w	r9, r4, #25
 8006b12:	e7f5      	b.n	8006b00 <_printf_i+0x1f8>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1ac      	bne.n	8006a72 <_printf_i+0x16a>
 8006b18:	7803      	ldrb	r3, [r0, #0]
 8006b1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b22:	e76c      	b.n	80069fe <_printf_i+0xf6>
 8006b24:	08006c4d 	.word	0x08006c4d
 8006b28:	08006c5e 	.word	0x08006c5e

08006b2c <memcpy>:
 8006b2c:	b510      	push	{r4, lr}
 8006b2e:	1e43      	subs	r3, r0, #1
 8006b30:	440a      	add	r2, r1
 8006b32:	4291      	cmp	r1, r2
 8006b34:	d100      	bne.n	8006b38 <memcpy+0xc>
 8006b36:	bd10      	pop	{r4, pc}
 8006b38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b40:	e7f7      	b.n	8006b32 <memcpy+0x6>

08006b42 <memmove>:
 8006b42:	4288      	cmp	r0, r1
 8006b44:	b510      	push	{r4, lr}
 8006b46:	eb01 0302 	add.w	r3, r1, r2
 8006b4a:	d807      	bhi.n	8006b5c <memmove+0x1a>
 8006b4c:	1e42      	subs	r2, r0, #1
 8006b4e:	4299      	cmp	r1, r3
 8006b50:	d00a      	beq.n	8006b68 <memmove+0x26>
 8006b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b56:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b5a:	e7f8      	b.n	8006b4e <memmove+0xc>
 8006b5c:	4283      	cmp	r3, r0
 8006b5e:	d9f5      	bls.n	8006b4c <memmove+0xa>
 8006b60:	1881      	adds	r1, r0, r2
 8006b62:	1ad2      	subs	r2, r2, r3
 8006b64:	42d3      	cmn	r3, r2
 8006b66:	d100      	bne.n	8006b6a <memmove+0x28>
 8006b68:	bd10      	pop	{r4, pc}
 8006b6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b6e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006b72:	e7f7      	b.n	8006b64 <memmove+0x22>

08006b74 <_realloc_r>:
 8006b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b76:	4607      	mov	r7, r0
 8006b78:	4614      	mov	r4, r2
 8006b7a:	460e      	mov	r6, r1
 8006b7c:	b921      	cbnz	r1, 8006b88 <_realloc_r+0x14>
 8006b7e:	4611      	mov	r1, r2
 8006b80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b84:	f7ff bc56 	b.w	8006434 <_malloc_r>
 8006b88:	b922      	cbnz	r2, 8006b94 <_realloc_r+0x20>
 8006b8a:	f7ff fc05 	bl	8006398 <_free_r>
 8006b8e:	4625      	mov	r5, r4
 8006b90:	4628      	mov	r0, r5
 8006b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b94:	f000 f814 	bl	8006bc0 <_malloc_usable_size_r>
 8006b98:	42a0      	cmp	r0, r4
 8006b9a:	d20f      	bcs.n	8006bbc <_realloc_r+0x48>
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	f7ff fc48 	bl	8006434 <_malloc_r>
 8006ba4:	4605      	mov	r5, r0
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d0f2      	beq.n	8006b90 <_realloc_r+0x1c>
 8006baa:	4631      	mov	r1, r6
 8006bac:	4622      	mov	r2, r4
 8006bae:	f7ff ffbd 	bl	8006b2c <memcpy>
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	4638      	mov	r0, r7
 8006bb6:	f7ff fbef 	bl	8006398 <_free_r>
 8006bba:	e7e9      	b.n	8006b90 <_realloc_r+0x1c>
 8006bbc:	4635      	mov	r5, r6
 8006bbe:	e7e7      	b.n	8006b90 <_realloc_r+0x1c>

08006bc0 <_malloc_usable_size_r>:
 8006bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bc4:	1f18      	subs	r0, r3, #4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bfbc      	itt	lt
 8006bca:	580b      	ldrlt	r3, [r1, r0]
 8006bcc:	18c0      	addlt	r0, r0, r3
 8006bce:	4770      	bx	lr

08006bd0 <_init>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	bf00      	nop
 8006bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd6:	bc08      	pop	{r3}
 8006bd8:	469e      	mov	lr, r3
 8006bda:	4770      	bx	lr

08006bdc <_fini>:
 8006bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bde:	bf00      	nop
 8006be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be2:	bc08      	pop	{r3}
 8006be4:	469e      	mov	lr, r3
 8006be6:	4770      	bx	lr
