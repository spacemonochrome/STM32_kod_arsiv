
Ethernet_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013824  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d1c  080139b4  080139b4  000239b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080166d0  080166d0  000300b4  2**0
                  CONTENTS
  4 .ARM          00000008  080166d0  080166d0  000266d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080166d8  080166d8  000300b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080166d8  080166d8  000266d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080166dc  080166dc  000266dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080166e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bc30  200000b4  08016794  000300b4  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000bce4  08016794  0003bce4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003413d  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000637a  00000000  00000000  00064221  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016a8  00000000  00000000  0006a5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001578  00000000  00000000  0006bc48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f19a  00000000  00000000  0006d1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002284f  00000000  00000000  0009c35a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc2a8  00000000  00000000  000beba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019ae51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000601c  00000000  00000000  0019aecc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801399c 	.word	0x0801399c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	0801399c 	.word	0x0801399c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2101      	movs	r1, #1
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <SELECT+0x18>)
 800058a:	f003 fa1d 	bl	80039c8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800058e:	2001      	movs	r0, #1
 8000590:	f001 fe52 	bl	8002238 <HAL_Delay>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40020c00 	.word	0x40020c00

0800059c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2101      	movs	r1, #1
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <DESELECT+0x18>)
 80005a6:	f003 fa0f 	bl	80039c8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005aa:	2001      	movs	r0, #1
 80005ac:	f001 fe44 	bl	8002238 <HAL_Delay>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40020c00 	.word	0x40020c00

080005b8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005c2:	bf00      	nop
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <SPI_TxByte+0x30>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	f003 0302 	and.w	r3, r3, #2
 80005ce:	2b02      	cmp	r3, #2
 80005d0:	d1f8      	bne.n	80005c4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005d2:	1df9      	adds	r1, r7, #7
 80005d4:	2364      	movs	r3, #100	; 0x64
 80005d6:	2201      	movs	r2, #1
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <SPI_TxByte+0x30>)
 80005da:	f003 fead 	bl	8004338 <HAL_SPI_Transmit>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000028c 	.word	0x2000028c

080005ec <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005f8:	bf00      	nop
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <SPI_TxBuffer+0x30>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	f003 0302 	and.w	r3, r3, #2
 8000604:	2b02      	cmp	r3, #2
 8000606:	d1f8      	bne.n	80005fa <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000608:	887a      	ldrh	r2, [r7, #2]
 800060a:	2364      	movs	r3, #100	; 0x64
 800060c:	6879      	ldr	r1, [r7, #4]
 800060e:	4803      	ldr	r0, [pc, #12]	; (800061c <SPI_TxBuffer+0x30>)
 8000610:	f003 fe92 	bl	8004338 <HAL_SPI_Transmit>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000028c 	.word	0x2000028c

08000620 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000626:	23ff      	movs	r3, #255	; 0xff
 8000628:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800062a:	bf00      	nop
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <SPI_RxByte+0x34>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	2b02      	cmp	r3, #2
 8000638:	d1f8      	bne.n	800062c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800063a:	1dba      	adds	r2, r7, #6
 800063c:	1df9      	adds	r1, r7, #7
 800063e:	2364      	movs	r3, #100	; 0x64
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <SPI_RxByte+0x34>)
 8000646:	f003 ffab 	bl	80045a0 <HAL_SPI_TransmitReceive>

	return data;
 800064a:	79bb      	ldrb	r3, [r7, #6]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000028c 	.word	0x2000028c

08000658 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000660:	f7ff ffde 	bl	8000620 <SPI_RxByte>
 8000664:	4603      	mov	r3, r0
 8000666:	461a      	mov	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	701a      	strb	r2, [r3, #0]
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <SD_ReadyWait+0x30>)
 800067c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000680:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000682:	f7ff ffcd 	bl	8000620 <SPI_RxByte>
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2bff      	cmp	r3, #255	; 0xff
 800068e:	d003      	beq.n	8000698 <SD_ReadyWait+0x24>
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <SD_ReadyWait+0x30>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1f4      	bne.n	8000682 <SD_ReadyWait+0xe>

	return res;
 8000698:	79fb      	ldrb	r3, [r7, #7]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000288 	.word	0x20000288

080006a8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006ae:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006b2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006b4:	f7ff ff72 	bl	800059c <DESELECT>
	for(int i = 0; i < 10; i++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	e005      	b.n	80006ca <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006be:	20ff      	movs	r0, #255	; 0xff
 80006c0:	f7ff ff7a 	bl	80005b8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	3301      	adds	r3, #1
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	2b09      	cmp	r3, #9
 80006ce:	ddf6      	ble.n	80006be <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006d0:	f7ff ff56 	bl	8000580 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006d4:	2340      	movs	r3, #64	; 0x40
 80006d6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006e8:	2395      	movs	r3, #149	; 0x95
 80006ea:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80006ec:	463b      	mov	r3, r7
 80006ee:	2106      	movs	r1, #6
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff7b 	bl	80005ec <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80006f6:	e002      	b.n	80006fe <SD_PowerOn+0x56>
	{
		cnt--;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80006fe:	f7ff ff8f 	bl	8000620 <SPI_RxByte>
 8000702:	4603      	mov	r3, r0
 8000704:	2b01      	cmp	r3, #1
 8000706:	d002      	beq.n	800070e <SD_PowerOn+0x66>
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1f4      	bne.n	80006f8 <SD_PowerOn+0x50>
	}

	DESELECT();
 800070e:	f7ff ff45 	bl	800059c <DESELECT>
	SPI_TxByte(0XFF);
 8000712:	20ff      	movs	r0, #255	; 0xff
 8000714:	f7ff ff50 	bl	80005b8 <SPI_TxByte>

	PowerFlag = 1;
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <SD_PowerOn+0x80>)
 800071a:	2201      	movs	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000d1 	.word	0x200000d1

0800072c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <SD_PowerOff+0x14>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	200000d1 	.word	0x200000d1

08000744 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <SD_CheckPower+0x14>)
 800074a:	781b      	ldrb	r3, [r3, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	200000d1 	.word	0x200000d1

0800075c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <SD_RxDataBlock+0x58>)
 8000768:	22c8      	movs	r2, #200	; 0xc8
 800076a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800076c:	f7ff ff58 	bl	8000620 <SPI_RxByte>
 8000770:	4603      	mov	r3, r0
 8000772:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	2bff      	cmp	r3, #255	; 0xff
 8000778:	d103      	bne.n	8000782 <SD_RxDataBlock+0x26>
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <SD_RxDataBlock+0x58>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1f4      	bne.n	800076c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	2bfe      	cmp	r3, #254	; 0xfe
 8000786:	d001      	beq.n	800078c <SD_RxDataBlock+0x30>
 8000788:	2300      	movs	r3, #0
 800078a:	e00f      	b.n	80007ac <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff60 	bl	8000658 <SPI_RxBytePtr>
	} while(len--);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	1e5a      	subs	r2, r3, #1
 800079c:	603a      	str	r2, [r7, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1f4      	bne.n	800078c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80007a2:	f7ff ff3d 	bl	8000620 <SPI_RxByte>
	SPI_RxByte();
 80007a6:	f7ff ff3b 	bl	8000620 <SPI_RxByte>

	return TRUE;
 80007aa:	2301      	movs	r3, #1
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000028a 	.word	0x2000028a

080007b8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007c8:	f7ff ff54 	bl	8000674 <SD_ReadyWait>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2bff      	cmp	r3, #255	; 0xff
 80007d0:	d001      	beq.n	80007d6 <SD_TxDataBlock+0x1e>
 80007d2:	2300      	movs	r3, #0
 80007d4:	e02f      	b.n	8000836 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff feed 	bl	80005b8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	2bfd      	cmp	r3, #253	; 0xfd
 80007e2:	d020      	beq.n	8000826 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff feff 	bl	80005ec <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80007ee:	f7ff ff17 	bl	8000620 <SPI_RxByte>
		SPI_RxByte();
 80007f2:	f7ff ff15 	bl	8000620 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80007f6:	e00b      	b.n	8000810 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80007f8:	f7ff ff12 	bl	8000620 <SPI_RxByte>
 80007fc:	4603      	mov	r3, r0
 80007fe:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	f003 031f 	and.w	r3, r3, #31
 8000806:	2b05      	cmp	r3, #5
 8000808:	d006      	beq.n	8000818 <SD_TxDataBlock+0x60>
			i++;
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	3301      	adds	r3, #1
 800080e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000810:	7bbb      	ldrb	r3, [r7, #14]
 8000812:	2b40      	cmp	r3, #64	; 0x40
 8000814:	d9f0      	bls.n	80007f8 <SD_TxDataBlock+0x40>
 8000816:	e000      	b.n	800081a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000818:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800081a:	bf00      	nop
 800081c:	f7ff ff00 	bl	8000620 <SPI_RxByte>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0fa      	beq.n	800081c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	f003 031f 	and.w	r3, r3, #31
 800082c:	2b05      	cmp	r3, #5
 800082e:	d101      	bne.n	8000834 <SD_TxDataBlock+0x7c>
 8000830:	2301      	movs	r3, #1
 8000832:	e000      	b.n	8000836 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b084      	sub	sp, #16
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	6039      	str	r1, [r7, #0]
 8000848:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800084a:	f7ff ff13 	bl	8000674 <SD_ReadyWait>
 800084e:	4603      	mov	r3, r0
 8000850:	2bff      	cmp	r3, #255	; 0xff
 8000852:	d001      	beq.n	8000858 <SD_SendCmd+0x1a>
 8000854:	23ff      	movs	r3, #255	; 0xff
 8000856:	e042      	b.n	80008de <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff feac 	bl	80005b8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	0e1b      	lsrs	r3, r3, #24
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fea6 	bl	80005b8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	0c1b      	lsrs	r3, r3, #16
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fea0 	bl	80005b8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	0a1b      	lsrs	r3, r3, #8
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fe9a 	bl	80005b8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fe95 	bl	80005b8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b40      	cmp	r3, #64	; 0x40
 8000892:	d102      	bne.n	800089a <SD_SendCmd+0x5c>
 8000894:	2395      	movs	r3, #149	; 0x95
 8000896:	73fb      	strb	r3, [r7, #15]
 8000898:	e007      	b.n	80008aa <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b48      	cmp	r3, #72	; 0x48
 800089e:	d102      	bne.n	80008a6 <SD_SendCmd+0x68>
 80008a0:	2387      	movs	r3, #135	; 0x87
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	e001      	b.n	80008aa <SD_SendCmd+0x6c>
	else crc = 1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe83 	bl	80005b8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b4c      	cmp	r3, #76	; 0x4c
 80008b6:	d101      	bne.n	80008bc <SD_SendCmd+0x7e>
 80008b8:	f7ff feb2 	bl	8000620 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008bc:	230a      	movs	r3, #10
 80008be:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008c0:	f7ff feae 	bl	8000620 <SPI_RxByte>
 80008c4:	4603      	mov	r3, r0
 80008c6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008c8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	da05      	bge.n	80008dc <SD_SendCmd+0x9e>
 80008d0:	7bbb      	ldrb	r3, [r7, #14]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	73bb      	strb	r3, [r7, #14]
 80008d6:	7bbb      	ldrb	r3, [r7, #14]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1f1      	bne.n	80008c0 <SD_SendCmd+0x82>

	return res;
 80008dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SD_disk_initialize+0x14>
 80008f8:	2301      	movs	r3, #1
 80008fa:	e0d1      	b.n	8000aa0 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80008fc:	4b6a      	ldr	r3, [pc, #424]	; (8000aa8 <SD_disk_initialize+0x1c0>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	2b00      	cmp	r3, #0
 8000908:	d003      	beq.n	8000912 <SD_disk_initialize+0x2a>
 800090a:	4b67      	ldr	r3, [pc, #412]	; (8000aa8 <SD_disk_initialize+0x1c0>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	e0c6      	b.n	8000aa0 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000912:	f7ff fec9 	bl	80006a8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000916:	f7ff fe33 	bl	8000580 <SELECT>

	/* check disk type */
	type = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800091e:	2100      	movs	r1, #0
 8000920:	2040      	movs	r0, #64	; 0x40
 8000922:	f7ff ff8c 	bl	800083e <SD_SendCmd>
 8000926:	4603      	mov	r3, r0
 8000928:	2b01      	cmp	r3, #1
 800092a:	f040 80a1 	bne.w	8000a70 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800092e:	4b5f      	ldr	r3, [pc, #380]	; (8000aac <SD_disk_initialize+0x1c4>)
 8000930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000934:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000936:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800093a:	2048      	movs	r0, #72	; 0x48
 800093c:	f7ff ff7f 	bl	800083e <SD_SendCmd>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d155      	bne.n	80009f2 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000946:	2300      	movs	r3, #0
 8000948:	73fb      	strb	r3, [r7, #15]
 800094a:	e00c      	b.n	8000966 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800094c:	7bfc      	ldrb	r4, [r7, #15]
 800094e:	f7ff fe67 	bl	8000620 <SPI_RxByte>
 8000952:	4603      	mov	r3, r0
 8000954:	461a      	mov	r2, r3
 8000956:	f107 0310 	add.w	r3, r7, #16
 800095a:	4423      	add	r3, r4
 800095c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	3301      	adds	r3, #1
 8000964:	73fb      	strb	r3, [r7, #15]
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	2b03      	cmp	r3, #3
 800096a:	d9ef      	bls.n	800094c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800096c:	7abb      	ldrb	r3, [r7, #10]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d17e      	bne.n	8000a70 <SD_disk_initialize+0x188>
 8000972:	7afb      	ldrb	r3, [r7, #11]
 8000974:	2baa      	cmp	r3, #170	; 0xaa
 8000976:	d17b      	bne.n	8000a70 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000978:	2100      	movs	r1, #0
 800097a:	2077      	movs	r0, #119	; 0x77
 800097c:	f7ff ff5f 	bl	800083e <SD_SendCmd>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d807      	bhi.n	8000996 <SD_disk_initialize+0xae>
 8000986:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800098a:	2069      	movs	r0, #105	; 0x69
 800098c:	f7ff ff57 	bl	800083e <SD_SendCmd>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d004      	beq.n	80009a0 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000996:	4b45      	ldr	r3, [pc, #276]	; (8000aac <SD_disk_initialize+0x1c4>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1ec      	bne.n	8000978 <SD_disk_initialize+0x90>
 800099e:	e000      	b.n	80009a2 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009a0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009a2:	4b42      	ldr	r3, [pc, #264]	; (8000aac <SD_disk_initialize+0x1c4>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d062      	beq.n	8000a70 <SD_disk_initialize+0x188>
 80009aa:	2100      	movs	r1, #0
 80009ac:	207a      	movs	r0, #122	; 0x7a
 80009ae:	f7ff ff46 	bl	800083e <SD_SendCmd>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d15b      	bne.n	8000a70 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]
 80009bc:	e00c      	b.n	80009d8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80009be:	7bfc      	ldrb	r4, [r7, #15]
 80009c0:	f7ff fe2e 	bl	8000620 <SPI_RxByte>
 80009c4:	4603      	mov	r3, r0
 80009c6:	461a      	mov	r2, r3
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4423      	add	r3, r4
 80009ce:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	3301      	adds	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d9ef      	bls.n	80009be <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009de:	7a3b      	ldrb	r3, [r7, #8]
 80009e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SD_disk_initialize+0x104>
 80009e8:	230c      	movs	r3, #12
 80009ea:	e000      	b.n	80009ee <SD_disk_initialize+0x106>
 80009ec:	2304      	movs	r3, #4
 80009ee:	73bb      	strb	r3, [r7, #14]
 80009f0:	e03e      	b.n	8000a70 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009f2:	2100      	movs	r1, #0
 80009f4:	2077      	movs	r0, #119	; 0x77
 80009f6:	f7ff ff22 	bl	800083e <SD_SendCmd>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d808      	bhi.n	8000a12 <SD_disk_initialize+0x12a>
 8000a00:	2100      	movs	r1, #0
 8000a02:	2069      	movs	r0, #105	; 0x69
 8000a04:	f7ff ff1b 	bl	800083e <SD_SendCmd>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d801      	bhi.n	8000a12 <SD_disk_initialize+0x12a>
 8000a0e:	2302      	movs	r3, #2
 8000a10:	e000      	b.n	8000a14 <SD_disk_initialize+0x12c>
 8000a12:	2301      	movs	r3, #1
 8000a14:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a16:	7bbb      	ldrb	r3, [r7, #14]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d10e      	bne.n	8000a3a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2077      	movs	r0, #119	; 0x77
 8000a20:	f7ff ff0d 	bl	800083e <SD_SendCmd>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d80e      	bhi.n	8000a48 <SD_disk_initialize+0x160>
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2069      	movs	r0, #105	; 0x69
 8000a2e:	f7ff ff06 	bl	800083e <SD_SendCmd>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d107      	bne.n	8000a48 <SD_disk_initialize+0x160>
 8000a38:	e00c      	b.n	8000a54 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2041      	movs	r0, #65	; 0x41
 8000a3e:	f7ff fefe 	bl	800083e <SD_SendCmd>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d004      	beq.n	8000a52 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <SD_disk_initialize+0x1c4>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1e2      	bne.n	8000a16 <SD_disk_initialize+0x12e>
 8000a50:	e000      	b.n	8000a54 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a52:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <SD_disk_initialize+0x1c4>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d007      	beq.n	8000a6c <SD_disk_initialize+0x184>
 8000a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a60:	2050      	movs	r0, #80	; 0x50
 8000a62:	f7ff feec 	bl	800083e <SD_SendCmd>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SD_disk_initialize+0x188>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a70:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <SD_disk_initialize+0x1c8>)
 8000a72:	7bbb      	ldrb	r3, [r7, #14]
 8000a74:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a76:	f7ff fd91 	bl	800059c <DESELECT>
	SPI_RxByte();
 8000a7a:	f7ff fdd1 	bl	8000620 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a7e:	7bbb      	ldrb	r3, [r7, #14]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d008      	beq.n	8000a96 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <SD_disk_initialize+0x1c0>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f023 0301 	bic.w	r3, r3, #1
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <SD_disk_initialize+0x1c0>)
 8000a92:	701a      	strb	r2, [r3, #0]
 8000a94:	e001      	b.n	8000a9a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a96:	f7ff fe49 	bl	800072c <SD_PowerOff>
	}

	return Stat;
 8000a9a:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <SD_disk_initialize+0x1c0>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b2db      	uxtb	r3, r3
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd90      	pop	{r4, r7, pc}
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	2000028a 	.word	0x2000028a
 8000ab0:	200000d0 	.word	0x200000d0

08000ab4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SD_disk_status+0x14>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e002      	b.n	8000ace <SD_disk_status+0x1a>
	return Stat;
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <SD_disk_status+0x28>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000000 	.word	0x20000000

08000ae0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	4603      	mov	r3, r0
 8000aee:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d102      	bne.n	8000afc <SD_disk_read+0x1c>
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d101      	bne.n	8000b00 <SD_disk_read+0x20>
 8000afc:	2304      	movs	r3, #4
 8000afe:	e051      	b.n	8000ba4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b00:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <SD_disk_read+0xcc>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SD_disk_read+0x32>
 8000b0e:	2303      	movs	r3, #3
 8000b10:	e048      	b.n	8000ba4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b12:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <SD_disk_read+0xd0>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d102      	bne.n	8000b24 <SD_disk_read+0x44>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	025b      	lsls	r3, r3, #9
 8000b22:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b24:	f7ff fd2c 	bl	8000580 <SELECT>

	if (count == 1)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d111      	bne.n	8000b52 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	2051      	movs	r0, #81	; 0x51
 8000b32:	f7ff fe84 	bl	800083e <SD_SendCmd>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d129      	bne.n	8000b90 <SD_disk_read+0xb0>
 8000b3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b40:	68b8      	ldr	r0, [r7, #8]
 8000b42:	f7ff fe0b 	bl	800075c <SD_RxDataBlock>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d021      	beq.n	8000b90 <SD_disk_read+0xb0>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	e01e      	b.n	8000b90 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2052      	movs	r0, #82	; 0x52
 8000b56:	f7ff fe72 	bl	800083e <SD_SendCmd>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d117      	bne.n	8000b90 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b64:	68b8      	ldr	r0, [r7, #8]
 8000b66:	f7ff fdf9 	bl	800075c <SD_RxDataBlock>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d00a      	beq.n	8000b86 <SD_disk_read+0xa6>
				buff += 512;
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b76:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1ed      	bne.n	8000b60 <SD_disk_read+0x80>
 8000b84:	e000      	b.n	8000b88 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b86:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	204c      	movs	r0, #76	; 0x4c
 8000b8c:	f7ff fe57 	bl	800083e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b90:	f7ff fd04 	bl	800059c <DESELECT>
	SPI_RxByte();
 8000b94:	f7ff fd44 	bl	8000620 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bf14      	ite	ne
 8000b9e:	2301      	movne	r3, #1
 8000ba0:	2300      	moveq	r3, #0
 8000ba2:	b2db      	uxtb	r3, r3
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	200000d0 	.word	0x200000d0

08000bb4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d102      	bne.n	8000bd0 <SD_disk_write+0x1c>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d101      	bne.n	8000bd4 <SD_disk_write+0x20>
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	e06b      	b.n	8000cac <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bd4:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <SD_disk_write+0x100>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SD_disk_write+0x32>
 8000be2:	2303      	movs	r3, #3
 8000be4:	e062      	b.n	8000cac <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000be6:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <SD_disk_write+0x100>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SD_disk_write+0x44>
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	e059      	b.n	8000cac <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000bf8:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <SD_disk_write+0x104>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <SD_disk_write+0x56>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	025b      	lsls	r3, r3, #9
 8000c08:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c0a:	f7ff fcb9 	bl	8000580 <SELECT>

	if (count == 1)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d110      	bne.n	8000c36 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	2058      	movs	r0, #88	; 0x58
 8000c18:	f7ff fe11 	bl	800083e <SD_SendCmd>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d13a      	bne.n	8000c98 <SD_disk_write+0xe4>
 8000c22:	21fe      	movs	r1, #254	; 0xfe
 8000c24:	68b8      	ldr	r0, [r7, #8]
 8000c26:	f7ff fdc7 	bl	80007b8 <SD_TxDataBlock>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d033      	beq.n	8000c98 <SD_disk_write+0xe4>
			count = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	e030      	b.n	8000c98 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <SD_disk_write+0x104>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d007      	beq.n	8000c52 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c42:	2100      	movs	r1, #0
 8000c44:	2077      	movs	r0, #119	; 0x77
 8000c46:	f7ff fdfa 	bl	800083e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c4a:	6839      	ldr	r1, [r7, #0]
 8000c4c:	2057      	movs	r0, #87	; 0x57
 8000c4e:	f7ff fdf6 	bl	800083e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	2059      	movs	r0, #89	; 0x59
 8000c56:	f7ff fdf2 	bl	800083e <SD_SendCmd>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d11b      	bne.n	8000c98 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c60:	21fc      	movs	r1, #252	; 0xfc
 8000c62:	68b8      	ldr	r0, [r7, #8]
 8000c64:	f7ff fda8 	bl	80007b8 <SD_TxDataBlock>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00a      	beq.n	8000c84 <SD_disk_write+0xd0>
				buff += 512;
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c74:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1ee      	bne.n	8000c60 <SD_disk_write+0xac>
 8000c82:	e000      	b.n	8000c86 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c84:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c86:	21fd      	movs	r1, #253	; 0xfd
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff fd95 	bl	80007b8 <SD_TxDataBlock>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c98:	f7ff fc80 	bl	800059c <DESELECT>
	SPI_RxByte();
 8000c9c:	f7ff fcc0 	bl	8000620 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	bf14      	ite	ne
 8000ca6:	2301      	movne	r3, #1
 8000ca8:	2300      	moveq	r3, #0
 8000caa:	b2db      	uxtb	r3, r3
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	200000d0 	.word	0x200000d0

08000cbc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b08b      	sub	sp, #44	; 0x2c
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	603a      	str	r2, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SD_disk_ioctl+0x1e>
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	e113      	b.n	8000f02 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000ce0:	79bb      	ldrb	r3, [r7, #6]
 8000ce2:	2b05      	cmp	r3, #5
 8000ce4:	d121      	bne.n	8000d2a <SD_disk_ioctl+0x6e>
	{
		switch (*ptr)
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d009      	beq.n	8000d02 <SD_disk_ioctl+0x46>
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d00d      	beq.n	8000d0e <SD_disk_ioctl+0x52>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d115      	bne.n	8000d22 <SD_disk_ioctl+0x66>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000cf6:	f7ff fd19 	bl	800072c <SD_PowerOff>
			res = RES_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d00:	e0fd      	b.n	8000efe <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d02:	f7ff fcd1 	bl	80006a8 <SD_PowerOn>
			res = RES_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d0c:	e0f7      	b.n	8000efe <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d0e:	6a3b      	ldr	r3, [r7, #32]
 8000d10:	1c5c      	adds	r4, r3, #1
 8000d12:	f7ff fd17 	bl	8000744 <SD_CheckPower>
 8000d16:	4603      	mov	r3, r0
 8000d18:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d20:	e0ed      	b.n	8000efe <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000d22:	2304      	movs	r3, #4
 8000d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d28:	e0e9      	b.n	8000efe <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d2a:	4b78      	ldr	r3, [pc, #480]	; (8000f0c <SD_disk_ioctl+0x250>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SD_disk_ioctl+0x80>
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e0e2      	b.n	8000f02 <SD_disk_ioctl+0x246>

		SELECT();
 8000d3c:	f7ff fc20 	bl	8000580 <SELECT>

		switch (ctrl)
 8000d40:	79bb      	ldrb	r3, [r7, #6]
 8000d42:	2b0d      	cmp	r3, #13
 8000d44:	f200 80cc 	bhi.w	8000ee0 <SD_disk_ioctl+0x224>
 8000d48:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <SD_disk_ioctl+0x94>)
 8000d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4e:	bf00      	nop
 8000d50:	08000e4b 	.word	0x08000e4b
 8000d54:	08000d89 	.word	0x08000d89
 8000d58:	08000e3b 	.word	0x08000e3b
 8000d5c:	08000ee1 	.word	0x08000ee1
 8000d60:	08000ee1 	.word	0x08000ee1
 8000d64:	08000ee1 	.word	0x08000ee1
 8000d68:	08000ee1 	.word	0x08000ee1
 8000d6c:	08000ee1 	.word	0x08000ee1
 8000d70:	08000ee1 	.word	0x08000ee1
 8000d74:	08000ee1 	.word	0x08000ee1
 8000d78:	08000ee1 	.word	0x08000ee1
 8000d7c:	08000e5d 	.word	0x08000e5d
 8000d80:	08000e81 	.word	0x08000e81
 8000d84:	08000ea5 	.word	0x08000ea5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2049      	movs	r0, #73	; 0x49
 8000d8c:	f7ff fd57 	bl	800083e <SD_SendCmd>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 80a8 	bne.w	8000ee8 <SD_disk_ioctl+0x22c>
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	2110      	movs	r1, #16
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fcdc 	bl	800075c <SD_RxDataBlock>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 809e 	beq.w	8000ee8 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000dac:	7b3b      	ldrb	r3, [r7, #12]
 8000dae:	099b      	lsrs	r3, r3, #6
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d10e      	bne.n	8000dd4 <SD_disk_ioctl+0x118>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000db6:	7d7b      	ldrb	r3, [r7, #21]
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	7d3b      	ldrb	r3, [r7, #20]
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dca:	8bfb      	ldrh	r3, [r7, #30]
 8000dcc:	029a      	lsls	r2, r3, #10
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	e02e      	b.n	8000e32 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dd4:	7c7b      	ldrb	r3, [r7, #17]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	7dbb      	ldrb	r3, [r7, #22]
 8000dde:	09db      	lsrs	r3, r3, #7
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4413      	add	r3, r2
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	7d7b      	ldrb	r3, [r7, #21]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	f003 0306 	and.w	r3, r3, #6
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	4413      	add	r3, r2
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	3302      	adds	r3, #2
 8000df8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000dfc:	7d3b      	ldrb	r3, [r7, #20]
 8000dfe:	099b      	lsrs	r3, r3, #6
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	7cfb      	ldrb	r3, [r7, #19]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4413      	add	r3, r2
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	7cbb      	ldrb	r3, [r7, #18]
 8000e12:	029b      	lsls	r3, r3, #10
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	3301      	adds	r3, #1
 8000e22:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e24:	8bfa      	ldrh	r2, [r7, #30]
 8000e26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e2a:	3b09      	subs	r3, #9
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e38:	e056      	b.n	8000ee8 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e40:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e48:	e055      	b.n	8000ef6 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e4a:	f7ff fc13 	bl	8000674 <SD_ReadyWait>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2bff      	cmp	r3, #255	; 0xff
 8000e52:	d14b      	bne.n	8000eec <SD_disk_ioctl+0x230>
 8000e54:	2300      	movs	r3, #0
 8000e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e5a:	e047      	b.n	8000eec <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2049      	movs	r0, #73	; 0x49
 8000e60:	f7ff fced 	bl	800083e <SD_SendCmd>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d142      	bne.n	8000ef0 <SD_disk_ioctl+0x234>
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	6a38      	ldr	r0, [r7, #32]
 8000e6e:	f7ff fc75 	bl	800075c <SD_RxDataBlock>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d03b      	beq.n	8000ef0 <SD_disk_ioctl+0x234>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e7e:	e037      	b.n	8000ef0 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e80:	2100      	movs	r1, #0
 8000e82:	204a      	movs	r0, #74	; 0x4a
 8000e84:	f7ff fcdb 	bl	800083e <SD_SendCmd>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d132      	bne.n	8000ef4 <SD_disk_ioctl+0x238>
 8000e8e:	2110      	movs	r1, #16
 8000e90:	6a38      	ldr	r0, [r7, #32]
 8000e92:	f7ff fc63 	bl	800075c <SD_RxDataBlock>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d02b      	beq.n	8000ef4 <SD_disk_ioctl+0x238>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ea2:	e027      	b.n	8000ef4 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	207a      	movs	r0, #122	; 0x7a
 8000ea8:	f7ff fcc9 	bl	800083e <SD_SendCmd>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d116      	bne.n	8000ee0 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eb8:	e00b      	b.n	8000ed2 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000eba:	6a3c      	ldr	r4, [r7, #32]
 8000ebc:	1c63      	adds	r3, r4, #1
 8000ebe:	623b      	str	r3, [r7, #32]
 8000ec0:	f7ff fbae 	bl	8000620 <SPI_RxByte>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ec8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ecc:	3301      	adds	r3, #1
 8000ece:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ed2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d9ef      	bls.n	8000eba <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ee6:	e006      	b.n	8000ef6 <SD_disk_ioctl+0x23a>
			break;
 8000ee8:	bf00      	nop
 8000eea:	e004      	b.n	8000ef6 <SD_disk_ioctl+0x23a>
			break;
 8000eec:	bf00      	nop
 8000eee:	e002      	b.n	8000ef6 <SD_disk_ioctl+0x23a>
			break;
 8000ef0:	bf00      	nop
 8000ef2:	e000      	b.n	8000ef6 <SD_disk_ioctl+0x23a>
			break;
 8000ef4:	bf00      	nop
		}

		DESELECT();
 8000ef6:	f7ff fb51 	bl	800059c <DESELECT>
		SPI_RxByte();
 8000efa:	f7ff fb91 	bl	8000620 <SPI_RxByte>
	}

	return res;
 8000efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	372c      	adds	r7, #44	; 0x2c
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd90      	pop	{r4, r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000000 	.word	0x20000000

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f14:	f001 f91e 	bl	8002154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f18:	f000 f814 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1c:	f000 f8b2 	bl	8001084 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000f20:	f003 fdfc 	bl	8004b1c <MX_LWIP_Init>
  MX_SPI3_Init();
 8000f24:	f000 f878 	bl	8001018 <MX_SPI3_Init>
  MX_FATFS_Init();
 8000f28:	f003 fd88 	bl	8004a3c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  tcp_echoserver_init();
 8000f2c:	f000 fa6e 	bl	800140c <tcp_echoserver_init>
  udp_echoserver_init();
 8000f30:	f001 f8a6 	bl	8002080 <udp_echoserver_init>

  tftpd_init();
 8000f34:	f000 ffd2 	bl	8001edc <tftpd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8000f38:	f003 ff22 	bl	8004d80 <MX_LWIP_Process>
	  HAL_Delay(50);
 8000f3c:	2032      	movs	r0, #50	; 0x32
 8000f3e:	f001 f97b 	bl	8002238 <HAL_Delay>
	  MX_LWIP_Process();
 8000f42:	e7f9      	b.n	8000f38 <main+0x28>

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b094      	sub	sp, #80	; 0x50
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	2230      	movs	r2, #48	; 0x30
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f011 fdf2 	bl	8012b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <SystemClock_Config+0xcc>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	4a27      	ldr	r2, [pc, #156]	; (8001010 <SystemClock_Config+0xcc>)
 8000f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f76:	6413      	str	r3, [r2, #64]	; 0x40
 8000f78:	4b25      	ldr	r3, [pc, #148]	; (8001010 <SystemClock_Config+0xcc>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <SystemClock_Config+0xd0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a21      	ldr	r2, [pc, #132]	; (8001014 <SystemClock_Config+0xd0>)
 8000f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <SystemClock_Config+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000faa:	2302      	movs	r3, #2
 8000fac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fb8:	23a8      	movs	r3, #168	; 0xa8
 8000fba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 fd17 	bl	80039fc <HAL_RCC_OscConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fd4:	f000 f8c2 	bl	800115c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd8:	230f      	movs	r3, #15
 8000fda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fe8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 ff70 	bl	8003edc <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001002:	f000 f8ab 	bl	800115c <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3750      	adds	r7, #80	; 0x50
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000

08001018 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <MX_SPI3_Init+0x64>)
 800101e:	4a18      	ldr	r2, [pc, #96]	; (8001080 <MX_SPI3_Init+0x68>)
 8001020:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <MX_SPI3_Init+0x64>)
 8001024:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001028:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_SPI3_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <MX_SPI3_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_SPI3_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_SPI3_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_SPI3_Init+0x64>)
 8001044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001048:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_SPI3_Init+0x64>)
 800104c:	2200      	movs	r2, #0
 800104e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <MX_SPI3_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_SPI3_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <MX_SPI3_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_SPI3_Init+0x64>)
 8001064:	220a      	movs	r2, #10
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <MX_SPI3_Init+0x64>)
 800106a:	f003 f901 	bl	8004270 <HAL_SPI_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001074:	f000 f872 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2000028c 	.word	0x2000028c
 8001080:	40003c00 	.word	0x40003c00

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a2c      	ldr	r2, [pc, #176]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a25      	ldr	r2, [pc, #148]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a17      	ldr	r2, [pc, #92]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_GPIO_Init+0xd0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_GPIO_Init+0xd0>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a10      	ldr	r2, [pc, #64]	; (8001154 <MX_GPIO_Init+0xd0>)
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_GPIO_Init+0xd0>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2101      	movs	r1, #1
 800112a:	480b      	ldr	r0, [pc, #44]	; (8001158 <MX_GPIO_Init+0xd4>)
 800112c:	f002 fc4c 	bl	80039c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001130:	2301      	movs	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4804      	ldr	r0, [pc, #16]	; (8001158 <MX_GPIO_Init+0xd4>)
 8001148:	f002 faa4 	bl	8003694 <HAL_GPIO_Init>

}
 800114c:	bf00      	nop
 800114e:	3728      	adds	r7, #40	; 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800
 8001158:	40020c00 	.word	0x40020c00

0800115c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <HAL_MspInit+0x4c>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <HAL_MspInit+0x4c>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <HAL_MspInit+0x4c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_MspInit+0x4c>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <HAL_MspInit+0x4c>)
 8001198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_MspInit+0x4c>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800

080011bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a19      	ldr	r2, [pc, #100]	; (8001240 <HAL_SPI_MspInit+0x84>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d12c      	bne.n	8001238 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_SPI_MspInit+0x88>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a17      	ldr	r2, [pc, #92]	; (8001244 <HAL_SPI_MspInit+0x88>)
 80011e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_SPI_MspInit+0x88>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_SPI_MspInit+0x88>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a10      	ldr	r2, [pc, #64]	; (8001244 <HAL_SPI_MspInit+0x88>)
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_SPI_MspInit+0x88>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001216:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001228:	2306      	movs	r3, #6
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <HAL_SPI_MspInit+0x8c>)
 8001234:	f002 fa2e 	bl	8003694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40003c00 	.word	0x40003c00
 8001244:	40023800 	.word	0x40023800
 8001248:	40020800 	.word	0x40020800

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <MemManage_Handler+0x4>

08001266 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <UsageFault_Handler+0x4>

08001272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a0:	f000 ffaa 	bl	80021f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e00a      	b.n	80012d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ba:	f3af 8000 	nop.w
 80012be:	4601      	mov	r1, r0
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	60ba      	str	r2, [r7, #8]
 80012c6:	b2ca      	uxtb	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbf0      	blt.n	80012ba <_read+0x12>
	}

return len;
 80012d8:	687b      	ldr	r3, [r7, #4]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	e009      	b.n	8001308 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	60ba      	str	r2, [r7, #8]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	429a      	cmp	r2, r3
 800130e:	dbf1      	blt.n	80012f4 <_write+0x12>
	}
	return len;
 8001310:	687b      	ldr	r3, [r7, #4]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <_close>:

int _close(int file)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
	return -1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001342:	605a      	str	r2, [r3, #4]
	return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_isatty>:

int _isatty(int file)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
	return 1;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
	return 0;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <_sbrk+0x50>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x16>
		heap_end = &end;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <_sbrk+0x50>)
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <_sbrk+0x54>)
 8001398:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <_sbrk+0x50>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <_sbrk+0x50>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	466a      	mov	r2, sp
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d905      	bls.n	80013ba <_sbrk+0x36>
	{
		errno = ENOMEM;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <_sbrk+0x58>)
 80013b0:	220c      	movs	r2, #12
 80013b2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295
 80013b8:	e006      	b.n	80013c8 <_sbrk+0x44>
	}

	heap_end += incr;
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <_sbrk+0x50>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <_sbrk+0x50>)
 80013c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	200000d4 	.word	0x200000d4
 80013d8:	2000bce8 	.word	0x2000bce8
 80013dc:	2000bce0 	.word	0x2000bce0

080013e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <SystemInit+0x28>)
 80013e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ea:	4a07      	ldr	r2, [pc, #28]	; (8001408 <SystemInit+0x28>)
 80013ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SystemInit+0x28>)
 80013f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013fa:	609a      	str	r2, [r3, #8]
#endif
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 8001412:	f009 fd29 	bl	800ae68 <tcp_new>
 8001416:	4602      	mov	r2, r0
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <tcp_echoserver_init+0x68>)
 800141a:	601a      	str	r2, [r3, #0]

  if (tcp_echoserver_pcb != NULL)
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <tcp_echoserver_init+0x68>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d022      	beq.n	800146a <tcp_echoserver_init+0x5e>
  {
    err_t err;
    
    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <tcp_echoserver_init+0x68>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2207      	movs	r2, #7
 800142a:	4913      	ldr	r1, [pc, #76]	; (8001478 <tcp_echoserver_init+0x6c>)
 800142c:	4618      	mov	r0, r3
 800142e:	f008 fc7b 	bl	8009d28 <tcp_bind>
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10f      	bne.n	800145e <tcp_echoserver_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <tcp_echoserver_init+0x68>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	21ff      	movs	r1, #255	; 0xff
 8001444:	4618      	mov	r0, r3
 8001446:	f008 fd27 	bl	8009e98 <tcp_listen_with_backlog>
 800144a:	4602      	mov	r2, r0
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <tcp_echoserver_init+0x68>)
 800144e:	601a      	str	r2, [r3, #0]
      
      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <tcp_echoserver_init+0x68>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4909      	ldr	r1, [pc, #36]	; (800147c <tcp_echoserver_init+0x70>)
 8001456:	4618      	mov	r0, r3
 8001458:	f009 fd86 	bl	800af68 <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 800145c:	e005      	b.n	800146a <tcp_echoserver_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <tcp_echoserver_init+0x68>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	2001      	movs	r0, #1
 8001466:	f007 f8b5 	bl	80085d4 <memp_free>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200000d8 	.word	0x200000d8
 8001478:	08016624 	.word	0x08016624
 800147c:	08001481 	.word	0x08001481

08001480 <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used 
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	4613      	mov	r3, r2
 800148c:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 800148e:	2101      	movs	r1, #1
 8001490:	68b8      	ldr	r0, [r7, #8]
 8001492:	f009 faf7 	bl	800aa84 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8001496:	200c      	movs	r0, #12
 8001498:	f006 fee2 	bl	8008260 <mem_malloc>
 800149c:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d01f      	beq.n	80014e4 <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2200      	movs	r2, #0
 80014b4:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 80014bc:	6939      	ldr	r1, [r7, #16]
 80014be:	68b8      	ldr	r0, [r7, #8]
 80014c0:	f009 fcda 	bl	800ae78 <tcp_arg>
    
    /* initialize lwip tcp_recv callback function for newpcb  */ 
    tcp_recv(newpcb, tcp_echoserver_recv);
 80014c4:	490d      	ldr	r1, [pc, #52]	; (80014fc <tcp_echoserver_accept+0x7c>)
 80014c6:	68b8      	ldr	r0, [r7, #8]
 80014c8:	f009 fce8 	bl	800ae9c <tcp_recv>
    
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_echoserver_error);
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <tcp_echoserver_accept+0x80>)
 80014ce:	68b8      	ldr	r0, [r7, #8]
 80014d0:	f009 fd28 	bl	800af24 <tcp_err>
    
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	490b      	ldr	r1, [pc, #44]	; (8001504 <tcp_echoserver_accept+0x84>)
 80014d8:	68b8      	ldr	r0, [r7, #8]
 80014da:	f009 fd5d 	bl	800af98 <tcp_poll>
    
    ret_err = ERR_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	75fb      	strb	r3, [r7, #23]
 80014e2:	e005      	b.n	80014f0 <tcp_echoserver_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_echoserver_connection_close(newpcb, es);
 80014e4:	6939      	ldr	r1, [r7, #16]
 80014e6:	68b8      	ldr	r0, [r7, #8]
 80014e8:	f000 f96f 	bl	80017ca <tcp_echoserver_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 80014ec:	23ff      	movs	r3, #255	; 0xff
 80014ee:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;  
 80014f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	08001509 	.word	0x08001509
 8001500:	08001651 	.word	0x08001651
 8001504:	08001675 	.word	0x08001675

08001508 <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <tcp_echoserver_recv+0x20>
 800151c:	4b47      	ldr	r3, [pc, #284]	; (800163c <tcp_echoserver_recv+0x134>)
 800151e:	22ad      	movs	r2, #173	; 0xad
 8001520:	4947      	ldr	r1, [pc, #284]	; (8001640 <tcp_echoserver_recv+0x138>)
 8001522:	4848      	ldr	r0, [pc, #288]	; (8001644 <tcp_echoserver_recv+0x13c>)
 8001524:	f011 fb12 	bl	8012b4c <iprintf>
  
  es = (struct tcp_echoserver_struct *)arg;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d116      	bne.n	8001560 <tcp_echoserver_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	2203      	movs	r2, #3
 8001536:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d104      	bne.n	800154a <tcp_echoserver_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_echoserver_connection_close(tpcb, es);
 8001540:	69b9      	ldr	r1, [r7, #24]
 8001542:	68b8      	ldr	r0, [r7, #8]
 8001544:	f000 f941 	bl	80017ca <tcp_echoserver_connection_close>
 8001548:	e007      	b.n	800155a <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_echoserver_sent);
 800154a:	493f      	ldr	r1, [pc, #252]	; (8001648 <tcp_echoserver_recv+0x140>)
 800154c:	68b8      	ldr	r0, [r7, #8]
 800154e:	f009 fcc7 	bl	800aee0 <tcp_sent>
      
      /* send remaining data*/
      tcp_echoserver_send(tpcb, es);
 8001552:	69b9      	ldr	r1, [r7, #24]
 8001554:	68b8      	ldr	r0, [r7, #8]
 8001556:	f000 f8e5 	bl	8001724 <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	77fb      	strb	r3, [r7, #31]
 800155e:	e067      	b.n	8001630 <tcp_echoserver_recv+0x128>
  }   
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8001560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00b      	beq.n	8001580 <tcp_echoserver_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f007 fe3b 	bl	80091f0 <pbuf_free>
    }
    ret_err = err;
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	77fb      	strb	r3, [r7, #31]
 800157e:	e057      	b.n	8001630 <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_ACCEPTED)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d114      	bne.n	80015b2 <tcp_echoserver_recv+0xaa>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2202      	movs	r2, #2
 800158c:	701a      	strb	r2, [r3, #0]
    
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	609a      	str	r2, [r3, #8]
    
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8001594:	492c      	ldr	r1, [pc, #176]	; (8001648 <tcp_echoserver_recv+0x140>)
 8001596:	68b8      	ldr	r0, [r7, #8]
 8001598:	f009 fca2 	bl	800aee0 <tcp_sent>
    
    /* send back the received data (echo) */
    es->p->payload = "STM32F407\r\n";
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	4a2a      	ldr	r2, [pc, #168]	; (800164c <tcp_echoserver_recv+0x144>)
 80015a2:	605a      	str	r2, [r3, #4]
    tcp_echoserver_send(tpcb, es);
 80015a4:	69b9      	ldr	r1, [r7, #24]
 80015a6:	68b8      	ldr	r0, [r7, #8]
 80015a8:	f000 f8bc 	bl	8001724 <tcp_echoserver_send>
    
    ret_err = ERR_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	77fb      	strb	r3, [r7, #31]
 80015b0:	e03e      	b.n	8001630 <tcp_echoserver_recv+0x128>
  }
  else if (es->state == ES_RECEIVED)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d119      	bne.n	80015ee <tcp_echoserver_recv+0xe6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10b      	bne.n	80015da <tcp_echoserver_recv+0xd2>
    {
      es->p = p;
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	609a      	str	r2, [r3, #8]
  
      /* send back received data */
      es->p->payload = "STM32F407\r\n";
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a1f      	ldr	r2, [pc, #124]	; (800164c <tcp_echoserver_recv+0x144>)
 80015ce:	605a      	str	r2, [r3, #4]
      tcp_echoserver_send(tpcb, es);
 80015d0:	69b9      	ldr	r1, [r7, #24]
 80015d2:	68b8      	ldr	r0, [r7, #8]
 80015d4:	f000 f8a6 	bl	8001724 <tcp_echoserver_send>
 80015d8:	e006      	b.n	80015e8 <tcp_echoserver_recv+0xe0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f007 ff1c 	bl	8009420 <pbuf_chain>
    }
    ret_err = ERR_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	77fb      	strb	r3, [r7, #31]
 80015ec:	e020      	b.n	8001630 <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_CLOSING)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d10e      	bne.n	8001614 <tcp_echoserver_recv+0x10c>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	891b      	ldrh	r3, [r3, #8]
 80015fa:	4619      	mov	r1, r3
 80015fc:	68b8      	ldr	r0, [r7, #8]
 80015fe:	f008 fd61 	bl	800a0c4 <tcp_recved>
    es->p = NULL;
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f007 fdf1 	bl	80091f0 <pbuf_free>
    ret_err = ERR_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	77fb      	strb	r3, [r7, #31]
 8001612:	e00d      	b.n	8001630 <tcp_echoserver_recv+0x128>
  }
  else
  {
    /* unkown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	891b      	ldrh	r3, [r3, #8]
 8001618:	4619      	mov	r1, r3
 800161a:	68b8      	ldr	r0, [r7, #8]
 800161c:	f008 fd52 	bl	800a0c4 <tcp_recved>
    es->p = NULL;
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f007 fde2 	bl	80091f0 <pbuf_free>
    ret_err = ERR_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8001630:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3720      	adds	r7, #32
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	080139b4 	.word	0x080139b4
 8001640:	080139d4 	.word	0x080139d4
 8001644:	080139e0 	.word	0x080139e0
 8001648:	080016d5 	.word	0x080016d5
 800164c:	08013a08 	.word	0x08013a08

08001650 <tcp_echoserver_error>:
  * @param  arg: pointer on argument parameter 
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f006 fc94 	bl	8007f94 <mem_free>
  }
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d017      	beq.n	80016b8 <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 8001690:	490f      	ldr	r1, [pc, #60]	; (80016d0 <tcp_echoserver_poll+0x5c>)
 8001692:	6838      	ldr	r0, [r7, #0]
 8001694:	f009 fc24 	bl	800aee0 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	6838      	ldr	r0, [r7, #0]
 800169c:	f000 f842 	bl	8001724 <tcp_echoserver_send>
 80016a0:	e007      	b.n	80016b2 <tcp_echoserver_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d103      	bne.n	80016b2 <tcp_echoserver_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
 80016aa:	68b9      	ldr	r1, [r7, #8]
 80016ac:	6838      	ldr	r0, [r7, #0]
 80016ae:	f000 f88c 	bl	80017ca <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]
 80016b6:	e004      	b.n	80016c2 <tcp_echoserver_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 80016b8:	6838      	ldr	r0, [r7, #0]
 80016ba:	f008 fb29 	bl	8009d10 <tcp_abort>
    ret_err = ERR_ABRT;
 80016be:	23f3      	movs	r3, #243	; 0xf3
 80016c0:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	080016d5 	.word	0x080016d5

080016d4 <tcp_echoserver_sent>:
  *         is received from remote host for sent data) 
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	4613      	mov	r3, r2
 80016e0:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2200      	movs	r2, #0
 80016ea:	705a      	strb	r2, [r3, #1]
  
  if(es->p != NULL)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d008      	beq.n	8001706 <tcp_echoserver_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_echoserver_sent);
 80016f4:	490a      	ldr	r1, [pc, #40]	; (8001720 <tcp_echoserver_sent+0x4c>)
 80016f6:	68b8      	ldr	r0, [r7, #8]
 80016f8:	f009 fbf2 	bl	800aee0 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 80016fc:	6979      	ldr	r1, [r7, #20]
 80016fe:	68b8      	ldr	r0, [r7, #8]
 8001700:	f000 f810 	bl	8001724 <tcp_echoserver_send>
 8001704:	e007      	b.n	8001716 <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b03      	cmp	r3, #3
 800170c:	d103      	bne.n	8001716 <tcp_echoserver_sent+0x42>
      tcp_echoserver_connection_close(tpcb, es);
 800170e:	6979      	ldr	r1, [r7, #20]
 8001710:	68b8      	ldr	r0, [r7, #8]
 8001712:	f000 f85a 	bl	80017ca <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	080016d5 	.word	0x080016d5

08001724 <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 8001732:	e036      	b.n	80017a2 <tcp_echoserver_send+0x7e>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	6859      	ldr	r1, [r3, #4]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	895a      	ldrh	r2, [r3, #10]
 8001742:	2301      	movs	r3, #1
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f00c fad3 	bl	800dcf0 <tcp_write>
 800174a:	4603      	mov	r3, r0
 800174c:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 800174e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d11d      	bne.n	8001792 <tcp_echoserver_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	895b      	ldrh	r3, [r3, #10]
 800175a:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d004      	beq.n	8001776 <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4618      	mov	r0, r3
 8001772:	f007 fddd 	bl	8009330 <pbuf_ref>
      
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8001776:	6938      	ldr	r0, [r7, #16]
 8001778:	f007 fd3a 	bl	80091f0 <pbuf_free>
 800177c:	4603      	mov	r3, r0
 800177e:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8001780:	7b7b      	ldrb	r3, [r7, #13]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f7      	beq.n	8001776 <tcp_echoserver_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8001786:	89fb      	ldrh	r3, [r7, #14]
 8001788:	4619      	mov	r1, r3
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f008 fc9a 	bl	800a0c4 <tcp_recved>
 8001790:	e007      	b.n	80017a2 <tcp_echoserver_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8001792:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179a:	d102      	bne.n	80017a2 <tcp_echoserver_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80017a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10b      	bne.n	80017c2 <tcp_echoserver_send+0x9e>
         (es->p != NULL) && 
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <tcp_echoserver_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	895a      	ldrh	r2, [r3, #10]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) && 
 80017be:	429a      	cmp	r2, r3
 80017c0:	d9b8      	bls.n	8001734 <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 80017d4:	2100      	movs	r1, #0
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f009 fb4e 	bl	800ae78 <tcp_arg>
  tcp_sent(tpcb, NULL);
 80017dc:	2100      	movs	r1, #0
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f009 fb7e 	bl	800aee0 <tcp_sent>
  tcp_recv(tpcb, NULL);
 80017e4:	2100      	movs	r1, #0
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f009 fb58 	bl	800ae9c <tcp_recv>
  tcp_err(tpcb, NULL);
 80017ec:	2100      	movs	r1, #0
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f009 fb98 	bl	800af24 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2100      	movs	r1, #0
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f009 fbcd 	bl	800af98 <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8001804:	6838      	ldr	r0, [r7, #0]
 8001806:	f006 fbc5 	bl	8007f94 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f008 f996 	bl	8009b3c <tcp_close>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <tftp_send_message>:
  * @param buf: pointer on buffer where to create the message  
  * @param err: error code of type tftp_errorcode
  * @retval error code
  */
err_t tftp_send_message(struct udp_pcb *upcb, const ip_addr_t *to_ip, unsigned short to_port, char *buf, unsigned short buflen)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	80fb      	strh	r3, [r7, #6]
  err_t err;
  struct pbuf *pkt_buf; /* Chain of pbuf's to be sent */

  /* PBUF_TRANSPORT - specifies the transport layer */
  pkt_buf = pbuf_alloc(PBUF_TRANSPORT, buflen, PBUF_POOL);
 8001828:	8c3b      	ldrh	r3, [r7, #32]
 800182a:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800182e:	4619      	mov	r1, r3
 8001830:	2036      	movs	r0, #54	; 0x36
 8001832:	f007 f9fd 	bl	8008c30 <pbuf_alloc>
 8001836:	6178      	str	r0, [r7, #20]

  if (!pkt_buf)      /*if the packet pbuf == NULL exit and end transmission */
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d102      	bne.n	8001844 <tftp_send_message+0x2c>
    return ERR_MEM;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e013      	b.n	800186c <tftp_send_message+0x54>

  /* Copy the original data buffer over to the packet buffer's payload */
  memcpy(pkt_buf->payload, buf, buflen);
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	8c3a      	ldrh	r2, [r7, #32]
 800184a:	6839      	ldr	r1, [r7, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f011 f96a 	bl	8012b26 <memcpy>

  /* Sending packet by UDP protocol */
  err = udp_sendto(upcb, pkt_buf, to_ip, to_port);
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	6979      	ldr	r1, [r7, #20]
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f00e faf9 	bl	800fe50 <udp_sendto>
 800185e:	4603      	mov	r3, r0
 8001860:	74fb      	strb	r3, [r7, #19]

  /* free the buffer pbuf */
  pbuf_free(pkt_buf);
 8001862:	6978      	ldr	r0, [r7, #20]
 8001864:	f007 fcc4 	bl	80091f0 <pbuf_free>

  return err;
 8001868:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <tftp_construct_error_message>:
  * @param buf: pointer on buffer where to create the message  
  * @param err: error code of type tftp_errorcode
  * @retval 
  */
int tftp_construct_error_message(char *buf, tftp_errorcode err)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
  int errorlen;
  /* Set the opcode in the 2 first bytes */
  tftp_set_opcode(buf, TFTP_ERROR);
 8001880:	2105      	movs	r1, #5
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fb85 	bl	8001f92 <tftp_set_opcode>
  /* Set the errorcode in the 2 second bytes  */
  tftp_set_errorcode(buf, err);
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	4619      	mov	r1, r3
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 fb93 	bl	8001fb8 <tftp_set_errorcode>
  /* Set the error message in the last bytes */
  tftp_set_errormsg(buf, tftp_errorcode_string[err]);
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <tftp_construct_error_message+0x4c>)
 8001896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189a:	4619      	mov	r1, r3
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 fb9f 	bl	8001fe0 <tftp_set_errormsg>
  /* Set the length of the error message  */
  errorlen = strlen(tftp_errorcode_string[err]);
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <tftp_construct_error_message+0x4c>)
 80018a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fc90 	bl	80001d0 <strlen>
 80018b0:	4603      	mov	r3, r0
 80018b2:	60fb      	str	r3, [r7, #12]

  /* return message size */
  return 4 + errorlen + 1;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3305      	adds	r3, #5
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000008 	.word	0x20000008

080018c4 <tftp_send_error_message>:
  * @param  to_port: pointer on remote port  
  * @param  err: tftp error code
  * @retval error value
  */
int tftp_send_error_message(struct udp_pcb *upcb, const ip_addr_t *to, int to_port, tftp_errorcode err)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80018ca:	af02      	add	r7, sp, #8
 80018cc:	f107 040c 	add.w	r4, r7, #12
 80018d0:	6020      	str	r0, [r4, #0]
 80018d2:	f107 0008 	add.w	r0, r7, #8
 80018d6:	6001      	str	r1, [r0, #0]
 80018d8:	1d39      	adds	r1, r7, #4
 80018da:	600a      	str	r2, [r1, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	1cfb      	adds	r3, r7, #3
 80018e0:	701a      	strb	r2, [r3, #0]
  char buf[512];
  int error_len;

  /* construct error */
  error_len = tftp_construct_error_message(buf, err);
 80018e2:	1cfb      	adds	r3, r7, #3
 80018e4:	781a      	ldrb	r2, [r3, #0]
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ffc1 	bl	8001874 <tftp_construct_error_message>
 80018f2:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
  /* send error message */
  return tftp_send_message(upcb, to, to_port, buf, error_len);
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001900:	b29b      	uxth	r3, r3
 8001902:	f107 0414 	add.w	r4, r7, #20
 8001906:	f107 0108 	add.w	r1, r7, #8
 800190a:	f107 000c 	add.w	r0, r7, #12
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	4623      	mov	r3, r4
 8001912:	6809      	ldr	r1, [r1, #0]
 8001914:	6800      	ldr	r0, [r0, #0]
 8001916:	f7ff ff7f 	bl	8001818 <tftp_send_message>
 800191a:	4603      	mov	r3, r0
}
 800191c:	4618      	mov	r0, r3
 800191e:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8001922:	46bd      	mov	sp, r7
 8001924:	bd90      	pop	{r4, r7, pc}

08001926 <tftp_send_data_packet>:
  * @param  buflen: buffer length
  * @retval error value
  */
int tftp_send_data_packet(struct udp_pcb *upcb, const ip_addr_t *to, int to_port, unsigned short block,
                          char *buf, int buflen)
{
 8001926:	b590      	push	{r4, r7, lr}
 8001928:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800192c:	af02      	add	r7, sp, #8
 800192e:	f107 040c 	add.w	r4, r7, #12
 8001932:	6020      	str	r0, [r4, #0]
 8001934:	f107 0008 	add.w	r0, r7, #8
 8001938:	6001      	str	r1, [r0, #0]
 800193a:	1d39      	adds	r1, r7, #4
 800193c:	600a      	str	r2, [r1, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	1cbb      	adds	r3, r7, #2
 8001942:	801a      	strh	r2, [r3, #0]
  char packet[TFTP_DATA_PKT_LEN_MAX]; /* (512+4) bytes */

  /* Set the opcode 3 in the 2 first bytes */
  tftp_set_opcode(packet, TFTP_DATA);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2103      	movs	r1, #3
 800194a:	4618      	mov	r0, r3
 800194c:	f000 fb21 	bl	8001f92 <tftp_set_opcode>
  /* Set the block numero in the 2 second bytes */
  tftp_set_block(packet, block);
 8001950:	1cbb      	adds	r3, r7, #2
 8001952:	881a      	ldrh	r2, [r3, #0]
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fb4f 	bl	8001ffe <tftp_set_block>
  /* Set the data message in the n last bytes */
  tftp_set_data_message(packet, buf, buflen);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001968:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 800196c:	4618      	mov	r0, r3
 800196e:	f000 fb5a 	bl	8002026 <tftp_set_data_message>
  /* Send DATA packet */
  return tftp_send_message(upcb, to, to_port, packet, buflen + 4);
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29a      	uxth	r2, r3
 8001978:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800197c:	b29b      	uxth	r3, r3
 800197e:	3304      	adds	r3, #4
 8001980:	b29b      	uxth	r3, r3
 8001982:	f107 0414 	add.w	r4, r7, #20
 8001986:	f107 0108 	add.w	r1, r7, #8
 800198a:	f107 000c 	add.w	r0, r7, #12
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	4623      	mov	r3, r4
 8001992:	6809      	ldr	r1, [r1, #0]
 8001994:	6800      	ldr	r0, [r0, #0]
 8001996:	f7ff ff3f 	bl	8001818 <tftp_send_message>
 800199a:	4603      	mov	r3, r0
}
 800199c:	4618      	mov	r0, r3
 800199e:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd90      	pop	{r4, r7, pc}

080019a6 <tftp_send_ack_packet>:
  * @param  to_port: pointer on remote udp port
  * @param  block: block number
  * @retval error value
  */
int tftp_send_ack_packet(struct udp_pcb *upcb, const ip_addr_t *to, int to_port, unsigned short block)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b088      	sub	sp, #32
 80019aa:	af02      	add	r7, sp, #8
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	807b      	strh	r3, [r7, #2]

  /* create the maximum possible size packet that a TFTP ACK packet can be */
  char packet[TFTP_ACK_PKT_LEN];

  /* define the first two bytes of the packet */
  tftp_set_opcode(packet, TFTP_ACK);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2104      	movs	r1, #4
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 fae9 	bl	8001f92 <tftp_set_opcode>
  /* Specify the block number being ACK'd.
   * If we are ACK'ing a DATA pkt then the block number echoes that of the DATA pkt being ACK'd (duh)
   * If we are ACK'ing a WRQ pkt then the block number is always 0
   * RRQ packets are never sent ACK pkts by the server, instead the server sends DATA pkts to the
   * host which are, obviously, used as the "acknowledgement" */
  tftp_set_block(packet, block);
 80019c0:	887a      	ldrh	r2, [r7, #2]
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fb18 	bl	8001ffe <tftp_set_block>

  return tftp_send_message(upcb, to, to_port, packet, TFTP_ACK_PKT_LEN);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	f107 0114 	add.w	r1, r7, #20
 80019d6:	2304      	movs	r3, #4
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	460b      	mov	r3, r1
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f7ff ff1a 	bl	8001818 <tftp_send_message>
 80019e4:	4603      	mov	r3, r0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <tftp_cleanup_rd>:
  * @param upcb: pointer on udp pcb
  * @param  args: pointer on a structure of type tftp_connection_args
  * @retval None
  */
void tftp_cleanup_rd(struct udp_pcb *upcb, tftp_connection_args *args)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  /* close the filesystem */
  f_close(&file_SD);
 80019fa:	480e      	ldr	r0, [pc, #56]	; (8001a34 <tftp_cleanup_rd+0x44>)
 80019fc:	f006 f8c3 	bl	8007b86 <f_close>
  f_mount(NULL, (TCHAR const*)"",0);
 8001a00:	2200      	movs	r2, #0
 8001a02:	490d      	ldr	r1, [pc, #52]	; (8001a38 <tftp_cleanup_rd+0x48>)
 8001a04:	2000      	movs	r0, #0
 8001a06:	f005 fb3b 	bl	8007080 <f_mount>
  /* Free the tftp_connection_args structure reserverd for */
  mem_free(args);
 8001a0a:	6838      	ldr	r0, [r7, #0]
 8001a0c:	f006 fac2 	bl	8007f94 <mem_free>

  /* Disconnect the udp_pcb*/  
  udp_disconnect(upcb);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f00e fcc9 	bl	80103a8 <udp_disconnect>

  /* close the connection */
  udp_remove(upcb);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f00e fd0e 	bl	8010438 <udp_remove>

  udp_recv(UDPpcb, recv_callback_tftp, NULL);
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <tftp_cleanup_rd+0x4c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2200      	movs	r2, #0
 8001a22:	4907      	ldr	r1, [pc, #28]	; (8001a40 <tftp_cleanup_rd+0x50>)
 8001a24:	4618      	mov	r0, r3
 8001a26:	f00e fce7 	bl	80103f8 <udp_recv>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000348 	.word	0x20000348
 8001a38:	08013a9c 	.word	0x08013a9c
 8001a3c:	200002e4 	.word	0x200002e4
 8001a40:	08001eb5 	.word	0x08001eb5

08001a44 <tftp_cleanup_wr>:
  * @param upcb: pointer on udp pcb
  * @param  args: pointer on a structure of type tftp_connection_args
  * @retval None
  */
void tftp_cleanup_wr(struct udp_pcb *upcb, tftp_connection_args *args)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  /* close the filesystem */
  f_close(&file_CR);
 8001a4e:	480e      	ldr	r0, [pc, #56]	; (8001a88 <tftp_cleanup_wr+0x44>)
 8001a50:	f006 f899 	bl	8007b86 <f_close>
  f_mount(NULL, (TCHAR const*)"",0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	490d      	ldr	r1, [pc, #52]	; (8001a8c <tftp_cleanup_wr+0x48>)
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f005 fb11 	bl	8007080 <f_mount>
  /* Free the tftp_connection_args structure reserverd for */
  mem_free(args);
 8001a5e:	6838      	ldr	r0, [r7, #0]
 8001a60:	f006 fa98 	bl	8007f94 <mem_free>

  /* Disconnect the udp_pcb*/
  udp_disconnect(upcb);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f00e fc9f 	bl	80103a8 <udp_disconnect>

  /* close the connection */
  udp_remove(upcb);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f00e fce4 	bl	8010438 <udp_remove>

  /* reset the callback function */
  udp_recv(UDPpcb, recv_callback_tftp, NULL);
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <tftp_cleanup_wr+0x4c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2200      	movs	r2, #0
 8001a76:	4907      	ldr	r1, [pc, #28]	; (8001a94 <tftp_cleanup_wr+0x50>)
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f00e fcbd 	bl	80103f8 <udp_recv>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200025ac 	.word	0x200025ac
 8001a8c:	08013a9c 	.word	0x08013a9c
 8001a90:	200002e4 	.word	0x200002e4
 8001a94:	08001eb5 	.word	0x08001eb5

08001a98 <tftp_send_next_block>:
  * @param  to_port: pointer on remote udp port
  * @retval None
  */
void tftp_send_next_block(struct udp_pcb *upcb, tftp_connection_args *args,
                          const ip_addr_t *to_ip, u16_t to_port)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	807b      	strh	r3, [r7, #2]
  /* Function to read 512 bytes from the file to send (file_SD), put them
   * in "args->data" and return the number of bytes read */
   f_read(&file_SD, (uint8_t*)args->data, TFTP_DATA_LEN_MAX, (UINT*)(&args->data_len));
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1d19      	adds	r1, r3, #4
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab4:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <tftp_send_next_block+0x50>)
 8001ab6:	f005 fcf5 	bl	80074a4 <f_read>

  /*   NOTE: We need to send data packet even if args->data_len = 0*/
 
  /* sEndTransferthe data */
  tftp_send_data_packet(upcb, to_ip, to_port, args->block, args->data, args->data_len);
 8001aba:	8879      	ldrh	r1, [r7, #2]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001ac2:	b298      	uxth	r0, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8001ace:	9201      	str	r2, [sp, #4]
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f7ff ff24 	bl	8001926 <tftp_send_data_packet>

}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000348 	.word	0x20000348

08001aec <rrq_recv_callback>:
  * @param  port: pointer on remote udp port
  * @retval None
  */
void rrq_recv_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,
                       const ip_addr_t *addr, u16_t port)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
  /* Get our connection state  */
  tftp_connection_args *args = (tftp_connection_args *)arg;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	617b      	str	r3, [r7, #20]

  if (tftp_is_correct_ack(p->payload, args->block))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	f000 fa9c 	bl	8002048 <tftp_is_correct_ack>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <rrq_recv_callback+0x38>
  {
    /* increment block # */
    args->block++;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  /* if the last read returned less than the requested number of bytes
   * (i.e. TFTP_DATA_LEN_MAX), then we've sent the whole file and we can quit
   */
  if (args->data_len < TFTP_DATA_LEN_MAX)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b2e:	d206      	bcs.n	8001b3e <rrq_recv_callback+0x52>
  {
    /* Clean the connection*/
    tftp_cleanup_rd(upcb, args);
 8001b30:	6979      	ldr	r1, [r7, #20]
 8001b32:	68b8      	ldr	r0, [r7, #8]
 8001b34:	f7ff ff5c 	bl	80019f0 <tftp_cleanup_rd>

    pbuf_free(p);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f007 fb59 	bl	80091f0 <pbuf_free>
  }

  /* if the whole file has not yet been sent then continue  */
  tftp_send_next_block(upcb, args, addr, port);
 8001b3e:	8c3b      	ldrh	r3, [r7, #32]
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	6979      	ldr	r1, [r7, #20]
 8001b44:	68b8      	ldr	r0, [r7, #8]
 8001b46:	f7ff ffa7 	bl	8001a98 <tftp_send_next_block>

  pbuf_free(p);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f007 fb50 	bl	80091f0 <pbuf_free>
}
 8001b50:	bf00      	nop
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <wrq_recv_callback>:
  * @param  addr: pointer on remote IP address
  * @param  port: pointer on remote port
  * @retval None
  */
void wrq_recv_callback(void *arg, struct udp_pcb *upcb, struct pbuf *pkt_buf, const ip_addr_t *addr, u16_t port)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
  tftp_connection_args *args = (tftp_connection_args *)arg;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	617b      	str	r3, [r7, #20]
  int n = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]

  /* we expect to receive only one pbuf (pbuf size should be 
     configured > max TFTP frame size */
  if (pkt_buf->len != pkt_buf->tot_len)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	895a      	ldrh	r2, [r3, #10]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	891b      	ldrh	r3, [r3, #8]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d16a      	bne.n	8001c50 <wrq_recv_callback+0xf8>
  {
    return;
  }

  /* Does this packet have any valid data to write? */
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	895b      	ldrh	r3, [r3, #10]
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d937      	bls.n	8001bf2 <wrq_recv_callback+0x9a>
      (tftp_extract_block(pkt_buf->payload) == (args->block + 1)))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f9e3 	bl	8001f52 <tftp_extract_block>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001b96:	3301      	adds	r3, #1
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d12a      	bne.n	8001bf2 <wrq_recv_callback+0x9a>
  {
    /* write the received data to the file */
    f_write(&file_CR, (char*)pkt_buf->payload + TFTP_DATA_PKT_HDR_LEN, pkt_buf->len - TFTP_DATA_PKT_HDR_LEN, (UINT*)&n);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	1d19      	adds	r1, r3, #4
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	895b      	ldrh	r3, [r3, #10]
 8001ba6:	3b04      	subs	r3, #4
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f107 0310 	add.w	r3, r7, #16
 8001bae:	482a      	ldr	r0, [pc, #168]	; (8001c58 <wrq_recv_callback+0x100>)
 8001bb0:	f005 fdd7 	bl	8007762 <f_write>

    if (n <= 0)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	dc09      	bgt.n	8001bce <wrq_recv_callback+0x76>
    {
      tftp_send_error_message(upcb, addr, port, TFTP_ERR_FILE_NOT_FOUND);
 8001bba:	8c3a      	ldrh	r2, [r7, #32]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	6839      	ldr	r1, [r7, #0]
 8001bc0:	68b8      	ldr	r0, [r7, #8]
 8001bc2:	f7ff fe7f 	bl	80018c4 <tftp_send_error_message>
      /* close the connection */
      tftp_cleanup_wr(upcb, args); /* close the connection */
 8001bc6:	6979      	ldr	r1, [r7, #20]
 8001bc8:	68b8      	ldr	r0, [r7, #8]
 8001bca:	f7ff ff3b 	bl	8001a44 <tftp_cleanup_wr>
    }
    
    /* update our block number to match the block number just received */
    args->block++;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    
    /* update total bytes  */
    (args->tot_bytes) += (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN);
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	895b      	ldrh	r3, [r3, #10]
 8001be6:	3b04      	subs	r3, #4
 8001be8:	441a      	add	r2, r3
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8001bf0:	e013      	b.n	8001c1a <wrq_recv_callback+0xc2>
  }
  else if (tftp_extract_block(pkt_buf->payload) == (args->block + 1))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f9ab 	bl	8001f52 <tftp_extract_block>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001c06:	3301      	adds	r3, #1
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d106      	bne.n	8001c1a <wrq_recv_callback+0xc2>
  {
    /* update our block number to match the block number just received  */
    args->block++;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
   * number, then the args->block (our block number) is never updated and
   * we simply send "duplicate ACK" which has the same block number as the
   * last ACK pkt we sent.  This lets the host know that we are still waiting
   * on block number args->block+1. 
   */
  tftp_send_ack_packet(upcb, addr, port, args->block);
 8001c1a:	8c3a      	ldrh	r2, [r7, #32]
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	6839      	ldr	r1, [r7, #0]
 8001c26:	68b8      	ldr	r0, [r7, #8]
 8001c28:	f7ff febd 	bl	80019a6 <tftp_send_ack_packet>

  /* If the last write returned less than the maximum TFTP data pkt length,
   * then we've received the whole file and so we can quit (this is how TFTP
   * signals the end of a transfer!)
   */
  if (pkt_buf->len < TFTP_DATA_PKT_LEN_MAX)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	895b      	ldrh	r3, [r3, #10]
 8001c30:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8001c34:	d207      	bcs.n	8001c46 <wrq_recv_callback+0xee>
  {
    tftp_cleanup_wr(upcb, args);
 8001c36:	6979      	ldr	r1, [r7, #20]
 8001c38:	68b8      	ldr	r0, [r7, #8]
 8001c3a:	f7ff ff03 	bl	8001a44 <tftp_cleanup_wr>
    pbuf_free(pkt_buf);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f007 fad6 	bl	80091f0 <pbuf_free>
 8001c44:	e005      	b.n	8001c52 <wrq_recv_callback+0xfa>
  }
  else
  {
    pbuf_free(pkt_buf);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f007 fad2 	bl	80091f0 <pbuf_free>
    return;
 8001c4c:	bf00      	nop
 8001c4e:	e000      	b.n	8001c52 <wrq_recv_callback+0xfa>
    return;
 8001c50:	bf00      	nop
  }
}
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200025ac 	.word	0x200025ac

08001c5c <tftp_process_read>:
  * @param  to_port: pointer on remote udp port
  * @param  FileName: pointer on filename to be read
  * @retval error code
  */
int tftp_process_read(struct udp_pcb *upcb, const ip_addr_t *to, unsigned short to_port, char* FileName)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	80fb      	strh	r3, [r7, #6]
  tftp_connection_args *args = NULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  /* If Could not open the file which will be transmitted  */
  if (f_open(&file_SD, (const TCHAR*)FileName, FA_READ) != FR_OK)
 8001c70:	2201      	movs	r2, #1
 8001c72:	6839      	ldr	r1, [r7, #0]
 8001c74:	4824      	ldr	r0, [pc, #144]	; (8001d08 <tftp_process_read+0xac>)
 8001c76:	f005 fa49 	bl	800710c <f_open>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00b      	beq.n	8001c98 <tftp_process_read+0x3c>
  {
    tftp_send_error_message(upcb, to, to_port, TFTP_ERR_FILE_NOT_FOUND);
 8001c80:	88fa      	ldrh	r2, [r7, #6]
 8001c82:	2301      	movs	r3, #1
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f7ff fe1c 	bl	80018c4 <tftp_send_error_message>

    tftp_cleanup_rd(upcb, args);
 8001c8c:	6979      	ldr	r1, [r7, #20]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f7ff feae 	bl	80019f0 <tftp_cleanup_rd>

    return 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e033      	b.n	8001d00 <tftp_process_read+0xa4>
  }
  
  args = mem_malloc(sizeof *args);
 8001c98:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001c9c:	f006 fae0 	bl	8008260 <mem_malloc>
 8001ca0:	6178      	str	r0, [r7, #20]
  /* If we aren't able to allocate memory for a "tftp_connection_args" */
  if (!args)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10b      	bne.n	8001cc0 <tftp_process_read+0x64>
  {
    /* unable to allocate memory for tftp args  */
    tftp_send_error_message(upcb, to, to_port, TFTP_ERR_NOTDEFINED);
 8001ca8:	88fa      	ldrh	r2, [r7, #6]
 8001caa:	2300      	movs	r3, #0
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f7ff fe08 	bl	80018c4 <tftp_send_error_message>

    /* no need to use tftp_cleanup_rd because no "tftp_connection_args" struct has been malloc'd   */
    tftp_cleanup_rd(upcb, args);
 8001cb4:	6979      	ldr	r1, [r7, #20]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f7ff fe9a 	bl	80019f0 <tftp_cleanup_rd>

    return 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e01f      	b.n	8001d00 <tftp_process_read+0xa4>
  }

  /* initialize connection structure  */
  args->op = TFTP_RRQ;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
  args->to_ip.addr = to->addr;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  args->to_port = to_port;
 8001cd0:	88fa      	ldrh	r2, [r7, #6]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  args->block = 1; /* block number starts at 1 (not 0) according to RFC1350  */
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  args->tot_bytes = 0;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218


  /* set callback for receives on this UDP PCB  */
  udp_recv(upcb, rrq_recv_callback, args);
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	4908      	ldr	r1, [pc, #32]	; (8001d0c <tftp_process_read+0xb0>)
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f00e fb83 	bl	80103f8 <udp_recv>

  /* initiate the transaction by sending the first block of data,
    further blocks will be sent when ACKs are received */

  tftp_send_next_block(upcb, args, to, to_port);
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	6979      	ldr	r1, [r7, #20]
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f7ff fecd 	bl	8001a98 <tftp_send_next_block>

  return 1;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000348 	.word	0x20000348
 8001d0c:	08001aed 	.word	0x08001aed

08001d10 <tftp_process_write>:
  * @param  to_port: pointer on remote udp port
  * @param  FileName: pointer on filename to be written 
  * @retval error code
  */
int tftp_process_write(struct udp_pcb *upcb, const ip_addr_t *to, unsigned short to_port, char *FileName)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	80fb      	strh	r3, [r7, #6]
  tftp_connection_args *args = NULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  /* Can not create file */
  if (f_open(&file_CR, (const TCHAR*)FileName, FA_CREATE_ALWAYS|FA_WRITE) != FR_OK)
 8001d24:	220a      	movs	r2, #10
 8001d26:	6839      	ldr	r1, [r7, #0]
 8001d28:	4826      	ldr	r0, [pc, #152]	; (8001dc4 <tftp_process_write+0xb4>)
 8001d2a:	f005 f9ef 	bl	800710c <f_open>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00b      	beq.n	8001d4c <tftp_process_write+0x3c>
  {
    tftp_send_error_message(upcb, to, to_port, TFTP_ERR_NOTDEFINED);
 8001d34:	88fa      	ldrh	r2, [r7, #6]
 8001d36:	2300      	movs	r3, #0
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f7ff fdc2 	bl	80018c4 <tftp_send_error_message>

    tftp_cleanup_wr(upcb, args);
 8001d40:	6979      	ldr	r1, [r7, #20]
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f7ff fe7e 	bl	8001a44 <tftp_cleanup_wr>

    return 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e036      	b.n	8001dba <tftp_process_write+0xaa>
  }

  args = mem_malloc(sizeof *args);
 8001d4c:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001d50:	f006 fa86 	bl	8008260 <mem_malloc>
 8001d54:	6178      	str	r0, [r7, #20]
  if (!args)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10b      	bne.n	8001d74 <tftp_process_write+0x64>
  {
    tftp_send_error_message(upcb, to, to_port, TFTP_ERR_NOTDEFINED);
 8001d5c:	88fa      	ldrh	r2, [r7, #6]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f7ff fdae 	bl	80018c4 <tftp_send_error_message>

    tftp_cleanup_wr(upcb, args);
 8001d68:	6979      	ldr	r1, [r7, #20]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f7ff fe6a 	bl	8001a44 <tftp_cleanup_wr>

    return 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e022      	b.n	8001dba <tftp_process_write+0xaa>
  }

  args->op = TFTP_WRQ;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2202      	movs	r2, #2
 8001d78:	601a      	str	r2, [r3, #0]
  args->to_ip.addr = to->addr;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  args->to_port = to_port;
 8001d84:	88fa      	ldrh	r2, [r7, #6]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  /* the block # used as a positive response to a WRQ is _always_ 0!!! (see RFC1350)  */
  args->block = 0;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  args->tot_bytes = 0;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  /* set callback for receives on this UDP PCB  */
  udp_recv(upcb, wrq_recv_callback, args);
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	490a      	ldr	r1, [pc, #40]	; (8001dc8 <tftp_process_write+0xb8>)
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f00e fb29 	bl	80103f8 <udp_recv>

  /* initiate the write transaction by sending the first ack */
  tftp_send_ack_packet(upcb, to, to_port, args->block);
 8001da6:	88fa      	ldrh	r2, [r7, #6]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f7ff fdf7 	bl	80019a6 <tftp_send_ack_packet>

  return 0;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200025ac 	.word	0x200025ac
 8001dc8:	08001b59 	.word	0x08001b59

08001dcc <process_tftp_request>:
  * @param  ip_addr: pointer on source IP address
  * @param  port: pointer on source udp port
  * @retval None
  */
void process_tftp_request(struct pbuf *pkt_buf, const ip_addr_t *addr, u16_t port)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08e      	sub	sp, #56	; 0x38
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	80fb      	strh	r3, [r7, #6]
  tftp_opcode op = tftp_decode_op(pkt_buf->payload);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f8aa 	bl	8001f38 <tftp_decode_op>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  char FileName[30];
  struct udp_pcb *upcb;
  err_t err;

  /* create new UDP PCB structure */
  upcb = udp_new();
 8001dea:	f00e fb67 	bl	80104bc <udp_new>
 8001dee:	6338      	str	r0, [r7, #48]	; 0x30
  if (!upcb)
 8001df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d04d      	beq.n	8001e92 <process_tftp_request+0xc6>

  /* bind to port 0 to receive next available free port */
  /* NOTE:  This is how TFTP works.  There is a UDP PCB for the standard port
   * 69 which al transactions begin communication on, however all subsequent
   * transactions for a given "stream" occur on another port!  */
  err = udp_bind(upcb, IP_ADDR_ANY, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	492b      	ldr	r1, [pc, #172]	; (8001ea8 <process_tftp_request+0xdc>)
 8001dfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dfc:	f00e f9de 	bl	80101bc <udp_bind>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (err != ERR_OK)
 8001e06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d143      	bne.n	8001e96 <process_tftp_request+0xca>
  {    
    /* Unable to bind to port   */
    return;
  }
  switch (op)
 8001e0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d002      	beq.n	8001e1c <process_tftp_request+0x50>
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d018      	beq.n	8001e4c <process_tftp_request+0x80>
 8001e1a:	e02f      	b.n	8001e7c <process_tftp_request+0xb0>
  {
    case TFTP_RRQ:/* TFTP RRQ (read request) */
    {
      /* Read the name of the file asked by the client to be sent from the SD card */
      tftp_extract_filename(FileName, pkt_buf->payload);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	4611      	mov	r1, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f8a4 	bl	8001f74 <tftp_extract_filename>

      /* Could not open filesystem */
      if(f_mount(&filesystem, (TCHAR const*)"", 0) != FR_OK)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	491f      	ldr	r1, [pc, #124]	; (8001eac <process_tftp_request+0xe0>)
 8001e30:	481f      	ldr	r0, [pc, #124]	; (8001eb0 <process_tftp_request+0xe4>)
 8001e32:	f005 f925 	bl	8007080 <f_mount>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d12e      	bne.n	8001e9a <process_tftp_request+0xce>
      {
        return;
      }

      /* Start the TFTP read mode*/
      tftp_process_read(upcb, addr, port, FileName);
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	88fa      	ldrh	r2, [r7, #6]
 8001e42:	68b9      	ldr	r1, [r7, #8]
 8001e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e46:	f7ff ff09 	bl	8001c5c <tftp_process_read>
      break;
 8001e4a:	e029      	b.n	8001ea0 <process_tftp_request+0xd4>
    } 

    case TFTP_WRQ: /* TFTP WRQ (write request) */
    {
      /* Read the name of the file asked by the client to be received and writen in the SD card */
      tftp_extract_filename(FileName, pkt_buf->payload);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	f107 0310 	add.w	r3, r7, #16
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f88c 	bl	8001f74 <tftp_extract_filename>
  
      /* Could not open filesystem */
      if(f_mount(&filesystem, (TCHAR const*)"", 0) != FR_OK)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	4913      	ldr	r1, [pc, #76]	; (8001eac <process_tftp_request+0xe0>)
 8001e60:	4813      	ldr	r0, [pc, #76]	; (8001eb0 <process_tftp_request+0xe4>)
 8001e62:	f005 f90d 	bl	8007080 <f_mount>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d118      	bne.n	8001e9e <process_tftp_request+0xd2>
      {
        return;
      }
        
      /* Start the TFTP write mode*/
      tftp_process_write(upcb, addr, port, FileName);
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	88fa      	ldrh	r2, [r7, #6]
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e76:	f7ff ff4b 	bl	8001d10 <tftp_process_write>
      break;
 8001e7a:	e011      	b.n	8001ea0 <process_tftp_request+0xd4>
    }
    default: /* TFTP unknown request op */
      /* send generic access violation message */
      tftp_send_error_message(upcb, addr, port, TFTP_ERR_ACCESS_VIOLATION);
 8001e7c:	88fa      	ldrh	r2, [r7, #6]
 8001e7e:	2302      	movs	r3, #2
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e84:	f7ff fd1e 	bl	80018c4 <tftp_send_error_message>
      udp_remove(upcb);
 8001e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e8a:	f00e fad5 	bl	8010438 <udp_remove>

      break;
 8001e8e:	bf00      	nop
 8001e90:	e006      	b.n	8001ea0 <process_tftp_request+0xd4>
    return;
 8001e92:	bf00      	nop
 8001e94:	e004      	b.n	8001ea0 <process_tftp_request+0xd4>
    return;
 8001e96:	bf00      	nop
 8001e98:	e002      	b.n	8001ea0 <process_tftp_request+0xd4>
        return;
 8001e9a:	bf00      	nop
 8001e9c:	e000      	b.n	8001ea0 <process_tftp_request+0xd4>
        return;
 8001e9e:	bf00      	nop
  }
}
 8001ea0:	3738      	adds	r7, #56	; 0x38
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	08016624 	.word	0x08016624
 8001eac:	08013a9c 	.word	0x08013a9c
 8001eb0:	20001578 	.word	0x20001578

08001eb4 <recv_callback_tftp>:
  * @param  port: pointer on source udp port
  * @retval None
  */
void recv_callback_tftp(void *arg, struct udp_pcb *upcb, struct pbuf *pkt_buf,
                        const ip_addr_t *addr, u16_t port)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
  /* process new connection request */
  process_tftp_request(pkt_buf, addr, port);
 8001ec2:	8b3b      	ldrh	r3, [r7, #24]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	6839      	ldr	r1, [r7, #0]
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff7f 	bl	8001dcc <process_tftp_request>

  /* free pbuf */
  pbuf_free(pkt_buf);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f007 f98e 	bl	80091f0 <pbuf_free>
}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <tftpd_init>:
  * @brief  Initializes the udp pcb for TFTP 
  * @param  None
  * @retval None
  */
void tftpd_init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
  err_t err;
  unsigned port = 69;
 8001ee2:	2345      	movs	r3, #69	; 0x45
 8001ee4:	607b      	str	r3, [r7, #4]

  /* create a new UDP PCB structure  */
  UDPpcb = udp_new();
 8001ee6:	f00e fae9 	bl	80104bc <udp_new>
 8001eea:	4602      	mov	r2, r0
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <tftpd_init+0x50>)
 8001eee:	601a      	str	r2, [r3, #0]
  if (UDPpcb)
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <tftpd_init+0x50>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d014      	beq.n	8001f22 <tftpd_init+0x46>
  {  
    /* Bind this PCB to port 69  */
    err = udp_bind(UDPpcb, IP_ADDR_ANY, port);
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <tftpd_init+0x50>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	b292      	uxth	r2, r2
 8001f00:	490b      	ldr	r1, [pc, #44]	; (8001f30 <tftpd_init+0x54>)
 8001f02:	4618      	mov	r0, r3
 8001f04:	f00e f95a 	bl	80101bc <udp_bind>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	70fb      	strb	r3, [r7, #3]
    if (err == ERR_OK)
 8001f0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d106      	bne.n	8001f22 <tftpd_init+0x46>
    {    
      /* TFTP server start  */
      udp_recv(UDPpcb, recv_callback_tftp, NULL);
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <tftpd_init+0x50>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4906      	ldr	r1, [pc, #24]	; (8001f34 <tftpd_init+0x58>)
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f00e fa6b 	bl	80103f8 <udp_recv>
    }
  }
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200002e4 	.word	0x200002e4
 8001f30:	08016624 	.word	0x08016624
 8001f34:	08001eb5 	.word	0x08001eb5

08001f38 <tftp_decode_op>:

/**
  * @brief  Extracts the opcode from a TFTP message
**/ 
tftp_opcode tftp_decode_op(char *buf)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  return (tftp_opcode)(buf[1]);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3301      	adds	r3, #1
 8001f44:	781b      	ldrb	r3, [r3, #0]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <tftp_extract_block>:

/**
  * @brief Extracts the block number from TFTP message
**/
u16_t tftp_extract_block(char *buf)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  u16_t *b = (u16_t*)buf;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]
  return ntohs(b[1]);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3302      	adds	r3, #2
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f005 fe94 	bl	8007c92 <lwip_htons>
 8001f6a:	4603      	mov	r3, r0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <tftp_extract_filename>:

/**
  * @brief Extracts the filename from TFTP message
**/ 
void tftp_extract_filename(char *fname, char *buf)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  strcpy(fname, buf + 2);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	3302      	adds	r3, #2
 8001f82:	4619      	mov	r1, r3
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f010 fe2d 	bl	8012be4 <strcpy>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <tftp_set_opcode>:

/**
  * @brief set the opcode in TFTP message: RRQ / WRQ / DATA / ACK / ERROR 
**/ 
void tftp_set_opcode(char *buffer, tftp_opcode opcode)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	70fb      	strb	r3, [r7, #3]

  buffer[0] = 0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
  buffer[1] = (u8_t)opcode;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	78fa      	ldrb	r2, [r7, #3]
 8001faa:	701a      	strb	r2, [r3, #0]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <tftp_set_errorcode>:

/**
  * @brief Set the errorcode in TFTP message
**/
void tftp_set_errorcode(char *buffer, tftp_errorcode errCode)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]

  buffer[2] = 0;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
  buffer[3] = (u8_t)errCode;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3303      	adds	r3, #3
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	701a      	strb	r2, [r3, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <tftp_set_errormsg>:

/**
  * @brief Sets the error message
**/
void tftp_set_errormsg(char * buffer, char* errormsg)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  strcpy(buffer + 4, errormsg);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3304      	adds	r3, #4
 8001fee:	6839      	ldr	r1, [r7, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f010 fdf7 	bl	8012be4 <strcpy>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <tftp_set_block>:

/**
  * @brief Sets the block number
**/
void tftp_set_block(char* packet, u16_t block)
{
 8001ffe:	b590      	push	{r4, r7, lr}
 8002000:	b085      	sub	sp, #20
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	460b      	mov	r3, r1
 8002008:	807b      	strh	r3, [r7, #2]

  u16_t *p = (u16_t *)packet;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	60fb      	str	r3, [r7, #12]
  p[1] = htons(block);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1c9c      	adds	r4, r3, #2
 8002012:	887b      	ldrh	r3, [r7, #2]
 8002014:	4618      	mov	r0, r3
 8002016:	f005 fe3c 	bl	8007c92 <lwip_htons>
 800201a:	4603      	mov	r3, r0
 800201c:	8023      	strh	r3, [r4, #0]
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bd90      	pop	{r4, r7, pc}

08002026 <tftp_set_data_message>:

/**
  * @brief Set the data message
**/
void tftp_set_data_message(char* packet, char* buf, int buflen)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
  memcpy(packet + 4, buf, buflen);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3304      	adds	r3, #4
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	4618      	mov	r0, r3
 800203c:	f010 fd73 	bl	8012b26 <memcpy>
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <tftp_is_correct_ack>:

/**
  * @brief Check if the received acknowledgement is correct
**/
u32_t tftp_is_correct_ack(char *buf, int block)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  /* first make sure this is a data ACK packet */
  if (tftp_decode_op(buf) != TFTP_ACK)
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ff70 	bl	8001f38 <tftp_decode_op>
 8002058:	4603      	mov	r3, r0
 800205a:	2b04      	cmp	r3, #4
 800205c:	d001      	beq.n	8002062 <tftp_is_correct_ack+0x1a>
    return 0;
 800205e:	2300      	movs	r3, #0
 8002060:	e00a      	b.n	8002078 <tftp_is_correct_ack+0x30>

  /* then compare block numbers */
  if (block != tftp_extract_block(buf))
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ff75 	bl	8001f52 <tftp_extract_block>
 8002068:	4603      	mov	r3, r0
 800206a:	461a      	mov	r2, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	4293      	cmp	r3, r2
 8002070:	d001      	beq.n	8002076 <tftp_is_correct_ack+0x2e>
    return 0;
 8002072:	2300      	movs	r3, #0
 8002074:	e000      	b.n	8002078 <tftp_is_correct_ack+0x30>

  return 1;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8002086:	f00e fa19 	bl	80104bc <udp_new>
 800208a:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d013      	beq.n	80020ba <udp_echoserver_init+0x3a>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8002092:	2207      	movs	r2, #7
 8002094:	490b      	ldr	r1, [pc, #44]	; (80020c4 <udp_echoserver_init+0x44>)
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f00e f890 	bl	80101bc <udp_bind>
 800209c:	4603      	mov	r3, r0
 800209e:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 80020a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d105      	bne.n	80020b4 <udp_echoserver_init+0x34>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 80020a8:	2200      	movs	r2, #0
 80020aa:	4907      	ldr	r1, [pc, #28]	; (80020c8 <udp_echoserver_init+0x48>)
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f00e f9a3 	bl	80103f8 <udp_recv>
      else
      {
        udp_remove(upcb);
      }
   }
}
 80020b2:	e002      	b.n	80020ba <udp_echoserver_init+0x3a>
        udp_remove(upcb);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f00e f9bf 	bl	8010438 <udp_remove>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	08016624 	.word	0x08016624
 80020c8:	080020cd 	.word	0x080020cd

080020cc <udp_echoserver_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 80020da:	2207      	movs	r2, #7
 80020dc:	6839      	ldr	r1, [r7, #0]
 80020de:	68b8      	ldr	r0, [r7, #8]
 80020e0:	f00e f8f4 	bl	80102cc <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	68b8      	ldr	r0, [r7, #8]
 80020e8:	f00d fe7e 	bl	800fde8 <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 80020ec:	68b8      	ldr	r0, [r7, #8]
 80020ee:	f00e f95b 	bl	80103a8 <udp_disconnect>

  /* Free the p buffer */
  pbuf_free(p);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f007 f87c 	bl	80091f0 <pbuf_free>
   
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002138 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002104:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002106:	e003      	b.n	8002110 <LoopCopyDataInit>

08002108 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800210a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800210c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800210e:	3104      	adds	r1, #4

08002110 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002110:	480b      	ldr	r0, [pc, #44]	; (8002140 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002114:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002116:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002118:	d3f6      	bcc.n	8002108 <CopyDataInit>
  ldr  r2, =_sbss
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800211c:	e002      	b.n	8002124 <LoopFillZerobss>

0800211e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800211e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002120:	f842 3b04 	str.w	r3, [r2], #4

08002124 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002126:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002128:	d3f9      	bcc.n	800211e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800212a:	f7ff f959 	bl	80013e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800212e:	f010 fcc7 	bl	8012ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002132:	f7fe feed 	bl	8000f10 <main>
  bx  lr    
 8002136:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002138:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800213c:	080166e0 	.word	0x080166e0
  ldr  r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002144:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 8002148:	200000b4 	.word	0x200000b4
  ldr  r3, = _ebss
 800214c:	2000bce4 	.word	0x2000bce4

08002150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC_IRQHandler>
	...

08002154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <HAL_Init+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <HAL_Init+0x40>)
 800215e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <HAL_Init+0x40>)
 800216a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_Init+0x40>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_Init+0x40>)
 8002176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217c:	2003      	movs	r0, #3
 800217e:	f000 f92f 	bl	80023e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002182:	2000      	movs	r0, #0
 8002184:	f000 f808 	bl	8002198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002188:	f7fe fff0 	bl	800116c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00

08002198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x54>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_InitTick+0x58>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f939 	bl	800242e <HAL_SYSTICK_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00e      	b.n	80021e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b0f      	cmp	r3, #15
 80021ca:	d80a      	bhi.n	80021e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021cc:	2200      	movs	r2, #0
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f000 f90f 	bl	80023f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d8:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <HAL_InitTick+0x5c>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000004 	.word	0x20000004
 80021f0:	2000002c 	.word	0x2000002c
 80021f4:	20000028 	.word	0x20000028

080021f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x20>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x24>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4413      	add	r3, r2
 8002208:	4a04      	ldr	r2, [pc, #16]	; (800221c <HAL_IncTick+0x24>)
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	2000002c 	.word	0x2000002c
 800221c:	200035dc 	.word	0x200035dc

08002220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return uwTick;
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_GetTick+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	200035dc 	.word	0x200035dc

08002238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7ff ffee 	bl	8002220 <HAL_GetTick>
 8002244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d005      	beq.n	800225e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_Delay+0x40>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800225e:	bf00      	nop
 8002260:	f7ff ffde 	bl	8002220 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	429a      	cmp	r2, r3
 800226e:	d8f7      	bhi.n	8002260 <HAL_Delay+0x28>
  {
  }
}
 8002270:	bf00      	nop
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	2000002c 	.word	0x2000002c

0800227c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ae:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	60d3      	str	r3, [r2, #12]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <__NVIC_GetPriorityGrouping+0x18>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	f003 0307 	and.w	r3, r3, #7
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	; (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	; (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f1c3 0307 	rsb	r3, r3, #7
 800234e:	2b04      	cmp	r3, #4
 8002350:	bf28      	it	cs
 8002352:	2304      	movcs	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3304      	adds	r3, #4
 800235a:	2b06      	cmp	r3, #6
 800235c:	d902      	bls.n	8002364 <NVIC_EncodePriority+0x30>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3b03      	subs	r3, #3
 8002362:	e000      	b.n	8002366 <NVIC_EncodePriority+0x32>
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	f04f 32ff 	mov.w	r2, #4294967295
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	401a      	ands	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800237c:	f04f 31ff 	mov.w	r1, #4294967295
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	43d9      	mvns	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	4313      	orrs	r3, r2
         );
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ac:	d301      	bcc.n	80023b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00f      	b.n	80023d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <SysTick_Config+0x40>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ba:	210f      	movs	r1, #15
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	f7ff ff8e 	bl	80022e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <SysTick_Config+0x40>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <SysTick_Config+0x40>)
 80023cc:	2207      	movs	r2, #7
 80023ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	e000e010 	.word	0xe000e010

080023e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff47 	bl	800227c <__NVIC_SetPriorityGrouping>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002408:	f7ff ff5c 	bl	80022c4 <__NVIC_GetPriorityGrouping>
 800240c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	6978      	ldr	r0, [r7, #20]
 8002414:	f7ff ff8e 	bl	8002334 <NVIC_EncodePriority>
 8002418:	4602      	mov	r2, r0
 800241a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff5d 	bl	80022e0 <__NVIC_SetPriority>
}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ffb0 	bl	800239c <SysTick_Config>
 800243c:	4603      	mov	r3, r0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002458:	4baa      	ldr	r3, [pc, #680]	; (8002704 <HAL_ETH_Init+0x2bc>)
 800245a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002460:	2300      	movs	r3, #0
 8002462:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e185      	b.n	800277a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f002 fc88 	bl	8004d98 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	4b9e      	ldr	r3, [pc, #632]	; (8002708 <HAL_ETH_Init+0x2c0>)
 800248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002490:	4a9d      	ldr	r2, [pc, #628]	; (8002708 <HAL_ETH_Init+0x2c0>)
 8002492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002496:	6453      	str	r3, [r2, #68]	; 0x44
 8002498:	4b9b      	ldr	r3, [pc, #620]	; (8002708 <HAL_ETH_Init+0x2c0>)
 800249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024a4:	4b99      	ldr	r3, [pc, #612]	; (800270c <HAL_ETH_Init+0x2c4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4a98      	ldr	r2, [pc, #608]	; (800270c <HAL_ETH_Init+0x2c4>)
 80024aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024ae:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024b0:	4b96      	ldr	r3, [pc, #600]	; (800270c <HAL_ETH_Init+0x2c4>)
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4994      	ldr	r1, [pc, #592]	; (800270c <HAL_ETH_Init+0x2c4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80024d6:	f7ff fea3 	bl	8002220 <HAL_GetTick>
 80024da:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80024dc:	e011      	b.n	8002502 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80024de:	f7ff fe9f 	bl	8002220 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024ec:	d909      	bls.n	8002502 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2203      	movs	r2, #3
 80024f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e13b      	b.n	800277a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1e4      	bne.n	80024de <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f023 031c 	bic.w	r3, r3, #28
 8002522:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002524:	f001 fe98 	bl	8004258 <HAL_RCC_GetHCLKFreq>
 8002528:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4a78      	ldr	r2, [pc, #480]	; (8002710 <HAL_ETH_Init+0x2c8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d908      	bls.n	8002544 <HAL_ETH_Init+0xfc>
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	4a77      	ldr	r2, [pc, #476]	; (8002714 <HAL_ETH_Init+0x2cc>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d804      	bhi.n	8002544 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f043 0308 	orr.w	r3, r3, #8
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	e027      	b.n	8002594 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	4a73      	ldr	r2, [pc, #460]	; (8002714 <HAL_ETH_Init+0x2cc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d908      	bls.n	800255e <HAL_ETH_Init+0x116>
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	4a72      	ldr	r2, [pc, #456]	; (8002718 <HAL_ETH_Init+0x2d0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d804      	bhi.n	800255e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f043 030c 	orr.w	r3, r3, #12
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	e01a      	b.n	8002594 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	4a6d      	ldr	r2, [pc, #436]	; (8002718 <HAL_ETH_Init+0x2d0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d903      	bls.n	800256e <HAL_ETH_Init+0x126>
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4a6c      	ldr	r2, [pc, #432]	; (800271c <HAL_ETH_Init+0x2d4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d911      	bls.n	8002592 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	4a6a      	ldr	r2, [pc, #424]	; (800271c <HAL_ETH_Init+0x2d4>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d908      	bls.n	8002588 <HAL_ETH_Init+0x140>
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4a69      	ldr	r2, [pc, #420]	; (8002720 <HAL_ETH_Init+0x2d8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d804      	bhi.n	8002588 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	e005      	b.n	8002594 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f043 0310 	orr.w	r3, r3, #16
 800258e:	61fb      	str	r3, [r7, #28]
 8002590:	e000      	b.n	8002594 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002592:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800259c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025a0:	2100      	movs	r1, #0
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 fb9a 	bl	8002cdc <HAL_ETH_WritePHYRegister>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80025b2:	6939      	ldr	r1, [r7, #16]
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 fd4f 	bl	8003058 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e0d9      	b.n	800277a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80025c6:	20ff      	movs	r0, #255	; 0xff
 80025c8:	f7ff fe36 	bl	8002238 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 80a7 	beq.w	8002724 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80025d6:	f7ff fe23 	bl	8002220 <HAL_GetTick>
 80025da:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80025dc:	f107 030c 	add.w	r3, r7, #12
 80025e0:	461a      	mov	r2, r3
 80025e2:	2101      	movs	r1, #1
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fb11 	bl	8002c0c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80025ea:	f7ff fe19 	bl	8002220 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d90f      	bls.n	800261c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002600:	6939      	ldr	r1, [r7, #16]
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fd28 	bl	8003058 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e0ae      	b.n	800277a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0da      	beq.n	80025dc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002626:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800262a:	2100      	movs	r1, #0
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 fb55 	bl	8002cdc <HAL_ETH_WritePHYRegister>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00b      	beq.n	8002650 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800263c:	6939      	ldr	r1, [r7, #16]
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fd0a 	bl	8003058 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800264c:	2301      	movs	r3, #1
 800264e:	e094      	b.n	800277a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002650:	f7ff fde6 	bl	8002220 <HAL_GetTick>
 8002654:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	461a      	mov	r2, r3
 800265c:	2101      	movs	r1, #1
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fad4 	bl	8002c0c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002664:	f7ff fddc 	bl	8002220 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d90f      	bls.n	8002696 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800267a:	6939      	ldr	r1, [r7, #16]
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 fceb 	bl	8003058 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e071      	b.n	800277a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0da      	beq.n	8002656 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80026a0:	f107 030c 	add.w	r3, r7, #12
 80026a4:	461a      	mov	r2, r3
 80026a6:	211f      	movs	r1, #31
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 faaf 	bl	8002c0c <HAL_ETH_ReadPHYRegister>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00b      	beq.n	80026cc <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80026b8:	6939      	ldr	r1, [r7, #16]
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fccc 	bl	8003058 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80026c8:	2301      	movs	r3, #1
 80026ca:	e056      	b.n	800277a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d004      	beq.n	80026e0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	e002      	b.n	80026e6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	e037      	b.n	8002768 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	e032      	b.n	8002768 <HAL_ETH_Init+0x320>
 8002702:	bf00      	nop
 8002704:	03938700 	.word	0x03938700
 8002708:	40023800 	.word	0x40023800
 800270c:	40013800 	.word	0x40013800
 8002710:	01312cff 	.word	0x01312cff
 8002714:	02160ebf 	.word	0x02160ebf
 8002718:	039386ff 	.word	0x039386ff
 800271c:	05f5e0ff 	.word	0x05f5e0ff
 8002720:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	08db      	lsrs	r3, r3, #3
 800272a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002734:	4313      	orrs	r3, r2
 8002736:	b29b      	uxth	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	2100      	movs	r1, #0
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 facd 	bl	8002cdc <HAL_ETH_WritePHYRegister>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00b      	beq.n	8002760 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800274c:	6939      	ldr	r1, [r7, #16]
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fc82 	bl	8003058 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e00c      	b.n	800277a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002760:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002764:	f7ff fd68 	bl	8002238 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002768:	6939      	ldr	r1, [r7, #16]
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fc74 	bl	8003058 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3720      	adds	r7, #32
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop

08002784 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_ETH_DMATxDescListInit+0x20>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e052      	b.n	800284a <HAL_ETH_DMATxDescListInit+0xc6>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	e030      	b.n	8002822 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	015b      	lsls	r3, r3, #5
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	4413      	add	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027d0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80027d8:	fb02 f303 	mul.w	r3, r2, r3
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4413      	add	r3, r2
 80027e0:	461a      	mov	r2, r3
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d105      	bne.n	80027fa <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	429a      	cmp	r2, r3
 8002802:	d208      	bcs.n	8002816 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	3301      	adds	r3, #1
 8002808:	015b      	lsls	r3, r3, #5
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	4413      	add	r3, r2
 800280e:	461a      	mov	r2, r3
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	e002      	b.n	800281c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	3301      	adds	r3, #1
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d3ca      	bcc.n	80027c0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002834:	3310      	adds	r3, #16
 8002836:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002856:	b480      	push	{r7}
 8002858:	b087      	sub	sp, #28
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_ETH_DMARxDescListInit+0x20>
 8002872:	2302      	movs	r3, #2
 8002874:	e056      	b.n	8002924 <HAL_ETH_DMARxDescListInit+0xce>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2202      	movs	r2, #2
 8002882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	e034      	b.n	80028fc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	015b      	lsls	r3, r3, #5
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	4413      	add	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80028a2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80028aa:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	461a      	mov	r2, r3
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d105      	bne.n	80028d4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d208      	bcs.n	80028f0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	015b      	lsls	r3, r3, #5
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	4413      	add	r3, r2
 80028e8:	461a      	mov	r2, r3
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	e002      	b.n	80028f6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3301      	adds	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d3c6      	bcc.n	8002892 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800290e:	330c      	adds	r3, #12
 8002910:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	371c      	adds	r7, #28
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_ETH_TransmitFrame+0x24>
 8002950:	2302      	movs	r3, #2
 8002952:	e0cd      	b.n	8002af0 <HAL_ETH_TransmitFrame+0x1c0>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800297a:	2301      	movs	r3, #1
 800297c:	e0b8      	b.n	8002af0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	da09      	bge.n	800299c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2212      	movs	r2, #18
 800298c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0a9      	b.n	8002af0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d915      	bls.n	80029d2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	4a54      	ldr	r2, [pc, #336]	; (8002afc <HAL_ETH_TransmitFrame+0x1cc>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	0a9b      	lsrs	r3, r3, #10
 80029b0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	4b51      	ldr	r3, [pc, #324]	; (8002afc <HAL_ETH_TransmitFrame+0x1cc>)
 80029b6:	fba3 1302 	umull	r1, r3, r3, r2
 80029ba:	0a9b      	lsrs	r3, r3, #10
 80029bc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d005      	beq.n	80029d6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	3301      	adds	r3, #1
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	e001      	b.n	80029d6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80029d2:	2301      	movs	r3, #1
 80029d4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d11c      	bne.n	8002a16 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80029ea:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80029f6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a06:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a14:	e04b      	b.n	8002aae <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	e044      	b.n	8002aa6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a2a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d107      	bne.n	8002a42 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a40:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002a4a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d116      	bne.n	8002a84 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002a64:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	4a25      	ldr	r2, [pc, #148]	; (8002b00 <HAL_ETH_TransmitFrame+0x1d0>)
 8002a6a:	fb02 f203 	mul.w	r2, r2, r3
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	4413      	add	r3, r2
 8002a72:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002a76:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002a82:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a92:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d3b6      	bcc.n	8002a1c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab6:	3314      	adds	r3, #20
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00d      	beq.n	8002ade <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aca:	3314      	adds	r3, #20
 8002acc:	2204      	movs	r2, #4
 8002ace:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad8:	3304      	adds	r3, #4
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	371c      	adds	r7, #28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	ac02b00b 	.word	0xac02b00b
 8002b00:	fffffa0c 	.word	0xfffffa0c

08002b04 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_ETH_GetReceivedFrame+0x1a>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e070      	b.n	8002c00 <HAL_ETH_GetReceivedFrame+0xfc>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	db5a      	blt.n	8002bee <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d030      	beq.n	8002ba8 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d103      	bne.n	8002b60 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	0c1b      	lsrs	r3, r3, #16
 8002b70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002b74:	3b04      	subs	r3, #4
 8002b76:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e02b      	b.n	8002c00 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d010      	beq.n	8002bd8 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	629a      	str	r2, [r3, #40]	; 0x28
 8002bd6:	e00a      	b.n	8002bee <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	461a      	mov	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	460b      	mov	r3, r1
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b82      	cmp	r3, #130	; 0x82
 8002c2c:	d101      	bne.n	8002c32 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e050      	b.n	8002cd4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2282      	movs	r2, #130	; 0x82
 8002c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f003 031c 	and.w	r3, r3, #28
 8002c48:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8a1b      	ldrh	r3, [r3, #16]
 8002c4e:	02db      	lsls	r3, r3, #11
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002c58:	897b      	ldrh	r3, [r7, #10]
 8002c5a:	019b      	lsls	r3, r3, #6
 8002c5c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f023 0302 	bic.w	r3, r3, #2
 8002c6c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002c7e:	f7ff facf 	bl	8002220 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c84:	e015      	b.n	8002cb2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002c86:	f7ff facb 	bl	8002220 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c94:	d309      	bcc.n	8002caa <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e014      	b.n	8002cd4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e4      	bne.n	8002c86 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b42      	cmp	r3, #66	; 0x42
 8002cfc:	d101      	bne.n	8002d02 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e04e      	b.n	8002da0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2242      	movs	r2, #66	; 0x42
 8002d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f003 031c 	and.w	r3, r3, #28
 8002d18:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8a1b      	ldrh	r3, [r3, #16]
 8002d1e:	02db      	lsls	r3, r3, #11
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002d28:	897b      	ldrh	r3, [r7, #10]
 8002d2a:	019b      	lsls	r3, r3, #6
 8002d2c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f043 0302 	orr.w	r3, r3, #2
 8002d3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d58:	f7ff fa62 	bl	8002220 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d5e:	e015      	b.n	8002d8c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002d60:	f7ff fa5e 	bl	8002220 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6e:	d309      	bcc.n	8002d84 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e00d      	b.n	8002da0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e4      	bne.n	8002d60 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_ETH_Start+0x16>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e01f      	b.n	8002dfe <HAL_ETH_Start+0x56>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fb44 	bl	800345c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 fb7b 	bl	80034d0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fc12 	bl	8003604 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fbaf 	bl	8003544 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fbdc 	bl	80035a4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_ETH_Stop+0x16>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e01f      	b.n	8002e5c <HAL_ETH_Stop+0x56>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fba1 	bl	8003574 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fbce 	bl	80035d4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fb66 	bl	800350a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fbe0 	bl	8003604 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fb26 	bl	8003496 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_ETH_ConfigMAC+0x1c>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e0e4      	b.n	800304a <HAL_ETH_ConfigMAC+0x1e6>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80b1 	beq.w	8002ffa <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4b6c      	ldr	r3, [pc, #432]	; (8003054 <HAL_ETH_ConfigMAC+0x1f0>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002eb0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002eb6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002ebc:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002ec2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002ec8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002ece:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002ed4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002eda:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002ee0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002ee6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002eec:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002ef2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	f7ff f994 	bl	8002238 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002f20:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002f26:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002f2c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002f32:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002f38:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002f3e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002f4a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002f4c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f56:	2001      	movs	r0, #1
 8002f58:	f7ff f96e 	bl	8002238 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f6c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f76:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002f86:	4013      	ands	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002f94:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002f9a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002fa0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002fa6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002fac:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	f7ff f937 	bl	8002238 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fea:	2001      	movs	r0, #1
 8002fec:	f7ff f924 	bl	8002238 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	61da      	str	r2, [r3, #28]
 8002ff8:	e01e      	b.n	8003038 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003008:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800302a:	2001      	movs	r0, #1
 800302c:	f7ff f904 	bl	8002238 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	ff20810f 	.word	0xff20810f

08003058 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b0b0      	sub	sp, #192	; 0xc0
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d007      	beq.n	800307e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003074:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800307c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800307e:	2300      	movs	r3, #0
 8003080:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003082:	2300      	movs	r3, #0
 8003084:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003086:	2300      	movs	r3, #0
 8003088:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800308a:	2300      	movs	r3, #0
 800308c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800308e:	2300      	movs	r3, #0
 8003090:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003092:	2300      	movs	r3, #0
 8003094:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800309e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030a2:	663b      	str	r3, [r7, #96]	; 0x60
 80030a4:	e001      	b.n	80030aa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80030aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030ae:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80030b4:	2300      	movs	r3, #0
 80030b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80030bc:	2300      	movs	r3, #0
 80030be:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80030c4:	2340      	movs	r3, #64	; 0x40
 80030c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80030da:	2300      	movs	r3, #0
 80030dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80030e0:	2300      	movs	r3, #0
 80030e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80030fe:	2300      	movs	r3, #0
 8003100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003104:	2300      	movs	r3, #0
 8003106:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800310a:	2300      	movs	r3, #0
 800310c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003110:	2300      	movs	r3, #0
 8003112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003116:	2300      	movs	r3, #0
 8003118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800311c:	2300      	movs	r3, #0
 800311e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800312c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003130:	4bac      	ldr	r3, [pc, #688]	; (80033e4 <ETH_MACDMAConfig+0x38c>)
 8003132:	4013      	ands	r3, r2
 8003134:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003138:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800313a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800313c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800313e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003140:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003144:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800314a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800314c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800314e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003152:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003158:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800315a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800315c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800315e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003160:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003164:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003168:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800316a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800316c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800316e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003180:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800318c:	2001      	movs	r0, #1
 800318e:	f7ff f853 	bl	8002238 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800319a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800319c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800319e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80031a0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80031a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80031a4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80031a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80031aa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80031ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80031b0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80031b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80031b6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80031b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80031bc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80031c0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80031c8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80031ca:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80031d6:	2001      	movs	r0, #1
 80031d8:	f7ff f82e 	bl	8002238 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80031e4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031ee:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80031f8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003204:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003208:	f64f 7341 	movw	r3, #65345	; 0xff41
 800320c:	4013      	ands	r3, r2
 800320e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003212:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003216:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003218:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800321c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800321e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003222:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003224:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003228:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800322a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800322e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003234:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003236:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003248:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003254:	2001      	movs	r0, #1
 8003256:	f7fe ffef 	bl	8002238 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003262:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003264:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003268:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800327e:	2001      	movs	r0, #1
 8003280:	f7fe ffda 	bl	8002238 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800328c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003296:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800329c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032a0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80032aa:	2300      	movs	r3, #0
 80032ac:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80032ae:	2300      	movs	r3, #0
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80032b2:	2304      	movs	r3, #4
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80032b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80032bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032c0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80032c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032c6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80032c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032cc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80032d6:	2300      	movs	r3, #0
 80032d8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032e2:	3318      	adds	r3, #24
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80032ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032ee:	4b3e      	ldr	r3, [pc, #248]	; (80033e8 <ETH_MACDMAConfig+0x390>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80032f6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80032f8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80032fa:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80032fc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80032fe:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003300:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003302:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003304:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003306:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003308:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800330a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800330c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800330e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003312:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003316:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003318:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800332a:	3318      	adds	r3, #24
 800332c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003330:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800333a:	3318      	adds	r3, #24
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003342:	2001      	movs	r0, #1
 8003344:	f7fe ff78 	bl	8002238 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003350:	3318      	adds	r3, #24
 8003352:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003356:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800335c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800335e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003360:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003364:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003368:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800336a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800336c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800336e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003372:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800337c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003380:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003390:	2001      	movs	r0, #1
 8003392:	f7fe ff51 	bl	8002238 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800339e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033a2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d10f      	bne.n	80033cc <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033b4:	331c      	adds	r3, #28
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033c8:	331c      	adds	r3, #28
 80033ca:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	461a      	mov	r2, r3
 80033d2:	2100      	movs	r1, #0
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f809 	bl	80033ec <ETH_MACAddressConfig>
}
 80033da:	bf00      	nop
 80033dc:	37c0      	adds	r7, #192	; 0xc0
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	ff20810f 	.word	0xff20810f
 80033e8:	f8de3f23 	.word	0xf8de3f23

080033ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3305      	adds	r3, #5
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	021b      	lsls	r3, r3, #8
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	3204      	adds	r2, #4
 8003404:	7812      	ldrb	r2, [r2, #0]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	4b11      	ldr	r3, [pc, #68]	; (8003454 <ETH_MACAddressConfig+0x68>)
 800340e:	4413      	add	r3, r2
 8003410:	461a      	mov	r2, r3
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3303      	adds	r3, #3
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	061a      	lsls	r2, r3, #24
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3302      	adds	r3, #2
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	041b      	lsls	r3, r3, #16
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3301      	adds	r3, #1
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	4313      	orrs	r3, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	7812      	ldrb	r2, [r2, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <ETH_MACAddressConfig+0x6c>)
 800343e:	4413      	add	r3, r2
 8003440:	461a      	mov	r2, r3
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	6013      	str	r3, [r2, #0]
}
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40028040 	.word	0x40028040
 8003458:	40028044 	.word	0x40028044

0800345c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0208 	orr.w	r2, r2, #8
 8003476:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003480:	2001      	movs	r0, #1
 8003482:	f000 f8e9 	bl	8003658 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	601a      	str	r2, [r3, #0]
}
 800348e:	bf00      	nop
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003496:	b580      	push	{r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0208 	bic.w	r2, r2, #8
 80034b0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80034ba:	2001      	movs	r0, #1
 80034bc:	f000 f8cc 	bl	8003658 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	601a      	str	r2, [r3, #0]
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0204 	orr.w	r2, r2, #4
 80034ea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80034f4:	2001      	movs	r0, #1
 80034f6:	f000 f8af 	bl	8003658 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	601a      	str	r2, [r3, #0]
}
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0204 	bic.w	r2, r2, #4
 8003524:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800352e:	2001      	movs	r0, #1
 8003530:	f000 f892 	bl	8003658 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	601a      	str	r2, [r3, #0]
}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003554:	3318      	adds	r3, #24
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003564:	3318      	adds	r3, #24
 8003566:	601a      	str	r2, [r3, #0]
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003584:	3318      	adds	r3, #24
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003594:	3318      	adds	r3, #24
 8003596:	601a      	str	r2, [r3, #0]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b4:	3318      	adds	r3, #24
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0202 	orr.w	r2, r2, #2
 80035c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c4:	3318      	adds	r3, #24
 80035c6:	601a      	str	r2, [r3, #0]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e4:	3318      	adds	r3, #24
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0202 	bic.w	r2, r2, #2
 80035f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f4:	3318      	adds	r3, #24
 80035f6:	601a      	str	r2, [r3, #0]
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003618:	3318      	adds	r3, #24
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003628:	3318      	adds	r3, #24
 800362a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003634:	3318      	adds	r3, #24
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800363a:	2001      	movs	r0, #1
 800363c:	f000 f80c 	bl	8003658 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800364a:	3318      	adds	r3, #24
 800364c:	601a      	str	r2, [r3, #0]
}
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003660:	4b0a      	ldr	r3, [pc, #40]	; (800368c <ETH_Delay+0x34>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <ETH_Delay+0x38>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	0a5b      	lsrs	r3, r3, #9
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003674:	bf00      	nop
  } 
  while (Delay --);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1e5a      	subs	r2, r3, #1
 800367a:	60fa      	str	r2, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f9      	bne.n	8003674 <ETH_Delay+0x1c>
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	20000004 	.word	0x20000004
 8003690:	10624dd3 	.word	0x10624dd3

08003694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003694:	b480      	push	{r7}
 8003696:	b089      	sub	sp, #36	; 0x24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	e16b      	b.n	8003988 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036b0:	2201      	movs	r2, #1
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	f040 815a 	bne.w	8003982 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d00b      	beq.n	80036ee <HAL_GPIO_Init+0x5a>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d007      	beq.n	80036ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036e2:	2b11      	cmp	r3, #17
 80036e4:	d003      	beq.n	80036ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b12      	cmp	r3, #18
 80036ec:	d130      	bne.n	8003750 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	2203      	movs	r2, #3
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4013      	ands	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003724:	2201      	movs	r2, #1
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	43db      	mvns	r3, r3
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4013      	ands	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 0201 	and.w	r2, r3, #1
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	2203      	movs	r2, #3
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d003      	beq.n	8003790 <HAL_GPIO_Init+0xfc>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b12      	cmp	r3, #18
 800378e:	d123      	bne.n	80037d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	08da      	lsrs	r2, r3, #3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3208      	adds	r2, #8
 8003798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	220f      	movs	r2, #15
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	08da      	lsrs	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3208      	adds	r2, #8
 80037d2:	69b9      	ldr	r1, [r7, #24]
 80037d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	2203      	movs	r2, #3
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0203 	and.w	r2, r3, #3
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80b4 	beq.w	8003982 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	4b5f      	ldr	r3, [pc, #380]	; (800399c <HAL_GPIO_Init+0x308>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	4a5e      	ldr	r2, [pc, #376]	; (800399c <HAL_GPIO_Init+0x308>)
 8003824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003828:	6453      	str	r3, [r2, #68]	; 0x44
 800382a:	4b5c      	ldr	r3, [pc, #368]	; (800399c <HAL_GPIO_Init+0x308>)
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003836:	4a5a      	ldr	r2, [pc, #360]	; (80039a0 <HAL_GPIO_Init+0x30c>)
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	089b      	lsrs	r3, r3, #2
 800383c:	3302      	adds	r3, #2
 800383e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	220f      	movs	r2, #15
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a51      	ldr	r2, [pc, #324]	; (80039a4 <HAL_GPIO_Init+0x310>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d02b      	beq.n	80038ba <HAL_GPIO_Init+0x226>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a50      	ldr	r2, [pc, #320]	; (80039a8 <HAL_GPIO_Init+0x314>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d025      	beq.n	80038b6 <HAL_GPIO_Init+0x222>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a4f      	ldr	r2, [pc, #316]	; (80039ac <HAL_GPIO_Init+0x318>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d01f      	beq.n	80038b2 <HAL_GPIO_Init+0x21e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a4e      	ldr	r2, [pc, #312]	; (80039b0 <HAL_GPIO_Init+0x31c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d019      	beq.n	80038ae <HAL_GPIO_Init+0x21a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a4d      	ldr	r2, [pc, #308]	; (80039b4 <HAL_GPIO_Init+0x320>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d013      	beq.n	80038aa <HAL_GPIO_Init+0x216>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a4c      	ldr	r2, [pc, #304]	; (80039b8 <HAL_GPIO_Init+0x324>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00d      	beq.n	80038a6 <HAL_GPIO_Init+0x212>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a4b      	ldr	r2, [pc, #300]	; (80039bc <HAL_GPIO_Init+0x328>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d007      	beq.n	80038a2 <HAL_GPIO_Init+0x20e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a4a      	ldr	r2, [pc, #296]	; (80039c0 <HAL_GPIO_Init+0x32c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d101      	bne.n	800389e <HAL_GPIO_Init+0x20a>
 800389a:	2307      	movs	r3, #7
 800389c:	e00e      	b.n	80038bc <HAL_GPIO_Init+0x228>
 800389e:	2308      	movs	r3, #8
 80038a0:	e00c      	b.n	80038bc <HAL_GPIO_Init+0x228>
 80038a2:	2306      	movs	r3, #6
 80038a4:	e00a      	b.n	80038bc <HAL_GPIO_Init+0x228>
 80038a6:	2305      	movs	r3, #5
 80038a8:	e008      	b.n	80038bc <HAL_GPIO_Init+0x228>
 80038aa:	2304      	movs	r3, #4
 80038ac:	e006      	b.n	80038bc <HAL_GPIO_Init+0x228>
 80038ae:	2303      	movs	r3, #3
 80038b0:	e004      	b.n	80038bc <HAL_GPIO_Init+0x228>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e002      	b.n	80038bc <HAL_GPIO_Init+0x228>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <HAL_GPIO_Init+0x228>
 80038ba:	2300      	movs	r3, #0
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	f002 0203 	and.w	r2, r2, #3
 80038c2:	0092      	lsls	r2, r2, #2
 80038c4:	4093      	lsls	r3, r2
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038cc:	4934      	ldr	r1, [pc, #208]	; (80039a0 <HAL_GPIO_Init+0x30c>)
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	089b      	lsrs	r3, r3, #2
 80038d2:	3302      	adds	r3, #2
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038da:	4b3a      	ldr	r3, [pc, #232]	; (80039c4 <HAL_GPIO_Init+0x330>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	43db      	mvns	r3, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4013      	ands	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038fe:	4a31      	ldr	r2, [pc, #196]	; (80039c4 <HAL_GPIO_Init+0x330>)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003904:	4b2f      	ldr	r3, [pc, #188]	; (80039c4 <HAL_GPIO_Init+0x330>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003928:	4a26      	ldr	r2, [pc, #152]	; (80039c4 <HAL_GPIO_Init+0x330>)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800392e:	4b25      	ldr	r3, [pc, #148]	; (80039c4 <HAL_GPIO_Init+0x330>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	43db      	mvns	r3, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4013      	ands	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003952:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <HAL_GPIO_Init+0x330>)
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003958:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <HAL_GPIO_Init+0x330>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800397c:	4a11      	ldr	r2, [pc, #68]	; (80039c4 <HAL_GPIO_Init+0x330>)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3301      	adds	r3, #1
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b0f      	cmp	r3, #15
 800398c:	f67f ae90 	bls.w	80036b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003990:	bf00      	nop
 8003992:	3724      	adds	r7, #36	; 0x24
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40023800 	.word	0x40023800
 80039a0:	40013800 	.word	0x40013800
 80039a4:	40020000 	.word	0x40020000
 80039a8:	40020400 	.word	0x40020400
 80039ac:	40020800 	.word	0x40020800
 80039b0:	40020c00 	.word	0x40020c00
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40021400 	.word	0x40021400
 80039bc:	40021800 	.word	0x40021800
 80039c0:	40021c00 	.word	0x40021c00
 80039c4:	40013c00 	.word	0x40013c00

080039c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	807b      	strh	r3, [r7, #2]
 80039d4:	4613      	mov	r3, r2
 80039d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039d8:	787b      	ldrb	r3, [r7, #1]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039de:	887a      	ldrh	r2, [r7, #2]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039e4:	e003      	b.n	80039ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039e6:	887b      	ldrh	r3, [r7, #2]
 80039e8:	041a      	lsls	r2, r3, #16
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	619a      	str	r2, [r3, #24]
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e25b      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d075      	beq.n	8003b06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a1a:	4ba3      	ldr	r3, [pc, #652]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d00c      	beq.n	8003a40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a26:	4ba0      	ldr	r3, [pc, #640]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d112      	bne.n	8003a58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a32:	4b9d      	ldr	r3, [pc, #628]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3e:	d10b      	bne.n	8003a58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a40:	4b99      	ldr	r3, [pc, #612]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d05b      	beq.n	8003b04 <HAL_RCC_OscConfig+0x108>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d157      	bne.n	8003b04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e236      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a60:	d106      	bne.n	8003a70 <HAL_RCC_OscConfig+0x74>
 8003a62:	4b91      	ldr	r3, [pc, #580]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a90      	ldr	r2, [pc, #576]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e01d      	b.n	8003aac <HAL_RCC_OscConfig+0xb0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x98>
 8003a7a:	4b8b      	ldr	r3, [pc, #556]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a8a      	ldr	r2, [pc, #552]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	4b88      	ldr	r3, [pc, #544]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a87      	ldr	r2, [pc, #540]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e00b      	b.n	8003aac <HAL_RCC_OscConfig+0xb0>
 8003a94:	4b84      	ldr	r3, [pc, #528]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a83      	ldr	r2, [pc, #524]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	4b81      	ldr	r3, [pc, #516]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a80      	ldr	r2, [pc, #512]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d013      	beq.n	8003adc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7fe fbb4 	bl	8002220 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003abc:	f7fe fbb0 	bl	8002220 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	; 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e1fb      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	4b76      	ldr	r3, [pc, #472]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0xc0>
 8003ada:	e014      	b.n	8003b06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003adc:	f7fe fba0 	bl	8002220 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7fe fb9c 	bl	8002220 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	; 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e1e7      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af6:	4b6c      	ldr	r3, [pc, #432]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0xe8>
 8003b02:	e000      	b.n	8003b06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d063      	beq.n	8003bda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b12:	4b65      	ldr	r3, [pc, #404]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b1e:	4b62      	ldr	r3, [pc, #392]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d11c      	bne.n	8003b64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b2a:	4b5f      	ldr	r3, [pc, #380]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d116      	bne.n	8003b64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b36:	4b5c      	ldr	r3, [pc, #368]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <HAL_RCC_OscConfig+0x152>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d001      	beq.n	8003b4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e1bb      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4e:	4b56      	ldr	r3, [pc, #344]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4952      	ldr	r1, [pc, #328]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b62:	e03a      	b.n	8003bda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d020      	beq.n	8003bae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b6c:	4b4f      	ldr	r3, [pc, #316]	; (8003cac <HAL_RCC_OscConfig+0x2b0>)
 8003b6e:	2201      	movs	r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b72:	f7fe fb55 	bl	8002220 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b7a:	f7fe fb51 	bl	8002220 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e19c      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8c:	4b46      	ldr	r3, [pc, #280]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b98:	4b43      	ldr	r3, [pc, #268]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4940      	ldr	r1, [pc, #256]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	600b      	str	r3, [r1, #0]
 8003bac:	e015      	b.n	8003bda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bae:	4b3f      	ldr	r3, [pc, #252]	; (8003cac <HAL_RCC_OscConfig+0x2b0>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb4:	f7fe fb34 	bl	8002220 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bbc:	f7fe fb30 	bl	8002220 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e17b      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bce:	4b36      	ldr	r3, [pc, #216]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d030      	beq.n	8003c48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d016      	beq.n	8003c1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bee:	4b30      	ldr	r3, [pc, #192]	; (8003cb0 <HAL_RCC_OscConfig+0x2b4>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf4:	f7fe fb14 	bl	8002220 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bfc:	f7fe fb10 	bl	8002220 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e15b      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0e:	4b26      	ldr	r3, [pc, #152]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0x200>
 8003c1a:	e015      	b.n	8003c48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c1c:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <HAL_RCC_OscConfig+0x2b4>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c22:	f7fe fafd 	bl	8002220 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c2a:	f7fe faf9 	bl	8002220 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e144      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f0      	bne.n	8003c2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80a0 	beq.w	8003d96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c56:	2300      	movs	r3, #0
 8003c58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c5a:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10f      	bne.n	8003c86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c66:	2300      	movs	r3, #0
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c74:	6413      	str	r3, [r2, #64]	; 0x40
 8003c76:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c82:	2301      	movs	r3, #1
 8003c84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_RCC_OscConfig+0x2b8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d121      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c92:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <HAL_RCC_OscConfig+0x2b8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a07      	ldr	r2, [pc, #28]	; (8003cb4 <HAL_RCC_OscConfig+0x2b8>)
 8003c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9e:	f7fe fabf 	bl	8002220 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca4:	e011      	b.n	8003cca <HAL_RCC_OscConfig+0x2ce>
 8003ca6:	bf00      	nop
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	42470000 	.word	0x42470000
 8003cb0:	42470e80 	.word	0x42470e80
 8003cb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb8:	f7fe fab2 	bl	8002220 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e0fd      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cca:	4b81      	ldr	r3, [pc, #516]	; (8003ed0 <HAL_RCC_OscConfig+0x4d4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d106      	bne.n	8003cec <HAL_RCC_OscConfig+0x2f0>
 8003cde:	4b7d      	ldr	r3, [pc, #500]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	4a7c      	ldr	r2, [pc, #496]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cea:	e01c      	b.n	8003d26 <HAL_RCC_OscConfig+0x32a>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b05      	cmp	r3, #5
 8003cf2:	d10c      	bne.n	8003d0e <HAL_RCC_OscConfig+0x312>
 8003cf4:	4b77      	ldr	r3, [pc, #476]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	4a76      	ldr	r2, [pc, #472]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003cfa:	f043 0304 	orr.w	r3, r3, #4
 8003cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003d00:	4b74      	ldr	r3, [pc, #464]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	4a73      	ldr	r2, [pc, #460]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0c:	e00b      	b.n	8003d26 <HAL_RCC_OscConfig+0x32a>
 8003d0e:	4b71      	ldr	r3, [pc, #452]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	4a70      	ldr	r2, [pc, #448]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1a:	4b6e      	ldr	r3, [pc, #440]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1e:	4a6d      	ldr	r2, [pc, #436]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003d20:	f023 0304 	bic.w	r3, r3, #4
 8003d24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d015      	beq.n	8003d5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7fe fa77 	bl	8002220 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d34:	e00a      	b.n	8003d4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d36:	f7fe fa73 	bl	8002220 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e0bc      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4c:	4b61      	ldr	r3, [pc, #388]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0ee      	beq.n	8003d36 <HAL_RCC_OscConfig+0x33a>
 8003d58:	e014      	b.n	8003d84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5a:	f7fe fa61 	bl	8002220 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d60:	e00a      	b.n	8003d78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fe fa5d 	bl	8002220 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e0a6      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d78:	4b56      	ldr	r3, [pc, #344]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1ee      	bne.n	8003d62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d105      	bne.n	8003d96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8a:	4b52      	ldr	r3, [pc, #328]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	4a51      	ldr	r2, [pc, #324]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8092 	beq.w	8003ec4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003da0:	4b4c      	ldr	r3, [pc, #304]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 030c 	and.w	r3, r3, #12
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d05c      	beq.n	8003e66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d141      	bne.n	8003e38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db4:	4b48      	ldr	r3, [pc, #288]	; (8003ed8 <HAL_RCC_OscConfig+0x4dc>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dba:	f7fe fa31 	bl	8002220 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc2:	f7fe fa2d 	bl	8002220 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e078      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd4:	4b3f      	ldr	r3, [pc, #252]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	019b      	lsls	r3, r3, #6
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	041b      	lsls	r3, r3, #16
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	061b      	lsls	r3, r3, #24
 8003e04:	4933      	ldr	r1, [pc, #204]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e0a:	4b33      	ldr	r3, [pc, #204]	; (8003ed8 <HAL_RCC_OscConfig+0x4dc>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7fe fa06 	bl	8002220 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e18:	f7fe fa02 	bl	8002220 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e04d      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e2a:	4b2a      	ldr	r3, [pc, #168]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x41c>
 8003e36:	e045      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e38:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <HAL_RCC_OscConfig+0x4dc>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3e:	f7fe f9ef 	bl	8002220 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e46:	f7fe f9eb 	bl	8002220 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e036      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e58:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f0      	bne.n	8003e46 <HAL_RCC_OscConfig+0x44a>
 8003e64:	e02e      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e029      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e72:	4b18      	ldr	r3, [pc, #96]	; (8003ed4 <HAL_RCC_OscConfig+0x4d8>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d11c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d115      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d10d      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d106      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40007000 	.word	0x40007000
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	42470060 	.word	0x42470060

08003edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0cc      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef0:	4b68      	ldr	r3, [pc, #416]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d90c      	bls.n	8003f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efe:	4b65      	ldr	r3, [pc, #404]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f06:	4b63      	ldr	r3, [pc, #396]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d001      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0b8      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d020      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f30:	4b59      	ldr	r3, [pc, #356]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a58      	ldr	r2, [pc, #352]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f48:	4b53      	ldr	r3, [pc, #332]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4a52      	ldr	r2, [pc, #328]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f54:	4b50      	ldr	r3, [pc, #320]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	494d      	ldr	r1, [pc, #308]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d044      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7a:	4b47      	ldr	r3, [pc, #284]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d119      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e07f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d003      	beq.n	8003f9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9a:	4b3f      	ldr	r3, [pc, #252]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e06f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003faa:	4b3b      	ldr	r3, [pc, #236]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e067      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fba:	4b37      	ldr	r3, [pc, #220]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f023 0203 	bic.w	r2, r3, #3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4934      	ldr	r1, [pc, #208]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fcc:	f7fe f928 	bl	8002220 <HAL_GetTick>
 8003fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd2:	e00a      	b.n	8003fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd4:	f7fe f924 	bl	8002220 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e04f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fea:	4b2b      	ldr	r3, [pc, #172]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 020c 	and.w	r2, r3, #12
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d1eb      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b25      	ldr	r3, [pc, #148]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d20c      	bcs.n	8004024 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b22      	ldr	r3, [pc, #136]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004012:	4b20      	ldr	r3, [pc, #128]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e032      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004030:	4b19      	ldr	r3, [pc, #100]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4916      	ldr	r1, [pc, #88]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800404e:	4b12      	ldr	r3, [pc, #72]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	490e      	ldr	r1, [pc, #56]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	4313      	orrs	r3, r2
 8004060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004062:	f000 f821 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 8004066:	4601      	mov	r1, r0
 8004068:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	4a0a      	ldr	r2, [pc, #40]	; (800409c <HAL_RCC_ClockConfig+0x1c0>)
 8004074:	5cd3      	ldrb	r3, [r2, r3]
 8004076:	fa21 f303 	lsr.w	r3, r1, r3
 800407a:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe f888 	bl	8002198 <HAL_InitTick>

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40023c00 	.word	0x40023c00
 8004098:	40023800 	.word	0x40023800
 800409c:	080164c4 	.word	0x080164c4
 80040a0:	20000004 	.word	0x20000004
 80040a4:	20000028 	.word	0x20000028

080040a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	607b      	str	r3, [r7, #4]
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	2300      	movs	r3, #0
 80040b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040be:	4b63      	ldr	r3, [pc, #396]	; (800424c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d007      	beq.n	80040da <HAL_RCC_GetSysClockFreq+0x32>
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d008      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0x38>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f040 80b4 	bne.w	800423c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040d4:	4b5e      	ldr	r3, [pc, #376]	; (8004250 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040d6:	60bb      	str	r3, [r7, #8]
       break;
 80040d8:	e0b3      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040da:	4b5e      	ldr	r3, [pc, #376]	; (8004254 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80040dc:	60bb      	str	r3, [r7, #8]
      break;
 80040de:	e0b0      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e0:	4b5a      	ldr	r3, [pc, #360]	; (800424c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ea:	4b58      	ldr	r3, [pc, #352]	; (800424c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d04a      	beq.n	800418c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f6:	4b55      	ldr	r3, [pc, #340]	; (800424c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	099b      	lsrs	r3, r3, #6
 80040fc:	f04f 0400 	mov.w	r4, #0
 8004100:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	ea03 0501 	and.w	r5, r3, r1
 800410c:	ea04 0602 	and.w	r6, r4, r2
 8004110:	4629      	mov	r1, r5
 8004112:	4632      	mov	r2, r6
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	f04f 0400 	mov.w	r4, #0
 800411c:	0154      	lsls	r4, r2, #5
 800411e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004122:	014b      	lsls	r3, r1, #5
 8004124:	4619      	mov	r1, r3
 8004126:	4622      	mov	r2, r4
 8004128:	1b49      	subs	r1, r1, r5
 800412a:	eb62 0206 	sbc.w	r2, r2, r6
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	f04f 0400 	mov.w	r4, #0
 8004136:	0194      	lsls	r4, r2, #6
 8004138:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800413c:	018b      	lsls	r3, r1, #6
 800413e:	1a5b      	subs	r3, r3, r1
 8004140:	eb64 0402 	sbc.w	r4, r4, r2
 8004144:	f04f 0100 	mov.w	r1, #0
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	00e2      	lsls	r2, r4, #3
 800414e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004152:	00d9      	lsls	r1, r3, #3
 8004154:	460b      	mov	r3, r1
 8004156:	4614      	mov	r4, r2
 8004158:	195b      	adds	r3, r3, r5
 800415a:	eb44 0406 	adc.w	r4, r4, r6
 800415e:	f04f 0100 	mov.w	r1, #0
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	0262      	lsls	r2, r4, #9
 8004168:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800416c:	0259      	lsls	r1, r3, #9
 800416e:	460b      	mov	r3, r1
 8004170:	4614      	mov	r4, r2
 8004172:	4618      	mov	r0, r3
 8004174:	4621      	mov	r1, r4
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f04f 0400 	mov.w	r4, #0
 800417c:	461a      	mov	r2, r3
 800417e:	4623      	mov	r3, r4
 8004180:	f7fc f87e 	bl	8000280 <__aeabi_uldivmod>
 8004184:	4603      	mov	r3, r0
 8004186:	460c      	mov	r4, r1
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	e049      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800418c:	4b2f      	ldr	r3, [pc, #188]	; (800424c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	099b      	lsrs	r3, r3, #6
 8004192:	f04f 0400 	mov.w	r4, #0
 8004196:	f240 11ff 	movw	r1, #511	; 0x1ff
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	ea03 0501 	and.w	r5, r3, r1
 80041a2:	ea04 0602 	and.w	r6, r4, r2
 80041a6:	4629      	mov	r1, r5
 80041a8:	4632      	mov	r2, r6
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	f04f 0400 	mov.w	r4, #0
 80041b2:	0154      	lsls	r4, r2, #5
 80041b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041b8:	014b      	lsls	r3, r1, #5
 80041ba:	4619      	mov	r1, r3
 80041bc:	4622      	mov	r2, r4
 80041be:	1b49      	subs	r1, r1, r5
 80041c0:	eb62 0206 	sbc.w	r2, r2, r6
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	f04f 0400 	mov.w	r4, #0
 80041cc:	0194      	lsls	r4, r2, #6
 80041ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041d2:	018b      	lsls	r3, r1, #6
 80041d4:	1a5b      	subs	r3, r3, r1
 80041d6:	eb64 0402 	sbc.w	r4, r4, r2
 80041da:	f04f 0100 	mov.w	r1, #0
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	00e2      	lsls	r2, r4, #3
 80041e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041e8:	00d9      	lsls	r1, r3, #3
 80041ea:	460b      	mov	r3, r1
 80041ec:	4614      	mov	r4, r2
 80041ee:	195b      	adds	r3, r3, r5
 80041f0:	eb44 0406 	adc.w	r4, r4, r6
 80041f4:	f04f 0100 	mov.w	r1, #0
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	02a2      	lsls	r2, r4, #10
 80041fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004202:	0299      	lsls	r1, r3, #10
 8004204:	460b      	mov	r3, r1
 8004206:	4614      	mov	r4, r2
 8004208:	4618      	mov	r0, r3
 800420a:	4621      	mov	r1, r4
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f04f 0400 	mov.w	r4, #0
 8004212:	461a      	mov	r2, r3
 8004214:	4623      	mov	r3, r4
 8004216:	f7fc f833 	bl	8000280 <__aeabi_uldivmod>
 800421a:	4603      	mov	r3, r0
 800421c:	460c      	mov	r4, r1
 800421e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	0c1b      	lsrs	r3, r3, #16
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	3301      	adds	r3, #1
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	60bb      	str	r3, [r7, #8]
      break;
 800423a:	e002      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800423c:	4b04      	ldr	r3, [pc, #16]	; (8004250 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800423e:	60bb      	str	r3, [r7, #8]
      break;
 8004240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004242:	68bb      	ldr	r3, [r7, #8]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800424c:	40023800 	.word	0x40023800
 8004250:	00f42400 	.word	0x00f42400
 8004254:	007a1200 	.word	0x007a1200

08004258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800425c:	4b03      	ldr	r3, [pc, #12]	; (800426c <HAL_RCC_GetHCLKFreq+0x14>)
 800425e:	681b      	ldr	r3, [r3, #0]
}
 8004260:	4618      	mov	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000004 	.word	0x20000004

08004270 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e056      	b.n	8004330 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d106      	bne.n	80042a2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7fc ff8d 	bl	80011bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2202      	movs	r2, #2
 80042a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	ea42 0103 	orr.w	r1, r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	0c1b      	lsrs	r3, r3, #16
 8004300:	f003 0104 	and.w	r1, r3, #4
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69da      	ldr	r2, [r3, #28]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800431e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_SPI_Transmit+0x22>
 8004356:	2302      	movs	r3, #2
 8004358:	e11e      	b.n	8004598 <HAL_SPI_Transmit+0x260>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004362:	f7fd ff5d 	bl	8002220 <HAL_GetTick>
 8004366:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b01      	cmp	r3, #1
 8004376:	d002      	beq.n	800437e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004378:	2302      	movs	r3, #2
 800437a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800437c:	e103      	b.n	8004586 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <HAL_SPI_Transmit+0x52>
 8004384:	88fb      	ldrh	r3, [r7, #6]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800438e:	e0fa      	b.n	8004586 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2203      	movs	r2, #3
 8004394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	88fa      	ldrh	r2, [r7, #6]
 80043ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d6:	d107      	bne.n	80043e8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b40      	cmp	r3, #64	; 0x40
 80043f4:	d007      	beq.n	8004406 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004404:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800440e:	d14b      	bne.n	80044a8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <HAL_SPI_Transmit+0xe6>
 8004418:	8afb      	ldrh	r3, [r7, #22]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d13e      	bne.n	800449c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	881a      	ldrh	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	1c9a      	adds	r2, r3, #2
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004442:	e02b      	b.n	800449c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b02      	cmp	r3, #2
 8004450:	d112      	bne.n	8004478 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	881a      	ldrh	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	1c9a      	adds	r2, r3, #2
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	86da      	strh	r2, [r3, #54]	; 0x36
 8004476:	e011      	b.n	800449c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004478:	f7fd fed2 	bl	8002220 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d803      	bhi.n	8004490 <HAL_SPI_Transmit+0x158>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448e:	d102      	bne.n	8004496 <HAL_SPI_Transmit+0x15e>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d102      	bne.n	800449c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	77fb      	strb	r3, [r7, #31]
          goto error;
 800449a:	e074      	b.n	8004586 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1ce      	bne.n	8004444 <HAL_SPI_Transmit+0x10c>
 80044a6:	e04c      	b.n	8004542 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <HAL_SPI_Transmit+0x17e>
 80044b0:	8afb      	ldrh	r3, [r7, #22]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d140      	bne.n	8004538 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	330c      	adds	r3, #12
 80044c0:	7812      	ldrb	r2, [r2, #0]
 80044c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044dc:	e02c      	b.n	8004538 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d113      	bne.n	8004514 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	330c      	adds	r3, #12
 80044f6:	7812      	ldrb	r2, [r2, #0]
 80044f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	86da      	strh	r2, [r3, #54]	; 0x36
 8004512:	e011      	b.n	8004538 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004514:	f7fd fe84 	bl	8002220 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d803      	bhi.n	800452c <HAL_SPI_Transmit+0x1f4>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452a:	d102      	bne.n	8004532 <HAL_SPI_Transmit+0x1fa>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004536:	e026      	b.n	8004586 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1cd      	bne.n	80044de <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	6839      	ldr	r1, [r7, #0]
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fa36 	bl	80049b8 <SPI_EndRxTxTransaction>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2220      	movs	r2, #32
 8004556:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004560:	2300      	movs	r3, #0
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	613b      	str	r3, [r7, #16]
 8004574:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	77fb      	strb	r3, [r7, #31]
 8004582:	e000      	b.n	8004586 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004584:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004596:	7ffb      	ldrb	r3, [r7, #31]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3720      	adds	r7, #32
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08c      	sub	sp, #48	; 0x30
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045ae:	2301      	movs	r3, #1
 80045b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_SPI_TransmitReceive+0x26>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e18a      	b.n	80048dc <HAL_SPI_TransmitReceive+0x33c>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045ce:	f7fd fe27 	bl	8002220 <HAL_GetTick>
 80045d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80045e4:	887b      	ldrh	r3, [r7, #2]
 80045e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d00f      	beq.n	8004610 <HAL_SPI_TransmitReceive+0x70>
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045f6:	d107      	bne.n	8004608 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d103      	bne.n	8004608 <HAL_SPI_TransmitReceive+0x68>
 8004600:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004604:	2b04      	cmp	r3, #4
 8004606:	d003      	beq.n	8004610 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004608:	2302      	movs	r3, #2
 800460a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800460e:	e15b      	b.n	80048c8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <HAL_SPI_TransmitReceive+0x82>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_SPI_TransmitReceive+0x82>
 800461c:	887b      	ldrh	r3, [r7, #2]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d103      	bne.n	800462a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004628:	e14e      	b.n	80048c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b04      	cmp	r3, #4
 8004634:	d003      	beq.n	800463e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2205      	movs	r2, #5
 800463a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	887a      	ldrh	r2, [r7, #2]
 800464e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	887a      	ldrh	r2, [r7, #2]
 8004654:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	887a      	ldrh	r2, [r7, #2]
 8004660:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	887a      	ldrh	r2, [r7, #2]
 8004666:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467e:	2b40      	cmp	r3, #64	; 0x40
 8004680:	d007      	beq.n	8004692 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004690:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800469a:	d178      	bne.n	800478e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_SPI_TransmitReceive+0x10a>
 80046a4:	8b7b      	ldrh	r3, [r7, #26]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d166      	bne.n	8004778 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	881a      	ldrh	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	1c9a      	adds	r2, r3, #2
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ce:	e053      	b.n	8004778 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d11b      	bne.n	8004716 <HAL_SPI_TransmitReceive+0x176>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d016      	beq.n	8004716 <HAL_SPI_TransmitReceive+0x176>
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d113      	bne.n	8004716 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	881a      	ldrh	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	1c9a      	adds	r2, r3, #2
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b01      	cmp	r3, #1
 8004722:	d119      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x1b8>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d014      	beq.n	8004758 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	b292      	uxth	r2, r2
 800473a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	1c9a      	adds	r2, r3, #2
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004754:	2301      	movs	r3, #1
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004758:	f7fd fd62 	bl	8002220 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004764:	429a      	cmp	r2, r3
 8004766:	d807      	bhi.n	8004778 <HAL_SPI_TransmitReceive+0x1d8>
 8004768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476e:	d003      	beq.n	8004778 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004776:	e0a7      	b.n	80048c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1a6      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x130>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1a1      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x130>
 800478c:	e07c      	b.n	8004888 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_SPI_TransmitReceive+0x1fc>
 8004796:	8b7b      	ldrh	r3, [r7, #26]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d16b      	bne.n	8004874 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	7812      	ldrb	r2, [r2, #0]
 80047a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047c2:	e057      	b.n	8004874 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d11c      	bne.n	800480c <HAL_SPI_TransmitReceive+0x26c>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d017      	beq.n	800480c <HAL_SPI_TransmitReceive+0x26c>
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d114      	bne.n	800480c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	330c      	adds	r3, #12
 80047ec:	7812      	ldrb	r2, [r2, #0]
 80047ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b01      	cmp	r3, #1
 8004818:	d119      	bne.n	800484e <HAL_SPI_TransmitReceive+0x2ae>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d014      	beq.n	800484e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800484a:	2301      	movs	r3, #1
 800484c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800484e:	f7fd fce7 	bl	8002220 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800485a:	429a      	cmp	r2, r3
 800485c:	d803      	bhi.n	8004866 <HAL_SPI_TransmitReceive+0x2c6>
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004864:	d102      	bne.n	800486c <HAL_SPI_TransmitReceive+0x2cc>
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	2b00      	cmp	r3, #0
 800486a:	d103      	bne.n	8004874 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004872:	e029      	b.n	80048c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1a2      	bne.n	80047c4 <HAL_SPI_TransmitReceive+0x224>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d19d      	bne.n	80047c4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f893 	bl	80049b8 <SPI_EndRxTxTransaction>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d006      	beq.n	80048a6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80048a4:	e010      	b.n	80048c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10b      	bne.n	80048c6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	e000      	b.n	80048c8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80048c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3730      	adds	r7, #48	; 0x30
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048f4:	e04c      	b.n	8004990 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fc:	d048      	beq.n	8004990 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80048fe:	f7fd fc8f 	bl	8002220 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d902      	bls.n	8004914 <SPI_WaitFlagStateUntilTimeout+0x30>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d13d      	bne.n	8004990 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004922:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800492c:	d111      	bne.n	8004952 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004936:	d004      	beq.n	8004942 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004940:	d107      	bne.n	8004952 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004950:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800495a:	d10f      	bne.n	800497c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800497a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e00f      	b.n	80049b0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	4013      	ands	r3, r2
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	429a      	cmp	r2, r3
 800499e:	bf0c      	ite	eq
 80049a0:	2301      	moveq	r3, #1
 80049a2:	2300      	movne	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	461a      	mov	r2, r3
 80049a8:	79fb      	ldrb	r3, [r7, #7]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d1a3      	bne.n	80048f6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049c4:	4b1b      	ldr	r3, [pc, #108]	; (8004a34 <SPI_EndRxTxTransaction+0x7c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <SPI_EndRxTxTransaction+0x80>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	0d5b      	lsrs	r3, r3, #21
 80049d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049d4:	fb02 f303 	mul.w	r3, r2, r3
 80049d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e2:	d112      	bne.n	8004a0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2200      	movs	r2, #0
 80049ec:	2180      	movs	r1, #128	; 0x80
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f7ff ff78 	bl	80048e4 <SPI_WaitFlagStateUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d016      	beq.n	8004a28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fe:	f043 0220 	orr.w	r2, r3, #32
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e00f      	b.n	8004a2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a20:	2b80      	cmp	r3, #128	; 0x80
 8004a22:	d0f2      	beq.n	8004a0a <SPI_EndRxTxTransaction+0x52>
 8004a24:	e000      	b.n	8004a28 <SPI_EndRxTxTransaction+0x70>
        break;
 8004a26:	bf00      	nop
  }

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000004 	.word	0x20000004
 8004a38:	165e9f81 	.word	0x165e9f81

08004a3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004a40:	4904      	ldr	r1, [pc, #16]	; (8004a54 <MX_FATFS_Init+0x18>)
 8004a42:	4805      	ldr	r0, [pc, #20]	; (8004a58 <MX_FATFS_Init+0x1c>)
 8004a44:	f003 f916 	bl	8007c74 <FATFS_LinkDriver>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4b03      	ldr	r3, [pc, #12]	; (8004a5c <MX_FATFS_Init+0x20>)
 8004a4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004a50:	bf00      	nop
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	200035e0 	.word	0x200035e0
 8004a58:	20000030 	.word	0x20000030
 8004a5c:	200035e4 	.word	0x200035e4

08004a60 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004a64:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	4603      	mov	r3, r0
 8004a78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fb ff33 	bl	80008e8 <SD_disk_initialize>
 8004a82:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fc f80b 	bl	8000ab4 <SD_disk_status>
 8004a9e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8004ab8:	7bf8      	ldrb	r0, [r7, #15]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	f7fc f80e 	bl	8000ae0 <SD_disk_read>
 8004ac4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	4603      	mov	r3, r0
 8004adc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8004ade:	7bf8      	ldrb	r0, [r7, #15]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	f7fc f865 	bl	8000bb4 <SD_disk_write>
 8004aea:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	603a      	str	r2, [r7, #0]
 8004afe:	71fb      	strb	r3, [r7, #7]
 8004b00:	460b      	mov	r3, r1
 8004b02:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004b04:	79b9      	ldrb	r1, [r7, #6]
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fc f8d6 	bl	8000cbc <SD_disk_ioctl>
 8004b10:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004b22:	4b8d      	ldr	r3, [pc, #564]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004b24:	22c0      	movs	r2, #192	; 0xc0
 8004b26:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004b28:	4b8b      	ldr	r3, [pc, #556]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004b2a:	22a8      	movs	r2, #168	; 0xa8
 8004b2c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004b2e:	4b8a      	ldr	r3, [pc, #552]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8004b34:	4b88      	ldr	r3, [pc, #544]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004b36:	220a      	movs	r2, #10
 8004b38:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004b3a:	4b88      	ldr	r3, [pc, #544]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004b3c:	22ff      	movs	r2, #255	; 0xff
 8004b3e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004b40:	4b86      	ldr	r3, [pc, #536]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004b42:	22ff      	movs	r2, #255	; 0xff
 8004b44:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004b46:	4b85      	ldr	r3, [pc, #532]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004b48:	22ff      	movs	r2, #255	; 0xff
 8004b4a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004b4c:	4b83      	ldr	r3, [pc, #524]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8004b52:	4b83      	ldr	r3, [pc, #524]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004b58:	4b81      	ldr	r3, [pc, #516]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004b5e:	4b80      	ldr	r3, [pc, #512]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8004b64:	4b7e      	ldr	r3, [pc, #504]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004b6a:	f003 f8c0 	bl	8007cee <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004b6e:	4b7a      	ldr	r3, [pc, #488]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	061a      	lsls	r2, r3, #24
 8004b74:	4b78      	ldr	r3, [pc, #480]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004b76:	785b      	ldrb	r3, [r3, #1]
 8004b78:	041b      	lsls	r3, r3, #16
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	4b76      	ldr	r3, [pc, #472]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004b7e:	789b      	ldrb	r3, [r3, #2]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	4313      	orrs	r3, r2
 8004b84:	4a74      	ldr	r2, [pc, #464]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004b86:	78d2      	ldrb	r2, [r2, #3]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	061a      	lsls	r2, r3, #24
 8004b8c:	4b72      	ldr	r3, [pc, #456]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	0619      	lsls	r1, r3, #24
 8004b92:	4b71      	ldr	r3, [pc, #452]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004b94:	785b      	ldrb	r3, [r3, #1]
 8004b96:	041b      	lsls	r3, r3, #16
 8004b98:	4319      	orrs	r1, r3
 8004b9a:	4b6f      	ldr	r3, [pc, #444]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004b9c:	789b      	ldrb	r3, [r3, #2]
 8004b9e:	021b      	lsls	r3, r3, #8
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	496d      	ldr	r1, [pc, #436]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004ba4:	78c9      	ldrb	r1, [r1, #3]
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	4b69      	ldr	r3, [pc, #420]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	0619      	lsls	r1, r3, #24
 8004bb6:	4b68      	ldr	r3, [pc, #416]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004bb8:	785b      	ldrb	r3, [r3, #1]
 8004bba:	041b      	lsls	r3, r3, #16
 8004bbc:	4319      	orrs	r1, r3
 8004bbe:	4b66      	ldr	r3, [pc, #408]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004bc0:	789b      	ldrb	r3, [r3, #2]
 8004bc2:	021b      	lsls	r3, r3, #8
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	4964      	ldr	r1, [pc, #400]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004bc8:	78c9      	ldrb	r1, [r1, #3]
 8004bca:	430b      	orrs	r3, r1
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	4b60      	ldr	r3, [pc, #384]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	0619      	lsls	r1, r3, #24
 8004bda:	4b5f      	ldr	r3, [pc, #380]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004bdc:	785b      	ldrb	r3, [r3, #1]
 8004bde:	041b      	lsls	r3, r3, #16
 8004be0:	4319      	orrs	r1, r3
 8004be2:	4b5d      	ldr	r3, [pc, #372]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004be4:	789b      	ldrb	r3, [r3, #2]
 8004be6:	021b      	lsls	r3, r3, #8
 8004be8:	430b      	orrs	r3, r1
 8004bea:	495b      	ldr	r1, [pc, #364]	; (8004d58 <MX_LWIP_Init+0x23c>)
 8004bec:	78c9      	ldrb	r1, [r1, #3]
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	0e1b      	lsrs	r3, r3, #24
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	4a5b      	ldr	r2, [pc, #364]	; (8004d64 <MX_LWIP_Init+0x248>)
 8004bf6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004bf8:	4b58      	ldr	r3, [pc, #352]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	061a      	lsls	r2, r3, #24
 8004bfe:	4b57      	ldr	r3, [pc, #348]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004c00:	785b      	ldrb	r3, [r3, #1]
 8004c02:	041b      	lsls	r3, r3, #16
 8004c04:	431a      	orrs	r2, r3
 8004c06:	4b55      	ldr	r3, [pc, #340]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004c08:	789b      	ldrb	r3, [r3, #2]
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	4a53      	ldr	r2, [pc, #332]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004c10:	78d2      	ldrb	r2, [r2, #3]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	061a      	lsls	r2, r3, #24
 8004c16:	4b51      	ldr	r3, [pc, #324]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	0619      	lsls	r1, r3, #24
 8004c1c:	4b4f      	ldr	r3, [pc, #316]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004c1e:	785b      	ldrb	r3, [r3, #1]
 8004c20:	041b      	lsls	r3, r3, #16
 8004c22:	4319      	orrs	r1, r3
 8004c24:	4b4d      	ldr	r3, [pc, #308]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004c26:	789b      	ldrb	r3, [r3, #2]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	494b      	ldr	r1, [pc, #300]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004c2e:	78c9      	ldrb	r1, [r1, #3]
 8004c30:	430b      	orrs	r3, r1
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	4b48      	ldr	r3, [pc, #288]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	0619      	lsls	r1, r3, #24
 8004c40:	4b46      	ldr	r3, [pc, #280]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004c42:	785b      	ldrb	r3, [r3, #1]
 8004c44:	041b      	lsls	r3, r3, #16
 8004c46:	4319      	orrs	r1, r3
 8004c48:	4b44      	ldr	r3, [pc, #272]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004c4a:	789b      	ldrb	r3, [r3, #2]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	4942      	ldr	r1, [pc, #264]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004c52:	78c9      	ldrb	r1, [r1, #3]
 8004c54:	430b      	orrs	r3, r1
 8004c56:	0a1b      	lsrs	r3, r3, #8
 8004c58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	4b3f      	ldr	r3, [pc, #252]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	0619      	lsls	r1, r3, #24
 8004c64:	4b3d      	ldr	r3, [pc, #244]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004c66:	785b      	ldrb	r3, [r3, #1]
 8004c68:	041b      	lsls	r3, r3, #16
 8004c6a:	4319      	orrs	r1, r3
 8004c6c:	4b3b      	ldr	r3, [pc, #236]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004c6e:	789b      	ldrb	r3, [r3, #2]
 8004c70:	021b      	lsls	r3, r3, #8
 8004c72:	430b      	orrs	r3, r1
 8004c74:	4939      	ldr	r1, [pc, #228]	; (8004d5c <MX_LWIP_Init+0x240>)
 8004c76:	78c9      	ldrb	r1, [r1, #3]
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	0e1b      	lsrs	r3, r3, #24
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	4a3a      	ldr	r2, [pc, #232]	; (8004d68 <MX_LWIP_Init+0x24c>)
 8004c80:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004c82:	4b37      	ldr	r3, [pc, #220]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	061a      	lsls	r2, r3, #24
 8004c88:	4b35      	ldr	r3, [pc, #212]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004c8a:	785b      	ldrb	r3, [r3, #1]
 8004c8c:	041b      	lsls	r3, r3, #16
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	4b33      	ldr	r3, [pc, #204]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004c92:	789b      	ldrb	r3, [r3, #2]
 8004c94:	021b      	lsls	r3, r3, #8
 8004c96:	4313      	orrs	r3, r2
 8004c98:	4a31      	ldr	r2, [pc, #196]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004c9a:	78d2      	ldrb	r2, [r2, #3]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	061a      	lsls	r2, r3, #24
 8004ca0:	4b2f      	ldr	r3, [pc, #188]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	0619      	lsls	r1, r3, #24
 8004ca6:	4b2e      	ldr	r3, [pc, #184]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004ca8:	785b      	ldrb	r3, [r3, #1]
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	4319      	orrs	r1, r3
 8004cae:	4b2c      	ldr	r3, [pc, #176]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004cb0:	789b      	ldrb	r3, [r3, #2]
 8004cb2:	021b      	lsls	r3, r3, #8
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	492a      	ldr	r1, [pc, #168]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004cb8:	78c9      	ldrb	r1, [r1, #3]
 8004cba:	430b      	orrs	r3, r1
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	4b26      	ldr	r3, [pc, #152]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	0619      	lsls	r1, r3, #24
 8004cca:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004ccc:	785b      	ldrb	r3, [r3, #1]
 8004cce:	041b      	lsls	r3, r3, #16
 8004cd0:	4319      	orrs	r1, r3
 8004cd2:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004cd4:	789b      	ldrb	r3, [r3, #2]
 8004cd6:	021b      	lsls	r3, r3, #8
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	4921      	ldr	r1, [pc, #132]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004cdc:	78c9      	ldrb	r1, [r1, #3]
 8004cde:	430b      	orrs	r3, r1
 8004ce0:	0a1b      	lsrs	r3, r3, #8
 8004ce2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	0619      	lsls	r1, r3, #24
 8004cee:	4b1c      	ldr	r3, [pc, #112]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004cf0:	785b      	ldrb	r3, [r3, #1]
 8004cf2:	041b      	lsls	r3, r3, #16
 8004cf4:	4319      	orrs	r1, r3
 8004cf6:	4b1a      	ldr	r3, [pc, #104]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004cf8:	789b      	ldrb	r3, [r3, #2]
 8004cfa:	021b      	lsls	r3, r3, #8
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	4918      	ldr	r1, [pc, #96]	; (8004d60 <MX_LWIP_Init+0x244>)
 8004d00:	78c9      	ldrb	r1, [r1, #3]
 8004d02:	430b      	orrs	r3, r1
 8004d04:	0e1b      	lsrs	r3, r3, #24
 8004d06:	4313      	orrs	r3, r2
 8004d08:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <MX_LWIP_Init+0x250>)
 8004d0a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004d0c:	4b18      	ldr	r3, [pc, #96]	; (8004d70 <MX_LWIP_Init+0x254>)
 8004d0e:	9302      	str	r3, [sp, #8]
 8004d10:	4b18      	ldr	r3, [pc, #96]	; (8004d74 <MX_LWIP_Init+0x258>)
 8004d12:	9301      	str	r3, [sp, #4]
 8004d14:	2300      	movs	r3, #0
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	4b14      	ldr	r3, [pc, #80]	; (8004d6c <MX_LWIP_Init+0x250>)
 8004d1a:	4a13      	ldr	r2, [pc, #76]	; (8004d68 <MX_LWIP_Init+0x24c>)
 8004d1c:	4911      	ldr	r1, [pc, #68]	; (8004d64 <MX_LWIP_Init+0x248>)
 8004d1e:	4816      	ldr	r0, [pc, #88]	; (8004d78 <MX_LWIP_Init+0x25c>)
 8004d20:	f003 fc8a 	bl	8008638 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004d24:	4814      	ldr	r0, [pc, #80]	; (8004d78 <MX_LWIP_Init+0x25c>)
 8004d26:	f003 fe39 	bl	800899c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004d2a:	4b13      	ldr	r3, [pc, #76]	; (8004d78 <MX_LWIP_Init+0x25c>)
 8004d2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d30:	089b      	lsrs	r3, r3, #2
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004d3c:	480e      	ldr	r0, [pc, #56]	; (8004d78 <MX_LWIP_Init+0x25c>)
 8004d3e:	f003 fe3d 	bl	80089bc <netif_set_up>
 8004d42:	e002      	b.n	8004d4a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004d44:	480c      	ldr	r0, [pc, #48]	; (8004d78 <MX_LWIP_Init+0x25c>)
 8004d46:	f003 fea5 	bl	8008a94 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004d4a:	490c      	ldr	r1, [pc, #48]	; (8004d7c <MX_LWIP_Init+0x260>)
 8004d4c:	480a      	ldr	r0, [pc, #40]	; (8004d78 <MX_LWIP_Init+0x25c>)
 8004d4e:	f003 fed3 	bl	8008af8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004d52:	bf00      	nop
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	2000568c 	.word	0x2000568c
 8004d5c:	20005688 	.word	0x20005688
 8004d60:	2000564c 	.word	0x2000564c
 8004d64:	20005684 	.word	0x20005684
 8004d68:	20005690 	.word	0x20005690
 8004d6c:	20005694 	.word	0x20005694
 8004d70:	08012915 	.word	0x08012915
 8004d74:	08005325 	.word	0x08005325
 8004d78:	20005650 	.word	0x20005650
 8004d7c:	08005391 	.word	0x08005391

08004d80 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004d84:	4803      	ldr	r0, [pc, #12]	; (8004d94 <MX_LWIP_Process+0x14>)
 8004d86:	f000 faad 	bl	80052e4 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004d8a:	f00a fe29 	bl	800f9e0 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004d8e:	bf00      	nop
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20005650 	.word	0x20005650

08004d98 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08e      	sub	sp, #56	; 0x38
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	605a      	str	r2, [r3, #4]
 8004daa:	609a      	str	r2, [r3, #8]
 8004dac:	60da      	str	r2, [r3, #12]
 8004dae:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a46      	ldr	r2, [pc, #280]	; (8004ed0 <HAL_ETH_MspInit+0x138>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	f040 8085 	bne.w	8004ec6 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	623b      	str	r3, [r7, #32]
 8004dc0:	4b44      	ldr	r3, [pc, #272]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc4:	4a43      	ldr	r2, [pc, #268]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004dc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004dca:	6313      	str	r3, [r2, #48]	; 0x30
 8004dcc:	4b41      	ldr	r3, [pc, #260]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd4:	623b      	str	r3, [r7, #32]
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	4b3d      	ldr	r3, [pc, #244]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de0:	4a3c      	ldr	r2, [pc, #240]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004de2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004de6:	6313      	str	r3, [r2, #48]	; 0x30
 8004de8:	4b3a      	ldr	r3, [pc, #232]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004df0:	61fb      	str	r3, [r7, #28]
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	2300      	movs	r3, #0
 8004df6:	61bb      	str	r3, [r7, #24]
 8004df8:	4b36      	ldr	r3, [pc, #216]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfc:	4a35      	ldr	r2, [pc, #212]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004dfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e02:	6313      	str	r3, [r2, #48]	; 0x30
 8004e04:	4b33      	ldr	r3, [pc, #204]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	4b2f      	ldr	r3, [pc, #188]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	4a2e      	ldr	r2, [pc, #184]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004e1a:	f043 0304 	orr.w	r3, r3, #4
 8004e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8004e20:	4b2c      	ldr	r3, [pc, #176]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	4b28      	ldr	r3, [pc, #160]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	4a27      	ldr	r2, [pc, #156]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004e36:	f043 0301 	orr.w	r3, r3, #1
 8004e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e3c:	4b25      	ldr	r3, [pc, #148]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	4b21      	ldr	r3, [pc, #132]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e50:	4a20      	ldr	r2, [pc, #128]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004e52:	f043 0302 	orr.w	r3, r3, #2
 8004e56:	6313      	str	r3, [r2, #48]	; 0x30
 8004e58:	4b1e      	ldr	r3, [pc, #120]	; (8004ed4 <HAL_ETH_MspInit+0x13c>)
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004e64:	2332      	movs	r3, #50	; 0x32
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e68:	2302      	movs	r3, #2
 8004e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e70:	2303      	movs	r3, #3
 8004e72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e74:	230b      	movs	r3, #11
 8004e76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4816      	ldr	r0, [pc, #88]	; (8004ed8 <HAL_ETH_MspInit+0x140>)
 8004e80:	f7fe fc08 	bl	8003694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004e84:	2386      	movs	r3, #134	; 0x86
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e88:	2302      	movs	r3, #2
 8004e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e90:	2303      	movs	r3, #3
 8004e92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e94:	230b      	movs	r3, #11
 8004e96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	480f      	ldr	r0, [pc, #60]	; (8004edc <HAL_ETH_MspInit+0x144>)
 8004ea0:	f7fe fbf8 	bl	8003694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004ea4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eaa:	2302      	movs	r3, #2
 8004eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004eb6:	230b      	movs	r3, #11
 8004eb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4807      	ldr	r0, [pc, #28]	; (8004ee0 <HAL_ETH_MspInit+0x148>)
 8004ec2:	f7fe fbe7 	bl	8003694 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004ec6:	bf00      	nop
 8004ec8:	3738      	adds	r7, #56	; 0x38
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40028000 	.word	0x40028000
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	40020800 	.word	0x40020800
 8004edc:	40020000 	.word	0x40020000
 8004ee0:	40020400 	.word	0x40020400

08004ee4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004ef0:	4b4d      	ldr	r3, [pc, #308]	; (8005028 <low_level_init+0x144>)
 8004ef2:	4a4e      	ldr	r2, [pc, #312]	; (800502c <low_level_init+0x148>)
 8004ef4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004ef6:	4b4c      	ldr	r3, [pc, #304]	; (8005028 <low_level_init+0x144>)
 8004ef8:	2201      	movs	r2, #1
 8004efa:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004efc:	4b4a      	ldr	r3, [pc, #296]	; (8005028 <low_level_init+0x144>)
 8004efe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f02:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004f04:	4b48      	ldr	r3, [pc, #288]	; (8005028 <low_level_init+0x144>)
 8004f06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f0a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004f0c:	4b46      	ldr	r3, [pc, #280]	; (8005028 <low_level_init+0x144>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004f12:	2300      	movs	r3, #0
 8004f14:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004f16:	2380      	movs	r3, #128	; 0x80
 8004f18:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004f1a:	23e1      	movs	r3, #225	; 0xe1
 8004f1c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004f22:	2300      	movs	r3, #0
 8004f24:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004f26:	2300      	movs	r3, #0
 8004f28:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004f2a:	4a3f      	ldr	r2, [pc, #252]	; (8005028 <low_level_init+0x144>)
 8004f2c:	f107 0308 	add.w	r3, r7, #8
 8004f30:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004f32:	4b3d      	ldr	r3, [pc, #244]	; (8005028 <low_level_init+0x144>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004f38:	4b3b      	ldr	r3, [pc, #236]	; (8005028 <low_level_init+0x144>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004f3e:	4b3a      	ldr	r3, [pc, #232]	; (8005028 <low_level_init+0x144>)
 8004f40:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004f44:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004f46:	4838      	ldr	r0, [pc, #224]	; (8005028 <low_level_init+0x144>)
 8004f48:	f7fd fa7e 	bl	8002448 <HAL_ETH_Init>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d108      	bne.n	8004f68 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f5c:	f043 0304 	orr.w	r3, r3, #4
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004f68:	2304      	movs	r3, #4
 8004f6a:	4a31      	ldr	r2, [pc, #196]	; (8005030 <low_level_init+0x14c>)
 8004f6c:	4931      	ldr	r1, [pc, #196]	; (8005034 <low_level_init+0x150>)
 8004f6e:	482e      	ldr	r0, [pc, #184]	; (8005028 <low_level_init+0x144>)
 8004f70:	f7fd fc08 	bl	8002784 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004f74:	2304      	movs	r3, #4
 8004f76:	4a30      	ldr	r2, [pc, #192]	; (8005038 <low_level_init+0x154>)
 8004f78:	4930      	ldr	r1, [pc, #192]	; (800503c <low_level_init+0x158>)
 8004f7a:	482b      	ldr	r0, [pc, #172]	; (8005028 <low_level_init+0x144>)
 8004f7c:	f7fd fc6b 	bl	8002856 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2206      	movs	r2, #6
 8004f84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004f88:	4b27      	ldr	r3, [pc, #156]	; (8005028 <low_level_init+0x144>)
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	781a      	ldrb	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004f94:	4b24      	ldr	r3, [pc, #144]	; (8005028 <low_level_init+0x144>)
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	785a      	ldrb	r2, [r3, #1]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004fa0:	4b21      	ldr	r3, [pc, #132]	; (8005028 <low_level_init+0x144>)
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	789a      	ldrb	r2, [r3, #2]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004fac:	4b1e      	ldr	r3, [pc, #120]	; (8005028 <low_level_init+0x144>)
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	78da      	ldrb	r2, [r3, #3]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004fb8:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <low_level_init+0x144>)
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	791a      	ldrb	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004fc4:	4b18      	ldr	r3, [pc, #96]	; (8005028 <low_level_init+0x144>)
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	795a      	ldrb	r2, [r3, #5]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004fd6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004fde:	f043 030a 	orr.w	r3, r3, #10
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004fea:	480f      	ldr	r0, [pc, #60]	; (8005028 <low_level_init+0x144>)
 8004fec:	f7fd fedc 	bl	8002da8 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */
    
/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004ff0:	f107 0310 	add.w	r3, r7, #16
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	211d      	movs	r1, #29
 8004ff8:	480b      	ldr	r0, [pc, #44]	; (8005028 <low_level_init+0x144>)
 8004ffa:	f7fd fe07 	bl	8002c0c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f043 030b 	orr.w	r3, r3, #11
 8005004:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	461a      	mov	r2, r3
 800500a:	211d      	movs	r1, #29
 800500c:	4806      	ldr	r0, [pc, #24]	; (8005028 <low_level_init+0x144>)
 800500e:	f7fd fe65 	bl	8002cdc <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005012:	f107 0310 	add.w	r3, r7, #16
 8005016:	461a      	mov	r2, r3
 8005018:	211d      	movs	r1, #29
 800501a:	4803      	ldr	r0, [pc, #12]	; (8005028 <low_level_init+0x144>)
 800501c:	f7fd fdf6 	bl	8002c0c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8005020:	bf00      	nop
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	20006f68 	.word	0x20006f68
 800502c:	40028000 	.word	0x40028000
 8005030:	20006fb0 	.word	0x20006fb0
 8005034:	20005698 	.word	0x20005698
 8005038:	20005718 	.word	0x20005718
 800503c:	20006ee8 	.word	0x20006ee8

08005040 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08a      	sub	sp, #40	; 0x28
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800504a:	4b4b      	ldr	r3, [pc, #300]	; (8005178 <low_level_output+0x138>)
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005062:	4b45      	ldr	r3, [pc, #276]	; (8005178 <low_level_output+0x138>)
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	623b      	str	r3, [r7, #32]
 8005070:	e05a      	b.n	8005128 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	da03      	bge.n	8005082 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800507a:	23f8      	movs	r3, #248	; 0xf8
 800507c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005080:	e05c      	b.n	800513c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	895b      	ldrh	r3, [r3, #10]
 8005086:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800508c:	e02f      	b.n	80050ee <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	18d0      	adds	r0, r2, r3
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	18d1      	adds	r1, r2, r3
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80050a2:	3304      	adds	r3, #4
 80050a4:	461a      	mov	r2, r3
 80050a6:	f00d fd3e 	bl	8012b26 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	da03      	bge.n	80050c0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80050b8:	23f8      	movs	r3, #248	; 0xf8
 80050ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80050be:	e03d      	b.n	800513c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80050d0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80050dc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80050e8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4413      	add	r3, r2
 80050f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d8c8      	bhi.n	800508e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	18d0      	adds	r0, r2, r3
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	4413      	add	r3, r2
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4619      	mov	r1, r3
 800510e:	f00d fd0a 	bl	8012b26 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	623b      	str	r3, [r7, #32]
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1a1      	bne.n	8005072 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800512e:	6979      	ldr	r1, [r7, #20]
 8005130:	4811      	ldr	r0, [pc, #68]	; (8005178 <low_level_output+0x138>)
 8005132:	f7fd fbfd 	bl	8002930 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800513c:	4b0e      	ldr	r3, [pc, #56]	; (8005178 <low_level_output+0x138>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005144:	3314      	adds	r3, #20
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0320 	and.w	r3, r3, #32
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00d      	beq.n	800516c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005150:	4b09      	ldr	r3, [pc, #36]	; (8005178 <low_level_output+0x138>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005158:	3314      	adds	r3, #20
 800515a:	2220      	movs	r2, #32
 800515c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800515e:	4b06      	ldr	r3, [pc, #24]	; (8005178 <low_level_output+0x138>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005166:	3304      	adds	r3, #4
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800516c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005170:	4618      	mov	r0, r3
 8005172:	3728      	adds	r7, #40	; 0x28
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20006f68 	.word	0x20006f68

0800517c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08c      	sub	sp, #48	; 0x30
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005184:	2300      	movs	r3, #0
 8005186:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005188:	2300      	movs	r3, #0
 800518a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800518c:	2300      	movs	r3, #0
 800518e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800519c:	2300      	movs	r3, #0
 800519e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80051a0:	484f      	ldr	r0, [pc, #316]	; (80052e0 <low_level_input+0x164>)
 80051a2:	f7fd fcaf 	bl	8002b04 <HAL_ETH_GetReceivedFrame>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <low_level_input+0x34>

    return NULL;
 80051ac:	2300      	movs	r3, #0
 80051ae:	e092      	b.n	80052d6 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80051b0:	4b4b      	ldr	r3, [pc, #300]	; (80052e0 <low_level_input+0x164>)
 80051b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80051b6:	4b4a      	ldr	r3, [pc, #296]	; (80052e0 <low_level_input+0x164>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80051bc:	89fb      	ldrh	r3, [r7, #14]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80051c2:	89fb      	ldrh	r3, [r7, #14]
 80051c4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80051c8:	4619      	mov	r1, r3
 80051ca:	2000      	movs	r0, #0
 80051cc:	f003 fd30 	bl	8008c30 <pbuf_alloc>
 80051d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80051d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d04b      	beq.n	8005270 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80051d8:	4b41      	ldr	r3, [pc, #260]	; (80052e0 <low_level_input+0x164>)
 80051da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051dc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80051e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051e6:	e040      	b.n	800526a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	895b      	ldrh	r3, [r3, #10]
 80051ec:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80051f2:	e021      	b.n	8005238 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	18d0      	adds	r0, r2, r3
 80051fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	18d1      	adds	r1, r2, r3
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005208:	3304      	adds	r3, #4
 800520a:	461a      	mov	r2, r3
 800520c:	f00d fc8b 	bl	8012b26 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	4413      	add	r3, r2
 8005222:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005226:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005232:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	4413      	add	r3, r2
 800523e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005242:	4293      	cmp	r3, r2
 8005244:	d8d6      	bhi.n	80051f4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	18d0      	adds	r0, r2, r3
 800524e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	4413      	add	r3, r2
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4619      	mov	r1, r3
 8005258:	f00d fc65 	bl	8012b26 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	4413      	add	r3, r2
 8005262:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	62bb      	str	r3, [r7, #40]	; 0x28
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1bb      	bne.n	80051e8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005270:	4b1b      	ldr	r3, [pc, #108]	; (80052e0 <low_level_input+0x164>)
 8005272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005274:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005276:	2300      	movs	r3, #0
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	e00b      	b.n	8005294 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	3301      	adds	r3, #1
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	4b12      	ldr	r3, [pc, #72]	; (80052e0 <low_level_input+0x164>)
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	429a      	cmp	r2, r3
 800529c:	d3ee      	bcc.n	800527c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800529e:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <low_level_input+0x164>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80052a4:	4b0e      	ldr	r3, [pc, #56]	; (80052e0 <low_level_input+0x164>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ac:	3314      	adds	r3, #20
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00d      	beq.n	80052d4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80052b8:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <low_level_input+0x164>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c0:	3314      	adds	r3, #20
 80052c2:	2280      	movs	r2, #128	; 0x80
 80052c4:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80052c6:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <low_level_input+0x164>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ce:	3308      	adds	r3, #8
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]
  }
  return p;
 80052d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3730      	adds	r7, #48	; 0x30
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20006f68 	.word	0x20006f68

080052e4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff ff45 	bl	800517c <low_level_input>
 80052f2:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d010      	beq.n	800531c <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	4798      	blx	r3
 8005304:	4603      	mov	r3, r0
 8005306:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8005308:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d006      	beq.n	800531e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f003 ff6d 	bl	80091f0 <pbuf_free>
    p = NULL;
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	e000      	b.n	800531e <ethernetif_input+0x3a>
  if (p == NULL) return;
 800531c:	bf00      	nop
  }
}
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <ethernetif_init+0x1c>
 8005332:	4b0e      	ldr	r3, [pc, #56]	; (800536c <ethernetif_init+0x48>)
 8005334:	f240 2207 	movw	r2, #519	; 0x207
 8005338:	490d      	ldr	r1, [pc, #52]	; (8005370 <ethernetif_init+0x4c>)
 800533a:	480e      	ldr	r0, [pc, #56]	; (8005374 <ethernetif_init+0x50>)
 800533c:	f00d fc06 	bl	8012b4c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2273      	movs	r2, #115	; 0x73
 8005344:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2274      	movs	r2, #116	; 0x74
 800534c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a09      	ldr	r2, [pc, #36]	; (8005378 <ethernetif_init+0x54>)
 8005354:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a08      	ldr	r2, [pc, #32]	; (800537c <ethernetif_init+0x58>)
 800535a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff fdc1 	bl	8004ee4 <low_level_init>

  return ERR_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	08013aa0 	.word	0x08013aa0
 8005370:	08013abc 	.word	0x08013abc
 8005374:	08013acc 	.word	0x08013acc
 8005378:	08010de5 	.word	0x08010de5
 800537c:	08005041 	.word	0x08005041

08005380 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005384:	f7fc ff4c 	bl	8002220 <HAL_GetTick>
 8005388:	4603      	mov	r3, r0
}
 800538a:	4618      	mov	r0, r3
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053a6:	089b      	lsrs	r3, r3, #2
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d05d      	beq.n	800546e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80053b2:	4b34      	ldr	r3, [pc, #208]	; (8005484 <ethernetif_update_config+0xf4>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d03f      	beq.n	800543a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80053ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053be:	2100      	movs	r1, #0
 80053c0:	4830      	ldr	r0, [pc, #192]	; (8005484 <ethernetif_update_config+0xf4>)
 80053c2:	f7fd fc8b 	bl	8002cdc <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80053c6:	f7fc ff2b 	bl	8002220 <HAL_GetTick>
 80053ca:	4603      	mov	r3, r0
 80053cc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80053ce:	f107 0308 	add.w	r3, r7, #8
 80053d2:	461a      	mov	r2, r3
 80053d4:	2101      	movs	r1, #1
 80053d6:	482b      	ldr	r0, [pc, #172]	; (8005484 <ethernetif_update_config+0xf4>)
 80053d8:	f7fd fc18 	bl	8002c0c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80053dc:	f7fc ff20 	bl	8002220 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ea:	d828      	bhi.n	800543e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0eb      	beq.n	80053ce <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80053f6:	f107 0308 	add.w	r3, r7, #8
 80053fa:	461a      	mov	r2, r3
 80053fc:	211f      	movs	r1, #31
 80053fe:	4821      	ldr	r0, [pc, #132]	; (8005484 <ethernetif_update_config+0xf4>)
 8005400:	f7fd fc04 	bl	8002c0c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f003 0310 	and.w	r3, r3, #16
 800540a:	2b00      	cmp	r3, #0
 800540c:	d004      	beq.n	8005418 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800540e:	4b1d      	ldr	r3, [pc, #116]	; (8005484 <ethernetif_update_config+0xf4>)
 8005410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005414:	60da      	str	r2, [r3, #12]
 8005416:	e002      	b.n	800541e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005418:	4b1a      	ldr	r3, [pc, #104]	; (8005484 <ethernetif_update_config+0xf4>)
 800541a:	2200      	movs	r2, #0
 800541c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005428:	4b16      	ldr	r3, [pc, #88]	; (8005484 <ethernetif_update_config+0xf4>)
 800542a:	2200      	movs	r2, #0
 800542c:	609a      	str	r2, [r3, #8]
 800542e:	e016      	b.n	800545e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005430:	4b14      	ldr	r3, [pc, #80]	; (8005484 <ethernetif_update_config+0xf4>)
 8005432:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005436:	609a      	str	r2, [r3, #8]
 8005438:	e011      	b.n	800545e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800543a:	bf00      	nop
 800543c:	e000      	b.n	8005440 <ethernetif_update_config+0xb0>
          goto error;
 800543e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005440:	4b10      	ldr	r3, [pc, #64]	; (8005484 <ethernetif_update_config+0xf4>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	08db      	lsrs	r3, r3, #3
 8005446:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005448:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <ethernetif_update_config+0xf4>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	085b      	lsrs	r3, r3, #1
 800544e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005450:	4313      	orrs	r3, r2
 8005452:	b29b      	uxth	r3, r3
 8005454:	461a      	mov	r2, r3
 8005456:	2100      	movs	r1, #0
 8005458:	480a      	ldr	r0, [pc, #40]	; (8005484 <ethernetif_update_config+0xf4>)
 800545a:	f7fd fc3f 	bl	8002cdc <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800545e:	2100      	movs	r1, #0
 8005460:	4808      	ldr	r0, [pc, #32]	; (8005484 <ethernetif_update_config+0xf4>)
 8005462:	f7fd fcff 	bl	8002e64 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005466:	4807      	ldr	r0, [pc, #28]	; (8005484 <ethernetif_update_config+0xf4>)
 8005468:	f7fd fc9e 	bl	8002da8 <HAL_ETH_Start>
 800546c:	e002      	b.n	8005474 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800546e:	4805      	ldr	r0, [pc, #20]	; (8005484 <ethernetif_update_config+0xf4>)
 8005470:	f7fd fcc9 	bl	8002e06 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f807 	bl	8005488 <ethernetif_notify_conn_changed>
}
 800547a:	bf00      	nop
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20006f68 	.word	0x20006f68

08005488 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file 
            when the callback is needed,
  */

}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80054a6:	79fb      	ldrb	r3, [r7, #7]
 80054a8:	4a08      	ldr	r2, [pc, #32]	; (80054cc <disk_status+0x30>)
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	79fa      	ldrb	r2, [r7, #7]
 80054b4:	4905      	ldr	r1, [pc, #20]	; (80054cc <disk_status+0x30>)
 80054b6:	440a      	add	r2, r1
 80054b8:	7a12      	ldrb	r2, [r2, #8]
 80054ba:	4610      	mov	r0, r2
 80054bc:	4798      	blx	r3
 80054be:	4603      	mov	r3, r0
 80054c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20000104 	.word	0x20000104

080054d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	4a0d      	ldr	r2, [pc, #52]	; (8005518 <disk_initialize+0x48>)
 80054e2:	5cd3      	ldrb	r3, [r2, r3]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d111      	bne.n	800550c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	4a0b      	ldr	r2, [pc, #44]	; (8005518 <disk_initialize+0x48>)
 80054ec:	2101      	movs	r1, #1
 80054ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	4a09      	ldr	r2, [pc, #36]	; (8005518 <disk_initialize+0x48>)
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	79fa      	ldrb	r2, [r7, #7]
 80054fe:	4906      	ldr	r1, [pc, #24]	; (8005518 <disk_initialize+0x48>)
 8005500:	440a      	add	r2, r1
 8005502:	7a12      	ldrb	r2, [r2, #8]
 8005504:	4610      	mov	r0, r2
 8005506:	4798      	blx	r3
 8005508:	4603      	mov	r3, r0
 800550a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800550c:	7bfb      	ldrb	r3, [r7, #15]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20000104 	.word	0x20000104

0800551c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800551c:	b590      	push	{r4, r7, lr}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	4603      	mov	r3, r0
 800552a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	4a0a      	ldr	r2, [pc, #40]	; (8005558 <disk_read+0x3c>)
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	689c      	ldr	r4, [r3, #8]
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	4a07      	ldr	r2, [pc, #28]	; (8005558 <disk_read+0x3c>)
 800553c:	4413      	add	r3, r2
 800553e:	7a18      	ldrb	r0, [r3, #8]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	47a0      	blx	r4
 8005548:	4603      	mov	r3, r0
 800554a:	75fb      	strb	r3, [r7, #23]
  return res;
 800554c:	7dfb      	ldrb	r3, [r7, #23]
}
 800554e:	4618      	mov	r0, r3
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	bd90      	pop	{r4, r7, pc}
 8005556:	bf00      	nop
 8005558:	20000104 	.word	0x20000104

0800555c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800555c:	b590      	push	{r4, r7, lr}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	607a      	str	r2, [r7, #4]
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	4603      	mov	r3, r0
 800556a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	4a0a      	ldr	r2, [pc, #40]	; (8005598 <disk_write+0x3c>)
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	68dc      	ldr	r4, [r3, #12]
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	4a07      	ldr	r2, [pc, #28]	; (8005598 <disk_write+0x3c>)
 800557c:	4413      	add	r3, r2
 800557e:	7a18      	ldrb	r0, [r3, #8]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	47a0      	blx	r4
 8005588:	4603      	mov	r3, r0
 800558a:	75fb      	strb	r3, [r7, #23]
  return res;
 800558c:	7dfb      	ldrb	r3, [r7, #23]
}
 800558e:	4618      	mov	r0, r3
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	bd90      	pop	{r4, r7, pc}
 8005596:	bf00      	nop
 8005598:	20000104 	.word	0x20000104

0800559c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	603a      	str	r2, [r7, #0]
 80055a6:	71fb      	strb	r3, [r7, #7]
 80055a8:	460b      	mov	r3, r1
 80055aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	4a09      	ldr	r2, [pc, #36]	; (80055d4 <disk_ioctl+0x38>)
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	79fa      	ldrb	r2, [r7, #7]
 80055ba:	4906      	ldr	r1, [pc, #24]	; (80055d4 <disk_ioctl+0x38>)
 80055bc:	440a      	add	r2, r1
 80055be:	7a10      	ldrb	r0, [r2, #8]
 80055c0:	79b9      	ldrb	r1, [r7, #6]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	4798      	blx	r3
 80055c6:	4603      	mov	r3, r0
 80055c8:	73fb      	strb	r3, [r7, #15]
  return res;
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20000104 	.word	0x20000104

080055d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3301      	adds	r3, #1
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80055e8:	89fb      	ldrh	r3, [r7, #14]
 80055ea:	021b      	lsls	r3, r3, #8
 80055ec:	b21a      	sxth	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	b21b      	sxth	r3, r3
 80055f4:	4313      	orrs	r3, r2
 80055f6:	b21b      	sxth	r3, r3
 80055f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80055fa:	89fb      	ldrh	r3, [r7, #14]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3303      	adds	r3, #3
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	021b      	lsls	r3, r3, #8
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	3202      	adds	r2, #2
 8005620:	7812      	ldrb	r2, [r2, #0]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	021b      	lsls	r3, r3, #8
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	3201      	adds	r2, #1
 800562e:	7812      	ldrb	r2, [r2, #0]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	7812      	ldrb	r2, [r2, #0]
 800563c:	4313      	orrs	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005640:	68fb      	ldr	r3, [r7, #12]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	460b      	mov	r3, r1
 8005658:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	887a      	ldrh	r2, [r7, #2]
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	887b      	ldrh	r3, [r7, #2]
 8005668:	0a1b      	lsrs	r3, r3, #8
 800566a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	607a      	str	r2, [r7, #4]
 8005672:	887a      	ldrh	r2, [r7, #2]
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	701a      	strb	r2, [r3, #0]
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	0a1b      	lsrs	r3, r3, #8
 800569e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	607a      	str	r2, [r7, #4]
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	701a      	strb	r2, [r3, #0]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	0a1b      	lsrs	r3, r3, #8
 80056b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	0a1b      	lsrs	r3, r3, #8
 80056c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	607a      	str	r2, [r7, #4]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	701a      	strb	r2, [r3, #0]
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00d      	beq.n	8005712 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	1c53      	adds	r3, r2, #1
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	1c59      	adds	r1, r3, #1
 8005700:	6179      	str	r1, [r7, #20]
 8005702:	7812      	ldrb	r2, [r2, #0]
 8005704:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	3b01      	subs	r3, #1
 800570a:	607b      	str	r3, [r7, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f1      	bne.n	80056f6 <mem_cpy+0x1a>
	}
}
 8005712:	bf00      	nop
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800571e:	b480      	push	{r7}
 8005720:	b087      	sub	sp, #28
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	617a      	str	r2, [r7, #20]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3b01      	subs	r3, #1
 800573e:	607b      	str	r3, [r7, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1f3      	bne.n	800572e <mem_set+0x10>
}
 8005746:	bf00      	nop
 8005748:	371c      	adds	r7, #28
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005752:	b480      	push	{r7}
 8005754:	b089      	sub	sp, #36	; 0x24
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	61fa      	str	r2, [r7, #28]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	4619      	mov	r1, r3
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	61ba      	str	r2, [r7, #24]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	1acb      	subs	r3, r1, r3
 800577e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3b01      	subs	r3, #1
 8005784:	607b      	str	r3, [r7, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <mem_cmp+0x40>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0eb      	beq.n	800576a <mem_cmp+0x18>

	return r;
 8005792:	697b      	ldr	r3, [r7, #20]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3724      	adds	r7, #36	; 0x24
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80057aa:	e002      	b.n	80057b2 <chk_chr+0x12>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3301      	adds	r3, #1
 80057b0:	607b      	str	r3, [r7, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <chk_chr+0x26>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d1f2      	bne.n	80057ac <chk_chr+0xc>
	return *str;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	781b      	ldrb	r3, [r3, #0]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80057e2:	2300      	movs	r3, #0
 80057e4:	60bb      	str	r3, [r7, #8]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	e029      	b.n	8005840 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80057ec:	4a27      	ldr	r2, [pc, #156]	; (800588c <chk_lock+0xb4>)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	4413      	add	r3, r2
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d01d      	beq.n	8005836 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80057fa:	4a24      	ldr	r2, [pc, #144]	; (800588c <chk_lock+0xb4>)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	4413      	add	r3, r2
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d116      	bne.n	800583a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800580c:	4a1f      	ldr	r2, [pc, #124]	; (800588c <chk_lock+0xb4>)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	4413      	add	r3, r2
 8005814:	3304      	adds	r3, #4
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800581c:	429a      	cmp	r2, r3
 800581e:	d10c      	bne.n	800583a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005820:	4a1a      	ldr	r2, [pc, #104]	; (800588c <chk_lock+0xb4>)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	4413      	add	r3, r2
 8005828:	3308      	adds	r3, #8
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005830:	429a      	cmp	r2, r3
 8005832:	d102      	bne.n	800583a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005834:	e007      	b.n	8005846 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005836:	2301      	movs	r3, #1
 8005838:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3301      	adds	r3, #1
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d9d2      	bls.n	80057ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d109      	bne.n	8005860 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d102      	bne.n	8005858 <chk_lock+0x80>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d101      	bne.n	800585c <chk_lock+0x84>
 8005858:	2300      	movs	r3, #0
 800585a:	e010      	b.n	800587e <chk_lock+0xa6>
 800585c:	2312      	movs	r3, #18
 800585e:	e00e      	b.n	800587e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d108      	bne.n	8005878 <chk_lock+0xa0>
 8005866:	4a09      	ldr	r2, [pc, #36]	; (800588c <chk_lock+0xb4>)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	4413      	add	r3, r2
 800586e:	330c      	adds	r3, #12
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005876:	d101      	bne.n	800587c <chk_lock+0xa4>
 8005878:	2310      	movs	r3, #16
 800587a:	e000      	b.n	800587e <chk_lock+0xa6>
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	200000e4 	.word	0x200000e4

08005890 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005896:	2300      	movs	r3, #0
 8005898:	607b      	str	r3, [r7, #4]
 800589a:	e002      	b.n	80058a2 <enq_lock+0x12>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3301      	adds	r3, #1
 80058a0:	607b      	str	r3, [r7, #4]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d806      	bhi.n	80058b6 <enq_lock+0x26>
 80058a8:	4a09      	ldr	r2, [pc, #36]	; (80058d0 <enq_lock+0x40>)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	4413      	add	r3, r2
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f2      	bne.n	800589c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	bf14      	ite	ne
 80058bc:	2301      	movne	r3, #1
 80058be:	2300      	moveq	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	200000e4 	.word	0x200000e4

080058d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	e01f      	b.n	8005924 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80058e4:	4a41      	ldr	r2, [pc, #260]	; (80059ec <inc_lock+0x118>)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	4413      	add	r3, r2
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d113      	bne.n	800591e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80058f6:	4a3d      	ldr	r2, [pc, #244]	; (80059ec <inc_lock+0x118>)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	4413      	add	r3, r2
 80058fe:	3304      	adds	r3, #4
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005906:	429a      	cmp	r2, r3
 8005908:	d109      	bne.n	800591e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800590a:	4a38      	ldr	r2, [pc, #224]	; (80059ec <inc_lock+0x118>)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	011b      	lsls	r3, r3, #4
 8005910:	4413      	add	r3, r2
 8005912:	3308      	adds	r3, #8
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800591a:	429a      	cmp	r2, r3
 800591c:	d006      	beq.n	800592c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3301      	adds	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d9dc      	bls.n	80058e4 <inc_lock+0x10>
 800592a:	e000      	b.n	800592e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800592c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2b02      	cmp	r3, #2
 8005932:	d132      	bne.n	800599a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	e002      	b.n	8005940 <inc_lock+0x6c>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3301      	adds	r3, #1
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d806      	bhi.n	8005954 <inc_lock+0x80>
 8005946:	4a29      	ldr	r2, [pc, #164]	; (80059ec <inc_lock+0x118>)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	4413      	add	r3, r2
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1f2      	bne.n	800593a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d101      	bne.n	800595e <inc_lock+0x8a>
 800595a:	2300      	movs	r3, #0
 800595c:	e040      	b.n	80059e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4922      	ldr	r1, [pc, #136]	; (80059ec <inc_lock+0x118>)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	440b      	add	r3, r1
 800596a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	491e      	ldr	r1, [pc, #120]	; (80059ec <inc_lock+0x118>)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	440b      	add	r3, r1
 8005978:	3304      	adds	r3, #4
 800597a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	695a      	ldr	r2, [r3, #20]
 8005980:	491a      	ldr	r1, [pc, #104]	; (80059ec <inc_lock+0x118>)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	440b      	add	r3, r1
 8005988:	3308      	adds	r3, #8
 800598a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800598c:	4a17      	ldr	r2, [pc, #92]	; (80059ec <inc_lock+0x118>)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	4413      	add	r3, r2
 8005994:	330c      	adds	r3, #12
 8005996:	2200      	movs	r2, #0
 8005998:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d009      	beq.n	80059b4 <inc_lock+0xe0>
 80059a0:	4a12      	ldr	r2, [pc, #72]	; (80059ec <inc_lock+0x118>)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	4413      	add	r3, r2
 80059a8:	330c      	adds	r3, #12
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <inc_lock+0xe0>
 80059b0:	2300      	movs	r3, #0
 80059b2:	e015      	b.n	80059e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d108      	bne.n	80059cc <inc_lock+0xf8>
 80059ba:	4a0c      	ldr	r2, [pc, #48]	; (80059ec <inc_lock+0x118>)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	4413      	add	r3, r2
 80059c2:	330c      	adds	r3, #12
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	3301      	adds	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	e001      	b.n	80059d0 <inc_lock+0xfc>
 80059cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059d0:	4906      	ldr	r1, [pc, #24]	; (80059ec <inc_lock+0x118>)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	440b      	add	r3, r1
 80059d8:	330c      	adds	r3, #12
 80059da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3301      	adds	r3, #1
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	200000e4 	.word	0x200000e4

080059f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	607b      	str	r3, [r7, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d825      	bhi.n	8005a50 <dec_lock+0x60>
		n = Files[i].ctr;
 8005a04:	4a17      	ldr	r2, [pc, #92]	; (8005a64 <dec_lock+0x74>)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	4413      	add	r3, r2
 8005a0c:	330c      	adds	r3, #12
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005a12:	89fb      	ldrh	r3, [r7, #14]
 8005a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a18:	d101      	bne.n	8005a1e <dec_lock+0x2e>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005a1e:	89fb      	ldrh	r3, [r7, #14]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <dec_lock+0x3a>
 8005a24:	89fb      	ldrh	r3, [r7, #14]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005a2a:	4a0e      	ldr	r2, [pc, #56]	; (8005a64 <dec_lock+0x74>)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	4413      	add	r3, r2
 8005a32:	330c      	adds	r3, #12
 8005a34:	89fa      	ldrh	r2, [r7, #14]
 8005a36:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005a38:	89fb      	ldrh	r3, [r7, #14]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d105      	bne.n	8005a4a <dec_lock+0x5a>
 8005a3e:	4a09      	ldr	r2, [pc, #36]	; (8005a64 <dec_lock+0x74>)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	4413      	add	r3, r2
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	737b      	strb	r3, [r7, #13]
 8005a4e:	e001      	b.n	8005a54 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005a50:	2302      	movs	r3, #2
 8005a52:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005a54:	7b7b      	ldrb	r3, [r7, #13]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	200000e4 	.word	0x200000e4

08005a68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	e010      	b.n	8005a98 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005a76:	4a0d      	ldr	r2, [pc, #52]	; (8005aac <clear_lock+0x44>)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	4413      	add	r3, r2
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d105      	bne.n	8005a92 <clear_lock+0x2a>
 8005a86:	4a09      	ldr	r2, [pc, #36]	; (8005aac <clear_lock+0x44>)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	011b      	lsls	r3, r3, #4
 8005a8c:	4413      	add	r3, r2
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	3301      	adds	r3, #1
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d9eb      	bls.n	8005a76 <clear_lock+0xe>
	}
}
 8005a9e:	bf00      	nop
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	200000e4 	.word	0x200000e4

08005ab0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	78db      	ldrb	r3, [r3, #3]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d034      	beq.n	8005b2e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	7858      	ldrb	r0, [r3, #1]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	f7ff fd40 	bl	800555c <disk_write>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	73fb      	strb	r3, [r7, #15]
 8005ae6:	e022      	b.n	8005b2e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	1ad2      	subs	r2, r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d217      	bcs.n	8005b2e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	789b      	ldrb	r3, [r3, #2]
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	e010      	b.n	8005b28 <sync_window+0x78>
					wsect += fs->fsize;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	7858      	ldrb	r0, [r3, #1]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	f7ff fd1d 	bl	800555c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d8eb      	bhi.n	8005b06 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d01b      	beq.n	8005b88 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7ff ffad 	bl	8005ab0 <sync_window>
 8005b56:	4603      	mov	r3, r0
 8005b58:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d113      	bne.n	8005b88 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	7858      	ldrb	r0, [r3, #1]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	f7ff fcd5 	bl	800551c <disk_read>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d004      	beq.n	8005b82 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005b78:	f04f 33ff 	mov.w	r3, #4294967295
 8005b7c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff ff87 	bl	8005ab0 <sync_window>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d159      	bne.n	8005c60 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d149      	bne.n	8005c48 <sync_fs+0xb4>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	791b      	ldrb	r3, [r3, #4]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d145      	bne.n	8005c48 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	899b      	ldrh	r3, [r3, #12]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	2100      	movs	r1, #0
 8005bca:	f7ff fda8 	bl	800571e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3334      	adds	r3, #52	; 0x34
 8005bd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005bd6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff fd37 	bl	800564e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3334      	adds	r3, #52	; 0x34
 8005be4:	4921      	ldr	r1, [pc, #132]	; (8005c6c <sync_fs+0xd8>)
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff fd4c 	bl	8005684 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3334      	adds	r3, #52	; 0x34
 8005bf0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005bf4:	491e      	ldr	r1, [pc, #120]	; (8005c70 <sync_fs+0xdc>)
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7ff fd44 	bl	8005684 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3334      	adds	r3, #52	; 0x34
 8005c00:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	f7ff fd3a 	bl	8005684 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3334      	adds	r3, #52	; 0x34
 8005c14:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	f7ff fd30 	bl	8005684 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	7858      	ldrb	r0, [r3, #1]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	f7ff fc8d 	bl	800555c <disk_write>
			fs->fsi_flag = 0;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2100      	movs	r1, #0
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff fca3 	bl	800559c <disk_ioctl>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <sync_fs+0xcc>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	41615252 	.word	0x41615252
 8005c70:	61417272 	.word	0x61417272

08005c74 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	3b02      	subs	r3, #2
 8005c82:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	3b02      	subs	r3, #2
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d301      	bcc.n	8005c94 <clust2sect+0x20>
 8005c90:	2300      	movs	r3, #0
 8005c92:	e008      	b.n	8005ca6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	895b      	ldrh	r3, [r3, #10]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	fb03 f202 	mul.w	r2, r3, r2
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	4413      	add	r3, r2
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b086      	sub	sp, #24
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d904      	bls.n	8005cd2 <get_fat+0x20>
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d302      	bcc.n	8005cd8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	e0b7      	b.n	8005e48 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cdc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d05a      	beq.n	8005d9c <get_fat+0xea>
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d07d      	beq.n	8005de6 <get_fat+0x134>
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	f040 80a2 	bne.w	8005e34 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	085b      	lsrs	r3, r3, #1
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	899b      	ldrh	r3, [r3, #12]
 8005d06:	4619      	mov	r1, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d0e:	4413      	add	r3, r2
 8005d10:	4619      	mov	r1, r3
 8005d12:	6938      	ldr	r0, [r7, #16]
 8005d14:	f7ff ff10 	bl	8005b38 <move_window>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f040 808d 	bne.w	8005e3a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	60fa      	str	r2, [r7, #12]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	8992      	ldrh	r2, [r2, #12]
 8005d2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d2e:	fb02 f201 	mul.w	r2, r2, r1
 8005d32:	1a9b      	subs	r3, r3, r2
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4413      	add	r3, r2
 8005d38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d3c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	899b      	ldrh	r3, [r3, #12]
 8005d46:	4619      	mov	r1, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d4e:	4413      	add	r3, r2
 8005d50:	4619      	mov	r1, r3
 8005d52:	6938      	ldr	r0, [r7, #16]
 8005d54:	f7ff fef0 	bl	8005b38 <move_window>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d16f      	bne.n	8005e3e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	899b      	ldrh	r3, [r3, #12]
 8005d62:	461a      	mov	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d6a:	fb02 f201 	mul.w	r2, r2, r1
 8005d6e:	1a9b      	subs	r3, r3, r2
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4413      	add	r3, r2
 8005d74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <get_fat+0xe0>
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	091b      	lsrs	r3, r3, #4
 8005d90:	e002      	b.n	8005d98 <get_fat+0xe6>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d98:	617b      	str	r3, [r7, #20]
			break;
 8005d9a:	e055      	b.n	8005e48 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	899b      	ldrh	r3, [r3, #12]
 8005da4:	085b      	lsrs	r3, r3, #1
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	4619      	mov	r1, r3
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	fbb3 f3f1 	udiv	r3, r3, r1
 8005db0:	4413      	add	r3, r2
 8005db2:	4619      	mov	r1, r3
 8005db4:	6938      	ldr	r0, [r7, #16]
 8005db6:	f7ff febf 	bl	8005b38 <move_window>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d140      	bne.n	8005e42 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	8992      	ldrh	r2, [r2, #12]
 8005dce:	fbb3 f0f2 	udiv	r0, r3, r2
 8005dd2:	fb02 f200 	mul.w	r2, r2, r0
 8005dd6:	1a9b      	subs	r3, r3, r2
 8005dd8:	440b      	add	r3, r1
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff fbfc 	bl	80055d8 <ld_word>
 8005de0:	4603      	mov	r3, r0
 8005de2:	617b      	str	r3, [r7, #20]
			break;
 8005de4:	e030      	b.n	8005e48 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	899b      	ldrh	r3, [r3, #12]
 8005dee:	089b      	lsrs	r3, r3, #2
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	4619      	mov	r1, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dfa:	4413      	add	r3, r2
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6938      	ldr	r0, [r7, #16]
 8005e00:	f7ff fe9a 	bl	8005b38 <move_window>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d11d      	bne.n	8005e46 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	8992      	ldrh	r2, [r2, #12]
 8005e18:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e1c:	fb02 f200 	mul.w	r2, r2, r0
 8005e20:	1a9b      	subs	r3, r3, r2
 8005e22:	440b      	add	r3, r1
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff fbef 	bl	8005608 <ld_dword>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e30:	617b      	str	r3, [r7, #20]
			break;
 8005e32:	e009      	b.n	8005e48 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005e34:	2301      	movs	r3, #1
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	e006      	b.n	8005e48 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e3a:	bf00      	nop
 8005e3c:	e004      	b.n	8005e48 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e3e:	bf00      	nop
 8005e40:	e002      	b.n	8005e48 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e42:	bf00      	nop
 8005e44:	e000      	b.n	8005e48 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e46:	bf00      	nop
		}
	}

	return val;
 8005e48:	697b      	ldr	r3, [r7, #20]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005e52:	b590      	push	{r4, r7, lr}
 8005e54:	b089      	sub	sp, #36	; 0x24
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005e5e:	2302      	movs	r3, #2
 8005e60:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	f240 8106 	bls.w	8006076 <put_fat+0x224>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	f080 8100 	bcs.w	8006076 <put_fat+0x224>
		switch (fs->fs_type) {
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	f000 8088 	beq.w	8005f90 <put_fat+0x13e>
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	f000 80b0 	beq.w	8005fe6 <put_fat+0x194>
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	f040 80f5 	bne.w	8006076 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	61bb      	str	r3, [r7, #24]
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4413      	add	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	899b      	ldrh	r3, [r3, #12]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005eaa:	4413      	add	r3, r2
 8005eac:	4619      	mov	r1, r3
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7ff fe42 	bl	8005b38 <move_window>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005eb8:	7ffb      	ldrb	r3, [r7, #31]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f040 80d4 	bne.w	8006068 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	61ba      	str	r2, [r7, #24]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	8992      	ldrh	r2, [r2, #12]
 8005ed0:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ed4:	fb02 f200 	mul.w	r2, r2, r0
 8005ed8:	1a9b      	subs	r3, r3, r2
 8005eda:	440b      	add	r3, r1
 8005edc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00d      	beq.n	8005f04 <put_fat+0xb2>
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	b25b      	sxtb	r3, r3
 8005eee:	f003 030f 	and.w	r3, r3, #15
 8005ef2:	b25a      	sxtb	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	b25b      	sxtb	r3, r3
 8005efc:	4313      	orrs	r3, r2
 8005efe:	b25b      	sxtb	r3, r3
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	e001      	b.n	8005f08 <put_fat+0xb6>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	899b      	ldrh	r3, [r3, #12]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f22:	4413      	add	r3, r2
 8005f24:	4619      	mov	r1, r3
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f7ff fe06 	bl	8005b38 <move_window>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f30:	7ffb      	ldrb	r3, [r7, #31]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f040 809a 	bne.w	800606c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	899b      	ldrh	r3, [r3, #12]
 8005f42:	461a      	mov	r2, r3
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f4a:	fb02 f200 	mul.w	r2, r2, r0
 8005f4e:	1a9b      	subs	r3, r3, r2
 8005f50:	440b      	add	r3, r1
 8005f52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <put_fat+0x114>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	091b      	lsrs	r3, r3, #4
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	e00e      	b.n	8005f84 <put_fat+0x132>
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	b25b      	sxtb	r3, r3
 8005f6c:	f023 030f 	bic.w	r3, r3, #15
 8005f70:	b25a      	sxtb	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	0a1b      	lsrs	r3, r3, #8
 8005f76:	b25b      	sxtb	r3, r3
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	b25b      	sxtb	r3, r3
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	b25b      	sxtb	r3, r3
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	70da      	strb	r2, [r3, #3]
			break;
 8005f8e:	e072      	b.n	8006076 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	899b      	ldrh	r3, [r3, #12]
 8005f98:	085b      	lsrs	r3, r3, #1
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fa4:	4413      	add	r3, r2
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7ff fdc5 	bl	8005b38 <move_window>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005fb2:	7ffb      	ldrb	r3, [r7, #31]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d15b      	bne.n	8006070 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	8992      	ldrh	r2, [r2, #12]
 8005fc6:	fbb3 f0f2 	udiv	r0, r3, r2
 8005fca:	fb02 f200 	mul.w	r2, r2, r0
 8005fce:	1a9b      	subs	r3, r3, r2
 8005fd0:	440b      	add	r3, r1
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	b292      	uxth	r2, r2
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff fb38 	bl	800564e <st_word>
			fs->wflag = 1;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	70da      	strb	r2, [r3, #3]
			break;
 8005fe4:	e047      	b.n	8006076 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	899b      	ldrh	r3, [r3, #12]
 8005fee:	089b      	lsrs	r3, r3, #2
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ffa:	4413      	add	r3, r2
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f7ff fd9a 	bl	8005b38 <move_window>
 8006004:	4603      	mov	r3, r0
 8006006:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006008:	7ffb      	ldrb	r3, [r7, #31]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d132      	bne.n	8006074 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	8992      	ldrh	r2, [r2, #12]
 8006022:	fbb3 f0f2 	udiv	r0, r3, r2
 8006026:	fb02 f200 	mul.w	r2, r2, r0
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	440b      	add	r3, r1
 800602e:	4618      	mov	r0, r3
 8006030:	f7ff faea 	bl	8005608 <ld_dword>
 8006034:	4603      	mov	r3, r0
 8006036:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800603a:	4323      	orrs	r3, r4
 800603c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	8992      	ldrh	r2, [r2, #12]
 800604c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006050:	fb02 f200 	mul.w	r2, r2, r0
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	440b      	add	r3, r1
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff fb12 	bl	8005684 <st_dword>
			fs->wflag = 1;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2201      	movs	r2, #1
 8006064:	70da      	strb	r2, [r3, #3]
			break;
 8006066:	e006      	b.n	8006076 <put_fat+0x224>
			if (res != FR_OK) break;
 8006068:	bf00      	nop
 800606a:	e004      	b.n	8006076 <put_fat+0x224>
			if (res != FR_OK) break;
 800606c:	bf00      	nop
 800606e:	e002      	b.n	8006076 <put_fat+0x224>
			if (res != FR_OK) break;
 8006070:	bf00      	nop
 8006072:	e000      	b.n	8006076 <put_fat+0x224>
			if (res != FR_OK) break;
 8006074:	bf00      	nop
		}
	}
	return res;
 8006076:	7ffb      	ldrb	r3, [r7, #31]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3724      	adds	r7, #36	; 0x24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd90      	pop	{r4, r7, pc}

08006080 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d904      	bls.n	80060a6 <remove_chain+0x26>
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d301      	bcc.n	80060aa <remove_chain+0x2a>
 80060a6:	2302      	movs	r3, #2
 80060a8:	e04b      	b.n	8006142 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00c      	beq.n	80060ca <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80060b0:	f04f 32ff 	mov.w	r2, #4294967295
 80060b4:	6879      	ldr	r1, [r7, #4]
 80060b6:	69b8      	ldr	r0, [r7, #24]
 80060b8:	f7ff fecb 	bl	8005e52 <put_fat>
 80060bc:	4603      	mov	r3, r0
 80060be:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80060c0:	7ffb      	ldrb	r3, [r7, #31]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <remove_chain+0x4a>
 80060c6:	7ffb      	ldrb	r3, [r7, #31]
 80060c8:	e03b      	b.n	8006142 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80060ca:	68b9      	ldr	r1, [r7, #8]
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f7ff fdf0 	bl	8005cb2 <get_fat>
 80060d2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d031      	beq.n	800613e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d101      	bne.n	80060e4 <remove_chain+0x64>
 80060e0:	2302      	movs	r3, #2
 80060e2:	e02e      	b.n	8006142 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ea:	d101      	bne.n	80060f0 <remove_chain+0x70>
 80060ec:	2301      	movs	r3, #1
 80060ee:	e028      	b.n	8006142 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80060f0:	2200      	movs	r2, #0
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	69b8      	ldr	r0, [r7, #24]
 80060f6:	f7ff feac 	bl	8005e52 <put_fat>
 80060fa:	4603      	mov	r3, r0
 80060fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80060fe:	7ffb      	ldrb	r3, [r7, #31]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <remove_chain+0x88>
 8006104:	7ffb      	ldrb	r3, [r7, #31]
 8006106:	e01c      	b.n	8006142 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	695a      	ldr	r2, [r3, #20]
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	3b02      	subs	r3, #2
 8006112:	429a      	cmp	r2, r3
 8006114:	d20b      	bcs.n	800612e <remove_chain+0xae>
			fs->free_clst++;
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	791b      	ldrb	r3, [r3, #4]
 8006124:	f043 0301 	orr.w	r3, r3, #1
 8006128:	b2da      	uxtb	r2, r3
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	429a      	cmp	r2, r3
 800613a:	d3c6      	bcc.n	80060ca <remove_chain+0x4a>
 800613c:	e000      	b.n	8006140 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800613e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3720      	adds	r7, #32
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b088      	sub	sp, #32
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10d      	bne.n	800617c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d004      	beq.n	8006176 <create_chain+0x2c>
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	429a      	cmp	r2, r3
 8006174:	d31b      	bcc.n	80061ae <create_chain+0x64>
 8006176:	2301      	movs	r3, #1
 8006178:	61bb      	str	r3, [r7, #24]
 800617a:	e018      	b.n	80061ae <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff fd97 	bl	8005cb2 <get_fat>
 8006184:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d801      	bhi.n	8006190 <create_chain+0x46>
 800618c:	2301      	movs	r3, #1
 800618e:	e070      	b.n	8006272 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006196:	d101      	bne.n	800619c <create_chain+0x52>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	e06a      	b.n	8006272 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d201      	bcs.n	80061aa <create_chain+0x60>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	e063      	b.n	8006272 <create_chain+0x128>
		scl = clst;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	3301      	adds	r3, #1
 80061b6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d307      	bcc.n	80061d2 <create_chain+0x88>
				ncl = 2;
 80061c2:	2302      	movs	r3, #2
 80061c4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d901      	bls.n	80061d2 <create_chain+0x88>
 80061ce:	2300      	movs	r3, #0
 80061d0:	e04f      	b.n	8006272 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80061d2:	69f9      	ldr	r1, [r7, #28]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff fd6c 	bl	8005cb2 <get_fat>
 80061da:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00e      	beq.n	8006200 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d003      	beq.n	80061f0 <create_chain+0xa6>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ee:	d101      	bne.n	80061f4 <create_chain+0xaa>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	e03e      	b.n	8006272 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80061f4:	69fa      	ldr	r2, [r7, #28]
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d1da      	bne.n	80061b2 <create_chain+0x68>
 80061fc:	2300      	movs	r3, #0
 80061fe:	e038      	b.n	8006272 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006200:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006202:	f04f 32ff 	mov.w	r2, #4294967295
 8006206:	69f9      	ldr	r1, [r7, #28]
 8006208:	6938      	ldr	r0, [r7, #16]
 800620a:	f7ff fe22 	bl	8005e52 <put_fat>
 800620e:	4603      	mov	r3, r0
 8006210:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006212:	7dfb      	ldrb	r3, [r7, #23]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d109      	bne.n	800622c <create_chain+0xe2>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d006      	beq.n	800622c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800621e:	69fa      	ldr	r2, [r7, #28]
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	6938      	ldr	r0, [r7, #16]
 8006224:	f7ff fe15 	bl	8005e52 <put_fat>
 8006228:	4603      	mov	r3, r0
 800622a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800622c:	7dfb      	ldrb	r3, [r7, #23]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d116      	bne.n	8006260 <create_chain+0x116>
		fs->last_clst = ncl;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	69fa      	ldr	r2, [r7, #28]
 8006236:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	695a      	ldr	r2, [r3, #20]
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	3b02      	subs	r3, #2
 8006242:	429a      	cmp	r2, r3
 8006244:	d804      	bhi.n	8006250 <create_chain+0x106>
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	1e5a      	subs	r2, r3, #1
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	791b      	ldrb	r3, [r3, #4]
 8006254:	f043 0301 	orr.w	r3, r3, #1
 8006258:	b2da      	uxtb	r2, r3
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	711a      	strb	r2, [r3, #4]
 800625e:	e007      	b.n	8006270 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006260:	7dfb      	ldrb	r3, [r7, #23]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d102      	bne.n	800626c <create_chain+0x122>
 8006266:	f04f 33ff 	mov.w	r3, #4294967295
 800626a:	e000      	b.n	800626e <create_chain+0x124>
 800626c:	2301      	movs	r3, #1
 800626e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006270:	69fb      	ldr	r3, [r7, #28]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800627a:	b480      	push	{r7}
 800627c:	b087      	sub	sp, #28
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	3304      	adds	r3, #4
 8006290:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	899b      	ldrh	r3, [r3, #12]
 8006296:	461a      	mov	r2, r3
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	fbb3 f3f2 	udiv	r3, r3, r2
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	8952      	ldrh	r2, [r2, #10]
 80062a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80062a6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	1d1a      	adds	r2, r3, #4
 80062ac:	613a      	str	r2, [r7, #16]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <clmt_clust+0x42>
 80062b8:	2300      	movs	r3, #0
 80062ba:	e010      	b.n	80062de <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d307      	bcc.n	80062d4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	3304      	adds	r3, #4
 80062d0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80062d2:	e7e9      	b.n	80062a8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80062d4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	4413      	add	r3, r2
}
 80062de:	4618      	mov	r0, r3
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b086      	sub	sp, #24
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006300:	d204      	bcs.n	800630c <dir_sdi+0x22>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	f003 031f 	and.w	r3, r3, #31
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <dir_sdi+0x26>
		return FR_INT_ERR;
 800630c:	2302      	movs	r3, #2
 800630e:	e071      	b.n	80063f4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <dir_sdi+0x46>
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b02      	cmp	r3, #2
 8006328:	d902      	bls.n	8006330 <dir_sdi+0x46>
		clst = fs->dirbase;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10c      	bne.n	8006350 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	8912      	ldrh	r2, [r2, #8]
 800633e:	4293      	cmp	r3, r2
 8006340:	d301      	bcc.n	8006346 <dir_sdi+0x5c>
 8006342:	2302      	movs	r3, #2
 8006344:	e056      	b.n	80063f4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	61da      	str	r2, [r3, #28]
 800634e:	e02d      	b.n	80063ac <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	895b      	ldrh	r3, [r3, #10]
 8006354:	461a      	mov	r2, r3
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	899b      	ldrh	r3, [r3, #12]
 800635a:	fb03 f302 	mul.w	r3, r3, r2
 800635e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006360:	e019      	b.n	8006396 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6979      	ldr	r1, [r7, #20]
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff fca3 	bl	8005cb2 <get_fat>
 800636c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006374:	d101      	bne.n	800637a <dir_sdi+0x90>
 8006376:	2301      	movs	r3, #1
 8006378:	e03c      	b.n	80063f4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d904      	bls.n	800638a <dir_sdi+0xa0>
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	429a      	cmp	r2, r3
 8006388:	d301      	bcc.n	800638e <dir_sdi+0xa4>
 800638a:	2302      	movs	r3, #2
 800638c:	e032      	b.n	80063f4 <dir_sdi+0x10a>
			ofs -= csz;
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	429a      	cmp	r2, r3
 800639c:	d2e1      	bcs.n	8006362 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800639e:	6979      	ldr	r1, [r7, #20]
 80063a0:	6938      	ldr	r0, [r7, #16]
 80063a2:	f7ff fc67 	bl	8005c74 <clust2sect>
 80063a6:	4602      	mov	r2, r0
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <dir_sdi+0xd4>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e01a      	b.n	80063f4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	69da      	ldr	r2, [r3, #28]
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	899b      	ldrh	r3, [r3, #12]
 80063c6:	4619      	mov	r1, r3
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80063ce:	441a      	add	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	899b      	ldrh	r3, [r3, #12]
 80063de:	461a      	mov	r2, r3
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80063e6:	fb02 f200 	mul.w	r2, r2, r0
 80063ea:	1a9b      	subs	r3, r3, r2
 80063ec:	18ca      	adds	r2, r1, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	3320      	adds	r3, #32
 8006412:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <dir_next+0x28>
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006422:	d301      	bcc.n	8006428 <dir_next+0x2c>
 8006424:	2304      	movs	r3, #4
 8006426:	e0bb      	b.n	80065a0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	899b      	ldrh	r3, [r3, #12]
 800642c:	461a      	mov	r2, r3
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	fbb3 f1f2 	udiv	r1, r3, r2
 8006434:	fb02 f201 	mul.w	r2, r2, r1
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	2b00      	cmp	r3, #0
 800643c:	f040 809d 	bne.w	800657a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10b      	bne.n	800646a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	095b      	lsrs	r3, r3, #5
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	8912      	ldrh	r2, [r2, #8]
 800645a:	4293      	cmp	r3, r2
 800645c:	f0c0 808d 	bcc.w	800657a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	61da      	str	r2, [r3, #28]
 8006466:	2304      	movs	r3, #4
 8006468:	e09a      	b.n	80065a0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	899b      	ldrh	r3, [r3, #12]
 800646e:	461a      	mov	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	fbb3 f3f2 	udiv	r3, r3, r2
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	8952      	ldrh	r2, [r2, #10]
 800647a:	3a01      	subs	r2, #1
 800647c:	4013      	ands	r3, r2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d17b      	bne.n	800657a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	4619      	mov	r1, r3
 800648a:	4610      	mov	r0, r2
 800648c:	f7ff fc11 	bl	8005cb2 <get_fat>
 8006490:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d801      	bhi.n	800649c <dir_next+0xa0>
 8006498:	2302      	movs	r3, #2
 800649a:	e081      	b.n	80065a0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a2:	d101      	bne.n	80064a8 <dir_next+0xac>
 80064a4:	2301      	movs	r3, #1
 80064a6:	e07b      	b.n	80065a0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d359      	bcc.n	8006566 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d104      	bne.n	80064c2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	61da      	str	r2, [r3, #28]
 80064be:	2304      	movs	r3, #4
 80064c0:	e06e      	b.n	80065a0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	4619      	mov	r1, r3
 80064ca:	4610      	mov	r0, r2
 80064cc:	f7ff fe3d 	bl	800614a <create_chain>
 80064d0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <dir_next+0xe0>
 80064d8:	2307      	movs	r3, #7
 80064da:	e061      	b.n	80065a0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d101      	bne.n	80064e6 <dir_next+0xea>
 80064e2:	2302      	movs	r3, #2
 80064e4:	e05c      	b.n	80065a0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ec:	d101      	bne.n	80064f2 <dir_next+0xf6>
 80064ee:	2301      	movs	r3, #1
 80064f0:	e056      	b.n	80065a0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f7ff fadc 	bl	8005ab0 <sync_window>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <dir_next+0x106>
 80064fe:	2301      	movs	r3, #1
 8006500:	e04e      	b.n	80065a0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	899b      	ldrh	r3, [r3, #12]
 800650c:	461a      	mov	r2, r3
 800650e:	2100      	movs	r1, #0
 8006510:	f7ff f905 	bl	800571e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006514:	2300      	movs	r3, #0
 8006516:	613b      	str	r3, [r7, #16]
 8006518:	6979      	ldr	r1, [r7, #20]
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f7ff fbaa 	bl	8005c74 <clust2sect>
 8006520:	4602      	mov	r2, r0
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	631a      	str	r2, [r3, #48]	; 0x30
 8006526:	e012      	b.n	800654e <dir_next+0x152>
						fs->wflag = 1;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2201      	movs	r2, #1
 800652c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f7ff fabe 	bl	8005ab0 <sync_window>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <dir_next+0x142>
 800653a:	2301      	movs	r3, #1
 800653c:	e030      	b.n	80065a0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	3301      	adds	r3, #1
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	631a      	str	r2, [r3, #48]	; 0x30
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	895b      	ldrh	r3, [r3, #10]
 8006552:	461a      	mov	r2, r3
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	4293      	cmp	r3, r2
 8006558:	d3e6      	bcc.n	8006528 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	1ad2      	subs	r2, r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800656c:	6979      	ldr	r1, [r7, #20]
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f7ff fb80 	bl	8005c74 <clust2sect>
 8006574:	4602      	mov	r2, r0
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	899b      	ldrh	r3, [r3, #12]
 800658a:	461a      	mov	r2, r3
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006592:	fb02 f200 	mul.w	r2, r2, r0
 8006596:	1a9b      	subs	r3, r3, r2
 8006598:	18ca      	adds	r2, r1, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80065b8:	2100      	movs	r1, #0
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff fe95 	bl	80062ea <dir_sdi>
 80065c0:	4603      	mov	r3, r0
 80065c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d12b      	bne.n	8006622 <dir_alloc+0x7a>
		n = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	4619      	mov	r1, r3
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f7ff faaf 	bl	8005b38 <move_window>
 80065da:	4603      	mov	r3, r0
 80065dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80065de:	7dfb      	ldrb	r3, [r7, #23]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d11d      	bne.n	8006620 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2be5      	cmp	r3, #229	; 0xe5
 80065ec:	d004      	beq.n	80065f8 <dir_alloc+0x50>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d107      	bne.n	8006608 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	3301      	adds	r3, #1
 80065fc:	613b      	str	r3, [r7, #16]
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d102      	bne.n	800660c <dir_alloc+0x64>
 8006606:	e00c      	b.n	8006622 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006608:	2300      	movs	r3, #0
 800660a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800660c:	2101      	movs	r1, #1
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7ff fef4 	bl	80063fc <dir_next>
 8006614:	4603      	mov	r3, r0
 8006616:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006618:	7dfb      	ldrb	r3, [r7, #23]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0d7      	beq.n	80065ce <dir_alloc+0x26>
 800661e:	e000      	b.n	8006622 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006620:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006622:	7dfb      	ldrb	r3, [r7, #23]
 8006624:	2b04      	cmp	r3, #4
 8006626:	d101      	bne.n	800662c <dir_alloc+0x84>
 8006628:	2307      	movs	r3, #7
 800662a:	75fb      	strb	r3, [r7, #23]
	return res;
 800662c:	7dfb      	ldrb	r3, [r7, #23]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	331a      	adds	r3, #26
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe ffc7 	bl	80055d8 <ld_word>
 800664a:	4603      	mov	r3, r0
 800664c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b03      	cmp	r3, #3
 8006654:	d109      	bne.n	800666a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	3314      	adds	r3, #20
 800665a:	4618      	mov	r0, r3
 800665c:	f7fe ffbc 	bl	80055d8 <ld_word>
 8006660:	4603      	mov	r3, r0
 8006662:	041b      	lsls	r3, r3, #16
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800666a:	68fb      	ldr	r3, [r7, #12]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	331a      	adds	r3, #26
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	b292      	uxth	r2, r2
 8006688:	4611      	mov	r1, r2
 800668a:	4618      	mov	r0, r3
 800668c:	f7fe ffdf 	bl	800564e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b03      	cmp	r3, #3
 8006696:	d109      	bne.n	80066ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f103 0214 	add.w	r2, r3, #20
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	0c1b      	lsrs	r3, r3, #16
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	4619      	mov	r1, r3
 80066a6:	4610      	mov	r0, r2
 80066a8:	f7fe ffd1 	bl	800564e <st_word>
	}
}
 80066ac:	bf00      	nop
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80066c2:	2100      	movs	r1, #0
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff fe10 	bl	80062ea <dir_sdi>
 80066ca:	4603      	mov	r3, r0
 80066cc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <dir_find+0x24>
 80066d4:	7dfb      	ldrb	r3, [r7, #23]
 80066d6:	e03e      	b.n	8006756 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	4619      	mov	r1, r3
 80066de:	6938      	ldr	r0, [r7, #16]
 80066e0:	f7ff fa2a 	bl	8005b38 <move_window>
 80066e4:	4603      	mov	r3, r0
 80066e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d12f      	bne.n	800674e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d102      	bne.n	8006702 <dir_find+0x4e>
 80066fc:	2304      	movs	r3, #4
 80066fe:	75fb      	strb	r3, [r7, #23]
 8006700:	e028      	b.n	8006754 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	330b      	adds	r3, #11
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800670e:	b2da      	uxtb	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	330b      	adds	r3, #11
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	f003 0308 	and.w	r3, r3, #8
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <dir_find+0x86>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a18      	ldr	r0, [r3, #32]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3324      	adds	r3, #36	; 0x24
 800672c:	220b      	movs	r2, #11
 800672e:	4619      	mov	r1, r3
 8006730:	f7ff f80f 	bl	8005752 <mem_cmp>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00b      	beq.n	8006752 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800673a:	2100      	movs	r1, #0
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff fe5d 	bl	80063fc <dir_next>
 8006742:	4603      	mov	r3, r0
 8006744:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006746:	7dfb      	ldrb	r3, [r7, #23]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d0c5      	beq.n	80066d8 <dir_find+0x24>
 800674c:	e002      	b.n	8006754 <dir_find+0xa0>
		if (res != FR_OK) break;
 800674e:	bf00      	nop
 8006750:	e000      	b.n	8006754 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006752:	bf00      	nop

	return res;
 8006754:	7dfb      	ldrb	r3, [r7, #23]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800676c:	2101      	movs	r1, #1
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff ff1a 	bl	80065a8 <dir_alloc>
 8006774:	4603      	mov	r3, r0
 8006776:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006778:	7bfb      	ldrb	r3, [r7, #15]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d11c      	bne.n	80067b8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	4619      	mov	r1, r3
 8006784:	68b8      	ldr	r0, [r7, #8]
 8006786:	f7ff f9d7 	bl	8005b38 <move_window>
 800678a:	4603      	mov	r3, r0
 800678c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d111      	bne.n	80067b8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	2220      	movs	r2, #32
 800679a:	2100      	movs	r1, #0
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe ffbe 	bl	800571e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a18      	ldr	r0, [r3, #32]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3324      	adds	r3, #36	; 0x24
 80067aa:	220b      	movs	r2, #11
 80067ac:	4619      	mov	r1, r3
 80067ae:	f7fe ff95 	bl	80056dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2201      	movs	r2, #1
 80067b6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
	...

080067c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3324      	adds	r3, #36	; 0x24
 80067d8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80067da:	220b      	movs	r2, #11
 80067dc:	2120      	movs	r1, #32
 80067de:	68b8      	ldr	r0, [r7, #8]
 80067e0:	f7fe ff9d 	bl	800571e <mem_set>
	si = i = 0; ni = 8;
 80067e4:	2300      	movs	r3, #0
 80067e6:	613b      	str	r3, [r7, #16]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	617b      	str	r3, [r7, #20]
 80067ec:	2308      	movs	r3, #8
 80067ee:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	617a      	str	r2, [r7, #20]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80067fe:	7ffb      	ldrb	r3, [r7, #31]
 8006800:	2b20      	cmp	r3, #32
 8006802:	d94e      	bls.n	80068a2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006804:	7ffb      	ldrb	r3, [r7, #31]
 8006806:	2b2f      	cmp	r3, #47	; 0x2f
 8006808:	d006      	beq.n	8006818 <create_name+0x54>
 800680a:	7ffb      	ldrb	r3, [r7, #31]
 800680c:	2b5c      	cmp	r3, #92	; 0x5c
 800680e:	d110      	bne.n	8006832 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006810:	e002      	b.n	8006818 <create_name+0x54>
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	3301      	adds	r3, #1
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	4413      	add	r3, r2
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b2f      	cmp	r3, #47	; 0x2f
 8006822:	d0f6      	beq.n	8006812 <create_name+0x4e>
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	4413      	add	r3, r2
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b5c      	cmp	r3, #92	; 0x5c
 800682e:	d0f0      	beq.n	8006812 <create_name+0x4e>
			break;
 8006830:	e038      	b.n	80068a4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006832:	7ffb      	ldrb	r3, [r7, #31]
 8006834:	2b2e      	cmp	r3, #46	; 0x2e
 8006836:	d003      	beq.n	8006840 <create_name+0x7c>
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	429a      	cmp	r2, r3
 800683e:	d30c      	bcc.n	800685a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	2b0b      	cmp	r3, #11
 8006844:	d002      	beq.n	800684c <create_name+0x88>
 8006846:	7ffb      	ldrb	r3, [r7, #31]
 8006848:	2b2e      	cmp	r3, #46	; 0x2e
 800684a:	d001      	beq.n	8006850 <create_name+0x8c>
 800684c:	2306      	movs	r3, #6
 800684e:	e044      	b.n	80068da <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006850:	2308      	movs	r3, #8
 8006852:	613b      	str	r3, [r7, #16]
 8006854:	230b      	movs	r3, #11
 8006856:	61bb      	str	r3, [r7, #24]
			continue;
 8006858:	e022      	b.n	80068a0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800685a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800685e:	2b00      	cmp	r3, #0
 8006860:	da04      	bge.n	800686c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006862:	7ffb      	ldrb	r3, [r7, #31]
 8006864:	3b80      	subs	r3, #128	; 0x80
 8006866:	4a1f      	ldr	r2, [pc, #124]	; (80068e4 <create_name+0x120>)
 8006868:	5cd3      	ldrb	r3, [r2, r3]
 800686a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800686c:	7ffb      	ldrb	r3, [r7, #31]
 800686e:	4619      	mov	r1, r3
 8006870:	481d      	ldr	r0, [pc, #116]	; (80068e8 <create_name+0x124>)
 8006872:	f7fe ff95 	bl	80057a0 <chk_chr>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <create_name+0xbc>
 800687c:	2306      	movs	r3, #6
 800687e:	e02c      	b.n	80068da <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006880:	7ffb      	ldrb	r3, [r7, #31]
 8006882:	2b60      	cmp	r3, #96	; 0x60
 8006884:	d905      	bls.n	8006892 <create_name+0xce>
 8006886:	7ffb      	ldrb	r3, [r7, #31]
 8006888:	2b7a      	cmp	r3, #122	; 0x7a
 800688a:	d802      	bhi.n	8006892 <create_name+0xce>
 800688c:	7ffb      	ldrb	r3, [r7, #31]
 800688e:	3b20      	subs	r3, #32
 8006890:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	613a      	str	r2, [r7, #16]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	4413      	add	r3, r2
 800689c:	7ffa      	ldrb	r2, [r7, #31]
 800689e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80068a0:	e7a6      	b.n	80067f0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80068a2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	441a      	add	r2, r3
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <create_name+0xf4>
 80068b4:	2306      	movs	r3, #6
 80068b6:	e010      	b.n	80068da <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2be5      	cmp	r3, #229	; 0xe5
 80068be:	d102      	bne.n	80068c6 <create_name+0x102>
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2205      	movs	r2, #5
 80068c4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80068c6:	7ffb      	ldrb	r3, [r7, #31]
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	d801      	bhi.n	80068d0 <create_name+0x10c>
 80068cc:	2204      	movs	r2, #4
 80068ce:	e000      	b.n	80068d2 <create_name+0x10e>
 80068d0:	2200      	movs	r2, #0
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	330b      	adds	r3, #11
 80068d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80068d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3720      	adds	r7, #32
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	080164d4 	.word	0x080164d4
 80068e8:	08013af4 	.word	0x08013af4

080068ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006900:	e002      	b.n	8006908 <follow_path+0x1c>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	3301      	adds	r3, #1
 8006906:	603b      	str	r3, [r7, #0]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b2f      	cmp	r3, #47	; 0x2f
 800690e:	d0f8      	beq.n	8006902 <follow_path+0x16>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b5c      	cmp	r3, #92	; 0x5c
 8006916:	d0f4      	beq.n	8006902 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	2200      	movs	r2, #0
 800691c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b1f      	cmp	r3, #31
 8006924:	d80a      	bhi.n	800693c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2280      	movs	r2, #128	; 0x80
 800692a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800692e:	2100      	movs	r1, #0
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff fcda 	bl	80062ea <dir_sdi>
 8006936:	4603      	mov	r3, r0
 8006938:	75fb      	strb	r3, [r7, #23]
 800693a:	e048      	b.n	80069ce <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800693c:	463b      	mov	r3, r7
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff ff3f 	bl	80067c4 <create_name>
 8006946:	4603      	mov	r3, r0
 8006948:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d139      	bne.n	80069c4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff feaf 	bl	80066b4 <dir_find>
 8006956:	4603      	mov	r3, r0
 8006958:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006960:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006962:	7dfb      	ldrb	r3, [r7, #23]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006968:	7dfb      	ldrb	r3, [r7, #23]
 800696a:	2b04      	cmp	r3, #4
 800696c:	d12c      	bne.n	80069c8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800696e:	7afb      	ldrb	r3, [r7, #11]
 8006970:	f003 0304 	and.w	r3, r3, #4
 8006974:	2b00      	cmp	r3, #0
 8006976:	d127      	bne.n	80069c8 <follow_path+0xdc>
 8006978:	2305      	movs	r3, #5
 800697a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800697c:	e024      	b.n	80069c8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800697e:	7afb      	ldrb	r3, [r7, #11]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d121      	bne.n	80069cc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	799b      	ldrb	r3, [r3, #6]
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b00      	cmp	r3, #0
 8006992:	d102      	bne.n	800699a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006994:	2305      	movs	r3, #5
 8006996:	75fb      	strb	r3, [r7, #23]
 8006998:	e019      	b.n	80069ce <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	8992      	ldrh	r2, [r2, #12]
 80069a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80069ac:	fb02 f200 	mul.w	r2, r2, r0
 80069b0:	1a9b      	subs	r3, r3, r2
 80069b2:	440b      	add	r3, r1
 80069b4:	4619      	mov	r1, r3
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f7ff fe3d 	bl	8006636 <ld_clust>
 80069bc:	4602      	mov	r2, r0
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80069c2:	e7bb      	b.n	800693c <follow_path+0x50>
			if (res != FR_OK) break;
 80069c4:	bf00      	nop
 80069c6:	e002      	b.n	80069ce <follow_path+0xe2>
				break;
 80069c8:	bf00      	nop
 80069ca:	e000      	b.n	80069ce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80069cc:	bf00      	nop
			}
		}
	}

	return res;
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80069e0:	f04f 33ff 	mov.w	r3, #4294967295
 80069e4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d031      	beq.n	8006a52 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	e002      	b.n	80069fc <get_ldnumber+0x24>
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	3301      	adds	r3, #1
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d903      	bls.n	8006a0c <get_ldnumber+0x34>
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b3a      	cmp	r3, #58	; 0x3a
 8006a0a:	d1f4      	bne.n	80069f6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b3a      	cmp	r3, #58	; 0x3a
 8006a12:	d11c      	bne.n	8006a4e <get_ldnumber+0x76>
			tp = *path;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	60fa      	str	r2, [r7, #12]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	3b30      	subs	r3, #48	; 0x30
 8006a24:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2b09      	cmp	r3, #9
 8006a2a:	d80e      	bhi.n	8006a4a <get_ldnumber+0x72>
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d10a      	bne.n	8006a4a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d107      	bne.n	8006a4a <get_ldnumber+0x72>
					vol = (int)i;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	3301      	adds	r3, #1
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	e002      	b.n	8006a54 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006a4e:	2300      	movs	r3, #0
 8006a50:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006a52:	693b      	ldr	r3, [r7, #16]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	371c      	adds	r7, #28
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	70da      	strb	r2, [r3, #3]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f04f 32ff 	mov.w	r2, #4294967295
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff f85c 	bl	8005b38 <move_window>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <check_fs+0x2a>
 8006a86:	2304      	movs	r3, #4
 8006a88:	e038      	b.n	8006afc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	3334      	adds	r3, #52	; 0x34
 8006a8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fe fda0 	bl	80055d8 <ld_word>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d001      	beq.n	8006aa8 <check_fs+0x48>
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e029      	b.n	8006afc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006aae:	2be9      	cmp	r3, #233	; 0xe9
 8006ab0:	d009      	beq.n	8006ac6 <check_fs+0x66>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ab8:	2beb      	cmp	r3, #235	; 0xeb
 8006aba:	d11e      	bne.n	8006afa <check_fs+0x9a>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006ac2:	2b90      	cmp	r3, #144	; 0x90
 8006ac4:	d119      	bne.n	8006afa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3334      	adds	r3, #52	; 0x34
 8006aca:	3336      	adds	r3, #54	; 0x36
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fe fd9b 	bl	8005608 <ld_dword>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ad8:	4a0a      	ldr	r2, [pc, #40]	; (8006b04 <check_fs+0xa4>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d101      	bne.n	8006ae2 <check_fs+0x82>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	e00c      	b.n	8006afc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3334      	adds	r3, #52	; 0x34
 8006ae6:	3352      	adds	r3, #82	; 0x52
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7fe fd8d 	bl	8005608 <ld_dword>
 8006aee:	4602      	mov	r2, r0
 8006af0:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <check_fs+0xa8>)
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d101      	bne.n	8006afa <check_fs+0x9a>
 8006af6:	2300      	movs	r3, #0
 8006af8:	e000      	b.n	8006afc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006afa:	2302      	movs	r3, #2
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	00544146 	.word	0x00544146
 8006b08:	33544146 	.word	0x33544146

08006b0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b096      	sub	sp, #88	; 0x58
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	4613      	mov	r3, r2
 8006b18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f7ff ff59 	bl	80069d8 <get_ldnumber>
 8006b26:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	da01      	bge.n	8006b32 <find_volume+0x26>
 8006b2e:	230b      	movs	r3, #11
 8006b30:	e265      	b.n	8006ffe <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006b32:	4ab0      	ldr	r2, [pc, #704]	; (8006df4 <find_volume+0x2e8>)
 8006b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b3a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <find_volume+0x3a>
 8006b42:	230c      	movs	r3, #12
 8006b44:	e25b      	b.n	8006ffe <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006b4c:	79fb      	ldrb	r3, [r7, #7]
 8006b4e:	f023 0301 	bic.w	r3, r3, #1
 8006b52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01a      	beq.n	8006b92 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5e:	785b      	ldrb	r3, [r3, #1]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fe fc9b 	bl	800549c <disk_status>
 8006b66:	4603      	mov	r3, r0
 8006b68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006b6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10c      	bne.n	8006b92 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d007      	beq.n	8006b8e <find_volume+0x82>
 8006b7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b82:	f003 0304 	and.w	r3, r3, #4
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006b8a:	230a      	movs	r3, #10
 8006b8c:	e237      	b.n	8006ffe <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e235      	b.n	8006ffe <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	2200      	movs	r2, #0
 8006b96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	785b      	ldrb	r3, [r3, #1]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fe fc93 	bl	80054d0 <disk_initialize>
 8006baa:	4603      	mov	r3, r0
 8006bac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006bb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e21e      	b.n	8006ffe <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d007      	beq.n	8006bd6 <find_volume+0xca>
 8006bc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006bca:	f003 0304 	and.w	r3, r3, #4
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006bd2:	230a      	movs	r3, #10
 8006bd4:	e213      	b.n	8006ffe <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	7858      	ldrb	r0, [r3, #1]
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	330c      	adds	r3, #12
 8006bde:	461a      	mov	r2, r3
 8006be0:	2102      	movs	r1, #2
 8006be2:	f7fe fcdb 	bl	800559c <disk_ioctl>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <find_volume+0xe4>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e206      	b.n	8006ffe <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	899b      	ldrh	r3, [r3, #12]
 8006bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf8:	d80d      	bhi.n	8006c16 <find_volume+0x10a>
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	899b      	ldrh	r3, [r3, #12]
 8006bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c02:	d308      	bcc.n	8006c16 <find_volume+0x10a>
 8006c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c06:	899b      	ldrh	r3, [r3, #12]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0c:	899b      	ldrh	r3, [r3, #12]
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	4013      	ands	r3, r2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <find_volume+0x10e>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e1f1      	b.n	8006ffe <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006c1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c22:	f7ff ff1d 	bl	8006a60 <check_fs>
 8006c26:	4603      	mov	r3, r0
 8006c28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d14b      	bne.n	8006ccc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006c34:	2300      	movs	r3, #0
 8006c36:	643b      	str	r3, [r7, #64]	; 0x40
 8006c38:	e01f      	b.n	8006c7a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c42:	011b      	lsls	r3, r3, #4
 8006c44:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006c48:	4413      	add	r3, r2
 8006c4a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	3304      	adds	r3, #4
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d006      	beq.n	8006c64 <find_volume+0x158>
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	3308      	adds	r3, #8
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fe fcd4 	bl	8005608 <ld_dword>
 8006c60:	4602      	mov	r2, r0
 8006c62:	e000      	b.n	8006c66 <find_volume+0x15a>
 8006c64:	2200      	movs	r2, #0
 8006c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006c6e:	440b      	add	r3, r1
 8006c70:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c76:	3301      	adds	r3, #1
 8006c78:	643b      	str	r3, [r7, #64]	; 0x40
 8006c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c7c:	2b03      	cmp	r3, #3
 8006c7e:	d9dc      	bls.n	8006c3a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006c80:	2300      	movs	r3, #0
 8006c82:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <find_volume+0x184>
 8006c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006c98:	4413      	add	r3, r2
 8006c9a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006c9e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <find_volume+0x1a6>
 8006ca6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ca8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006caa:	f7ff fed9 	bl	8006a60 <check_fs>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	e000      	b.n	8006cb4 <find_volume+0x1a8>
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006cb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d905      	bls.n	8006ccc <find_volume+0x1c0>
 8006cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8006cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d9e1      	bls.n	8006c90 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006ccc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	d101      	bne.n	8006cd8 <find_volume+0x1cc>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e192      	b.n	8006ffe <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006cd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d901      	bls.n	8006ce4 <find_volume+0x1d8>
 8006ce0:	230d      	movs	r3, #13
 8006ce2:	e18c      	b.n	8006ffe <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce6:	3334      	adds	r3, #52	; 0x34
 8006ce8:	330b      	adds	r3, #11
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fe fc74 	bl	80055d8 <ld_word>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf6:	899b      	ldrh	r3, [r3, #12]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d001      	beq.n	8006d00 <find_volume+0x1f4>
 8006cfc:	230d      	movs	r3, #13
 8006cfe:	e17e      	b.n	8006ffe <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d02:	3334      	adds	r3, #52	; 0x34
 8006d04:	3316      	adds	r3, #22
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe fc66 	bl	80055d8 <ld_word>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d106      	bne.n	8006d24 <find_volume+0x218>
 8006d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d18:	3334      	adds	r3, #52	; 0x34
 8006d1a:	3324      	adds	r3, #36	; 0x24
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fe fc73 	bl	8005608 <ld_dword>
 8006d22:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d28:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d32:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d36:	789b      	ldrb	r3, [r3, #2]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d005      	beq.n	8006d48 <find_volume+0x23c>
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3e:	789b      	ldrb	r3, [r3, #2]
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d001      	beq.n	8006d48 <find_volume+0x23c>
 8006d44:	230d      	movs	r3, #13
 8006d46:	e15a      	b.n	8006ffe <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4a:	789b      	ldrb	r3, [r3, #2]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d50:	fb02 f303 	mul.w	r3, r2, r3
 8006d54:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d60:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d64:	895b      	ldrh	r3, [r3, #10]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d008      	beq.n	8006d7c <find_volume+0x270>
 8006d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6c:	895b      	ldrh	r3, [r3, #10]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d72:	895b      	ldrh	r3, [r3, #10]
 8006d74:	3b01      	subs	r3, #1
 8006d76:	4013      	ands	r3, r2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <find_volume+0x274>
 8006d7c:	230d      	movs	r3, #13
 8006d7e:	e13e      	b.n	8006ffe <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d82:	3334      	adds	r3, #52	; 0x34
 8006d84:	3311      	adds	r3, #17
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fe fc26 	bl	80055d8 <ld_word>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	461a      	mov	r2, r3
 8006d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d92:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d96:	891b      	ldrh	r3, [r3, #8]
 8006d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d9a:	8992      	ldrh	r2, [r2, #12]
 8006d9c:	0952      	lsrs	r2, r2, #5
 8006d9e:	b292      	uxth	r2, r2
 8006da0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006da4:	fb02 f201 	mul.w	r2, r2, r1
 8006da8:	1a9b      	subs	r3, r3, r2
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <find_volume+0x2a8>
 8006db0:	230d      	movs	r3, #13
 8006db2:	e124      	b.n	8006ffe <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db6:	3334      	adds	r3, #52	; 0x34
 8006db8:	3313      	adds	r3, #19
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fe fc0c 	bl	80055d8 <ld_word>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d106      	bne.n	8006dd8 <find_volume+0x2cc>
 8006dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dcc:	3334      	adds	r3, #52	; 0x34
 8006dce:	3320      	adds	r3, #32
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fe fc19 	bl	8005608 <ld_dword>
 8006dd6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dda:	3334      	adds	r3, #52	; 0x34
 8006ddc:	330e      	adds	r3, #14
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fe fbfa 	bl	80055d8 <ld_word>
 8006de4:	4603      	mov	r3, r0
 8006de6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006de8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d104      	bne.n	8006df8 <find_volume+0x2ec>
 8006dee:	230d      	movs	r3, #13
 8006df0:	e105      	b.n	8006ffe <find_volume+0x4f2>
 8006df2:	bf00      	nop
 8006df4:	200000dc 	.word	0x200000dc

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006df8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dfc:	4413      	add	r3, r2
 8006dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e00:	8911      	ldrh	r1, [r2, #8]
 8006e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e04:	8992      	ldrh	r2, [r2, #12]
 8006e06:	0952      	lsrs	r2, r2, #5
 8006e08:	b292      	uxth	r2, r2
 8006e0a:	fbb1 f2f2 	udiv	r2, r1, r2
 8006e0e:	b292      	uxth	r2, r2
 8006e10:	4413      	add	r3, r2
 8006e12:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d201      	bcs.n	8006e20 <find_volume+0x314>
 8006e1c:	230d      	movs	r3, #13
 8006e1e:	e0ee      	b.n	8006ffe <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006e20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e28:	8952      	ldrh	r2, [r2, #10]
 8006e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <find_volume+0x32e>
 8006e36:	230d      	movs	r3, #13
 8006e38:	e0e1      	b.n	8006ffe <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d802      	bhi.n	8006e50 <find_volume+0x344>
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d802      	bhi.n	8006e60 <find_volume+0x354>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	1c9a      	adds	r2, r3, #2
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e6c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006e6e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e72:	441a      	add	r2, r3
 8006e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e76:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006e78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	441a      	add	r2, r3
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e80:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8006e82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d11e      	bne.n	8006ec8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8c:	3334      	adds	r3, #52	; 0x34
 8006e8e:	332a      	adds	r3, #42	; 0x2a
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fe fba1 	bl	80055d8 <ld_word>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <find_volume+0x394>
 8006e9c:	230d      	movs	r3, #13
 8006e9e:	e0ae      	b.n	8006ffe <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea2:	891b      	ldrh	r3, [r3, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <find_volume+0x3a0>
 8006ea8:	230d      	movs	r3, #13
 8006eaa:	e0a8      	b.n	8006ffe <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	3334      	adds	r3, #52	; 0x34
 8006eb0:	332c      	adds	r3, #44	; 0x2c
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe fba8 	bl	8005608 <ld_dword>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ec6:	e01f      	b.n	8006f08 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	891b      	ldrh	r3, [r3, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <find_volume+0x3c8>
 8006ed0:	230d      	movs	r3, #13
 8006ed2:	e094      	b.n	8006ffe <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eda:	441a      	add	r2, r3
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006ee0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d103      	bne.n	8006ef0 <find_volume+0x3e4>
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	e00a      	b.n	8006f06 <find_volume+0x3fa>
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	699a      	ldr	r2, [r3, #24]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	4413      	add	r3, r2
 8006efa:	085a      	lsrs	r2, r3, #1
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006f06:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	69da      	ldr	r2, [r3, #28]
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0e:	899b      	ldrh	r3, [r3, #12]
 8006f10:	4619      	mov	r1, r3
 8006f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f14:	440b      	add	r3, r1
 8006f16:	3b01      	subs	r3, #1
 8006f18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f1a:	8989      	ldrh	r1, [r1, #12]
 8006f1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d201      	bcs.n	8006f28 <find_volume+0x41c>
 8006f24:	230d      	movs	r3, #13
 8006f26:	e06a      	b.n	8006ffe <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2e:	615a      	str	r2, [r3, #20]
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	695a      	ldr	r2, [r3, #20]
 8006f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f36:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	2280      	movs	r2, #128	; 0x80
 8006f3c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006f3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f42:	2b03      	cmp	r3, #3
 8006f44:	d149      	bne.n	8006fda <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f48:	3334      	adds	r3, #52	; 0x34
 8006f4a:	3330      	adds	r3, #48	; 0x30
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fe fb43 	bl	80055d8 <ld_word>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d140      	bne.n	8006fda <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f60:	f7fe fdea 	bl	8005b38 <move_window>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d137      	bne.n	8006fda <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f72:	3334      	adds	r3, #52	; 0x34
 8006f74:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fe fb2d 	bl	80055d8 <ld_word>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	461a      	mov	r2, r3
 8006f82:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d127      	bne.n	8006fda <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8c:	3334      	adds	r3, #52	; 0x34
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fe fb3a 	bl	8005608 <ld_dword>
 8006f94:	4602      	mov	r2, r0
 8006f96:	4b1c      	ldr	r3, [pc, #112]	; (8007008 <find_volume+0x4fc>)
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d11e      	bne.n	8006fda <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9e:	3334      	adds	r3, #52	; 0x34
 8006fa0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fe fb2f 	bl	8005608 <ld_dword>
 8006faa:	4602      	mov	r2, r0
 8006fac:	4b17      	ldr	r3, [pc, #92]	; (800700c <find_volume+0x500>)
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d113      	bne.n	8006fda <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	3334      	adds	r3, #52	; 0x34
 8006fb6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe fb24 	bl	8005608 <ld_dword>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	3334      	adds	r3, #52	; 0x34
 8006fca:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fe fb1a 	bl	8005608 <ld_dword>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006fe0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006fe2:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <find_volume+0x504>)
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	4b09      	ldr	r3, [pc, #36]	; (8007010 <find_volume+0x504>)
 8006fec:	801a      	strh	r2, [r3, #0]
 8006fee:	4b08      	ldr	r3, [pc, #32]	; (8007010 <find_volume+0x504>)
 8006ff0:	881a      	ldrh	r2, [r3, #0]
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006ff6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ff8:	f7fe fd36 	bl	8005a68 <clear_lock>
#endif
	return FR_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3758      	adds	r7, #88	; 0x58
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	41615252 	.word	0x41615252
 800700c:	61417272 	.word	0x61417272
 8007010:	200000e0 	.word	0x200000e0

08007014 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800701e:	2309      	movs	r3, #9
 8007020:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d01c      	beq.n	8007062 <validate+0x4e>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d018      	beq.n	8007062 <validate+0x4e>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d013      	beq.n	8007062 <validate+0x4e>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	889a      	ldrh	r2, [r3, #4]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	88db      	ldrh	r3, [r3, #6]
 8007044:	429a      	cmp	r2, r3
 8007046:	d10c      	bne.n	8007062 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	785b      	ldrb	r3, [r3, #1]
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe fa24 	bl	800549c <disk_status>
 8007054:	4603      	mov	r3, r0
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <validate+0x4e>
			res = FR_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d102      	bne.n	800706e <validate+0x5a>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	e000      	b.n	8007070 <validate+0x5c>
 800706e:	2300      	movs	r3, #0
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	6013      	str	r3, [r2, #0]
	return res;
 8007074:	7bfb      	ldrb	r3, [r7, #15]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
	...

08007080 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b088      	sub	sp, #32
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	4613      	mov	r3, r2
 800708c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007092:	f107 0310 	add.w	r3, r7, #16
 8007096:	4618      	mov	r0, r3
 8007098:	f7ff fc9e 	bl	80069d8 <get_ldnumber>
 800709c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	da01      	bge.n	80070a8 <f_mount+0x28>
 80070a4:	230b      	movs	r3, #11
 80070a6:	e02b      	b.n	8007100 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80070a8:	4a17      	ldr	r2, [pc, #92]	; (8007108 <f_mount+0x88>)
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80070b8:	69b8      	ldr	r0, [r7, #24]
 80070ba:	f7fe fcd5 	bl	8005a68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	2200      	movs	r2, #0
 80070c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	490d      	ldr	r1, [pc, #52]	; (8007108 <f_mount+0x88>)
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <f_mount+0x66>
 80070e0:	79fb      	ldrb	r3, [r7, #7]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d001      	beq.n	80070ea <f_mount+0x6a>
 80070e6:	2300      	movs	r3, #0
 80070e8:	e00a      	b.n	8007100 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80070ea:	f107 010c 	add.w	r1, r7, #12
 80070ee:	f107 0308 	add.w	r3, r7, #8
 80070f2:	2200      	movs	r2, #0
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff fd09 	bl	8006b0c <find_volume>
 80070fa:	4603      	mov	r3, r0
 80070fc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3720      	adds	r7, #32
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	200000dc 	.word	0x200000dc

0800710c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b098      	sub	sp, #96	; 0x60
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	4613      	mov	r3, r2
 8007118:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <f_open+0x18>
 8007120:	2309      	movs	r3, #9
 8007122:	e1bb      	b.n	800749c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800712a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800712c:	79fa      	ldrb	r2, [r7, #7]
 800712e:	f107 0110 	add.w	r1, r7, #16
 8007132:	f107 0308 	add.w	r3, r7, #8
 8007136:	4618      	mov	r0, r3
 8007138:	f7ff fce8 	bl	8006b0c <find_volume>
 800713c:	4603      	mov	r3, r0
 800713e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007142:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007146:	2b00      	cmp	r3, #0
 8007148:	f040 819f 	bne.w	800748a <f_open+0x37e>
		dj.obj.fs = fs;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	f107 0314 	add.w	r3, r7, #20
 8007156:	4611      	mov	r1, r2
 8007158:	4618      	mov	r0, r3
 800715a:	f7ff fbc7 	bl	80068ec <follow_path>
 800715e:	4603      	mov	r3, r0
 8007160:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007164:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007168:	2b00      	cmp	r3, #0
 800716a:	d11a      	bne.n	80071a2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800716c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007170:	b25b      	sxtb	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	da03      	bge.n	800717e <f_open+0x72>
				res = FR_INVALID_NAME;
 8007176:	2306      	movs	r3, #6
 8007178:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800717c:	e011      	b.n	80071a2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800717e:	79fb      	ldrb	r3, [r7, #7]
 8007180:	f023 0301 	bic.w	r3, r3, #1
 8007184:	2b00      	cmp	r3, #0
 8007186:	bf14      	ite	ne
 8007188:	2301      	movne	r3, #1
 800718a:	2300      	moveq	r3, #0
 800718c:	b2db      	uxtb	r3, r3
 800718e:	461a      	mov	r2, r3
 8007190:	f107 0314 	add.w	r3, r7, #20
 8007194:	4611      	mov	r1, r2
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe fb1e 	bl	80057d8 <chk_lock>
 800719c:	4603      	mov	r3, r0
 800719e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80071a2:	79fb      	ldrb	r3, [r7, #7]
 80071a4:	f003 031c 	and.w	r3, r3, #28
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d07f      	beq.n	80072ac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80071ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d017      	beq.n	80071e4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80071b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d10e      	bne.n	80071da <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80071bc:	f7fe fb68 	bl	8005890 <enq_lock>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d006      	beq.n	80071d4 <f_open+0xc8>
 80071c6:	f107 0314 	add.w	r3, r7, #20
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7ff fac7 	bl	800675e <dir_register>
 80071d0:	4603      	mov	r3, r0
 80071d2:	e000      	b.n	80071d6 <f_open+0xca>
 80071d4:	2312      	movs	r3, #18
 80071d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	f043 0308 	orr.w	r3, r3, #8
 80071e0:	71fb      	strb	r3, [r7, #7]
 80071e2:	e010      	b.n	8007206 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80071e4:	7ebb      	ldrb	r3, [r7, #26]
 80071e6:	f003 0311 	and.w	r3, r3, #17
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <f_open+0xea>
					res = FR_DENIED;
 80071ee:	2307      	movs	r3, #7
 80071f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80071f4:	e007      	b.n	8007206 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <f_open+0xfa>
 8007200:	2308      	movs	r3, #8
 8007202:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007206:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800720a:	2b00      	cmp	r3, #0
 800720c:	d168      	bne.n	80072e0 <f_open+0x1d4>
 800720e:	79fb      	ldrb	r3, [r7, #7]
 8007210:	f003 0308 	and.w	r3, r3, #8
 8007214:	2b00      	cmp	r3, #0
 8007216:	d063      	beq.n	80072e0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007218:	f7fd fc22 	bl	8004a60 <get_fattime>
 800721c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800721e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007220:	330e      	adds	r3, #14
 8007222:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007224:	4618      	mov	r0, r3
 8007226:	f7fe fa2d 	bl	8005684 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800722a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722c:	3316      	adds	r3, #22
 800722e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe fa27 	bl	8005684 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007238:	330b      	adds	r3, #11
 800723a:	2220      	movs	r2, #32
 800723c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007242:	4611      	mov	r1, r2
 8007244:	4618      	mov	r0, r3
 8007246:	f7ff f9f6 	bl	8006636 <ld_clust>
 800724a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007250:	2200      	movs	r2, #0
 8007252:	4618      	mov	r0, r3
 8007254:	f7ff fa0e 	bl	8006674 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800725a:	331c      	adds	r3, #28
 800725c:	2100      	movs	r1, #0
 800725e:	4618      	mov	r0, r3
 8007260:	f7fe fa10 	bl	8005684 <st_dword>
					fs->wflag = 1;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	2201      	movs	r2, #1
 8007268:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800726a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800726c:	2b00      	cmp	r3, #0
 800726e:	d037      	beq.n	80072e0 <f_open+0x1d4>
						dw = fs->winsect;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007274:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007276:	f107 0314 	add.w	r3, r7, #20
 800727a:	2200      	movs	r2, #0
 800727c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800727e:	4618      	mov	r0, r3
 8007280:	f7fe fefe 	bl	8006080 <remove_chain>
 8007284:	4603      	mov	r3, r0
 8007286:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800728a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800728e:	2b00      	cmp	r3, #0
 8007290:	d126      	bne.n	80072e0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007296:	4618      	mov	r0, r3
 8007298:	f7fe fc4e 	bl	8005b38 <move_window>
 800729c:	4603      	mov	r3, r0
 800729e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072a6:	3a01      	subs	r2, #1
 80072a8:	611a      	str	r2, [r3, #16]
 80072aa:	e019      	b.n	80072e0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80072ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d115      	bne.n	80072e0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80072b4:	7ebb      	ldrb	r3, [r7, #26]
 80072b6:	f003 0310 	and.w	r3, r3, #16
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80072be:	2304      	movs	r3, #4
 80072c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80072c4:	e00c      	b.n	80072e0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80072c6:	79fb      	ldrb	r3, [r7, #7]
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d007      	beq.n	80072e0 <f_open+0x1d4>
 80072d0:	7ebb      	ldrb	r3, [r7, #26]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <f_open+0x1d4>
						res = FR_DENIED;
 80072da:	2307      	movs	r3, #7
 80072dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80072e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d128      	bne.n	800733a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80072e8:	79fb      	ldrb	r3, [r7, #7]
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007308:	79fb      	ldrb	r3, [r7, #7]
 800730a:	f023 0301 	bic.w	r3, r3, #1
 800730e:	2b00      	cmp	r3, #0
 8007310:	bf14      	ite	ne
 8007312:	2301      	movne	r3, #1
 8007314:	2300      	moveq	r3, #0
 8007316:	b2db      	uxtb	r3, r3
 8007318:	461a      	mov	r2, r3
 800731a:	f107 0314 	add.w	r3, r7, #20
 800731e:	4611      	mov	r1, r2
 8007320:	4618      	mov	r0, r3
 8007322:	f7fe fad7 	bl	80058d4 <inc_lock>
 8007326:	4602      	mov	r2, r0
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d102      	bne.n	800733a <f_open+0x22e>
 8007334:	2302      	movs	r3, #2
 8007336:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800733a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800733e:	2b00      	cmp	r3, #0
 8007340:	f040 80a3 	bne.w	800748a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007348:	4611      	mov	r1, r2
 800734a:	4618      	mov	r0, r3
 800734c:	f7ff f973 	bl	8006636 <ld_clust>
 8007350:	4602      	mov	r2, r0
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007358:	331c      	adds	r3, #28
 800735a:	4618      	mov	r0, r3
 800735c:	f7fe f954 	bl	8005608 <ld_dword>
 8007360:	4602      	mov	r2, r0
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	88da      	ldrh	r2, [r3, #6]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	79fa      	ldrb	r2, [r7, #7]
 800737e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	3330      	adds	r3, #48	; 0x30
 8007396:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800739a:	2100      	movs	r1, #0
 800739c:	4618      	mov	r0, r3
 800739e:	f7fe f9be 	bl	800571e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	f003 0320 	and.w	r3, r3, #32
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d06e      	beq.n	800748a <f_open+0x37e>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d06a      	beq.n	800748a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	68da      	ldr	r2, [r3, #12]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	895b      	ldrh	r3, [r3, #10]
 80073c0:	461a      	mov	r2, r3
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	899b      	ldrh	r3, [r3, #12]
 80073c6:	fb03 f302 	mul.w	r3, r3, r2
 80073ca:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	657b      	str	r3, [r7, #84]	; 0x54
 80073d8:	e016      	b.n	8007408 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fe fc67 	bl	8005cb2 <get_fat>
 80073e4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80073e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d802      	bhi.n	80073f2 <f_open+0x2e6>
 80073ec:	2302      	movs	r3, #2
 80073ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80073f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f8:	d102      	bne.n	8007400 <f_open+0x2f4>
 80073fa:	2301      	movs	r3, #1
 80073fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007400:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	657b      	str	r3, [r7, #84]	; 0x54
 8007408:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800740c:	2b00      	cmp	r3, #0
 800740e:	d103      	bne.n	8007418 <f_open+0x30c>
 8007410:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007414:	429a      	cmp	r2, r3
 8007416:	d8e0      	bhi.n	80073da <f_open+0x2ce>
				}
				fp->clust = clst;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800741c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800741e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007422:	2b00      	cmp	r3, #0
 8007424:	d131      	bne.n	800748a <f_open+0x37e>
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	899b      	ldrh	r3, [r3, #12]
 800742a:	461a      	mov	r2, r3
 800742c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800742e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007432:	fb02 f201 	mul.w	r2, r2, r1
 8007436:	1a9b      	subs	r3, r3, r2
 8007438:	2b00      	cmp	r3, #0
 800743a:	d026      	beq.n	800748a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007440:	4618      	mov	r0, r3
 8007442:	f7fe fc17 	bl	8005c74 <clust2sect>
 8007446:	6478      	str	r0, [r7, #68]	; 0x44
 8007448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800744a:	2b00      	cmp	r3, #0
 800744c:	d103      	bne.n	8007456 <f_open+0x34a>
						res = FR_INT_ERR;
 800744e:	2302      	movs	r3, #2
 8007450:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007454:	e019      	b.n	800748a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	899b      	ldrh	r3, [r3, #12]
 800745a:	461a      	mov	r2, r3
 800745c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800745e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007464:	441a      	add	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	7858      	ldrb	r0, [r3, #1]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6a1a      	ldr	r2, [r3, #32]
 8007478:	2301      	movs	r3, #1
 800747a:	f7fe f84f 	bl	800551c <disk_read>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <f_open+0x37e>
 8007484:	2301      	movs	r3, #1
 8007486:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800748a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800748e:	2b00      	cmp	r3, #0
 8007490:	d002      	beq.n	8007498 <f_open+0x38c>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007498:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800749c:	4618      	mov	r0, r3
 800749e:	3760      	adds	r7, #96	; 0x60
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08e      	sub	sp, #56	; 0x38
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f107 0214 	add.w	r2, r7, #20
 80074c2:	4611      	mov	r1, r2
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff fda5 	bl	8007014 <validate>
 80074ca:	4603      	mov	r3, r0
 80074cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80074d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d107      	bne.n	80074e8 <f_read+0x44>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	7d5b      	ldrb	r3, [r3, #21]
 80074dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80074e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <f_read+0x4a>
 80074e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074ec:	e135      	b.n	800775a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	7d1b      	ldrb	r3, [r3, #20]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d101      	bne.n	80074fe <f_read+0x5a>
 80074fa:	2307      	movs	r3, #7
 80074fc:	e12d      	b.n	800775a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	429a      	cmp	r2, r3
 8007510:	f240 811e 	bls.w	8007750 <f_read+0x2ac>
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007518:	e11a      	b.n	8007750 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	8992      	ldrh	r2, [r2, #12]
 8007522:	fbb3 f1f2 	udiv	r1, r3, r2
 8007526:	fb02 f201 	mul.w	r2, r2, r1
 800752a:	1a9b      	subs	r3, r3, r2
 800752c:	2b00      	cmp	r3, #0
 800752e:	f040 80d5 	bne.w	80076dc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	8992      	ldrh	r2, [r2, #12]
 800753a:	fbb3 f3f2 	udiv	r3, r3, r2
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	8952      	ldrh	r2, [r2, #10]
 8007542:	3a01      	subs	r2, #1
 8007544:	4013      	ands	r3, r2
 8007546:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d12f      	bne.n	80075ae <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d103      	bne.n	800755e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	633b      	str	r3, [r7, #48]	; 0x30
 800755c:	e013      	b.n	8007586 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007562:	2b00      	cmp	r3, #0
 8007564:	d007      	beq.n	8007576 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	4619      	mov	r1, r3
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f7fe fe84 	bl	800627a <clmt_clust>
 8007572:	6338      	str	r0, [r7, #48]	; 0x30
 8007574:	e007      	b.n	8007586 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	69db      	ldr	r3, [r3, #28]
 800757c:	4619      	mov	r1, r3
 800757e:	4610      	mov	r0, r2
 8007580:	f7fe fb97 	bl	8005cb2 <get_fat>
 8007584:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	2b01      	cmp	r3, #1
 800758a:	d804      	bhi.n	8007596 <f_read+0xf2>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2202      	movs	r2, #2
 8007590:	755a      	strb	r2, [r3, #21]
 8007592:	2302      	movs	r3, #2
 8007594:	e0e1      	b.n	800775a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759c:	d104      	bne.n	80075a8 <f_read+0x104>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2201      	movs	r2, #1
 80075a2:	755a      	strb	r2, [r3, #21]
 80075a4:	2301      	movs	r3, #1
 80075a6:	e0d8      	b.n	800775a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ac:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	4619      	mov	r1, r3
 80075b6:	4610      	mov	r0, r2
 80075b8:	f7fe fb5c 	bl	8005c74 <clust2sect>
 80075bc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d104      	bne.n	80075ce <f_read+0x12a>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2202      	movs	r2, #2
 80075c8:	755a      	strb	r2, [r3, #21]
 80075ca:	2302      	movs	r3, #2
 80075cc:	e0c5      	b.n	800775a <f_read+0x2b6>
			sect += csect;
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	4413      	add	r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	899b      	ldrh	r3, [r3, #12]
 80075da:	461a      	mov	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	fbb3 f3f2 	udiv	r3, r3, r2
 80075e2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80075e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d041      	beq.n	800766e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80075ea:	69fa      	ldr	r2, [r7, #28]
 80075ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ee:	4413      	add	r3, r2
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	8952      	ldrh	r2, [r2, #10]
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d905      	bls.n	8007604 <f_read+0x160>
					cc = fs->csize - csect;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	895b      	ldrh	r3, [r3, #10]
 80075fc:	461a      	mov	r2, r3
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	7858      	ldrb	r0, [r3, #1]
 8007608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800760e:	f7fd ff85 	bl	800551c <disk_read>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d004      	beq.n	8007622 <f_read+0x17e>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2201      	movs	r2, #1
 800761c:	755a      	strb	r2, [r3, #21]
 800761e:	2301      	movs	r3, #1
 8007620:	e09b      	b.n	800775a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	7d1b      	ldrb	r3, [r3, #20]
 8007626:	b25b      	sxtb	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	da18      	bge.n	800765e <f_read+0x1ba>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6a1a      	ldr	r2, [r3, #32]
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007636:	429a      	cmp	r2, r3
 8007638:	d911      	bls.n	800765e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a1a      	ldr	r2, [r3, #32]
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	8992      	ldrh	r2, [r2, #12]
 8007646:	fb02 f303 	mul.w	r3, r2, r3
 800764a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800764c:	18d0      	adds	r0, r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	899b      	ldrh	r3, [r3, #12]
 8007658:	461a      	mov	r2, r3
 800765a:	f7fe f83f 	bl	80056dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	899b      	ldrh	r3, [r3, #12]
 8007662:	461a      	mov	r2, r3
 8007664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007666:	fb02 f303 	mul.w	r3, r2, r3
 800766a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800766c:	e05c      	b.n	8007728 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	429a      	cmp	r2, r3
 8007676:	d02e      	beq.n	80076d6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	7d1b      	ldrb	r3, [r3, #20]
 800767c:	b25b      	sxtb	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	da18      	bge.n	80076b4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	7858      	ldrb	r0, [r3, #1]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6a1a      	ldr	r2, [r3, #32]
 8007690:	2301      	movs	r3, #1
 8007692:	f7fd ff63 	bl	800555c <disk_write>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d004      	beq.n	80076a6 <f_read+0x202>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2201      	movs	r2, #1
 80076a0:	755a      	strb	r2, [r3, #21]
 80076a2:	2301      	movs	r3, #1
 80076a4:	e059      	b.n	800775a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	7d1b      	ldrb	r3, [r3, #20]
 80076aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	7858      	ldrb	r0, [r3, #1]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076be:	2301      	movs	r3, #1
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	f7fd ff2b 	bl	800551c <disk_read>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d004      	beq.n	80076d6 <f_read+0x232>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2201      	movs	r2, #1
 80076d0:	755a      	strb	r2, [r3, #21]
 80076d2:	2301      	movs	r3, #1
 80076d4:	e041      	b.n	800775a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	899b      	ldrh	r3, [r3, #12]
 80076e0:	4618      	mov	r0, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	8992      	ldrh	r2, [r2, #12]
 80076ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80076ee:	fb02 f201 	mul.w	r2, r2, r1
 80076f2:	1a9b      	subs	r3, r3, r2
 80076f4:	1ac3      	subs	r3, r0, r3
 80076f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80076f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d901      	bls.n	8007704 <f_read+0x260>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	8992      	ldrh	r2, [r2, #12]
 8007712:	fbb3 f0f2 	udiv	r0, r3, r2
 8007716:	fb02 f200 	mul.w	r2, r2, r0
 800771a:	1a9b      	subs	r3, r3, r2
 800771c:	440b      	add	r3, r1
 800771e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007720:	4619      	mov	r1, r3
 8007722:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007724:	f7fd ffda 	bl	80056dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	4413      	add	r3, r2
 800772e:	627b      	str	r3, [r7, #36]	; 0x24
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	699a      	ldr	r2, [r3, #24]
 8007734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007736:	441a      	add	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	619a      	str	r2, [r3, #24]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007742:	441a      	add	r2, r3
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	f47f aee1 	bne.w	800751a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3738      	adds	r7, #56	; 0x38
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b08c      	sub	sp, #48	; 0x30
 8007766:	af00      	add	r7, sp, #0
 8007768:	60f8      	str	r0, [r7, #12]
 800776a:	60b9      	str	r1, [r7, #8]
 800776c:	607a      	str	r2, [r7, #4]
 800776e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f107 0210 	add.w	r2, r7, #16
 8007780:	4611      	mov	r1, r2
 8007782:	4618      	mov	r0, r3
 8007784:	f7ff fc46 	bl	8007014 <validate>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800778e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007792:	2b00      	cmp	r3, #0
 8007794:	d107      	bne.n	80077a6 <f_write+0x44>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	7d5b      	ldrb	r3, [r3, #21]
 800779a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800779e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <f_write+0x4a>
 80077a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077aa:	e16a      	b.n	8007a82 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	7d1b      	ldrb	r3, [r3, #20]
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <f_write+0x5a>
 80077b8:	2307      	movs	r3, #7
 80077ba:	e162      	b.n	8007a82 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	699a      	ldr	r2, [r3, #24]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	441a      	add	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	f080 814c 	bcs.w	8007a66 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	43db      	mvns	r3, r3
 80077d4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80077d6:	e146      	b.n	8007a66 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	8992      	ldrh	r2, [r2, #12]
 80077e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80077e4:	fb02 f201 	mul.w	r2, r2, r1
 80077e8:	1a9b      	subs	r3, r3, r2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f040 80f1 	bne.w	80079d2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	8992      	ldrh	r2, [r2, #12]
 80077f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	8952      	ldrh	r2, [r2, #10]
 8007800:	3a01      	subs	r2, #1
 8007802:	4013      	ands	r3, r2
 8007804:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d143      	bne.n	8007894 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10c      	bne.n	800782e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800781a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781c:	2b00      	cmp	r3, #0
 800781e:	d11a      	bne.n	8007856 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2100      	movs	r1, #0
 8007824:	4618      	mov	r0, r3
 8007826:	f7fe fc90 	bl	800614a <create_chain>
 800782a:	62b8      	str	r0, [r7, #40]	; 0x28
 800782c:	e013      	b.n	8007856 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007832:	2b00      	cmp	r3, #0
 8007834:	d007      	beq.n	8007846 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	4619      	mov	r1, r3
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f7fe fd1c 	bl	800627a <clmt_clust>
 8007842:	62b8      	str	r0, [r7, #40]	; 0x28
 8007844:	e007      	b.n	8007856 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	4619      	mov	r1, r3
 800784e:	4610      	mov	r0, r2
 8007850:	f7fe fc7b 	bl	800614a <create_chain>
 8007854:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 8109 	beq.w	8007a70 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007860:	2b01      	cmp	r3, #1
 8007862:	d104      	bne.n	800786e <f_write+0x10c>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2202      	movs	r2, #2
 8007868:	755a      	strb	r2, [r3, #21]
 800786a:	2302      	movs	r3, #2
 800786c:	e109      	b.n	8007a82 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007874:	d104      	bne.n	8007880 <f_write+0x11e>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2201      	movs	r2, #1
 800787a:	755a      	strb	r2, [r3, #21]
 800787c:	2301      	movs	r3, #1
 800787e:	e100      	b.n	8007a82 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007884:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d102      	bne.n	8007894 <f_write+0x132>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007892:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	7d1b      	ldrb	r3, [r3, #20]
 8007898:	b25b      	sxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	da18      	bge.n	80078d0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	7858      	ldrb	r0, [r3, #1]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6a1a      	ldr	r2, [r3, #32]
 80078ac:	2301      	movs	r3, #1
 80078ae:	f7fd fe55 	bl	800555c <disk_write>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d004      	beq.n	80078c2 <f_write+0x160>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	755a      	strb	r2, [r3, #21]
 80078be:	2301      	movs	r3, #1
 80078c0:	e0df      	b.n	8007a82 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	7d1b      	ldrb	r3, [r3, #20]
 80078c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	4619      	mov	r1, r3
 80078d8:	4610      	mov	r0, r2
 80078da:	f7fe f9cb 	bl	8005c74 <clust2sect>
 80078de:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d104      	bne.n	80078f0 <f_write+0x18e>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2202      	movs	r2, #2
 80078ea:	755a      	strb	r2, [r3, #21]
 80078ec:	2302      	movs	r3, #2
 80078ee:	e0c8      	b.n	8007a82 <f_write+0x320>
			sect += csect;
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	4413      	add	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	899b      	ldrh	r3, [r3, #12]
 80078fc:	461a      	mov	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	fbb3 f3f2 	udiv	r3, r3, r2
 8007904:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d043      	beq.n	8007994 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	4413      	add	r3, r2
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	8952      	ldrh	r2, [r2, #10]
 8007916:	4293      	cmp	r3, r2
 8007918:	d905      	bls.n	8007926 <f_write+0x1c4>
					cc = fs->csize - csect;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	895b      	ldrh	r3, [r3, #10]
 800791e:	461a      	mov	r2, r3
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	7858      	ldrb	r0, [r3, #1]
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	69f9      	ldr	r1, [r7, #28]
 8007930:	f7fd fe14 	bl	800555c <disk_write>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d004      	beq.n	8007944 <f_write+0x1e2>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	755a      	strb	r2, [r3, #21]
 8007940:	2301      	movs	r3, #1
 8007942:	e09e      	b.n	8007a82 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6a1a      	ldr	r2, [r3, #32]
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	6a3a      	ldr	r2, [r7, #32]
 800794e:	429a      	cmp	r2, r3
 8007950:	d918      	bls.n	8007984 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6a1a      	ldr	r2, [r3, #32]
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	8992      	ldrh	r2, [r2, #12]
 8007964:	fb02 f303 	mul.w	r3, r2, r3
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	18d1      	adds	r1, r2, r3
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	899b      	ldrh	r3, [r3, #12]
 8007970:	461a      	mov	r2, r3
 8007972:	f7fd feb3 	bl	80056dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	7d1b      	ldrb	r3, [r3, #20]
 800797a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800797e:	b2da      	uxtb	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	899b      	ldrh	r3, [r3, #12]
 8007988:	461a      	mov	r2, r3
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	fb02 f303 	mul.w	r3, r2, r3
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007992:	e04b      	b.n	8007a2c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	429a      	cmp	r2, r3
 800799c:	d016      	beq.n	80079cc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d210      	bcs.n	80079cc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	7858      	ldrb	r0, [r3, #1]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80079b4:	2301      	movs	r3, #1
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	f7fd fdb0 	bl	800551c <disk_read>
 80079bc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2201      	movs	r2, #1
 80079c6:	755a      	strb	r2, [r3, #21]
 80079c8:	2301      	movs	r3, #1
 80079ca:	e05a      	b.n	8007a82 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	899b      	ldrh	r3, [r3, #12]
 80079d6:	4618      	mov	r0, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	8992      	ldrh	r2, [r2, #12]
 80079e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80079e4:	fb02 f201 	mul.w	r2, r2, r1
 80079e8:	1a9b      	subs	r3, r3, r2
 80079ea:	1ac3      	subs	r3, r0, r3
 80079ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80079ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d901      	bls.n	80079fa <f_write+0x298>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	8992      	ldrh	r2, [r2, #12]
 8007a08:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a0c:	fb02 f200 	mul.w	r2, r2, r0
 8007a10:	1a9b      	subs	r3, r3, r2
 8007a12:	440b      	add	r3, r1
 8007a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a16:	69f9      	ldr	r1, [r7, #28]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fd fe5f 	bl	80056dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	7d1b      	ldrb	r3, [r3, #20]
 8007a22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007a2c:	69fa      	ldr	r2, [r7, #28]
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a30:	4413      	add	r3, r2
 8007a32:	61fb      	str	r3, [r7, #28]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	699a      	ldr	r2, [r3, #24]
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	441a      	add	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	619a      	str	r2, [r3, #24]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	bf38      	it	cc
 8007a4c:	461a      	movcc	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	60da      	str	r2, [r3, #12]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	441a      	add	r2, r3
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f47f aeb5 	bne.w	80077d8 <f_write+0x76>
 8007a6e:	e000      	b.n	8007a72 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007a70:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	7d1b      	ldrb	r3, [r3, #20]
 8007a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3730      	adds	r7, #48	; 0x30
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b086      	sub	sp, #24
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f107 0208 	add.w	r2, r7, #8
 8007a98:	4611      	mov	r1, r2
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7ff faba 	bl	8007014 <validate>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007aa4:	7dfb      	ldrb	r3, [r7, #23]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d168      	bne.n	8007b7c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	7d1b      	ldrb	r3, [r3, #20]
 8007aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d062      	beq.n	8007b7c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	7d1b      	ldrb	r3, [r3, #20]
 8007aba:	b25b      	sxtb	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	da15      	bge.n	8007aec <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	7858      	ldrb	r0, [r3, #1]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1a      	ldr	r2, [r3, #32]
 8007ace:	2301      	movs	r3, #1
 8007ad0:	f7fd fd44 	bl	800555c <disk_write>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <f_sync+0x54>
 8007ada:	2301      	movs	r3, #1
 8007adc:	e04f      	b.n	8007b7e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	7d1b      	ldrb	r3, [r3, #20]
 8007ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007aec:	f7fc ffb8 	bl	8004a60 <get_fattime>
 8007af0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	4619      	mov	r1, r3
 8007afa:	4610      	mov	r0, r2
 8007afc:	f7fe f81c 	bl	8005b38 <move_window>
 8007b00:	4603      	mov	r3, r0
 8007b02:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007b04:	7dfb      	ldrb	r3, [r7, #23]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d138      	bne.n	8007b7c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	330b      	adds	r3, #11
 8007b14:	781a      	ldrb	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	330b      	adds	r3, #11
 8007b1a:	f042 0220 	orr.w	r2, r2, #32
 8007b1e:	b2d2      	uxtb	r2, r2
 8007b20:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	68f9      	ldr	r1, [r7, #12]
 8007b2e:	f7fe fda1 	bl	8006674 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f103 021c 	add.w	r2, r3, #28
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4610      	mov	r0, r2
 8007b40:	f7fd fda0 	bl	8005684 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3316      	adds	r3, #22
 8007b48:	6939      	ldr	r1, [r7, #16]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fd fd9a 	bl	8005684 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3312      	adds	r3, #18
 8007b54:	2100      	movs	r1, #0
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fd fd79 	bl	800564e <st_word>
					fs->wflag = 1;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fe f815 	bl	8005b94 <sync_fs>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	7d1b      	ldrb	r3, [r3, #20]
 8007b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7ff ff7b 	bl	8007a8a <f_sync>
 8007b94:	4603      	mov	r3, r0
 8007b96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d118      	bne.n	8007bd0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f107 0208 	add.w	r2, r7, #8
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7ff fa34 	bl	8007014 <validate>
 8007bac:	4603      	mov	r3, r0
 8007bae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10c      	bne.n	8007bd0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fd ff18 	bl	80059f0 <dec_lock>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d102      	bne.n	8007bd0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	4613      	mov	r3, r2
 8007be8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007bea:	2301      	movs	r3, #1
 8007bec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007bf2:	4b1f      	ldr	r3, [pc, #124]	; (8007c70 <FATFS_LinkDriverEx+0x94>)
 8007bf4:	7a5b      	ldrb	r3, [r3, #9]
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d131      	bne.n	8007c60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007bfc:	4b1c      	ldr	r3, [pc, #112]	; (8007c70 <FATFS_LinkDriverEx+0x94>)
 8007bfe:	7a5b      	ldrb	r3, [r3, #9]
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	461a      	mov	r2, r3
 8007c04:	4b1a      	ldr	r3, [pc, #104]	; (8007c70 <FATFS_LinkDriverEx+0x94>)
 8007c06:	2100      	movs	r1, #0
 8007c08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007c0a:	4b19      	ldr	r3, [pc, #100]	; (8007c70 <FATFS_LinkDriverEx+0x94>)
 8007c0c:	7a5b      	ldrb	r3, [r3, #9]
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	4a17      	ldr	r2, [pc, #92]	; (8007c70 <FATFS_LinkDriverEx+0x94>)
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007c1a:	4b15      	ldr	r3, [pc, #84]	; (8007c70 <FATFS_LinkDriverEx+0x94>)
 8007c1c:	7a5b      	ldrb	r3, [r3, #9]
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	461a      	mov	r2, r3
 8007c22:	4b13      	ldr	r3, [pc, #76]	; (8007c70 <FATFS_LinkDriverEx+0x94>)
 8007c24:	4413      	add	r3, r2
 8007c26:	79fa      	ldrb	r2, [r7, #7]
 8007c28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007c2a:	4b11      	ldr	r3, [pc, #68]	; (8007c70 <FATFS_LinkDriverEx+0x94>)
 8007c2c:	7a5b      	ldrb	r3, [r3, #9]
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	b2d1      	uxtb	r1, r2
 8007c34:	4a0e      	ldr	r2, [pc, #56]	; (8007c70 <FATFS_LinkDriverEx+0x94>)
 8007c36:	7251      	strb	r1, [r2, #9]
 8007c38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007c3a:	7dbb      	ldrb	r3, [r7, #22]
 8007c3c:	3330      	adds	r3, #48	; 0x30
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	3301      	adds	r3, #1
 8007c48:	223a      	movs	r2, #58	; 0x3a
 8007c4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	3302      	adds	r3, #2
 8007c50:	222f      	movs	r2, #47	; 0x2f
 8007c52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	3303      	adds	r3, #3
 8007c58:	2200      	movs	r2, #0
 8007c5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	371c      	adds	r7, #28
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	20000104 	.word	0x20000104

08007c74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007c7e:	2200      	movs	r2, #0
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7ff ffaa 	bl	8007bdc <FATFS_LinkDriverEx>
 8007c88:	4603      	mov	r3, r0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	4603      	mov	r3, r0
 8007c9a:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
 8007c9e:	021b      	lsls	r3, r3, #8
 8007ca0:	b21a      	sxth	r2, r3
 8007ca2:	88fb      	ldrh	r3, [r7, #6]
 8007ca4:	0a1b      	lsrs	r3, r3, #8
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	b21b      	sxth	r3, r3
 8007caa:	4313      	orrs	r3, r2
 8007cac:	b21b      	sxth	r3, r3
 8007cae:	b29b      	uxth	r3, r3
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	061a      	lsls	r2, r3, #24
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	021b      	lsls	r3, r3, #8
 8007ccc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	0a1b      	lsrs	r3, r3, #8
 8007cd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	0e1b      	lsrs	r3, r3, #24
 8007ce0:	4313      	orrs	r3, r2
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b082      	sub	sp, #8
 8007cf2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007cf8:	f000 f8d4 	bl	8007ea4 <mem_init>
  memp_init();
 8007cfc:	f000 fbda 	bl	80084b4 <memp_init>
  pbuf_init();
  netif_init();
 8007d00:	f000 fc92 	bl	8008628 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007d04:	f007 feae 	bl	800fa64 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007d08:	f001 fd10 	bl	800972c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007d0c:	f007 fe22 	bl	800f954 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	4603      	mov	r3, r0
 8007d20:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007d22:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <ptr_to_mem+0x20>)
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	88fb      	ldrh	r3, [r7, #6]
 8007d28:	4413      	add	r3, r2
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	20000110 	.word	0x20000110

08007d3c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a05      	ldr	r2, [pc, #20]	; (8007d5c <mem_to_ptr+0x20>)
 8007d48:	6812      	ldr	r2, [r2, #0]
 8007d4a:	1a9b      	subs	r3, r3, r2
 8007d4c:	b29b      	uxth	r3, r3
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	20000110 	.word	0x20000110

08007d60 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007d60:	b590      	push	{r4, r7, lr}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007d68:	4b45      	ldr	r3, [pc, #276]	; (8007e80 <plug_holes+0x120>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d206      	bcs.n	8007d80 <plug_holes+0x20>
 8007d72:	4b44      	ldr	r3, [pc, #272]	; (8007e84 <plug_holes+0x124>)
 8007d74:	f240 12df 	movw	r2, #479	; 0x1df
 8007d78:	4943      	ldr	r1, [pc, #268]	; (8007e88 <plug_holes+0x128>)
 8007d7a:	4844      	ldr	r0, [pc, #272]	; (8007e8c <plug_holes+0x12c>)
 8007d7c:	f00a fee6 	bl	8012b4c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007d80:	4b43      	ldr	r3, [pc, #268]	; (8007e90 <plug_holes+0x130>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d306      	bcc.n	8007d98 <plug_holes+0x38>
 8007d8a:	4b3e      	ldr	r3, [pc, #248]	; (8007e84 <plug_holes+0x124>)
 8007d8c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007d90:	4940      	ldr	r1, [pc, #256]	; (8007e94 <plug_holes+0x134>)
 8007d92:	483e      	ldr	r0, [pc, #248]	; (8007e8c <plug_holes+0x12c>)
 8007d94:	f00a feda 	bl	8012b4c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	791b      	ldrb	r3, [r3, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d006      	beq.n	8007dae <plug_holes+0x4e>
 8007da0:	4b38      	ldr	r3, [pc, #224]	; (8007e84 <plug_holes+0x124>)
 8007da2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007da6:	493c      	ldr	r1, [pc, #240]	; (8007e98 <plug_holes+0x138>)
 8007da8:	4838      	ldr	r0, [pc, #224]	; (8007e8c <plug_holes+0x12c>)
 8007daa:	f00a fecf 	bl	8012b4c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007db6:	d906      	bls.n	8007dc6 <plug_holes+0x66>
 8007db8:	4b32      	ldr	r3, [pc, #200]	; (8007e84 <plug_holes+0x124>)
 8007dba:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007dbe:	4937      	ldr	r1, [pc, #220]	; (8007e9c <plug_holes+0x13c>)
 8007dc0:	4832      	ldr	r0, [pc, #200]	; (8007e8c <plug_holes+0x12c>)
 8007dc2:	f00a fec3 	bl	8012b4c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff ffa4 	bl	8007d18 <ptr_to_mem>
 8007dd0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d024      	beq.n	8007e24 <plug_holes+0xc4>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	791b      	ldrb	r3, [r3, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d120      	bne.n	8007e24 <plug_holes+0xc4>
 8007de2:	4b2b      	ldr	r3, [pc, #172]	; (8007e90 <plug_holes+0x130>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d01b      	beq.n	8007e24 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007dec:	4b2c      	ldr	r3, [pc, #176]	; (8007ea0 <plug_holes+0x140>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d102      	bne.n	8007dfc <plug_holes+0x9c>
      lfree = mem;
 8007df6:	4a2a      	ldr	r2, [pc, #168]	; (8007ea0 <plug_holes+0x140>)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	881a      	ldrh	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007e0c:	d00a      	beq.n	8007e24 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7ff ff80 	bl	8007d18 <ptr_to_mem>
 8007e18:	4604      	mov	r4, r0
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7ff ff8e 	bl	8007d3c <mem_to_ptr>
 8007e20:	4603      	mov	r3, r0
 8007e22:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	885b      	ldrh	r3, [r3, #2]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7ff ff75 	bl	8007d18 <ptr_to_mem>
 8007e2e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d01f      	beq.n	8007e78 <plug_holes+0x118>
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	791b      	ldrb	r3, [r3, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d11b      	bne.n	8007e78 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007e40:	4b17      	ldr	r3, [pc, #92]	; (8007ea0 <plug_holes+0x140>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d102      	bne.n	8007e50 <plug_holes+0xf0>
      lfree = pmem;
 8007e4a:	4a15      	ldr	r2, [pc, #84]	; (8007ea0 <plug_holes+0x140>)
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	881a      	ldrh	r2, [r3, #0]
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007e60:	d00a      	beq.n	8007e78 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7ff ff56 	bl	8007d18 <ptr_to_mem>
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	68b8      	ldr	r0, [r7, #8]
 8007e70:	f7ff ff64 	bl	8007d3c <mem_to_ptr>
 8007e74:	4603      	mov	r3, r0
 8007e76:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007e78:	bf00      	nop
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd90      	pop	{r4, r7, pc}
 8007e80:	20000110 	.word	0x20000110
 8007e84:	08013b38 	.word	0x08013b38
 8007e88:	08013b68 	.word	0x08013b68
 8007e8c:	08013b80 	.word	0x08013b80
 8007e90:	20000114 	.word	0x20000114
 8007e94:	08013ba8 	.word	0x08013ba8
 8007e98:	08013bc4 	.word	0x08013bc4
 8007e9c:	08013be0 	.word	0x08013be0
 8007ea0:	20000118 	.word	0x20000118

08007ea4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007eaa:	4b18      	ldr	r3, [pc, #96]	; (8007f0c <mem_init+0x68>)
 8007eac:	3303      	adds	r3, #3
 8007eae:	f023 0303 	bic.w	r3, r3, #3
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	4b16      	ldr	r3, [pc, #88]	; (8007f10 <mem_init+0x6c>)
 8007eb6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007eb8:	4b15      	ldr	r3, [pc, #84]	; (8007f10 <mem_init+0x6c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007ec4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007ed2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8007ed6:	f7ff ff1f 	bl	8007d18 <ptr_to_mem>
 8007eda:	4602      	mov	r2, r0
 8007edc:	4b0d      	ldr	r3, [pc, #52]	; (8007f14 <mem_init+0x70>)
 8007ede:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8007ee0:	4b0c      	ldr	r3, [pc, #48]	; (8007f14 <mem_init+0x70>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007ee8:	4b0a      	ldr	r3, [pc, #40]	; (8007f14 <mem_init+0x70>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007ef0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007ef2:	4b08      	ldr	r3, [pc, #32]	; (8007f14 <mem_init+0x70>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007efa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007efc:	4b04      	ldr	r3, [pc, #16]	; (8007f10 <mem_init+0x6c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a05      	ldr	r2, [pc, #20]	; (8007f18 <mem_init+0x74>)
 8007f02:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007f04:	bf00      	nop
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	20008798 	.word	0x20008798
 8007f10:	20000110 	.word	0x20000110
 8007f14:	20000114 	.word	0x20000114
 8007f18:	20000118 	.word	0x20000118

08007f1c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7ff ff09 	bl	8007d3c <mem_to_ptr>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	881b      	ldrh	r3, [r3, #0]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7ff fef0 	bl	8007d18 <ptr_to_mem>
 8007f38:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	885b      	ldrh	r3, [r3, #2]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff feea 	bl	8007d18 <ptr_to_mem>
 8007f44:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007f4e:	d818      	bhi.n	8007f82 <mem_link_valid+0x66>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	885b      	ldrh	r3, [r3, #2]
 8007f54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007f58:	d813      	bhi.n	8007f82 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007f5e:	8afa      	ldrh	r2, [r7, #22]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d004      	beq.n	8007f6e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	8afa      	ldrh	r2, [r7, #22]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d109      	bne.n	8007f82 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007f6e:	4b08      	ldr	r3, [pc, #32]	; (8007f90 <mem_link_valid+0x74>)
 8007f70:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d006      	beq.n	8007f86 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	885b      	ldrh	r3, [r3, #2]
 8007f7c:	8afa      	ldrh	r2, [r7, #22]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d001      	beq.n	8007f86 <mem_link_valid+0x6a>
    return 0;
 8007f82:	2300      	movs	r3, #0
 8007f84:	e000      	b.n	8007f88 <mem_link_valid+0x6c>
  }
  return 1;
 8007f86:	2301      	movs	r3, #1
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20000114 	.word	0x20000114

08007f94 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d04c      	beq.n	800803c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f003 0303 	and.w	r3, r3, #3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d007      	beq.n	8007fbc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007fac:	4b25      	ldr	r3, [pc, #148]	; (8008044 <mem_free+0xb0>)
 8007fae:	f240 2273 	movw	r2, #627	; 0x273
 8007fb2:	4925      	ldr	r1, [pc, #148]	; (8008048 <mem_free+0xb4>)
 8007fb4:	4825      	ldr	r0, [pc, #148]	; (800804c <mem_free+0xb8>)
 8007fb6:	f00a fdc9 	bl	8012b4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007fba:	e040      	b.n	800803e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3b08      	subs	r3, #8
 8007fc0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007fc2:	4b23      	ldr	r3, [pc, #140]	; (8008050 <mem_free+0xbc>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d306      	bcc.n	8007fda <mem_free+0x46>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f103 020c 	add.w	r2, r3, #12
 8007fd2:	4b20      	ldr	r3, [pc, #128]	; (8008054 <mem_free+0xc0>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d907      	bls.n	8007fea <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007fda:	4b1a      	ldr	r3, [pc, #104]	; (8008044 <mem_free+0xb0>)
 8007fdc:	f240 227f 	movw	r2, #639	; 0x27f
 8007fe0:	491d      	ldr	r1, [pc, #116]	; (8008058 <mem_free+0xc4>)
 8007fe2:	481a      	ldr	r0, [pc, #104]	; (800804c <mem_free+0xb8>)
 8007fe4:	f00a fdb2 	bl	8012b4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007fe8:	e029      	b.n	800803e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	791b      	ldrb	r3, [r3, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d107      	bne.n	8008002 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007ff2:	4b14      	ldr	r3, [pc, #80]	; (8008044 <mem_free+0xb0>)
 8007ff4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007ff8:	4918      	ldr	r1, [pc, #96]	; (800805c <mem_free+0xc8>)
 8007ffa:	4814      	ldr	r0, [pc, #80]	; (800804c <mem_free+0xb8>)
 8007ffc:	f00a fda6 	bl	8012b4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008000:	e01d      	b.n	800803e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f7ff ff8a 	bl	8007f1c <mem_link_valid>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d107      	bne.n	800801e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800800e:	4b0d      	ldr	r3, [pc, #52]	; (8008044 <mem_free+0xb0>)
 8008010:	f240 2295 	movw	r2, #661	; 0x295
 8008014:	4912      	ldr	r1, [pc, #72]	; (8008060 <mem_free+0xcc>)
 8008016:	480d      	ldr	r0, [pc, #52]	; (800804c <mem_free+0xb8>)
 8008018:	f00a fd98 	bl	8012b4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800801c:	e00f      	b.n	800803e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008024:	4b0f      	ldr	r3, [pc, #60]	; (8008064 <mem_free+0xd0>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	429a      	cmp	r2, r3
 800802c:	d202      	bcs.n	8008034 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800802e:	4a0d      	ldr	r2, [pc, #52]	; (8008064 <mem_free+0xd0>)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f7ff fe93 	bl	8007d60 <plug_holes>
 800803a:	e000      	b.n	800803e <mem_free+0xaa>
    return;
 800803c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	08013b38 	.word	0x08013b38
 8008048:	08013c0c 	.word	0x08013c0c
 800804c:	08013b80 	.word	0x08013b80
 8008050:	20000110 	.word	0x20000110
 8008054:	20000114 	.word	0x20000114
 8008058:	08013c30 	.word	0x08013c30
 800805c:	08013c4c 	.word	0x08013c4c
 8008060:	08013c74 	.word	0x08013c74
 8008064:	20000118 	.word	0x20000118

08008068 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b088      	sub	sp, #32
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008074:	887b      	ldrh	r3, [r7, #2]
 8008076:	3303      	adds	r3, #3
 8008078:	b29b      	uxth	r3, r3
 800807a:	f023 0303 	bic.w	r3, r3, #3
 800807e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8008080:	8bfb      	ldrh	r3, [r7, #30]
 8008082:	2b0b      	cmp	r3, #11
 8008084:	d801      	bhi.n	800808a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008086:	230c      	movs	r3, #12
 8008088:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800808a:	8bfb      	ldrh	r3, [r7, #30]
 800808c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008090:	d803      	bhi.n	800809a <mem_trim+0x32>
 8008092:	8bfa      	ldrh	r2, [r7, #30]
 8008094:	887b      	ldrh	r3, [r7, #2]
 8008096:	429a      	cmp	r2, r3
 8008098:	d201      	bcs.n	800809e <mem_trim+0x36>
    return NULL;
 800809a:	2300      	movs	r3, #0
 800809c:	e0cc      	b.n	8008238 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800809e:	4b68      	ldr	r3, [pc, #416]	; (8008240 <mem_trim+0x1d8>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d304      	bcc.n	80080b2 <mem_trim+0x4a>
 80080a8:	4b66      	ldr	r3, [pc, #408]	; (8008244 <mem_trim+0x1dc>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d306      	bcc.n	80080c0 <mem_trim+0x58>
 80080b2:	4b65      	ldr	r3, [pc, #404]	; (8008248 <mem_trim+0x1e0>)
 80080b4:	f240 22d2 	movw	r2, #722	; 0x2d2
 80080b8:	4964      	ldr	r1, [pc, #400]	; (800824c <mem_trim+0x1e4>)
 80080ba:	4865      	ldr	r0, [pc, #404]	; (8008250 <mem_trim+0x1e8>)
 80080bc:	f00a fd46 	bl	8012b4c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80080c0:	4b5f      	ldr	r3, [pc, #380]	; (8008240 <mem_trim+0x1d8>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d304      	bcc.n	80080d4 <mem_trim+0x6c>
 80080ca:	4b5e      	ldr	r3, [pc, #376]	; (8008244 <mem_trim+0x1dc>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d301      	bcc.n	80080d8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	e0af      	b.n	8008238 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3b08      	subs	r3, #8
 80080dc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80080de:	69b8      	ldr	r0, [r7, #24]
 80080e0:	f7ff fe2c 	bl	8007d3c <mem_to_ptr>
 80080e4:	4603      	mov	r3, r0
 80080e6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	881a      	ldrh	r2, [r3, #0]
 80080ec:	8afb      	ldrh	r3, [r7, #22]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	3b08      	subs	r3, #8
 80080f4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80080f6:	8bfa      	ldrh	r2, [r7, #30]
 80080f8:	8abb      	ldrh	r3, [r7, #20]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d906      	bls.n	800810c <mem_trim+0xa4>
 80080fe:	4b52      	ldr	r3, [pc, #328]	; (8008248 <mem_trim+0x1e0>)
 8008100:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008104:	4953      	ldr	r1, [pc, #332]	; (8008254 <mem_trim+0x1ec>)
 8008106:	4852      	ldr	r0, [pc, #328]	; (8008250 <mem_trim+0x1e8>)
 8008108:	f00a fd20 	bl	8012b4c <iprintf>
  if (newsize > size) {
 800810c:	8bfa      	ldrh	r2, [r7, #30]
 800810e:	8abb      	ldrh	r3, [r7, #20]
 8008110:	429a      	cmp	r2, r3
 8008112:	d901      	bls.n	8008118 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8008114:	2300      	movs	r3, #0
 8008116:	e08f      	b.n	8008238 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8008118:	8bfa      	ldrh	r2, [r7, #30]
 800811a:	8abb      	ldrh	r3, [r7, #20]
 800811c:	429a      	cmp	r2, r3
 800811e:	d101      	bne.n	8008124 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	e089      	b.n	8008238 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	881b      	ldrh	r3, [r3, #0]
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff fdf5 	bl	8007d18 <ptr_to_mem>
 800812e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	791b      	ldrb	r3, [r3, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d13f      	bne.n	80081b8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	881b      	ldrh	r3, [r3, #0]
 800813c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008140:	d106      	bne.n	8008150 <mem_trim+0xe8>
 8008142:	4b41      	ldr	r3, [pc, #260]	; (8008248 <mem_trim+0x1e0>)
 8008144:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008148:	4943      	ldr	r1, [pc, #268]	; (8008258 <mem_trim+0x1f0>)
 800814a:	4841      	ldr	r0, [pc, #260]	; (8008250 <mem_trim+0x1e8>)
 800814c:	f00a fcfe 	bl	8012b4c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008156:	8afa      	ldrh	r2, [r7, #22]
 8008158:	8bfb      	ldrh	r3, [r7, #30]
 800815a:	4413      	add	r3, r2
 800815c:	b29b      	uxth	r3, r3
 800815e:	3308      	adds	r3, #8
 8008160:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8008162:	4b3e      	ldr	r3, [pc, #248]	; (800825c <mem_trim+0x1f4>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	429a      	cmp	r2, r3
 800816a:	d106      	bne.n	800817a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800816c:	89fb      	ldrh	r3, [r7, #14]
 800816e:	4618      	mov	r0, r3
 8008170:	f7ff fdd2 	bl	8007d18 <ptr_to_mem>
 8008174:	4602      	mov	r2, r0
 8008176:	4b39      	ldr	r3, [pc, #228]	; (800825c <mem_trim+0x1f4>)
 8008178:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800817a:	89fb      	ldrh	r3, [r7, #14]
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff fdcb 	bl	8007d18 <ptr_to_mem>
 8008182:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	2200      	movs	r2, #0
 8008188:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	89ba      	ldrh	r2, [r7, #12]
 800818e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	8afa      	ldrh	r2, [r7, #22]
 8008194:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	89fa      	ldrh	r2, [r7, #14]
 800819a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80081a4:	d047      	beq.n	8008236 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff fdb4 	bl	8007d18 <ptr_to_mem>
 80081b0:	4602      	mov	r2, r0
 80081b2:	89fb      	ldrh	r3, [r7, #14]
 80081b4:	8053      	strh	r3, [r2, #2]
 80081b6:	e03e      	b.n	8008236 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80081b8:	8bfb      	ldrh	r3, [r7, #30]
 80081ba:	f103 0214 	add.w	r2, r3, #20
 80081be:	8abb      	ldrh	r3, [r7, #20]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d838      	bhi.n	8008236 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80081c4:	8afa      	ldrh	r2, [r7, #22]
 80081c6:	8bfb      	ldrh	r3, [r7, #30]
 80081c8:	4413      	add	r3, r2
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	3308      	adds	r3, #8
 80081ce:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	881b      	ldrh	r3, [r3, #0]
 80081d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80081d8:	d106      	bne.n	80081e8 <mem_trim+0x180>
 80081da:	4b1b      	ldr	r3, [pc, #108]	; (8008248 <mem_trim+0x1e0>)
 80081dc:	f240 3216 	movw	r2, #790	; 0x316
 80081e0:	491d      	ldr	r1, [pc, #116]	; (8008258 <mem_trim+0x1f0>)
 80081e2:	481b      	ldr	r0, [pc, #108]	; (8008250 <mem_trim+0x1e8>)
 80081e4:	f00a fcb2 	bl	8012b4c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80081e8:	89fb      	ldrh	r3, [r7, #14]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff fd94 	bl	8007d18 <ptr_to_mem>
 80081f0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80081f2:	4b1a      	ldr	r3, [pc, #104]	; (800825c <mem_trim+0x1f4>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d202      	bcs.n	8008202 <mem_trim+0x19a>
      lfree = mem2;
 80081fc:	4a17      	ldr	r2, [pc, #92]	; (800825c <mem_trim+0x1f4>)
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	2200      	movs	r2, #0
 8008206:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	881a      	ldrh	r2, [r3, #0]
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	8afa      	ldrh	r2, [r7, #22]
 8008214:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	89fa      	ldrh	r2, [r7, #14]
 800821a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	881b      	ldrh	r3, [r3, #0]
 8008220:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008224:	d007      	beq.n	8008236 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	4618      	mov	r0, r3
 800822c:	f7ff fd74 	bl	8007d18 <ptr_to_mem>
 8008230:	4602      	mov	r2, r0
 8008232:	89fb      	ldrh	r3, [r7, #14]
 8008234:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008236:	687b      	ldr	r3, [r7, #4]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3720      	adds	r7, #32
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	20000110 	.word	0x20000110
 8008244:	20000114 	.word	0x20000114
 8008248:	08013b38 	.word	0x08013b38
 800824c:	08013ca8 	.word	0x08013ca8
 8008250:	08013b80 	.word	0x08013b80
 8008254:	08013cc0 	.word	0x08013cc0
 8008258:	08013ce0 	.word	0x08013ce0
 800825c:	20000118 	.word	0x20000118

08008260 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b088      	sub	sp, #32
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800826a:	88fb      	ldrh	r3, [r7, #6]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <mem_malloc+0x14>
    return NULL;
 8008270:	2300      	movs	r3, #0
 8008272:	e0d9      	b.n	8008428 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008274:	88fb      	ldrh	r3, [r7, #6]
 8008276:	3303      	adds	r3, #3
 8008278:	b29b      	uxth	r3, r3
 800827a:	f023 0303 	bic.w	r3, r3, #3
 800827e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008280:	8bbb      	ldrh	r3, [r7, #28]
 8008282:	2b0b      	cmp	r3, #11
 8008284:	d801      	bhi.n	800828a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008286:	230c      	movs	r3, #12
 8008288:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800828a:	8bbb      	ldrh	r3, [r7, #28]
 800828c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008290:	d803      	bhi.n	800829a <mem_malloc+0x3a>
 8008292:	8bba      	ldrh	r2, [r7, #28]
 8008294:	88fb      	ldrh	r3, [r7, #6]
 8008296:	429a      	cmp	r2, r3
 8008298:	d201      	bcs.n	800829e <mem_malloc+0x3e>
    return NULL;
 800829a:	2300      	movs	r3, #0
 800829c:	e0c4      	b.n	8008428 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800829e:	4b64      	ldr	r3, [pc, #400]	; (8008430 <mem_malloc+0x1d0>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7ff fd4a 	bl	8007d3c <mem_to_ptr>
 80082a8:	4603      	mov	r3, r0
 80082aa:	83fb      	strh	r3, [r7, #30]
 80082ac:	e0b4      	b.n	8008418 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80082ae:	8bfb      	ldrh	r3, [r7, #30]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7ff fd31 	bl	8007d18 <ptr_to_mem>
 80082b6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	791b      	ldrb	r3, [r3, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f040 80a4 	bne.w	800840a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	881b      	ldrh	r3, [r3, #0]
 80082c6:	461a      	mov	r2, r3
 80082c8:	8bfb      	ldrh	r3, [r7, #30]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	f1a3 0208 	sub.w	r2, r3, #8
 80082d0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80082d2:	429a      	cmp	r2, r3
 80082d4:	f0c0 8099 	bcc.w	800840a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	461a      	mov	r2, r3
 80082de:	8bfb      	ldrh	r3, [r7, #30]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	f1a3 0208 	sub.w	r2, r3, #8
 80082e6:	8bbb      	ldrh	r3, [r7, #28]
 80082e8:	3314      	adds	r3, #20
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d333      	bcc.n	8008356 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80082ee:	8bfa      	ldrh	r2, [r7, #30]
 80082f0:	8bbb      	ldrh	r3, [r7, #28]
 80082f2:	4413      	add	r3, r2
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	3308      	adds	r3, #8
 80082f8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80082fa:	8a7b      	ldrh	r3, [r7, #18]
 80082fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008300:	d106      	bne.n	8008310 <mem_malloc+0xb0>
 8008302:	4b4c      	ldr	r3, [pc, #304]	; (8008434 <mem_malloc+0x1d4>)
 8008304:	f240 3287 	movw	r2, #903	; 0x387
 8008308:	494b      	ldr	r1, [pc, #300]	; (8008438 <mem_malloc+0x1d8>)
 800830a:	484c      	ldr	r0, [pc, #304]	; (800843c <mem_malloc+0x1dc>)
 800830c:	f00a fc1e 	bl	8012b4c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008310:	8a7b      	ldrh	r3, [r7, #18]
 8008312:	4618      	mov	r0, r3
 8008314:	f7ff fd00 	bl	8007d18 <ptr_to_mem>
 8008318:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	881a      	ldrh	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	8bfa      	ldrh	r2, [r7, #30]
 800832c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	8a7a      	ldrh	r2, [r7, #18]
 8008332:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	2201      	movs	r2, #1
 8008338:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008342:	d00b      	beq.n	800835c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	4618      	mov	r0, r3
 800834a:	f7ff fce5 	bl	8007d18 <ptr_to_mem>
 800834e:	4602      	mov	r2, r0
 8008350:	8a7b      	ldrh	r3, [r7, #18]
 8008352:	8053      	strh	r3, [r2, #2]
 8008354:	e002      	b.n	800835c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2201      	movs	r2, #1
 800835a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800835c:	4b34      	ldr	r3, [pc, #208]	; (8008430 <mem_malloc+0x1d0>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	429a      	cmp	r2, r3
 8008364:	d127      	bne.n	80083b6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8008366:	4b32      	ldr	r3, [pc, #200]	; (8008430 <mem_malloc+0x1d0>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800836c:	e005      	b.n	800837a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	881b      	ldrh	r3, [r3, #0]
 8008372:	4618      	mov	r0, r3
 8008374:	f7ff fcd0 	bl	8007d18 <ptr_to_mem>
 8008378:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	791b      	ldrb	r3, [r3, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d004      	beq.n	800838c <mem_malloc+0x12c>
 8008382:	4b2f      	ldr	r3, [pc, #188]	; (8008440 <mem_malloc+0x1e0>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	69ba      	ldr	r2, [r7, #24]
 8008388:	429a      	cmp	r2, r3
 800838a:	d1f0      	bne.n	800836e <mem_malloc+0x10e>
          }
          lfree = cur;
 800838c:	4a28      	ldr	r2, [pc, #160]	; (8008430 <mem_malloc+0x1d0>)
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008392:	4b27      	ldr	r3, [pc, #156]	; (8008430 <mem_malloc+0x1d0>)
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	4b2a      	ldr	r3, [pc, #168]	; (8008440 <mem_malloc+0x1e0>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d00b      	beq.n	80083b6 <mem_malloc+0x156>
 800839e:	4b24      	ldr	r3, [pc, #144]	; (8008430 <mem_malloc+0x1d0>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	791b      	ldrb	r3, [r3, #4]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d006      	beq.n	80083b6 <mem_malloc+0x156>
 80083a8:	4b22      	ldr	r3, [pc, #136]	; (8008434 <mem_malloc+0x1d4>)
 80083aa:	f240 32b5 	movw	r2, #949	; 0x3b5
 80083ae:	4925      	ldr	r1, [pc, #148]	; (8008444 <mem_malloc+0x1e4>)
 80083b0:	4822      	ldr	r0, [pc, #136]	; (800843c <mem_malloc+0x1dc>)
 80083b2:	f00a fbcb 	bl	8012b4c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80083b6:	8bba      	ldrh	r2, [r7, #28]
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	4413      	add	r3, r2
 80083bc:	3308      	adds	r3, #8
 80083be:	4a20      	ldr	r2, [pc, #128]	; (8008440 <mem_malloc+0x1e0>)
 80083c0:	6812      	ldr	r2, [r2, #0]
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d906      	bls.n	80083d4 <mem_malloc+0x174>
 80083c6:	4b1b      	ldr	r3, [pc, #108]	; (8008434 <mem_malloc+0x1d4>)
 80083c8:	f240 32ba 	movw	r2, #954	; 0x3ba
 80083cc:	491e      	ldr	r1, [pc, #120]	; (8008448 <mem_malloc+0x1e8>)
 80083ce:	481b      	ldr	r0, [pc, #108]	; (800843c <mem_malloc+0x1dc>)
 80083d0:	f00a fbbc 	bl	8012b4c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f003 0303 	and.w	r3, r3, #3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d006      	beq.n	80083ec <mem_malloc+0x18c>
 80083de:	4b15      	ldr	r3, [pc, #84]	; (8008434 <mem_malloc+0x1d4>)
 80083e0:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 80083e4:	4919      	ldr	r1, [pc, #100]	; (800844c <mem_malloc+0x1ec>)
 80083e6:	4815      	ldr	r0, [pc, #84]	; (800843c <mem_malloc+0x1dc>)
 80083e8:	f00a fbb0 	bl	8012b4c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f003 0303 	and.w	r3, r3, #3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d006      	beq.n	8008404 <mem_malloc+0x1a4>
 80083f6:	4b0f      	ldr	r3, [pc, #60]	; (8008434 <mem_malloc+0x1d4>)
 80083f8:	f240 32be 	movw	r2, #958	; 0x3be
 80083fc:	4914      	ldr	r1, [pc, #80]	; (8008450 <mem_malloc+0x1f0>)
 80083fe:	480f      	ldr	r0, [pc, #60]	; (800843c <mem_malloc+0x1dc>)
 8008400:	f00a fba4 	bl	8012b4c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	3308      	adds	r3, #8
 8008408:	e00e      	b.n	8008428 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800840a:	8bfb      	ldrh	r3, [r7, #30]
 800840c:	4618      	mov	r0, r3
 800840e:	f7ff fc83 	bl	8007d18 <ptr_to_mem>
 8008412:	4603      	mov	r3, r0
 8008414:	881b      	ldrh	r3, [r3, #0]
 8008416:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008418:	8bfa      	ldrh	r2, [r7, #30]
 800841a:	8bbb      	ldrh	r3, [r7, #28]
 800841c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8008420:	429a      	cmp	r2, r3
 8008422:	f4ff af44 	bcc.w	80082ae <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3720      	adds	r7, #32
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	20000118 	.word	0x20000118
 8008434:	08013b38 	.word	0x08013b38
 8008438:	08013ce0 	.word	0x08013ce0
 800843c:	08013b80 	.word	0x08013b80
 8008440:	20000114 	.word	0x20000114
 8008444:	08013cf4 	.word	0x08013cf4
 8008448:	08013d10 	.word	0x08013d10
 800844c:	08013d40 	.word	0x08013d40
 8008450:	08013d70 	.word	0x08013d70

08008454 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	3303      	adds	r3, #3
 800846a:	f023 0303 	bic.w	r3, r3, #3
 800846e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008470:	2300      	movs	r3, #0
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	e011      	b.n	800849a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	461a      	mov	r2, r3
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	4413      	add	r3, r2
 8008492:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	3301      	adds	r3, #1
 8008498:	60fb      	str	r3, [r7, #12]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	885b      	ldrh	r3, [r3, #2]
 800849e:	461a      	mov	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4293      	cmp	r3, r2
 80084a4:	dbe7      	blt.n	8008476 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80084a6:	bf00      	nop
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
	...

080084b4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80084ba:	2300      	movs	r3, #0
 80084bc:	80fb      	strh	r3, [r7, #6]
 80084be:	e009      	b.n	80084d4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80084c0:	88fb      	ldrh	r3, [r7, #6]
 80084c2:	4a08      	ldr	r2, [pc, #32]	; (80084e4 <memp_init+0x30>)
 80084c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7ff ffc3 	bl	8008454 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80084ce:	88fb      	ldrh	r3, [r7, #6]
 80084d0:	3301      	adds	r3, #1
 80084d2:	80fb      	strh	r3, [r7, #6]
 80084d4:	88fb      	ldrh	r3, [r7, #6]
 80084d6:	2b08      	cmp	r3, #8
 80084d8:	d9f2      	bls.n	80084c0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80084da:	bf00      	nop
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	080165c0 	.word	0x080165c0

080084e8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d012      	beq.n	8008524 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	6812      	ldr	r2, [r2, #0]
 8008506:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f003 0303 	and.w	r3, r3, #3
 800850e:	2b00      	cmp	r3, #0
 8008510:	d006      	beq.n	8008520 <do_memp_malloc_pool+0x38>
 8008512:	4b07      	ldr	r3, [pc, #28]	; (8008530 <do_memp_malloc_pool+0x48>)
 8008514:	f240 1219 	movw	r2, #281	; 0x119
 8008518:	4906      	ldr	r1, [pc, #24]	; (8008534 <do_memp_malloc_pool+0x4c>)
 800851a:	4807      	ldr	r0, [pc, #28]	; (8008538 <do_memp_malloc_pool+0x50>)
 800851c:	f00a fb16 	bl	8012b4c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	e000      	b.n	8008526 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	08013d94 	.word	0x08013d94
 8008534:	08013dc4 	.word	0x08013dc4
 8008538:	08013de8 	.word	0x08013de8

0800853c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	4603      	mov	r3, r0
 8008544:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008546:	79fb      	ldrb	r3, [r7, #7]
 8008548:	2b08      	cmp	r3, #8
 800854a:	d908      	bls.n	800855e <memp_malloc+0x22>
 800854c:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <memp_malloc+0x3c>)
 800854e:	f240 1257 	movw	r2, #343	; 0x157
 8008552:	490a      	ldr	r1, [pc, #40]	; (800857c <memp_malloc+0x40>)
 8008554:	480a      	ldr	r0, [pc, #40]	; (8008580 <memp_malloc+0x44>)
 8008556:	f00a faf9 	bl	8012b4c <iprintf>
 800855a:	2300      	movs	r3, #0
 800855c:	e008      	b.n	8008570 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	4a08      	ldr	r2, [pc, #32]	; (8008584 <memp_malloc+0x48>)
 8008562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff ffbe 	bl	80084e8 <do_memp_malloc_pool>
 800856c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800856e:	68fb      	ldr	r3, [r7, #12]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	08013d94 	.word	0x08013d94
 800857c:	08013e24 	.word	0x08013e24
 8008580:	08013de8 	.word	0x08013de8
 8008584:	080165c0 	.word	0x080165c0

08008588 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	f003 0303 	and.w	r3, r3, #3
 8008598:	2b00      	cmp	r3, #0
 800859a:	d006      	beq.n	80085aa <do_memp_free_pool+0x22>
 800859c:	4b0a      	ldr	r3, [pc, #40]	; (80085c8 <do_memp_free_pool+0x40>)
 800859e:	f240 126d 	movw	r2, #365	; 0x16d
 80085a2:	490a      	ldr	r1, [pc, #40]	; (80085cc <do_memp_free_pool+0x44>)
 80085a4:	480a      	ldr	r0, [pc, #40]	; (80085d0 <do_memp_free_pool+0x48>)
 80085a6:	f00a fad1 	bl	8012b4c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80085c0:	bf00      	nop
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	08013d94 	.word	0x08013d94
 80085cc:	08013e44 	.word	0x08013e44
 80085d0:	08013de8 	.word	0x08013de8

080085d4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	6039      	str	r1, [r7, #0]
 80085de:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80085e0:	79fb      	ldrb	r3, [r7, #7]
 80085e2:	2b08      	cmp	r3, #8
 80085e4:	d907      	bls.n	80085f6 <memp_free+0x22>
 80085e6:	4b0c      	ldr	r3, [pc, #48]	; (8008618 <memp_free+0x44>)
 80085e8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80085ec:	490b      	ldr	r1, [pc, #44]	; (800861c <memp_free+0x48>)
 80085ee:	480c      	ldr	r0, [pc, #48]	; (8008620 <memp_free+0x4c>)
 80085f0:	f00a faac 	bl	8012b4c <iprintf>
 80085f4:	e00c      	b.n	8008610 <memp_free+0x3c>

  if (mem == NULL) {
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d008      	beq.n	800860e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	4a09      	ldr	r2, [pc, #36]	; (8008624 <memp_free+0x50>)
 8008600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff ffbe 	bl	8008588 <do_memp_free_pool>
 800860c:	e000      	b.n	8008610 <memp_free+0x3c>
    return;
 800860e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	08013d94 	.word	0x08013d94
 800861c:	08013e64 	.word	0x08013e64
 8008620:	08013de8 	.word	0x08013de8
 8008624:	080165c0 	.word	0x080165c0

08008628 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008628:	b480      	push	{r7}
 800862a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800862c:	bf00      	nop
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
	...

08008638 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d108      	bne.n	800865e <netif_add+0x26>
 800864c:	4b57      	ldr	r3, [pc, #348]	; (80087ac <netif_add+0x174>)
 800864e:	f240 1227 	movw	r2, #295	; 0x127
 8008652:	4957      	ldr	r1, [pc, #348]	; (80087b0 <netif_add+0x178>)
 8008654:	4857      	ldr	r0, [pc, #348]	; (80087b4 <netif_add+0x17c>)
 8008656:	f00a fa79 	bl	8012b4c <iprintf>
 800865a:	2300      	movs	r3, #0
 800865c:	e0a2      	b.n	80087a4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	2b00      	cmp	r3, #0
 8008662:	d108      	bne.n	8008676 <netif_add+0x3e>
 8008664:	4b51      	ldr	r3, [pc, #324]	; (80087ac <netif_add+0x174>)
 8008666:	f44f 7294 	mov.w	r2, #296	; 0x128
 800866a:	4953      	ldr	r1, [pc, #332]	; (80087b8 <netif_add+0x180>)
 800866c:	4851      	ldr	r0, [pc, #324]	; (80087b4 <netif_add+0x17c>)
 800866e:	f00a fa6d 	bl	8012b4c <iprintf>
 8008672:	2300      	movs	r3, #0
 8008674:	e096      	b.n	80087a4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800867c:	4b4f      	ldr	r3, [pc, #316]	; (80087bc <netif_add+0x184>)
 800867e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008686:	4b4d      	ldr	r3, [pc, #308]	; (80087bc <netif_add+0x184>)
 8008688:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008690:	4b4a      	ldr	r3, [pc, #296]	; (80087bc <netif_add+0x184>)
 8008692:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4a45      	ldr	r2, [pc, #276]	; (80087c0 <netif_add+0x188>)
 80086aa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6a3a      	ldr	r2, [r7, #32]
 80086c4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80086c6:	4b3f      	ldr	r3, [pc, #252]	; (80087c4 <netif_add+0x18c>)
 80086c8:	781a      	ldrb	r2, [r3, #0]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086d4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	68b9      	ldr	r1, [r7, #8]
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f000 f913 	bl	8008908 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	4798      	blx	r3
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <netif_add+0xba>
    return NULL;
 80086ee:	2300      	movs	r3, #0
 80086f0:	e058      	b.n	80087a4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086f8:	2bff      	cmp	r3, #255	; 0xff
 80086fa:	d103      	bne.n	8008704 <netif_add+0xcc>
        netif->num = 0;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8008704:	2300      	movs	r3, #0
 8008706:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008708:	4b2f      	ldr	r3, [pc, #188]	; (80087c8 <netif_add+0x190>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	617b      	str	r3, [r7, #20]
 800870e:	e02b      	b.n	8008768 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008710:	697a      	ldr	r2, [r7, #20]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	429a      	cmp	r2, r3
 8008716:	d106      	bne.n	8008726 <netif_add+0xee>
 8008718:	4b24      	ldr	r3, [pc, #144]	; (80087ac <netif_add+0x174>)
 800871a:	f240 128b 	movw	r2, #395	; 0x18b
 800871e:	492b      	ldr	r1, [pc, #172]	; (80087cc <netif_add+0x194>)
 8008720:	4824      	ldr	r0, [pc, #144]	; (80087b4 <netif_add+0x17c>)
 8008722:	f00a fa13 	bl	8012b4c <iprintf>
        num_netifs++;
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	3301      	adds	r3, #1
 800872a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	2bff      	cmp	r3, #255	; 0xff
 8008730:	dd06      	ble.n	8008740 <netif_add+0x108>
 8008732:	4b1e      	ldr	r3, [pc, #120]	; (80087ac <netif_add+0x174>)
 8008734:	f240 128d 	movw	r2, #397	; 0x18d
 8008738:	4925      	ldr	r1, [pc, #148]	; (80087d0 <netif_add+0x198>)
 800873a:	481e      	ldr	r0, [pc, #120]	; (80087b4 <netif_add+0x17c>)
 800873c:	f00a fa06 	bl	8012b4c <iprintf>
        if (netif2->num == netif->num) {
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800874c:	429a      	cmp	r2, r3
 800874e:	d108      	bne.n	8008762 <netif_add+0x12a>
          netif->num++;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008756:	3301      	adds	r3, #1
 8008758:	b2da      	uxtb	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8008760:	e005      	b.n	800876e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	617b      	str	r3, [r7, #20]
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1d0      	bne.n	8008710 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1be      	bne.n	80086f2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800877a:	2bfe      	cmp	r3, #254	; 0xfe
 800877c:	d103      	bne.n	8008786 <netif_add+0x14e>
    netif_num = 0;
 800877e:	4b11      	ldr	r3, [pc, #68]	; (80087c4 <netif_add+0x18c>)
 8008780:	2200      	movs	r2, #0
 8008782:	701a      	strb	r2, [r3, #0]
 8008784:	e006      	b.n	8008794 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800878c:	3301      	adds	r3, #1
 800878e:	b2da      	uxtb	r2, r3
 8008790:	4b0c      	ldr	r3, [pc, #48]	; (80087c4 <netif_add+0x18c>)
 8008792:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008794:	4b0c      	ldr	r3, [pc, #48]	; (80087c8 <netif_add+0x190>)
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800879c:	4a0a      	ldr	r2, [pc, #40]	; (80087c8 <netif_add+0x190>)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80087a2:	68fb      	ldr	r3, [r7, #12]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3718      	adds	r7, #24
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	08013e80 	.word	0x08013e80
 80087b0:	08013f14 	.word	0x08013f14
 80087b4:	08013ed0 	.word	0x08013ed0
 80087b8:	08013f30 	.word	0x08013f30
 80087bc:	08016624 	.word	0x08016624
 80087c0:	08008b1b 	.word	0x08008b1b
 80087c4:	20000140 	.word	0x20000140
 80087c8:	2000bcb4 	.word	0x2000bcb4
 80087cc:	08013f54 	.word	0x08013f54
 80087d0:	08013f68 	.word	0x08013f68

080087d4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f002 fd7f 	bl	800b2e4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f007 fe7f 	bl	80104ec <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80087ee:	bf00      	nop
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
	...

080087f8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d106      	bne.n	8008818 <netif_do_set_ipaddr+0x20>
 800880a:	4b1d      	ldr	r3, [pc, #116]	; (8008880 <netif_do_set_ipaddr+0x88>)
 800880c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008810:	491c      	ldr	r1, [pc, #112]	; (8008884 <netif_do_set_ipaddr+0x8c>)
 8008812:	481d      	ldr	r0, [pc, #116]	; (8008888 <netif_do_set_ipaddr+0x90>)
 8008814:	f00a f99a 	bl	8012b4c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d106      	bne.n	800882c <netif_do_set_ipaddr+0x34>
 800881e:	4b18      	ldr	r3, [pc, #96]	; (8008880 <netif_do_set_ipaddr+0x88>)
 8008820:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008824:	4917      	ldr	r1, [pc, #92]	; (8008884 <netif_do_set_ipaddr+0x8c>)
 8008826:	4818      	ldr	r0, [pc, #96]	; (8008888 <netif_do_set_ipaddr+0x90>)
 8008828:	f00a f990 	bl	8012b4c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3304      	adds	r3, #4
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	429a      	cmp	r2, r3
 8008838:	d01c      	beq.n	8008874 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3304      	adds	r3, #4
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800884a:	f107 0314 	add.w	r3, r7, #20
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff ffbf 	bl	80087d4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <netif_do_set_ipaddr+0x6a>
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	e000      	b.n	8008864 <netif_do_set_ipaddr+0x6c>
 8008862:	2300      	movs	r3, #0
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008868:	2101      	movs	r1, #1
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 f8d2 	bl	8008a14 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008870:	2301      	movs	r3, #1
 8008872:	e000      	b.n	8008876 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	08013e80 	.word	0x08013e80
 8008884:	08013f98 	.word	0x08013f98
 8008888:	08013ed0 	.word	0x08013ed0

0800888c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	3308      	adds	r3, #8
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d00a      	beq.n	80088bc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d002      	beq.n	80088b2 <netif_do_set_netmask+0x26>
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	e000      	b.n	80088b4 <netif_do_set_netmask+0x28>
 80088b2:	2300      	movs	r3, #0
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80088b8:	2301      	movs	r3, #1
 80088ba:	e000      	b.n	80088be <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b085      	sub	sp, #20
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	330c      	adds	r3, #12
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d00a      	beq.n	80088fa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d002      	beq.n	80088f0 <netif_do_set_gw+0x26>
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	e000      	b.n	80088f2 <netif_do_set_gw+0x28>
 80088f0:	2300      	movs	r3, #0
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80088f6:	2301      	movs	r3, #1
 80088f8:	e000      	b.n	80088fc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b088      	sub	sp, #32
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
 8008914:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008916:	2300      	movs	r3, #0
 8008918:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800891a:	2300      	movs	r3, #0
 800891c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008924:	4b1c      	ldr	r3, [pc, #112]	; (8008998 <netif_set_addr+0x90>)
 8008926:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800892e:	4b1a      	ldr	r3, [pc, #104]	; (8008998 <netif_set_addr+0x90>)
 8008930:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008938:	4b17      	ldr	r3, [pc, #92]	; (8008998 <netif_set_addr+0x90>)
 800893a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <netif_set_addr+0x42>
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <netif_set_addr+0x46>
 800894a:	2301      	movs	r3, #1
 800894c:	e000      	b.n	8008950 <netif_set_addr+0x48>
 800894e:	2300      	movs	r3, #0
 8008950:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d006      	beq.n	8008966 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008958:	f107 0310 	add.w	r3, r7, #16
 800895c:	461a      	mov	r2, r3
 800895e:	68b9      	ldr	r1, [r7, #8]
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f7ff ff49 	bl	80087f8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008966:	69fa      	ldr	r2, [r7, #28]
 8008968:	6879      	ldr	r1, [r7, #4]
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f7ff ff8e 	bl	800888c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f7ff ffa8 	bl	80088ca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d106      	bne.n	800898e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008980:	f107 0310 	add.w	r3, r7, #16
 8008984:	461a      	mov	r2, r3
 8008986:	68b9      	ldr	r1, [r7, #8]
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f7ff ff35 	bl	80087f8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800898e:	bf00      	nop
 8008990:	3720      	adds	r7, #32
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	08016624 	.word	0x08016624

0800899c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80089a4:	4a04      	ldr	r2, [pc, #16]	; (80089b8 <netif_set_default+0x1c>)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80089aa:	bf00      	nop
 80089ac:	370c      	adds	r7, #12
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	2000bcb8 	.word	0x2000bcb8

080089bc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d107      	bne.n	80089da <netif_set_up+0x1e>
 80089ca:	4b0f      	ldr	r3, [pc, #60]	; (8008a08 <netif_set_up+0x4c>)
 80089cc:	f44f 7254 	mov.w	r2, #848	; 0x350
 80089d0:	490e      	ldr	r1, [pc, #56]	; (8008a0c <netif_set_up+0x50>)
 80089d2:	480f      	ldr	r0, [pc, #60]	; (8008a10 <netif_set_up+0x54>)
 80089d4:	f00a f8ba 	bl	8012b4c <iprintf>
 80089d8:	e013      	b.n	8008a02 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10c      	bne.n	8008a02 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80089ee:	f043 0301 	orr.w	r3, r3, #1
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80089fa:	2103      	movs	r1, #3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f809 	bl	8008a14 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	08013e80 	.word	0x08013e80
 8008a0c:	08014008 	.word	0x08014008
 8008a10:	08013ed0 	.word	0x08013ed0

08008a14 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <netif_issue_reports+0x20>
 8008a26:	4b18      	ldr	r3, [pc, #96]	; (8008a88 <netif_issue_reports+0x74>)
 8008a28:	f240 326d 	movw	r2, #877	; 0x36d
 8008a2c:	4917      	ldr	r1, [pc, #92]	; (8008a8c <netif_issue_reports+0x78>)
 8008a2e:	4818      	ldr	r0, [pc, #96]	; (8008a90 <netif_issue_reports+0x7c>)
 8008a30:	f00a f88c 	bl	8012b4c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a3a:	f003 0304 	and.w	r3, r3, #4
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d01e      	beq.n	8008a80 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a48:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d017      	beq.n	8008a80 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008a50:	78fb      	ldrb	r3, [r7, #3]
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d013      	beq.n	8008a82 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00e      	beq.n	8008a82 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a6a:	f003 0308 	and.w	r3, r3, #8
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d007      	beq.n	8008a82 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	3304      	adds	r3, #4
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f008 fca1 	bl	80113c0 <etharp_request>
 8008a7e:	e000      	b.n	8008a82 <netif_issue_reports+0x6e>
    return;
 8008a80:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	08013e80 	.word	0x08013e80
 8008a8c:	08014024 	.word	0x08014024
 8008a90:	08013ed0 	.word	0x08013ed0

08008a94 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d107      	bne.n	8008ab2 <netif_set_down+0x1e>
 8008aa2:	4b12      	ldr	r3, [pc, #72]	; (8008aec <netif_set_down+0x58>)
 8008aa4:	f240 329b 	movw	r2, #923	; 0x39b
 8008aa8:	4911      	ldr	r1, [pc, #68]	; (8008af0 <netif_set_down+0x5c>)
 8008aaa:	4812      	ldr	r0, [pc, #72]	; (8008af4 <netif_set_down+0x60>)
 8008aac:	f00a f84e 	bl	8012b4c <iprintf>
 8008ab0:	e019      	b.n	8008ae6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d012      	beq.n	8008ae6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ac6:	f023 0301 	bic.w	r3, r3, #1
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ad8:	f003 0308 	and.w	r3, r3, #8
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f008 f82b 	bl	8010b3c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	08013e80 	.word	0x08013e80
 8008af0:	08014048 	.word	0x08014048
 8008af4:	08013ed0 	.word	0x08013ed0

08008af8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	61da      	str	r2, [r3, #28]
  }
}
 8008b0e:	bf00      	nop
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b085      	sub	sp, #20
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	60f8      	str	r0, [r7, #12]
 8008b22:	60b9      	str	r1, [r7, #8]
 8008b24:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008b26:	f06f 030b 	mvn.w	r3, #11
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
	...

08008b38 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d013      	beq.n	8008b70 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008b48:	4b0d      	ldr	r3, [pc, #52]	; (8008b80 <netif_get_by_index+0x48>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	60fb      	str	r3, [r7, #12]
 8008b4e:	e00c      	b.n	8008b6a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b56:	3301      	adds	r3, #1
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	79fa      	ldrb	r2, [r7, #7]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d101      	bne.n	8008b64 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	e006      	b.n	8008b72 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	60fb      	str	r3, [r7, #12]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1ef      	bne.n	8008b50 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	2000bcb4 	.word	0x2000bcb4

08008b84 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008b8a:	4b0c      	ldr	r3, [pc, #48]	; (8008bbc <pbuf_free_ooseq+0x38>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008b90:	4b0b      	ldr	r3, [pc, #44]	; (8008bc0 <pbuf_free_ooseq+0x3c>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	607b      	str	r3, [r7, #4]
 8008b96:	e00a      	b.n	8008bae <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d003      	beq.n	8008ba8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f002 fbdd 	bl	800b360 <tcp_free_ooseq>
      return;
 8008ba6:	e005      	b.n	8008bb4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	607b      	str	r3, [r7, #4]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1f1      	bne.n	8008b98 <pbuf_free_ooseq+0x14>
    }
  }
}
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	2000bcbc 	.word	0x2000bcbc
 8008bc0:	2000bcc4 	.word	0x2000bcc4

08008bc4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008bc8:	4b03      	ldr	r3, [pc, #12]	; (8008bd8 <pbuf_pool_is_empty+0x14>)
 8008bca:	2201      	movs	r2, #1
 8008bcc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008bce:	bf00      	nop
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	2000bcbc 	.word	0x2000bcbc

08008bdc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	4611      	mov	r1, r2
 8008be8:	461a      	mov	r2, r3
 8008bea:	460b      	mov	r3, r1
 8008bec:	80fb      	strh	r3, [r7, #6]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	88fa      	ldrh	r2, [r7, #6]
 8008c02:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	88ba      	ldrh	r2, [r7, #4]
 8008c08:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008c0a:	8b3b      	ldrh	r3, [r7, #24]
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	7f3a      	ldrb	r2, [r7, #28]
 8008c16:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	73da      	strb	r2, [r3, #15]
}
 8008c24:	bf00      	nop
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08c      	sub	sp, #48	; 0x30
 8008c34:	af02      	add	r7, sp, #8
 8008c36:	4603      	mov	r3, r0
 8008c38:	71fb      	strb	r3, [r7, #7]
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	80bb      	strh	r3, [r7, #4]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008c42:	79fb      	ldrb	r3, [r7, #7]
 8008c44:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008c46:	887b      	ldrh	r3, [r7, #2]
 8008c48:	2b41      	cmp	r3, #65	; 0x41
 8008c4a:	d00b      	beq.n	8008c64 <pbuf_alloc+0x34>
 8008c4c:	2b41      	cmp	r3, #65	; 0x41
 8008c4e:	dc02      	bgt.n	8008c56 <pbuf_alloc+0x26>
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d007      	beq.n	8008c64 <pbuf_alloc+0x34>
 8008c54:	e0c2      	b.n	8008ddc <pbuf_alloc+0x1ac>
 8008c56:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008c5a:	d00b      	beq.n	8008c74 <pbuf_alloc+0x44>
 8008c5c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008c60:	d070      	beq.n	8008d44 <pbuf_alloc+0x114>
 8008c62:	e0bb      	b.n	8008ddc <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008c64:	887a      	ldrh	r2, [r7, #2]
 8008c66:	88bb      	ldrh	r3, [r7, #4]
 8008c68:	4619      	mov	r1, r3
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	f000 f8d2 	bl	8008e14 <pbuf_alloc_reference>
 8008c70:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008c72:	e0bd      	b.n	8008df0 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008c74:	2300      	movs	r3, #0
 8008c76:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008c7c:	88bb      	ldrh	r3, [r7, #4]
 8008c7e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008c80:	2008      	movs	r0, #8
 8008c82:	f7ff fc5b 	bl	800853c <memp_malloc>
 8008c86:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d109      	bne.n	8008ca2 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8008c8e:	f7ff ff99 	bl	8008bc4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <pbuf_alloc+0x6e>
            pbuf_free(p);
 8008c98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c9a:	f000 faa9 	bl	80091f0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	e0a7      	b.n	8008df2 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008ca2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ca4:	3303      	adds	r3, #3
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	f023 0303 	bic.w	r3, r3, #3
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	8b7a      	ldrh	r2, [r7, #26]
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	bf28      	it	cs
 8008cba:	4613      	movcs	r3, r2
 8008cbc:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008cbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008cc0:	3310      	adds	r3, #16
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	3303      	adds	r3, #3
 8008cc8:	f023 0303 	bic.w	r3, r3, #3
 8008ccc:	4618      	mov	r0, r3
 8008cce:	89f9      	ldrh	r1, [r7, #14]
 8008cd0:	8b7a      	ldrh	r2, [r7, #26]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	9301      	str	r3, [sp, #4]
 8008cd6:	887b      	ldrh	r3, [r7, #2]
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	4601      	mov	r1, r0
 8008cde:	6938      	ldr	r0, [r7, #16]
 8008ce0:	f7ff ff7c 	bl	8008bdc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	f003 0303 	and.w	r3, r3, #3
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d006      	beq.n	8008cfe <pbuf_alloc+0xce>
 8008cf0:	4b42      	ldr	r3, [pc, #264]	; (8008dfc <pbuf_alloc+0x1cc>)
 8008cf2:	f240 1201 	movw	r2, #257	; 0x101
 8008cf6:	4942      	ldr	r1, [pc, #264]	; (8008e00 <pbuf_alloc+0x1d0>)
 8008cf8:	4842      	ldr	r0, [pc, #264]	; (8008e04 <pbuf_alloc+0x1d4>)
 8008cfa:	f009 ff27 	bl	8012b4c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008cfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d00:	3303      	adds	r3, #3
 8008d02:	f023 0303 	bic.w	r3, r3, #3
 8008d06:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008d0a:	d106      	bne.n	8008d1a <pbuf_alloc+0xea>
 8008d0c:	4b3b      	ldr	r3, [pc, #236]	; (8008dfc <pbuf_alloc+0x1cc>)
 8008d0e:	f240 1203 	movw	r2, #259	; 0x103
 8008d12:	493d      	ldr	r1, [pc, #244]	; (8008e08 <pbuf_alloc+0x1d8>)
 8008d14:	483b      	ldr	r0, [pc, #236]	; (8008e04 <pbuf_alloc+0x1d4>)
 8008d16:	f009 ff19 	bl	8012b4c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d102      	bne.n	8008d26 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	627b      	str	r3, [r7, #36]	; 0x24
 8008d24:	e002      	b.n	8008d2c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008d30:	8b7a      	ldrh	r2, [r7, #26]
 8008d32:	89fb      	ldrh	r3, [r7, #14]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008d3c:	8b7b      	ldrh	r3, [r7, #26]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d19e      	bne.n	8008c80 <pbuf_alloc+0x50>
      break;
 8008d42:	e055      	b.n	8008df0 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008d44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d46:	3303      	adds	r3, #3
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	f023 0303 	bic.w	r3, r3, #3
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	88bb      	ldrh	r3, [r7, #4]
 8008d52:	3303      	adds	r3, #3
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	f023 0303 	bic.w	r3, r3, #3
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	4413      	add	r3, r2
 8008d5e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008d60:	8b3b      	ldrh	r3, [r7, #24]
 8008d62:	3310      	adds	r3, #16
 8008d64:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008d66:	8b3a      	ldrh	r2, [r7, #24]
 8008d68:	88bb      	ldrh	r3, [r7, #4]
 8008d6a:	3303      	adds	r3, #3
 8008d6c:	f023 0303 	bic.w	r3, r3, #3
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d306      	bcc.n	8008d82 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008d74:	8afa      	ldrh	r2, [r7, #22]
 8008d76:	88bb      	ldrh	r3, [r7, #4]
 8008d78:	3303      	adds	r3, #3
 8008d7a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d201      	bcs.n	8008d86 <pbuf_alloc+0x156>
        return NULL;
 8008d82:	2300      	movs	r3, #0
 8008d84:	e035      	b.n	8008df2 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008d86:	8afb      	ldrh	r3, [r7, #22]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7ff fa69 	bl	8008260 <mem_malloc>
 8008d8e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <pbuf_alloc+0x16a>
        return NULL;
 8008d96:	2300      	movs	r3, #0
 8008d98:	e02b      	b.n	8008df2 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008d9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d9c:	3310      	adds	r3, #16
 8008d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da0:	4413      	add	r3, r2
 8008da2:	3303      	adds	r3, #3
 8008da4:	f023 0303 	bic.w	r3, r3, #3
 8008da8:	4618      	mov	r0, r3
 8008daa:	88b9      	ldrh	r1, [r7, #4]
 8008dac:	88ba      	ldrh	r2, [r7, #4]
 8008dae:	2300      	movs	r3, #0
 8008db0:	9301      	str	r3, [sp, #4]
 8008db2:	887b      	ldrh	r3, [r7, #2]
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	460b      	mov	r3, r1
 8008db8:	4601      	mov	r1, r0
 8008dba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dbc:	f7ff ff0e 	bl	8008bdc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	f003 0303 	and.w	r3, r3, #3
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d010      	beq.n	8008dee <pbuf_alloc+0x1be>
 8008dcc:	4b0b      	ldr	r3, [pc, #44]	; (8008dfc <pbuf_alloc+0x1cc>)
 8008dce:	f240 1223 	movw	r2, #291	; 0x123
 8008dd2:	490e      	ldr	r1, [pc, #56]	; (8008e0c <pbuf_alloc+0x1dc>)
 8008dd4:	480b      	ldr	r0, [pc, #44]	; (8008e04 <pbuf_alloc+0x1d4>)
 8008dd6:	f009 feb9 	bl	8012b4c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008dda:	e008      	b.n	8008dee <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008ddc:	4b07      	ldr	r3, [pc, #28]	; (8008dfc <pbuf_alloc+0x1cc>)
 8008dde:	f240 1227 	movw	r2, #295	; 0x127
 8008de2:	490b      	ldr	r1, [pc, #44]	; (8008e10 <pbuf_alloc+0x1e0>)
 8008de4:	4807      	ldr	r0, [pc, #28]	; (8008e04 <pbuf_alloc+0x1d4>)
 8008de6:	f009 feb1 	bl	8012b4c <iprintf>
      return NULL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	e001      	b.n	8008df2 <pbuf_alloc+0x1c2>
      break;
 8008dee:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3728      	adds	r7, #40	; 0x28
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	080140b0 	.word	0x080140b0
 8008e00:	080140e0 	.word	0x080140e0
 8008e04:	08014110 	.word	0x08014110
 8008e08:	08014138 	.word	0x08014138
 8008e0c:	0801416c 	.word	0x0801416c
 8008e10:	08014198 	.word	0x08014198

08008e14 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	807b      	strh	r3, [r7, #2]
 8008e20:	4613      	mov	r3, r2
 8008e22:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008e24:	883b      	ldrh	r3, [r7, #0]
 8008e26:	2b41      	cmp	r3, #65	; 0x41
 8008e28:	d009      	beq.n	8008e3e <pbuf_alloc_reference+0x2a>
 8008e2a:	883b      	ldrh	r3, [r7, #0]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d006      	beq.n	8008e3e <pbuf_alloc_reference+0x2a>
 8008e30:	4b0f      	ldr	r3, [pc, #60]	; (8008e70 <pbuf_alloc_reference+0x5c>)
 8008e32:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008e36:	490f      	ldr	r1, [pc, #60]	; (8008e74 <pbuf_alloc_reference+0x60>)
 8008e38:	480f      	ldr	r0, [pc, #60]	; (8008e78 <pbuf_alloc_reference+0x64>)
 8008e3a:	f009 fe87 	bl	8012b4c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008e3e:	2007      	movs	r0, #7
 8008e40:	f7ff fb7c 	bl	800853c <memp_malloc>
 8008e44:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	e00b      	b.n	8008e68 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008e50:	8879      	ldrh	r1, [r7, #2]
 8008e52:	887a      	ldrh	r2, [r7, #2]
 8008e54:	2300      	movs	r3, #0
 8008e56:	9301      	str	r3, [sp, #4]
 8008e58:	883b      	ldrh	r3, [r7, #0]
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	6879      	ldr	r1, [r7, #4]
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f7ff febb 	bl	8008bdc <pbuf_init_alloced_pbuf>
  return p;
 8008e66:	68fb      	ldr	r3, [r7, #12]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	080140b0 	.word	0x080140b0
 8008e74:	080141b4 	.word	0x080141b4
 8008e78:	08014110 	.word	0x08014110

08008e7c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b088      	sub	sp, #32
 8008e80:	af02      	add	r7, sp, #8
 8008e82:	607b      	str	r3, [r7, #4]
 8008e84:	4603      	mov	r3, r0
 8008e86:	73fb      	strb	r3, [r7, #15]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	81bb      	strh	r3, [r7, #12]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008e94:	8a7b      	ldrh	r3, [r7, #18]
 8008e96:	3303      	adds	r3, #3
 8008e98:	f023 0203 	bic.w	r2, r3, #3
 8008e9c:	89bb      	ldrh	r3, [r7, #12]
 8008e9e:	441a      	add	r2, r3
 8008ea0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d901      	bls.n	8008eaa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	e018      	b.n	8008edc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d007      	beq.n	8008ec0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008eb0:	8a7b      	ldrh	r3, [r7, #18]
 8008eb2:	3303      	adds	r3, #3
 8008eb4:	f023 0303 	bic.w	r3, r3, #3
 8008eb8:	6a3a      	ldr	r2, [r7, #32]
 8008eba:	4413      	add	r3, r2
 8008ebc:	617b      	str	r3, [r7, #20]
 8008ebe:	e001      	b.n	8008ec4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	89b9      	ldrh	r1, [r7, #12]
 8008ec8:	89ba      	ldrh	r2, [r7, #12]
 8008eca:	2302      	movs	r3, #2
 8008ecc:	9301      	str	r3, [sp, #4]
 8008ece:	897b      	ldrh	r3, [r7, #10]
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	6979      	ldr	r1, [r7, #20]
 8008ed6:	f7ff fe81 	bl	8008bdc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008eda:	687b      	ldr	r3, [r7, #4]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d106      	bne.n	8008f04 <pbuf_realloc+0x20>
 8008ef6:	4b3a      	ldr	r3, [pc, #232]	; (8008fe0 <pbuf_realloc+0xfc>)
 8008ef8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008efc:	4939      	ldr	r1, [pc, #228]	; (8008fe4 <pbuf_realloc+0x100>)
 8008efe:	483a      	ldr	r0, [pc, #232]	; (8008fe8 <pbuf_realloc+0x104>)
 8008f00:	f009 fe24 	bl	8012b4c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	891b      	ldrh	r3, [r3, #8]
 8008f08:	887a      	ldrh	r2, [r7, #2]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d264      	bcs.n	8008fd8 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	891a      	ldrh	r2, [r3, #8]
 8008f12:	887b      	ldrh	r3, [r7, #2]
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008f18:	887b      	ldrh	r3, [r7, #2]
 8008f1a:	817b      	strh	r3, [r7, #10]
  q = p;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008f20:	e018      	b.n	8008f54 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	895b      	ldrh	r3, [r3, #10]
 8008f26:	897a      	ldrh	r2, [r7, #10]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	891a      	ldrh	r2, [r3, #8]
 8008f30:	893b      	ldrh	r3, [r7, #8]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d106      	bne.n	8008f54 <pbuf_realloc+0x70>
 8008f46:	4b26      	ldr	r3, [pc, #152]	; (8008fe0 <pbuf_realloc+0xfc>)
 8008f48:	f240 12af 	movw	r2, #431	; 0x1af
 8008f4c:	4927      	ldr	r1, [pc, #156]	; (8008fec <pbuf_realloc+0x108>)
 8008f4e:	4826      	ldr	r0, [pc, #152]	; (8008fe8 <pbuf_realloc+0x104>)
 8008f50:	f009 fdfc 	bl	8012b4c <iprintf>
  while (rem_len > q->len) {
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	895b      	ldrh	r3, [r3, #10]
 8008f58:	897a      	ldrh	r2, [r7, #10]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d8e1      	bhi.n	8008f22 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	7b1b      	ldrb	r3, [r3, #12]
 8008f62:	f003 030f 	and.w	r3, r3, #15
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d122      	bne.n	8008fb0 <pbuf_realloc+0xcc>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	895b      	ldrh	r3, [r3, #10]
 8008f6e:	897a      	ldrh	r2, [r7, #10]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d01d      	beq.n	8008fb0 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	7b5b      	ldrb	r3, [r3, #13]
 8008f78:	f003 0302 	and.w	r3, r3, #2
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d117      	bne.n	8008fb0 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	461a      	mov	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	897b      	ldrh	r3, [r7, #10]
 8008f8e:	4413      	add	r3, r2
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	4619      	mov	r1, r3
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f7ff f867 	bl	8008068 <mem_trim>
 8008f9a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d106      	bne.n	8008fb0 <pbuf_realloc+0xcc>
 8008fa2:	4b0f      	ldr	r3, [pc, #60]	; (8008fe0 <pbuf_realloc+0xfc>)
 8008fa4:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008fa8:	4911      	ldr	r1, [pc, #68]	; (8008ff0 <pbuf_realloc+0x10c>)
 8008faa:	480f      	ldr	r0, [pc, #60]	; (8008fe8 <pbuf_realloc+0x104>)
 8008fac:	f009 fdce 	bl	8012b4c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	897a      	ldrh	r2, [r7, #10]
 8008fb4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	895a      	ldrh	r2, [r3, #10]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d004      	beq.n	8008fd0 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 f910 	bl	80091f0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	e000      	b.n	8008fda <pbuf_realloc+0xf6>
    return;
 8008fd8:	bf00      	nop

}
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	080140b0 	.word	0x080140b0
 8008fe4:	080141c8 	.word	0x080141c8
 8008fe8:	08014110 	.word	0x08014110
 8008fec:	080141e0 	.word	0x080141e0
 8008ff0:	080141f8 	.word	0x080141f8

08008ff4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	4613      	mov	r3, r2
 8009000:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d106      	bne.n	8009016 <pbuf_add_header_impl+0x22>
 8009008:	4b2b      	ldr	r3, [pc, #172]	; (80090b8 <pbuf_add_header_impl+0xc4>)
 800900a:	f240 12df 	movw	r2, #479	; 0x1df
 800900e:	492b      	ldr	r1, [pc, #172]	; (80090bc <pbuf_add_header_impl+0xc8>)
 8009010:	482b      	ldr	r0, [pc, #172]	; (80090c0 <pbuf_add_header_impl+0xcc>)
 8009012:	f009 fd9b 	bl	8012b4c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <pbuf_add_header_impl+0x30>
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009022:	d301      	bcc.n	8009028 <pbuf_add_header_impl+0x34>
    return 1;
 8009024:	2301      	movs	r3, #1
 8009026:	e043      	b.n	80090b0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <pbuf_add_header_impl+0x3e>
    return 0;
 800902e:	2300      	movs	r3, #0
 8009030:	e03e      	b.n	80090b0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	891a      	ldrh	r2, [r3, #8]
 800903a:	8a7b      	ldrh	r3, [r7, #18]
 800903c:	4413      	add	r3, r2
 800903e:	b29b      	uxth	r3, r3
 8009040:	8a7a      	ldrh	r2, [r7, #18]
 8009042:	429a      	cmp	r2, r3
 8009044:	d901      	bls.n	800904a <pbuf_add_header_impl+0x56>
    return 1;
 8009046:	2301      	movs	r3, #1
 8009048:	e032      	b.n	80090b0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	7b1b      	ldrb	r3, [r3, #12]
 800904e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009050:	8a3b      	ldrh	r3, [r7, #16]
 8009052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00c      	beq.n	8009074 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	425b      	negs	r3, r3
 8009062:	4413      	add	r3, r2
 8009064:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3310      	adds	r3, #16
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	429a      	cmp	r2, r3
 800906e:	d20d      	bcs.n	800908c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009070:	2301      	movs	r3, #1
 8009072:	e01d      	b.n	80090b0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d006      	beq.n	8009088 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	685a      	ldr	r2, [r3, #4]
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	425b      	negs	r3, r3
 8009082:	4413      	add	r3, r2
 8009084:	617b      	str	r3, [r7, #20]
 8009086:	e001      	b.n	800908c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009088:	2301      	movs	r3, #1
 800908a:	e011      	b.n	80090b0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	895a      	ldrh	r2, [r3, #10]
 8009096:	8a7b      	ldrh	r3, [r7, #18]
 8009098:	4413      	add	r3, r2
 800909a:	b29a      	uxth	r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	891a      	ldrh	r2, [r3, #8]
 80090a4:	8a7b      	ldrh	r3, [r7, #18]
 80090a6:	4413      	add	r3, r2
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	811a      	strh	r2, [r3, #8]


  return 0;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3718      	adds	r7, #24
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	080140b0 	.word	0x080140b0
 80090bc:	08014214 	.word	0x08014214
 80090c0:	08014110 	.word	0x08014110

080090c4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80090ce:	2200      	movs	r2, #0
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f7ff ff8e 	bl	8008ff4 <pbuf_add_header_impl>
 80090d8:	4603      	mov	r3, r0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d106      	bne.n	8009102 <pbuf_remove_header+0x1e>
 80090f4:	4b20      	ldr	r3, [pc, #128]	; (8009178 <pbuf_remove_header+0x94>)
 80090f6:	f240 224b 	movw	r2, #587	; 0x24b
 80090fa:	4920      	ldr	r1, [pc, #128]	; (800917c <pbuf_remove_header+0x98>)
 80090fc:	4820      	ldr	r0, [pc, #128]	; (8009180 <pbuf_remove_header+0x9c>)
 80090fe:	f009 fd25 	bl	8012b4c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d003      	beq.n	8009110 <pbuf_remove_header+0x2c>
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800910e:	d301      	bcc.n	8009114 <pbuf_remove_header+0x30>
    return 1;
 8009110:	2301      	movs	r3, #1
 8009112:	e02c      	b.n	800916e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <pbuf_remove_header+0x3a>
    return 0;
 800911a:	2300      	movs	r3, #0
 800911c:	e027      	b.n	800916e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	895b      	ldrh	r3, [r3, #10]
 8009126:	89fa      	ldrh	r2, [r7, #14]
 8009128:	429a      	cmp	r2, r3
 800912a:	d908      	bls.n	800913e <pbuf_remove_header+0x5a>
 800912c:	4b12      	ldr	r3, [pc, #72]	; (8009178 <pbuf_remove_header+0x94>)
 800912e:	f240 2255 	movw	r2, #597	; 0x255
 8009132:	4914      	ldr	r1, [pc, #80]	; (8009184 <pbuf_remove_header+0xa0>)
 8009134:	4812      	ldr	r0, [pc, #72]	; (8009180 <pbuf_remove_header+0x9c>)
 8009136:	f009 fd09 	bl	8012b4c <iprintf>
 800913a:	2301      	movs	r3, #1
 800913c:	e017      	b.n	800916e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	441a      	add	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	895a      	ldrh	r2, [r3, #10]
 8009154:	89fb      	ldrh	r3, [r7, #14]
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	b29a      	uxth	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	891a      	ldrh	r2, [r3, #8]
 8009162:	89fb      	ldrh	r3, [r7, #14]
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	b29a      	uxth	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	080140b0 	.word	0x080140b0
 800917c:	08014214 	.word	0x08014214
 8009180:	08014110 	.word	0x08014110
 8009184:	08014220 	.word	0x08014220

08009188 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	460b      	mov	r3, r1
 8009192:	807b      	strh	r3, [r7, #2]
 8009194:	4613      	mov	r3, r2
 8009196:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009198:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800919c:	2b00      	cmp	r3, #0
 800919e:	da08      	bge.n	80091b2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80091a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80091a4:	425b      	negs	r3, r3
 80091a6:	4619      	mov	r1, r3
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7ff ff9b 	bl	80090e4 <pbuf_remove_header>
 80091ae:	4603      	mov	r3, r0
 80091b0:	e007      	b.n	80091c2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80091b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80091b6:	787a      	ldrb	r2, [r7, #1]
 80091b8:	4619      	mov	r1, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7ff ff1a 	bl	8008ff4 <pbuf_add_header_impl>
 80091c0:	4603      	mov	r3, r0
  }
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b082      	sub	sp, #8
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	460b      	mov	r3, r1
 80091d4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80091d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80091da:	2201      	movs	r2, #1
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f7ff ffd2 	bl	8009188 <pbuf_header_impl>
 80091e4:	4603      	mov	r3, r0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
	...

080091f0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10b      	bne.n	8009216 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d106      	bne.n	8009212 <pbuf_free+0x22>
 8009204:	4b38      	ldr	r3, [pc, #224]	; (80092e8 <pbuf_free+0xf8>)
 8009206:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800920a:	4938      	ldr	r1, [pc, #224]	; (80092ec <pbuf_free+0xfc>)
 800920c:	4838      	ldr	r0, [pc, #224]	; (80092f0 <pbuf_free+0x100>)
 800920e:	f009 fc9d 	bl	8012b4c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009212:	2300      	movs	r3, #0
 8009214:	e063      	b.n	80092de <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009216:	2300      	movs	r3, #0
 8009218:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800921a:	e05c      	b.n	80092d6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	7b9b      	ldrb	r3, [r3, #14]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d106      	bne.n	8009232 <pbuf_free+0x42>
 8009224:	4b30      	ldr	r3, [pc, #192]	; (80092e8 <pbuf_free+0xf8>)
 8009226:	f240 22f1 	movw	r2, #753	; 0x2f1
 800922a:	4932      	ldr	r1, [pc, #200]	; (80092f4 <pbuf_free+0x104>)
 800922c:	4830      	ldr	r0, [pc, #192]	; (80092f0 <pbuf_free+0x100>)
 800922e:	f009 fc8d 	bl	8012b4c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	7b9b      	ldrb	r3, [r3, #14]
 8009236:	3b01      	subs	r3, #1
 8009238:	b2da      	uxtb	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	739a      	strb	r2, [r3, #14]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	7b9b      	ldrb	r3, [r3, #14]
 8009242:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009244:	7dbb      	ldrb	r3, [r7, #22]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d143      	bne.n	80092d2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	7b1b      	ldrb	r3, [r3, #12]
 8009254:	f003 030f 	and.w	r3, r3, #15
 8009258:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	7b5b      	ldrb	r3, [r3, #13]
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	2b00      	cmp	r3, #0
 8009264:	d011      	beq.n	800928a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d106      	bne.n	8009280 <pbuf_free+0x90>
 8009272:	4b1d      	ldr	r3, [pc, #116]	; (80092e8 <pbuf_free+0xf8>)
 8009274:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009278:	491f      	ldr	r1, [pc, #124]	; (80092f8 <pbuf_free+0x108>)
 800927a:	481d      	ldr	r0, [pc, #116]	; (80092f0 <pbuf_free+0x100>)
 800927c:	f009 fc66 	bl	8012b4c <iprintf>
        pc->custom_free_function(p);
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	4798      	blx	r3
 8009288:	e01d      	b.n	80092c6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	2b02      	cmp	r3, #2
 800928e:	d104      	bne.n	800929a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009290:	6879      	ldr	r1, [r7, #4]
 8009292:	2008      	movs	r0, #8
 8009294:	f7ff f99e 	bl	80085d4 <memp_free>
 8009298:	e015      	b.n	80092c6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800929a:	7bfb      	ldrb	r3, [r7, #15]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d104      	bne.n	80092aa <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80092a0:	6879      	ldr	r1, [r7, #4]
 80092a2:	2007      	movs	r0, #7
 80092a4:	f7ff f996 	bl	80085d4 <memp_free>
 80092a8:	e00d      	b.n	80092c6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d103      	bne.n	80092b8 <pbuf_free+0xc8>
          mem_free(p);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f7fe fe6f 	bl	8007f94 <mem_free>
 80092b6:	e006      	b.n	80092c6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80092b8:	4b0b      	ldr	r3, [pc, #44]	; (80092e8 <pbuf_free+0xf8>)
 80092ba:	f240 320f 	movw	r2, #783	; 0x30f
 80092be:	490f      	ldr	r1, [pc, #60]	; (80092fc <pbuf_free+0x10c>)
 80092c0:	480b      	ldr	r0, [pc, #44]	; (80092f0 <pbuf_free+0x100>)
 80092c2:	f009 fc43 	bl	8012b4c <iprintf>
        }
      }
      count++;
 80092c6:	7dfb      	ldrb	r3, [r7, #23]
 80092c8:	3301      	adds	r3, #1
 80092ca:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	607b      	str	r3, [r7, #4]
 80092d0:	e001      	b.n	80092d6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d19f      	bne.n	800921c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80092dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3718      	adds	r7, #24
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	080140b0 	.word	0x080140b0
 80092ec:	08014214 	.word	0x08014214
 80092f0:	08014110 	.word	0x08014110
 80092f4:	08014240 	.word	0x08014240
 80092f8:	08014258 	.word	0x08014258
 80092fc:	0801427c 	.word	0x0801427c

08009300 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009308:	2300      	movs	r3, #0
 800930a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800930c:	e005      	b.n	800931a <pbuf_clen+0x1a>
    ++len;
 800930e:	89fb      	ldrh	r3, [r7, #14]
 8009310:	3301      	adds	r3, #1
 8009312:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1f6      	bne.n	800930e <pbuf_clen+0xe>
  }
  return len;
 8009320:	89fb      	ldrh	r3, [r7, #14]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
	...

08009330 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d010      	beq.n	8009360 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	7b9b      	ldrb	r3, [r3, #14]
 8009342:	3301      	adds	r3, #1
 8009344:	b2da      	uxtb	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	7b9b      	ldrb	r3, [r3, #14]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d106      	bne.n	8009360 <pbuf_ref+0x30>
 8009352:	4b05      	ldr	r3, [pc, #20]	; (8009368 <pbuf_ref+0x38>)
 8009354:	f240 3242 	movw	r2, #834	; 0x342
 8009358:	4904      	ldr	r1, [pc, #16]	; (800936c <pbuf_ref+0x3c>)
 800935a:	4805      	ldr	r0, [pc, #20]	; (8009370 <pbuf_ref+0x40>)
 800935c:	f009 fbf6 	bl	8012b4c <iprintf>
  }
}
 8009360:	bf00      	nop
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	080140b0 	.word	0x080140b0
 800936c:	08014290 	.word	0x08014290
 8009370:	08014110 	.word	0x08014110

08009374 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <pbuf_cat+0x16>
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d107      	bne.n	800939a <pbuf_cat+0x26>
 800938a:	4b20      	ldr	r3, [pc, #128]	; (800940c <pbuf_cat+0x98>)
 800938c:	f240 325a 	movw	r2, #858	; 0x35a
 8009390:	491f      	ldr	r1, [pc, #124]	; (8009410 <pbuf_cat+0x9c>)
 8009392:	4820      	ldr	r0, [pc, #128]	; (8009414 <pbuf_cat+0xa0>)
 8009394:	f009 fbda 	bl	8012b4c <iprintf>
 8009398:	e034      	b.n	8009404 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	60fb      	str	r3, [r7, #12]
 800939e:	e00a      	b.n	80093b6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	891a      	ldrh	r2, [r3, #8]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	891b      	ldrh	r3, [r3, #8]
 80093a8:	4413      	add	r3, r2
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	60fb      	str	r3, [r7, #12]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1f0      	bne.n	80093a0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	891a      	ldrh	r2, [r3, #8]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	895b      	ldrh	r3, [r3, #10]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d006      	beq.n	80093d8 <pbuf_cat+0x64>
 80093ca:	4b10      	ldr	r3, [pc, #64]	; (800940c <pbuf_cat+0x98>)
 80093cc:	f240 3262 	movw	r2, #866	; 0x362
 80093d0:	4911      	ldr	r1, [pc, #68]	; (8009418 <pbuf_cat+0xa4>)
 80093d2:	4810      	ldr	r0, [pc, #64]	; (8009414 <pbuf_cat+0xa0>)
 80093d4:	f009 fbba 	bl	8012b4c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d006      	beq.n	80093ee <pbuf_cat+0x7a>
 80093e0:	4b0a      	ldr	r3, [pc, #40]	; (800940c <pbuf_cat+0x98>)
 80093e2:	f240 3263 	movw	r2, #867	; 0x363
 80093e6:	490d      	ldr	r1, [pc, #52]	; (800941c <pbuf_cat+0xa8>)
 80093e8:	480a      	ldr	r0, [pc, #40]	; (8009414 <pbuf_cat+0xa0>)
 80093ea:	f009 fbaf 	bl	8012b4c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	891a      	ldrh	r2, [r3, #8]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	891b      	ldrh	r3, [r3, #8]
 80093f6:	4413      	add	r3, r2
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	683a      	ldr	r2, [r7, #0]
 8009402:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	080140b0 	.word	0x080140b0
 8009410:	080142a4 	.word	0x080142a4
 8009414:	08014110 	.word	0x08014110
 8009418:	080142dc 	.word	0x080142dc
 800941c:	0801430c 	.word	0x0801430c

08009420 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7ff ffa1 	bl	8009374 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009432:	6838      	ldr	r0, [r7, #0]
 8009434:	f7ff ff7c 	bl	8009330 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009438:	bf00      	nop
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800944a:	2300      	movs	r3, #0
 800944c:	617b      	str	r3, [r7, #20]
 800944e:	2300      	movs	r3, #0
 8009450:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d008      	beq.n	800946a <pbuf_copy+0x2a>
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d005      	beq.n	800946a <pbuf_copy+0x2a>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	891a      	ldrh	r2, [r3, #8]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	891b      	ldrh	r3, [r3, #8]
 8009466:	429a      	cmp	r2, r3
 8009468:	d209      	bcs.n	800947e <pbuf_copy+0x3e>
 800946a:	4b57      	ldr	r3, [pc, #348]	; (80095c8 <pbuf_copy+0x188>)
 800946c:	f240 32ca 	movw	r2, #970	; 0x3ca
 8009470:	4956      	ldr	r1, [pc, #344]	; (80095cc <pbuf_copy+0x18c>)
 8009472:	4857      	ldr	r0, [pc, #348]	; (80095d0 <pbuf_copy+0x190>)
 8009474:	f009 fb6a 	bl	8012b4c <iprintf>
 8009478:	f06f 030f 	mvn.w	r3, #15
 800947c:	e09f      	b.n	80095be <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	895b      	ldrh	r3, [r3, #10]
 8009482:	461a      	mov	r2, r3
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	1ad2      	subs	r2, r2, r3
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	895b      	ldrh	r3, [r3, #10]
 800948c:	4619      	mov	r1, r3
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	1acb      	subs	r3, r1, r3
 8009492:	429a      	cmp	r2, r3
 8009494:	d306      	bcc.n	80094a4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	895b      	ldrh	r3, [r3, #10]
 800949a:	461a      	mov	r2, r3
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	60fb      	str	r3, [r7, #12]
 80094a2:	e005      	b.n	80094b0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	895b      	ldrh	r3, [r3, #10]
 80094a8:	461a      	mov	r2, r3
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685a      	ldr	r2, [r3, #4]
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	18d0      	adds	r0, r2, r3
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	4413      	add	r3, r2
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	4619      	mov	r1, r3
 80094c4:	f009 fb2f 	bl	8012b26 <memcpy>
    offset_to += len;
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	4413      	add	r3, r2
 80094ce:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	4413      	add	r3, r2
 80094d6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	895b      	ldrh	r3, [r3, #10]
 80094dc:	461a      	mov	r2, r3
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d906      	bls.n	80094f2 <pbuf_copy+0xb2>
 80094e4:	4b38      	ldr	r3, [pc, #224]	; (80095c8 <pbuf_copy+0x188>)
 80094e6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80094ea:	493a      	ldr	r1, [pc, #232]	; (80095d4 <pbuf_copy+0x194>)
 80094ec:	4838      	ldr	r0, [pc, #224]	; (80095d0 <pbuf_copy+0x190>)
 80094ee:	f009 fb2d 	bl	8012b4c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	895b      	ldrh	r3, [r3, #10]
 80094f6:	461a      	mov	r2, r3
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d906      	bls.n	800950c <pbuf_copy+0xcc>
 80094fe:	4b32      	ldr	r3, [pc, #200]	; (80095c8 <pbuf_copy+0x188>)
 8009500:	f240 32da 	movw	r2, #986	; 0x3da
 8009504:	4934      	ldr	r1, [pc, #208]	; (80095d8 <pbuf_copy+0x198>)
 8009506:	4832      	ldr	r0, [pc, #200]	; (80095d0 <pbuf_copy+0x190>)
 8009508:	f009 fb20 	bl	8012b4c <iprintf>
    if (offset_from >= p_from->len) {
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	895b      	ldrh	r3, [r3, #10]
 8009510:	461a      	mov	r2, r3
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	4293      	cmp	r3, r2
 8009516:	d304      	bcc.n	8009522 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	895b      	ldrh	r3, [r3, #10]
 8009526:	461a      	mov	r2, r3
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	4293      	cmp	r3, r2
 800952c:	d114      	bne.n	8009558 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800952e:	2300      	movs	r3, #0
 8009530:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10c      	bne.n	8009558 <pbuf_copy+0x118>
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d009      	beq.n	8009558 <pbuf_copy+0x118>
 8009544:	4b20      	ldr	r3, [pc, #128]	; (80095c8 <pbuf_copy+0x188>)
 8009546:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800954a:	4924      	ldr	r1, [pc, #144]	; (80095dc <pbuf_copy+0x19c>)
 800954c:	4820      	ldr	r0, [pc, #128]	; (80095d0 <pbuf_copy+0x190>)
 800954e:	f009 fafd 	bl	8012b4c <iprintf>
 8009552:	f06f 030f 	mvn.w	r3, #15
 8009556:	e032      	b.n	80095be <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d013      	beq.n	8009586 <pbuf_copy+0x146>
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	895a      	ldrh	r2, [r3, #10]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	891b      	ldrh	r3, [r3, #8]
 8009566:	429a      	cmp	r2, r3
 8009568:	d10d      	bne.n	8009586 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d009      	beq.n	8009586 <pbuf_copy+0x146>
 8009572:	4b15      	ldr	r3, [pc, #84]	; (80095c8 <pbuf_copy+0x188>)
 8009574:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8009578:	4919      	ldr	r1, [pc, #100]	; (80095e0 <pbuf_copy+0x1a0>)
 800957a:	4815      	ldr	r0, [pc, #84]	; (80095d0 <pbuf_copy+0x190>)
 800957c:	f009 fae6 	bl	8012b4c <iprintf>
 8009580:	f06f 0305 	mvn.w	r3, #5
 8009584:	e01b      	b.n	80095be <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d013      	beq.n	80095b4 <pbuf_copy+0x174>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	895a      	ldrh	r2, [r3, #10]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	891b      	ldrh	r3, [r3, #8]
 8009594:	429a      	cmp	r2, r3
 8009596:	d10d      	bne.n	80095b4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d009      	beq.n	80095b4 <pbuf_copy+0x174>
 80095a0:	4b09      	ldr	r3, [pc, #36]	; (80095c8 <pbuf_copy+0x188>)
 80095a2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80095a6:	490e      	ldr	r1, [pc, #56]	; (80095e0 <pbuf_copy+0x1a0>)
 80095a8:	4809      	ldr	r0, [pc, #36]	; (80095d0 <pbuf_copy+0x190>)
 80095aa:	f009 facf 	bl	8012b4c <iprintf>
 80095ae:	f06f 0305 	mvn.w	r3, #5
 80095b2:	e004      	b.n	80095be <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f47f af61 	bne.w	800947e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	080140b0 	.word	0x080140b0
 80095cc:	08014358 	.word	0x08014358
 80095d0:	08014110 	.word	0x08014110
 80095d4:	08014388 	.word	0x08014388
 80095d8:	080143a0 	.word	0x080143a0
 80095dc:	080143bc 	.word	0x080143bc
 80095e0:	080143cc 	.word	0x080143cc

080095e4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b088      	sub	sp, #32
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	4611      	mov	r1, r2
 80095f0:	461a      	mov	r2, r3
 80095f2:	460b      	mov	r3, r1
 80095f4:	80fb      	strh	r3, [r7, #6]
 80095f6:	4613      	mov	r3, r2
 80095f8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80095fa:	2300      	movs	r3, #0
 80095fc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d108      	bne.n	800961a <pbuf_copy_partial+0x36>
 8009608:	4b2b      	ldr	r3, [pc, #172]	; (80096b8 <pbuf_copy_partial+0xd4>)
 800960a:	f240 420a 	movw	r2, #1034	; 0x40a
 800960e:	492b      	ldr	r1, [pc, #172]	; (80096bc <pbuf_copy_partial+0xd8>)
 8009610:	482b      	ldr	r0, [pc, #172]	; (80096c0 <pbuf_copy_partial+0xdc>)
 8009612:	f009 fa9b 	bl	8012b4c <iprintf>
 8009616:	2300      	movs	r3, #0
 8009618:	e04a      	b.n	80096b0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d108      	bne.n	8009632 <pbuf_copy_partial+0x4e>
 8009620:	4b25      	ldr	r3, [pc, #148]	; (80096b8 <pbuf_copy_partial+0xd4>)
 8009622:	f240 420b 	movw	r2, #1035	; 0x40b
 8009626:	4927      	ldr	r1, [pc, #156]	; (80096c4 <pbuf_copy_partial+0xe0>)
 8009628:	4825      	ldr	r0, [pc, #148]	; (80096c0 <pbuf_copy_partial+0xdc>)
 800962a:	f009 fa8f 	bl	8012b4c <iprintf>
 800962e:	2300      	movs	r3, #0
 8009630:	e03e      	b.n	80096b0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	61fb      	str	r3, [r7, #28]
 8009636:	e034      	b.n	80096a2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009638:	88bb      	ldrh	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00a      	beq.n	8009654 <pbuf_copy_partial+0x70>
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	895b      	ldrh	r3, [r3, #10]
 8009642:	88ba      	ldrh	r2, [r7, #4]
 8009644:	429a      	cmp	r2, r3
 8009646:	d305      	bcc.n	8009654 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	895b      	ldrh	r3, [r3, #10]
 800964c:	88ba      	ldrh	r2, [r7, #4]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	80bb      	strh	r3, [r7, #4]
 8009652:	e023      	b.n	800969c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	895a      	ldrh	r2, [r3, #10]
 8009658:	88bb      	ldrh	r3, [r7, #4]
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800965e:	8b3a      	ldrh	r2, [r7, #24]
 8009660:	88fb      	ldrh	r3, [r7, #6]
 8009662:	429a      	cmp	r2, r3
 8009664:	d901      	bls.n	800966a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009666:	88fb      	ldrh	r3, [r7, #6]
 8009668:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800966a:	8b7b      	ldrh	r3, [r7, #26]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	18d0      	adds	r0, r2, r3
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	88bb      	ldrh	r3, [r7, #4]
 8009676:	4413      	add	r3, r2
 8009678:	8b3a      	ldrh	r2, [r7, #24]
 800967a:	4619      	mov	r1, r3
 800967c:	f009 fa53 	bl	8012b26 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009680:	8afa      	ldrh	r2, [r7, #22]
 8009682:	8b3b      	ldrh	r3, [r7, #24]
 8009684:	4413      	add	r3, r2
 8009686:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009688:	8b7a      	ldrh	r2, [r7, #26]
 800968a:	8b3b      	ldrh	r3, [r7, #24]
 800968c:	4413      	add	r3, r2
 800968e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009690:	88fa      	ldrh	r2, [r7, #6]
 8009692:	8b3b      	ldrh	r3, [r7, #24]
 8009694:	1ad3      	subs	r3, r2, r3
 8009696:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009698:	2300      	movs	r3, #0
 800969a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	61fb      	str	r3, [r7, #28]
 80096a2:	88fb      	ldrh	r3, [r7, #6]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <pbuf_copy_partial+0xca>
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1c4      	bne.n	8009638 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80096ae:	8afb      	ldrh	r3, [r7, #22]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3720      	adds	r7, #32
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	080140b0 	.word	0x080140b0
 80096bc:	080143f8 	.word	0x080143f8
 80096c0:	08014110 	.word	0x08014110
 80096c4:	08014418 	.word	0x08014418

080096c8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	4603      	mov	r3, r0
 80096d0:	603a      	str	r2, [r7, #0]
 80096d2:	71fb      	strb	r3, [r7, #7]
 80096d4:	460b      	mov	r3, r1
 80096d6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	8919      	ldrh	r1, [r3, #8]
 80096dc:	88ba      	ldrh	r2, [r7, #4]
 80096de:	79fb      	ldrb	r3, [r7, #7]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7ff faa5 	bl	8008c30 <pbuf_alloc>
 80096e6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d101      	bne.n	80096f2 <pbuf_clone+0x2a>
    return NULL;
 80096ee:	2300      	movs	r3, #0
 80096f0:	e011      	b.n	8009716 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f7ff fea3 	bl	8009440 <pbuf_copy>
 80096fa:	4603      	mov	r3, r0
 80096fc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80096fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d006      	beq.n	8009714 <pbuf_clone+0x4c>
 8009706:	4b06      	ldr	r3, [pc, #24]	; (8009720 <pbuf_clone+0x58>)
 8009708:	f240 5224 	movw	r2, #1316	; 0x524
 800970c:	4905      	ldr	r1, [pc, #20]	; (8009724 <pbuf_clone+0x5c>)
 800970e:	4806      	ldr	r0, [pc, #24]	; (8009728 <pbuf_clone+0x60>)
 8009710:	f009 fa1c 	bl	8012b4c <iprintf>
  return q;
 8009714:	68fb      	ldr	r3, [r7, #12]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	080140b0 	.word	0x080140b0
 8009724:	08014524 	.word	0x08014524
 8009728:	08014110 	.word	0x08014110

0800972c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009730:	f009 fa24 	bl	8012b7c <rand>
 8009734:	4603      	mov	r3, r0
 8009736:	b29b      	uxth	r3, r3
 8009738:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800973c:	b29b      	uxth	r3, r3
 800973e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009742:	b29a      	uxth	r2, r3
 8009744:	4b01      	ldr	r3, [pc, #4]	; (800974c <tcp_init+0x20>)
 8009746:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009748:	bf00      	nop
 800974a:	bd80      	pop	{r7, pc}
 800974c:	20000044 	.word	0x20000044

08009750 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	7d1b      	ldrb	r3, [r3, #20]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d105      	bne.n	800976c <tcp_free+0x1c>
 8009760:	4b06      	ldr	r3, [pc, #24]	; (800977c <tcp_free+0x2c>)
 8009762:	22d4      	movs	r2, #212	; 0xd4
 8009764:	4906      	ldr	r1, [pc, #24]	; (8009780 <tcp_free+0x30>)
 8009766:	4807      	ldr	r0, [pc, #28]	; (8009784 <tcp_free+0x34>)
 8009768:	f009 f9f0 	bl	8012b4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800976c:	6879      	ldr	r1, [r7, #4]
 800976e:	2001      	movs	r0, #1
 8009770:	f7fe ff30 	bl	80085d4 <memp_free>
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	080145b0 	.word	0x080145b0
 8009780:	080145e0 	.word	0x080145e0
 8009784:	080145f4 	.word	0x080145f4

08009788 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	7d1b      	ldrb	r3, [r3, #20]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d105      	bne.n	80097a4 <tcp_free_listen+0x1c>
 8009798:	4b06      	ldr	r3, [pc, #24]	; (80097b4 <tcp_free_listen+0x2c>)
 800979a:	22df      	movs	r2, #223	; 0xdf
 800979c:	4906      	ldr	r1, [pc, #24]	; (80097b8 <tcp_free_listen+0x30>)
 800979e:	4807      	ldr	r0, [pc, #28]	; (80097bc <tcp_free_listen+0x34>)
 80097a0:	f009 f9d4 	bl	8012b4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	2002      	movs	r0, #2
 80097a8:	f7fe ff14 	bl	80085d4 <memp_free>
}
 80097ac:	bf00      	nop
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	080145b0 	.word	0x080145b0
 80097b8:	0801461c 	.word	0x0801461c
 80097bc:	080145f4 	.word	0x080145f4

080097c0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80097c4:	f001 f852 	bl	800a86c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80097c8:	4b07      	ldr	r3, [pc, #28]	; (80097e8 <tcp_tmr+0x28>)
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	3301      	adds	r3, #1
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	4b05      	ldr	r3, [pc, #20]	; (80097e8 <tcp_tmr+0x28>)
 80097d2:	701a      	strb	r2, [r3, #0]
 80097d4:	4b04      	ldr	r3, [pc, #16]	; (80097e8 <tcp_tmr+0x28>)
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	f003 0301 	and.w	r3, r3, #1
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80097e0:	f000 fd06 	bl	800a1f0 <tcp_slowtmr>
  }
}
 80097e4:	bf00      	nop
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	20000141 	.word	0x20000141

080097ec <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d105      	bne.n	8009808 <tcp_remove_listener+0x1c>
 80097fc:	4b0d      	ldr	r3, [pc, #52]	; (8009834 <tcp_remove_listener+0x48>)
 80097fe:	22ff      	movs	r2, #255	; 0xff
 8009800:	490d      	ldr	r1, [pc, #52]	; (8009838 <tcp_remove_listener+0x4c>)
 8009802:	480e      	ldr	r0, [pc, #56]	; (800983c <tcp_remove_listener+0x50>)
 8009804:	f009 f9a2 	bl	8012b4c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	e00a      	b.n	8009824 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	429a      	cmp	r2, r3
 8009816:	d102      	bne.n	800981e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1f1      	bne.n	800980e <tcp_remove_listener+0x22>
    }
  }
}
 800982a:	bf00      	nop
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	080145b0 	.word	0x080145b0
 8009838:	08014638 	.word	0x08014638
 800983c:	080145f4 	.word	0x080145f4

08009840 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d106      	bne.n	800985c <tcp_listen_closed+0x1c>
 800984e:	4b14      	ldr	r3, [pc, #80]	; (80098a0 <tcp_listen_closed+0x60>)
 8009850:	f240 1211 	movw	r2, #273	; 0x111
 8009854:	4913      	ldr	r1, [pc, #76]	; (80098a4 <tcp_listen_closed+0x64>)
 8009856:	4814      	ldr	r0, [pc, #80]	; (80098a8 <tcp_listen_closed+0x68>)
 8009858:	f009 f978 	bl	8012b4c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	7d1b      	ldrb	r3, [r3, #20]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d006      	beq.n	8009872 <tcp_listen_closed+0x32>
 8009864:	4b0e      	ldr	r3, [pc, #56]	; (80098a0 <tcp_listen_closed+0x60>)
 8009866:	f44f 7289 	mov.w	r2, #274	; 0x112
 800986a:	4910      	ldr	r1, [pc, #64]	; (80098ac <tcp_listen_closed+0x6c>)
 800986c:	480e      	ldr	r0, [pc, #56]	; (80098a8 <tcp_listen_closed+0x68>)
 800986e:	f009 f96d 	bl	8012b4c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009872:	2301      	movs	r3, #1
 8009874:	60fb      	str	r3, [r7, #12]
 8009876:	e00b      	b.n	8009890 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009878:	4a0d      	ldr	r2, [pc, #52]	; (80098b0 <tcp_listen_closed+0x70>)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	6879      	ldr	r1, [r7, #4]
 8009884:	4618      	mov	r0, r3
 8009886:	f7ff ffb1 	bl	80097ec <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3301      	adds	r3, #1
 800988e:	60fb      	str	r3, [r7, #12]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b03      	cmp	r3, #3
 8009894:	d9f0      	bls.n	8009878 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009896:	bf00      	nop
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	080145b0 	.word	0x080145b0
 80098a4:	08014660 	.word	0x08014660
 80098a8:	080145f4 	.word	0x080145f4
 80098ac:	0801466c 	.word	0x0801466c
 80098b0:	080165fc 	.word	0x080165fc

080098b4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80098b4:	b5b0      	push	{r4, r5, r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af04      	add	r7, sp, #16
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d106      	bne.n	80098d4 <tcp_close_shutdown+0x20>
 80098c6:	4b61      	ldr	r3, [pc, #388]	; (8009a4c <tcp_close_shutdown+0x198>)
 80098c8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80098cc:	4960      	ldr	r1, [pc, #384]	; (8009a50 <tcp_close_shutdown+0x19c>)
 80098ce:	4861      	ldr	r0, [pc, #388]	; (8009a54 <tcp_close_shutdown+0x1a0>)
 80098d0:	f009 f93c 	bl	8012b4c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80098d4:	78fb      	ldrb	r3, [r7, #3]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d066      	beq.n	80099a8 <tcp_close_shutdown+0xf4>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	7d1b      	ldrb	r3, [r3, #20]
 80098de:	2b04      	cmp	r3, #4
 80098e0:	d003      	beq.n	80098ea <tcp_close_shutdown+0x36>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	7d1b      	ldrb	r3, [r3, #20]
 80098e6:	2b07      	cmp	r3, #7
 80098e8:	d15e      	bne.n	80099a8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d104      	bne.n	80098fc <tcp_close_shutdown+0x48>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80098fa:	d055      	beq.n	80099a8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	8b5b      	ldrh	r3, [r3, #26]
 8009900:	f003 0310 	and.w	r3, r3, #16
 8009904:	2b00      	cmp	r3, #0
 8009906:	d106      	bne.n	8009916 <tcp_close_shutdown+0x62>
 8009908:	4b50      	ldr	r3, [pc, #320]	; (8009a4c <tcp_close_shutdown+0x198>)
 800990a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800990e:	4952      	ldr	r1, [pc, #328]	; (8009a58 <tcp_close_shutdown+0x1a4>)
 8009910:	4850      	ldr	r0, [pc, #320]	; (8009a54 <tcp_close_shutdown+0x1a0>)
 8009912:	f009 f91b 	bl	8012b4c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800991e:	687d      	ldr	r5, [r7, #4]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	3304      	adds	r3, #4
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	8ad2      	ldrh	r2, [r2, #22]
 8009928:	6879      	ldr	r1, [r7, #4]
 800992a:	8b09      	ldrh	r1, [r1, #24]
 800992c:	9102      	str	r1, [sp, #8]
 800992e:	9201      	str	r2, [sp, #4]
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	462b      	mov	r3, r5
 8009934:	4622      	mov	r2, r4
 8009936:	4601      	mov	r1, r0
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f005 fd89 	bl	800f450 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f001 fb5a 	bl	800aff8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009944:	4b45      	ldr	r3, [pc, #276]	; (8009a5c <tcp_close_shutdown+0x1a8>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	429a      	cmp	r2, r3
 800994c:	d105      	bne.n	800995a <tcp_close_shutdown+0xa6>
 800994e:	4b43      	ldr	r3, [pc, #268]	; (8009a5c <tcp_close_shutdown+0x1a8>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	4a41      	ldr	r2, [pc, #260]	; (8009a5c <tcp_close_shutdown+0x1a8>)
 8009956:	6013      	str	r3, [r2, #0]
 8009958:	e013      	b.n	8009982 <tcp_close_shutdown+0xce>
 800995a:	4b40      	ldr	r3, [pc, #256]	; (8009a5c <tcp_close_shutdown+0x1a8>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	60fb      	str	r3, [r7, #12]
 8009960:	e00c      	b.n	800997c <tcp_close_shutdown+0xc8>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	429a      	cmp	r2, r3
 800996a:	d104      	bne.n	8009976 <tcp_close_shutdown+0xc2>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	68da      	ldr	r2, [r3, #12]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	60da      	str	r2, [r3, #12]
 8009974:	e005      	b.n	8009982 <tcp_close_shutdown+0xce>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	60fb      	str	r3, [r7, #12]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1ef      	bne.n	8009962 <tcp_close_shutdown+0xae>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	60da      	str	r2, [r3, #12]
 8009988:	4b35      	ldr	r3, [pc, #212]	; (8009a60 <tcp_close_shutdown+0x1ac>)
 800998a:	2201      	movs	r2, #1
 800998c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800998e:	4b35      	ldr	r3, [pc, #212]	; (8009a64 <tcp_close_shutdown+0x1b0>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	429a      	cmp	r2, r3
 8009996:	d102      	bne.n	800999e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009998:	f003 ffec 	bl	800d974 <tcp_trigger_input_pcb_close>
 800999c:	e002      	b.n	80099a4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7ff fed6 	bl	8009750 <tcp_free>
      }
      return ERR_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	e04d      	b.n	8009a44 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	7d1b      	ldrb	r3, [r3, #20]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d02d      	beq.n	8009a0c <tcp_close_shutdown+0x158>
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d036      	beq.n	8009a22 <tcp_close_shutdown+0x16e>
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d13f      	bne.n	8009a38 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	8adb      	ldrh	r3, [r3, #22]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d021      	beq.n	8009a04 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80099c0:	4b29      	ldr	r3, [pc, #164]	; (8009a68 <tcp_close_shutdown+0x1b4>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d105      	bne.n	80099d6 <tcp_close_shutdown+0x122>
 80099ca:	4b27      	ldr	r3, [pc, #156]	; (8009a68 <tcp_close_shutdown+0x1b4>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	4a25      	ldr	r2, [pc, #148]	; (8009a68 <tcp_close_shutdown+0x1b4>)
 80099d2:	6013      	str	r3, [r2, #0]
 80099d4:	e013      	b.n	80099fe <tcp_close_shutdown+0x14a>
 80099d6:	4b24      	ldr	r3, [pc, #144]	; (8009a68 <tcp_close_shutdown+0x1b4>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	60bb      	str	r3, [r7, #8]
 80099dc:	e00c      	b.n	80099f8 <tcp_close_shutdown+0x144>
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d104      	bne.n	80099f2 <tcp_close_shutdown+0x13e>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	68da      	ldr	r2, [r3, #12]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	60da      	str	r2, [r3, #12]
 80099f0:	e005      	b.n	80099fe <tcp_close_shutdown+0x14a>
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	60bb      	str	r3, [r7, #8]
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1ef      	bne.n	80099de <tcp_close_shutdown+0x12a>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7ff fea3 	bl	8009750 <tcp_free>
      break;
 8009a0a:	e01a      	b.n	8009a42 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f7ff ff17 	bl	8009840 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009a12:	6879      	ldr	r1, [r7, #4]
 8009a14:	4815      	ldr	r0, [pc, #84]	; (8009a6c <tcp_close_shutdown+0x1b8>)
 8009a16:	f001 fb3f 	bl	800b098 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7ff feb4 	bl	8009788 <tcp_free_listen>
      break;
 8009a20:	e00f      	b.n	8009a42 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009a22:	6879      	ldr	r1, [r7, #4]
 8009a24:	480d      	ldr	r0, [pc, #52]	; (8009a5c <tcp_close_shutdown+0x1a8>)
 8009a26:	f001 fb37 	bl	800b098 <tcp_pcb_remove>
 8009a2a:	4b0d      	ldr	r3, [pc, #52]	; (8009a60 <tcp_close_shutdown+0x1ac>)
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff fe8d 	bl	8009750 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009a36:	e004      	b.n	8009a42 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f819 	bl	8009a70 <tcp_close_shutdown_fin>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	e000      	b.n	8009a44 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8009a4c:	080145b0 	.word	0x080145b0
 8009a50:	08014684 	.word	0x08014684
 8009a54:	080145f4 	.word	0x080145f4
 8009a58:	080146a4 	.word	0x080146a4
 8009a5c:	2000bcc4 	.word	0x2000bcc4
 8009a60:	2000bcc0 	.word	0x2000bcc0
 8009a64:	2000bcd8 	.word	0x2000bcd8
 8009a68:	2000bcd0 	.word	0x2000bcd0
 8009a6c:	2000bccc 	.word	0x2000bccc

08009a70 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d106      	bne.n	8009a8c <tcp_close_shutdown_fin+0x1c>
 8009a7e:	4b2c      	ldr	r3, [pc, #176]	; (8009b30 <tcp_close_shutdown_fin+0xc0>)
 8009a80:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009a84:	492b      	ldr	r1, [pc, #172]	; (8009b34 <tcp_close_shutdown_fin+0xc4>)
 8009a86:	482c      	ldr	r0, [pc, #176]	; (8009b38 <tcp_close_shutdown_fin+0xc8>)
 8009a88:	f009 f860 	bl	8012b4c <iprintf>

  switch (pcb->state) {
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	7d1b      	ldrb	r3, [r3, #20]
 8009a90:	2b04      	cmp	r3, #4
 8009a92:	d010      	beq.n	8009ab6 <tcp_close_shutdown_fin+0x46>
 8009a94:	2b07      	cmp	r3, #7
 8009a96:	d01b      	beq.n	8009ad0 <tcp_close_shutdown_fin+0x60>
 8009a98:	2b03      	cmp	r3, #3
 8009a9a:	d126      	bne.n	8009aea <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f004 fdd5 	bl	800e64c <tcp_send_fin>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d11f      	bne.n	8009aee <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2205      	movs	r2, #5
 8009ab2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009ab4:	e01b      	b.n	8009aee <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f004 fdc8 	bl	800e64c <tcp_send_fin>
 8009abc:	4603      	mov	r3, r0
 8009abe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d114      	bne.n	8009af2 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2205      	movs	r2, #5
 8009acc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009ace:	e010      	b.n	8009af2 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f004 fdbb 	bl	800e64c <tcp_send_fin>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d109      	bne.n	8009af6 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2209      	movs	r2, #9
 8009ae6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009ae8:	e005      	b.n	8009af6 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	e01c      	b.n	8009b28 <tcp_close_shutdown_fin+0xb8>
      break;
 8009aee:	bf00      	nop
 8009af0:	e002      	b.n	8009af8 <tcp_close_shutdown_fin+0x88>
      break;
 8009af2:	bf00      	nop
 8009af4:	e000      	b.n	8009af8 <tcp_close_shutdown_fin+0x88>
      break;
 8009af6:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d103      	bne.n	8009b08 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f004 fee1 	bl	800e8c8 <tcp_output>
 8009b06:	e00d      	b.n	8009b24 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8009b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b10:	d108      	bne.n	8009b24 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	8b5b      	ldrh	r3, [r3, #26]
 8009b16:	f043 0308 	orr.w	r3, r3, #8
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	e001      	b.n	8009b28 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8009b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	080145b0 	.word	0x080145b0
 8009b34:	08014660 	.word	0x08014660
 8009b38:	080145f4 	.word	0x080145f4

08009b3c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d109      	bne.n	8009b5e <tcp_close+0x22>
 8009b4a:	4b0f      	ldr	r3, [pc, #60]	; (8009b88 <tcp_close+0x4c>)
 8009b4c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009b50:	490e      	ldr	r1, [pc, #56]	; (8009b8c <tcp_close+0x50>)
 8009b52:	480f      	ldr	r0, [pc, #60]	; (8009b90 <tcp_close+0x54>)
 8009b54:	f008 fffa 	bl	8012b4c <iprintf>
 8009b58:	f06f 030f 	mvn.w	r3, #15
 8009b5c:	e00f      	b.n	8009b7e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	7d1b      	ldrb	r3, [r3, #20]
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d006      	beq.n	8009b74 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	8b5b      	ldrh	r3, [r3, #26]
 8009b6a:	f043 0310 	orr.w	r3, r3, #16
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009b74:	2101      	movs	r1, #1
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7ff fe9c 	bl	80098b4 <tcp_close_shutdown>
 8009b7c:	4603      	mov	r3, r0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	080145b0 	.word	0x080145b0
 8009b8c:	080146c0 	.word	0x080146c0
 8009b90:	080145f4 	.word	0x080145f4

08009b94 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08e      	sub	sp, #56	; 0x38
 8009b98:	af04      	add	r7, sp, #16
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d107      	bne.n	8009bb4 <tcp_abandon+0x20>
 8009ba4:	4b52      	ldr	r3, [pc, #328]	; (8009cf0 <tcp_abandon+0x15c>)
 8009ba6:	f240 223d 	movw	r2, #573	; 0x23d
 8009baa:	4952      	ldr	r1, [pc, #328]	; (8009cf4 <tcp_abandon+0x160>)
 8009bac:	4852      	ldr	r0, [pc, #328]	; (8009cf8 <tcp_abandon+0x164>)
 8009bae:	f008 ffcd 	bl	8012b4c <iprintf>
 8009bb2:	e099      	b.n	8009ce8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	7d1b      	ldrb	r3, [r3, #20]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d106      	bne.n	8009bca <tcp_abandon+0x36>
 8009bbc:	4b4c      	ldr	r3, [pc, #304]	; (8009cf0 <tcp_abandon+0x15c>)
 8009bbe:	f240 2241 	movw	r2, #577	; 0x241
 8009bc2:	494e      	ldr	r1, [pc, #312]	; (8009cfc <tcp_abandon+0x168>)
 8009bc4:	484c      	ldr	r0, [pc, #304]	; (8009cf8 <tcp_abandon+0x164>)
 8009bc6:	f008 ffc1 	bl	8012b4c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	7d1b      	ldrb	r3, [r3, #20]
 8009bce:	2b0a      	cmp	r3, #10
 8009bd0:	d107      	bne.n	8009be2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	484a      	ldr	r0, [pc, #296]	; (8009d00 <tcp_abandon+0x16c>)
 8009bd6:	f001 fa5f 	bl	800b098 <tcp_pcb_remove>
    tcp_free(pcb);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7ff fdb8 	bl	8009750 <tcp_free>
 8009be0:	e082      	b.n	8009ce8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009be6:	2300      	movs	r3, #0
 8009be8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bee:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bfc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	7d1b      	ldrb	r3, [r3, #20]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d126      	bne.n	8009c5a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	8adb      	ldrh	r3, [r3, #22]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d02e      	beq.n	8009c72 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009c14:	4b3b      	ldr	r3, [pc, #236]	; (8009d04 <tcp_abandon+0x170>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d105      	bne.n	8009c2a <tcp_abandon+0x96>
 8009c1e:	4b39      	ldr	r3, [pc, #228]	; (8009d04 <tcp_abandon+0x170>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	4a37      	ldr	r2, [pc, #220]	; (8009d04 <tcp_abandon+0x170>)
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	e013      	b.n	8009c52 <tcp_abandon+0xbe>
 8009c2a:	4b36      	ldr	r3, [pc, #216]	; (8009d04 <tcp_abandon+0x170>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	61fb      	str	r3, [r7, #28]
 8009c30:	e00c      	b.n	8009c4c <tcp_abandon+0xb8>
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d104      	bne.n	8009c46 <tcp_abandon+0xb2>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	68da      	ldr	r2, [r3, #12]
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	60da      	str	r2, [r3, #12]
 8009c44:	e005      	b.n	8009c52 <tcp_abandon+0xbe>
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	61fb      	str	r3, [r7, #28]
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1ef      	bne.n	8009c32 <tcp_abandon+0x9e>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	60da      	str	r2, [r3, #12]
 8009c58:	e00b      	b.n	8009c72 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	8adb      	ldrh	r3, [r3, #22]
 8009c62:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009c64:	6879      	ldr	r1, [r7, #4]
 8009c66:	4828      	ldr	r0, [pc, #160]	; (8009d08 <tcp_abandon+0x174>)
 8009c68:	f001 fa16 	bl	800b098 <tcp_pcb_remove>
 8009c6c:	4b27      	ldr	r3, [pc, #156]	; (8009d0c <tcp_abandon+0x178>)
 8009c6e:	2201      	movs	r2, #1
 8009c70:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d004      	beq.n	8009c84 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 fed4 	bl	800aa2c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d004      	beq.n	8009c96 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 fecb 	bl	800aa2c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d004      	beq.n	8009ca8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 fec2 	bl	800aa2c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00e      	beq.n	8009ccc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	8b12      	ldrh	r2, [r2, #24]
 8009cb8:	9202      	str	r2, [sp, #8]
 8009cba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009cbc:	9201      	str	r2, [sp, #4]
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	697a      	ldr	r2, [r7, #20]
 8009cc4:	69b9      	ldr	r1, [r7, #24]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f005 fbc2 	bl	800f450 <tcp_rst>
    }
    last_state = pcb->state;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	7d1b      	ldrb	r3, [r3, #20]
 8009cd0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7ff fd3c 	bl	8009750 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d004      	beq.n	8009ce8 <tcp_abandon+0x154>
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	f06f 010c 	mvn.w	r1, #12
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	4798      	blx	r3
  }
}
 8009ce8:	3728      	adds	r7, #40	; 0x28
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	080145b0 	.word	0x080145b0
 8009cf4:	080146f4 	.word	0x080146f4
 8009cf8:	080145f4 	.word	0x080145f4
 8009cfc:	08014710 	.word	0x08014710
 8009d00:	2000bcd4 	.word	0x2000bcd4
 8009d04:	2000bcd0 	.word	0x2000bcd0
 8009d08:	2000bcc4 	.word	0x2000bcc4
 8009d0c:	2000bcc0 	.word	0x2000bcc0

08009d10 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009d18:	2101      	movs	r1, #1
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7ff ff3a 	bl	8009b94 <tcp_abandon>
}
 8009d20:	bf00      	nop
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b088      	sub	sp, #32
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	4613      	mov	r3, r2
 8009d34:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8009d36:	2304      	movs	r3, #4
 8009d38:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8009d40:	4b3e      	ldr	r3, [pc, #248]	; (8009e3c <tcp_bind+0x114>)
 8009d42:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d109      	bne.n	8009d5e <tcp_bind+0x36>
 8009d4a:	4b3d      	ldr	r3, [pc, #244]	; (8009e40 <tcp_bind+0x118>)
 8009d4c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8009d50:	493c      	ldr	r1, [pc, #240]	; (8009e44 <tcp_bind+0x11c>)
 8009d52:	483d      	ldr	r0, [pc, #244]	; (8009e48 <tcp_bind+0x120>)
 8009d54:	f008 fefa 	bl	8012b4c <iprintf>
 8009d58:	f06f 030f 	mvn.w	r3, #15
 8009d5c:	e06a      	b.n	8009e34 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	7d1b      	ldrb	r3, [r3, #20]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d009      	beq.n	8009d7a <tcp_bind+0x52>
 8009d66:	4b36      	ldr	r3, [pc, #216]	; (8009e40 <tcp_bind+0x118>)
 8009d68:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009d6c:	4937      	ldr	r1, [pc, #220]	; (8009e4c <tcp_bind+0x124>)
 8009d6e:	4836      	ldr	r0, [pc, #216]	; (8009e48 <tcp_bind+0x120>)
 8009d70:	f008 feec 	bl	8012b4c <iprintf>
 8009d74:	f06f 0305 	mvn.w	r3, #5
 8009d78:	e05c      	b.n	8009e34 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8009d7a:	88fb      	ldrh	r3, [r7, #6]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d109      	bne.n	8009d94 <tcp_bind+0x6c>
    port = tcp_new_port();
 8009d80:	f000 f9f0 	bl	800a164 <tcp_new_port>
 8009d84:	4603      	mov	r3, r0
 8009d86:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8009d88:	88fb      	ldrh	r3, [r7, #6]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d135      	bne.n	8009dfa <tcp_bind+0xd2>
      return ERR_BUF;
 8009d8e:	f06f 0301 	mvn.w	r3, #1
 8009d92:	e04f      	b.n	8009e34 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8009d94:	2300      	movs	r3, #0
 8009d96:	61fb      	str	r3, [r7, #28]
 8009d98:	e02b      	b.n	8009df2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009d9a:	4a2d      	ldr	r2, [pc, #180]	; (8009e50 <tcp_bind+0x128>)
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	61bb      	str	r3, [r7, #24]
 8009da6:	e01e      	b.n	8009de6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	8adb      	ldrh	r3, [r3, #22]
 8009dac:	88fa      	ldrh	r2, [r7, #6]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d116      	bne.n	8009de0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8009db2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d010      	beq.n	8009dda <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00c      	beq.n	8009dda <tcp_bind+0xb2>
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d009      	beq.n	8009dda <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d005      	beq.n	8009dda <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d102      	bne.n	8009de0 <tcp_bind+0xb8>
              return ERR_USE;
 8009dda:	f06f 0307 	mvn.w	r3, #7
 8009dde:	e029      	b.n	8009e34 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	61bb      	str	r3, [r7, #24]
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1dd      	bne.n	8009da8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	3301      	adds	r3, #1
 8009df0:	61fb      	str	r3, [r7, #28]
 8009df2:	69fa      	ldr	r2, [r7, #28]
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	dbcf      	blt.n	8009d9a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00c      	beq.n	8009e1a <tcp_bind+0xf2>
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d008      	beq.n	8009e1a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d002      	beq.n	8009e14 <tcp_bind+0xec>
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	e000      	b.n	8009e16 <tcp_bind+0xee>
 8009e14:	2300      	movs	r3, #0
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	88fa      	ldrh	r2, [r7, #6]
 8009e1e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009e20:	4b0c      	ldr	r3, [pc, #48]	; (8009e54 <tcp_bind+0x12c>)
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	60da      	str	r2, [r3, #12]
 8009e28:	4a0a      	ldr	r2, [pc, #40]	; (8009e54 <tcp_bind+0x12c>)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6013      	str	r3, [r2, #0]
 8009e2e:	f005 fcd1 	bl	800f7d4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3720      	adds	r7, #32
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	08016624 	.word	0x08016624
 8009e40:	080145b0 	.word	0x080145b0
 8009e44:	08014744 	.word	0x08014744
 8009e48:	080145f4 	.word	0x080145f4
 8009e4c:	0801475c 	.word	0x0801475c
 8009e50:	080165fc 	.word	0x080165fc
 8009e54:	2000bcd0 	.word	0x2000bcd0

08009e58 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	4613      	mov	r3, r2
 8009e64:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d106      	bne.n	8009e7a <tcp_accept_null+0x22>
 8009e6c:	4b07      	ldr	r3, [pc, #28]	; (8009e8c <tcp_accept_null+0x34>)
 8009e6e:	f240 320f 	movw	r2, #783	; 0x30f
 8009e72:	4907      	ldr	r1, [pc, #28]	; (8009e90 <tcp_accept_null+0x38>)
 8009e74:	4807      	ldr	r0, [pc, #28]	; (8009e94 <tcp_accept_null+0x3c>)
 8009e76:	f008 fe69 	bl	8012b4c <iprintf>

  tcp_abort(pcb);
 8009e7a:	68b8      	ldr	r0, [r7, #8]
 8009e7c:	f7ff ff48 	bl	8009d10 <tcp_abort>

  return ERR_ABRT;
 8009e80:	f06f 030c 	mvn.w	r3, #12
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	080145b0 	.word	0x080145b0
 8009e90:	08014784 	.word	0x08014784
 8009e94:	080145f4 	.word	0x080145f4

08009e98 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009ea4:	78fb      	ldrb	r3, [r7, #3]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f806 	bl	8009ebc <tcp_listen_with_backlog_and_err>
 8009eb0:	4603      	mov	r3, r0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
	...

08009ebc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b088      	sub	sp, #32
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	607a      	str	r2, [r7, #4]
 8009ec8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d109      	bne.n	8009ee8 <tcp_listen_with_backlog_and_err+0x2c>
 8009ed4:	4b47      	ldr	r3, [pc, #284]	; (8009ff4 <tcp_listen_with_backlog_and_err+0x138>)
 8009ed6:	f240 3259 	movw	r2, #857	; 0x359
 8009eda:	4947      	ldr	r1, [pc, #284]	; (8009ff8 <tcp_listen_with_backlog_and_err+0x13c>)
 8009edc:	4847      	ldr	r0, [pc, #284]	; (8009ffc <tcp_listen_with_backlog_and_err+0x140>)
 8009ede:	f008 fe35 	bl	8012b4c <iprintf>
 8009ee2:	23f0      	movs	r3, #240	; 0xf0
 8009ee4:	76fb      	strb	r3, [r7, #27]
 8009ee6:	e079      	b.n	8009fdc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	7d1b      	ldrb	r3, [r3, #20]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d009      	beq.n	8009f04 <tcp_listen_with_backlog_and_err+0x48>
 8009ef0:	4b40      	ldr	r3, [pc, #256]	; (8009ff4 <tcp_listen_with_backlog_and_err+0x138>)
 8009ef2:	f240 325a 	movw	r2, #858	; 0x35a
 8009ef6:	4942      	ldr	r1, [pc, #264]	; (800a000 <tcp_listen_with_backlog_and_err+0x144>)
 8009ef8:	4840      	ldr	r0, [pc, #256]	; (8009ffc <tcp_listen_with_backlog_and_err+0x140>)
 8009efa:	f008 fe27 	bl	8012b4c <iprintf>
 8009efe:	23f1      	movs	r3, #241	; 0xf1
 8009f00:	76fb      	strb	r3, [r7, #27]
 8009f02:	e06b      	b.n	8009fdc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	7d1b      	ldrb	r3, [r3, #20]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d104      	bne.n	8009f16 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8009f10:	23f7      	movs	r3, #247	; 0xf7
 8009f12:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009f14:	e062      	b.n	8009fdc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009f16:	2002      	movs	r0, #2
 8009f18:	f7fe fb10 	bl	800853c <memp_malloc>
 8009f1c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d102      	bne.n	8009f2a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8009f24:	23ff      	movs	r3, #255	; 0xff
 8009f26:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009f28:	e058      	b.n	8009fdc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	691a      	ldr	r2, [r3, #16]
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	8ada      	ldrh	r2, [r3, #22]
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	7d5a      	ldrb	r2, [r3, #21]
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	7a5a      	ldrb	r2, [r3, #9]
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	2200      	movs	r2, #0
 8009f54:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	7ada      	ldrb	r2, [r3, #11]
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	7a9a      	ldrb	r2, [r3, #10]
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	8adb      	ldrh	r3, [r3, #22]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d021      	beq.n	8009fba <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009f76:	4b23      	ldr	r3, [pc, #140]	; (800a004 <tcp_listen_with_backlog_and_err+0x148>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d105      	bne.n	8009f8c <tcp_listen_with_backlog_and_err+0xd0>
 8009f80:	4b20      	ldr	r3, [pc, #128]	; (800a004 <tcp_listen_with_backlog_and_err+0x148>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	4a1f      	ldr	r2, [pc, #124]	; (800a004 <tcp_listen_with_backlog_and_err+0x148>)
 8009f88:	6013      	str	r3, [r2, #0]
 8009f8a:	e013      	b.n	8009fb4 <tcp_listen_with_backlog_and_err+0xf8>
 8009f8c:	4b1d      	ldr	r3, [pc, #116]	; (800a004 <tcp_listen_with_backlog_and_err+0x148>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	617b      	str	r3, [r7, #20]
 8009f92:	e00c      	b.n	8009fae <tcp_listen_with_backlog_and_err+0xf2>
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d104      	bne.n	8009fa8 <tcp_listen_with_backlog_and_err+0xec>
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	68da      	ldr	r2, [r3, #12]
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	60da      	str	r2, [r3, #12]
 8009fa6:	e005      	b.n	8009fb4 <tcp_listen_with_backlog_and_err+0xf8>
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	617b      	str	r3, [r7, #20]
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1ef      	bne.n	8009f94 <tcp_listen_with_backlog_and_err+0xd8>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f7ff fbc8 	bl	8009750 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	4a11      	ldr	r2, [pc, #68]	; (800a008 <tcp_listen_with_backlog_and_err+0x14c>)
 8009fc4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009fc6:	4b11      	ldr	r3, [pc, #68]	; (800a00c <tcp_listen_with_backlog_and_err+0x150>)
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	60da      	str	r2, [r3, #12]
 8009fce:	4a0f      	ldr	r2, [pc, #60]	; (800a00c <tcp_listen_with_backlog_and_err+0x150>)
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	6013      	str	r3, [r2, #0]
 8009fd4:	f005 fbfe 	bl	800f7d4 <tcp_timer_needed>
  res = ERR_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d002      	beq.n	8009fe8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	7efa      	ldrb	r2, [r7, #27]
 8009fe6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8009fe8:	69fb      	ldr	r3, [r7, #28]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3720      	adds	r7, #32
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	080145b0 	.word	0x080145b0
 8009ff8:	080147a4 	.word	0x080147a4
 8009ffc:	080145f4 	.word	0x080145f4
 800a000:	080147d4 	.word	0x080147d4
 800a004:	2000bcd0 	.word	0x2000bcd0
 800a008:	08009e59 	.word	0x08009e59
 800a00c:	2000bccc 	.word	0x2000bccc

0800a010 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d106      	bne.n	800a02c <tcp_update_rcv_ann_wnd+0x1c>
 800a01e:	4b25      	ldr	r3, [pc, #148]	; (800a0b4 <tcp_update_rcv_ann_wnd+0xa4>)
 800a020:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a024:	4924      	ldr	r1, [pc, #144]	; (800a0b8 <tcp_update_rcv_ann_wnd+0xa8>)
 800a026:	4825      	ldr	r0, [pc, #148]	; (800a0bc <tcp_update_rcv_ann_wnd+0xac>)
 800a028:	f008 fd90 	bl	8012b4c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a034:	4413      	add	r3, r2
 800a036:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a040:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a044:	bf28      	it	cs
 800a046:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a04a:	b292      	uxth	r2, r2
 800a04c:	4413      	add	r3, r2
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	2b00      	cmp	r3, #0
 800a054:	db08      	blt.n	800a068 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	e020      	b.n	800a0aa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	2b00      	cmp	r3, #0
 800a074:	dd03      	ble.n	800a07e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a07c:	e014      	b.n	800a0a8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a090:	d306      	bcc.n	800a0a0 <tcp_update_rcv_ann_wnd+0x90>
 800a092:	4b08      	ldr	r3, [pc, #32]	; (800a0b4 <tcp_update_rcv_ann_wnd+0xa4>)
 800a094:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a098:	4909      	ldr	r1, [pc, #36]	; (800a0c0 <tcp_update_rcv_ann_wnd+0xb0>)
 800a09a:	4808      	ldr	r0, [pc, #32]	; (800a0bc <tcp_update_rcv_ann_wnd+0xac>)
 800a09c:	f008 fd56 	bl	8012b4c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a0a8:	2300      	movs	r3, #0
  }
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	080145b0 	.word	0x080145b0
 800a0b8:	0801480c 	.word	0x0801480c
 800a0bc:	080145f4 	.word	0x080145f4
 800a0c0:	08014830 	.word	0x08014830

0800a0c4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d107      	bne.n	800a0e6 <tcp_recved+0x22>
 800a0d6:	4b1f      	ldr	r3, [pc, #124]	; (800a154 <tcp_recved+0x90>)
 800a0d8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a0dc:	491e      	ldr	r1, [pc, #120]	; (800a158 <tcp_recved+0x94>)
 800a0de:	481f      	ldr	r0, [pc, #124]	; (800a15c <tcp_recved+0x98>)
 800a0e0:	f008 fd34 	bl	8012b4c <iprintf>
 800a0e4:	e032      	b.n	800a14c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	7d1b      	ldrb	r3, [r3, #20]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d106      	bne.n	800a0fc <tcp_recved+0x38>
 800a0ee:	4b19      	ldr	r3, [pc, #100]	; (800a154 <tcp_recved+0x90>)
 800a0f0:	f240 32d3 	movw	r2, #979	; 0x3d3
 800a0f4:	491a      	ldr	r1, [pc, #104]	; (800a160 <tcp_recved+0x9c>)
 800a0f6:	4819      	ldr	r0, [pc, #100]	; (800a15c <tcp_recved+0x98>)
 800a0f8:	f008 fd28 	bl	8012b4c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a100:	887b      	ldrh	r3, [r7, #2]
 800a102:	4413      	add	r3, r2
 800a104:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a106:	89fb      	ldrh	r3, [r7, #14]
 800a108:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a10c:	d804      	bhi.n	800a118 <tcp_recved+0x54>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a112:	89fa      	ldrh	r2, [r7, #14]
 800a114:	429a      	cmp	r2, r3
 800a116:	d204      	bcs.n	800a122 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a11e:	851a      	strh	r2, [r3, #40]	; 0x28
 800a120:	e002      	b.n	800a128 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	89fa      	ldrh	r2, [r7, #14]
 800a126:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f7ff ff71 	bl	800a010 <tcp_update_rcv_ann_wnd>
 800a12e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a136:	d309      	bcc.n	800a14c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	8b5b      	ldrh	r3, [r3, #26]
 800a13c:	f043 0302 	orr.w	r3, r3, #2
 800a140:	b29a      	uxth	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f004 fbbe 	bl	800e8c8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	080145b0 	.word	0x080145b0
 800a158:	0801484c 	.word	0x0801484c
 800a15c:	080145f4 	.word	0x080145f4
 800a160:	08014864 	.word	0x08014864

0800a164 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800a16a:	2300      	movs	r3, #0
 800a16c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800a16e:	4b1e      	ldr	r3, [pc, #120]	; (800a1e8 <tcp_new_port+0x84>)
 800a170:	881b      	ldrh	r3, [r3, #0]
 800a172:	3301      	adds	r3, #1
 800a174:	b29a      	uxth	r2, r3
 800a176:	4b1c      	ldr	r3, [pc, #112]	; (800a1e8 <tcp_new_port+0x84>)
 800a178:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800a17a:	4b1b      	ldr	r3, [pc, #108]	; (800a1e8 <tcp_new_port+0x84>)
 800a17c:	881b      	ldrh	r3, [r3, #0]
 800a17e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a182:	4293      	cmp	r3, r2
 800a184:	d103      	bne.n	800a18e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a186:	4b18      	ldr	r3, [pc, #96]	; (800a1e8 <tcp_new_port+0x84>)
 800a188:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a18c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a18e:	2300      	movs	r3, #0
 800a190:	71fb      	strb	r3, [r7, #7]
 800a192:	e01e      	b.n	800a1d2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a194:	79fb      	ldrb	r3, [r7, #7]
 800a196:	4a15      	ldr	r2, [pc, #84]	; (800a1ec <tcp_new_port+0x88>)
 800a198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	603b      	str	r3, [r7, #0]
 800a1a0:	e011      	b.n	800a1c6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	8ada      	ldrh	r2, [r3, #22]
 800a1a6:	4b10      	ldr	r3, [pc, #64]	; (800a1e8 <tcp_new_port+0x84>)
 800a1a8:	881b      	ldrh	r3, [r3, #0]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d108      	bne.n	800a1c0 <tcp_new_port+0x5c>
        n++;
 800a1ae:	88bb      	ldrh	r3, [r7, #4]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a1b4:	88bb      	ldrh	r3, [r7, #4]
 800a1b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1ba:	d3d8      	bcc.n	800a16e <tcp_new_port+0xa>
          return 0;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	e00d      	b.n	800a1dc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	603b      	str	r3, [r7, #0]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1ea      	bne.n	800a1a2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a1cc:	79fb      	ldrb	r3, [r7, #7]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	71fb      	strb	r3, [r7, #7]
 800a1d2:	79fb      	ldrb	r3, [r7, #7]
 800a1d4:	2b03      	cmp	r3, #3
 800a1d6:	d9dd      	bls.n	800a194 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a1d8:	4b03      	ldr	r3, [pc, #12]	; (800a1e8 <tcp_new_port+0x84>)
 800a1da:	881b      	ldrh	r3, [r3, #0]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr
 800a1e8:	20000044 	.word	0x20000044
 800a1ec:	080165fc 	.word	0x080165fc

0800a1f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a1f0:	b5b0      	push	{r4, r5, r7, lr}
 800a1f2:	b090      	sub	sp, #64	; 0x40
 800a1f4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a1fc:	4b94      	ldr	r3, [pc, #592]	; (800a450 <tcp_slowtmr+0x260>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3301      	adds	r3, #1
 800a202:	4a93      	ldr	r2, [pc, #588]	; (800a450 <tcp_slowtmr+0x260>)
 800a204:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a206:	4b93      	ldr	r3, [pc, #588]	; (800a454 <tcp_slowtmr+0x264>)
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	3301      	adds	r3, #1
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	4b91      	ldr	r3, [pc, #580]	; (800a454 <tcp_slowtmr+0x264>)
 800a210:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a212:	2300      	movs	r3, #0
 800a214:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a216:	4b90      	ldr	r3, [pc, #576]	; (800a458 <tcp_slowtmr+0x268>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a21c:	e29f      	b.n	800a75e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a220:	7d1b      	ldrb	r3, [r3, #20]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d106      	bne.n	800a234 <tcp_slowtmr+0x44>
 800a226:	4b8d      	ldr	r3, [pc, #564]	; (800a45c <tcp_slowtmr+0x26c>)
 800a228:	f240 42be 	movw	r2, #1214	; 0x4be
 800a22c:	498c      	ldr	r1, [pc, #560]	; (800a460 <tcp_slowtmr+0x270>)
 800a22e:	488d      	ldr	r0, [pc, #564]	; (800a464 <tcp_slowtmr+0x274>)
 800a230:	f008 fc8c 	bl	8012b4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a236:	7d1b      	ldrb	r3, [r3, #20]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d106      	bne.n	800a24a <tcp_slowtmr+0x5a>
 800a23c:	4b87      	ldr	r3, [pc, #540]	; (800a45c <tcp_slowtmr+0x26c>)
 800a23e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a242:	4989      	ldr	r1, [pc, #548]	; (800a468 <tcp_slowtmr+0x278>)
 800a244:	4887      	ldr	r0, [pc, #540]	; (800a464 <tcp_slowtmr+0x274>)
 800a246:	f008 fc81 	bl	8012b4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24c:	7d1b      	ldrb	r3, [r3, #20]
 800a24e:	2b0a      	cmp	r3, #10
 800a250:	d106      	bne.n	800a260 <tcp_slowtmr+0x70>
 800a252:	4b82      	ldr	r3, [pc, #520]	; (800a45c <tcp_slowtmr+0x26c>)
 800a254:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a258:	4984      	ldr	r1, [pc, #528]	; (800a46c <tcp_slowtmr+0x27c>)
 800a25a:	4882      	ldr	r0, [pc, #520]	; (800a464 <tcp_slowtmr+0x274>)
 800a25c:	f008 fc76 	bl	8012b4c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a262:	7f9a      	ldrb	r2, [r3, #30]
 800a264:	4b7b      	ldr	r3, [pc, #492]	; (800a454 <tcp_slowtmr+0x264>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d105      	bne.n	800a278 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a276:	e272      	b.n	800a75e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a278:	4b76      	ldr	r3, [pc, #472]	; (800a454 <tcp_slowtmr+0x264>)
 800a27a:	781a      	ldrb	r2, [r3, #0]
 800a27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a280:	2300      	movs	r3, #0
 800a282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a286:	2300      	movs	r3, #0
 800a288:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28e:	7d1b      	ldrb	r3, [r3, #20]
 800a290:	2b02      	cmp	r3, #2
 800a292:	d10a      	bne.n	800a2aa <tcp_slowtmr+0xba>
 800a294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a296:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a29a:	2b05      	cmp	r3, #5
 800a29c:	d905      	bls.n	800a2aa <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a29e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2a8:	e11e      	b.n	800a4e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a2b0:	2b0b      	cmp	r3, #11
 800a2b2:	d905      	bls.n	800a2c0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a2b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2be:	e113      	b.n	800a4e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d075      	beq.n	800a3b6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d006      	beq.n	800a2e0 <tcp_slowtmr+0xf0>
 800a2d2:	4b62      	ldr	r3, [pc, #392]	; (800a45c <tcp_slowtmr+0x26c>)
 800a2d4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a2d8:	4965      	ldr	r1, [pc, #404]	; (800a470 <tcp_slowtmr+0x280>)
 800a2da:	4862      	ldr	r0, [pc, #392]	; (800a464 <tcp_slowtmr+0x274>)
 800a2dc:	f008 fc36 	bl	8012b4c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d106      	bne.n	800a2f6 <tcp_slowtmr+0x106>
 800a2e8:	4b5c      	ldr	r3, [pc, #368]	; (800a45c <tcp_slowtmr+0x26c>)
 800a2ea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a2ee:	4961      	ldr	r1, [pc, #388]	; (800a474 <tcp_slowtmr+0x284>)
 800a2f0:	485c      	ldr	r0, [pc, #368]	; (800a464 <tcp_slowtmr+0x274>)
 800a2f2:	f008 fc2b 	bl	8012b4c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a2fc:	2b0b      	cmp	r3, #11
 800a2fe:	d905      	bls.n	800a30c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a304:	3301      	adds	r3, #1
 800a306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a30a:	e0ed      	b.n	800a4e8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a312:	3b01      	subs	r3, #1
 800a314:	4a58      	ldr	r2, [pc, #352]	; (800a478 <tcp_slowtmr+0x288>)
 800a316:	5cd3      	ldrb	r3, [r2, r3]
 800a318:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a320:	7c7a      	ldrb	r2, [r7, #17]
 800a322:	429a      	cmp	r2, r3
 800a324:	d907      	bls.n	800a336 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a328:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a32c:	3301      	adds	r3, #1
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a332:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a338:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a33c:	7c7a      	ldrb	r2, [r7, #17]
 800a33e:	429a      	cmp	r2, r3
 800a340:	f200 80d2 	bhi.w	800a4e8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a344:	2301      	movs	r3, #1
 800a346:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d108      	bne.n	800a364 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a352:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a354:	f005 f970 	bl	800f638 <tcp_zero_window_probe>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d014      	beq.n	800a388 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a35e:	2300      	movs	r3, #0
 800a360:	623b      	str	r3, [r7, #32]
 800a362:	e011      	b.n	800a388 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a366:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a36a:	4619      	mov	r1, r3
 800a36c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a36e:	f004 f825 	bl	800e3bc <tcp_split_unsent_seg>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d107      	bne.n	800a388 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a378:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a37a:	f004 faa5 	bl	800e8c8 <tcp_output>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d101      	bne.n	800a388 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a384:	2300      	movs	r3, #0
 800a386:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a388:	6a3b      	ldr	r3, [r7, #32]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f000 80ac 	beq.w	800a4e8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a392:	2200      	movs	r2, #0
 800a394:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a39e:	2b06      	cmp	r3, #6
 800a3a0:	f200 80a2 	bhi.w	800a4e8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	b2da      	uxtb	r2, r3
 800a3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a3b4:	e098      	b.n	800a4e8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	db0f      	blt.n	800a3e0 <tcp_slowtmr+0x1f0>
 800a3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a3c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d008      	beq.n	800a3e0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	b21a      	sxth	r2, r3
 800a3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3de:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	db7b      	blt.n	800a4e8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a3f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3f2:	f004 fd61 	bl	800eeb8 <tcp_rexmit_rto_prepare>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d007      	beq.n	800a40c <tcp_slowtmr+0x21c>
 800a3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a400:	2b00      	cmp	r3, #0
 800a402:	d171      	bne.n	800a4e8 <tcp_slowtmr+0x2f8>
 800a404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d06d      	beq.n	800a4e8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40e:	7d1b      	ldrb	r3, [r3, #20]
 800a410:	2b02      	cmp	r3, #2
 800a412:	d03a      	beq.n	800a48a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a416:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a41a:	2b0c      	cmp	r3, #12
 800a41c:	bf28      	it	cs
 800a41e:	230c      	movcs	r3, #12
 800a420:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a424:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a428:	10db      	asrs	r3, r3, #3
 800a42a:	b21b      	sxth	r3, r3
 800a42c:	461a      	mov	r2, r3
 800a42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a430:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a434:	4413      	add	r3, r2
 800a436:	7efa      	ldrb	r2, [r7, #27]
 800a438:	4910      	ldr	r1, [pc, #64]	; (800a47c <tcp_slowtmr+0x28c>)
 800a43a:	5c8a      	ldrb	r2, [r1, r2]
 800a43c:	4093      	lsls	r3, r2
 800a43e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a446:	4293      	cmp	r3, r2
 800a448:	dc1a      	bgt.n	800a480 <tcp_slowtmr+0x290>
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	b21a      	sxth	r2, r3
 800a44e:	e019      	b.n	800a484 <tcp_slowtmr+0x294>
 800a450:	2000bcc8 	.word	0x2000bcc8
 800a454:	20000142 	.word	0x20000142
 800a458:	2000bcc4 	.word	0x2000bcc4
 800a45c:	080145b0 	.word	0x080145b0
 800a460:	080148f4 	.word	0x080148f4
 800a464:	080145f4 	.word	0x080145f4
 800a468:	08014920 	.word	0x08014920
 800a46c:	0801494c 	.word	0x0801494c
 800a470:	0801497c 	.word	0x0801497c
 800a474:	080149b0 	.word	0x080149b0
 800a478:	080165f4 	.word	0x080165f4
 800a47c:	080165e4 	.word	0x080165e4
 800a480:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a486:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48c:	2200      	movs	r2, #0
 800a48e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a492:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a498:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a49c:	4293      	cmp	r3, r2
 800a49e:	bf28      	it	cs
 800a4a0:	4613      	movcs	r3, r2
 800a4a2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a4a4:	8a7b      	ldrh	r3, [r7, #18]
 800a4a6:	085b      	lsrs	r3, r3, #1
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4ba:	005b      	lsls	r3, r3, #1
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d206      	bcs.n	800a4d0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4c6:	005b      	lsls	r3, r3, #1
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a4e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4e4:	f004 fd58 	bl	800ef98 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ea:	7d1b      	ldrb	r3, [r3, #20]
 800a4ec:	2b06      	cmp	r3, #6
 800a4ee:	d111      	bne.n	800a514 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f2:	8b5b      	ldrh	r3, [r3, #26]
 800a4f4:	f003 0310 	and.w	r3, r3, #16
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00b      	beq.n	800a514 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a4fc:	4b9d      	ldr	r3, [pc, #628]	; (800a774 <tcp_slowtmr+0x584>)
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a502:	6a1b      	ldr	r3, [r3, #32]
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	2b28      	cmp	r3, #40	; 0x28
 800a508:	d904      	bls.n	800a514 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a50a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a50e:	3301      	adds	r3, #1
 800a510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a516:	7a5b      	ldrb	r3, [r3, #9]
 800a518:	f003 0308 	and.w	r3, r3, #8
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d04c      	beq.n	800a5ba <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800a520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a522:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a524:	2b04      	cmp	r3, #4
 800a526:	d003      	beq.n	800a530 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a52c:	2b07      	cmp	r3, #7
 800a52e:	d144      	bne.n	800a5ba <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a530:	4b90      	ldr	r3, [pc, #576]	; (800a774 <tcp_slowtmr+0x584>)
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a536:	6a1b      	ldr	r3, [r3, #32]
 800a538:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a540:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800a544:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800a548:	498b      	ldr	r1, [pc, #556]	; (800a778 <tcp_slowtmr+0x588>)
 800a54a:	fba1 1303 	umull	r1, r3, r1, r3
 800a54e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a550:	429a      	cmp	r2, r3
 800a552:	d90a      	bls.n	800a56a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a558:	3301      	adds	r3, #1
 800a55a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a55e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a562:	3301      	adds	r3, #1
 800a564:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a568:	e027      	b.n	800a5ba <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a56a:	4b82      	ldr	r3, [pc, #520]	; (800a774 <tcp_slowtmr+0x584>)
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a576:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a580:	4618      	mov	r0, r3
 800a582:	4b7e      	ldr	r3, [pc, #504]	; (800a77c <tcp_slowtmr+0x58c>)
 800a584:	fb03 f300 	mul.w	r3, r3, r0
 800a588:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a58a:	497b      	ldr	r1, [pc, #492]	; (800a778 <tcp_slowtmr+0x588>)
 800a58c:	fba1 1303 	umull	r1, r3, r1, r3
 800a590:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a592:	429a      	cmp	r2, r3
 800a594:	d911      	bls.n	800a5ba <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800a596:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a598:	f005 f80e 	bl	800f5b8 <tcp_keepalive>
 800a59c:	4603      	mov	r3, r0
 800a59e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a5a2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d107      	bne.n	800a5ba <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800a5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	b2da      	uxtb	r2, r3
 800a5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d011      	beq.n	800a5e6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a5c2:	4b6c      	ldr	r3, [pc, #432]	; (800a774 <tcp_slowtmr+0x584>)
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c8:	6a1b      	ldr	r3, [r3, #32]
 800a5ca:	1ad2      	subs	r2, r2, r3
 800a5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	005b      	lsls	r3, r3, #1
 800a5d8:	440b      	add	r3, r1
 800a5da:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d302      	bcc.n	800a5e6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a5e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5e2:	f000 febd 	bl	800b360 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e8:	7d1b      	ldrb	r3, [r3, #20]
 800a5ea:	2b03      	cmp	r3, #3
 800a5ec:	d10b      	bne.n	800a606 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a5ee:	4b61      	ldr	r3, [pc, #388]	; (800a774 <tcp_slowtmr+0x584>)
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f4:	6a1b      	ldr	r3, [r3, #32]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	2b28      	cmp	r3, #40	; 0x28
 800a5fa:	d904      	bls.n	800a606 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a5fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a600:	3301      	adds	r3, #1
 800a602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a608:	7d1b      	ldrb	r3, [r3, #20]
 800a60a:	2b09      	cmp	r3, #9
 800a60c:	d10b      	bne.n	800a626 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a60e:	4b59      	ldr	r3, [pc, #356]	; (800a774 <tcp_slowtmr+0x584>)
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	6a1b      	ldr	r3, [r3, #32]
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	2bf0      	cmp	r3, #240	; 0xf0
 800a61a:	d904      	bls.n	800a626 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800a61c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a620:	3301      	adds	r3, #1
 800a622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d060      	beq.n	800a6f0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a634:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a638:	f000 fcde 	bl	800aff8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d010      	beq.n	800a664 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a642:	4b4f      	ldr	r3, [pc, #316]	; (800a780 <tcp_slowtmr+0x590>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a648:	429a      	cmp	r2, r3
 800a64a:	d106      	bne.n	800a65a <tcp_slowtmr+0x46a>
 800a64c:	4b4d      	ldr	r3, [pc, #308]	; (800a784 <tcp_slowtmr+0x594>)
 800a64e:	f240 526d 	movw	r2, #1389	; 0x56d
 800a652:	494d      	ldr	r1, [pc, #308]	; (800a788 <tcp_slowtmr+0x598>)
 800a654:	484d      	ldr	r0, [pc, #308]	; (800a78c <tcp_slowtmr+0x59c>)
 800a656:	f008 fa79 	bl	8012b4c <iprintf>
        prev->next = pcb->next;
 800a65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65c:	68da      	ldr	r2, [r3, #12]
 800a65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a660:	60da      	str	r2, [r3, #12]
 800a662:	e00f      	b.n	800a684 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a664:	4b46      	ldr	r3, [pc, #280]	; (800a780 <tcp_slowtmr+0x590>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d006      	beq.n	800a67c <tcp_slowtmr+0x48c>
 800a66e:	4b45      	ldr	r3, [pc, #276]	; (800a784 <tcp_slowtmr+0x594>)
 800a670:	f240 5271 	movw	r2, #1393	; 0x571
 800a674:	4946      	ldr	r1, [pc, #280]	; (800a790 <tcp_slowtmr+0x5a0>)
 800a676:	4845      	ldr	r0, [pc, #276]	; (800a78c <tcp_slowtmr+0x59c>)
 800a678:	f008 fa68 	bl	8012b4c <iprintf>
        tcp_active_pcbs = pcb->next;
 800a67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	4a3f      	ldr	r2, [pc, #252]	; (800a780 <tcp_slowtmr+0x590>)
 800a682:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a684:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d013      	beq.n	800a6b4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a692:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a694:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a698:	3304      	adds	r3, #4
 800a69a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a69c:	8ad2      	ldrh	r2, [r2, #22]
 800a69e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6a0:	8b09      	ldrh	r1, [r1, #24]
 800a6a2:	9102      	str	r1, [sp, #8]
 800a6a4:	9201      	str	r2, [sp, #4]
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	462b      	mov	r3, r5
 800a6aa:	4622      	mov	r2, r4
 800a6ac:	4601      	mov	r1, r0
 800a6ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6b0:	f004 fece 	bl	800f450 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6bc:	7d1b      	ldrb	r3, [r3, #20]
 800a6be:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a6ca:	6838      	ldr	r0, [r7, #0]
 800a6cc:	f7ff f840 	bl	8009750 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a6d0:	4b30      	ldr	r3, [pc, #192]	; (800a794 <tcp_slowtmr+0x5a4>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d004      	beq.n	800a6e6 <tcp_slowtmr+0x4f6>
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f06f 010c 	mvn.w	r1, #12
 800a6e2:	68b8      	ldr	r0, [r7, #8]
 800a6e4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a6e6:	4b2b      	ldr	r3, [pc, #172]	; (800a794 <tcp_slowtmr+0x5a4>)
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d037      	beq.n	800a75e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800a6ee:	e590      	b.n	800a212 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fc:	7f1b      	ldrb	r3, [r3, #28]
 800a6fe:	3301      	adds	r3, #1
 800a700:	b2da      	uxtb	r2, r3
 800a702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a704:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a708:	7f1a      	ldrb	r2, [r3, #28]
 800a70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70c:	7f5b      	ldrb	r3, [r3, #29]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d325      	bcc.n	800a75e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	2200      	movs	r2, #0
 800a716:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a718:	4b1e      	ldr	r3, [pc, #120]	; (800a794 <tcp_slowtmr+0x5a4>)
 800a71a:	2200      	movs	r2, #0
 800a71c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a724:	2b00      	cmp	r3, #0
 800a726:	d00b      	beq.n	800a740 <tcp_slowtmr+0x550>
 800a728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a72e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a730:	6912      	ldr	r2, [r2, #16]
 800a732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a734:	4610      	mov	r0, r2
 800a736:	4798      	blx	r3
 800a738:	4603      	mov	r3, r0
 800a73a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a73e:	e002      	b.n	800a746 <tcp_slowtmr+0x556>
 800a740:	2300      	movs	r3, #0
 800a742:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a746:	4b13      	ldr	r3, [pc, #76]	; (800a794 <tcp_slowtmr+0x5a4>)
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d000      	beq.n	800a750 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800a74e:	e560      	b.n	800a212 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a750:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a754:	2b00      	cmp	r3, #0
 800a756:	d102      	bne.n	800a75e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800a758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a75a:	f004 f8b5 	bl	800e8c8 <tcp_output>
  while (pcb != NULL) {
 800a75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a760:	2b00      	cmp	r3, #0
 800a762:	f47f ad5c 	bne.w	800a21e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a766:	2300      	movs	r3, #0
 800a768:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a76a:	4b0b      	ldr	r3, [pc, #44]	; (800a798 <tcp_slowtmr+0x5a8>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a770:	e067      	b.n	800a842 <tcp_slowtmr+0x652>
 800a772:	bf00      	nop
 800a774:	2000bcc8 	.word	0x2000bcc8
 800a778:	10624dd3 	.word	0x10624dd3
 800a77c:	000124f8 	.word	0x000124f8
 800a780:	2000bcc4 	.word	0x2000bcc4
 800a784:	080145b0 	.word	0x080145b0
 800a788:	080149e8 	.word	0x080149e8
 800a78c:	080145f4 	.word	0x080145f4
 800a790:	08014a14 	.word	0x08014a14
 800a794:	2000bcc0 	.word	0x2000bcc0
 800a798:	2000bcd4 	.word	0x2000bcd4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79e:	7d1b      	ldrb	r3, [r3, #20]
 800a7a0:	2b0a      	cmp	r3, #10
 800a7a2:	d006      	beq.n	800a7b2 <tcp_slowtmr+0x5c2>
 800a7a4:	4b2a      	ldr	r3, [pc, #168]	; (800a850 <tcp_slowtmr+0x660>)
 800a7a6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a7aa:	492a      	ldr	r1, [pc, #168]	; (800a854 <tcp_slowtmr+0x664>)
 800a7ac:	482a      	ldr	r0, [pc, #168]	; (800a858 <tcp_slowtmr+0x668>)
 800a7ae:	f008 f9cd 	bl	8012b4c <iprintf>
    pcb_remove = 0;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a7b8:	4b28      	ldr	r3, [pc, #160]	; (800a85c <tcp_slowtmr+0x66c>)
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7be:	6a1b      	ldr	r3, [r3, #32]
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	2bf0      	cmp	r3, #240	; 0xf0
 800a7c4:	d904      	bls.n	800a7d0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a7c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d02f      	beq.n	800a838 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a7d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7da:	f000 fc0d 	bl	800aff8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d010      	beq.n	800a806 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a7e4:	4b1e      	ldr	r3, [pc, #120]	; (800a860 <tcp_slowtmr+0x670>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d106      	bne.n	800a7fc <tcp_slowtmr+0x60c>
 800a7ee:	4b18      	ldr	r3, [pc, #96]	; (800a850 <tcp_slowtmr+0x660>)
 800a7f0:	f240 52af 	movw	r2, #1455	; 0x5af
 800a7f4:	491b      	ldr	r1, [pc, #108]	; (800a864 <tcp_slowtmr+0x674>)
 800a7f6:	4818      	ldr	r0, [pc, #96]	; (800a858 <tcp_slowtmr+0x668>)
 800a7f8:	f008 f9a8 	bl	8012b4c <iprintf>
        prev->next = pcb->next;
 800a7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fe:	68da      	ldr	r2, [r3, #12]
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	60da      	str	r2, [r3, #12]
 800a804:	e00f      	b.n	800a826 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a806:	4b16      	ldr	r3, [pc, #88]	; (800a860 <tcp_slowtmr+0x670>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d006      	beq.n	800a81e <tcp_slowtmr+0x62e>
 800a810:	4b0f      	ldr	r3, [pc, #60]	; (800a850 <tcp_slowtmr+0x660>)
 800a812:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a816:	4914      	ldr	r1, [pc, #80]	; (800a868 <tcp_slowtmr+0x678>)
 800a818:	480f      	ldr	r0, [pc, #60]	; (800a858 <tcp_slowtmr+0x668>)
 800a81a:	f008 f997 	bl	8012b4c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	4a0f      	ldr	r2, [pc, #60]	; (800a860 <tcp_slowtmr+0x670>)
 800a824:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a828:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a830:	69f8      	ldr	r0, [r7, #28]
 800a832:	f7fe ff8d 	bl	8009750 <tcp_free>
 800a836:	e004      	b.n	800a842 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a844:	2b00      	cmp	r3, #0
 800a846:	d1a9      	bne.n	800a79c <tcp_slowtmr+0x5ac>
    }
  }
}
 800a848:	bf00      	nop
 800a84a:	3730      	adds	r7, #48	; 0x30
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bdb0      	pop	{r4, r5, r7, pc}
 800a850:	080145b0 	.word	0x080145b0
 800a854:	08014a40 	.word	0x08014a40
 800a858:	080145f4 	.word	0x080145f4
 800a85c:	2000bcc8 	.word	0x2000bcc8
 800a860:	2000bcd4 	.word	0x2000bcd4
 800a864:	08014a70 	.word	0x08014a70
 800a868:	08014a98 	.word	0x08014a98

0800a86c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a872:	4b2d      	ldr	r3, [pc, #180]	; (800a928 <tcp_fasttmr+0xbc>)
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	3301      	adds	r3, #1
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	4b2b      	ldr	r3, [pc, #172]	; (800a928 <tcp_fasttmr+0xbc>)
 800a87c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a87e:	4b2b      	ldr	r3, [pc, #172]	; (800a92c <tcp_fasttmr+0xc0>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a884:	e048      	b.n	800a918 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	7f9a      	ldrb	r2, [r3, #30]
 800a88a:	4b27      	ldr	r3, [pc, #156]	; (800a928 <tcp_fasttmr+0xbc>)
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d03f      	beq.n	800a912 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a892:	4b25      	ldr	r3, [pc, #148]	; (800a928 <tcp_fasttmr+0xbc>)
 800a894:	781a      	ldrb	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	8b5b      	ldrh	r3, [r3, #26]
 800a89e:	f003 0301 	and.w	r3, r3, #1
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d010      	beq.n	800a8c8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	8b5b      	ldrh	r3, [r3, #26]
 800a8aa:	f043 0302 	orr.w	r3, r3, #2
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f004 f807 	bl	800e8c8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	8b5b      	ldrh	r3, [r3, #26]
 800a8be:	f023 0303 	bic.w	r3, r3, #3
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	8b5b      	ldrh	r3, [r3, #26]
 800a8cc:	f003 0308 	and.w	r3, r3, #8
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d009      	beq.n	800a8e8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	8b5b      	ldrh	r3, [r3, #26]
 800a8d8:	f023 0308 	bic.w	r3, r3, #8
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f7ff f8c4 	bl	8009a70 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00a      	beq.n	800a90c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a8f6:	4b0e      	ldr	r3, [pc, #56]	; (800a930 <tcp_fasttmr+0xc4>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f819 	bl	800a934 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a902:	4b0b      	ldr	r3, [pc, #44]	; (800a930 <tcp_fasttmr+0xc4>)
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d000      	beq.n	800a90c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a90a:	e7b8      	b.n	800a87e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	607b      	str	r3, [r7, #4]
 800a910:	e002      	b.n	800a918 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1b3      	bne.n	800a886 <tcp_fasttmr+0x1a>
    }
  }
}
 800a91e:	bf00      	nop
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	20000142 	.word	0x20000142
 800a92c:	2000bcc4 	.word	0x2000bcc4
 800a930:	2000bcc0 	.word	0x2000bcc0

0800a934 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a934:	b590      	push	{r4, r7, lr}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d109      	bne.n	800a956 <tcp_process_refused_data+0x22>
 800a942:	4b37      	ldr	r3, [pc, #220]	; (800aa20 <tcp_process_refused_data+0xec>)
 800a944:	f240 6209 	movw	r2, #1545	; 0x609
 800a948:	4936      	ldr	r1, [pc, #216]	; (800aa24 <tcp_process_refused_data+0xf0>)
 800a94a:	4837      	ldr	r0, [pc, #220]	; (800aa28 <tcp_process_refused_data+0xf4>)
 800a94c:	f008 f8fe 	bl	8012b4c <iprintf>
 800a950:	f06f 030f 	mvn.w	r3, #15
 800a954:	e060      	b.n	800aa18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a95a:	7b5b      	ldrb	r3, [r3, #13]
 800a95c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a962:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00b      	beq.n	800a98c <tcp_process_refused_data+0x58>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6918      	ldr	r0, [r3, #16]
 800a97e:	2300      	movs	r3, #0
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	6879      	ldr	r1, [r7, #4]
 800a984:	47a0      	blx	r4
 800a986:	4603      	mov	r3, r0
 800a988:	73fb      	strb	r3, [r7, #15]
 800a98a:	e007      	b.n	800a99c <tcp_process_refused_data+0x68>
 800a98c:	2300      	movs	r3, #0
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	6879      	ldr	r1, [r7, #4]
 800a992:	2000      	movs	r0, #0
 800a994:	f000 f8c0 	bl	800ab18 <tcp_recv_null>
 800a998:	4603      	mov	r3, r0
 800a99a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a99c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d12a      	bne.n	800a9fa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
 800a9a6:	f003 0320 	and.w	r3, r3, #32
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d033      	beq.n	800aa16 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a9b6:	d005      	beq.n	800a9c4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9bc:	3301      	adds	r3, #1
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00b      	beq.n	800a9e6 <tcp_process_refused_data+0xb2>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6918      	ldr	r0, [r3, #16]
 800a9d8:	2300      	movs	r3, #0
 800a9da:	2200      	movs	r2, #0
 800a9dc:	6879      	ldr	r1, [r7, #4]
 800a9de:	47a0      	blx	r4
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73fb      	strb	r3, [r7, #15]
 800a9e4:	e001      	b.n	800a9ea <tcp_process_refused_data+0xb6>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a9ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9ee:	f113 0f0d 	cmn.w	r3, #13
 800a9f2:	d110      	bne.n	800aa16 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a9f4:	f06f 030c 	mvn.w	r3, #12
 800a9f8:	e00e      	b.n	800aa18 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a9fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9fe:	f113 0f0d 	cmn.w	r3, #13
 800aa02:	d102      	bne.n	800aa0a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800aa04:	f06f 030c 	mvn.w	r3, #12
 800aa08:	e006      	b.n	800aa18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800aa10:	f06f 0304 	mvn.w	r3, #4
 800aa14:	e000      	b.n	800aa18 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd90      	pop	{r4, r7, pc}
 800aa20:	080145b0 	.word	0x080145b0
 800aa24:	08014ac0 	.word	0x08014ac0
 800aa28:	080145f4 	.word	0x080145f4

0800aa2c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800aa34:	e007      	b.n	800aa46 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 f809 	bl	800aa54 <tcp_seg_free>
    seg = next;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1f4      	bne.n	800aa36 <tcp_segs_free+0xa>
  }
}
 800aa4c:	bf00      	nop
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00c      	beq.n	800aa7c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d004      	beq.n	800aa74 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe fbbe 	bl	80091f0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800aa74:	6879      	ldr	r1, [r7, #4]
 800aa76:	2003      	movs	r0, #3
 800aa78:	f7fd fdac 	bl	80085d4 <memp_free>
  }
}
 800aa7c:	bf00      	nop
 800aa7e:	3708      	adds	r7, #8
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d107      	bne.n	800aaa6 <tcp_setprio+0x22>
 800aa96:	4b07      	ldr	r3, [pc, #28]	; (800aab4 <tcp_setprio+0x30>)
 800aa98:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800aa9c:	4906      	ldr	r1, [pc, #24]	; (800aab8 <tcp_setprio+0x34>)
 800aa9e:	4807      	ldr	r0, [pc, #28]	; (800aabc <tcp_setprio+0x38>)
 800aaa0:	f008 f854 	bl	8012b4c <iprintf>
 800aaa4:	e002      	b.n	800aaac <tcp_setprio+0x28>

  pcb->prio = prio;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	78fa      	ldrb	r2, [r7, #3]
 800aaaa:	755a      	strb	r2, [r3, #21]
}
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	080145b0 	.word	0x080145b0
 800aab8:	08014ae8 	.word	0x08014ae8
 800aabc:	080145f4 	.word	0x080145f4

0800aac0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d106      	bne.n	800aadc <tcp_seg_copy+0x1c>
 800aace:	4b0f      	ldr	r3, [pc, #60]	; (800ab0c <tcp_seg_copy+0x4c>)
 800aad0:	f240 6282 	movw	r2, #1666	; 0x682
 800aad4:	490e      	ldr	r1, [pc, #56]	; (800ab10 <tcp_seg_copy+0x50>)
 800aad6:	480f      	ldr	r0, [pc, #60]	; (800ab14 <tcp_seg_copy+0x54>)
 800aad8:	f008 f838 	bl	8012b4c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800aadc:	2003      	movs	r0, #3
 800aade:	f7fd fd2d 	bl	800853c <memp_malloc>
 800aae2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <tcp_seg_copy+0x2e>
    return NULL;
 800aaea:	2300      	movs	r3, #0
 800aaec:	e00a      	b.n	800ab04 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800aaee:	2210      	movs	r2, #16
 800aaf0:	6879      	ldr	r1, [r7, #4]
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f008 f817 	bl	8012b26 <memcpy>
  pbuf_ref(cseg->p);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fe fc17 	bl	8009330 <pbuf_ref>
  return cseg;
 800ab02:	68fb      	ldr	r3, [r7, #12]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	080145b0 	.word	0x080145b0
 800ab10:	08014b04 	.word	0x08014b04
 800ab14:	080145f4 	.word	0x080145f4

0800ab18 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
 800ab24:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d109      	bne.n	800ab40 <tcp_recv_null+0x28>
 800ab2c:	4b12      	ldr	r3, [pc, #72]	; (800ab78 <tcp_recv_null+0x60>)
 800ab2e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ab32:	4912      	ldr	r1, [pc, #72]	; (800ab7c <tcp_recv_null+0x64>)
 800ab34:	4812      	ldr	r0, [pc, #72]	; (800ab80 <tcp_recv_null+0x68>)
 800ab36:	f008 f809 	bl	8012b4c <iprintf>
 800ab3a:	f06f 030f 	mvn.w	r3, #15
 800ab3e:	e016      	b.n	800ab6e <tcp_recv_null+0x56>

  if (p != NULL) {
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d009      	beq.n	800ab5a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	891b      	ldrh	r3, [r3, #8]
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	68b8      	ldr	r0, [r7, #8]
 800ab4e:	f7ff fab9 	bl	800a0c4 <tcp_recved>
    pbuf_free(p);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7fe fb4c 	bl	80091f0 <pbuf_free>
 800ab58:	e008      	b.n	800ab6c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ab5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d104      	bne.n	800ab6c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ab62:	68b8      	ldr	r0, [r7, #8]
 800ab64:	f7fe ffea 	bl	8009b3c <tcp_close>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	e000      	b.n	800ab6e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	080145b0 	.word	0x080145b0
 800ab7c:	08014b20 	.word	0x08014b20
 800ab80:	080145f4 	.word	0x080145f4

0800ab84 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ab8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	db01      	blt.n	800ab9a <tcp_kill_prio+0x16>
 800ab96:	79fb      	ldrb	r3, [r7, #7]
 800ab98:	e000      	b.n	800ab9c <tcp_kill_prio+0x18>
 800ab9a:	237f      	movs	r3, #127	; 0x7f
 800ab9c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ab9e:	7afb      	ldrb	r3, [r7, #11]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d034      	beq.n	800ac0e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800aba4:	7afb      	ldrb	r3, [r7, #11]
 800aba6:	3b01      	subs	r3, #1
 800aba8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800abaa:	2300      	movs	r3, #0
 800abac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800abae:	2300      	movs	r3, #0
 800abb0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800abb2:	4b19      	ldr	r3, [pc, #100]	; (800ac18 <tcp_kill_prio+0x94>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	617b      	str	r3, [r7, #20]
 800abb8:	e01f      	b.n	800abfa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	7d5b      	ldrb	r3, [r3, #21]
 800abbe:	7afa      	ldrb	r2, [r7, #11]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d80c      	bhi.n	800abde <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800abc8:	7afa      	ldrb	r2, [r7, #11]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d112      	bne.n	800abf4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800abce:	4b13      	ldr	r3, [pc, #76]	; (800ac1c <tcp_kill_prio+0x98>)
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d80a      	bhi.n	800abf4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800abde:	4b0f      	ldr	r3, [pc, #60]	; (800ac1c <tcp_kill_prio+0x98>)
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	6a1b      	ldr	r3, [r3, #32]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	7d5b      	ldrb	r3, [r3, #21]
 800abf2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	617b      	str	r3, [r7, #20]
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1dc      	bne.n	800abba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d004      	beq.n	800ac10 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ac06:	6938      	ldr	r0, [r7, #16]
 800ac08:	f7ff f882 	bl	8009d10 <tcp_abort>
 800ac0c:	e000      	b.n	800ac10 <tcp_kill_prio+0x8c>
    return;
 800ac0e:	bf00      	nop
  }
}
 800ac10:	3718      	adds	r7, #24
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	2000bcc4 	.word	0x2000bcc4
 800ac1c:	2000bcc8 	.word	0x2000bcc8

0800ac20 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	4603      	mov	r3, r0
 800ac28:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ac2a:	79fb      	ldrb	r3, [r7, #7]
 800ac2c:	2b08      	cmp	r3, #8
 800ac2e:	d009      	beq.n	800ac44 <tcp_kill_state+0x24>
 800ac30:	79fb      	ldrb	r3, [r7, #7]
 800ac32:	2b09      	cmp	r3, #9
 800ac34:	d006      	beq.n	800ac44 <tcp_kill_state+0x24>
 800ac36:	4b1a      	ldr	r3, [pc, #104]	; (800aca0 <tcp_kill_state+0x80>)
 800ac38:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ac3c:	4919      	ldr	r1, [pc, #100]	; (800aca4 <tcp_kill_state+0x84>)
 800ac3e:	481a      	ldr	r0, [pc, #104]	; (800aca8 <tcp_kill_state+0x88>)
 800ac40:	f007 ff84 	bl	8012b4c <iprintf>

  inactivity = 0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac4c:	4b17      	ldr	r3, [pc, #92]	; (800acac <tcp_kill_state+0x8c>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	617b      	str	r3, [r7, #20]
 800ac52:	e017      	b.n	800ac84 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	7d1b      	ldrb	r3, [r3, #20]
 800ac58:	79fa      	ldrb	r2, [r7, #7]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d10f      	bne.n	800ac7e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ac5e:	4b14      	ldr	r3, [pc, #80]	; (800acb0 <tcp_kill_state+0x90>)
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d807      	bhi.n	800ac7e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ac6e:	4b10      	ldr	r3, [pc, #64]	; (800acb0 <tcp_kill_state+0x90>)
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	6a1b      	ldr	r3, [r3, #32]
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	617b      	str	r3, [r7, #20]
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1e4      	bne.n	800ac54 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d003      	beq.n	800ac98 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ac90:	2100      	movs	r1, #0
 800ac92:	6938      	ldr	r0, [r7, #16]
 800ac94:	f7fe ff7e 	bl	8009b94 <tcp_abandon>
  }
}
 800ac98:	bf00      	nop
 800ac9a:	3718      	adds	r7, #24
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	080145b0 	.word	0x080145b0
 800aca4:	08014b3c 	.word	0x08014b3c
 800aca8:	080145f4 	.word	0x080145f4
 800acac:	2000bcc4 	.word	0x2000bcc4
 800acb0:	2000bcc8 	.word	0x2000bcc8

0800acb4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800acba:	2300      	movs	r3, #0
 800acbc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800acbe:	2300      	movs	r3, #0
 800acc0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800acc2:	4b12      	ldr	r3, [pc, #72]	; (800ad0c <tcp_kill_timewait+0x58>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	60fb      	str	r3, [r7, #12]
 800acc8:	e012      	b.n	800acf0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800acca:	4b11      	ldr	r3, [pc, #68]	; (800ad10 <tcp_kill_timewait+0x5c>)
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	6a1b      	ldr	r3, [r3, #32]
 800acd2:	1ad3      	subs	r3, r2, r3
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d807      	bhi.n	800acea <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800acda:	4b0d      	ldr	r3, [pc, #52]	; (800ad10 <tcp_kill_timewait+0x5c>)
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6a1b      	ldr	r3, [r3, #32]
 800ace2:	1ad3      	subs	r3, r2, r3
 800ace4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	60fb      	str	r3, [r7, #12]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1e9      	bne.n	800acca <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800acfc:	68b8      	ldr	r0, [r7, #8]
 800acfe:	f7ff f807 	bl	8009d10 <tcp_abort>
  }
}
 800ad02:	bf00      	nop
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	2000bcd4 	.word	0x2000bcd4
 800ad10:	2000bcc8 	.word	0x2000bcc8

0800ad14 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ad1a:	4b10      	ldr	r3, [pc, #64]	; (800ad5c <tcp_handle_closepend+0x48>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ad20:	e014      	b.n	800ad4c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	8b5b      	ldrh	r3, [r3, #26]
 800ad2c:	f003 0308 	and.w	r3, r3, #8
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d009      	beq.n	800ad48 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	8b5b      	ldrh	r3, [r3, #26]
 800ad38:	f023 0308 	bic.w	r3, r3, #8
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7fe fe94 	bl	8009a70 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1e7      	bne.n	800ad22 <tcp_handle_closepend+0xe>
  }
}
 800ad52:	bf00      	nop
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	2000bcc4 	.word	0x2000bcc4

0800ad60 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	4603      	mov	r3, r0
 800ad68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ad6a:	2001      	movs	r0, #1
 800ad6c:	f7fd fbe6 	bl	800853c <memp_malloc>
 800ad70:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d126      	bne.n	800adc6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ad78:	f7ff ffcc 	bl	800ad14 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ad7c:	f7ff ff9a 	bl	800acb4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ad80:	2001      	movs	r0, #1
 800ad82:	f7fd fbdb 	bl	800853c <memp_malloc>
 800ad86:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d11b      	bne.n	800adc6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ad8e:	2009      	movs	r0, #9
 800ad90:	f7ff ff46 	bl	800ac20 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ad94:	2001      	movs	r0, #1
 800ad96:	f7fd fbd1 	bl	800853c <memp_malloc>
 800ad9a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d111      	bne.n	800adc6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ada2:	2008      	movs	r0, #8
 800ada4:	f7ff ff3c 	bl	800ac20 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ada8:	2001      	movs	r0, #1
 800adaa:	f7fd fbc7 	bl	800853c <memp_malloc>
 800adae:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d107      	bne.n	800adc6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800adb6:	79fb      	ldrb	r3, [r7, #7]
 800adb8:	4618      	mov	r0, r3
 800adba:	f7ff fee3 	bl	800ab84 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800adbe:	2001      	movs	r0, #1
 800adc0:	f7fd fbbc 	bl	800853c <memp_malloc>
 800adc4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d03f      	beq.n	800ae4c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800adcc:	229c      	movs	r2, #156	; 0x9c
 800adce:	2100      	movs	r1, #0
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f007 feb3 	bl	8012b3c <memset>
    pcb->prio = prio;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	79fa      	ldrb	r2, [r7, #7]
 800adda:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ade2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800adec:	855a      	strh	r2, [r3, #42]	; 0x2a
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	22ff      	movs	r2, #255	; 0xff
 800adfa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ae02:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2206      	movs	r2, #6
 800ae08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2206      	movs	r2, #6
 800ae10:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae18:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ae22:	4b0d      	ldr	r3, [pc, #52]	; (800ae58 <tcp_alloc+0xf8>)
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ae2a:	4b0c      	ldr	r3, [pc, #48]	; (800ae5c <tcp_alloc+0xfc>)
 800ae2c:	781a      	ldrb	r2, [r3, #0]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ae38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	4a08      	ldr	r2, [pc, #32]	; (800ae60 <tcp_alloc+0x100>)
 800ae40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	4a07      	ldr	r2, [pc, #28]	; (800ae64 <tcp_alloc+0x104>)
 800ae48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	2000bcc8 	.word	0x2000bcc8
 800ae5c:	20000142 	.word	0x20000142
 800ae60:	0800ab19 	.word	0x0800ab19
 800ae64:	006ddd00 	.word	0x006ddd00

0800ae68 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800ae6c:	2040      	movs	r0, #64	; 0x40
 800ae6e:	f7ff ff77 	bl	800ad60 <tcp_alloc>
 800ae72:	4603      	mov	r3, r0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d002      	beq.n	800ae8e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	611a      	str	r2, [r3, #16]
  }
}
 800ae8e:	bf00      	nop
 800ae90:	370c      	adds	r7, #12
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
	...

0800ae9c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d00e      	beq.n	800aeca <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	7d1b      	ldrb	r3, [r3, #20]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d106      	bne.n	800aec2 <tcp_recv+0x26>
 800aeb4:	4b07      	ldr	r3, [pc, #28]	; (800aed4 <tcp_recv+0x38>)
 800aeb6:	f240 72df 	movw	r2, #2015	; 0x7df
 800aeba:	4907      	ldr	r1, [pc, #28]	; (800aed8 <tcp_recv+0x3c>)
 800aebc:	4807      	ldr	r0, [pc, #28]	; (800aedc <tcp_recv+0x40>)
 800aebe:	f007 fe45 	bl	8012b4c <iprintf>
    pcb->recv = recv;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	683a      	ldr	r2, [r7, #0]
 800aec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800aeca:	bf00      	nop
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	080145b0 	.word	0x080145b0
 800aed8:	08014b4c 	.word	0x08014b4c
 800aedc:	080145f4 	.word	0x080145f4

0800aee0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00e      	beq.n	800af0e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	7d1b      	ldrb	r3, [r3, #20]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d106      	bne.n	800af06 <tcp_sent+0x26>
 800aef8:	4b07      	ldr	r3, [pc, #28]	; (800af18 <tcp_sent+0x38>)
 800aefa:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800aefe:	4907      	ldr	r1, [pc, #28]	; (800af1c <tcp_sent+0x3c>)
 800af00:	4807      	ldr	r0, [pc, #28]	; (800af20 <tcp_sent+0x40>)
 800af02:	f007 fe23 	bl	8012b4c <iprintf>
    pcb->sent = sent;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800af0e:	bf00      	nop
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	080145b0 	.word	0x080145b0
 800af1c:	08014b74 	.word	0x08014b74
 800af20:	080145f4 	.word	0x080145f4

0800af24 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00e      	beq.n	800af52 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	7d1b      	ldrb	r3, [r3, #20]
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d106      	bne.n	800af4a <tcp_err+0x26>
 800af3c:	4b07      	ldr	r3, [pc, #28]	; (800af5c <tcp_err+0x38>)
 800af3e:	f640 020d 	movw	r2, #2061	; 0x80d
 800af42:	4907      	ldr	r1, [pc, #28]	; (800af60 <tcp_err+0x3c>)
 800af44:	4807      	ldr	r0, [pc, #28]	; (800af64 <tcp_err+0x40>)
 800af46:	f007 fe01 	bl	8012b4c <iprintf>
    pcb->errf = err;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	683a      	ldr	r2, [r7, #0]
 800af4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800af52:	bf00      	nop
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	080145b0 	.word	0x080145b0
 800af60:	08014b9c 	.word	0x08014b9c
 800af64:	080145f4 	.word	0x080145f4

0800af68 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d008      	beq.n	800af8a <tcp_accept+0x22>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	7d1b      	ldrb	r3, [r3, #20]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d104      	bne.n	800af8a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	683a      	ldr	r2, [r7, #0]
 800af88:	619a      	str	r2, [r3, #24]
  }
}
 800af8a:	bf00      	nop
 800af8c:	3714      	adds	r7, #20
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
	...

0800af98 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	4613      	mov	r3, r2
 800afa4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d107      	bne.n	800afbc <tcp_poll+0x24>
 800afac:	4b0e      	ldr	r3, [pc, #56]	; (800afe8 <tcp_poll+0x50>)
 800afae:	f640 023d 	movw	r2, #2109	; 0x83d
 800afb2:	490e      	ldr	r1, [pc, #56]	; (800afec <tcp_poll+0x54>)
 800afb4:	480e      	ldr	r0, [pc, #56]	; (800aff0 <tcp_poll+0x58>)
 800afb6:	f007 fdc9 	bl	8012b4c <iprintf>
 800afba:	e011      	b.n	800afe0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	7d1b      	ldrb	r3, [r3, #20]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d106      	bne.n	800afd2 <tcp_poll+0x3a>
 800afc4:	4b08      	ldr	r3, [pc, #32]	; (800afe8 <tcp_poll+0x50>)
 800afc6:	f640 023e 	movw	r2, #2110	; 0x83e
 800afca:	490a      	ldr	r1, [pc, #40]	; (800aff4 <tcp_poll+0x5c>)
 800afcc:	4808      	ldr	r0, [pc, #32]	; (800aff0 <tcp_poll+0x58>)
 800afce:	f007 fdbd 	bl	8012b4c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	68ba      	ldr	r2, [r7, #8]
 800afd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	79fa      	ldrb	r2, [r7, #7]
 800afde:	775a      	strb	r2, [r3, #29]
}
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	080145b0 	.word	0x080145b0
 800afec:	08014bc4 	.word	0x08014bc4
 800aff0:	080145f4 	.word	0x080145f4
 800aff4:	08014bdc 	.word	0x08014bdc

0800aff8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d107      	bne.n	800b016 <tcp_pcb_purge+0x1e>
 800b006:	4b21      	ldr	r3, [pc, #132]	; (800b08c <tcp_pcb_purge+0x94>)
 800b008:	f640 0251 	movw	r2, #2129	; 0x851
 800b00c:	4920      	ldr	r1, [pc, #128]	; (800b090 <tcp_pcb_purge+0x98>)
 800b00e:	4821      	ldr	r0, [pc, #132]	; (800b094 <tcp_pcb_purge+0x9c>)
 800b010:	f007 fd9c 	bl	8012b4c <iprintf>
 800b014:	e037      	b.n	800b086 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	7d1b      	ldrb	r3, [r3, #20]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d033      	beq.n	800b086 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b022:	2b0a      	cmp	r3, #10
 800b024:	d02f      	beq.n	800b086 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d02b      	beq.n	800b086 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b032:	2b00      	cmp	r3, #0
 800b034:	d007      	beq.n	800b046 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7fe f8d8 	bl	80091f0 <pbuf_free>
      pcb->refused_data = NULL;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d002      	beq.n	800b054 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f986 	bl	800b360 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b05a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b060:	4618      	mov	r0, r3
 800b062:	f7ff fce3 	bl	800aa2c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7ff fcde 	bl	800aa2c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	66da      	str	r2, [r3, #108]	; 0x6c
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b086:	3708      	adds	r7, #8
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	080145b0 	.word	0x080145b0
 800b090:	08014bfc 	.word	0x08014bfc
 800b094:	080145f4 	.word	0x080145f4

0800b098 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d106      	bne.n	800b0b6 <tcp_pcb_remove+0x1e>
 800b0a8:	4b3e      	ldr	r3, [pc, #248]	; (800b1a4 <tcp_pcb_remove+0x10c>)
 800b0aa:	f640 0283 	movw	r2, #2179	; 0x883
 800b0ae:	493e      	ldr	r1, [pc, #248]	; (800b1a8 <tcp_pcb_remove+0x110>)
 800b0b0:	483e      	ldr	r0, [pc, #248]	; (800b1ac <tcp_pcb_remove+0x114>)
 800b0b2:	f007 fd4b 	bl	8012b4c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d106      	bne.n	800b0ca <tcp_pcb_remove+0x32>
 800b0bc:	4b39      	ldr	r3, [pc, #228]	; (800b1a4 <tcp_pcb_remove+0x10c>)
 800b0be:	f640 0284 	movw	r2, #2180	; 0x884
 800b0c2:	493b      	ldr	r1, [pc, #236]	; (800b1b0 <tcp_pcb_remove+0x118>)
 800b0c4:	4839      	ldr	r0, [pc, #228]	; (800b1ac <tcp_pcb_remove+0x114>)
 800b0c6:	f007 fd41 	bl	8012b4c <iprintf>

  TCP_RMV(pcblist, pcb);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	683a      	ldr	r2, [r7, #0]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d105      	bne.n	800b0e0 <tcp_pcb_remove+0x48>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	68da      	ldr	r2, [r3, #12]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	601a      	str	r2, [r3, #0]
 800b0de:	e013      	b.n	800b108 <tcp_pcb_remove+0x70>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	60fb      	str	r3, [r7, #12]
 800b0e6:	e00c      	b.n	800b102 <tcp_pcb_remove+0x6a>
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	683a      	ldr	r2, [r7, #0]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d104      	bne.n	800b0fc <tcp_pcb_remove+0x64>
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	68da      	ldr	r2, [r3, #12]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	60da      	str	r2, [r3, #12]
 800b0fa:	e005      	b.n	800b108 <tcp_pcb_remove+0x70>
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	60fb      	str	r3, [r7, #12]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d1ef      	bne.n	800b0e8 <tcp_pcb_remove+0x50>
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	2200      	movs	r2, #0
 800b10c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b10e:	6838      	ldr	r0, [r7, #0]
 800b110:	f7ff ff72 	bl	800aff8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	7d1b      	ldrb	r3, [r3, #20]
 800b118:	2b0a      	cmp	r3, #10
 800b11a:	d013      	beq.n	800b144 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b120:	2b01      	cmp	r3, #1
 800b122:	d00f      	beq.n	800b144 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	8b5b      	ldrh	r3, [r3, #26]
 800b128:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d009      	beq.n	800b144 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	8b5b      	ldrh	r3, [r3, #26]
 800b134:	f043 0302 	orr.w	r3, r3, #2
 800b138:	b29a      	uxth	r2, r3
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b13e:	6838      	ldr	r0, [r7, #0]
 800b140:	f003 fbc2 	bl	800e8c8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	7d1b      	ldrb	r3, [r3, #20]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d020      	beq.n	800b18e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b150:	2b00      	cmp	r3, #0
 800b152:	d006      	beq.n	800b162 <tcp_pcb_remove+0xca>
 800b154:	4b13      	ldr	r3, [pc, #76]	; (800b1a4 <tcp_pcb_remove+0x10c>)
 800b156:	f640 0293 	movw	r2, #2195	; 0x893
 800b15a:	4916      	ldr	r1, [pc, #88]	; (800b1b4 <tcp_pcb_remove+0x11c>)
 800b15c:	4813      	ldr	r0, [pc, #76]	; (800b1ac <tcp_pcb_remove+0x114>)
 800b15e:	f007 fcf5 	bl	8012b4c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b166:	2b00      	cmp	r3, #0
 800b168:	d006      	beq.n	800b178 <tcp_pcb_remove+0xe0>
 800b16a:	4b0e      	ldr	r3, [pc, #56]	; (800b1a4 <tcp_pcb_remove+0x10c>)
 800b16c:	f640 0294 	movw	r2, #2196	; 0x894
 800b170:	4911      	ldr	r1, [pc, #68]	; (800b1b8 <tcp_pcb_remove+0x120>)
 800b172:	480e      	ldr	r0, [pc, #56]	; (800b1ac <tcp_pcb_remove+0x114>)
 800b174:	f007 fcea 	bl	8012b4c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d006      	beq.n	800b18e <tcp_pcb_remove+0xf6>
 800b180:	4b08      	ldr	r3, [pc, #32]	; (800b1a4 <tcp_pcb_remove+0x10c>)
 800b182:	f640 0296 	movw	r2, #2198	; 0x896
 800b186:	490d      	ldr	r1, [pc, #52]	; (800b1bc <tcp_pcb_remove+0x124>)
 800b188:	4808      	ldr	r0, [pc, #32]	; (800b1ac <tcp_pcb_remove+0x114>)
 800b18a:	f007 fcdf 	bl	8012b4c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	2200      	movs	r2, #0
 800b192:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	2200      	movs	r2, #0
 800b198:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b19a:	bf00      	nop
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	080145b0 	.word	0x080145b0
 800b1a8:	08014c18 	.word	0x08014c18
 800b1ac:	080145f4 	.word	0x080145f4
 800b1b0:	08014c34 	.word	0x08014c34
 800b1b4:	08014c54 	.word	0x08014c54
 800b1b8:	08014c6c 	.word	0x08014c6c
 800b1bc:	08014c88 	.word	0x08014c88

0800b1c0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d106      	bne.n	800b1dc <tcp_next_iss+0x1c>
 800b1ce:	4b0a      	ldr	r3, [pc, #40]	; (800b1f8 <tcp_next_iss+0x38>)
 800b1d0:	f640 02af 	movw	r2, #2223	; 0x8af
 800b1d4:	4909      	ldr	r1, [pc, #36]	; (800b1fc <tcp_next_iss+0x3c>)
 800b1d6:	480a      	ldr	r0, [pc, #40]	; (800b200 <tcp_next_iss+0x40>)
 800b1d8:	f007 fcb8 	bl	8012b4c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b1dc:	4b09      	ldr	r3, [pc, #36]	; (800b204 <tcp_next_iss+0x44>)
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	4b09      	ldr	r3, [pc, #36]	; (800b208 <tcp_next_iss+0x48>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	4a07      	ldr	r2, [pc, #28]	; (800b204 <tcp_next_iss+0x44>)
 800b1e8:	6013      	str	r3, [r2, #0]
  return iss;
 800b1ea:	4b06      	ldr	r3, [pc, #24]	; (800b204 <tcp_next_iss+0x44>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	080145b0 	.word	0x080145b0
 800b1fc:	08014ca0 	.word	0x08014ca0
 800b200:	080145f4 	.word	0x080145f4
 800b204:	20000048 	.word	0x20000048
 800b208:	2000bcc8 	.word	0x2000bcc8

0800b20c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af00      	add	r7, sp, #0
 800b212:	4603      	mov	r3, r0
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
 800b218:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d106      	bne.n	800b22e <tcp_eff_send_mss_netif+0x22>
 800b220:	4b14      	ldr	r3, [pc, #80]	; (800b274 <tcp_eff_send_mss_netif+0x68>)
 800b222:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b226:	4914      	ldr	r1, [pc, #80]	; (800b278 <tcp_eff_send_mss_netif+0x6c>)
 800b228:	4814      	ldr	r0, [pc, #80]	; (800b27c <tcp_eff_send_mss_netif+0x70>)
 800b22a:	f007 fc8f 	bl	8012b4c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d101      	bne.n	800b238 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b234:	89fb      	ldrh	r3, [r7, #14]
 800b236:	e019      	b.n	800b26c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b23c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b23e:	8afb      	ldrh	r3, [r7, #22]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d012      	beq.n	800b26a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b244:	2328      	movs	r3, #40	; 0x28
 800b246:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b248:	8afa      	ldrh	r2, [r7, #22]
 800b24a:	8abb      	ldrh	r3, [r7, #20]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d904      	bls.n	800b25a <tcp_eff_send_mss_netif+0x4e>
 800b250:	8afa      	ldrh	r2, [r7, #22]
 800b252:	8abb      	ldrh	r3, [r7, #20]
 800b254:	1ad3      	subs	r3, r2, r3
 800b256:	b29b      	uxth	r3, r3
 800b258:	e000      	b.n	800b25c <tcp_eff_send_mss_netif+0x50>
 800b25a:	2300      	movs	r3, #0
 800b25c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b25e:	8a7a      	ldrh	r2, [r7, #18]
 800b260:	89fb      	ldrh	r3, [r7, #14]
 800b262:	4293      	cmp	r3, r2
 800b264:	bf28      	it	cs
 800b266:	4613      	movcs	r3, r2
 800b268:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b26a:	89fb      	ldrh	r3, [r7, #14]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3718      	adds	r7, #24
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}
 800b274:	080145b0 	.word	0x080145b0
 800b278:	08014cbc 	.word	0x08014cbc
 800b27c:	080145f4 	.word	0x080145f4

0800b280 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d119      	bne.n	800b2c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b294:	4b10      	ldr	r3, [pc, #64]	; (800b2d8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b296:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b29a:	4910      	ldr	r1, [pc, #64]	; (800b2dc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b29c:	4810      	ldr	r0, [pc, #64]	; (800b2e0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b29e:	f007 fc55 	bl	8012b4c <iprintf>

  while (pcb != NULL) {
 800b2a2:	e011      	b.n	800b2c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d108      	bne.n	800b2c2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f7fe fd2a 	bl	8009d10 <tcp_abort>
      pcb = next;
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	60fb      	str	r3, [r7, #12]
 800b2c0:	e002      	b.n	800b2c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1ea      	bne.n	800b2a4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b2ce:	bf00      	nop
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	080145b0 	.word	0x080145b0
 800b2dc:	08014ce4 	.word	0x08014ce4
 800b2e0:	080145f4 	.word	0x080145f4

0800b2e4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d02a      	beq.n	800b34a <tcp_netif_ip_addr_changed+0x66>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d026      	beq.n	800b34a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b2fc:	4b15      	ldr	r3, [pc, #84]	; (800b354 <tcp_netif_ip_addr_changed+0x70>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4619      	mov	r1, r3
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f7ff ffbc 	bl	800b280 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b308:	4b13      	ldr	r3, [pc, #76]	; (800b358 <tcp_netif_ip_addr_changed+0x74>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4619      	mov	r1, r3
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7ff ffb6 	bl	800b280 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d017      	beq.n	800b34a <tcp_netif_ip_addr_changed+0x66>
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d013      	beq.n	800b34a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b322:	4b0e      	ldr	r3, [pc, #56]	; (800b35c <tcp_netif_ip_addr_changed+0x78>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	60fb      	str	r3, [r7, #12]
 800b328:	e00c      	b.n	800b344 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	429a      	cmp	r2, r3
 800b334:	d103      	bne.n	800b33e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	60fb      	str	r3, [r7, #12]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1ef      	bne.n	800b32a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b34a:	bf00      	nop
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	2000bcc4 	.word	0x2000bcc4
 800b358:	2000bcd0 	.word	0x2000bcd0
 800b35c:	2000bccc 	.word	0x2000bccc

0800b360 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d007      	beq.n	800b380 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b374:	4618      	mov	r0, r3
 800b376:	f7ff fb59 	bl	800aa2c <tcp_segs_free>
    pcb->ooseq = NULL;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b380:	bf00      	nop
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b388:	b590      	push	{r4, r7, lr}
 800b38a:	b08d      	sub	sp, #52	; 0x34
 800b38c:	af04      	add	r7, sp, #16
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d105      	bne.n	800b3a4 <tcp_input+0x1c>
 800b398:	4b9b      	ldr	r3, [pc, #620]	; (800b608 <tcp_input+0x280>)
 800b39a:	2283      	movs	r2, #131	; 0x83
 800b39c:	499b      	ldr	r1, [pc, #620]	; (800b60c <tcp_input+0x284>)
 800b39e:	489c      	ldr	r0, [pc, #624]	; (800b610 <tcp_input+0x288>)
 800b3a0:	f007 fbd4 	bl	8012b4c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	4a9a      	ldr	r2, [pc, #616]	; (800b614 <tcp_input+0x28c>)
 800b3aa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	895b      	ldrh	r3, [r3, #10]
 800b3b0:	2b13      	cmp	r3, #19
 800b3b2:	f240 83c4 	bls.w	800bb3e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b3b6:	4b98      	ldr	r3, [pc, #608]	; (800b618 <tcp_input+0x290>)
 800b3b8:	695a      	ldr	r2, [r3, #20]
 800b3ba:	4b97      	ldr	r3, [pc, #604]	; (800b618 <tcp_input+0x290>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	f006 fc31 	bl	8011c28 <ip4_addr_isbroadcast_u32>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f040 83ba 	bne.w	800bb42 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b3ce:	4b92      	ldr	r3, [pc, #584]	; (800b618 <tcp_input+0x290>)
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b3d6:	2be0      	cmp	r3, #224	; 0xe0
 800b3d8:	f000 83b3 	beq.w	800bb42 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b3dc:	4b8d      	ldr	r3, [pc, #564]	; (800b614 <tcp_input+0x28c>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	899b      	ldrh	r3, [r3, #12]
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fc fc54 	bl	8007c92 <lwip_htons>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	0b1b      	lsrs	r3, r3, #12
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b3f6:	7cbb      	ldrb	r3, [r7, #18]
 800b3f8:	2b13      	cmp	r3, #19
 800b3fa:	f240 83a2 	bls.w	800bb42 <tcp_input+0x7ba>
 800b3fe:	7cbb      	ldrb	r3, [r7, #18]
 800b400:	b29a      	uxth	r2, r3
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	891b      	ldrh	r3, [r3, #8]
 800b406:	429a      	cmp	r2, r3
 800b408:	f200 839b 	bhi.w	800bb42 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b40c:	7cbb      	ldrb	r3, [r7, #18]
 800b40e:	b29b      	uxth	r3, r3
 800b410:	3b14      	subs	r3, #20
 800b412:	b29a      	uxth	r2, r3
 800b414:	4b81      	ldr	r3, [pc, #516]	; (800b61c <tcp_input+0x294>)
 800b416:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b418:	4b81      	ldr	r3, [pc, #516]	; (800b620 <tcp_input+0x298>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	895a      	ldrh	r2, [r3, #10]
 800b422:	7cbb      	ldrb	r3, [r7, #18]
 800b424:	b29b      	uxth	r3, r3
 800b426:	429a      	cmp	r2, r3
 800b428:	d309      	bcc.n	800b43e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b42a:	4b7c      	ldr	r3, [pc, #496]	; (800b61c <tcp_input+0x294>)
 800b42c:	881a      	ldrh	r2, [r3, #0]
 800b42e:	4b7d      	ldr	r3, [pc, #500]	; (800b624 <tcp_input+0x29c>)
 800b430:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b432:	7cbb      	ldrb	r3, [r7, #18]
 800b434:	4619      	mov	r1, r3
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f7fd fe54 	bl	80090e4 <pbuf_remove_header>
 800b43c:	e04e      	b.n	800b4dc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d105      	bne.n	800b452 <tcp_input+0xca>
 800b446:	4b70      	ldr	r3, [pc, #448]	; (800b608 <tcp_input+0x280>)
 800b448:	22c2      	movs	r2, #194	; 0xc2
 800b44a:	4977      	ldr	r1, [pc, #476]	; (800b628 <tcp_input+0x2a0>)
 800b44c:	4870      	ldr	r0, [pc, #448]	; (800b610 <tcp_input+0x288>)
 800b44e:	f007 fb7d 	bl	8012b4c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b452:	2114      	movs	r1, #20
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f7fd fe45 	bl	80090e4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	895a      	ldrh	r2, [r3, #10]
 800b45e:	4b71      	ldr	r3, [pc, #452]	; (800b624 <tcp_input+0x29c>)
 800b460:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b462:	4b6e      	ldr	r3, [pc, #440]	; (800b61c <tcp_input+0x294>)
 800b464:	881a      	ldrh	r2, [r3, #0]
 800b466:	4b6f      	ldr	r3, [pc, #444]	; (800b624 <tcp_input+0x29c>)
 800b468:	881b      	ldrh	r3, [r3, #0]
 800b46a:	1ad3      	subs	r3, r2, r3
 800b46c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b46e:	4b6d      	ldr	r3, [pc, #436]	; (800b624 <tcp_input+0x29c>)
 800b470:	881b      	ldrh	r3, [r3, #0]
 800b472:	4619      	mov	r1, r3
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f7fd fe35 	bl	80090e4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	895b      	ldrh	r3, [r3, #10]
 800b480:	8a3a      	ldrh	r2, [r7, #16]
 800b482:	429a      	cmp	r2, r3
 800b484:	f200 835f 	bhi.w	800bb46 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	4a64      	ldr	r2, [pc, #400]	; (800b620 <tcp_input+0x298>)
 800b490:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	8a3a      	ldrh	r2, [r7, #16]
 800b498:	4611      	mov	r1, r2
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7fd fe22 	bl	80090e4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	891a      	ldrh	r2, [r3, #8]
 800b4a4:	8a3b      	ldrh	r3, [r7, #16]
 800b4a6:	1ad3      	subs	r3, r2, r3
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	895b      	ldrh	r3, [r3, #10]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d005      	beq.n	800b4c2 <tcp_input+0x13a>
 800b4b6:	4b54      	ldr	r3, [pc, #336]	; (800b608 <tcp_input+0x280>)
 800b4b8:	22df      	movs	r2, #223	; 0xdf
 800b4ba:	495c      	ldr	r1, [pc, #368]	; (800b62c <tcp_input+0x2a4>)
 800b4bc:	4854      	ldr	r0, [pc, #336]	; (800b610 <tcp_input+0x288>)
 800b4be:	f007 fb45 	bl	8012b4c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	891a      	ldrh	r2, [r3, #8]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	891b      	ldrh	r3, [r3, #8]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d005      	beq.n	800b4dc <tcp_input+0x154>
 800b4d0:	4b4d      	ldr	r3, [pc, #308]	; (800b608 <tcp_input+0x280>)
 800b4d2:	22e0      	movs	r2, #224	; 0xe0
 800b4d4:	4956      	ldr	r1, [pc, #344]	; (800b630 <tcp_input+0x2a8>)
 800b4d6:	484e      	ldr	r0, [pc, #312]	; (800b610 <tcp_input+0x288>)
 800b4d8:	f007 fb38 	bl	8012b4c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b4dc:	4b4d      	ldr	r3, [pc, #308]	; (800b614 <tcp_input+0x28c>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	881b      	ldrh	r3, [r3, #0]
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	4b4b      	ldr	r3, [pc, #300]	; (800b614 <tcp_input+0x28c>)
 800b4e6:	681c      	ldr	r4, [r3, #0]
 800b4e8:	4610      	mov	r0, r2
 800b4ea:	f7fc fbd2 	bl	8007c92 <lwip_htons>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b4f2:	4b48      	ldr	r3, [pc, #288]	; (800b614 <tcp_input+0x28c>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	885b      	ldrh	r3, [r3, #2]
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	4b46      	ldr	r3, [pc, #280]	; (800b614 <tcp_input+0x28c>)
 800b4fc:	681c      	ldr	r4, [r3, #0]
 800b4fe:	4610      	mov	r0, r2
 800b500:	f7fc fbc7 	bl	8007c92 <lwip_htons>
 800b504:	4603      	mov	r3, r0
 800b506:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b508:	4b42      	ldr	r3, [pc, #264]	; (800b614 <tcp_input+0x28c>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	685a      	ldr	r2, [r3, #4]
 800b50e:	4b41      	ldr	r3, [pc, #260]	; (800b614 <tcp_input+0x28c>)
 800b510:	681c      	ldr	r4, [r3, #0]
 800b512:	4610      	mov	r0, r2
 800b514:	f7fc fbd2 	bl	8007cbc <lwip_htonl>
 800b518:	4603      	mov	r3, r0
 800b51a:	6063      	str	r3, [r4, #4]
 800b51c:	6863      	ldr	r3, [r4, #4]
 800b51e:	4a45      	ldr	r2, [pc, #276]	; (800b634 <tcp_input+0x2ac>)
 800b520:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b522:	4b3c      	ldr	r3, [pc, #240]	; (800b614 <tcp_input+0x28c>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	689a      	ldr	r2, [r3, #8]
 800b528:	4b3a      	ldr	r3, [pc, #232]	; (800b614 <tcp_input+0x28c>)
 800b52a:	681c      	ldr	r4, [r3, #0]
 800b52c:	4610      	mov	r0, r2
 800b52e:	f7fc fbc5 	bl	8007cbc <lwip_htonl>
 800b532:	4603      	mov	r3, r0
 800b534:	60a3      	str	r3, [r4, #8]
 800b536:	68a3      	ldr	r3, [r4, #8]
 800b538:	4a3f      	ldr	r2, [pc, #252]	; (800b638 <tcp_input+0x2b0>)
 800b53a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b53c:	4b35      	ldr	r3, [pc, #212]	; (800b614 <tcp_input+0x28c>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	89db      	ldrh	r3, [r3, #14]
 800b542:	b29a      	uxth	r2, r3
 800b544:	4b33      	ldr	r3, [pc, #204]	; (800b614 <tcp_input+0x28c>)
 800b546:	681c      	ldr	r4, [r3, #0]
 800b548:	4610      	mov	r0, r2
 800b54a:	f7fc fba2 	bl	8007c92 <lwip_htons>
 800b54e:	4603      	mov	r3, r0
 800b550:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b552:	4b30      	ldr	r3, [pc, #192]	; (800b614 <tcp_input+0x28c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	899b      	ldrh	r3, [r3, #12]
 800b558:	b29b      	uxth	r3, r3
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fc fb99 	bl	8007c92 <lwip_htons>
 800b560:	4603      	mov	r3, r0
 800b562:	b2db      	uxtb	r3, r3
 800b564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b568:	b2da      	uxtb	r2, r3
 800b56a:	4b34      	ldr	r3, [pc, #208]	; (800b63c <tcp_input+0x2b4>)
 800b56c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	891a      	ldrh	r2, [r3, #8]
 800b572:	4b33      	ldr	r3, [pc, #204]	; (800b640 <tcp_input+0x2b8>)
 800b574:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b576:	4b31      	ldr	r3, [pc, #196]	; (800b63c <tcp_input+0x2b4>)
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	f003 0303 	and.w	r3, r3, #3
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00c      	beq.n	800b59c <tcp_input+0x214>
    tcplen++;
 800b582:	4b2f      	ldr	r3, [pc, #188]	; (800b640 <tcp_input+0x2b8>)
 800b584:	881b      	ldrh	r3, [r3, #0]
 800b586:	3301      	adds	r3, #1
 800b588:	b29a      	uxth	r2, r3
 800b58a:	4b2d      	ldr	r3, [pc, #180]	; (800b640 <tcp_input+0x2b8>)
 800b58c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	891a      	ldrh	r2, [r3, #8]
 800b592:	4b2b      	ldr	r3, [pc, #172]	; (800b640 <tcp_input+0x2b8>)
 800b594:	881b      	ldrh	r3, [r3, #0]
 800b596:	429a      	cmp	r2, r3
 800b598:	f200 82d7 	bhi.w	800bb4a <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b59c:	2300      	movs	r3, #0
 800b59e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5a0:	4b28      	ldr	r3, [pc, #160]	; (800b644 <tcp_input+0x2bc>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	61fb      	str	r3, [r7, #28]
 800b5a6:	e09d      	b.n	800b6e4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	7d1b      	ldrb	r3, [r3, #20]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d105      	bne.n	800b5bc <tcp_input+0x234>
 800b5b0:	4b15      	ldr	r3, [pc, #84]	; (800b608 <tcp_input+0x280>)
 800b5b2:	22fb      	movs	r2, #251	; 0xfb
 800b5b4:	4924      	ldr	r1, [pc, #144]	; (800b648 <tcp_input+0x2c0>)
 800b5b6:	4816      	ldr	r0, [pc, #88]	; (800b610 <tcp_input+0x288>)
 800b5b8:	f007 fac8 	bl	8012b4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	7d1b      	ldrb	r3, [r3, #20]
 800b5c0:	2b0a      	cmp	r3, #10
 800b5c2:	d105      	bne.n	800b5d0 <tcp_input+0x248>
 800b5c4:	4b10      	ldr	r3, [pc, #64]	; (800b608 <tcp_input+0x280>)
 800b5c6:	22fc      	movs	r2, #252	; 0xfc
 800b5c8:	4920      	ldr	r1, [pc, #128]	; (800b64c <tcp_input+0x2c4>)
 800b5ca:	4811      	ldr	r0, [pc, #68]	; (800b610 <tcp_input+0x288>)
 800b5cc:	f007 fabe 	bl	8012b4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	7d1b      	ldrb	r3, [r3, #20]
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d105      	bne.n	800b5e4 <tcp_input+0x25c>
 800b5d8:	4b0b      	ldr	r3, [pc, #44]	; (800b608 <tcp_input+0x280>)
 800b5da:	22fd      	movs	r2, #253	; 0xfd
 800b5dc:	491c      	ldr	r1, [pc, #112]	; (800b650 <tcp_input+0x2c8>)
 800b5de:	480c      	ldr	r0, [pc, #48]	; (800b610 <tcp_input+0x288>)
 800b5e0:	f007 fab4 	bl	8012b4c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	7a1b      	ldrb	r3, [r3, #8]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d033      	beq.n	800b654 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	7a1a      	ldrb	r2, [r3, #8]
 800b5f0:	4b09      	ldr	r3, [pc, #36]	; (800b618 <tcp_input+0x290>)
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d029      	beq.n	800b654 <tcp_input+0x2cc>
      prev = pcb;
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	61bb      	str	r3, [r7, #24]
      continue;
 800b604:	e06b      	b.n	800b6de <tcp_input+0x356>
 800b606:	bf00      	nop
 800b608:	08014d18 	.word	0x08014d18
 800b60c:	08014d4c 	.word	0x08014d4c
 800b610:	08014d64 	.word	0x08014d64
 800b614:	20000154 	.word	0x20000154
 800b618:	20008780 	.word	0x20008780
 800b61c:	20000158 	.word	0x20000158
 800b620:	2000015c 	.word	0x2000015c
 800b624:	2000015a 	.word	0x2000015a
 800b628:	08014d8c 	.word	0x08014d8c
 800b62c:	08014d9c 	.word	0x08014d9c
 800b630:	08014da8 	.word	0x08014da8
 800b634:	20000164 	.word	0x20000164
 800b638:	20000168 	.word	0x20000168
 800b63c:	20000170 	.word	0x20000170
 800b640:	2000016e 	.word	0x2000016e
 800b644:	2000bcc4 	.word	0x2000bcc4
 800b648:	08014dc8 	.word	0x08014dc8
 800b64c:	08014df0 	.word	0x08014df0
 800b650:	08014e1c 	.word	0x08014e1c
    }

    if (pcb->remote_port == tcphdr->src &&
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	8b1a      	ldrh	r2, [r3, #24]
 800b658:	4b94      	ldr	r3, [pc, #592]	; (800b8ac <tcp_input+0x524>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	881b      	ldrh	r3, [r3, #0]
 800b65e:	b29b      	uxth	r3, r3
 800b660:	429a      	cmp	r2, r3
 800b662:	d13a      	bne.n	800b6da <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	8ada      	ldrh	r2, [r3, #22]
 800b668:	4b90      	ldr	r3, [pc, #576]	; (800b8ac <tcp_input+0x524>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	885b      	ldrh	r3, [r3, #2]
 800b66e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b670:	429a      	cmp	r2, r3
 800b672:	d132      	bne.n	800b6da <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	685a      	ldr	r2, [r3, #4]
 800b678:	4b8d      	ldr	r3, [pc, #564]	; (800b8b0 <tcp_input+0x528>)
 800b67a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d12c      	bne.n	800b6da <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	4b8a      	ldr	r3, [pc, #552]	; (800b8b0 <tcp_input+0x528>)
 800b686:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b688:	429a      	cmp	r2, r3
 800b68a:	d126      	bne.n	800b6da <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	69fa      	ldr	r2, [r7, #28]
 800b692:	429a      	cmp	r2, r3
 800b694:	d106      	bne.n	800b6a4 <tcp_input+0x31c>
 800b696:	4b87      	ldr	r3, [pc, #540]	; (800b8b4 <tcp_input+0x52c>)
 800b698:	f240 120d 	movw	r2, #269	; 0x10d
 800b69c:	4986      	ldr	r1, [pc, #536]	; (800b8b8 <tcp_input+0x530>)
 800b69e:	4887      	ldr	r0, [pc, #540]	; (800b8bc <tcp_input+0x534>)
 800b6a0:	f007 fa54 	bl	8012b4c <iprintf>
      if (prev != NULL) {
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00a      	beq.n	800b6c0 <tcp_input+0x338>
        prev->next = pcb->next;
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	68da      	ldr	r2, [r3, #12]
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b6b2:	4b83      	ldr	r3, [pc, #524]	; (800b8c0 <tcp_input+0x538>)
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	69fb      	ldr	r3, [r7, #28]
 800b6b8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b6ba:	4a81      	ldr	r2, [pc, #516]	; (800b8c0 <tcp_input+0x538>)
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	69fa      	ldr	r2, [r7, #28]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d111      	bne.n	800b6ee <tcp_input+0x366>
 800b6ca:	4b7a      	ldr	r3, [pc, #488]	; (800b8b4 <tcp_input+0x52c>)
 800b6cc:	f240 1215 	movw	r2, #277	; 0x115
 800b6d0:	497c      	ldr	r1, [pc, #496]	; (800b8c4 <tcp_input+0x53c>)
 800b6d2:	487a      	ldr	r0, [pc, #488]	; (800b8bc <tcp_input+0x534>)
 800b6d4:	f007 fa3a 	bl	8012b4c <iprintf>
      break;
 800b6d8:	e009      	b.n	800b6ee <tcp_input+0x366>
    }
    prev = pcb;
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	68db      	ldr	r3, [r3, #12]
 800b6e2:	61fb      	str	r3, [r7, #28]
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f47f af5e 	bne.w	800b5a8 <tcp_input+0x220>
 800b6ec:	e000      	b.n	800b6f0 <tcp_input+0x368>
      break;
 800b6ee:	bf00      	nop
  }

  if (pcb == NULL) {
 800b6f0:	69fb      	ldr	r3, [r7, #28]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f040 8095 	bne.w	800b822 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6f8:	4b73      	ldr	r3, [pc, #460]	; (800b8c8 <tcp_input+0x540>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	61fb      	str	r3, [r7, #28]
 800b6fe:	e03f      	b.n	800b780 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	7d1b      	ldrb	r3, [r3, #20]
 800b704:	2b0a      	cmp	r3, #10
 800b706:	d006      	beq.n	800b716 <tcp_input+0x38e>
 800b708:	4b6a      	ldr	r3, [pc, #424]	; (800b8b4 <tcp_input+0x52c>)
 800b70a:	f240 121f 	movw	r2, #287	; 0x11f
 800b70e:	496f      	ldr	r1, [pc, #444]	; (800b8cc <tcp_input+0x544>)
 800b710:	486a      	ldr	r0, [pc, #424]	; (800b8bc <tcp_input+0x534>)
 800b712:	f007 fa1b 	bl	8012b4c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	7a1b      	ldrb	r3, [r3, #8]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d009      	beq.n	800b732 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	7a1a      	ldrb	r2, [r3, #8]
 800b722:	4b63      	ldr	r3, [pc, #396]	; (800b8b0 <tcp_input+0x528>)
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b72a:	3301      	adds	r3, #1
 800b72c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b72e:	429a      	cmp	r2, r3
 800b730:	d122      	bne.n	800b778 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	8b1a      	ldrh	r2, [r3, #24]
 800b736:	4b5d      	ldr	r3, [pc, #372]	; (800b8ac <tcp_input+0x524>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	881b      	ldrh	r3, [r3, #0]
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	429a      	cmp	r2, r3
 800b740:	d11b      	bne.n	800b77a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b742:	69fb      	ldr	r3, [r7, #28]
 800b744:	8ada      	ldrh	r2, [r3, #22]
 800b746:	4b59      	ldr	r3, [pc, #356]	; (800b8ac <tcp_input+0x524>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	885b      	ldrh	r3, [r3, #2]
 800b74c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b74e:	429a      	cmp	r2, r3
 800b750:	d113      	bne.n	800b77a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	685a      	ldr	r2, [r3, #4]
 800b756:	4b56      	ldr	r3, [pc, #344]	; (800b8b0 <tcp_input+0x528>)
 800b758:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d10d      	bne.n	800b77a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	4b53      	ldr	r3, [pc, #332]	; (800b8b0 <tcp_input+0x528>)
 800b764:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b766:	429a      	cmp	r2, r3
 800b768:	d107      	bne.n	800b77a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b76a:	69f8      	ldr	r0, [r7, #28]
 800b76c:	f000 fb52 	bl	800be14 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f7fd fd3d 	bl	80091f0 <pbuf_free>
        return;
 800b776:	e1ee      	b.n	800bb56 <tcp_input+0x7ce>
        continue;
 800b778:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	61fb      	str	r3, [r7, #28]
 800b780:	69fb      	ldr	r3, [r7, #28]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1bc      	bne.n	800b700 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b786:	2300      	movs	r3, #0
 800b788:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b78a:	4b51      	ldr	r3, [pc, #324]	; (800b8d0 <tcp_input+0x548>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	617b      	str	r3, [r7, #20]
 800b790:	e02a      	b.n	800b7e8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	7a1b      	ldrb	r3, [r3, #8]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00c      	beq.n	800b7b4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	7a1a      	ldrb	r2, [r3, #8]
 800b79e:	4b44      	ldr	r3, [pc, #272]	; (800b8b0 <tcp_input+0x528>)
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d002      	beq.n	800b7b4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	61bb      	str	r3, [r7, #24]
        continue;
 800b7b2:	e016      	b.n	800b7e2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	8ada      	ldrh	r2, [r3, #22]
 800b7b8:	4b3c      	ldr	r3, [pc, #240]	; (800b8ac <tcp_input+0x524>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	885b      	ldrh	r3, [r3, #2]
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d10c      	bne.n	800b7de <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	4b39      	ldr	r3, [pc, #228]	; (800b8b0 <tcp_input+0x528>)
 800b7ca:	695b      	ldr	r3, [r3, #20]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d00f      	beq.n	800b7f0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00d      	beq.n	800b7f2 <tcp_input+0x46a>
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d009      	beq.n	800b7f2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	617b      	str	r3, [r7, #20]
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1d1      	bne.n	800b792 <tcp_input+0x40a>
 800b7ee:	e000      	b.n	800b7f2 <tcp_input+0x46a>
            break;
 800b7f0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d014      	beq.n	800b822 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00a      	beq.n	800b814 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	68da      	ldr	r2, [r3, #12]
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b806:	4b32      	ldr	r3, [pc, #200]	; (800b8d0 <tcp_input+0x548>)
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b80e:	4a30      	ldr	r2, [pc, #192]	; (800b8d0 <tcp_input+0x548>)
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b814:	6978      	ldr	r0, [r7, #20]
 800b816:	f000 f9ff 	bl	800bc18 <tcp_listen_input>
      }
      pbuf_free(p);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7fd fce8 	bl	80091f0 <pbuf_free>
      return;
 800b820:	e199      	b.n	800bb56 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 8160 	beq.w	800baea <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b82a:	4b2a      	ldr	r3, [pc, #168]	; (800b8d4 <tcp_input+0x54c>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	891a      	ldrh	r2, [r3, #8]
 800b834:	4b27      	ldr	r3, [pc, #156]	; (800b8d4 <tcp_input+0x54c>)
 800b836:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b838:	4a26      	ldr	r2, [pc, #152]	; (800b8d4 <tcp_input+0x54c>)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b83e:	4b1b      	ldr	r3, [pc, #108]	; (800b8ac <tcp_input+0x524>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a24      	ldr	r2, [pc, #144]	; (800b8d4 <tcp_input+0x54c>)
 800b844:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b846:	4b24      	ldr	r3, [pc, #144]	; (800b8d8 <tcp_input+0x550>)
 800b848:	2200      	movs	r2, #0
 800b84a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b84c:	4b23      	ldr	r3, [pc, #140]	; (800b8dc <tcp_input+0x554>)
 800b84e:	2200      	movs	r2, #0
 800b850:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b852:	4b23      	ldr	r3, [pc, #140]	; (800b8e0 <tcp_input+0x558>)
 800b854:	2200      	movs	r2, #0
 800b856:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b858:	4b22      	ldr	r3, [pc, #136]	; (800b8e4 <tcp_input+0x55c>)
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	f003 0308 	and.w	r3, r3, #8
 800b860:	2b00      	cmp	r3, #0
 800b862:	d006      	beq.n	800b872 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	7b5b      	ldrb	r3, [r3, #13]
 800b868:	f043 0301 	orr.w	r3, r3, #1
 800b86c:	b2da      	uxtb	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b876:	2b00      	cmp	r3, #0
 800b878:	d038      	beq.n	800b8ec <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b87a:	69f8      	ldr	r0, [r7, #28]
 800b87c:	f7ff f85a 	bl	800a934 <tcp_process_refused_data>
 800b880:	4603      	mov	r3, r0
 800b882:	f113 0f0d 	cmn.w	r3, #13
 800b886:	d007      	beq.n	800b898 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d02d      	beq.n	800b8ec <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b890:	4b15      	ldr	r3, [pc, #84]	; (800b8e8 <tcp_input+0x560>)
 800b892:	881b      	ldrh	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d029      	beq.n	800b8ec <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f040 8104 	bne.w	800baaa <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b8a2:	69f8      	ldr	r0, [r7, #28]
 800b8a4:	f003 fe26 	bl	800f4f4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b8a8:	e0ff      	b.n	800baaa <tcp_input+0x722>
 800b8aa:	bf00      	nop
 800b8ac:	20000154 	.word	0x20000154
 800b8b0:	20008780 	.word	0x20008780
 800b8b4:	08014d18 	.word	0x08014d18
 800b8b8:	08014e44 	.word	0x08014e44
 800b8bc:	08014d64 	.word	0x08014d64
 800b8c0:	2000bcc4 	.word	0x2000bcc4
 800b8c4:	08014e70 	.word	0x08014e70
 800b8c8:	2000bcd4 	.word	0x2000bcd4
 800b8cc:	08014e9c 	.word	0x08014e9c
 800b8d0:	2000bccc 	.word	0x2000bccc
 800b8d4:	20000144 	.word	0x20000144
 800b8d8:	20000174 	.word	0x20000174
 800b8dc:	20000171 	.word	0x20000171
 800b8e0:	2000016c 	.word	0x2000016c
 800b8e4:	20000170 	.word	0x20000170
 800b8e8:	2000016e 	.word	0x2000016e
      }
    }
    tcp_input_pcb = pcb;
 800b8ec:	4a9b      	ldr	r2, [pc, #620]	; (800bb5c <tcp_input+0x7d4>)
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b8f2:	69f8      	ldr	r0, [r7, #28]
 800b8f4:	f000 fb0a 	bl	800bf0c <tcp_process>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b8fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b900:	f113 0f0d 	cmn.w	r3, #13
 800b904:	f000 80d3 	beq.w	800baae <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800b908:	4b95      	ldr	r3, [pc, #596]	; (800bb60 <tcp_input+0x7d8>)
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	f003 0308 	and.w	r3, r3, #8
 800b910:	2b00      	cmp	r3, #0
 800b912:	d015      	beq.n	800b940 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b914:	69fb      	ldr	r3, [r7, #28]
 800b916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d008      	beq.n	800b930 <tcp_input+0x5a8>
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b924:	69fa      	ldr	r2, [r7, #28]
 800b926:	6912      	ldr	r2, [r2, #16]
 800b928:	f06f 010d 	mvn.w	r1, #13
 800b92c:	4610      	mov	r0, r2
 800b92e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b930:	69f9      	ldr	r1, [r7, #28]
 800b932:	488c      	ldr	r0, [pc, #560]	; (800bb64 <tcp_input+0x7dc>)
 800b934:	f7ff fbb0 	bl	800b098 <tcp_pcb_remove>
        tcp_free(pcb);
 800b938:	69f8      	ldr	r0, [r7, #28]
 800b93a:	f7fd ff09 	bl	8009750 <tcp_free>
 800b93e:	e0c1      	b.n	800bac4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800b940:	2300      	movs	r3, #0
 800b942:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b944:	4b88      	ldr	r3, [pc, #544]	; (800bb68 <tcp_input+0x7e0>)
 800b946:	881b      	ldrh	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d01d      	beq.n	800b988 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b94c:	4b86      	ldr	r3, [pc, #536]	; (800bb68 <tcp_input+0x7e0>)
 800b94e:	881b      	ldrh	r3, [r3, #0]
 800b950:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d00a      	beq.n	800b972 <tcp_input+0x5ea>
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b962:	69fa      	ldr	r2, [r7, #28]
 800b964:	6910      	ldr	r0, [r2, #16]
 800b966:	89fa      	ldrh	r2, [r7, #14]
 800b968:	69f9      	ldr	r1, [r7, #28]
 800b96a:	4798      	blx	r3
 800b96c:	4603      	mov	r3, r0
 800b96e:	74fb      	strb	r3, [r7, #19]
 800b970:	e001      	b.n	800b976 <tcp_input+0x5ee>
 800b972:	2300      	movs	r3, #0
 800b974:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b976:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b97a:	f113 0f0d 	cmn.w	r3, #13
 800b97e:	f000 8098 	beq.w	800bab2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b982:	4b79      	ldr	r3, [pc, #484]	; (800bb68 <tcp_input+0x7e0>)
 800b984:	2200      	movs	r2, #0
 800b986:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b988:	69f8      	ldr	r0, [r7, #28]
 800b98a:	f000 f905 	bl	800bb98 <tcp_input_delayed_close>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	f040 8090 	bne.w	800bab6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b996:	4b75      	ldr	r3, [pc, #468]	; (800bb6c <tcp_input+0x7e4>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d041      	beq.n	800ba22 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d006      	beq.n	800b9b4 <tcp_input+0x62c>
 800b9a6:	4b72      	ldr	r3, [pc, #456]	; (800bb70 <tcp_input+0x7e8>)
 800b9a8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b9ac:	4971      	ldr	r1, [pc, #452]	; (800bb74 <tcp_input+0x7ec>)
 800b9ae:	4872      	ldr	r0, [pc, #456]	; (800bb78 <tcp_input+0x7f0>)
 800b9b0:	f007 f8cc 	bl	8012b4c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	8b5b      	ldrh	r3, [r3, #26]
 800b9b8:	f003 0310 	and.w	r3, r3, #16
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d008      	beq.n	800b9d2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b9c0:	4b6a      	ldr	r3, [pc, #424]	; (800bb6c <tcp_input+0x7e4>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7fd fc13 	bl	80091f0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b9ca:	69f8      	ldr	r0, [r7, #28]
 800b9cc:	f7fe f9a0 	bl	8009d10 <tcp_abort>
            goto aborted;
 800b9d0:	e078      	b.n	800bac4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d00c      	beq.n	800b9f6 <tcp_input+0x66e>
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	6918      	ldr	r0, [r3, #16]
 800b9e6:	4b61      	ldr	r3, [pc, #388]	; (800bb6c <tcp_input+0x7e4>)
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	69f9      	ldr	r1, [r7, #28]
 800b9ee:	47a0      	blx	r4
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	74fb      	strb	r3, [r7, #19]
 800b9f4:	e008      	b.n	800ba08 <tcp_input+0x680>
 800b9f6:	4b5d      	ldr	r3, [pc, #372]	; (800bb6c <tcp_input+0x7e4>)
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	69f9      	ldr	r1, [r7, #28]
 800b9fe:	2000      	movs	r0, #0
 800ba00:	f7ff f88a 	bl	800ab18 <tcp_recv_null>
 800ba04:	4603      	mov	r3, r0
 800ba06:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ba08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba0c:	f113 0f0d 	cmn.w	r3, #13
 800ba10:	d053      	beq.n	800baba <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ba12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d003      	beq.n	800ba22 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ba1a:	4b54      	ldr	r3, [pc, #336]	; (800bb6c <tcp_input+0x7e4>)
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ba22:	4b4f      	ldr	r3, [pc, #316]	; (800bb60 <tcp_input+0x7d8>)
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	f003 0320 	and.w	r3, r3, #32
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d030      	beq.n	800ba90 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800ba2e:	69fb      	ldr	r3, [r7, #28]
 800ba30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d009      	beq.n	800ba4a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba3a:	7b5a      	ldrb	r2, [r3, #13]
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba40:	f042 0220 	orr.w	r2, r2, #32
 800ba44:	b2d2      	uxtb	r2, r2
 800ba46:	735a      	strb	r2, [r3, #13]
 800ba48:	e022      	b.n	800ba90 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba4e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ba52:	d005      	beq.n	800ba60 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba58:	3301      	adds	r3, #1
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00b      	beq.n	800ba82 <tcp_input+0x6fa>
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	6918      	ldr	r0, [r3, #16]
 800ba74:	2300      	movs	r3, #0
 800ba76:	2200      	movs	r2, #0
 800ba78:	69f9      	ldr	r1, [r7, #28]
 800ba7a:	47a0      	blx	r4
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	74fb      	strb	r3, [r7, #19]
 800ba80:	e001      	b.n	800ba86 <tcp_input+0x6fe>
 800ba82:	2300      	movs	r3, #0
 800ba84:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ba86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba8a:	f113 0f0d 	cmn.w	r3, #13
 800ba8e:	d016      	beq.n	800babe <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ba90:	4b32      	ldr	r3, [pc, #200]	; (800bb5c <tcp_input+0x7d4>)
 800ba92:	2200      	movs	r2, #0
 800ba94:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ba96:	69f8      	ldr	r0, [r7, #28]
 800ba98:	f000 f87e 	bl	800bb98 <tcp_input_delayed_close>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d10f      	bne.n	800bac2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800baa2:	69f8      	ldr	r0, [r7, #28]
 800baa4:	f002 ff10 	bl	800e8c8 <tcp_output>
 800baa8:	e00c      	b.n	800bac4 <tcp_input+0x73c>
        goto aborted;
 800baaa:	bf00      	nop
 800baac:	e00a      	b.n	800bac4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800baae:	bf00      	nop
 800bab0:	e008      	b.n	800bac4 <tcp_input+0x73c>
              goto aborted;
 800bab2:	bf00      	nop
 800bab4:	e006      	b.n	800bac4 <tcp_input+0x73c>
          goto aborted;
 800bab6:	bf00      	nop
 800bab8:	e004      	b.n	800bac4 <tcp_input+0x73c>
            goto aborted;
 800baba:	bf00      	nop
 800babc:	e002      	b.n	800bac4 <tcp_input+0x73c>
              goto aborted;
 800babe:	bf00      	nop
 800bac0:	e000      	b.n	800bac4 <tcp_input+0x73c>
          goto aborted;
 800bac2:	bf00      	nop
    tcp_input_pcb = NULL;
 800bac4:	4b25      	ldr	r3, [pc, #148]	; (800bb5c <tcp_input+0x7d4>)
 800bac6:	2200      	movs	r2, #0
 800bac8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800baca:	4b28      	ldr	r3, [pc, #160]	; (800bb6c <tcp_input+0x7e4>)
 800bacc:	2200      	movs	r2, #0
 800bace:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800bad0:	4b2a      	ldr	r3, [pc, #168]	; (800bb7c <tcp_input+0x7f4>)
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d03d      	beq.n	800bb54 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800bad8:	4b28      	ldr	r3, [pc, #160]	; (800bb7c <tcp_input+0x7f4>)
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	4618      	mov	r0, r3
 800bade:	f7fd fb87 	bl	80091f0 <pbuf_free>
      inseg.p = NULL;
 800bae2:	4b26      	ldr	r3, [pc, #152]	; (800bb7c <tcp_input+0x7f4>)
 800bae4:	2200      	movs	r2, #0
 800bae6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800bae8:	e034      	b.n	800bb54 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800baea:	4b25      	ldr	r3, [pc, #148]	; (800bb80 <tcp_input+0x7f8>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	899b      	ldrh	r3, [r3, #12]
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7fc f8cd 	bl	8007c92 <lwip_htons>
 800baf8:	4603      	mov	r3, r0
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	f003 0304 	and.w	r3, r3, #4
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d118      	bne.n	800bb36 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb04:	4b1f      	ldr	r3, [pc, #124]	; (800bb84 <tcp_input+0x7fc>)
 800bb06:	6819      	ldr	r1, [r3, #0]
 800bb08:	4b1f      	ldr	r3, [pc, #124]	; (800bb88 <tcp_input+0x800>)
 800bb0a:	881b      	ldrh	r3, [r3, #0]
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	4b1f      	ldr	r3, [pc, #124]	; (800bb8c <tcp_input+0x804>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb14:	4b1a      	ldr	r3, [pc, #104]	; (800bb80 <tcp_input+0x7f8>)
 800bb16:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb18:	885b      	ldrh	r3, [r3, #2]
 800bb1a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb1c:	4a18      	ldr	r2, [pc, #96]	; (800bb80 <tcp_input+0x7f8>)
 800bb1e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb20:	8812      	ldrh	r2, [r2, #0]
 800bb22:	b292      	uxth	r2, r2
 800bb24:	9202      	str	r2, [sp, #8]
 800bb26:	9301      	str	r3, [sp, #4]
 800bb28:	4b19      	ldr	r3, [pc, #100]	; (800bb90 <tcp_input+0x808>)
 800bb2a:	9300      	str	r3, [sp, #0]
 800bb2c:	4b19      	ldr	r3, [pc, #100]	; (800bb94 <tcp_input+0x80c>)
 800bb2e:	4602      	mov	r2, r0
 800bb30:	2000      	movs	r0, #0
 800bb32:	f003 fc8d 	bl	800f450 <tcp_rst>
    pbuf_free(p);
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f7fd fb5a 	bl	80091f0 <pbuf_free>
  return;
 800bb3c:	e00a      	b.n	800bb54 <tcp_input+0x7cc>
    goto dropped;
 800bb3e:	bf00      	nop
 800bb40:	e004      	b.n	800bb4c <tcp_input+0x7c4>
dropped:
 800bb42:	bf00      	nop
 800bb44:	e002      	b.n	800bb4c <tcp_input+0x7c4>
      goto dropped;
 800bb46:	bf00      	nop
 800bb48:	e000      	b.n	800bb4c <tcp_input+0x7c4>
      goto dropped;
 800bb4a:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7fd fb4f 	bl	80091f0 <pbuf_free>
 800bb52:	e000      	b.n	800bb56 <tcp_input+0x7ce>
  return;
 800bb54:	bf00      	nop
}
 800bb56:	3724      	adds	r7, #36	; 0x24
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd90      	pop	{r4, r7, pc}
 800bb5c:	2000bcd8 	.word	0x2000bcd8
 800bb60:	20000171 	.word	0x20000171
 800bb64:	2000bcc4 	.word	0x2000bcc4
 800bb68:	2000016c 	.word	0x2000016c
 800bb6c:	20000174 	.word	0x20000174
 800bb70:	08014d18 	.word	0x08014d18
 800bb74:	08014ecc 	.word	0x08014ecc
 800bb78:	08014d64 	.word	0x08014d64
 800bb7c:	20000144 	.word	0x20000144
 800bb80:	20000154 	.word	0x20000154
 800bb84:	20000168 	.word	0x20000168
 800bb88:	2000016e 	.word	0x2000016e
 800bb8c:	20000164 	.word	0x20000164
 800bb90:	20008790 	.word	0x20008790
 800bb94:	20008794 	.word	0x20008794

0800bb98 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d106      	bne.n	800bbb4 <tcp_input_delayed_close+0x1c>
 800bba6:	4b17      	ldr	r3, [pc, #92]	; (800bc04 <tcp_input_delayed_close+0x6c>)
 800bba8:	f240 225a 	movw	r2, #602	; 0x25a
 800bbac:	4916      	ldr	r1, [pc, #88]	; (800bc08 <tcp_input_delayed_close+0x70>)
 800bbae:	4817      	ldr	r0, [pc, #92]	; (800bc0c <tcp_input_delayed_close+0x74>)
 800bbb0:	f006 ffcc 	bl	8012b4c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800bbb4:	4b16      	ldr	r3, [pc, #88]	; (800bc10 <tcp_input_delayed_close+0x78>)
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	f003 0310 	and.w	r3, r3, #16
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d01c      	beq.n	800bbfa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	8b5b      	ldrh	r3, [r3, #26]
 800bbc4:	f003 0310 	and.w	r3, r3, #16
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d10d      	bne.n	800bbe8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d008      	beq.n	800bbe8 <tcp_input_delayed_close+0x50>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	6912      	ldr	r2, [r2, #16]
 800bbe0:	f06f 010e 	mvn.w	r1, #14
 800bbe4:	4610      	mov	r0, r2
 800bbe6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bbe8:	6879      	ldr	r1, [r7, #4]
 800bbea:	480a      	ldr	r0, [pc, #40]	; (800bc14 <tcp_input_delayed_close+0x7c>)
 800bbec:	f7ff fa54 	bl	800b098 <tcp_pcb_remove>
    tcp_free(pcb);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f7fd fdad 	bl	8009750 <tcp_free>
    return 1;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e000      	b.n	800bbfc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	08014d18 	.word	0x08014d18
 800bc08:	08014ee8 	.word	0x08014ee8
 800bc0c:	08014d64 	.word	0x08014d64
 800bc10:	20000171 	.word	0x20000171
 800bc14:	2000bcc4 	.word	0x2000bcc4

0800bc18 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800bc18:	b590      	push	{r4, r7, lr}
 800bc1a:	b08b      	sub	sp, #44	; 0x2c
 800bc1c:	af04      	add	r7, sp, #16
 800bc1e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800bc20:	4b6f      	ldr	r3, [pc, #444]	; (800bde0 <tcp_listen_input+0x1c8>)
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	f003 0304 	and.w	r3, r3, #4
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f040 80d3 	bne.w	800bdd4 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d106      	bne.n	800bc42 <tcp_listen_input+0x2a>
 800bc34:	4b6b      	ldr	r3, [pc, #428]	; (800bde4 <tcp_listen_input+0x1cc>)
 800bc36:	f240 2281 	movw	r2, #641	; 0x281
 800bc3a:	496b      	ldr	r1, [pc, #428]	; (800bde8 <tcp_listen_input+0x1d0>)
 800bc3c:	486b      	ldr	r0, [pc, #428]	; (800bdec <tcp_listen_input+0x1d4>)
 800bc3e:	f006 ff85 	bl	8012b4c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800bc42:	4b67      	ldr	r3, [pc, #412]	; (800bde0 <tcp_listen_input+0x1c8>)
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	f003 0310 	and.w	r3, r3, #16
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d019      	beq.n	800bc82 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc4e:	4b68      	ldr	r3, [pc, #416]	; (800bdf0 <tcp_listen_input+0x1d8>)
 800bc50:	6819      	ldr	r1, [r3, #0]
 800bc52:	4b68      	ldr	r3, [pc, #416]	; (800bdf4 <tcp_listen_input+0x1dc>)
 800bc54:	881b      	ldrh	r3, [r3, #0]
 800bc56:	461a      	mov	r2, r3
 800bc58:	4b67      	ldr	r3, [pc, #412]	; (800bdf8 <tcp_listen_input+0x1e0>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc5e:	4b67      	ldr	r3, [pc, #412]	; (800bdfc <tcp_listen_input+0x1e4>)
 800bc60:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc62:	885b      	ldrh	r3, [r3, #2]
 800bc64:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc66:	4a65      	ldr	r2, [pc, #404]	; (800bdfc <tcp_listen_input+0x1e4>)
 800bc68:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc6a:	8812      	ldrh	r2, [r2, #0]
 800bc6c:	b292      	uxth	r2, r2
 800bc6e:	9202      	str	r2, [sp, #8]
 800bc70:	9301      	str	r3, [sp, #4]
 800bc72:	4b63      	ldr	r3, [pc, #396]	; (800be00 <tcp_listen_input+0x1e8>)
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	4b63      	ldr	r3, [pc, #396]	; (800be04 <tcp_listen_input+0x1ec>)
 800bc78:	4602      	mov	r2, r0
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f003 fbe8 	bl	800f450 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800bc80:	e0aa      	b.n	800bdd8 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800bc82:	4b57      	ldr	r3, [pc, #348]	; (800bde0 <tcp_listen_input+0x1c8>)
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	f003 0302 	and.w	r3, r3, #2
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	f000 80a4 	beq.w	800bdd8 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	7d5b      	ldrb	r3, [r3, #21]
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7ff f863 	bl	800ad60 <tcp_alloc>
 800bc9a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d111      	bne.n	800bcc6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	699b      	ldr	r3, [r3, #24]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00a      	beq.n	800bcc0 <tcp_listen_input+0xa8>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	699b      	ldr	r3, [r3, #24]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	6910      	ldr	r0, [r2, #16]
 800bcb2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	4798      	blx	r3
 800bcba:	4603      	mov	r3, r0
 800bcbc:	73bb      	strb	r3, [r7, #14]
      return;
 800bcbe:	e08c      	b.n	800bdda <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bcc0:	23f0      	movs	r3, #240	; 0xf0
 800bcc2:	73bb      	strb	r3, [r7, #14]
      return;
 800bcc4:	e089      	b.n	800bdda <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bcc6:	4b50      	ldr	r3, [pc, #320]	; (800be08 <tcp_listen_input+0x1f0>)
 800bcc8:	695a      	ldr	r2, [r3, #20]
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bcce:	4b4e      	ldr	r3, [pc, #312]	; (800be08 <tcp_listen_input+0x1f0>)
 800bcd0:	691a      	ldr	r2, [r3, #16]
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	8ada      	ldrh	r2, [r3, #22]
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800bcde:	4b47      	ldr	r3, [pc, #284]	; (800bdfc <tcp_listen_input+0x1e4>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	881b      	ldrh	r3, [r3, #0]
 800bce4:	b29a      	uxth	r2, r3
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	2203      	movs	r2, #3
 800bcee:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800bcf0:	4b41      	ldr	r3, [pc, #260]	; (800bdf8 <tcp_listen_input+0x1e0>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	1c5a      	adds	r2, r3, #1
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800bd02:	6978      	ldr	r0, [r7, #20]
 800bd04:	f7ff fa5c 	bl	800b1c0 <tcp_next_iss>
 800bd08:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	693a      	ldr	r2, [r7, #16]
 800bd0e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	693a      	ldr	r2, [r7, #16]
 800bd14:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	693a      	ldr	r2, [r7, #16]
 800bd1a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bd22:	4b35      	ldr	r3, [pc, #212]	; (800bdf8 <tcp_listen_input+0x1e0>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	1e5a      	subs	r2, r3, #1
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	691a      	ldr	r2, [r3, #16]
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	7a5b      	ldrb	r3, [r3, #9]
 800bd3e:	f003 030c 	and.w	r3, r3, #12
 800bd42:	b2da      	uxtb	r2, r3
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	7a1a      	ldrb	r2, [r3, #8]
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800bd50:	4b2e      	ldr	r3, [pc, #184]	; (800be0c <tcp_listen_input+0x1f4>)
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	60da      	str	r2, [r3, #12]
 800bd58:	4a2c      	ldr	r2, [pc, #176]	; (800be0c <tcp_listen_input+0x1f4>)
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	6013      	str	r3, [r2, #0]
 800bd5e:	f003 fd39 	bl	800f7d4 <tcp_timer_needed>
 800bd62:	4b2b      	ldr	r3, [pc, #172]	; (800be10 <tcp_listen_input+0x1f8>)
 800bd64:	2201      	movs	r2, #1
 800bd66:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800bd68:	6978      	ldr	r0, [r7, #20]
 800bd6a:	f001 fd8f 	bl	800d88c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800bd6e:	4b23      	ldr	r3, [pc, #140]	; (800bdfc <tcp_listen_input+0x1e4>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	89db      	ldrh	r3, [r3, #14]
 800bd74:	b29a      	uxth	r2, r3
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	3304      	adds	r3, #4
 800bd90:	4618      	mov	r0, r3
 800bd92:	f005 fcb5 	bl	8011700 <ip4_route>
 800bd96:	4601      	mov	r1, r0
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	3304      	adds	r3, #4
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f7ff fa34 	bl	800b20c <tcp_eff_send_mss_netif>
 800bda4:	4603      	mov	r3, r0
 800bda6:	461a      	mov	r2, r3
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bdac:	2112      	movs	r1, #18
 800bdae:	6978      	ldr	r0, [r7, #20]
 800bdb0:	f002 fc9c 	bl	800e6ec <tcp_enqueue_flags>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800bdb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d004      	beq.n	800bdca <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800bdc0:	2100      	movs	r1, #0
 800bdc2:	6978      	ldr	r0, [r7, #20]
 800bdc4:	f7fd fee6 	bl	8009b94 <tcp_abandon>
      return;
 800bdc8:	e007      	b.n	800bdda <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800bdca:	6978      	ldr	r0, [r7, #20]
 800bdcc:	f002 fd7c 	bl	800e8c8 <tcp_output>
  return;
 800bdd0:	bf00      	nop
 800bdd2:	e001      	b.n	800bdd8 <tcp_listen_input+0x1c0>
    return;
 800bdd4:	bf00      	nop
 800bdd6:	e000      	b.n	800bdda <tcp_listen_input+0x1c2>
  return;
 800bdd8:	bf00      	nop
}
 800bdda:	371c      	adds	r7, #28
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd90      	pop	{r4, r7, pc}
 800bde0:	20000170 	.word	0x20000170
 800bde4:	08014d18 	.word	0x08014d18
 800bde8:	08014f10 	.word	0x08014f10
 800bdec:	08014d64 	.word	0x08014d64
 800bdf0:	20000168 	.word	0x20000168
 800bdf4:	2000016e 	.word	0x2000016e
 800bdf8:	20000164 	.word	0x20000164
 800bdfc:	20000154 	.word	0x20000154
 800be00:	20008790 	.word	0x20008790
 800be04:	20008794 	.word	0x20008794
 800be08:	20008780 	.word	0x20008780
 800be0c:	2000bcc4 	.word	0x2000bcc4
 800be10:	2000bcc0 	.word	0x2000bcc0

0800be14 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af04      	add	r7, sp, #16
 800be1a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800be1c:	4b30      	ldr	r3, [pc, #192]	; (800bee0 <tcp_timewait_input+0xcc>)
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	f003 0304 	and.w	r3, r3, #4
 800be24:	2b00      	cmp	r3, #0
 800be26:	d154      	bne.n	800bed2 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d106      	bne.n	800be3c <tcp_timewait_input+0x28>
 800be2e:	4b2d      	ldr	r3, [pc, #180]	; (800bee4 <tcp_timewait_input+0xd0>)
 800be30:	f240 22ee 	movw	r2, #750	; 0x2ee
 800be34:	492c      	ldr	r1, [pc, #176]	; (800bee8 <tcp_timewait_input+0xd4>)
 800be36:	482d      	ldr	r0, [pc, #180]	; (800beec <tcp_timewait_input+0xd8>)
 800be38:	f006 fe88 	bl	8012b4c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800be3c:	4b28      	ldr	r3, [pc, #160]	; (800bee0 <tcp_timewait_input+0xcc>)
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	f003 0302 	and.w	r3, r3, #2
 800be44:	2b00      	cmp	r3, #0
 800be46:	d02a      	beq.n	800be9e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800be48:	4b29      	ldr	r3, [pc, #164]	; (800bef0 <tcp_timewait_input+0xdc>)
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	2b00      	cmp	r3, #0
 800be54:	db2d      	blt.n	800beb2 <tcp_timewait_input+0x9e>
 800be56:	4b26      	ldr	r3, [pc, #152]	; (800bef0 <tcp_timewait_input+0xdc>)
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5e:	6879      	ldr	r1, [r7, #4]
 800be60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800be62:	440b      	add	r3, r1
 800be64:	1ad3      	subs	r3, r2, r3
 800be66:	2b00      	cmp	r3, #0
 800be68:	dc23      	bgt.n	800beb2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be6a:	4b22      	ldr	r3, [pc, #136]	; (800bef4 <tcp_timewait_input+0xe0>)
 800be6c:	6819      	ldr	r1, [r3, #0]
 800be6e:	4b22      	ldr	r3, [pc, #136]	; (800bef8 <tcp_timewait_input+0xe4>)
 800be70:	881b      	ldrh	r3, [r3, #0]
 800be72:	461a      	mov	r2, r3
 800be74:	4b1e      	ldr	r3, [pc, #120]	; (800bef0 <tcp_timewait_input+0xdc>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be7a:	4b20      	ldr	r3, [pc, #128]	; (800befc <tcp_timewait_input+0xe8>)
 800be7c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be7e:	885b      	ldrh	r3, [r3, #2]
 800be80:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be82:	4a1e      	ldr	r2, [pc, #120]	; (800befc <tcp_timewait_input+0xe8>)
 800be84:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be86:	8812      	ldrh	r2, [r2, #0]
 800be88:	b292      	uxth	r2, r2
 800be8a:	9202      	str	r2, [sp, #8]
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	4b1c      	ldr	r3, [pc, #112]	; (800bf00 <tcp_timewait_input+0xec>)
 800be90:	9300      	str	r3, [sp, #0]
 800be92:	4b1c      	ldr	r3, [pc, #112]	; (800bf04 <tcp_timewait_input+0xf0>)
 800be94:	4602      	mov	r2, r0
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f003 fada 	bl	800f450 <tcp_rst>
      return;
 800be9c:	e01c      	b.n	800bed8 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800be9e:	4b10      	ldr	r3, [pc, #64]	; (800bee0 <tcp_timewait_input+0xcc>)
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	f003 0301 	and.w	r3, r3, #1
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d003      	beq.n	800beb2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800beaa:	4b17      	ldr	r3, [pc, #92]	; (800bf08 <tcp_timewait_input+0xf4>)
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800beb2:	4b11      	ldr	r3, [pc, #68]	; (800bef8 <tcp_timewait_input+0xe4>)
 800beb4:	881b      	ldrh	r3, [r3, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00d      	beq.n	800bed6 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	8b5b      	ldrh	r3, [r3, #26]
 800bebe:	f043 0302 	orr.w	r3, r3, #2
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f002 fcfd 	bl	800e8c8 <tcp_output>
  }
  return;
 800bece:	bf00      	nop
 800bed0:	e001      	b.n	800bed6 <tcp_timewait_input+0xc2>
    return;
 800bed2:	bf00      	nop
 800bed4:	e000      	b.n	800bed8 <tcp_timewait_input+0xc4>
  return;
 800bed6:	bf00      	nop
}
 800bed8:	3708      	adds	r7, #8
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	20000170 	.word	0x20000170
 800bee4:	08014d18 	.word	0x08014d18
 800bee8:	08014f30 	.word	0x08014f30
 800beec:	08014d64 	.word	0x08014d64
 800bef0:	20000164 	.word	0x20000164
 800bef4:	20000168 	.word	0x20000168
 800bef8:	2000016e 	.word	0x2000016e
 800befc:	20000154 	.word	0x20000154
 800bf00:	20008790 	.word	0x20008790
 800bf04:	20008794 	.word	0x20008794
 800bf08:	2000bcc8 	.word	0x2000bcc8

0800bf0c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800bf0c:	b590      	push	{r4, r7, lr}
 800bf0e:	b08d      	sub	sp, #52	; 0x34
 800bf10:	af04      	add	r7, sp, #16
 800bf12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800bf14:	2300      	movs	r3, #0
 800bf16:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d106      	bne.n	800bf30 <tcp_process+0x24>
 800bf22:	4ba5      	ldr	r3, [pc, #660]	; (800c1b8 <tcp_process+0x2ac>)
 800bf24:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bf28:	49a4      	ldr	r1, [pc, #656]	; (800c1bc <tcp_process+0x2b0>)
 800bf2a:	48a5      	ldr	r0, [pc, #660]	; (800c1c0 <tcp_process+0x2b4>)
 800bf2c:	f006 fe0e 	bl	8012b4c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800bf30:	4ba4      	ldr	r3, [pc, #656]	; (800c1c4 <tcp_process+0x2b8>)
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	f003 0304 	and.w	r3, r3, #4
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d04e      	beq.n	800bfda <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	7d1b      	ldrb	r3, [r3, #20]
 800bf40:	2b02      	cmp	r3, #2
 800bf42:	d108      	bne.n	800bf56 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf48:	4b9f      	ldr	r3, [pc, #636]	; (800c1c8 <tcp_process+0x2bc>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d123      	bne.n	800bf98 <tcp_process+0x8c>
        acceptable = 1;
 800bf50:	2301      	movs	r3, #1
 800bf52:	76fb      	strb	r3, [r7, #27]
 800bf54:	e020      	b.n	800bf98 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf5a:	4b9c      	ldr	r3, [pc, #624]	; (800c1cc <tcp_process+0x2c0>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d102      	bne.n	800bf68 <tcp_process+0x5c>
        acceptable = 1;
 800bf62:	2301      	movs	r3, #1
 800bf64:	76fb      	strb	r3, [r7, #27]
 800bf66:	e017      	b.n	800bf98 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bf68:	4b98      	ldr	r3, [pc, #608]	; (800c1cc <tcp_process+0x2c0>)
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	db10      	blt.n	800bf98 <tcp_process+0x8c>
 800bf76:	4b95      	ldr	r3, [pc, #596]	; (800c1cc <tcp_process+0x2c0>)
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7e:	6879      	ldr	r1, [r7, #4]
 800bf80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bf82:	440b      	add	r3, r1
 800bf84:	1ad3      	subs	r3, r2, r3
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	dc06      	bgt.n	800bf98 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	8b5b      	ldrh	r3, [r3, #26]
 800bf8e:	f043 0302 	orr.w	r3, r3, #2
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800bf98:	7efb      	ldrb	r3, [r7, #27]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d01b      	beq.n	800bfd6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	7d1b      	ldrb	r3, [r3, #20]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d106      	bne.n	800bfb4 <tcp_process+0xa8>
 800bfa6:	4b84      	ldr	r3, [pc, #528]	; (800c1b8 <tcp_process+0x2ac>)
 800bfa8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800bfac:	4988      	ldr	r1, [pc, #544]	; (800c1d0 <tcp_process+0x2c4>)
 800bfae:	4884      	ldr	r0, [pc, #528]	; (800c1c0 <tcp_process+0x2b4>)
 800bfb0:	f006 fdcc 	bl	8012b4c <iprintf>
      recv_flags |= TF_RESET;
 800bfb4:	4b87      	ldr	r3, [pc, #540]	; (800c1d4 <tcp_process+0x2c8>)
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	f043 0308 	orr.w	r3, r3, #8
 800bfbc:	b2da      	uxtb	r2, r3
 800bfbe:	4b85      	ldr	r3, [pc, #532]	; (800c1d4 <tcp_process+0x2c8>)
 800bfc0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	8b5b      	ldrh	r3, [r3, #26]
 800bfc6:	f023 0301 	bic.w	r3, r3, #1
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800bfd0:	f06f 030d 	mvn.w	r3, #13
 800bfd4:	e37a      	b.n	800c6cc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	e378      	b.n	800c6cc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bfda:	4b7a      	ldr	r3, [pc, #488]	; (800c1c4 <tcp_process+0x2b8>)
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	f003 0302 	and.w	r3, r3, #2
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d010      	beq.n	800c008 <tcp_process+0xfc>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	7d1b      	ldrb	r3, [r3, #20]
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	d00c      	beq.n	800c008 <tcp_process+0xfc>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	7d1b      	ldrb	r3, [r3, #20]
 800bff2:	2b03      	cmp	r3, #3
 800bff4:	d008      	beq.n	800c008 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	8b5b      	ldrh	r3, [r3, #26]
 800bffa:	f043 0302 	orr.w	r3, r3, #2
 800bffe:	b29a      	uxth	r2, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c004:	2300      	movs	r3, #0
 800c006:	e361      	b.n	800c6cc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	8b5b      	ldrh	r3, [r3, #26]
 800c00c:	f003 0310 	and.w	r3, r3, #16
 800c010:	2b00      	cmp	r3, #0
 800c012:	d103      	bne.n	800c01c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c014:	4b70      	ldr	r3, [pc, #448]	; (800c1d8 <tcp_process+0x2cc>)
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f001 fc2d 	bl	800d88c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	7d1b      	ldrb	r3, [r3, #20]
 800c036:	3b02      	subs	r3, #2
 800c038:	2b07      	cmp	r3, #7
 800c03a:	f200 8337 	bhi.w	800c6ac <tcp_process+0x7a0>
 800c03e:	a201      	add	r2, pc, #4	; (adr r2, 800c044 <tcp_process+0x138>)
 800c040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c044:	0800c065 	.word	0x0800c065
 800c048:	0800c295 	.word	0x0800c295
 800c04c:	0800c40d 	.word	0x0800c40d
 800c050:	0800c437 	.word	0x0800c437
 800c054:	0800c55b 	.word	0x0800c55b
 800c058:	0800c40d 	.word	0x0800c40d
 800c05c:	0800c5e7 	.word	0x0800c5e7
 800c060:	0800c677 	.word	0x0800c677
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c064:	4b57      	ldr	r3, [pc, #348]	; (800c1c4 <tcp_process+0x2b8>)
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	f003 0310 	and.w	r3, r3, #16
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f000 80e4 	beq.w	800c23a <tcp_process+0x32e>
 800c072:	4b54      	ldr	r3, [pc, #336]	; (800c1c4 <tcp_process+0x2b8>)
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	f003 0302 	and.w	r3, r3, #2
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	f000 80dd 	beq.w	800c23a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c084:	1c5a      	adds	r2, r3, #1
 800c086:	4b50      	ldr	r3, [pc, #320]	; (800c1c8 <tcp_process+0x2bc>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	f040 80d5 	bne.w	800c23a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c090:	4b4e      	ldr	r3, [pc, #312]	; (800c1cc <tcp_process+0x2c0>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	1c5a      	adds	r2, r3, #1
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c0a2:	4b49      	ldr	r3, [pc, #292]	; (800c1c8 <tcp_process+0x2bc>)
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c0aa:	4b4c      	ldr	r3, [pc, #304]	; (800c1dc <tcp_process+0x2d0>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	89db      	ldrh	r3, [r3, #14]
 800c0b0:	b29a      	uxth	r2, r3
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c0c4:	4b41      	ldr	r3, [pc, #260]	; (800c1cc <tcp_process+0x2c0>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	1e5a      	subs	r2, r3, #1
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2204      	movs	r2, #4
 800c0d2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3304      	adds	r3, #4
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f005 fb0f 	bl	8011700 <ip4_route>
 800c0e2:	4601      	mov	r1, r0
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	3304      	adds	r3, #4
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	f7ff f88e 	bl	800b20c <tcp_eff_send_mss_netif>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0fc:	009a      	lsls	r2, r3, #2
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c102:	005b      	lsls	r3, r3, #1
 800c104:	f241 111c 	movw	r1, #4380	; 0x111c
 800c108:	428b      	cmp	r3, r1
 800c10a:	bf38      	it	cc
 800c10c:	460b      	movcc	r3, r1
 800c10e:	429a      	cmp	r2, r3
 800c110:	d204      	bcs.n	800c11c <tcp_process+0x210>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	b29b      	uxth	r3, r3
 800c11a:	e00d      	b.n	800c138 <tcp_process+0x22c>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c120:	005b      	lsls	r3, r3, #1
 800c122:	f241 121c 	movw	r2, #4380	; 0x111c
 800c126:	4293      	cmp	r3, r2
 800c128:	d904      	bls.n	800c134 <tcp_process+0x228>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c12e:	005b      	lsls	r3, r3, #1
 800c130:	b29b      	uxth	r3, r3
 800c132:	e001      	b.n	800c138 <tcp_process+0x22c>
 800c134:	f241 131c 	movw	r3, #4380	; 0x111c
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c144:	2b00      	cmp	r3, #0
 800c146:	d106      	bne.n	800c156 <tcp_process+0x24a>
 800c148:	4b1b      	ldr	r3, [pc, #108]	; (800c1b8 <tcp_process+0x2ac>)
 800c14a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c14e:	4924      	ldr	r1, [pc, #144]	; (800c1e0 <tcp_process+0x2d4>)
 800c150:	481b      	ldr	r0, [pc, #108]	; (800c1c0 <tcp_process+0x2b4>)
 800c152:	f006 fcfb 	bl	8012b4c <iprintf>
        --pcb->snd_queuelen;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c15c:	3b01      	subs	r3, #1
 800c15e:	b29a      	uxth	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c16a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d111      	bne.n	800c196 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c176:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d106      	bne.n	800c18c <tcp_process+0x280>
 800c17e:	4b0e      	ldr	r3, [pc, #56]	; (800c1b8 <tcp_process+0x2ac>)
 800c180:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c184:	4917      	ldr	r1, [pc, #92]	; (800c1e4 <tcp_process+0x2d8>)
 800c186:	480e      	ldr	r0, [pc, #56]	; (800c1c0 <tcp_process+0x2b4>)
 800c188:	f006 fce0 	bl	8012b4c <iprintf>
          pcb->unsent = rseg->next;
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	66da      	str	r2, [r3, #108]	; 0x6c
 800c194:	e003      	b.n	800c19e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c19e:	69f8      	ldr	r0, [r7, #28]
 800c1a0:	f7fe fc58 	bl	800aa54 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d11d      	bne.n	800c1e8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1b2:	861a      	strh	r2, [r3, #48]	; 0x30
 800c1b4:	e01f      	b.n	800c1f6 <tcp_process+0x2ea>
 800c1b6:	bf00      	nop
 800c1b8:	08014d18 	.word	0x08014d18
 800c1bc:	08014f50 	.word	0x08014f50
 800c1c0:	08014d64 	.word	0x08014d64
 800c1c4:	20000170 	.word	0x20000170
 800c1c8:	20000168 	.word	0x20000168
 800c1cc:	20000164 	.word	0x20000164
 800c1d0:	08014f6c 	.word	0x08014f6c
 800c1d4:	20000171 	.word	0x20000171
 800c1d8:	2000bcc8 	.word	0x2000bcc8
 800c1dc:	20000154 	.word	0x20000154
 800c1e0:	08014f8c 	.word	0x08014f8c
 800c1e4:	08014fa4 	.word	0x08014fa4
        } else {
          pcb->rtime = 0;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00a      	beq.n	800c216 <tcp_process+0x30a>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	6910      	ldr	r0, [r2, #16]
 800c20a:	2200      	movs	r2, #0
 800c20c:	6879      	ldr	r1, [r7, #4]
 800c20e:	4798      	blx	r3
 800c210:	4603      	mov	r3, r0
 800c212:	76bb      	strb	r3, [r7, #26]
 800c214:	e001      	b.n	800c21a <tcp_process+0x30e>
 800c216:	2300      	movs	r3, #0
 800c218:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c21a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c21e:	f113 0f0d 	cmn.w	r3, #13
 800c222:	d102      	bne.n	800c22a <tcp_process+0x31e>
          return ERR_ABRT;
 800c224:	f06f 030c 	mvn.w	r3, #12
 800c228:	e250      	b.n	800c6cc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	8b5b      	ldrh	r3, [r3, #26]
 800c22e:	f043 0302 	orr.w	r3, r3, #2
 800c232:	b29a      	uxth	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c238:	e23a      	b.n	800c6b0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c23a:	4b9d      	ldr	r3, [pc, #628]	; (800c4b0 <tcp_process+0x5a4>)
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	f003 0310 	and.w	r3, r3, #16
 800c242:	2b00      	cmp	r3, #0
 800c244:	f000 8234 	beq.w	800c6b0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c248:	4b9a      	ldr	r3, [pc, #616]	; (800c4b4 <tcp_process+0x5a8>)
 800c24a:	6819      	ldr	r1, [r3, #0]
 800c24c:	4b9a      	ldr	r3, [pc, #616]	; (800c4b8 <tcp_process+0x5ac>)
 800c24e:	881b      	ldrh	r3, [r3, #0]
 800c250:	461a      	mov	r2, r3
 800c252:	4b9a      	ldr	r3, [pc, #616]	; (800c4bc <tcp_process+0x5b0>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c258:	4b99      	ldr	r3, [pc, #612]	; (800c4c0 <tcp_process+0x5b4>)
 800c25a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c25c:	885b      	ldrh	r3, [r3, #2]
 800c25e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c260:	4a97      	ldr	r2, [pc, #604]	; (800c4c0 <tcp_process+0x5b4>)
 800c262:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c264:	8812      	ldrh	r2, [r2, #0]
 800c266:	b292      	uxth	r2, r2
 800c268:	9202      	str	r2, [sp, #8]
 800c26a:	9301      	str	r3, [sp, #4]
 800c26c:	4b95      	ldr	r3, [pc, #596]	; (800c4c4 <tcp_process+0x5b8>)
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	4b95      	ldr	r3, [pc, #596]	; (800c4c8 <tcp_process+0x5bc>)
 800c272:	4602      	mov	r2, r0
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f003 f8eb 	bl	800f450 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c280:	2b05      	cmp	r3, #5
 800c282:	f200 8215 	bhi.w	800c6b0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f002 feab 	bl	800efe8 <tcp_rexmit_rto>
      break;
 800c292:	e20d      	b.n	800c6b0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c294:	4b86      	ldr	r3, [pc, #536]	; (800c4b0 <tcp_process+0x5a4>)
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	f003 0310 	and.w	r3, r3, #16
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	f000 80a1 	beq.w	800c3e4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c2a2:	4b84      	ldr	r3, [pc, #528]	; (800c4b4 <tcp_process+0x5a8>)
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2aa:	1ad3      	subs	r3, r2, r3
 800c2ac:	3b01      	subs	r3, #1
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	db7e      	blt.n	800c3b0 <tcp_process+0x4a4>
 800c2b2:	4b80      	ldr	r3, [pc, #512]	; (800c4b4 <tcp_process+0x5a8>)
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2ba:	1ad3      	subs	r3, r2, r3
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	dc77      	bgt.n	800c3b0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2204      	movs	r2, #4
 800c2c4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d102      	bne.n	800c2d4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c2ce:	23fa      	movs	r3, #250	; 0xfa
 800c2d0:	76bb      	strb	r3, [r7, #26]
 800c2d2:	e01d      	b.n	800c310 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2d8:	699b      	ldr	r3, [r3, #24]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d106      	bne.n	800c2ec <tcp_process+0x3e0>
 800c2de:	4b7b      	ldr	r3, [pc, #492]	; (800c4cc <tcp_process+0x5c0>)
 800c2e0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c2e4:	497a      	ldr	r1, [pc, #488]	; (800c4d0 <tcp_process+0x5c4>)
 800c2e6:	487b      	ldr	r0, [pc, #492]	; (800c4d4 <tcp_process+0x5c8>)
 800c2e8:	f006 fc30 	bl	8012b4c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2f0:	699b      	ldr	r3, [r3, #24]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00a      	beq.n	800c30c <tcp_process+0x400>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2fa:	699b      	ldr	r3, [r3, #24]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	6910      	ldr	r0, [r2, #16]
 800c300:	2200      	movs	r2, #0
 800c302:	6879      	ldr	r1, [r7, #4]
 800c304:	4798      	blx	r3
 800c306:	4603      	mov	r3, r0
 800c308:	76bb      	strb	r3, [r7, #26]
 800c30a:	e001      	b.n	800c310 <tcp_process+0x404>
 800c30c:	23f0      	movs	r3, #240	; 0xf0
 800c30e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c310:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d00a      	beq.n	800c32e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c318:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c31c:	f113 0f0d 	cmn.w	r3, #13
 800c320:	d002      	beq.n	800c328 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f7fd fcf4 	bl	8009d10 <tcp_abort>
            }
            return ERR_ABRT;
 800c328:	f06f 030c 	mvn.w	r3, #12
 800c32c:	e1ce      	b.n	800c6cc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 fae0 	bl	800c8f4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c334:	4b68      	ldr	r3, [pc, #416]	; (800c4d8 <tcp_process+0x5cc>)
 800c336:	881b      	ldrh	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d005      	beq.n	800c348 <tcp_process+0x43c>
            recv_acked--;
 800c33c:	4b66      	ldr	r3, [pc, #408]	; (800c4d8 <tcp_process+0x5cc>)
 800c33e:	881b      	ldrh	r3, [r3, #0]
 800c340:	3b01      	subs	r3, #1
 800c342:	b29a      	uxth	r2, r3
 800c344:	4b64      	ldr	r3, [pc, #400]	; (800c4d8 <tcp_process+0x5cc>)
 800c346:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c34c:	009a      	lsls	r2, r3, #2
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c352:	005b      	lsls	r3, r3, #1
 800c354:	f241 111c 	movw	r1, #4380	; 0x111c
 800c358:	428b      	cmp	r3, r1
 800c35a:	bf38      	it	cc
 800c35c:	460b      	movcc	r3, r1
 800c35e:	429a      	cmp	r2, r3
 800c360:	d204      	bcs.n	800c36c <tcp_process+0x460>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	b29b      	uxth	r3, r3
 800c36a:	e00d      	b.n	800c388 <tcp_process+0x47c>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c370:	005b      	lsls	r3, r3, #1
 800c372:	f241 121c 	movw	r2, #4380	; 0x111c
 800c376:	4293      	cmp	r3, r2
 800c378:	d904      	bls.n	800c384 <tcp_process+0x478>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c37e:	005b      	lsls	r3, r3, #1
 800c380:	b29b      	uxth	r3, r3
 800c382:	e001      	b.n	800c388 <tcp_process+0x47c>
 800c384:	f241 131c 	movw	r3, #4380	; 0x111c
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c38e:	4b53      	ldr	r3, [pc, #332]	; (800c4dc <tcp_process+0x5d0>)
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	f003 0320 	and.w	r3, r3, #32
 800c396:	2b00      	cmp	r3, #0
 800c398:	d037      	beq.n	800c40a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	8b5b      	ldrh	r3, [r3, #26]
 800c39e:	f043 0302 	orr.w	r3, r3, #2
 800c3a2:	b29a      	uxth	r2, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2207      	movs	r2, #7
 800c3ac:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c3ae:	e02c      	b.n	800c40a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3b0:	4b40      	ldr	r3, [pc, #256]	; (800c4b4 <tcp_process+0x5a8>)
 800c3b2:	6819      	ldr	r1, [r3, #0]
 800c3b4:	4b40      	ldr	r3, [pc, #256]	; (800c4b8 <tcp_process+0x5ac>)
 800c3b6:	881b      	ldrh	r3, [r3, #0]
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	4b40      	ldr	r3, [pc, #256]	; (800c4bc <tcp_process+0x5b0>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c3c0:	4b3f      	ldr	r3, [pc, #252]	; (800c4c0 <tcp_process+0x5b4>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3c4:	885b      	ldrh	r3, [r3, #2]
 800c3c6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c3c8:	4a3d      	ldr	r2, [pc, #244]	; (800c4c0 <tcp_process+0x5b4>)
 800c3ca:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3cc:	8812      	ldrh	r2, [r2, #0]
 800c3ce:	b292      	uxth	r2, r2
 800c3d0:	9202      	str	r2, [sp, #8]
 800c3d2:	9301      	str	r3, [sp, #4]
 800c3d4:	4b3b      	ldr	r3, [pc, #236]	; (800c4c4 <tcp_process+0x5b8>)
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	4b3b      	ldr	r3, [pc, #236]	; (800c4c8 <tcp_process+0x5bc>)
 800c3da:	4602      	mov	r2, r0
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f003 f837 	bl	800f450 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c3e2:	e167      	b.n	800c6b4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c3e4:	4b32      	ldr	r3, [pc, #200]	; (800c4b0 <tcp_process+0x5a4>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	f003 0302 	and.w	r3, r3, #2
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f000 8161 	beq.w	800c6b4 <tcp_process+0x7a8>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f6:	1e5a      	subs	r2, r3, #1
 800c3f8:	4b30      	ldr	r3, [pc, #192]	; (800c4bc <tcp_process+0x5b0>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	f040 8159 	bne.w	800c6b4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f002 fe12 	bl	800f02c <tcp_rexmit>
      break;
 800c408:	e154      	b.n	800c6b4 <tcp_process+0x7a8>
 800c40a:	e153      	b.n	800c6b4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 fa71 	bl	800c8f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c412:	4b32      	ldr	r3, [pc, #200]	; (800c4dc <tcp_process+0x5d0>)
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	f003 0320 	and.w	r3, r3, #32
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f000 814c 	beq.w	800c6b8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	8b5b      	ldrh	r3, [r3, #26]
 800c424:	f043 0302 	orr.w	r3, r3, #2
 800c428:	b29a      	uxth	r2, r3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2207      	movs	r2, #7
 800c432:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c434:	e140      	b.n	800c6b8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 fa5c 	bl	800c8f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c43c:	4b27      	ldr	r3, [pc, #156]	; (800c4dc <tcp_process+0x5d0>)
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	f003 0320 	and.w	r3, r3, #32
 800c444:	2b00      	cmp	r3, #0
 800c446:	d071      	beq.n	800c52c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c448:	4b19      	ldr	r3, [pc, #100]	; (800c4b0 <tcp_process+0x5a4>)
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	f003 0310 	and.w	r3, r3, #16
 800c450:	2b00      	cmp	r3, #0
 800c452:	d060      	beq.n	800c516 <tcp_process+0x60a>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c458:	4b16      	ldr	r3, [pc, #88]	; (800c4b4 <tcp_process+0x5a8>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d15a      	bne.n	800c516 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c464:	2b00      	cmp	r3, #0
 800c466:	d156      	bne.n	800c516 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	8b5b      	ldrh	r3, [r3, #26]
 800c46c:	f043 0302 	orr.w	r3, r3, #2
 800c470:	b29a      	uxth	r2, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f7fe fdbe 	bl	800aff8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c47c:	4b18      	ldr	r3, [pc, #96]	; (800c4e0 <tcp_process+0x5d4>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	429a      	cmp	r2, r3
 800c484:	d105      	bne.n	800c492 <tcp_process+0x586>
 800c486:	4b16      	ldr	r3, [pc, #88]	; (800c4e0 <tcp_process+0x5d4>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	4a14      	ldr	r2, [pc, #80]	; (800c4e0 <tcp_process+0x5d4>)
 800c48e:	6013      	str	r3, [r2, #0]
 800c490:	e02e      	b.n	800c4f0 <tcp_process+0x5e4>
 800c492:	4b13      	ldr	r3, [pc, #76]	; (800c4e0 <tcp_process+0x5d4>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	617b      	str	r3, [r7, #20]
 800c498:	e027      	b.n	800c4ea <tcp_process+0x5de>
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	68db      	ldr	r3, [r3, #12]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d11f      	bne.n	800c4e4 <tcp_process+0x5d8>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	68da      	ldr	r2, [r3, #12]
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	60da      	str	r2, [r3, #12]
 800c4ac:	e020      	b.n	800c4f0 <tcp_process+0x5e4>
 800c4ae:	bf00      	nop
 800c4b0:	20000170 	.word	0x20000170
 800c4b4:	20000168 	.word	0x20000168
 800c4b8:	2000016e 	.word	0x2000016e
 800c4bc:	20000164 	.word	0x20000164
 800c4c0:	20000154 	.word	0x20000154
 800c4c4:	20008790 	.word	0x20008790
 800c4c8:	20008794 	.word	0x20008794
 800c4cc:	08014d18 	.word	0x08014d18
 800c4d0:	08014fb8 	.word	0x08014fb8
 800c4d4:	08014d64 	.word	0x08014d64
 800c4d8:	2000016c 	.word	0x2000016c
 800c4dc:	20000171 	.word	0x20000171
 800c4e0:	2000bcc4 	.word	0x2000bcc4
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	617b      	str	r3, [r7, #20]
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d1d4      	bne.n	800c49a <tcp_process+0x58e>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	60da      	str	r2, [r3, #12]
 800c4f6:	4b77      	ldr	r3, [pc, #476]	; (800c6d4 <tcp_process+0x7c8>)
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	220a      	movs	r2, #10
 800c500:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c502:	4b75      	ldr	r3, [pc, #468]	; (800c6d8 <tcp_process+0x7cc>)
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	60da      	str	r2, [r3, #12]
 800c50a:	4a73      	ldr	r2, [pc, #460]	; (800c6d8 <tcp_process+0x7cc>)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6013      	str	r3, [r2, #0]
 800c510:	f003 f960 	bl	800f7d4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c514:	e0d2      	b.n	800c6bc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	8b5b      	ldrh	r3, [r3, #26]
 800c51a:	f043 0302 	orr.w	r3, r3, #2
 800c51e:	b29a      	uxth	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2208      	movs	r2, #8
 800c528:	751a      	strb	r2, [r3, #20]
      break;
 800c52a:	e0c7      	b.n	800c6bc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c52c:	4b6b      	ldr	r3, [pc, #428]	; (800c6dc <tcp_process+0x7d0>)
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	f003 0310 	and.w	r3, r3, #16
 800c534:	2b00      	cmp	r3, #0
 800c536:	f000 80c1 	beq.w	800c6bc <tcp_process+0x7b0>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c53e:	4b68      	ldr	r3, [pc, #416]	; (800c6e0 <tcp_process+0x7d4>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	429a      	cmp	r2, r3
 800c544:	f040 80ba 	bne.w	800c6bc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	f040 80b5 	bne.w	800c6bc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2206      	movs	r2, #6
 800c556:	751a      	strb	r2, [r3, #20]
      break;
 800c558:	e0b0      	b.n	800c6bc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f9ca 	bl	800c8f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c560:	4b60      	ldr	r3, [pc, #384]	; (800c6e4 <tcp_process+0x7d8>)
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	f003 0320 	and.w	r3, r3, #32
 800c568:	2b00      	cmp	r3, #0
 800c56a:	f000 80a9 	beq.w	800c6c0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	8b5b      	ldrh	r3, [r3, #26]
 800c572:	f043 0302 	orr.w	r3, r3, #2
 800c576:	b29a      	uxth	r2, r3
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7fe fd3b 	bl	800aff8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c582:	4b59      	ldr	r3, [pc, #356]	; (800c6e8 <tcp_process+0x7dc>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d105      	bne.n	800c598 <tcp_process+0x68c>
 800c58c:	4b56      	ldr	r3, [pc, #344]	; (800c6e8 <tcp_process+0x7dc>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	4a55      	ldr	r2, [pc, #340]	; (800c6e8 <tcp_process+0x7dc>)
 800c594:	6013      	str	r3, [r2, #0]
 800c596:	e013      	b.n	800c5c0 <tcp_process+0x6b4>
 800c598:	4b53      	ldr	r3, [pc, #332]	; (800c6e8 <tcp_process+0x7dc>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	613b      	str	r3, [r7, #16]
 800c59e:	e00c      	b.n	800c5ba <tcp_process+0x6ae>
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	68db      	ldr	r3, [r3, #12]
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d104      	bne.n	800c5b4 <tcp_process+0x6a8>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	68da      	ldr	r2, [r3, #12]
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	60da      	str	r2, [r3, #12]
 800c5b2:	e005      	b.n	800c5c0 <tcp_process+0x6b4>
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	613b      	str	r3, [r7, #16]
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1ef      	bne.n	800c5a0 <tcp_process+0x694>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	60da      	str	r2, [r3, #12]
 800c5c6:	4b43      	ldr	r3, [pc, #268]	; (800c6d4 <tcp_process+0x7c8>)
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	220a      	movs	r2, #10
 800c5d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c5d2:	4b41      	ldr	r3, [pc, #260]	; (800c6d8 <tcp_process+0x7cc>)
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	60da      	str	r2, [r3, #12]
 800c5da:	4a3f      	ldr	r2, [pc, #252]	; (800c6d8 <tcp_process+0x7cc>)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6013      	str	r3, [r2, #0]
 800c5e0:	f003 f8f8 	bl	800f7d4 <tcp_timer_needed>
      }
      break;
 800c5e4:	e06c      	b.n	800c6c0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f984 	bl	800c8f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c5ec:	4b3b      	ldr	r3, [pc, #236]	; (800c6dc <tcp_process+0x7d0>)
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	f003 0310 	and.w	r3, r3, #16
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d065      	beq.n	800c6c4 <tcp_process+0x7b8>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5fc:	4b38      	ldr	r3, [pc, #224]	; (800c6e0 <tcp_process+0x7d4>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	429a      	cmp	r2, r3
 800c602:	d15f      	bne.n	800c6c4 <tcp_process+0x7b8>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d15b      	bne.n	800c6c4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f7fe fcf3 	bl	800aff8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c612:	4b35      	ldr	r3, [pc, #212]	; (800c6e8 <tcp_process+0x7dc>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d105      	bne.n	800c628 <tcp_process+0x71c>
 800c61c:	4b32      	ldr	r3, [pc, #200]	; (800c6e8 <tcp_process+0x7dc>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	4a31      	ldr	r2, [pc, #196]	; (800c6e8 <tcp_process+0x7dc>)
 800c624:	6013      	str	r3, [r2, #0]
 800c626:	e013      	b.n	800c650 <tcp_process+0x744>
 800c628:	4b2f      	ldr	r3, [pc, #188]	; (800c6e8 <tcp_process+0x7dc>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	60fb      	str	r3, [r7, #12]
 800c62e:	e00c      	b.n	800c64a <tcp_process+0x73e>
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	429a      	cmp	r2, r3
 800c638:	d104      	bne.n	800c644 <tcp_process+0x738>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	68da      	ldr	r2, [r3, #12]
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	60da      	str	r2, [r3, #12]
 800c642:	e005      	b.n	800c650 <tcp_process+0x744>
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	60fb      	str	r3, [r7, #12]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d1ef      	bne.n	800c630 <tcp_process+0x724>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2200      	movs	r2, #0
 800c654:	60da      	str	r2, [r3, #12]
 800c656:	4b1f      	ldr	r3, [pc, #124]	; (800c6d4 <tcp_process+0x7c8>)
 800c658:	2201      	movs	r2, #1
 800c65a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	220a      	movs	r2, #10
 800c660:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c662:	4b1d      	ldr	r3, [pc, #116]	; (800c6d8 <tcp_process+0x7cc>)
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	60da      	str	r2, [r3, #12]
 800c66a:	4a1b      	ldr	r2, [pc, #108]	; (800c6d8 <tcp_process+0x7cc>)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6013      	str	r3, [r2, #0]
 800c670:	f003 f8b0 	bl	800f7d4 <tcp_timer_needed>
      }
      break;
 800c674:	e026      	b.n	800c6c4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 f93c 	bl	800c8f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c67c:	4b17      	ldr	r3, [pc, #92]	; (800c6dc <tcp_process+0x7d0>)
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	f003 0310 	and.w	r3, r3, #16
 800c684:	2b00      	cmp	r3, #0
 800c686:	d01f      	beq.n	800c6c8 <tcp_process+0x7bc>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c68c:	4b14      	ldr	r3, [pc, #80]	; (800c6e0 <tcp_process+0x7d4>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	429a      	cmp	r2, r3
 800c692:	d119      	bne.n	800c6c8 <tcp_process+0x7bc>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d115      	bne.n	800c6c8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c69c:	4b11      	ldr	r3, [pc, #68]	; (800c6e4 <tcp_process+0x7d8>)
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	f043 0310 	orr.w	r3, r3, #16
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	4b0f      	ldr	r3, [pc, #60]	; (800c6e4 <tcp_process+0x7d8>)
 800c6a8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c6aa:	e00d      	b.n	800c6c8 <tcp_process+0x7bc>
    default:
      break;
 800c6ac:	bf00      	nop
 800c6ae:	e00c      	b.n	800c6ca <tcp_process+0x7be>
      break;
 800c6b0:	bf00      	nop
 800c6b2:	e00a      	b.n	800c6ca <tcp_process+0x7be>
      break;
 800c6b4:	bf00      	nop
 800c6b6:	e008      	b.n	800c6ca <tcp_process+0x7be>
      break;
 800c6b8:	bf00      	nop
 800c6ba:	e006      	b.n	800c6ca <tcp_process+0x7be>
      break;
 800c6bc:	bf00      	nop
 800c6be:	e004      	b.n	800c6ca <tcp_process+0x7be>
      break;
 800c6c0:	bf00      	nop
 800c6c2:	e002      	b.n	800c6ca <tcp_process+0x7be>
      break;
 800c6c4:	bf00      	nop
 800c6c6:	e000      	b.n	800c6ca <tcp_process+0x7be>
      break;
 800c6c8:	bf00      	nop
  }
  return ERR_OK;
 800c6ca:	2300      	movs	r3, #0
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3724      	adds	r7, #36	; 0x24
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd90      	pop	{r4, r7, pc}
 800c6d4:	2000bcc0 	.word	0x2000bcc0
 800c6d8:	2000bcd4 	.word	0x2000bcd4
 800c6dc:	20000170 	.word	0x20000170
 800c6e0:	20000168 	.word	0x20000168
 800c6e4:	20000171 	.word	0x20000171
 800c6e8:	2000bcc4 	.word	0x2000bcc4

0800c6ec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c6ec:	b590      	push	{r4, r7, lr}
 800c6ee:	b085      	sub	sp, #20
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d106      	bne.n	800c70a <tcp_oos_insert_segment+0x1e>
 800c6fc:	4b3b      	ldr	r3, [pc, #236]	; (800c7ec <tcp_oos_insert_segment+0x100>)
 800c6fe:	f240 421f 	movw	r2, #1055	; 0x41f
 800c702:	493b      	ldr	r1, [pc, #236]	; (800c7f0 <tcp_oos_insert_segment+0x104>)
 800c704:	483b      	ldr	r0, [pc, #236]	; (800c7f4 <tcp_oos_insert_segment+0x108>)
 800c706:	f006 fa21 	bl	8012b4c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	68db      	ldr	r3, [r3, #12]
 800c70e:	899b      	ldrh	r3, [r3, #12]
 800c710:	b29b      	uxth	r3, r3
 800c712:	4618      	mov	r0, r3
 800c714:	f7fb fabd 	bl	8007c92 <lwip_htons>
 800c718:	4603      	mov	r3, r0
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	f003 0301 	and.w	r3, r3, #1
 800c720:	2b00      	cmp	r3, #0
 800c722:	d028      	beq.n	800c776 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c724:	6838      	ldr	r0, [r7, #0]
 800c726:	f7fe f981 	bl	800aa2c <tcp_segs_free>
    next = NULL;
 800c72a:	2300      	movs	r3, #0
 800c72c:	603b      	str	r3, [r7, #0]
 800c72e:	e056      	b.n	800c7de <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	899b      	ldrh	r3, [r3, #12]
 800c736:	b29b      	uxth	r3, r3
 800c738:	4618      	mov	r0, r3
 800c73a:	f7fb faaa 	bl	8007c92 <lwip_htons>
 800c73e:	4603      	mov	r3, r0
 800c740:	b2db      	uxtb	r3, r3
 800c742:	f003 0301 	and.w	r3, r3, #1
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00d      	beq.n	800c766 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	899b      	ldrh	r3, [r3, #12]
 800c750:	b29c      	uxth	r4, r3
 800c752:	2001      	movs	r0, #1
 800c754:	f7fb fa9d 	bl	8007c92 <lwip_htons>
 800c758:	4603      	mov	r3, r0
 800c75a:	461a      	mov	r2, r3
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	4322      	orrs	r2, r4
 800c762:	b292      	uxth	r2, r2
 800c764:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	f7fe f96f 	bl	800aa54 <tcp_seg_free>
    while (next &&
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d00e      	beq.n	800c79a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	891b      	ldrh	r3, [r3, #8]
 800c780:	461a      	mov	r2, r3
 800c782:	4b1d      	ldr	r3, [pc, #116]	; (800c7f8 <tcp_oos_insert_segment+0x10c>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	441a      	add	r2, r3
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	6839      	ldr	r1, [r7, #0]
 800c790:	8909      	ldrh	r1, [r1, #8]
 800c792:	440b      	add	r3, r1
 800c794:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c796:	2b00      	cmp	r3, #0
 800c798:	daca      	bge.n	800c730 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d01e      	beq.n	800c7de <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	891b      	ldrh	r3, [r3, #8]
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	4b14      	ldr	r3, [pc, #80]	; (800c7f8 <tcp_oos_insert_segment+0x10c>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	441a      	add	r2, r3
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	68db      	ldr	r3, [r3, #12]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	dd12      	ble.n	800c7de <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	b29a      	uxth	r2, r3
 800c7c0:	4b0d      	ldr	r3, [pc, #52]	; (800c7f8 <tcp_oos_insert_segment+0x10c>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	1ad3      	subs	r3, r2, r3
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	685a      	ldr	r2, [r3, #4]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	891b      	ldrh	r3, [r3, #8]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	4610      	mov	r0, r2
 800c7da:	f7fc fb83 	bl	8008ee4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	683a      	ldr	r2, [r7, #0]
 800c7e2:	601a      	str	r2, [r3, #0]
}
 800c7e4:	bf00      	nop
 800c7e6:	3714      	adds	r7, #20
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd90      	pop	{r4, r7, pc}
 800c7ec:	08014d18 	.word	0x08014d18
 800c7f0:	08014fd8 	.word	0x08014fd8
 800c7f4:	08014d64 	.word	0x08014d64
 800c7f8:	20000164 	.word	0x20000164

0800c7fc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c7fc:	b5b0      	push	{r4, r5, r7, lr}
 800c7fe:	b086      	sub	sp, #24
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	607a      	str	r2, [r7, #4]
 800c808:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c80a:	e03e      	b.n	800c88a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7fc fd70 	bl	8009300 <pbuf_clen>
 800c820:	4603      	mov	r3, r0
 800c822:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c82a:	8a7a      	ldrh	r2, [r7, #18]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d906      	bls.n	800c83e <tcp_free_acked_segments+0x42>
 800c830:	4b2a      	ldr	r3, [pc, #168]	; (800c8dc <tcp_free_acked_segments+0xe0>)
 800c832:	f240 4257 	movw	r2, #1111	; 0x457
 800c836:	492a      	ldr	r1, [pc, #168]	; (800c8e0 <tcp_free_acked_segments+0xe4>)
 800c838:	482a      	ldr	r0, [pc, #168]	; (800c8e4 <tcp_free_acked_segments+0xe8>)
 800c83a:	f006 f987 	bl	8012b4c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c844:	8a7b      	ldrh	r3, [r7, #18]
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	b29a      	uxth	r2, r3
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	891a      	ldrh	r2, [r3, #8]
 800c854:	4b24      	ldr	r3, [pc, #144]	; (800c8e8 <tcp_free_acked_segments+0xec>)
 800c856:	881b      	ldrh	r3, [r3, #0]
 800c858:	4413      	add	r3, r2
 800c85a:	b29a      	uxth	r2, r3
 800c85c:	4b22      	ldr	r3, [pc, #136]	; (800c8e8 <tcp_free_acked_segments+0xec>)
 800c85e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c860:	6978      	ldr	r0, [r7, #20]
 800c862:	f7fe f8f7 	bl	800aa54 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00c      	beq.n	800c88a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d109      	bne.n	800c88a <tcp_free_acked_segments+0x8e>
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d106      	bne.n	800c88a <tcp_free_acked_segments+0x8e>
 800c87c:	4b17      	ldr	r3, [pc, #92]	; (800c8dc <tcp_free_acked_segments+0xe0>)
 800c87e:	f240 4262 	movw	r2, #1122	; 0x462
 800c882:	491a      	ldr	r1, [pc, #104]	; (800c8ec <tcp_free_acked_segments+0xf0>)
 800c884:	4817      	ldr	r0, [pc, #92]	; (800c8e4 <tcp_free_acked_segments+0xe8>)
 800c886:	f006 f961 	bl	8012b4c <iprintf>
  while (seg_list != NULL &&
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d020      	beq.n	800c8d2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	4618      	mov	r0, r3
 800c898:	f7fb fa10 	bl	8007cbc <lwip_htonl>
 800c89c:	4604      	mov	r4, r0
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	891b      	ldrh	r3, [r3, #8]
 800c8a2:	461d      	mov	r5, r3
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	899b      	ldrh	r3, [r3, #12]
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fb f9f0 	bl	8007c92 <lwip_htons>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	f003 0303 	and.w	r3, r3, #3
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d001      	beq.n	800c8c2 <tcp_free_acked_segments+0xc6>
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e000      	b.n	800c8c4 <tcp_free_acked_segments+0xc8>
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	442b      	add	r3, r5
 800c8c6:	18e2      	adds	r2, r4, r3
 800c8c8:	4b09      	ldr	r3, [pc, #36]	; (800c8f0 <tcp_free_acked_segments+0xf4>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	dd9c      	ble.n	800c80c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c8d2:	68bb      	ldr	r3, [r7, #8]
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3718      	adds	r7, #24
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bdb0      	pop	{r4, r5, r7, pc}
 800c8dc:	08014d18 	.word	0x08014d18
 800c8e0:	08015000 	.word	0x08015000
 800c8e4:	08014d64 	.word	0x08014d64
 800c8e8:	2000016c 	.word	0x2000016c
 800c8ec:	08015028 	.word	0x08015028
 800c8f0:	20000168 	.word	0x20000168

0800c8f4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c8f4:	b5b0      	push	{r4, r5, r7, lr}
 800c8f6:	b094      	sub	sp, #80	; 0x50
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d106      	bne.n	800c914 <tcp_receive+0x20>
 800c906:	4ba6      	ldr	r3, [pc, #664]	; (800cba0 <tcp_receive+0x2ac>)
 800c908:	f240 427b 	movw	r2, #1147	; 0x47b
 800c90c:	49a5      	ldr	r1, [pc, #660]	; (800cba4 <tcp_receive+0x2b0>)
 800c90e:	48a6      	ldr	r0, [pc, #664]	; (800cba8 <tcp_receive+0x2b4>)
 800c910:	f006 f91c 	bl	8012b4c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	7d1b      	ldrb	r3, [r3, #20]
 800c918:	2b03      	cmp	r3, #3
 800c91a:	d806      	bhi.n	800c92a <tcp_receive+0x36>
 800c91c:	4ba0      	ldr	r3, [pc, #640]	; (800cba0 <tcp_receive+0x2ac>)
 800c91e:	f240 427c 	movw	r2, #1148	; 0x47c
 800c922:	49a2      	ldr	r1, [pc, #648]	; (800cbac <tcp_receive+0x2b8>)
 800c924:	48a0      	ldr	r0, [pc, #640]	; (800cba8 <tcp_receive+0x2b4>)
 800c926:	f006 f911 	bl	8012b4c <iprintf>

  if (flags & TCP_ACK) {
 800c92a:	4ba1      	ldr	r3, [pc, #644]	; (800cbb0 <tcp_receive+0x2bc>)
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	f003 0310 	and.w	r3, r3, #16
 800c932:	2b00      	cmp	r3, #0
 800c934:	f000 8263 	beq.w	800cdfe <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c93e:	461a      	mov	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c944:	4413      	add	r3, r2
 800c946:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c94c:	4b99      	ldr	r3, [pc, #612]	; (800cbb4 <tcp_receive+0x2c0>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	1ad3      	subs	r3, r2, r3
 800c952:	2b00      	cmp	r3, #0
 800c954:	db1b      	blt.n	800c98e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c95a:	4b96      	ldr	r3, [pc, #600]	; (800cbb4 <tcp_receive+0x2c0>)
 800c95c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c95e:	429a      	cmp	r2, r3
 800c960:	d106      	bne.n	800c970 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c966:	4b94      	ldr	r3, [pc, #592]	; (800cbb8 <tcp_receive+0x2c4>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	1ad3      	subs	r3, r2, r3
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	db0e      	blt.n	800c98e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c974:	4b90      	ldr	r3, [pc, #576]	; (800cbb8 <tcp_receive+0x2c4>)
 800c976:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c978:	429a      	cmp	r2, r3
 800c97a:	d125      	bne.n	800c9c8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c97c:	4b8f      	ldr	r3, [pc, #572]	; (800cbbc <tcp_receive+0x2c8>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	89db      	ldrh	r3, [r3, #14]
 800c982:	b29a      	uxth	r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d91c      	bls.n	800c9c8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c98e:	4b8b      	ldr	r3, [pc, #556]	; (800cbbc <tcp_receive+0x2c8>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	89db      	ldrh	r3, [r3, #14]
 800c994:	b29a      	uxth	r2, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d205      	bcs.n	800c9b8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c9b8:	4b7e      	ldr	r3, [pc, #504]	; (800cbb4 <tcp_receive+0x2c0>)
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c9c0:	4b7d      	ldr	r3, [pc, #500]	; (800cbb8 <tcp_receive+0x2c4>)
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c9c8:	4b7b      	ldr	r3, [pc, #492]	; (800cbb8 <tcp_receive+0x2c4>)
 800c9ca:	681a      	ldr	r2, [r3, #0]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	dc58      	bgt.n	800ca88 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c9d6:	4b7a      	ldr	r3, [pc, #488]	; (800cbc0 <tcp_receive+0x2cc>)
 800c9d8:	881b      	ldrh	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d14b      	bne.n	800ca76 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c9e8:	4413      	add	r3, r2
 800c9ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d142      	bne.n	800ca76 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	db3d      	blt.n	800ca76 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9fe:	4b6e      	ldr	r3, [pc, #440]	; (800cbb8 <tcp_receive+0x2c4>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d137      	bne.n	800ca76 <tcp_receive+0x182>
              found_dupack = 1;
 800ca06:	2301      	movs	r3, #1
 800ca08:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ca10:	2bff      	cmp	r3, #255	; 0xff
 800ca12:	d007      	beq.n	800ca24 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	b2da      	uxtb	r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ca2a:	2b03      	cmp	r3, #3
 800ca2c:	d91b      	bls.n	800ca66 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca38:	4413      	add	r3, r2
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d30a      	bcc.n	800ca5c <tcp_receive+0x168>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca50:	4413      	add	r3, r2
 800ca52:	b29a      	uxth	r2, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ca5a:	e004      	b.n	800ca66 <tcp_receive+0x172>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	d902      	bls.n	800ca76 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f002 fb47 	bl	800f104 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ca76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	f040 8160 	bne.w	800cd3e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ca86:	e15a      	b.n	800cd3e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ca88:	4b4b      	ldr	r3, [pc, #300]	; (800cbb8 <tcp_receive+0x2c4>)
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca90:	1ad3      	subs	r3, r2, r3
 800ca92:	3b01      	subs	r3, #1
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	f2c0 814d 	blt.w	800cd34 <tcp_receive+0x440>
 800ca9a:	4b47      	ldr	r3, [pc, #284]	; (800cbb8 <tcp_receive+0x2c4>)
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caa2:	1ad3      	subs	r3, r2, r3
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	f300 8145 	bgt.w	800cd34 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	8b5b      	ldrh	r3, [r3, #26]
 800caae:	f003 0304 	and.w	r3, r3, #4
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d010      	beq.n	800cad8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	8b5b      	ldrh	r3, [r3, #26]
 800caba:	f023 0304 	bic.w	r3, r3, #4
 800cabe:	b29a      	uxth	r2, r3
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2200      	movs	r2, #0
 800cad4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cae6:	10db      	asrs	r3, r3, #3
 800cae8:	b21b      	sxth	r3, r3
 800caea:	b29a      	uxth	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	4413      	add	r3, r2
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	b21a      	sxth	r2, r3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800cb00:	4b2d      	ldr	r3, [pc, #180]	; (800cbb8 <tcp_receive+0x2c4>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	b29a      	uxth	r2, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	1ad3      	subs	r3, r2, r3
 800cb0e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800cb18:	4b27      	ldr	r3, [pc, #156]	; (800cbb8 <tcp_receive+0x2c4>)
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	7d1b      	ldrb	r3, [r3, #20]
 800cb24:	2b03      	cmp	r3, #3
 800cb26:	f240 8096 	bls.w	800cc56 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d244      	bcs.n	800cbc4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	8b5b      	ldrh	r3, [r3, #26]
 800cb3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d001      	beq.n	800cb4a <tcp_receive+0x256>
 800cb46:	2301      	movs	r3, #1
 800cb48:	e000      	b.n	800cb4c <tcp_receive+0x258>
 800cb4a:	2302      	movs	r3, #2
 800cb4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800cb50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb5a:	fb12 f303 	smulbb	r3, r2, r3
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb62:	4293      	cmp	r3, r2
 800cb64:	bf28      	it	cs
 800cb66:	4613      	movcs	r3, r2
 800cb68:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cb72:	4413      	add	r3, r2
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d309      	bcc.n	800cb94 <tcp_receive+0x2a0>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cb88:	4413      	add	r3, r2
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cb92:	e060      	b.n	800cc56 <tcp_receive+0x362>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cb9e:	e05a      	b.n	800cc56 <tcp_receive+0x362>
 800cba0:	08014d18 	.word	0x08014d18
 800cba4:	08015048 	.word	0x08015048
 800cba8:	08014d64 	.word	0x08014d64
 800cbac:	08015064 	.word	0x08015064
 800cbb0:	20000170 	.word	0x20000170
 800cbb4:	20000164 	.word	0x20000164
 800cbb8:	20000168 	.word	0x20000168
 800cbbc:	20000154 	.word	0x20000154
 800cbc0:	2000016e 	.word	0x2000016e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cbca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cbcc:	4413      	add	r3, r2
 800cbce:	b29a      	uxth	r2, r3
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d309      	bcc.n	800cbee <tcp_receive+0x2fa>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cbe0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cbe2:	4413      	add	r3, r2
 800cbe4:	b29a      	uxth	r2, r3
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cbec:	e004      	b.n	800cbf8 <tcp_receive+0x304>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cbf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d326      	bcc.n	800cc56 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cc14:	1ad3      	subs	r3, r2, r3
 800cc16:	b29a      	uxth	r2, r3
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc28:	4413      	add	r3, r2
 800cc2a:	b29a      	uxth	r2, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d30a      	bcc.n	800cc4c <tcp_receive+0x358>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc40:	4413      	add	r3, r2
 800cc42:	b29a      	uxth	r2, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cc4a:	e004      	b.n	800cc56 <tcp_receive+0x362>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc5e:	4a98      	ldr	r2, [pc, #608]	; (800cec0 <tcp_receive+0x5cc>)
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f7ff fdcb 	bl	800c7fc <tcp_free_acked_segments>
 800cc66:	4602      	mov	r2, r0
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc74:	4a93      	ldr	r2, [pc, #588]	; (800cec4 <tcp_receive+0x5d0>)
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f7ff fdc0 	bl	800c7fc <tcp_free_acked_segments>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d104      	bne.n	800cc94 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc90:	861a      	strh	r2, [r3, #48]	; 0x30
 800cc92:	e002      	b.n	800cc9a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d103      	bne.n	800ccb0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ccb6:	4b84      	ldr	r3, [pc, #528]	; (800cec8 <tcp_receive+0x5d4>)
 800ccb8:	881b      	ldrh	r3, [r3, #0]
 800ccba:	4413      	add	r3, r2
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	8b5b      	ldrh	r3, [r3, #26]
 800ccc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d035      	beq.n	800cd3c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d118      	bne.n	800cd0a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d00c      	beq.n	800ccfa <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7fa ffe5 	bl	8007cbc <lwip_htonl>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	dc20      	bgt.n	800cd3c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	8b5b      	ldrh	r3, [r3, #26]
 800ccfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd02:	b29a      	uxth	r2, r3
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cd08:	e018      	b.n	800cd3c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fa ffd0 	bl	8007cbc <lwip_htonl>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	1ae3      	subs	r3, r4, r3
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	dc0b      	bgt.n	800cd3c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	8b5b      	ldrh	r3, [r3, #26]
 800cd28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd2c:	b29a      	uxth	r2, r3
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cd32:	e003      	b.n	800cd3c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f002 fbdd 	bl	800f4f4 <tcp_send_empty_ack>
 800cd3a:	e000      	b.n	800cd3e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cd3c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d05b      	beq.n	800cdfe <tcp_receive+0x50a>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd4a:	4b60      	ldr	r3, [pc, #384]	; (800cecc <tcp_receive+0x5d8>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	da54      	bge.n	800cdfe <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800cd54:	4b5e      	ldr	r3, [pc, #376]	; (800ced0 <tcp_receive+0x5dc>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	b29a      	uxth	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	1ad3      	subs	r3, r2, r3
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800cd68:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cd72:	10db      	asrs	r3, r3, #3
 800cd74:	b21b      	sxth	r3, r3
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	1ad3      	subs	r3, r2, r3
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cd86:	b29a      	uxth	r2, r3
 800cd88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cd8c:	4413      	add	r3, r2
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	b21a      	sxth	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800cd96:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	da05      	bge.n	800cdaa <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800cd9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cda2:	425b      	negs	r3, r3
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800cdaa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cdb4:	109b      	asrs	r3, r3, #2
 800cdb6:	b21b      	sxth	r3, r3
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	1ad3      	subs	r3, r2, r3
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cdc8:	b29a      	uxth	r2, r3
 800cdca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cdce:	4413      	add	r3, r2
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	b21a      	sxth	r2, r3
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cdde:	10db      	asrs	r3, r3, #3
 800cde0:	b21b      	sxth	r3, r3
 800cde2:	b29a      	uxth	r2, r3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	4413      	add	r3, r2
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	b21a      	sxth	r2, r3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800cdfe:	4b35      	ldr	r3, [pc, #212]	; (800ced4 <tcp_receive+0x5e0>)
 800ce00:	881b      	ldrh	r3, [r3, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	f000 84e1 	beq.w	800d7ca <tcp_receive+0xed6>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	7d1b      	ldrb	r3, [r3, #20]
 800ce0c:	2b06      	cmp	r3, #6
 800ce0e:	f200 84dc 	bhi.w	800d7ca <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce16:	4b30      	ldr	r3, [pc, #192]	; (800ced8 <tcp_receive+0x5e4>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	1ad3      	subs	r3, r2, r3
 800ce1c:	3b01      	subs	r3, #1
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	f2c0 808e 	blt.w	800cf40 <tcp_receive+0x64c>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce28:	4b2a      	ldr	r3, [pc, #168]	; (800ced4 <tcp_receive+0x5e0>)
 800ce2a:	881b      	ldrh	r3, [r3, #0]
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	4b2a      	ldr	r3, [pc, #168]	; (800ced8 <tcp_receive+0x5e4>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	440b      	add	r3, r1
 800ce34:	1ad3      	subs	r3, r2, r3
 800ce36:	3301      	adds	r3, #1
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f300 8081 	bgt.w	800cf40 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ce3e:	4b27      	ldr	r3, [pc, #156]	; (800cedc <tcp_receive+0x5e8>)
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce48:	4b23      	ldr	r3, [pc, #140]	; (800ced8 <tcp_receive+0x5e4>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	1ad3      	subs	r3, r2, r3
 800ce4e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ce50:	4b22      	ldr	r3, [pc, #136]	; (800cedc <tcp_receive+0x5e8>)
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d106      	bne.n	800ce66 <tcp_receive+0x572>
 800ce58:	4b21      	ldr	r3, [pc, #132]	; (800cee0 <tcp_receive+0x5ec>)
 800ce5a:	f240 5294 	movw	r2, #1428	; 0x594
 800ce5e:	4921      	ldr	r1, [pc, #132]	; (800cee4 <tcp_receive+0x5f0>)
 800ce60:	4821      	ldr	r0, [pc, #132]	; (800cee8 <tcp_receive+0x5f4>)
 800ce62:	f005 fe73 	bl	8012b4c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ce66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d906      	bls.n	800ce7e <tcp_receive+0x58a>
 800ce70:	4b1b      	ldr	r3, [pc, #108]	; (800cee0 <tcp_receive+0x5ec>)
 800ce72:	f240 5295 	movw	r2, #1429	; 0x595
 800ce76:	491d      	ldr	r1, [pc, #116]	; (800ceec <tcp_receive+0x5f8>)
 800ce78:	481b      	ldr	r0, [pc, #108]	; (800cee8 <tcp_receive+0x5f4>)
 800ce7a:	f005 fe67 	bl	8012b4c <iprintf>
      off = (u16_t)off32;
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ce84:	4b15      	ldr	r3, [pc, #84]	; (800cedc <tcp_receive+0x5e8>)
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	891b      	ldrh	r3, [r3, #8]
 800ce8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d906      	bls.n	800cea0 <tcp_receive+0x5ac>
 800ce92:	4b13      	ldr	r3, [pc, #76]	; (800cee0 <tcp_receive+0x5ec>)
 800ce94:	f240 5297 	movw	r2, #1431	; 0x597
 800ce98:	4915      	ldr	r1, [pc, #84]	; (800cef0 <tcp_receive+0x5fc>)
 800ce9a:	4813      	ldr	r0, [pc, #76]	; (800cee8 <tcp_receive+0x5f4>)
 800ce9c:	f005 fe56 	bl	8012b4c <iprintf>
      inseg.len -= off;
 800cea0:	4b0e      	ldr	r3, [pc, #56]	; (800cedc <tcp_receive+0x5e8>)
 800cea2:	891a      	ldrh	r2, [r3, #8]
 800cea4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	4b0b      	ldr	r3, [pc, #44]	; (800cedc <tcp_receive+0x5e8>)
 800ceae:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ceb0:	4b0a      	ldr	r3, [pc, #40]	; (800cedc <tcp_receive+0x5e8>)
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	891a      	ldrh	r2, [r3, #8]
 800ceb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ceba:	1ad3      	subs	r3, r2, r3
 800cebc:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800cebe:	e029      	b.n	800cf14 <tcp_receive+0x620>
 800cec0:	08015080 	.word	0x08015080
 800cec4:	08015088 	.word	0x08015088
 800cec8:	2000016c 	.word	0x2000016c
 800cecc:	20000168 	.word	0x20000168
 800ced0:	2000bcc8 	.word	0x2000bcc8
 800ced4:	2000016e 	.word	0x2000016e
 800ced8:	20000164 	.word	0x20000164
 800cedc:	20000144 	.word	0x20000144
 800cee0:	08014d18 	.word	0x08014d18
 800cee4:	08015090 	.word	0x08015090
 800cee8:	08014d64 	.word	0x08014d64
 800ceec:	080150a0 	.word	0x080150a0
 800cef0:	080150b0 	.word	0x080150b0
        off -= p->len;
 800cef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cef6:	895b      	ldrh	r3, [r3, #10]
 800cef8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800cf02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf04:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cf06:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800cf08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800cf0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800cf14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf16:	895b      	ldrh	r3, [r3, #10]
 800cf18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d8e9      	bhi.n	800cef4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800cf20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cf24:	4619      	mov	r1, r3
 800cf26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cf28:	f7fc f8dc 	bl	80090e4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf30:	4a91      	ldr	r2, [pc, #580]	; (800d178 <tcp_receive+0x884>)
 800cf32:	6013      	str	r3, [r2, #0]
 800cf34:	4b91      	ldr	r3, [pc, #580]	; (800d17c <tcp_receive+0x888>)
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	4a8f      	ldr	r2, [pc, #572]	; (800d178 <tcp_receive+0x884>)
 800cf3a:	6812      	ldr	r2, [r2, #0]
 800cf3c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cf3e:	e00d      	b.n	800cf5c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800cf40:	4b8d      	ldr	r3, [pc, #564]	; (800d178 <tcp_receive+0x884>)
 800cf42:	681a      	ldr	r2, [r3, #0]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf48:	1ad3      	subs	r3, r2, r3
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	da06      	bge.n	800cf5c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	8b5b      	ldrh	r3, [r3, #26]
 800cf52:	f043 0302 	orr.w	r3, r3, #2
 800cf56:	b29a      	uxth	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cf5c:	4b86      	ldr	r3, [pc, #536]	; (800d178 <tcp_receive+0x884>)
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf64:	1ad3      	subs	r3, r2, r3
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	f2c0 842a 	blt.w	800d7c0 <tcp_receive+0xecc>
 800cf6c:	4b82      	ldr	r3, [pc, #520]	; (800d178 <tcp_receive+0x884>)
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf74:	6879      	ldr	r1, [r7, #4]
 800cf76:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cf78:	440b      	add	r3, r1
 800cf7a:	1ad3      	subs	r3, r2, r3
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f300 841e 	bgt.w	800d7c0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf88:	4b7b      	ldr	r3, [pc, #492]	; (800d178 <tcp_receive+0x884>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	f040 829a 	bne.w	800d4c6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800cf92:	4b7a      	ldr	r3, [pc, #488]	; (800d17c <tcp_receive+0x888>)
 800cf94:	891c      	ldrh	r4, [r3, #8]
 800cf96:	4b79      	ldr	r3, [pc, #484]	; (800d17c <tcp_receive+0x888>)
 800cf98:	68db      	ldr	r3, [r3, #12]
 800cf9a:	899b      	ldrh	r3, [r3, #12]
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7fa fe77 	bl	8007c92 <lwip_htons>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	f003 0303 	and.w	r3, r3, #3
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d001      	beq.n	800cfb4 <tcp_receive+0x6c0>
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	e000      	b.n	800cfb6 <tcp_receive+0x6c2>
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	4423      	add	r3, r4
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	4b71      	ldr	r3, [pc, #452]	; (800d180 <tcp_receive+0x88c>)
 800cfbc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cfc2:	4b6f      	ldr	r3, [pc, #444]	; (800d180 <tcp_receive+0x88c>)
 800cfc4:	881b      	ldrh	r3, [r3, #0]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d275      	bcs.n	800d0b6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cfca:	4b6c      	ldr	r3, [pc, #432]	; (800d17c <tcp_receive+0x888>)
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	899b      	ldrh	r3, [r3, #12]
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fa fe5d 	bl	8007c92 <lwip_htons>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	f003 0301 	and.w	r3, r3, #1
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d01f      	beq.n	800d024 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cfe4:	4b65      	ldr	r3, [pc, #404]	; (800d17c <tcp_receive+0x888>)
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	899b      	ldrh	r3, [r3, #12]
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	b21b      	sxth	r3, r3
 800cfee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cff2:	b21c      	sxth	r4, r3
 800cff4:	4b61      	ldr	r3, [pc, #388]	; (800d17c <tcp_receive+0x888>)
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	899b      	ldrh	r3, [r3, #12]
 800cffa:	b29b      	uxth	r3, r3
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7fa fe48 	bl	8007c92 <lwip_htons>
 800d002:	4603      	mov	r3, r0
 800d004:	b2db      	uxtb	r3, r3
 800d006:	b29b      	uxth	r3, r3
 800d008:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fa fe3f 	bl	8007c92 <lwip_htons>
 800d014:	4603      	mov	r3, r0
 800d016:	b21b      	sxth	r3, r3
 800d018:	4323      	orrs	r3, r4
 800d01a:	b21a      	sxth	r2, r3
 800d01c:	4b57      	ldr	r3, [pc, #348]	; (800d17c <tcp_receive+0x888>)
 800d01e:	68db      	ldr	r3, [r3, #12]
 800d020:	b292      	uxth	r2, r2
 800d022:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d028:	4b54      	ldr	r3, [pc, #336]	; (800d17c <tcp_receive+0x888>)
 800d02a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d02c:	4b53      	ldr	r3, [pc, #332]	; (800d17c <tcp_receive+0x888>)
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	899b      	ldrh	r3, [r3, #12]
 800d032:	b29b      	uxth	r3, r3
 800d034:	4618      	mov	r0, r3
 800d036:	f7fa fe2c 	bl	8007c92 <lwip_htons>
 800d03a:	4603      	mov	r3, r0
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	f003 0302 	and.w	r3, r3, #2
 800d042:	2b00      	cmp	r3, #0
 800d044:	d005      	beq.n	800d052 <tcp_receive+0x75e>
            inseg.len -= 1;
 800d046:	4b4d      	ldr	r3, [pc, #308]	; (800d17c <tcp_receive+0x888>)
 800d048:	891b      	ldrh	r3, [r3, #8]
 800d04a:	3b01      	subs	r3, #1
 800d04c:	b29a      	uxth	r2, r3
 800d04e:	4b4b      	ldr	r3, [pc, #300]	; (800d17c <tcp_receive+0x888>)
 800d050:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d052:	4b4a      	ldr	r3, [pc, #296]	; (800d17c <tcp_receive+0x888>)
 800d054:	685a      	ldr	r2, [r3, #4]
 800d056:	4b49      	ldr	r3, [pc, #292]	; (800d17c <tcp_receive+0x888>)
 800d058:	891b      	ldrh	r3, [r3, #8]
 800d05a:	4619      	mov	r1, r3
 800d05c:	4610      	mov	r0, r2
 800d05e:	f7fb ff41 	bl	8008ee4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d062:	4b46      	ldr	r3, [pc, #280]	; (800d17c <tcp_receive+0x888>)
 800d064:	891c      	ldrh	r4, [r3, #8]
 800d066:	4b45      	ldr	r3, [pc, #276]	; (800d17c <tcp_receive+0x888>)
 800d068:	68db      	ldr	r3, [r3, #12]
 800d06a:	899b      	ldrh	r3, [r3, #12]
 800d06c:	b29b      	uxth	r3, r3
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fa fe0f 	bl	8007c92 <lwip_htons>
 800d074:	4603      	mov	r3, r0
 800d076:	b2db      	uxtb	r3, r3
 800d078:	f003 0303 	and.w	r3, r3, #3
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d001      	beq.n	800d084 <tcp_receive+0x790>
 800d080:	2301      	movs	r3, #1
 800d082:	e000      	b.n	800d086 <tcp_receive+0x792>
 800d084:	2300      	movs	r3, #0
 800d086:	4423      	add	r3, r4
 800d088:	b29a      	uxth	r2, r3
 800d08a:	4b3d      	ldr	r3, [pc, #244]	; (800d180 <tcp_receive+0x88c>)
 800d08c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d08e:	4b3c      	ldr	r3, [pc, #240]	; (800d180 <tcp_receive+0x88c>)
 800d090:	881b      	ldrh	r3, [r3, #0]
 800d092:	461a      	mov	r2, r3
 800d094:	4b38      	ldr	r3, [pc, #224]	; (800d178 <tcp_receive+0x884>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	441a      	add	r2, r3
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d09e:	6879      	ldr	r1, [r7, #4]
 800d0a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d0a2:	440b      	add	r3, r1
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d006      	beq.n	800d0b6 <tcp_receive+0x7c2>
 800d0a8:	4b36      	ldr	r3, [pc, #216]	; (800d184 <tcp_receive+0x890>)
 800d0aa:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800d0ae:	4936      	ldr	r1, [pc, #216]	; (800d188 <tcp_receive+0x894>)
 800d0b0:	4836      	ldr	r0, [pc, #216]	; (800d18c <tcp_receive+0x898>)
 800d0b2:	f005 fd4b 	bl	8012b4c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f000 80e7 	beq.w	800d28e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d0c0:	4b2e      	ldr	r3, [pc, #184]	; (800d17c <tcp_receive+0x888>)
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	899b      	ldrh	r3, [r3, #12]
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fa fde2 	bl	8007c92 <lwip_htons>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	b2db      	uxtb	r3, r3
 800d0d2:	f003 0301 	and.w	r3, r3, #1
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d010      	beq.n	800d0fc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d0da:	e00a      	b.n	800d0f2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0e0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d0ec:	68f8      	ldr	r0, [r7, #12]
 800d0ee:	f7fd fcb1 	bl	800aa54 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1f0      	bne.n	800d0dc <tcp_receive+0x7e8>
 800d0fa:	e0c8      	b.n	800d28e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d100:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d102:	e052      	b.n	800d1aa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	899b      	ldrh	r3, [r3, #12]
 800d10a:	b29b      	uxth	r3, r3
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7fa fdc0 	bl	8007c92 <lwip_htons>
 800d112:	4603      	mov	r3, r0
 800d114:	b2db      	uxtb	r3, r3
 800d116:	f003 0301 	and.w	r3, r3, #1
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d03d      	beq.n	800d19a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d11e:	4b17      	ldr	r3, [pc, #92]	; (800d17c <tcp_receive+0x888>)
 800d120:	68db      	ldr	r3, [r3, #12]
 800d122:	899b      	ldrh	r3, [r3, #12]
 800d124:	b29b      	uxth	r3, r3
 800d126:	4618      	mov	r0, r3
 800d128:	f7fa fdb3 	bl	8007c92 <lwip_htons>
 800d12c:	4603      	mov	r3, r0
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d134:	2b00      	cmp	r3, #0
 800d136:	d130      	bne.n	800d19a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d138:	4b10      	ldr	r3, [pc, #64]	; (800d17c <tcp_receive+0x888>)
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	899b      	ldrh	r3, [r3, #12]
 800d13e:	b29c      	uxth	r4, r3
 800d140:	2001      	movs	r0, #1
 800d142:	f7fa fda6 	bl	8007c92 <lwip_htons>
 800d146:	4603      	mov	r3, r0
 800d148:	461a      	mov	r2, r3
 800d14a:	4b0c      	ldr	r3, [pc, #48]	; (800d17c <tcp_receive+0x888>)
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	4322      	orrs	r2, r4
 800d150:	b292      	uxth	r2, r2
 800d152:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d154:	4b09      	ldr	r3, [pc, #36]	; (800d17c <tcp_receive+0x888>)
 800d156:	891c      	ldrh	r4, [r3, #8]
 800d158:	4b08      	ldr	r3, [pc, #32]	; (800d17c <tcp_receive+0x888>)
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	899b      	ldrh	r3, [r3, #12]
 800d15e:	b29b      	uxth	r3, r3
 800d160:	4618      	mov	r0, r3
 800d162:	f7fa fd96 	bl	8007c92 <lwip_htons>
 800d166:	4603      	mov	r3, r0
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	f003 0303 	and.w	r3, r3, #3
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d00e      	beq.n	800d190 <tcp_receive+0x89c>
 800d172:	2301      	movs	r3, #1
 800d174:	e00d      	b.n	800d192 <tcp_receive+0x89e>
 800d176:	bf00      	nop
 800d178:	20000164 	.word	0x20000164
 800d17c:	20000144 	.word	0x20000144
 800d180:	2000016e 	.word	0x2000016e
 800d184:	08014d18 	.word	0x08014d18
 800d188:	080150c0 	.word	0x080150c0
 800d18c:	08014d64 	.word	0x08014d64
 800d190:	2300      	movs	r3, #0
 800d192:	4423      	add	r3, r4
 800d194:	b29a      	uxth	r2, r3
 800d196:	4b98      	ldr	r3, [pc, #608]	; (800d3f8 <tcp_receive+0xb04>)
 800d198:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d19c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d1a4:	6938      	ldr	r0, [r7, #16]
 800d1a6:	f7fd fc55 	bl	800aa54 <tcp_seg_free>
            while (next &&
 800d1aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d00e      	beq.n	800d1ce <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d1b0:	4b91      	ldr	r3, [pc, #580]	; (800d3f8 <tcp_receive+0xb04>)
 800d1b2:	881b      	ldrh	r3, [r3, #0]
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	4b91      	ldr	r3, [pc, #580]	; (800d3fc <tcp_receive+0xb08>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	441a      	add	r2, r3
 800d1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d1c4:	8909      	ldrh	r1, [r1, #8]
 800d1c6:	440b      	add	r3, r1
 800d1c8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	da9a      	bge.n	800d104 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d1ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d059      	beq.n	800d288 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800d1d4:	4b88      	ldr	r3, [pc, #544]	; (800d3f8 <tcp_receive+0xb04>)
 800d1d6:	881b      	ldrh	r3, [r3, #0]
 800d1d8:	461a      	mov	r2, r3
 800d1da:	4b88      	ldr	r3, [pc, #544]	; (800d3fc <tcp_receive+0xb08>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	441a      	add	r2, r3
 800d1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	dd4d      	ble.n	800d288 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	b29a      	uxth	r2, r3
 800d1f4:	4b81      	ldr	r3, [pc, #516]	; (800d3fc <tcp_receive+0xb08>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	1ad3      	subs	r3, r2, r3
 800d1fc:	b29a      	uxth	r2, r3
 800d1fe:	4b80      	ldr	r3, [pc, #512]	; (800d400 <tcp_receive+0xb0c>)
 800d200:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d202:	4b7f      	ldr	r3, [pc, #508]	; (800d400 <tcp_receive+0xb0c>)
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	899b      	ldrh	r3, [r3, #12]
 800d208:	b29b      	uxth	r3, r3
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fa fd41 	bl	8007c92 <lwip_htons>
 800d210:	4603      	mov	r3, r0
 800d212:	b2db      	uxtb	r3, r3
 800d214:	f003 0302 	and.w	r3, r3, #2
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d005      	beq.n	800d228 <tcp_receive+0x934>
                inseg.len -= 1;
 800d21c:	4b78      	ldr	r3, [pc, #480]	; (800d400 <tcp_receive+0xb0c>)
 800d21e:	891b      	ldrh	r3, [r3, #8]
 800d220:	3b01      	subs	r3, #1
 800d222:	b29a      	uxth	r2, r3
 800d224:	4b76      	ldr	r3, [pc, #472]	; (800d400 <tcp_receive+0xb0c>)
 800d226:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d228:	4b75      	ldr	r3, [pc, #468]	; (800d400 <tcp_receive+0xb0c>)
 800d22a:	685a      	ldr	r2, [r3, #4]
 800d22c:	4b74      	ldr	r3, [pc, #464]	; (800d400 <tcp_receive+0xb0c>)
 800d22e:	891b      	ldrh	r3, [r3, #8]
 800d230:	4619      	mov	r1, r3
 800d232:	4610      	mov	r0, r2
 800d234:	f7fb fe56 	bl	8008ee4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d238:	4b71      	ldr	r3, [pc, #452]	; (800d400 <tcp_receive+0xb0c>)
 800d23a:	891c      	ldrh	r4, [r3, #8]
 800d23c:	4b70      	ldr	r3, [pc, #448]	; (800d400 <tcp_receive+0xb0c>)
 800d23e:	68db      	ldr	r3, [r3, #12]
 800d240:	899b      	ldrh	r3, [r3, #12]
 800d242:	b29b      	uxth	r3, r3
 800d244:	4618      	mov	r0, r3
 800d246:	f7fa fd24 	bl	8007c92 <lwip_htons>
 800d24a:	4603      	mov	r3, r0
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	f003 0303 	and.w	r3, r3, #3
 800d252:	2b00      	cmp	r3, #0
 800d254:	d001      	beq.n	800d25a <tcp_receive+0x966>
 800d256:	2301      	movs	r3, #1
 800d258:	e000      	b.n	800d25c <tcp_receive+0x968>
 800d25a:	2300      	movs	r3, #0
 800d25c:	4423      	add	r3, r4
 800d25e:	b29a      	uxth	r2, r3
 800d260:	4b65      	ldr	r3, [pc, #404]	; (800d3f8 <tcp_receive+0xb04>)
 800d262:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d264:	4b64      	ldr	r3, [pc, #400]	; (800d3f8 <tcp_receive+0xb04>)
 800d266:	881b      	ldrh	r3, [r3, #0]
 800d268:	461a      	mov	r2, r3
 800d26a:	4b64      	ldr	r3, [pc, #400]	; (800d3fc <tcp_receive+0xb08>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	441a      	add	r2, r3
 800d270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	429a      	cmp	r2, r3
 800d278:	d006      	beq.n	800d288 <tcp_receive+0x994>
 800d27a:	4b62      	ldr	r3, [pc, #392]	; (800d404 <tcp_receive+0xb10>)
 800d27c:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800d280:	4961      	ldr	r1, [pc, #388]	; (800d408 <tcp_receive+0xb14>)
 800d282:	4862      	ldr	r0, [pc, #392]	; (800d40c <tcp_receive+0xb18>)
 800d284:	f005 fc62 	bl	8012b4c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d28c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d28e:	4b5a      	ldr	r3, [pc, #360]	; (800d3f8 <tcp_receive+0xb04>)
 800d290:	881b      	ldrh	r3, [r3, #0]
 800d292:	461a      	mov	r2, r3
 800d294:	4b59      	ldr	r3, [pc, #356]	; (800d3fc <tcp_receive+0xb08>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	441a      	add	r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d2a2:	4b55      	ldr	r3, [pc, #340]	; (800d3f8 <tcp_receive+0xb04>)
 800d2a4:	881b      	ldrh	r3, [r3, #0]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d206      	bcs.n	800d2b8 <tcp_receive+0x9c4>
 800d2aa:	4b56      	ldr	r3, [pc, #344]	; (800d404 <tcp_receive+0xb10>)
 800d2ac:	f240 6207 	movw	r2, #1543	; 0x607
 800d2b0:	4957      	ldr	r1, [pc, #348]	; (800d410 <tcp_receive+0xb1c>)
 800d2b2:	4856      	ldr	r0, [pc, #344]	; (800d40c <tcp_receive+0xb18>)
 800d2b4:	f005 fc4a 	bl	8012b4c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d2bc:	4b4e      	ldr	r3, [pc, #312]	; (800d3f8 <tcp_receive+0xb04>)
 800d2be:	881b      	ldrh	r3, [r3, #0]
 800d2c0:	1ad3      	subs	r3, r2, r3
 800d2c2:	b29a      	uxth	r2, r3
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f7fc fea1 	bl	800a010 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d2ce:	4b4c      	ldr	r3, [pc, #304]	; (800d400 <tcp_receive+0xb0c>)
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	891b      	ldrh	r3, [r3, #8]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d006      	beq.n	800d2e6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800d2d8:	4b49      	ldr	r3, [pc, #292]	; (800d400 <tcp_receive+0xb0c>)
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	4a4d      	ldr	r2, [pc, #308]	; (800d414 <tcp_receive+0xb20>)
 800d2de:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d2e0:	4b47      	ldr	r3, [pc, #284]	; (800d400 <tcp_receive+0xb0c>)
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d2e6:	4b46      	ldr	r3, [pc, #280]	; (800d400 <tcp_receive+0xb0c>)
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	899b      	ldrh	r3, [r3, #12]
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7fa fccf 	bl	8007c92 <lwip_htons>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	b2db      	uxtb	r3, r3
 800d2f8:	f003 0301 	and.w	r3, r3, #1
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	f000 80b8 	beq.w	800d472 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d302:	4b45      	ldr	r3, [pc, #276]	; (800d418 <tcp_receive+0xb24>)
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	f043 0320 	orr.w	r3, r3, #32
 800d30a:	b2da      	uxtb	r2, r3
 800d30c:	4b42      	ldr	r3, [pc, #264]	; (800d418 <tcp_receive+0xb24>)
 800d30e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d310:	e0af      	b.n	800d472 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d316:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	4a36      	ldr	r2, [pc, #216]	; (800d3fc <tcp_receive+0xb08>)
 800d322:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	891b      	ldrh	r3, [r3, #8]
 800d328:	461c      	mov	r4, r3
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	899b      	ldrh	r3, [r3, #12]
 800d330:	b29b      	uxth	r3, r3
 800d332:	4618      	mov	r0, r3
 800d334:	f7fa fcad 	bl	8007c92 <lwip_htons>
 800d338:	4603      	mov	r3, r0
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	f003 0303 	and.w	r3, r3, #3
 800d340:	2b00      	cmp	r3, #0
 800d342:	d001      	beq.n	800d348 <tcp_receive+0xa54>
 800d344:	2301      	movs	r3, #1
 800d346:	e000      	b.n	800d34a <tcp_receive+0xa56>
 800d348:	2300      	movs	r3, #0
 800d34a:	191a      	adds	r2, r3, r4
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d350:	441a      	add	r2, r3
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d35a:	461c      	mov	r4, r3
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	891b      	ldrh	r3, [r3, #8]
 800d360:	461d      	mov	r5, r3
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	899b      	ldrh	r3, [r3, #12]
 800d368:	b29b      	uxth	r3, r3
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7fa fc91 	bl	8007c92 <lwip_htons>
 800d370:	4603      	mov	r3, r0
 800d372:	b2db      	uxtb	r3, r3
 800d374:	f003 0303 	and.w	r3, r3, #3
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d001      	beq.n	800d380 <tcp_receive+0xa8c>
 800d37c:	2301      	movs	r3, #1
 800d37e:	e000      	b.n	800d382 <tcp_receive+0xa8e>
 800d380:	2300      	movs	r3, #0
 800d382:	442b      	add	r3, r5
 800d384:	429c      	cmp	r4, r3
 800d386:	d206      	bcs.n	800d396 <tcp_receive+0xaa2>
 800d388:	4b1e      	ldr	r3, [pc, #120]	; (800d404 <tcp_receive+0xb10>)
 800d38a:	f240 622c 	movw	r2, #1580	; 0x62c
 800d38e:	4923      	ldr	r1, [pc, #140]	; (800d41c <tcp_receive+0xb28>)
 800d390:	481e      	ldr	r0, [pc, #120]	; (800d40c <tcp_receive+0xb18>)
 800d392:	f005 fbdb 	bl	8012b4c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	891b      	ldrh	r3, [r3, #8]
 800d39a:	461c      	mov	r4, r3
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	899b      	ldrh	r3, [r3, #12]
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fa fc74 	bl	8007c92 <lwip_htons>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	f003 0303 	and.w	r3, r3, #3
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d001      	beq.n	800d3ba <tcp_receive+0xac6>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e000      	b.n	800d3bc <tcp_receive+0xac8>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	1919      	adds	r1, r3, r4
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d3c2:	b28b      	uxth	r3, r1
 800d3c4:	1ad3      	subs	r3, r2, r3
 800d3c6:	b29a      	uxth	r2, r3
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7fc fe1f 	bl	800a010 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	891b      	ldrh	r3, [r3, #8]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d028      	beq.n	800d42e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d3dc:	4b0d      	ldr	r3, [pc, #52]	; (800d414 <tcp_receive+0xb20>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d01d      	beq.n	800d420 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800d3e4:	4b0b      	ldr	r3, [pc, #44]	; (800d414 <tcp_receive+0xb20>)
 800d3e6:	681a      	ldr	r2, [r3, #0]
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	4610      	mov	r0, r2
 800d3f0:	f7fb ffc0 	bl	8009374 <pbuf_cat>
 800d3f4:	e018      	b.n	800d428 <tcp_receive+0xb34>
 800d3f6:	bf00      	nop
 800d3f8:	2000016e 	.word	0x2000016e
 800d3fc:	20000164 	.word	0x20000164
 800d400:	20000144 	.word	0x20000144
 800d404:	08014d18 	.word	0x08014d18
 800d408:	080150f8 	.word	0x080150f8
 800d40c:	08014d64 	.word	0x08014d64
 800d410:	08015134 	.word	0x08015134
 800d414:	20000174 	.word	0x20000174
 800d418:	20000171 	.word	0x20000171
 800d41c:	08015154 	.word	0x08015154
            } else {
              recv_data = cseg->p;
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	4a70      	ldr	r2, [pc, #448]	; (800d5e8 <tcp_receive+0xcf4>)
 800d426:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	2200      	movs	r2, #0
 800d42c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	68db      	ldr	r3, [r3, #12]
 800d432:	899b      	ldrh	r3, [r3, #12]
 800d434:	b29b      	uxth	r3, r3
 800d436:	4618      	mov	r0, r3
 800d438:	f7fa fc2b 	bl	8007c92 <lwip_htons>
 800d43c:	4603      	mov	r3, r0
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	f003 0301 	and.w	r3, r3, #1
 800d444:	2b00      	cmp	r3, #0
 800d446:	d00d      	beq.n	800d464 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d448:	4b68      	ldr	r3, [pc, #416]	; (800d5ec <tcp_receive+0xcf8>)
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	f043 0320 	orr.w	r3, r3, #32
 800d450:	b2da      	uxtb	r2, r3
 800d452:	4b66      	ldr	r3, [pc, #408]	; (800d5ec <tcp_receive+0xcf8>)
 800d454:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	7d1b      	ldrb	r3, [r3, #20]
 800d45a:	2b04      	cmp	r3, #4
 800d45c:	d102      	bne.n	800d464 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2207      	movs	r2, #7
 800d462:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d46c:	68b8      	ldr	r0, [r7, #8]
 800d46e:	f7fd faf1 	bl	800aa54 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d476:	2b00      	cmp	r3, #0
 800d478:	d008      	beq.n	800d48c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	685a      	ldr	r2, [r3, #4]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d486:	429a      	cmp	r2, r3
 800d488:	f43f af43 	beq.w	800d312 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	8b5b      	ldrh	r3, [r3, #26]
 800d490:	f003 0301 	and.w	r3, r3, #1
 800d494:	2b00      	cmp	r3, #0
 800d496:	d00e      	beq.n	800d4b6 <tcp_receive+0xbc2>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	8b5b      	ldrh	r3, [r3, #26]
 800d49c:	f023 0301 	bic.w	r3, r3, #1
 800d4a0:	b29a      	uxth	r2, r3
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	835a      	strh	r2, [r3, #26]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	8b5b      	ldrh	r3, [r3, #26]
 800d4aa:	f043 0302 	orr.w	r3, r3, #2
 800d4ae:	b29a      	uxth	r2, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d4b4:	e188      	b.n	800d7c8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	8b5b      	ldrh	r3, [r3, #26]
 800d4ba:	f043 0301 	orr.w	r3, r3, #1
 800d4be:	b29a      	uxth	r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d4c4:	e180      	b.n	800d7c8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d106      	bne.n	800d4dc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d4ce:	4848      	ldr	r0, [pc, #288]	; (800d5f0 <tcp_receive+0xcfc>)
 800d4d0:	f7fd faf6 	bl	800aac0 <tcp_seg_copy>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	675a      	str	r2, [r3, #116]	; 0x74
 800d4da:	e16d      	b.n	800d7b8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4e4:	63bb      	str	r3, [r7, #56]	; 0x38
 800d4e6:	e157      	b.n	800d798 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800d4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ea:	68db      	ldr	r3, [r3, #12]
 800d4ec:	685a      	ldr	r2, [r3, #4]
 800d4ee:	4b41      	ldr	r3, [pc, #260]	; (800d5f4 <tcp_receive+0xd00>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d11d      	bne.n	800d532 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d4f6:	4b3e      	ldr	r3, [pc, #248]	; (800d5f0 <tcp_receive+0xcfc>)
 800d4f8:	891a      	ldrh	r2, [r3, #8]
 800d4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fc:	891b      	ldrh	r3, [r3, #8]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	f240 814f 	bls.w	800d7a2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d504:	483a      	ldr	r0, [pc, #232]	; (800d5f0 <tcp_receive+0xcfc>)
 800d506:	f7fd fadb 	bl	800aac0 <tcp_seg_copy>
 800d50a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	f000 8149 	beq.w	800d7a6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800d514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d516:	2b00      	cmp	r3, #0
 800d518:	d003      	beq.n	800d522 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800d51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d51c:	697a      	ldr	r2, [r7, #20]
 800d51e:	601a      	str	r2, [r3, #0]
 800d520:	e002      	b.n	800d528 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	697a      	ldr	r2, [r7, #20]
 800d526:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d528:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d52a:	6978      	ldr	r0, [r7, #20]
 800d52c:	f7ff f8de 	bl	800c6ec <tcp_oos_insert_segment>
                }
                break;
 800d530:	e139      	b.n	800d7a6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d534:	2b00      	cmp	r3, #0
 800d536:	d117      	bne.n	800d568 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d538:	4b2e      	ldr	r3, [pc, #184]	; (800d5f4 <tcp_receive+0xd00>)
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	1ad3      	subs	r3, r2, r3
 800d544:	2b00      	cmp	r3, #0
 800d546:	da57      	bge.n	800d5f8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d548:	4829      	ldr	r0, [pc, #164]	; (800d5f0 <tcp_receive+0xcfc>)
 800d54a:	f7fd fab9 	bl	800aac0 <tcp_seg_copy>
 800d54e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d550:	69bb      	ldr	r3, [r7, #24]
 800d552:	2b00      	cmp	r3, #0
 800d554:	f000 8129 	beq.w	800d7aa <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	69ba      	ldr	r2, [r7, #24]
 800d55c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d55e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d560:	69b8      	ldr	r0, [r7, #24]
 800d562:	f7ff f8c3 	bl	800c6ec <tcp_oos_insert_segment>
                  }
                  break;
 800d566:	e120      	b.n	800d7aa <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d568:	4b22      	ldr	r3, [pc, #136]	; (800d5f4 <tcp_receive+0xd00>)
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	1ad3      	subs	r3, r2, r3
 800d574:	3b01      	subs	r3, #1
 800d576:	2b00      	cmp	r3, #0
 800d578:	db3e      	blt.n	800d5f8 <tcp_receive+0xd04>
 800d57a:	4b1e      	ldr	r3, [pc, #120]	; (800d5f4 <tcp_receive+0xd00>)
 800d57c:	681a      	ldr	r2, [r3, #0]
 800d57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d580:	68db      	ldr	r3, [r3, #12]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	1ad3      	subs	r3, r2, r3
 800d586:	3301      	adds	r3, #1
 800d588:	2b00      	cmp	r3, #0
 800d58a:	dc35      	bgt.n	800d5f8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d58c:	4818      	ldr	r0, [pc, #96]	; (800d5f0 <tcp_receive+0xcfc>)
 800d58e:	f7fd fa97 	bl	800aac0 <tcp_seg_copy>
 800d592:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d594:	69fb      	ldr	r3, [r7, #28]
 800d596:	2b00      	cmp	r3, #0
 800d598:	f000 8109 	beq.w	800d7ae <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5a4:	8912      	ldrh	r2, [r2, #8]
 800d5a6:	441a      	add	r2, r3
 800d5a8:	4b12      	ldr	r3, [pc, #72]	; (800d5f4 <tcp_receive+0xd00>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	1ad3      	subs	r3, r2, r3
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	dd12      	ble.n	800d5d8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d5b2:	4b10      	ldr	r3, [pc, #64]	; (800d5f4 <tcp_receive+0xd00>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ba:	68db      	ldr	r3, [r3, #12]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	1ad3      	subs	r3, r2, r3
 800d5c2:	b29a      	uxth	r2, r3
 800d5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5c6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ca:	685a      	ldr	r2, [r3, #4]
 800d5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ce:	891b      	ldrh	r3, [r3, #8]
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	4610      	mov	r0, r2
 800d5d4:	f7fb fc86 	bl	8008ee4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5da:	69fa      	ldr	r2, [r7, #28]
 800d5dc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d5de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d5e0:	69f8      	ldr	r0, [r7, #28]
 800d5e2:	f7ff f883 	bl	800c6ec <tcp_oos_insert_segment>
                  }
                  break;
 800d5e6:	e0e2      	b.n	800d7ae <tcp_receive+0xeba>
 800d5e8:	20000174 	.word	0x20000174
 800d5ec:	20000171 	.word	0x20000171
 800d5f0:	20000144 	.word	0x20000144
 800d5f4:	20000164 	.word	0x20000164
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5fa:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	f040 80c6 	bne.w	800d792 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d606:	4b80      	ldr	r3, [pc, #512]	; (800d808 <tcp_receive+0xf14>)
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d612:	2b00      	cmp	r3, #0
 800d614:	f340 80bd 	ble.w	800d792 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	899b      	ldrh	r3, [r3, #12]
 800d61e:	b29b      	uxth	r3, r3
 800d620:	4618      	mov	r0, r3
 800d622:	f7fa fb36 	bl	8007c92 <lwip_htons>
 800d626:	4603      	mov	r3, r0
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	f003 0301 	and.w	r3, r3, #1
 800d62e:	2b00      	cmp	r3, #0
 800d630:	f040 80bf 	bne.w	800d7b2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d634:	4875      	ldr	r0, [pc, #468]	; (800d80c <tcp_receive+0xf18>)
 800d636:	f7fd fa43 	bl	800aac0 <tcp_seg_copy>
 800d63a:	4602      	mov	r2, r0
 800d63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	f000 80b6 	beq.w	800d7b6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d652:	8912      	ldrh	r2, [r2, #8]
 800d654:	441a      	add	r2, r3
 800d656:	4b6c      	ldr	r3, [pc, #432]	; (800d808 <tcp_receive+0xf14>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	1ad3      	subs	r3, r2, r3
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	dd12      	ble.n	800d686 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d660:	4b69      	ldr	r3, [pc, #420]	; (800d808 <tcp_receive+0xf14>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	b29a      	uxth	r2, r3
 800d666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d668:	68db      	ldr	r3, [r3, #12]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	1ad3      	subs	r3, r2, r3
 800d670:	b29a      	uxth	r2, r3
 800d672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d674:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d678:	685a      	ldr	r2, [r3, #4]
 800d67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67c:	891b      	ldrh	r3, [r3, #8]
 800d67e:	4619      	mov	r1, r3
 800d680:	4610      	mov	r0, r2
 800d682:	f7fb fc2f 	bl	8008ee4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d686:	4b62      	ldr	r3, [pc, #392]	; (800d810 <tcp_receive+0xf1c>)
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	461a      	mov	r2, r3
 800d68c:	4b5e      	ldr	r3, [pc, #376]	; (800d808 <tcp_receive+0xf14>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	441a      	add	r2, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d696:	6879      	ldr	r1, [r7, #4]
 800d698:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d69a:	440b      	add	r3, r1
 800d69c:	1ad3      	subs	r3, r2, r3
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	f340 8089 	ble.w	800d7b6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	899b      	ldrh	r3, [r3, #12]
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fa faef 	bl	8007c92 <lwip_htons>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	f003 0301 	and.w	r3, r3, #1
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d022      	beq.n	800d706 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	899b      	ldrh	r3, [r3, #12]
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	b21b      	sxth	r3, r3
 800d6cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d6d0:	b21c      	sxth	r4, r3
 800d6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	899b      	ldrh	r3, [r3, #12]
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7fa fad8 	bl	8007c92 <lwip_htons>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7fa facf 	bl	8007c92 <lwip_htons>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	b21b      	sxth	r3, r3
 800d6f8:	4323      	orrs	r3, r4
 800d6fa:	b21a      	sxth	r2, r3
 800d6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	b292      	uxth	r2, r2
 800d704:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70a:	b29a      	uxth	r2, r3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d710:	4413      	add	r3, r2
 800d712:	b299      	uxth	r1, r3
 800d714:	4b3c      	ldr	r3, [pc, #240]	; (800d808 <tcp_receive+0xf14>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	b29a      	uxth	r2, r3
 800d71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	1a8a      	subs	r2, r1, r2
 800d720:	b292      	uxth	r2, r2
 800d722:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	685a      	ldr	r2, [r3, #4]
 800d72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	891b      	ldrh	r3, [r3, #8]
 800d730:	4619      	mov	r1, r3
 800d732:	4610      	mov	r0, r2
 800d734:	f7fb fbd6 	bl	8008ee4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	891c      	ldrh	r4, [r3, #8]
 800d73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	68db      	ldr	r3, [r3, #12]
 800d744:	899b      	ldrh	r3, [r3, #12]
 800d746:	b29b      	uxth	r3, r3
 800d748:	4618      	mov	r0, r3
 800d74a:	f7fa faa2 	bl	8007c92 <lwip_htons>
 800d74e:	4603      	mov	r3, r0
 800d750:	b2db      	uxtb	r3, r3
 800d752:	f003 0303 	and.w	r3, r3, #3
 800d756:	2b00      	cmp	r3, #0
 800d758:	d001      	beq.n	800d75e <tcp_receive+0xe6a>
 800d75a:	2301      	movs	r3, #1
 800d75c:	e000      	b.n	800d760 <tcp_receive+0xe6c>
 800d75e:	2300      	movs	r3, #0
 800d760:	4423      	add	r3, r4
 800d762:	b29a      	uxth	r2, r3
 800d764:	4b2a      	ldr	r3, [pc, #168]	; (800d810 <tcp_receive+0xf1c>)
 800d766:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d768:	4b29      	ldr	r3, [pc, #164]	; (800d810 <tcp_receive+0xf1c>)
 800d76a:	881b      	ldrh	r3, [r3, #0]
 800d76c:	461a      	mov	r2, r3
 800d76e:	4b26      	ldr	r3, [pc, #152]	; (800d808 <tcp_receive+0xf14>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	441a      	add	r2, r3
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d778:	6879      	ldr	r1, [r7, #4]
 800d77a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d77c:	440b      	add	r3, r1
 800d77e:	429a      	cmp	r2, r3
 800d780:	d019      	beq.n	800d7b6 <tcp_receive+0xec2>
 800d782:	4b24      	ldr	r3, [pc, #144]	; (800d814 <tcp_receive+0xf20>)
 800d784:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d788:	4923      	ldr	r1, [pc, #140]	; (800d818 <tcp_receive+0xf24>)
 800d78a:	4824      	ldr	r0, [pc, #144]	; (800d81c <tcp_receive+0xf28>)
 800d78c:	f005 f9de 	bl	8012b4c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d790:	e011      	b.n	800d7b6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	63bb      	str	r3, [r7, #56]	; 0x38
 800d798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	f47f aea4 	bne.w	800d4e8 <tcp_receive+0xbf4>
 800d7a0:	e00a      	b.n	800d7b8 <tcp_receive+0xec4>
                break;
 800d7a2:	bf00      	nop
 800d7a4:	e008      	b.n	800d7b8 <tcp_receive+0xec4>
                break;
 800d7a6:	bf00      	nop
 800d7a8:	e006      	b.n	800d7b8 <tcp_receive+0xec4>
                  break;
 800d7aa:	bf00      	nop
 800d7ac:	e004      	b.n	800d7b8 <tcp_receive+0xec4>
                  break;
 800d7ae:	bf00      	nop
 800d7b0:	e002      	b.n	800d7b8 <tcp_receive+0xec4>
                  break;
 800d7b2:	bf00      	nop
 800d7b4:	e000      	b.n	800d7b8 <tcp_receive+0xec4>
                break;
 800d7b6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f001 fe9b 	bl	800f4f4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d7be:	e003      	b.n	800d7c8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f001 fe97 	bl	800f4f4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d7c6:	e01a      	b.n	800d7fe <tcp_receive+0xf0a>
 800d7c8:	e019      	b.n	800d7fe <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d7ca:	4b0f      	ldr	r3, [pc, #60]	; (800d808 <tcp_receive+0xf14>)
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7d2:	1ad3      	subs	r3, r2, r3
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	db0a      	blt.n	800d7ee <tcp_receive+0xefa>
 800d7d8:	4b0b      	ldr	r3, [pc, #44]	; (800d808 <tcp_receive+0xf14>)
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e0:	6879      	ldr	r1, [r7, #4]
 800d7e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d7e4:	440b      	add	r3, r1
 800d7e6:	1ad3      	subs	r3, r2, r3
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	dd07      	ble.n	800d7fe <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	8b5b      	ldrh	r3, [r3, #26]
 800d7f2:	f043 0302 	orr.w	r3, r3, #2
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d7fc:	e7ff      	b.n	800d7fe <tcp_receive+0xf0a>
 800d7fe:	bf00      	nop
 800d800:	3750      	adds	r7, #80	; 0x50
 800d802:	46bd      	mov	sp, r7
 800d804:	bdb0      	pop	{r4, r5, r7, pc}
 800d806:	bf00      	nop
 800d808:	20000164 	.word	0x20000164
 800d80c:	20000144 	.word	0x20000144
 800d810:	2000016e 	.word	0x2000016e
 800d814:	08014d18 	.word	0x08014d18
 800d818:	080150c0 	.word	0x080150c0
 800d81c:	08014d64 	.word	0x08014d64

0800d820 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d820:	b480      	push	{r7}
 800d822:	b083      	sub	sp, #12
 800d824:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d826:	4b15      	ldr	r3, [pc, #84]	; (800d87c <tcp_get_next_optbyte+0x5c>)
 800d828:	881b      	ldrh	r3, [r3, #0]
 800d82a:	1c5a      	adds	r2, r3, #1
 800d82c:	b291      	uxth	r1, r2
 800d82e:	4a13      	ldr	r2, [pc, #76]	; (800d87c <tcp_get_next_optbyte+0x5c>)
 800d830:	8011      	strh	r1, [r2, #0]
 800d832:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d834:	4b12      	ldr	r3, [pc, #72]	; (800d880 <tcp_get_next_optbyte+0x60>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d004      	beq.n	800d846 <tcp_get_next_optbyte+0x26>
 800d83c:	4b11      	ldr	r3, [pc, #68]	; (800d884 <tcp_get_next_optbyte+0x64>)
 800d83e:	881b      	ldrh	r3, [r3, #0]
 800d840:	88fa      	ldrh	r2, [r7, #6]
 800d842:	429a      	cmp	r2, r3
 800d844:	d208      	bcs.n	800d858 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d846:	4b10      	ldr	r3, [pc, #64]	; (800d888 <tcp_get_next_optbyte+0x68>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	3314      	adds	r3, #20
 800d84c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d84e:	88fb      	ldrh	r3, [r7, #6]
 800d850:	683a      	ldr	r2, [r7, #0]
 800d852:	4413      	add	r3, r2
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	e00b      	b.n	800d870 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d858:	88fb      	ldrh	r3, [r7, #6]
 800d85a:	b2da      	uxtb	r2, r3
 800d85c:	4b09      	ldr	r3, [pc, #36]	; (800d884 <tcp_get_next_optbyte+0x64>)
 800d85e:	881b      	ldrh	r3, [r3, #0]
 800d860:	b2db      	uxtb	r3, r3
 800d862:	1ad3      	subs	r3, r2, r3
 800d864:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d866:	4b06      	ldr	r3, [pc, #24]	; (800d880 <tcp_get_next_optbyte+0x60>)
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	797b      	ldrb	r3, [r7, #5]
 800d86c:	4413      	add	r3, r2
 800d86e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d870:	4618      	mov	r0, r3
 800d872:	370c      	adds	r7, #12
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr
 800d87c:	20000160 	.word	0x20000160
 800d880:	2000015c 	.word	0x2000015c
 800d884:	2000015a 	.word	0x2000015a
 800d888:	20000154 	.word	0x20000154

0800d88c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d106      	bne.n	800d8a8 <tcp_parseopt+0x1c>
 800d89a:	4b31      	ldr	r3, [pc, #196]	; (800d960 <tcp_parseopt+0xd4>)
 800d89c:	f240 727d 	movw	r2, #1917	; 0x77d
 800d8a0:	4930      	ldr	r1, [pc, #192]	; (800d964 <tcp_parseopt+0xd8>)
 800d8a2:	4831      	ldr	r0, [pc, #196]	; (800d968 <tcp_parseopt+0xdc>)
 800d8a4:	f005 f952 	bl	8012b4c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d8a8:	4b30      	ldr	r3, [pc, #192]	; (800d96c <tcp_parseopt+0xe0>)
 800d8aa:	881b      	ldrh	r3, [r3, #0]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d053      	beq.n	800d958 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d8b0:	4b2f      	ldr	r3, [pc, #188]	; (800d970 <tcp_parseopt+0xe4>)
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	801a      	strh	r2, [r3, #0]
 800d8b6:	e043      	b.n	800d940 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800d8b8:	f7ff ffb2 	bl	800d820 <tcp_get_next_optbyte>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d8c0:	7bfb      	ldrb	r3, [r7, #15]
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d03c      	beq.n	800d940 <tcp_parseopt+0xb4>
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	d002      	beq.n	800d8d0 <tcp_parseopt+0x44>
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d03f      	beq.n	800d94e <tcp_parseopt+0xc2>
 800d8ce:	e026      	b.n	800d91e <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d8d0:	f7ff ffa6 	bl	800d820 <tcp_get_next_optbyte>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	2b04      	cmp	r3, #4
 800d8d8:	d13b      	bne.n	800d952 <tcp_parseopt+0xc6>
 800d8da:	4b25      	ldr	r3, [pc, #148]	; (800d970 <tcp_parseopt+0xe4>)
 800d8dc:	881b      	ldrh	r3, [r3, #0]
 800d8de:	3302      	adds	r3, #2
 800d8e0:	4a22      	ldr	r2, [pc, #136]	; (800d96c <tcp_parseopt+0xe0>)
 800d8e2:	8812      	ldrh	r2, [r2, #0]
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	dc34      	bgt.n	800d952 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d8e8:	f7ff ff9a 	bl	800d820 <tcp_get_next_optbyte>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	021b      	lsls	r3, r3, #8
 800d8f2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d8f4:	f7ff ff94 	bl	800d820 <tcp_get_next_optbyte>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	89bb      	ldrh	r3, [r7, #12]
 800d8fe:	4313      	orrs	r3, r2
 800d900:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d902:	89bb      	ldrh	r3, [r7, #12]
 800d904:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d908:	d804      	bhi.n	800d914 <tcp_parseopt+0x88>
 800d90a:	89bb      	ldrh	r3, [r7, #12]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d001      	beq.n	800d914 <tcp_parseopt+0x88>
 800d910:	89ba      	ldrh	r2, [r7, #12]
 800d912:	e001      	b.n	800d918 <tcp_parseopt+0x8c>
 800d914:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d91c:	e010      	b.n	800d940 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d91e:	f7ff ff7f 	bl	800d820 <tcp_get_next_optbyte>
 800d922:	4603      	mov	r3, r0
 800d924:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d926:	7afb      	ldrb	r3, [r7, #11]
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d914      	bls.n	800d956 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d92c:	7afb      	ldrb	r3, [r7, #11]
 800d92e:	b29a      	uxth	r2, r3
 800d930:	4b0f      	ldr	r3, [pc, #60]	; (800d970 <tcp_parseopt+0xe4>)
 800d932:	881b      	ldrh	r3, [r3, #0]
 800d934:	4413      	add	r3, r2
 800d936:	b29b      	uxth	r3, r3
 800d938:	3b02      	subs	r3, #2
 800d93a:	b29a      	uxth	r2, r3
 800d93c:	4b0c      	ldr	r3, [pc, #48]	; (800d970 <tcp_parseopt+0xe4>)
 800d93e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d940:	4b0b      	ldr	r3, [pc, #44]	; (800d970 <tcp_parseopt+0xe4>)
 800d942:	881a      	ldrh	r2, [r3, #0]
 800d944:	4b09      	ldr	r3, [pc, #36]	; (800d96c <tcp_parseopt+0xe0>)
 800d946:	881b      	ldrh	r3, [r3, #0]
 800d948:	429a      	cmp	r2, r3
 800d94a:	d3b5      	bcc.n	800d8b8 <tcp_parseopt+0x2c>
 800d94c:	e004      	b.n	800d958 <tcp_parseopt+0xcc>
          return;
 800d94e:	bf00      	nop
 800d950:	e002      	b.n	800d958 <tcp_parseopt+0xcc>
            return;
 800d952:	bf00      	nop
 800d954:	e000      	b.n	800d958 <tcp_parseopt+0xcc>
            return;
 800d956:	bf00      	nop
      }
    }
  }
}
 800d958:	3710      	adds	r7, #16
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	08014d18 	.word	0x08014d18
 800d964:	0801517c 	.word	0x0801517c
 800d968:	08014d64 	.word	0x08014d64
 800d96c:	20000158 	.word	0x20000158
 800d970:	20000160 	.word	0x20000160

0800d974 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d974:	b480      	push	{r7}
 800d976:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d978:	4b05      	ldr	r3, [pc, #20]	; (800d990 <tcp_trigger_input_pcb_close+0x1c>)
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	f043 0310 	orr.w	r3, r3, #16
 800d980:	b2da      	uxtb	r2, r3
 800d982:	4b03      	ldr	r3, [pc, #12]	; (800d990 <tcp_trigger_input_pcb_close+0x1c>)
 800d984:	701a      	strb	r2, [r3, #0]
}
 800d986:	bf00      	nop
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr
 800d990:	20000171 	.word	0x20000171

0800d994 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00a      	beq.n	800d9bc <tcp_route+0x28>
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	7a1b      	ldrb	r3, [r3, #8]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d006      	beq.n	800d9bc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	7a1b      	ldrb	r3, [r3, #8]
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fb f8c0 	bl	8008b38 <netif_get_by_index>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	e003      	b.n	800d9c4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f003 fe9f 	bl	8011700 <ip4_route>
 800d9c2:	4603      	mov	r3, r0
  }
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3710      	adds	r7, #16
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}

0800d9cc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d9cc:	b590      	push	{r4, r7, lr}
 800d9ce:	b087      	sub	sp, #28
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	60f8      	str	r0, [r7, #12]
 800d9d4:	60b9      	str	r1, [r7, #8]
 800d9d6:	603b      	str	r3, [r7, #0]
 800d9d8:	4613      	mov	r3, r2
 800d9da:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d105      	bne.n	800d9ee <tcp_create_segment+0x22>
 800d9e2:	4b44      	ldr	r3, [pc, #272]	; (800daf4 <tcp_create_segment+0x128>)
 800d9e4:	22a3      	movs	r2, #163	; 0xa3
 800d9e6:	4944      	ldr	r1, [pc, #272]	; (800daf8 <tcp_create_segment+0x12c>)
 800d9e8:	4844      	ldr	r0, [pc, #272]	; (800dafc <tcp_create_segment+0x130>)
 800d9ea:	f005 f8af 	bl	8012b4c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d105      	bne.n	800da00 <tcp_create_segment+0x34>
 800d9f4:	4b3f      	ldr	r3, [pc, #252]	; (800daf4 <tcp_create_segment+0x128>)
 800d9f6:	22a4      	movs	r2, #164	; 0xa4
 800d9f8:	4941      	ldr	r1, [pc, #260]	; (800db00 <tcp_create_segment+0x134>)
 800d9fa:	4840      	ldr	r0, [pc, #256]	; (800dafc <tcp_create_segment+0x130>)
 800d9fc:	f005 f8a6 	bl	8012b4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800da00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800da04:	009b      	lsls	r3, r3, #2
 800da06:	b2db      	uxtb	r3, r3
 800da08:	f003 0304 	and.w	r3, r3, #4
 800da0c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800da0e:	2003      	movs	r0, #3
 800da10:	f7fa fd94 	bl	800853c <memp_malloc>
 800da14:	6138      	str	r0, [r7, #16]
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d104      	bne.n	800da26 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800da1c:	68b8      	ldr	r0, [r7, #8]
 800da1e:	f7fb fbe7 	bl	80091f0 <pbuf_free>
    return NULL;
 800da22:	2300      	movs	r3, #0
 800da24:	e061      	b.n	800daea <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800da2c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	2200      	movs	r2, #0
 800da32:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	68ba      	ldr	r2, [r7, #8]
 800da38:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	891a      	ldrh	r2, [r3, #8]
 800da3e:	7dfb      	ldrb	r3, [r7, #23]
 800da40:	b29b      	uxth	r3, r3
 800da42:	429a      	cmp	r2, r3
 800da44:	d205      	bcs.n	800da52 <tcp_create_segment+0x86>
 800da46:	4b2b      	ldr	r3, [pc, #172]	; (800daf4 <tcp_create_segment+0x128>)
 800da48:	22b0      	movs	r2, #176	; 0xb0
 800da4a:	492e      	ldr	r1, [pc, #184]	; (800db04 <tcp_create_segment+0x138>)
 800da4c:	482b      	ldr	r0, [pc, #172]	; (800dafc <tcp_create_segment+0x130>)
 800da4e:	f005 f87d 	bl	8012b4c <iprintf>
  seg->len = p->tot_len - optlen;
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	891a      	ldrh	r2, [r3, #8]
 800da56:	7dfb      	ldrb	r3, [r7, #23]
 800da58:	b29b      	uxth	r3, r3
 800da5a:	1ad3      	subs	r3, r2, r3
 800da5c:	b29a      	uxth	r2, r3
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800da62:	2114      	movs	r1, #20
 800da64:	68b8      	ldr	r0, [r7, #8]
 800da66:	f7fb fb2d 	bl	80090c4 <pbuf_add_header>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d004      	beq.n	800da7a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800da70:	6938      	ldr	r0, [r7, #16]
 800da72:	f7fc ffef 	bl	800aa54 <tcp_seg_free>
    return NULL;
 800da76:	2300      	movs	r3, #0
 800da78:	e037      	b.n	800daea <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	685a      	ldr	r2, [r3, #4]
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	8ada      	ldrh	r2, [r3, #22]
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	68dc      	ldr	r4, [r3, #12]
 800da8c:	4610      	mov	r0, r2
 800da8e:	f7fa f900 	bl	8007c92 <lwip_htons>
 800da92:	4603      	mov	r3, r0
 800da94:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	8b1a      	ldrh	r2, [r3, #24]
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	68dc      	ldr	r4, [r3, #12]
 800da9e:	4610      	mov	r0, r2
 800daa0:	f7fa f8f7 	bl	8007c92 <lwip_htons>
 800daa4:	4603      	mov	r3, r0
 800daa6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	68dc      	ldr	r4, [r3, #12]
 800daac:	6838      	ldr	r0, [r7, #0]
 800daae:	f7fa f905 	bl	8007cbc <lwip_htonl>
 800dab2:	4603      	mov	r3, r0
 800dab4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800dab6:	7dfb      	ldrb	r3, [r7, #23]
 800dab8:	089b      	lsrs	r3, r3, #2
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	3305      	adds	r3, #5
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	031b      	lsls	r3, r3, #12
 800dac4:	b29a      	uxth	r2, r3
 800dac6:	79fb      	ldrb	r3, [r7, #7]
 800dac8:	b29b      	uxth	r3, r3
 800daca:	4313      	orrs	r3, r2
 800dacc:	b29a      	uxth	r2, r3
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	68dc      	ldr	r4, [r3, #12]
 800dad2:	4610      	mov	r0, r2
 800dad4:	f7fa f8dd 	bl	8007c92 <lwip_htons>
 800dad8:	4603      	mov	r3, r0
 800dada:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	2200      	movs	r2, #0
 800dae2:	749a      	strb	r2, [r3, #18]
 800dae4:	2200      	movs	r2, #0
 800dae6:	74da      	strb	r2, [r3, #19]
  return seg;
 800dae8:	693b      	ldr	r3, [r7, #16]
}
 800daea:	4618      	mov	r0, r3
 800daec:	371c      	adds	r7, #28
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd90      	pop	{r4, r7, pc}
 800daf2:	bf00      	nop
 800daf4:	08015198 	.word	0x08015198
 800daf8:	080151cc 	.word	0x080151cc
 800dafc:	080151ec 	.word	0x080151ec
 800db00:	08015214 	.word	0x08015214
 800db04:	08015238 	.word	0x08015238

0800db08 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b086      	sub	sp, #24
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	607b      	str	r3, [r7, #4]
 800db10:	4603      	mov	r3, r0
 800db12:	73fb      	strb	r3, [r7, #15]
 800db14:	460b      	mov	r3, r1
 800db16:	81bb      	strh	r3, [r7, #12]
 800db18:	4613      	mov	r3, r2
 800db1a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800db1c:	89bb      	ldrh	r3, [r7, #12]
 800db1e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d105      	bne.n	800db32 <tcp_pbuf_prealloc+0x2a>
 800db26:	4b30      	ldr	r3, [pc, #192]	; (800dbe8 <tcp_pbuf_prealloc+0xe0>)
 800db28:	22e8      	movs	r2, #232	; 0xe8
 800db2a:	4930      	ldr	r1, [pc, #192]	; (800dbec <tcp_pbuf_prealloc+0xe4>)
 800db2c:	4830      	ldr	r0, [pc, #192]	; (800dbf0 <tcp_pbuf_prealloc+0xe8>)
 800db2e:	f005 f80d 	bl	8012b4c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800db32:	6a3b      	ldr	r3, [r7, #32]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d105      	bne.n	800db44 <tcp_pbuf_prealloc+0x3c>
 800db38:	4b2b      	ldr	r3, [pc, #172]	; (800dbe8 <tcp_pbuf_prealloc+0xe0>)
 800db3a:	22e9      	movs	r2, #233	; 0xe9
 800db3c:	492d      	ldr	r1, [pc, #180]	; (800dbf4 <tcp_pbuf_prealloc+0xec>)
 800db3e:	482c      	ldr	r0, [pc, #176]	; (800dbf0 <tcp_pbuf_prealloc+0xe8>)
 800db40:	f005 f804 	bl	8012b4c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800db44:	89ba      	ldrh	r2, [r7, #12]
 800db46:	897b      	ldrh	r3, [r7, #10]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d221      	bcs.n	800db90 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800db4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db50:	f003 0302 	and.w	r3, r3, #2
 800db54:	2b00      	cmp	r3, #0
 800db56:	d111      	bne.n	800db7c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800db58:	6a3b      	ldr	r3, [r7, #32]
 800db5a:	8b5b      	ldrh	r3, [r3, #26]
 800db5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800db60:	2b00      	cmp	r3, #0
 800db62:	d115      	bne.n	800db90 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800db64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d007      	beq.n	800db7c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800db6c:	6a3b      	ldr	r3, [r7, #32]
 800db6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800db70:	2b00      	cmp	r3, #0
 800db72:	d103      	bne.n	800db7c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800db74:	6a3b      	ldr	r3, [r7, #32]
 800db76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d009      	beq.n	800db90 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800db7c:	89bb      	ldrh	r3, [r7, #12]
 800db7e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800db82:	f023 0203 	bic.w	r2, r3, #3
 800db86:	897b      	ldrh	r3, [r7, #10]
 800db88:	4293      	cmp	r3, r2
 800db8a:	bf28      	it	cs
 800db8c:	4613      	movcs	r3, r2
 800db8e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800db90:	8af9      	ldrh	r1, [r7, #22]
 800db92:	7bfb      	ldrb	r3, [r7, #15]
 800db94:	f44f 7220 	mov.w	r2, #640	; 0x280
 800db98:	4618      	mov	r0, r3
 800db9a:	f7fb f849 	bl	8008c30 <pbuf_alloc>
 800db9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d101      	bne.n	800dbaa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800dba6:	2300      	movs	r3, #0
 800dba8:	e019      	b.n	800dbde <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d006      	beq.n	800dbc0 <tcp_pbuf_prealloc+0xb8>
 800dbb2:	4b0d      	ldr	r3, [pc, #52]	; (800dbe8 <tcp_pbuf_prealloc+0xe0>)
 800dbb4:	f240 120b 	movw	r2, #267	; 0x10b
 800dbb8:	490f      	ldr	r1, [pc, #60]	; (800dbf8 <tcp_pbuf_prealloc+0xf0>)
 800dbba:	480d      	ldr	r0, [pc, #52]	; (800dbf0 <tcp_pbuf_prealloc+0xe8>)
 800dbbc:	f004 ffc6 	bl	8012b4c <iprintf>
  *oversize = p->len - length;
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	895a      	ldrh	r2, [r3, #10]
 800dbc4:	89bb      	ldrh	r3, [r7, #12]
 800dbc6:	1ad3      	subs	r3, r2, r3
 800dbc8:	b29a      	uxth	r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	89ba      	ldrh	r2, [r7, #12]
 800dbd2:	811a      	strh	r2, [r3, #8]
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	891a      	ldrh	r2, [r3, #8]
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	815a      	strh	r2, [r3, #10]
  return p;
 800dbdc:	693b      	ldr	r3, [r7, #16]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3718      	adds	r7, #24
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	08015198 	.word	0x08015198
 800dbec:	08015250 	.word	0x08015250
 800dbf0:	080151ec 	.word	0x080151ec
 800dbf4:	08015274 	.word	0x08015274
 800dbf8:	08015294 	.word	0x08015294

0800dbfc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	460b      	mov	r3, r1
 800dc06:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d106      	bne.n	800dc1c <tcp_write_checks+0x20>
 800dc0e:	4b33      	ldr	r3, [pc, #204]	; (800dcdc <tcp_write_checks+0xe0>)
 800dc10:	f240 1233 	movw	r2, #307	; 0x133
 800dc14:	4932      	ldr	r1, [pc, #200]	; (800dce0 <tcp_write_checks+0xe4>)
 800dc16:	4833      	ldr	r0, [pc, #204]	; (800dce4 <tcp_write_checks+0xe8>)
 800dc18:	f004 ff98 	bl	8012b4c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	7d1b      	ldrb	r3, [r3, #20]
 800dc20:	2b04      	cmp	r3, #4
 800dc22:	d00e      	beq.n	800dc42 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800dc28:	2b07      	cmp	r3, #7
 800dc2a:	d00a      	beq.n	800dc42 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800dc30:	2b02      	cmp	r3, #2
 800dc32:	d006      	beq.n	800dc42 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800dc38:	2b03      	cmp	r3, #3
 800dc3a:	d002      	beq.n	800dc42 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800dc3c:	f06f 030a 	mvn.w	r3, #10
 800dc40:	e048      	b.n	800dcd4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800dc42:	887b      	ldrh	r3, [r7, #2]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d101      	bne.n	800dc4c <tcp_write_checks+0x50>
    return ERR_OK;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	e043      	b.n	800dcd4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dc52:	887a      	ldrh	r2, [r7, #2]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d909      	bls.n	800dc6c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	8b5b      	ldrh	r3, [r3, #26]
 800dc5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc60:	b29a      	uxth	r2, r3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800dc66:	f04f 33ff 	mov.w	r3, #4294967295
 800dc6a:	e033      	b.n	800dcd4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc72:	2b08      	cmp	r3, #8
 800dc74:	d909      	bls.n	800dc8a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	8b5b      	ldrh	r3, [r3, #26]
 800dc7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc7e:	b29a      	uxth	r2, r3
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800dc84:	f04f 33ff 	mov.w	r3, #4294967295
 800dc88:	e024      	b.n	800dcd4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d00f      	beq.n	800dcb4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d11a      	bne.n	800dcd2 <tcp_write_checks+0xd6>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d116      	bne.n	800dcd2 <tcp_write_checks+0xd6>
 800dca4:	4b0d      	ldr	r3, [pc, #52]	; (800dcdc <tcp_write_checks+0xe0>)
 800dca6:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800dcaa:	490f      	ldr	r1, [pc, #60]	; (800dce8 <tcp_write_checks+0xec>)
 800dcac:	480d      	ldr	r0, [pc, #52]	; (800dce4 <tcp_write_checks+0xe8>)
 800dcae:	f004 ff4d 	bl	8012b4c <iprintf>
 800dcb2:	e00e      	b.n	800dcd2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d103      	bne.n	800dcc4 <tcp_write_checks+0xc8>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d006      	beq.n	800dcd2 <tcp_write_checks+0xd6>
 800dcc4:	4b05      	ldr	r3, [pc, #20]	; (800dcdc <tcp_write_checks+0xe0>)
 800dcc6:	f240 1259 	movw	r2, #345	; 0x159
 800dcca:	4908      	ldr	r1, [pc, #32]	; (800dcec <tcp_write_checks+0xf0>)
 800dccc:	4805      	ldr	r0, [pc, #20]	; (800dce4 <tcp_write_checks+0xe8>)
 800dcce:	f004 ff3d 	bl	8012b4c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3708      	adds	r7, #8
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	08015198 	.word	0x08015198
 800dce0:	080152a8 	.word	0x080152a8
 800dce4:	080151ec 	.word	0x080151ec
 800dce8:	080152c8 	.word	0x080152c8
 800dcec:	08015304 	.word	0x08015304

0800dcf0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800dcf0:	b590      	push	{r4, r7, lr}
 800dcf2:	b09b      	sub	sp, #108	; 0x6c
 800dcf4:	af04      	add	r7, sp, #16
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	60b9      	str	r1, [r7, #8]
 800dcfa:	4611      	mov	r1, r2
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	460b      	mov	r3, r1
 800dd00:	80fb      	strh	r3, [r7, #6]
 800dd02:	4613      	mov	r3, r2
 800dd04:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800dd06:	2300      	movs	r3, #0
 800dd08:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	653b      	str	r3, [r7, #80]	; 0x50
 800dd0e:	2300      	movs	r3, #0
 800dd10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd12:	2300      	movs	r3, #0
 800dd14:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd16:	2300      	movs	r3, #0
 800dd18:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800dd20:	2300      	movs	r3, #0
 800dd22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800dd26:	2300      	movs	r3, #0
 800dd28:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d109      	bne.n	800dd4c <tcp_write+0x5c>
 800dd38:	4ba5      	ldr	r3, [pc, #660]	; (800dfd0 <tcp_write+0x2e0>)
 800dd3a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800dd3e:	49a5      	ldr	r1, [pc, #660]	; (800dfd4 <tcp_write+0x2e4>)
 800dd40:	48a5      	ldr	r0, [pc, #660]	; (800dfd8 <tcp_write+0x2e8>)
 800dd42:	f004 ff03 	bl	8012b4c <iprintf>
 800dd46:	f06f 030f 	mvn.w	r3, #15
 800dd4a:	e32c      	b.n	800e3a6 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd52:	085b      	lsrs	r3, r3, #1
 800dd54:	b29a      	uxth	r2, r3
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	bf28      	it	cs
 800dd5e:	4613      	movcs	r3, r2
 800dd60:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800dd62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d102      	bne.n	800dd6e <tcp_write+0x7e>
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd6c:	e000      	b.n	800dd70 <tcp_write+0x80>
 800dd6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd70:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d109      	bne.n	800dd8c <tcp_write+0x9c>
 800dd78:	4b95      	ldr	r3, [pc, #596]	; (800dfd0 <tcp_write+0x2e0>)
 800dd7a:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800dd7e:	4997      	ldr	r1, [pc, #604]	; (800dfdc <tcp_write+0x2ec>)
 800dd80:	4895      	ldr	r0, [pc, #596]	; (800dfd8 <tcp_write+0x2e8>)
 800dd82:	f004 fee3 	bl	8012b4c <iprintf>
 800dd86:	f06f 030f 	mvn.w	r3, #15
 800dd8a:	e30c      	b.n	800e3a6 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800dd8c:	88fb      	ldrh	r3, [r7, #6]
 800dd8e:	4619      	mov	r1, r3
 800dd90:	68f8      	ldr	r0, [r7, #12]
 800dd92:	f7ff ff33 	bl	800dbfc <tcp_write_checks>
 800dd96:	4603      	mov	r3, r0
 800dd98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800dd9c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d002      	beq.n	800ddaa <tcp_write+0xba>
    return err;
 800dda4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800dda8:	e2fd      	b.n	800e3a6 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ddb0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	f000 80f7 	beq.w	800dfb2 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddc8:	653b      	str	r3, [r7, #80]	; 0x50
 800ddca:	e002      	b.n	800ddd2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800ddcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ddd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d1f8      	bne.n	800ddcc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ddda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dddc:	7a9b      	ldrb	r3, [r3, #10]
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	f003 0304 	and.w	r3, r3, #4
 800dde6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800dde8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ddea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddec:	891b      	ldrh	r3, [r3, #8]
 800ddee:	4619      	mov	r1, r3
 800ddf0:	8c3b      	ldrh	r3, [r7, #32]
 800ddf2:	440b      	add	r3, r1
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	da06      	bge.n	800de06 <tcp_write+0x116>
 800ddf8:	4b75      	ldr	r3, [pc, #468]	; (800dfd0 <tcp_write+0x2e0>)
 800ddfa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ddfe:	4978      	ldr	r1, [pc, #480]	; (800dfe0 <tcp_write+0x2f0>)
 800de00:	4875      	ldr	r0, [pc, #468]	; (800dfd8 <tcp_write+0x2e8>)
 800de02:	f004 fea3 	bl	8012b4c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800de06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de08:	891a      	ldrh	r2, [r3, #8]
 800de0a:	8c3b      	ldrh	r3, [r7, #32]
 800de0c:	4413      	add	r3, r2
 800de0e:	b29b      	uxth	r3, r3
 800de10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800de12:	1ad3      	subs	r3, r2, r3
 800de14:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800de1c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800de1e:	8a7b      	ldrh	r3, [r7, #18]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d027      	beq.n	800de74 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800de24:	8a7b      	ldrh	r3, [r7, #18]
 800de26:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800de28:	429a      	cmp	r2, r3
 800de2a:	d206      	bcs.n	800de3a <tcp_write+0x14a>
 800de2c:	4b68      	ldr	r3, [pc, #416]	; (800dfd0 <tcp_write+0x2e0>)
 800de2e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800de32:	496c      	ldr	r1, [pc, #432]	; (800dfe4 <tcp_write+0x2f4>)
 800de34:	4868      	ldr	r0, [pc, #416]	; (800dfd8 <tcp_write+0x2e8>)
 800de36:	f004 fe89 	bl	8012b4c <iprintf>
      seg = last_unsent;
 800de3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de3c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800de3e:	8a7b      	ldrh	r3, [r7, #18]
 800de40:	88fa      	ldrh	r2, [r7, #6]
 800de42:	429a      	cmp	r2, r3
 800de44:	d901      	bls.n	800de4a <tcp_write+0x15a>
 800de46:	8a7b      	ldrh	r3, [r7, #18]
 800de48:	e000      	b.n	800de4c <tcp_write+0x15c>
 800de4a:	88fb      	ldrh	r3, [r7, #6]
 800de4c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800de4e:	4293      	cmp	r3, r2
 800de50:	bfa8      	it	ge
 800de52:	4613      	movge	r3, r2
 800de54:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800de56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800de5a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800de5c:	4413      	add	r3, r2
 800de5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800de62:	8a7a      	ldrh	r2, [r7, #18]
 800de64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800de66:	1ad3      	subs	r3, r2, r3
 800de68:	b29b      	uxth	r3, r3
 800de6a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800de6c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800de6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800de70:	1ad3      	subs	r3, r2, r3
 800de72:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800de74:	8a7b      	ldrh	r3, [r7, #18]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d00b      	beq.n	800de92 <tcp_write+0x1a2>
 800de7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800de7e:	88fb      	ldrh	r3, [r7, #6]
 800de80:	429a      	cmp	r2, r3
 800de82:	d006      	beq.n	800de92 <tcp_write+0x1a2>
 800de84:	4b52      	ldr	r3, [pc, #328]	; (800dfd0 <tcp_write+0x2e0>)
 800de86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de8a:	4957      	ldr	r1, [pc, #348]	; (800dfe8 <tcp_write+0x2f8>)
 800de8c:	4852      	ldr	r0, [pc, #328]	; (800dfd8 <tcp_write+0x2e8>)
 800de8e:	f004 fe5d 	bl	8012b4c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800de92:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800de96:	88fb      	ldrh	r3, [r7, #6]
 800de98:	429a      	cmp	r2, r3
 800de9a:	f080 8168 	bcs.w	800e16e <tcp_write+0x47e>
 800de9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	f000 8164 	beq.w	800e16e <tcp_write+0x47e>
 800dea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dea8:	891b      	ldrh	r3, [r3, #8]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	f000 815f 	beq.w	800e16e <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800deb0:	88fa      	ldrh	r2, [r7, #6]
 800deb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800deb6:	1ad2      	subs	r2, r2, r3
 800deb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800deba:	4293      	cmp	r3, r2
 800debc:	bfa8      	it	ge
 800debe:	4613      	movge	r3, r2
 800dec0:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800dec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dec4:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800dec6:	797b      	ldrb	r3, [r7, #5]
 800dec8:	f003 0301 	and.w	r3, r3, #1
 800decc:	2b00      	cmp	r3, #0
 800dece:	d027      	beq.n	800df20 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ded0:	f107 0012 	add.w	r0, r7, #18
 800ded4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ded6:	8bf9      	ldrh	r1, [r7, #30]
 800ded8:	2301      	movs	r3, #1
 800deda:	9302      	str	r3, [sp, #8]
 800dedc:	797b      	ldrb	r3, [r7, #5]
 800dede:	9301      	str	r3, [sp, #4]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	4603      	mov	r3, r0
 800dee6:	2000      	movs	r0, #0
 800dee8:	f7ff fe0e 	bl	800db08 <tcp_pbuf_prealloc>
 800deec:	6578      	str	r0, [r7, #84]	; 0x54
 800deee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800def0:	2b00      	cmp	r3, #0
 800def2:	f000 8226 	beq.w	800e342 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800def6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800def8:	6858      	ldr	r0, [r3, #4]
 800defa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800defe:	68ba      	ldr	r2, [r7, #8]
 800df00:	4413      	add	r3, r2
 800df02:	8bfa      	ldrh	r2, [r7, #30]
 800df04:	4619      	mov	r1, r3
 800df06:	f004 fe0e 	bl	8012b26 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800df0a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800df0c:	f7fb f9f8 	bl	8009300 <pbuf_clen>
 800df10:	4603      	mov	r3, r0
 800df12:	461a      	mov	r2, r3
 800df14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800df18:	4413      	add	r3, r2
 800df1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800df1e:	e041      	b.n	800dfa4 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800df20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	637b      	str	r3, [r7, #52]	; 0x34
 800df26:	e002      	b.n	800df2e <tcp_write+0x23e>
 800df28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	637b      	str	r3, [r7, #52]	; 0x34
 800df2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d1f8      	bne.n	800df28 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800df36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df38:	7b1b      	ldrb	r3, [r3, #12]
 800df3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d115      	bne.n	800df6e <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800df42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df48:	8952      	ldrh	r2, [r2, #10]
 800df4a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800df4c:	68ba      	ldr	r2, [r7, #8]
 800df4e:	429a      	cmp	r2, r3
 800df50:	d10d      	bne.n	800df6e <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800df52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df56:	2b00      	cmp	r3, #0
 800df58:	d006      	beq.n	800df68 <tcp_write+0x278>
 800df5a:	4b1d      	ldr	r3, [pc, #116]	; (800dfd0 <tcp_write+0x2e0>)
 800df5c:	f240 2231 	movw	r2, #561	; 0x231
 800df60:	4922      	ldr	r1, [pc, #136]	; (800dfec <tcp_write+0x2fc>)
 800df62:	481d      	ldr	r0, [pc, #116]	; (800dfd8 <tcp_write+0x2e8>)
 800df64:	f004 fdf2 	bl	8012b4c <iprintf>
          extendlen = seglen;
 800df68:	8bfb      	ldrh	r3, [r7, #30]
 800df6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800df6c:	e01a      	b.n	800dfa4 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800df6e:	8bfb      	ldrh	r3, [r7, #30]
 800df70:	2201      	movs	r2, #1
 800df72:	4619      	mov	r1, r3
 800df74:	2000      	movs	r0, #0
 800df76:	f7fa fe5b 	bl	8008c30 <pbuf_alloc>
 800df7a:	6578      	str	r0, [r7, #84]	; 0x54
 800df7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df7e:	2b00      	cmp	r3, #0
 800df80:	f000 81e1 	beq.w	800e346 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800df84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df88:	68ba      	ldr	r2, [r7, #8]
 800df8a:	441a      	add	r2, r3
 800df8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df8e:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800df90:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800df92:	f7fb f9b5 	bl	8009300 <pbuf_clen>
 800df96:	4603      	mov	r3, r0
 800df98:	461a      	mov	r2, r3
 800df9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800df9e:	4413      	add	r3, r2
 800dfa0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800dfa4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dfa8:	8bfb      	ldrh	r3, [r7, #30]
 800dfaa:	4413      	add	r3, r2
 800dfac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800dfb0:	e0dd      	b.n	800e16e <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	f000 80d8 	beq.w	800e16e <tcp_write+0x47e>
 800dfbe:	4b04      	ldr	r3, [pc, #16]	; (800dfd0 <tcp_write+0x2e0>)
 800dfc0:	f240 224b 	movw	r2, #587	; 0x24b
 800dfc4:	490a      	ldr	r1, [pc, #40]	; (800dff0 <tcp_write+0x300>)
 800dfc6:	4804      	ldr	r0, [pc, #16]	; (800dfd8 <tcp_write+0x2e8>)
 800dfc8:	f004 fdc0 	bl	8012b4c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800dfcc:	e0cf      	b.n	800e16e <tcp_write+0x47e>
 800dfce:	bf00      	nop
 800dfd0:	08015198 	.word	0x08015198
 800dfd4:	08015338 	.word	0x08015338
 800dfd8:	080151ec 	.word	0x080151ec
 800dfdc:	08015350 	.word	0x08015350
 800dfe0:	08015384 	.word	0x08015384
 800dfe4:	0801539c 	.word	0x0801539c
 800dfe8:	080153bc 	.word	0x080153bc
 800dfec:	080153dc 	.word	0x080153dc
 800dff0:	08015408 	.word	0x08015408
    struct pbuf *p;
    u16_t left = len - pos;
 800dff4:	88fa      	ldrh	r2, [r7, #6]
 800dff6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dffa:	1ad3      	subs	r3, r2, r3
 800dffc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800dffe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e002:	b29b      	uxth	r3, r3
 800e004:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e006:	1ad3      	subs	r3, r2, r3
 800e008:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800e00a:	8b7a      	ldrh	r2, [r7, #26]
 800e00c:	8bbb      	ldrh	r3, [r7, #28]
 800e00e:	4293      	cmp	r3, r2
 800e010:	bf28      	it	cs
 800e012:	4613      	movcs	r3, r2
 800e014:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e016:	797b      	ldrb	r3, [r7, #5]
 800e018:	f003 0301 	and.w	r3, r3, #1
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d036      	beq.n	800e08e <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800e020:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e024:	b29a      	uxth	r2, r3
 800e026:	8b3b      	ldrh	r3, [r7, #24]
 800e028:	4413      	add	r3, r2
 800e02a:	b299      	uxth	r1, r3
 800e02c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e02e:	2b00      	cmp	r3, #0
 800e030:	bf0c      	ite	eq
 800e032:	2301      	moveq	r3, #1
 800e034:	2300      	movne	r3, #0
 800e036:	b2db      	uxtb	r3, r3
 800e038:	f107 0012 	add.w	r0, r7, #18
 800e03c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e03e:	9302      	str	r3, [sp, #8]
 800e040:	797b      	ldrb	r3, [r7, #5]
 800e042:	9301      	str	r3, [sp, #4]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	9300      	str	r3, [sp, #0]
 800e048:	4603      	mov	r3, r0
 800e04a:	2036      	movs	r0, #54	; 0x36
 800e04c:	f7ff fd5c 	bl	800db08 <tcp_pbuf_prealloc>
 800e050:	6338      	str	r0, [r7, #48]	; 0x30
 800e052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e054:	2b00      	cmp	r3, #0
 800e056:	f000 8178 	beq.w	800e34a <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800e05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05c:	895b      	ldrh	r3, [r3, #10]
 800e05e:	8b3a      	ldrh	r2, [r7, #24]
 800e060:	429a      	cmp	r2, r3
 800e062:	d906      	bls.n	800e072 <tcp_write+0x382>
 800e064:	4b8c      	ldr	r3, [pc, #560]	; (800e298 <tcp_write+0x5a8>)
 800e066:	f240 2267 	movw	r2, #615	; 0x267
 800e06a:	498c      	ldr	r1, [pc, #560]	; (800e29c <tcp_write+0x5ac>)
 800e06c:	488c      	ldr	r0, [pc, #560]	; (800e2a0 <tcp_write+0x5b0>)
 800e06e:	f004 fd6d 	bl	8012b4c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800e072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e074:	685a      	ldr	r2, [r3, #4]
 800e076:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e07a:	18d0      	adds	r0, r2, r3
 800e07c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e080:	68ba      	ldr	r2, [r7, #8]
 800e082:	4413      	add	r3, r2
 800e084:	8b3a      	ldrh	r2, [r7, #24]
 800e086:	4619      	mov	r1, r3
 800e088:	f004 fd4d 	bl	8012b26 <memcpy>
 800e08c:	e02f      	b.n	800e0ee <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800e08e:	8a7b      	ldrh	r3, [r7, #18]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d006      	beq.n	800e0a2 <tcp_write+0x3b2>
 800e094:	4b80      	ldr	r3, [pc, #512]	; (800e298 <tcp_write+0x5a8>)
 800e096:	f240 2271 	movw	r2, #625	; 0x271
 800e09a:	4982      	ldr	r1, [pc, #520]	; (800e2a4 <tcp_write+0x5b4>)
 800e09c:	4880      	ldr	r0, [pc, #512]	; (800e2a0 <tcp_write+0x5b0>)
 800e09e:	f004 fd55 	bl	8012b4c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800e0a2:	8b3b      	ldrh	r3, [r7, #24]
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	2036      	movs	r0, #54	; 0x36
 800e0aa:	f7fa fdc1 	bl	8008c30 <pbuf_alloc>
 800e0ae:	6178      	str	r0, [r7, #20]
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	f000 814b 	beq.w	800e34e <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800e0b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e0bc:	68ba      	ldr	r2, [r7, #8]
 800e0be:	441a      	add	r2, r3
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e0c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	2036      	movs	r0, #54	; 0x36
 800e0d2:	f7fa fdad 	bl	8008c30 <pbuf_alloc>
 800e0d6:	6338      	str	r0, [r7, #48]	; 0x30
 800e0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d103      	bne.n	800e0e6 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800e0de:	6978      	ldr	r0, [r7, #20]
 800e0e0:	f7fb f886 	bl	80091f0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800e0e4:	e136      	b.n	800e354 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800e0e6:	6979      	ldr	r1, [r7, #20]
 800e0e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0ea:	f7fb f943 	bl	8009374 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800e0ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0f0:	f7fb f906 	bl	8009300 <pbuf_clen>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e0fc:	4413      	add	r3, r2
 800e0fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800e102:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e106:	2b09      	cmp	r3, #9
 800e108:	d903      	bls.n	800e112 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800e10a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e10c:	f7fb f870 	bl	80091f0 <pbuf_free>
      goto memerr;
 800e110:	e120      	b.n	800e354 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e116:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e11a:	441a      	add	r2, r3
 800e11c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	4613      	mov	r3, r2
 800e124:	2200      	movs	r2, #0
 800e126:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e128:	68f8      	ldr	r0, [r7, #12]
 800e12a:	f7ff fc4f 	bl	800d9cc <tcp_create_segment>
 800e12e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e132:	2b00      	cmp	r3, #0
 800e134:	f000 810d 	beq.w	800e352 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800e138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d102      	bne.n	800e144 <tcp_write+0x454>
      queue = seg;
 800e13e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e140:	647b      	str	r3, [r7, #68]	; 0x44
 800e142:	e00c      	b.n	800e15e <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800e144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e146:	2b00      	cmp	r3, #0
 800e148:	d106      	bne.n	800e158 <tcp_write+0x468>
 800e14a:	4b53      	ldr	r3, [pc, #332]	; (800e298 <tcp_write+0x5a8>)
 800e14c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e150:	4955      	ldr	r1, [pc, #340]	; (800e2a8 <tcp_write+0x5b8>)
 800e152:	4853      	ldr	r0, [pc, #332]	; (800e2a0 <tcp_write+0x5b0>)
 800e154:	f004 fcfa 	bl	8012b4c <iprintf>
      prev_seg->next = seg;
 800e158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e15a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e15c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800e15e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e160:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800e162:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e166:	8b3b      	ldrh	r3, [r7, #24]
 800e168:	4413      	add	r3, r2
 800e16a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800e16e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e172:	88fb      	ldrh	r3, [r7, #6]
 800e174:	429a      	cmp	r2, r3
 800e176:	f4ff af3d 	bcc.w	800dff4 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800e17a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d02c      	beq.n	800e1da <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800e180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e182:	685b      	ldr	r3, [r3, #4]
 800e184:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e186:	e01e      	b.n	800e1c6 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 800e188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18a:	891a      	ldrh	r2, [r3, #8]
 800e18c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e18e:	4413      	add	r3, r2
 800e190:	b29a      	uxth	r2, r3
 800e192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e194:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800e196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d110      	bne.n	800e1c0 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800e19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a0:	685b      	ldr	r3, [r3, #4]
 800e1a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1a4:	8952      	ldrh	r2, [r2, #10]
 800e1a6:	4413      	add	r3, r2
 800e1a8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e1aa:	68b9      	ldr	r1, [r7, #8]
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f004 fcba 	bl	8012b26 <memcpy>
        p->len += oversize_used;
 800e1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b4:	895a      	ldrh	r2, [r3, #10]
 800e1b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e1b8:	4413      	add	r3, r2
 800e1ba:	b29a      	uxth	r2, r3
 800e1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1be:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800e1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d1dd      	bne.n	800e188 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 800e1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1ce:	891a      	ldrh	r2, [r3, #8]
 800e1d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e1d2:	4413      	add	r3, r2
 800e1d4:	b29a      	uxth	r2, r3
 800e1d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1d8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800e1da:	8a7a      	ldrh	r2, [r7, #18]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800e1e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d018      	beq.n	800e21a <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800e1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d106      	bne.n	800e1fc <tcp_write+0x50c>
 800e1ee:	4b2a      	ldr	r3, [pc, #168]	; (800e298 <tcp_write+0x5a8>)
 800e1f0:	f240 22e1 	movw	r2, #737	; 0x2e1
 800e1f4:	492d      	ldr	r1, [pc, #180]	; (800e2ac <tcp_write+0x5bc>)
 800e1f6:	482a      	ldr	r0, [pc, #168]	; (800e2a0 <tcp_write+0x5b0>)
 800e1f8:	f004 fca8 	bl	8012b4c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800e1fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e202:	4618      	mov	r0, r3
 800e204:	f7fb f8b6 	bl	8009374 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800e208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e20a:	891a      	ldrh	r2, [r3, #8]
 800e20c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e20e:	891b      	ldrh	r3, [r3, #8]
 800e210:	4413      	add	r3, r2
 800e212:	b29a      	uxth	r2, r3
 800e214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e216:	811a      	strh	r2, [r3, #8]
 800e218:	e037      	b.n	800e28a <tcp_write+0x59a>
  } else if (extendlen > 0) {
 800e21a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d034      	beq.n	800e28a <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e222:	2b00      	cmp	r3, #0
 800e224:	d003      	beq.n	800e22e <tcp_write+0x53e>
 800e226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d106      	bne.n	800e23c <tcp_write+0x54c>
 800e22e:	4b1a      	ldr	r3, [pc, #104]	; (800e298 <tcp_write+0x5a8>)
 800e230:	f240 22e7 	movw	r2, #743	; 0x2e7
 800e234:	491e      	ldr	r1, [pc, #120]	; (800e2b0 <tcp_write+0x5c0>)
 800e236:	481a      	ldr	r0, [pc, #104]	; (800e2a0 <tcp_write+0x5b0>)
 800e238:	f004 fc88 	bl	8012b4c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e23c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	62bb      	str	r3, [r7, #40]	; 0x28
 800e242:	e009      	b.n	800e258 <tcp_write+0x568>
      p->tot_len += extendlen;
 800e244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e246:	891a      	ldrh	r2, [r3, #8]
 800e248:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e24a:	4413      	add	r3, r2
 800e24c:	b29a      	uxth	r2, r3
 800e24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e250:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	62bb      	str	r3, [r7, #40]	; 0x28
 800e258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d1f1      	bne.n	800e244 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 800e260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e262:	891a      	ldrh	r2, [r3, #8]
 800e264:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e266:	4413      	add	r3, r2
 800e268:	b29a      	uxth	r2, r3
 800e26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800e26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e270:	895a      	ldrh	r2, [r3, #10]
 800e272:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e274:	4413      	add	r3, r2
 800e276:	b29a      	uxth	r2, r3
 800e278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800e27c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e27e:	891a      	ldrh	r2, [r3, #8]
 800e280:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e282:	4413      	add	r3, r2
 800e284:	b29a      	uxth	r2, r3
 800e286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e288:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800e28a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d111      	bne.n	800e2b4 <tcp_write+0x5c4>
    pcb->unsent = queue;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e294:	66da      	str	r2, [r3, #108]	; 0x6c
 800e296:	e010      	b.n	800e2ba <tcp_write+0x5ca>
 800e298:	08015198 	.word	0x08015198
 800e29c:	08015438 	.word	0x08015438
 800e2a0:	080151ec 	.word	0x080151ec
 800e2a4:	08015478 	.word	0x08015478
 800e2a8:	08015488 	.word	0x08015488
 800e2ac:	0801549c 	.word	0x0801549c
 800e2b0:	080154d4 	.word	0x080154d4
  } else {
    last_unsent->next = queue;
 800e2b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e2b8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e2be:	88fb      	ldrh	r3, [r7, #6]
 800e2c0:	441a      	add	r2, r3
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e2cc:	88fb      	ldrh	r3, [r7, #6]
 800e2ce:	1ad3      	subs	r3, r2, r3
 800e2d0:	b29a      	uxth	r2, r3
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e2de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d00e      	beq.n	800e30a <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d10a      	bne.n	800e30a <tcp_write+0x61a>
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d106      	bne.n	800e30a <tcp_write+0x61a>
 800e2fc:	4b2c      	ldr	r3, [pc, #176]	; (800e3b0 <tcp_write+0x6c0>)
 800e2fe:	f240 3213 	movw	r2, #787	; 0x313
 800e302:	492c      	ldr	r1, [pc, #176]	; (800e3b4 <tcp_write+0x6c4>)
 800e304:	482c      	ldr	r0, [pc, #176]	; (800e3b8 <tcp_write+0x6c8>)
 800e306:	f004 fc21 	bl	8012b4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800e30a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d016      	beq.n	800e33e <tcp_write+0x64e>
 800e310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d012      	beq.n	800e33e <tcp_write+0x64e>
 800e318:	797b      	ldrb	r3, [r7, #5]
 800e31a:	f003 0302 	and.w	r3, r3, #2
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d10d      	bne.n	800e33e <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800e322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	899b      	ldrh	r3, [r3, #12]
 800e328:	b29c      	uxth	r4, r3
 800e32a:	2008      	movs	r0, #8
 800e32c:	f7f9 fcb1 	bl	8007c92 <lwip_htons>
 800e330:	4603      	mov	r3, r0
 800e332:	461a      	mov	r2, r3
 800e334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e336:	68db      	ldr	r3, [r3, #12]
 800e338:	4322      	orrs	r2, r4
 800e33a:	b292      	uxth	r2, r2
 800e33c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800e33e:	2300      	movs	r3, #0
 800e340:	e031      	b.n	800e3a6 <tcp_write+0x6b6>
          goto memerr;
 800e342:	bf00      	nop
 800e344:	e006      	b.n	800e354 <tcp_write+0x664>
            goto memerr;
 800e346:	bf00      	nop
 800e348:	e004      	b.n	800e354 <tcp_write+0x664>
        goto memerr;
 800e34a:	bf00      	nop
 800e34c:	e002      	b.n	800e354 <tcp_write+0x664>
        goto memerr;
 800e34e:	bf00      	nop
 800e350:	e000      	b.n	800e354 <tcp_write+0x664>
      goto memerr;
 800e352:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	8b5b      	ldrh	r3, [r3, #26]
 800e358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e35c:	b29a      	uxth	r2, r3
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800e362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e364:	2b00      	cmp	r3, #0
 800e366:	d002      	beq.n	800e36e <tcp_write+0x67e>
    pbuf_free(concat_p);
 800e368:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e36a:	f7fa ff41 	bl	80091f0 <pbuf_free>
  }
  if (queue != NULL) {
 800e36e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e370:	2b00      	cmp	r3, #0
 800e372:	d002      	beq.n	800e37a <tcp_write+0x68a>
    tcp_segs_free(queue);
 800e374:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e376:	f7fc fb59 	bl	800aa2c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e380:	2b00      	cmp	r3, #0
 800e382:	d00e      	beq.n	800e3a2 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d10a      	bne.n	800e3a2 <tcp_write+0x6b2>
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e390:	2b00      	cmp	r3, #0
 800e392:	d106      	bne.n	800e3a2 <tcp_write+0x6b2>
 800e394:	4b06      	ldr	r3, [pc, #24]	; (800e3b0 <tcp_write+0x6c0>)
 800e396:	f44f 724a 	mov.w	r2, #808	; 0x328
 800e39a:	4906      	ldr	r1, [pc, #24]	; (800e3b4 <tcp_write+0x6c4>)
 800e39c:	4806      	ldr	r0, [pc, #24]	; (800e3b8 <tcp_write+0x6c8>)
 800e39e:	f004 fbd5 	bl	8012b4c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800e3a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	375c      	adds	r7, #92	; 0x5c
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd90      	pop	{r4, r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	08015198 	.word	0x08015198
 800e3b4:	0801550c 	.word	0x0801550c
 800e3b8:	080151ec 	.word	0x080151ec

0800e3bc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e3bc:	b590      	push	{r4, r7, lr}
 800e3be:	b08b      	sub	sp, #44	; 0x2c
 800e3c0:	af02      	add	r7, sp, #8
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	61fb      	str	r3, [r7, #28]
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d106      	bne.n	800e3e8 <tcp_split_unsent_seg+0x2c>
 800e3da:	4b95      	ldr	r3, [pc, #596]	; (800e630 <tcp_split_unsent_seg+0x274>)
 800e3dc:	f240 324b 	movw	r2, #843	; 0x34b
 800e3e0:	4994      	ldr	r1, [pc, #592]	; (800e634 <tcp_split_unsent_seg+0x278>)
 800e3e2:	4895      	ldr	r0, [pc, #596]	; (800e638 <tcp_split_unsent_seg+0x27c>)
 800e3e4:	f004 fbb2 	bl	8012b4c <iprintf>

  useg = pcb->unsent;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3ec:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d102      	bne.n	800e3fa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3f8:	e116      	b.n	800e628 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e3fa:	887b      	ldrh	r3, [r7, #2]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d109      	bne.n	800e414 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e400:	4b8b      	ldr	r3, [pc, #556]	; (800e630 <tcp_split_unsent_seg+0x274>)
 800e402:	f240 3253 	movw	r2, #851	; 0x353
 800e406:	498d      	ldr	r1, [pc, #564]	; (800e63c <tcp_split_unsent_seg+0x280>)
 800e408:	488b      	ldr	r0, [pc, #556]	; (800e638 <tcp_split_unsent_seg+0x27c>)
 800e40a:	f004 fb9f 	bl	8012b4c <iprintf>
    return ERR_VAL;
 800e40e:	f06f 0305 	mvn.w	r3, #5
 800e412:	e109      	b.n	800e628 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	891b      	ldrh	r3, [r3, #8]
 800e418:	887a      	ldrh	r2, [r7, #2]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d301      	bcc.n	800e422 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e41e:	2300      	movs	r3, #0
 800e420:	e102      	b.n	800e628 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e426:	887a      	ldrh	r2, [r7, #2]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d906      	bls.n	800e43a <tcp_split_unsent_seg+0x7e>
 800e42c:	4b80      	ldr	r3, [pc, #512]	; (800e630 <tcp_split_unsent_seg+0x274>)
 800e42e:	f240 325b 	movw	r2, #859	; 0x35b
 800e432:	4983      	ldr	r1, [pc, #524]	; (800e640 <tcp_split_unsent_seg+0x284>)
 800e434:	4880      	ldr	r0, [pc, #512]	; (800e638 <tcp_split_unsent_seg+0x27c>)
 800e436:	f004 fb89 	bl	8012b4c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	891b      	ldrh	r3, [r3, #8]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d106      	bne.n	800e450 <tcp_split_unsent_seg+0x94>
 800e442:	4b7b      	ldr	r3, [pc, #492]	; (800e630 <tcp_split_unsent_seg+0x274>)
 800e444:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e448:	497e      	ldr	r1, [pc, #504]	; (800e644 <tcp_split_unsent_seg+0x288>)
 800e44a:	487b      	ldr	r0, [pc, #492]	; (800e638 <tcp_split_unsent_seg+0x27c>)
 800e44c:	f004 fb7e 	bl	8012b4c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	7a9b      	ldrb	r3, [r3, #10]
 800e454:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e456:	7bfb      	ldrb	r3, [r7, #15]
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	b2db      	uxtb	r3, r3
 800e45c:	f003 0304 	and.w	r3, r3, #4
 800e460:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	891a      	ldrh	r2, [r3, #8]
 800e466:	887b      	ldrh	r3, [r7, #2]
 800e468:	1ad3      	subs	r3, r2, r3
 800e46a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e46c:	7bbb      	ldrb	r3, [r7, #14]
 800e46e:	b29a      	uxth	r2, r3
 800e470:	89bb      	ldrh	r3, [r7, #12]
 800e472:	4413      	add	r3, r2
 800e474:	b29b      	uxth	r3, r3
 800e476:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e47a:	4619      	mov	r1, r3
 800e47c:	2036      	movs	r0, #54	; 0x36
 800e47e:	f7fa fbd7 	bl	8008c30 <pbuf_alloc>
 800e482:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	2b00      	cmp	r3, #0
 800e488:	f000 80b7 	beq.w	800e5fa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	685b      	ldr	r3, [r3, #4]
 800e490:	891a      	ldrh	r2, [r3, #8]
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	891b      	ldrh	r3, [r3, #8]
 800e496:	1ad3      	subs	r3, r2, r3
 800e498:	b29a      	uxth	r2, r3
 800e49a:	887b      	ldrh	r3, [r7, #2]
 800e49c:	4413      	add	r3, r2
 800e49e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	6858      	ldr	r0, [r3, #4]
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	685a      	ldr	r2, [r3, #4]
 800e4a8:	7bbb      	ldrb	r3, [r7, #14]
 800e4aa:	18d1      	adds	r1, r2, r3
 800e4ac:	897b      	ldrh	r3, [r7, #10]
 800e4ae:	89ba      	ldrh	r2, [r7, #12]
 800e4b0:	f7fb f898 	bl	80095e4 <pbuf_copy_partial>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	89bb      	ldrh	r3, [r7, #12]
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	f040 809f 	bne.w	800e5fe <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	899b      	ldrh	r3, [r3, #12]
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7f9 fbe2 	bl	8007c92 <lwip_htons>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	b2db      	uxtb	r3, r3
 800e4d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e4d6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e4d8:	2300      	movs	r3, #0
 800e4da:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e4dc:	7efb      	ldrb	r3, [r7, #27]
 800e4de:	f003 0308 	and.w	r3, r3, #8
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d007      	beq.n	800e4f6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e4e6:	7efb      	ldrb	r3, [r7, #27]
 800e4e8:	f023 0308 	bic.w	r3, r3, #8
 800e4ec:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e4ee:	7ebb      	ldrb	r3, [r7, #26]
 800e4f0:	f043 0308 	orr.w	r3, r3, #8
 800e4f4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e4f6:	7efb      	ldrb	r3, [r7, #27]
 800e4f8:	f003 0301 	and.w	r3, r3, #1
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d007      	beq.n	800e510 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e500:	7efb      	ldrb	r3, [r7, #27]
 800e502:	f023 0301 	bic.w	r3, r3, #1
 800e506:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e508:	7ebb      	ldrb	r3, [r7, #26]
 800e50a:	f043 0301 	orr.w	r3, r3, #1
 800e50e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	68db      	ldr	r3, [r3, #12]
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	4618      	mov	r0, r3
 800e518:	f7f9 fbd0 	bl	8007cbc <lwip_htonl>
 800e51c:	4602      	mov	r2, r0
 800e51e:	887b      	ldrh	r3, [r7, #2]
 800e520:	18d1      	adds	r1, r2, r3
 800e522:	7eba      	ldrb	r2, [r7, #26]
 800e524:	7bfb      	ldrb	r3, [r7, #15]
 800e526:	9300      	str	r3, [sp, #0]
 800e528:	460b      	mov	r3, r1
 800e52a:	6939      	ldr	r1, [r7, #16]
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f7ff fa4d 	bl	800d9cc <tcp_create_segment>
 800e532:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d063      	beq.n	800e602 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	4618      	mov	r0, r3
 800e540:	f7fa fede 	bl	8009300 <pbuf_clen>
 800e544:	4603      	mov	r3, r0
 800e546:	461a      	mov	r2, r3
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e54e:	1a9b      	subs	r3, r3, r2
 800e550:	b29a      	uxth	r2, r3
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	6858      	ldr	r0, [r3, #4]
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	891a      	ldrh	r2, [r3, #8]
 800e562:	89bb      	ldrh	r3, [r7, #12]
 800e564:	1ad3      	subs	r3, r2, r3
 800e566:	b29b      	uxth	r3, r3
 800e568:	4619      	mov	r1, r3
 800e56a:	f7fa fcbb 	bl	8008ee4 <pbuf_realloc>
  useg->len -= remainder;
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	891a      	ldrh	r2, [r3, #8]
 800e572:	89bb      	ldrh	r3, [r7, #12]
 800e574:	1ad3      	subs	r3, r2, r3
 800e576:	b29a      	uxth	r2, r3
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	899b      	ldrh	r3, [r3, #12]
 800e582:	b29c      	uxth	r4, r3
 800e584:	7efb      	ldrb	r3, [r7, #27]
 800e586:	b29b      	uxth	r3, r3
 800e588:	4618      	mov	r0, r3
 800e58a:	f7f9 fb82 	bl	8007c92 <lwip_htons>
 800e58e:	4603      	mov	r3, r0
 800e590:	461a      	mov	r2, r3
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	68db      	ldr	r3, [r3, #12]
 800e596:	4322      	orrs	r2, r4
 800e598:	b292      	uxth	r2, r2
 800e59a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7fa fead 	bl	8009300 <pbuf_clen>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e5b0:	4413      	add	r3, r2
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e5ba:	69fb      	ldr	r3, [r7, #28]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fa fe9e 	bl	8009300 <pbuf_clen>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e5ce:	4413      	add	r3, r2
 800e5d0:	b29a      	uxth	r2, r3
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	69fa      	ldr	r2, [r7, #28]
 800e5e4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e5e6:	69fb      	ldr	r3, [r7, #28]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d103      	bne.n	800e5f6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	e016      	b.n	800e628 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e5fa:	bf00      	nop
 800e5fc:	e002      	b.n	800e604 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e5fe:	bf00      	nop
 800e600:	e000      	b.n	800e604 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e602:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d006      	beq.n	800e618 <tcp_split_unsent_seg+0x25c>
 800e60a:	4b09      	ldr	r3, [pc, #36]	; (800e630 <tcp_split_unsent_seg+0x274>)
 800e60c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e610:	490d      	ldr	r1, [pc, #52]	; (800e648 <tcp_split_unsent_seg+0x28c>)
 800e612:	4809      	ldr	r0, [pc, #36]	; (800e638 <tcp_split_unsent_seg+0x27c>)
 800e614:	f004 fa9a 	bl	8012b4c <iprintf>
  if (p != NULL) {
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d002      	beq.n	800e624 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e61e:	6938      	ldr	r0, [r7, #16]
 800e620:	f7fa fde6 	bl	80091f0 <pbuf_free>
  }

  return ERR_MEM;
 800e624:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e628:	4618      	mov	r0, r3
 800e62a:	3724      	adds	r7, #36	; 0x24
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd90      	pop	{r4, r7, pc}
 800e630:	08015198 	.word	0x08015198
 800e634:	0801552c 	.word	0x0801552c
 800e638:	080151ec 	.word	0x080151ec
 800e63c:	08015550 	.word	0x08015550
 800e640:	08015574 	.word	0x08015574
 800e644:	08015584 	.word	0x08015584
 800e648:	08015594 	.word	0x08015594

0800e64c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e64c:	b590      	push	{r4, r7, lr}
 800e64e:	b085      	sub	sp, #20
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d106      	bne.n	800e668 <tcp_send_fin+0x1c>
 800e65a:	4b21      	ldr	r3, [pc, #132]	; (800e6e0 <tcp_send_fin+0x94>)
 800e65c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e660:	4920      	ldr	r1, [pc, #128]	; (800e6e4 <tcp_send_fin+0x98>)
 800e662:	4821      	ldr	r0, [pc, #132]	; (800e6e8 <tcp_send_fin+0x9c>)
 800e664:	f004 fa72 	bl	8012b4c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d02e      	beq.n	800e6ce <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e674:	60fb      	str	r3, [r7, #12]
 800e676:	e002      	b.n	800e67e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d1f8      	bne.n	800e678 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	68db      	ldr	r3, [r3, #12]
 800e68a:	899b      	ldrh	r3, [r3, #12]
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	4618      	mov	r0, r3
 800e690:	f7f9 faff 	bl	8007c92 <lwip_htons>
 800e694:	4603      	mov	r3, r0
 800e696:	b2db      	uxtb	r3, r3
 800e698:	f003 0307 	and.w	r3, r3, #7
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d116      	bne.n	800e6ce <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	68db      	ldr	r3, [r3, #12]
 800e6a4:	899b      	ldrh	r3, [r3, #12]
 800e6a6:	b29c      	uxth	r4, r3
 800e6a8:	2001      	movs	r0, #1
 800e6aa:	f7f9 faf2 	bl	8007c92 <lwip_htons>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	4322      	orrs	r2, r4
 800e6b8:	b292      	uxth	r2, r2
 800e6ba:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	8b5b      	ldrh	r3, [r3, #26]
 800e6c0:	f043 0320 	orr.w	r3, r3, #32
 800e6c4:	b29a      	uxth	r2, r3
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	e004      	b.n	800e6d8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e6ce:	2101      	movs	r1, #1
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f000 f80b 	bl	800e6ec <tcp_enqueue_flags>
 800e6d6:	4603      	mov	r3, r0
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3714      	adds	r7, #20
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd90      	pop	{r4, r7, pc}
 800e6e0:	08015198 	.word	0x08015198
 800e6e4:	080155a0 	.word	0x080155a0
 800e6e8:	080151ec 	.word	0x080151ec

0800e6ec <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b08a      	sub	sp, #40	; 0x28
 800e6f0:	af02      	add	r7, sp, #8
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	460b      	mov	r3, r1
 800e6f6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e700:	78fb      	ldrb	r3, [r7, #3]
 800e702:	f003 0303 	and.w	r3, r3, #3
 800e706:	2b00      	cmp	r3, #0
 800e708:	d106      	bne.n	800e718 <tcp_enqueue_flags+0x2c>
 800e70a:	4b67      	ldr	r3, [pc, #412]	; (800e8a8 <tcp_enqueue_flags+0x1bc>)
 800e70c:	f240 4212 	movw	r2, #1042	; 0x412
 800e710:	4966      	ldr	r1, [pc, #408]	; (800e8ac <tcp_enqueue_flags+0x1c0>)
 800e712:	4867      	ldr	r0, [pc, #412]	; (800e8b0 <tcp_enqueue_flags+0x1c4>)
 800e714:	f004 fa1a 	bl	8012b4c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d106      	bne.n	800e72c <tcp_enqueue_flags+0x40>
 800e71e:	4b62      	ldr	r3, [pc, #392]	; (800e8a8 <tcp_enqueue_flags+0x1bc>)
 800e720:	f240 4213 	movw	r2, #1043	; 0x413
 800e724:	4963      	ldr	r1, [pc, #396]	; (800e8b4 <tcp_enqueue_flags+0x1c8>)
 800e726:	4862      	ldr	r0, [pc, #392]	; (800e8b0 <tcp_enqueue_flags+0x1c4>)
 800e728:	f004 fa10 	bl	8012b4c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e72c:	78fb      	ldrb	r3, [r7, #3]
 800e72e:	f003 0302 	and.w	r3, r3, #2
 800e732:	2b00      	cmp	r3, #0
 800e734:	d001      	beq.n	800e73a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e736:	2301      	movs	r3, #1
 800e738:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e73a:	7ffb      	ldrb	r3, [r7, #31]
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	f003 0304 	and.w	r3, r3, #4
 800e744:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e746:	7dfb      	ldrb	r3, [r7, #23]
 800e748:	b29b      	uxth	r3, r3
 800e74a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e74e:	4619      	mov	r1, r3
 800e750:	2036      	movs	r0, #54	; 0x36
 800e752:	f7fa fa6d 	bl	8008c30 <pbuf_alloc>
 800e756:	6138      	str	r0, [r7, #16]
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d109      	bne.n	800e772 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	8b5b      	ldrh	r3, [r3, #26]
 800e762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e766:	b29a      	uxth	r2, r3
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e76c:	f04f 33ff 	mov.w	r3, #4294967295
 800e770:	e095      	b.n	800e89e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	895a      	ldrh	r2, [r3, #10]
 800e776:	7dfb      	ldrb	r3, [r7, #23]
 800e778:	b29b      	uxth	r3, r3
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d206      	bcs.n	800e78c <tcp_enqueue_flags+0xa0>
 800e77e:	4b4a      	ldr	r3, [pc, #296]	; (800e8a8 <tcp_enqueue_flags+0x1bc>)
 800e780:	f240 423a 	movw	r2, #1082	; 0x43a
 800e784:	494c      	ldr	r1, [pc, #304]	; (800e8b8 <tcp_enqueue_flags+0x1cc>)
 800e786:	484a      	ldr	r0, [pc, #296]	; (800e8b0 <tcp_enqueue_flags+0x1c4>)
 800e788:	f004 f9e0 	bl	8012b4c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e790:	78fa      	ldrb	r2, [r7, #3]
 800e792:	7ffb      	ldrb	r3, [r7, #31]
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	460b      	mov	r3, r1
 800e798:	6939      	ldr	r1, [r7, #16]
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f7ff f916 	bl	800d9cc <tcp_create_segment>
 800e7a0:	60f8      	str	r0, [r7, #12]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d109      	bne.n	800e7bc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	8b5b      	ldrh	r3, [r3, #26]
 800e7ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7b0:	b29a      	uxth	r2, r3
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ba:	e070      	b.n	800e89e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	68db      	ldr	r3, [r3, #12]
 800e7c0:	f003 0303 	and.w	r3, r3, #3
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d006      	beq.n	800e7d6 <tcp_enqueue_flags+0xea>
 800e7c8:	4b37      	ldr	r3, [pc, #220]	; (800e8a8 <tcp_enqueue_flags+0x1bc>)
 800e7ca:	f240 4242 	movw	r2, #1090	; 0x442
 800e7ce:	493b      	ldr	r1, [pc, #236]	; (800e8bc <tcp_enqueue_flags+0x1d0>)
 800e7d0:	4837      	ldr	r0, [pc, #220]	; (800e8b0 <tcp_enqueue_flags+0x1c4>)
 800e7d2:	f004 f9bb 	bl	8012b4c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	891b      	ldrh	r3, [r3, #8]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d006      	beq.n	800e7ec <tcp_enqueue_flags+0x100>
 800e7de:	4b32      	ldr	r3, [pc, #200]	; (800e8a8 <tcp_enqueue_flags+0x1bc>)
 800e7e0:	f240 4243 	movw	r2, #1091	; 0x443
 800e7e4:	4936      	ldr	r1, [pc, #216]	; (800e8c0 <tcp_enqueue_flags+0x1d4>)
 800e7e6:	4832      	ldr	r0, [pc, #200]	; (800e8b0 <tcp_enqueue_flags+0x1c4>)
 800e7e8:	f004 f9b0 	bl	8012b4c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d103      	bne.n	800e7fc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	68fa      	ldr	r2, [r7, #12]
 800e7f8:	66da      	str	r2, [r3, #108]	; 0x6c
 800e7fa:	e00d      	b.n	800e818 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e800:	61bb      	str	r3, [r7, #24]
 800e802:	e002      	b.n	800e80a <tcp_enqueue_flags+0x11e>
 800e804:	69bb      	ldr	r3, [r7, #24]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	61bb      	str	r3, [r7, #24]
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d1f8      	bne.n	800e804 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e812:	69bb      	ldr	r3, [r7, #24]
 800e814:	68fa      	ldr	r2, [r7, #12]
 800e816:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2200      	movs	r2, #0
 800e81c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e820:	78fb      	ldrb	r3, [r7, #3]
 800e822:	f003 0302 	and.w	r3, r3, #2
 800e826:	2b00      	cmp	r3, #0
 800e828:	d104      	bne.n	800e834 <tcp_enqueue_flags+0x148>
 800e82a:	78fb      	ldrb	r3, [r7, #3]
 800e82c:	f003 0301 	and.w	r3, r3, #1
 800e830:	2b00      	cmp	r3, #0
 800e832:	d004      	beq.n	800e83e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e838:	1c5a      	adds	r2, r3, #1
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e83e:	78fb      	ldrb	r3, [r7, #3]
 800e840:	f003 0301 	and.w	r3, r3, #1
 800e844:	2b00      	cmp	r3, #0
 800e846:	d006      	beq.n	800e856 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	8b5b      	ldrh	r3, [r3, #26]
 800e84c:	f043 0320 	orr.w	r3, r3, #32
 800e850:	b29a      	uxth	r2, r3
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7fa fd50 	bl	8009300 <pbuf_clen>
 800e860:	4603      	mov	r3, r0
 800e862:	461a      	mov	r2, r3
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e86a:	4413      	add	r3, r2
 800e86c:	b29a      	uxth	r2, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d00e      	beq.n	800e89c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e882:	2b00      	cmp	r3, #0
 800e884:	d10a      	bne.n	800e89c <tcp_enqueue_flags+0x1b0>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d106      	bne.n	800e89c <tcp_enqueue_flags+0x1b0>
 800e88e:	4b06      	ldr	r3, [pc, #24]	; (800e8a8 <tcp_enqueue_flags+0x1bc>)
 800e890:	f240 4266 	movw	r2, #1126	; 0x466
 800e894:	490b      	ldr	r1, [pc, #44]	; (800e8c4 <tcp_enqueue_flags+0x1d8>)
 800e896:	4806      	ldr	r0, [pc, #24]	; (800e8b0 <tcp_enqueue_flags+0x1c4>)
 800e898:	f004 f958 	bl	8012b4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e89c:	2300      	movs	r3, #0
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3720      	adds	r7, #32
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	08015198 	.word	0x08015198
 800e8ac:	080155bc 	.word	0x080155bc
 800e8b0:	080151ec 	.word	0x080151ec
 800e8b4:	08015614 	.word	0x08015614
 800e8b8:	08015634 	.word	0x08015634
 800e8bc:	08015670 	.word	0x08015670
 800e8c0:	08015688 	.word	0x08015688
 800e8c4:	080156b4 	.word	0x080156b4

0800e8c8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e8c8:	b5b0      	push	{r4, r5, r7, lr}
 800e8ca:	b08a      	sub	sp, #40	; 0x28
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d106      	bne.n	800e8e4 <tcp_output+0x1c>
 800e8d6:	4ba0      	ldr	r3, [pc, #640]	; (800eb58 <tcp_output+0x290>)
 800e8d8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e8dc:	499f      	ldr	r1, [pc, #636]	; (800eb5c <tcp_output+0x294>)
 800e8de:	48a0      	ldr	r0, [pc, #640]	; (800eb60 <tcp_output+0x298>)
 800e8e0:	f004 f934 	bl	8012b4c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	7d1b      	ldrb	r3, [r3, #20]
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d106      	bne.n	800e8fa <tcp_output+0x32>
 800e8ec:	4b9a      	ldr	r3, [pc, #616]	; (800eb58 <tcp_output+0x290>)
 800e8ee:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800e8f2:	499c      	ldr	r1, [pc, #624]	; (800eb64 <tcp_output+0x29c>)
 800e8f4:	489a      	ldr	r0, [pc, #616]	; (800eb60 <tcp_output+0x298>)
 800e8f6:	f004 f929 	bl	8012b4c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e8fa:	4b9b      	ldr	r3, [pc, #620]	; (800eb68 <tcp_output+0x2a0>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	687a      	ldr	r2, [r7, #4]
 800e900:	429a      	cmp	r2, r3
 800e902:	d101      	bne.n	800e908 <tcp_output+0x40>
    return ERR_OK;
 800e904:	2300      	movs	r3, #0
 800e906:	e1d2      	b.n	800ecae <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e914:	429a      	cmp	r2, r3
 800e916:	d203      	bcs.n	800e920 <tcp_output+0x58>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e91e:	e002      	b.n	800e926 <tcp_output+0x5e>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e926:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e92c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e930:	2b00      	cmp	r3, #0
 800e932:	d10b      	bne.n	800e94c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	8b5b      	ldrh	r3, [r3, #26]
 800e938:	f003 0302 	and.w	r3, r3, #2
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f000 81a9 	beq.w	800ec94 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f000 fdd6 	bl	800f4f4 <tcp_send_empty_ack>
 800e948:	4603      	mov	r3, r0
 800e94a:	e1b0      	b.n	800ecae <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e94c:	6879      	ldr	r1, [r7, #4]
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	3304      	adds	r3, #4
 800e952:	461a      	mov	r2, r3
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f7ff f81d 	bl	800d994 <tcp_route>
 800e95a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d102      	bne.n	800e968 <tcp_output+0xa0>
    return ERR_RTE;
 800e962:	f06f 0303 	mvn.w	r3, #3
 800e966:	e1a2      	b.n	800ecae <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d003      	beq.n	800e976 <tcp_output+0xae>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d111      	bne.n	800e99a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d002      	beq.n	800e982 <tcp_output+0xba>
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	3304      	adds	r3, #4
 800e980:	e000      	b.n	800e984 <tcp_output+0xbc>
 800e982:	2300      	movs	r3, #0
 800e984:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d102      	bne.n	800e992 <tcp_output+0xca>
      return ERR_RTE;
 800e98c:	f06f 0303 	mvn.w	r3, #3
 800e990:	e18d      	b.n	800ecae <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	681a      	ldr	r2, [r3, #0]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	685b      	ldr	r3, [r3, #4]
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7f9 f98b 	bl	8007cbc <lwip_htonl>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9ac:	1ad3      	subs	r3, r2, r3
 800e9ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9b0:	8912      	ldrh	r2, [r2, #8]
 800e9b2:	4413      	add	r3, r2
 800e9b4:	69ba      	ldr	r2, [r7, #24]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d227      	bcs.n	800ea0a <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e9c0:	461a      	mov	r2, r3
 800e9c2:	69bb      	ldr	r3, [r7, #24]
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d114      	bne.n	800e9f2 <tcp_output+0x12a>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d110      	bne.n	800e9f2 <tcp_output+0x12a>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d10b      	bne.n	800e9f2 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	8b5b      	ldrh	r3, [r3, #26]
 800e9f6:	f003 0302 	and.w	r3, r3, #2
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f000 814c 	beq.w	800ec98 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f000 fd77 	bl	800f4f4 <tcp_send_empty_ack>
 800ea06:	4603      	mov	r3, r0
 800ea08:	e151      	b.n	800ecae <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea16:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ea18:	6a3b      	ldr	r3, [r7, #32]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	f000 811b 	beq.w	800ec56 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800ea20:	e002      	b.n	800ea28 <tcp_output+0x160>
 800ea22:	6a3b      	ldr	r3, [r7, #32]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	623b      	str	r3, [r7, #32]
 800ea28:	6a3b      	ldr	r3, [r7, #32]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d1f8      	bne.n	800ea22 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ea30:	e111      	b.n	800ec56 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ea32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea34:	68db      	ldr	r3, [r3, #12]
 800ea36:	899b      	ldrh	r3, [r3, #12]
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f7f9 f929 	bl	8007c92 <lwip_htons>
 800ea40:	4603      	mov	r3, r0
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	f003 0304 	and.w	r3, r3, #4
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d006      	beq.n	800ea5a <tcp_output+0x192>
 800ea4c:	4b42      	ldr	r3, [pc, #264]	; (800eb58 <tcp_output+0x290>)
 800ea4e:	f240 5237 	movw	r2, #1335	; 0x537
 800ea52:	4946      	ldr	r1, [pc, #280]	; (800eb6c <tcp_output+0x2a4>)
 800ea54:	4842      	ldr	r0, [pc, #264]	; (800eb60 <tcp_output+0x298>)
 800ea56:	f004 f879 	bl	8012b4c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d01f      	beq.n	800eaa2 <tcp_output+0x1da>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	8b5b      	ldrh	r3, [r3, #26]
 800ea66:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d119      	bne.n	800eaa2 <tcp_output+0x1da>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d00b      	beq.n	800ea8e <tcp_output+0x1c6>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d110      	bne.n	800eaa2 <tcp_output+0x1da>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea84:	891a      	ldrh	r2, [r3, #8]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d209      	bcs.n	800eaa2 <tcp_output+0x1da>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d004      	beq.n	800eaa2 <tcp_output+0x1da>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ea9e:	2b08      	cmp	r3, #8
 800eaa0:	d901      	bls.n	800eaa6 <tcp_output+0x1de>
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	e000      	b.n	800eaa8 <tcp_output+0x1e0>
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d106      	bne.n	800eaba <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	8b5b      	ldrh	r3, [r3, #26]
 800eab0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	f000 80e3 	beq.w	800ec80 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	7d1b      	ldrb	r3, [r3, #20]
 800eabe:	2b02      	cmp	r3, #2
 800eac0:	d00d      	beq.n	800eade <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800eac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac4:	68db      	ldr	r3, [r3, #12]
 800eac6:	899b      	ldrh	r3, [r3, #12]
 800eac8:	b29c      	uxth	r4, r3
 800eaca:	2010      	movs	r0, #16
 800eacc:	f7f9 f8e1 	bl	8007c92 <lwip_htons>
 800ead0:	4603      	mov	r3, r0
 800ead2:	461a      	mov	r2, r3
 800ead4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead6:	68db      	ldr	r3, [r3, #12]
 800ead8:	4322      	orrs	r2, r4
 800eada:	b292      	uxth	r2, r2
 800eadc:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800eade:	697a      	ldr	r2, [r7, #20]
 800eae0:	6879      	ldr	r1, [r7, #4]
 800eae2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eae4:	f000 f908 	bl	800ecf8 <tcp_output_segment>
 800eae8:	4603      	mov	r3, r0
 800eaea:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800eaec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d009      	beq.n	800eb08 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	8b5b      	ldrh	r3, [r3, #26]
 800eaf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	835a      	strh	r2, [r3, #26]
      return err;
 800eb02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb06:	e0d2      	b.n	800ecae <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800eb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	7d1b      	ldrb	r3, [r3, #20]
 800eb14:	2b02      	cmp	r3, #2
 800eb16:	d006      	beq.n	800eb26 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	8b5b      	ldrh	r3, [r3, #26]
 800eb1c:	f023 0303 	bic.w	r3, r3, #3
 800eb20:	b29a      	uxth	r2, r3
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800eb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	685b      	ldr	r3, [r3, #4]
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7f9 f8c5 	bl	8007cbc <lwip_htonl>
 800eb32:	4604      	mov	r4, r0
 800eb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb36:	891b      	ldrh	r3, [r3, #8]
 800eb38:	461d      	mov	r5, r3
 800eb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	899b      	ldrh	r3, [r3, #12]
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7f9 f8a5 	bl	8007c92 <lwip_htons>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	f003 0303 	and.w	r3, r3, #3
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d00d      	beq.n	800eb70 <tcp_output+0x2a8>
 800eb54:	2301      	movs	r3, #1
 800eb56:	e00c      	b.n	800eb72 <tcp_output+0x2aa>
 800eb58:	08015198 	.word	0x08015198
 800eb5c:	080156dc 	.word	0x080156dc
 800eb60:	080151ec 	.word	0x080151ec
 800eb64:	080156f4 	.word	0x080156f4
 800eb68:	2000bcd8 	.word	0x2000bcd8
 800eb6c:	0801571c 	.word	0x0801571c
 800eb70:	2300      	movs	r3, #0
 800eb72:	442b      	add	r3, r5
 800eb74:	4423      	add	r3, r4
 800eb76:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	1ad3      	subs	r3, r2, r3
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	da02      	bge.n	800eb8a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	68ba      	ldr	r2, [r7, #8]
 800eb88:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800eb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8c:	891b      	ldrh	r3, [r3, #8]
 800eb8e:	461c      	mov	r4, r3
 800eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb92:	68db      	ldr	r3, [r3, #12]
 800eb94:	899b      	ldrh	r3, [r3, #12]
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7f9 f87a 	bl	8007c92 <lwip_htons>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	f003 0303 	and.w	r3, r3, #3
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d001      	beq.n	800ebae <tcp_output+0x2e6>
 800ebaa:	2301      	movs	r3, #1
 800ebac:	e000      	b.n	800ebb0 <tcp_output+0x2e8>
 800ebae:	2300      	movs	r3, #0
 800ebb0:	4423      	add	r3, r4
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d049      	beq.n	800ec4a <tcp_output+0x382>
      seg->next = NULL;
 800ebb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb8:	2200      	movs	r2, #0
 800ebba:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d105      	bne.n	800ebd0 <tcp_output+0x308>
        pcb->unacked = seg;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebc8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ebca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebcc:	623b      	str	r3, [r7, #32]
 800ebce:	e03f      	b.n	800ec50 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ebd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd2:	68db      	ldr	r3, [r3, #12]
 800ebd4:	685b      	ldr	r3, [r3, #4]
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7f9 f870 	bl	8007cbc <lwip_htonl>
 800ebdc:	4604      	mov	r4, r0
 800ebde:	6a3b      	ldr	r3, [r7, #32]
 800ebe0:	68db      	ldr	r3, [r3, #12]
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7f9 f869 	bl	8007cbc <lwip_htonl>
 800ebea:	4603      	mov	r3, r0
 800ebec:	1ae3      	subs	r3, r4, r3
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	da24      	bge.n	800ec3c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	3370      	adds	r3, #112	; 0x70
 800ebf6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ebf8:	e002      	b.n	800ec00 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d011      	beq.n	800ec2c <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	68db      	ldr	r3, [r3, #12]
 800ec0e:	685b      	ldr	r3, [r3, #4]
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7f9 f853 	bl	8007cbc <lwip_htonl>
 800ec16:	4604      	mov	r4, r0
 800ec18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7f9 f84c 	bl	8007cbc <lwip_htonl>
 800ec24:	4603      	mov	r3, r0
 800ec26:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	dbe6      	blt.n	800ebfa <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	681a      	ldr	r2, [r3, #0]
 800ec30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec32:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec38:	601a      	str	r2, [r3, #0]
 800ec3a:	e009      	b.n	800ec50 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ec3c:	6a3b      	ldr	r3, [r7, #32]
 800ec3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec40:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ec42:	6a3b      	ldr	r3, [r7, #32]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	623b      	str	r3, [r7, #32]
 800ec48:	e002      	b.n	800ec50 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ec4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec4c:	f7fb ff02 	bl	800aa54 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec54:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ec56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d012      	beq.n	800ec82 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ec5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7f9 f82a 	bl	8007cbc <lwip_htonl>
 800ec68:	4602      	mov	r2, r0
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec6e:	1ad3      	subs	r3, r2, r3
 800ec70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec72:	8912      	ldrh	r2, [r2, #8]
 800ec74:	4413      	add	r3, r2
  while (seg != NULL &&
 800ec76:	69ba      	ldr	r2, [r7, #24]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	f4bf aeda 	bcs.w	800ea32 <tcp_output+0x16a>
 800ec7e:	e000      	b.n	800ec82 <tcp_output+0x3ba>
      break;
 800ec80:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d108      	bne.n	800ec9c <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ec92:	e004      	b.n	800ec9e <tcp_output+0x3d6>
    goto output_done;
 800ec94:	bf00      	nop
 800ec96:	e002      	b.n	800ec9e <tcp_output+0x3d6>
    goto output_done;
 800ec98:	bf00      	nop
 800ec9a:	e000      	b.n	800ec9e <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ec9c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	8b5b      	ldrh	r3, [r3, #26]
 800eca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eca6:	b29a      	uxth	r2, r3
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ecac:	2300      	movs	r3, #0
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3728      	adds	r7, #40	; 0x28
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bdb0      	pop	{r4, r5, r7, pc}
 800ecb6:	bf00      	nop

0800ecb8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d106      	bne.n	800ecd4 <tcp_output_segment_busy+0x1c>
 800ecc6:	4b09      	ldr	r3, [pc, #36]	; (800ecec <tcp_output_segment_busy+0x34>)
 800ecc8:	f240 529a 	movw	r2, #1434	; 0x59a
 800eccc:	4908      	ldr	r1, [pc, #32]	; (800ecf0 <tcp_output_segment_busy+0x38>)
 800ecce:	4809      	ldr	r0, [pc, #36]	; (800ecf4 <tcp_output_segment_busy+0x3c>)
 800ecd0:	f003 ff3c 	bl	8012b4c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	7b9b      	ldrb	r3, [r3, #14]
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d001      	beq.n	800ece2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ecde:	2301      	movs	r3, #1
 800ece0:	e000      	b.n	800ece4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ece2:	2300      	movs	r3, #0
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3708      	adds	r7, #8
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	08015198 	.word	0x08015198
 800ecf0:	08015734 	.word	0x08015734
 800ecf4:	080151ec 	.word	0x080151ec

0800ecf8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ecf8:	b5b0      	push	{r4, r5, r7, lr}
 800ecfa:	b08c      	sub	sp, #48	; 0x30
 800ecfc:	af04      	add	r7, sp, #16
 800ecfe:	60f8      	str	r0, [r7, #12]
 800ed00:	60b9      	str	r1, [r7, #8]
 800ed02:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d106      	bne.n	800ed18 <tcp_output_segment+0x20>
 800ed0a:	4b64      	ldr	r3, [pc, #400]	; (800ee9c <tcp_output_segment+0x1a4>)
 800ed0c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ed10:	4963      	ldr	r1, [pc, #396]	; (800eea0 <tcp_output_segment+0x1a8>)
 800ed12:	4864      	ldr	r0, [pc, #400]	; (800eea4 <tcp_output_segment+0x1ac>)
 800ed14:	f003 ff1a 	bl	8012b4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d106      	bne.n	800ed2c <tcp_output_segment+0x34>
 800ed1e:	4b5f      	ldr	r3, [pc, #380]	; (800ee9c <tcp_output_segment+0x1a4>)
 800ed20:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ed24:	4960      	ldr	r1, [pc, #384]	; (800eea8 <tcp_output_segment+0x1b0>)
 800ed26:	485f      	ldr	r0, [pc, #380]	; (800eea4 <tcp_output_segment+0x1ac>)
 800ed28:	f003 ff10 	bl	8012b4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d106      	bne.n	800ed40 <tcp_output_segment+0x48>
 800ed32:	4b5a      	ldr	r3, [pc, #360]	; (800ee9c <tcp_output_segment+0x1a4>)
 800ed34:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ed38:	495c      	ldr	r1, [pc, #368]	; (800eeac <tcp_output_segment+0x1b4>)
 800ed3a:	485a      	ldr	r0, [pc, #360]	; (800eea4 <tcp_output_segment+0x1ac>)
 800ed3c:	f003 ff06 	bl	8012b4c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ed40:	68f8      	ldr	r0, [r7, #12]
 800ed42:	f7ff ffb9 	bl	800ecb8 <tcp_output_segment_busy>
 800ed46:	4603      	mov	r3, r0
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d001      	beq.n	800ed50 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	e0a0      	b.n	800ee92 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	68dc      	ldr	r4, [r3, #12]
 800ed58:	4610      	mov	r0, r2
 800ed5a:	f7f8 ffaf 	bl	8007cbc <lwip_htonl>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	68dc      	ldr	r4, [r3, #12]
 800ed6a:	4610      	mov	r0, r2
 800ed6c:	f7f8 ff91 	bl	8007c92 <lwip_htons>
 800ed70:	4603      	mov	r3, r0
 800ed72:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed78:	68ba      	ldr	r2, [r7, #8]
 800ed7a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ed7c:	441a      	add	r2, r3
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	68db      	ldr	r3, [r3, #12]
 800ed86:	3314      	adds	r3, #20
 800ed88:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	7a9b      	ldrb	r3, [r3, #10]
 800ed8e:	f003 0301 	and.w	r3, r3, #1
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d015      	beq.n	800edc2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	3304      	adds	r3, #4
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	6879      	ldr	r1, [r7, #4]
 800ed9e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800eda2:	f7fc fa33 	bl	800b20c <tcp_eff_send_mss_netif>
 800eda6:	4603      	mov	r3, r0
 800eda8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800edaa:	8b7b      	ldrh	r3, [r7, #26]
 800edac:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7f8 ff83 	bl	8007cbc <lwip_htonl>
 800edb6:	4602      	mov	r2, r0
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	601a      	str	r2, [r3, #0]
    opts += 1;
 800edbc:	69fb      	ldr	r3, [r7, #28]
 800edbe:	3304      	adds	r3, #4
 800edc0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800edc8:	2b00      	cmp	r3, #0
 800edca:	da02      	bge.n	800edd2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	2200      	movs	r2, #0
 800edd0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d10c      	bne.n	800edf4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800edda:	4b35      	ldr	r3, [pc, #212]	; (800eeb0 <tcp_output_segment+0x1b8>)
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	68db      	ldr	r3, [r3, #12]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	4618      	mov	r0, r3
 800edea:	f7f8 ff67 	bl	8007cbc <lwip_htonl>
 800edee:	4602      	mov	r2, r0
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	68db      	ldr	r3, [r3, #12]
 800edf8:	461a      	mov	r2, r3
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	1ad3      	subs	r3, r2, r3
 800ee02:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	8959      	ldrh	r1, [r3, #10]
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	8b3a      	ldrh	r2, [r7, #24]
 800ee10:	1a8a      	subs	r2, r1, r2
 800ee12:	b292      	uxth	r2, r2
 800ee14:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	8919      	ldrh	r1, [r3, #8]
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	8b3a      	ldrh	r2, [r7, #24]
 800ee22:	1a8a      	subs	r2, r1, r2
 800ee24:	b292      	uxth	r2, r2
 800ee26:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	68fa      	ldr	r2, [r7, #12]
 800ee2e:	68d2      	ldr	r2, [r2, #12]
 800ee30:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	68db      	ldr	r3, [r3, #12]
 800ee36:	2200      	movs	r2, #0
 800ee38:	741a      	strb	r2, [r3, #16]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	68db      	ldr	r3, [r3, #12]
 800ee42:	f103 0214 	add.w	r2, r3, #20
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	7a9b      	ldrb	r3, [r3, #10]
 800ee4a:	009b      	lsls	r3, r3, #2
 800ee4c:	f003 0304 	and.w	r3, r3, #4
 800ee50:	4413      	add	r3, r2
 800ee52:	69fa      	ldr	r2, [r7, #28]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d006      	beq.n	800ee66 <tcp_output_segment+0x16e>
 800ee58:	4b10      	ldr	r3, [pc, #64]	; (800ee9c <tcp_output_segment+0x1a4>)
 800ee5a:	f240 621c 	movw	r2, #1564	; 0x61c
 800ee5e:	4915      	ldr	r1, [pc, #84]	; (800eeb4 <tcp_output_segment+0x1bc>)
 800ee60:	4810      	ldr	r0, [pc, #64]	; (800eea4 <tcp_output_segment+0x1ac>)
 800ee62:	f003 fe73 	bl	8012b4c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	6858      	ldr	r0, [r3, #4]
 800ee6a:	68b9      	ldr	r1, [r7, #8]
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	1d1c      	adds	r4, r3, #4
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	7add      	ldrb	r5, [r3, #11]
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	7a9b      	ldrb	r3, [r3, #10]
 800ee78:	687a      	ldr	r2, [r7, #4]
 800ee7a:	9202      	str	r2, [sp, #8]
 800ee7c:	2206      	movs	r2, #6
 800ee7e:	9201      	str	r2, [sp, #4]
 800ee80:	9300      	str	r3, [sp, #0]
 800ee82:	462b      	mov	r3, r5
 800ee84:	4622      	mov	r2, r4
 800ee86:	f002 fdf7 	bl	8011a78 <ip4_output_if>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ee8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3720      	adds	r7, #32
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bdb0      	pop	{r4, r5, r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	08015198 	.word	0x08015198
 800eea0:	0801575c 	.word	0x0801575c
 800eea4:	080151ec 	.word	0x080151ec
 800eea8:	0801577c 	.word	0x0801577c
 800eeac:	0801579c 	.word	0x0801579c
 800eeb0:	2000bcc8 	.word	0x2000bcc8
 800eeb4:	080157c0 	.word	0x080157c0

0800eeb8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800eeb8:	b5b0      	push	{r4, r5, r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d106      	bne.n	800eed4 <tcp_rexmit_rto_prepare+0x1c>
 800eec6:	4b31      	ldr	r3, [pc, #196]	; (800ef8c <tcp_rexmit_rto_prepare+0xd4>)
 800eec8:	f240 6263 	movw	r2, #1635	; 0x663
 800eecc:	4930      	ldr	r1, [pc, #192]	; (800ef90 <tcp_rexmit_rto_prepare+0xd8>)
 800eece:	4831      	ldr	r0, [pc, #196]	; (800ef94 <tcp_rexmit_rto_prepare+0xdc>)
 800eed0:	f003 fe3c 	bl	8012b4c <iprintf>

  if (pcb->unacked == NULL) {
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d102      	bne.n	800eee2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800eedc:	f06f 0305 	mvn.w	r3, #5
 800eee0:	e050      	b.n	800ef84 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eee6:	60fb      	str	r3, [r7, #12]
 800eee8:	e00b      	b.n	800ef02 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800eeea:	68f8      	ldr	r0, [r7, #12]
 800eeec:	f7ff fee4 	bl	800ecb8 <tcp_output_segment_busy>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d002      	beq.n	800eefc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800eef6:	f06f 0305 	mvn.w	r3, #5
 800eefa:	e043      	b.n	800ef84 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	60fb      	str	r3, [r7, #12]
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d1ef      	bne.n	800eeea <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ef0a:	68f8      	ldr	r0, [r7, #12]
 800ef0c:	f7ff fed4 	bl	800ecb8 <tcp_output_segment_busy>
 800ef10:	4603      	mov	r3, r0
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d002      	beq.n	800ef1c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ef16:	f06f 0305 	mvn.w	r3, #5
 800ef1a:	e033      	b.n	800ef84 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	8b5b      	ldrh	r3, [r3, #26]
 800ef36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ef3a:	b29a      	uxth	r2, r3
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	68db      	ldr	r3, [r3, #12]
 800ef44:	685b      	ldr	r3, [r3, #4]
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7f8 feb8 	bl	8007cbc <lwip_htonl>
 800ef4c:	4604      	mov	r4, r0
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	891b      	ldrh	r3, [r3, #8]
 800ef52:	461d      	mov	r5, r3
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	68db      	ldr	r3, [r3, #12]
 800ef58:	899b      	ldrh	r3, [r3, #12]
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7f8 fe98 	bl	8007c92 <lwip_htons>
 800ef62:	4603      	mov	r3, r0
 800ef64:	b2db      	uxtb	r3, r3
 800ef66:	f003 0303 	and.w	r3, r3, #3
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d001      	beq.n	800ef72 <tcp_rexmit_rto_prepare+0xba>
 800ef6e:	2301      	movs	r3, #1
 800ef70:	e000      	b.n	800ef74 <tcp_rexmit_rto_prepare+0xbc>
 800ef72:	2300      	movs	r3, #0
 800ef74:	442b      	add	r3, r5
 800ef76:	18e2      	adds	r2, r4, r3
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ef82:	2300      	movs	r3, #0
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3710      	adds	r7, #16
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bdb0      	pop	{r4, r5, r7, pc}
 800ef8c:	08015198 	.word	0x08015198
 800ef90:	080157d4 	.word	0x080157d4
 800ef94:	080151ec 	.word	0x080151ec

0800ef98 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d106      	bne.n	800efb4 <tcp_rexmit_rto_commit+0x1c>
 800efa6:	4b0d      	ldr	r3, [pc, #52]	; (800efdc <tcp_rexmit_rto_commit+0x44>)
 800efa8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800efac:	490c      	ldr	r1, [pc, #48]	; (800efe0 <tcp_rexmit_rto_commit+0x48>)
 800efae:	480d      	ldr	r0, [pc, #52]	; (800efe4 <tcp_rexmit_rto_commit+0x4c>)
 800efb0:	f003 fdcc 	bl	8012b4c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800efba:	2bff      	cmp	r3, #255	; 0xff
 800efbc:	d007      	beq.n	800efce <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800efc4:	3301      	adds	r3, #1
 800efc6:	b2da      	uxtb	r2, r3
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f7ff fc7a 	bl	800e8c8 <tcp_output>
}
 800efd4:	bf00      	nop
 800efd6:	3708      	adds	r7, #8
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}
 800efdc:	08015198 	.word	0x08015198
 800efe0:	080157f8 	.word	0x080157f8
 800efe4:	080151ec 	.word	0x080151ec

0800efe8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d106      	bne.n	800f004 <tcp_rexmit_rto+0x1c>
 800eff6:	4b0a      	ldr	r3, [pc, #40]	; (800f020 <tcp_rexmit_rto+0x38>)
 800eff8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800effc:	4909      	ldr	r1, [pc, #36]	; (800f024 <tcp_rexmit_rto+0x3c>)
 800effe:	480a      	ldr	r0, [pc, #40]	; (800f028 <tcp_rexmit_rto+0x40>)
 800f000:	f003 fda4 	bl	8012b4c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f7ff ff57 	bl	800eeb8 <tcp_rexmit_rto_prepare>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d102      	bne.n	800f016 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f7ff ffc1 	bl	800ef98 <tcp_rexmit_rto_commit>
  }
}
 800f016:	bf00      	nop
 800f018:	3708      	adds	r7, #8
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	bf00      	nop
 800f020:	08015198 	.word	0x08015198
 800f024:	0801581c 	.word	0x0801581c
 800f028:	080151ec 	.word	0x080151ec

0800f02c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f02c:	b590      	push	{r4, r7, lr}
 800f02e:	b085      	sub	sp, #20
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d106      	bne.n	800f048 <tcp_rexmit+0x1c>
 800f03a:	4b2f      	ldr	r3, [pc, #188]	; (800f0f8 <tcp_rexmit+0xcc>)
 800f03c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f040:	492e      	ldr	r1, [pc, #184]	; (800f0fc <tcp_rexmit+0xd0>)
 800f042:	482f      	ldr	r0, [pc, #188]	; (800f100 <tcp_rexmit+0xd4>)
 800f044:	f003 fd82 	bl	8012b4c <iprintf>

  if (pcb->unacked == NULL) {
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d102      	bne.n	800f056 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f050:	f06f 0305 	mvn.w	r3, #5
 800f054:	e04c      	b.n	800f0f0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f05a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f05c:	68b8      	ldr	r0, [r7, #8]
 800f05e:	f7ff fe2b 	bl	800ecb8 <tcp_output_segment_busy>
 800f062:	4603      	mov	r3, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d002      	beq.n	800f06e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f068:	f06f 0305 	mvn.w	r3, #5
 800f06c:	e040      	b.n	800f0f0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	336c      	adds	r3, #108	; 0x6c
 800f07a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f07c:	e002      	b.n	800f084 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d011      	beq.n	800f0b0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	68db      	ldr	r3, [r3, #12]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	4618      	mov	r0, r3
 800f096:	f7f8 fe11 	bl	8007cbc <lwip_htonl>
 800f09a:	4604      	mov	r4, r0
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7f8 fe0a 	bl	8007cbc <lwip_htonl>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	dbe6      	blt.n	800f07e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	68ba      	ldr	r2, [r7, #8]
 800f0bc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d103      	bne.n	800f0ce <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f0d4:	2bff      	cmp	r3, #255	; 0xff
 800f0d6:	d007      	beq.n	800f0e8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f0de:	3301      	adds	r3, #1
 800f0e0:	b2da      	uxtb	r2, r3
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f0ee:	2300      	movs	r3, #0
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3714      	adds	r7, #20
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd90      	pop	{r4, r7, pc}
 800f0f8:	08015198 	.word	0x08015198
 800f0fc:	08015838 	.word	0x08015838
 800f100:	080151ec 	.word	0x080151ec

0800f104 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b082      	sub	sp, #8
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d106      	bne.n	800f120 <tcp_rexmit_fast+0x1c>
 800f112:	4b2e      	ldr	r3, [pc, #184]	; (800f1cc <tcp_rexmit_fast+0xc8>)
 800f114:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f118:	492d      	ldr	r1, [pc, #180]	; (800f1d0 <tcp_rexmit_fast+0xcc>)
 800f11a:	482e      	ldr	r0, [pc, #184]	; (800f1d4 <tcp_rexmit_fast+0xd0>)
 800f11c:	f003 fd16 	bl	8012b4c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f124:	2b00      	cmp	r3, #0
 800f126:	d04d      	beq.n	800f1c4 <tcp_rexmit_fast+0xc0>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	8b5b      	ldrh	r3, [r3, #26]
 800f12c:	f003 0304 	and.w	r3, r3, #4
 800f130:	2b00      	cmp	r3, #0
 800f132:	d147      	bne.n	800f1c4 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f7ff ff79 	bl	800f02c <tcp_rexmit>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d141      	bne.n	800f1c4 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d207      	bcs.n	800f160 <tcp_rexmit_fast+0x5c>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f156:	0fda      	lsrs	r2, r3, #31
 800f158:	4413      	add	r3, r2
 800f15a:	105b      	asrs	r3, r3, #1
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	e006      	b.n	800f16e <tcp_rexmit_fast+0x6a>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f166:	0fda      	lsrs	r2, r3, #31
 800f168:	4413      	add	r3, r2
 800f16a:	105b      	asrs	r3, r3, #1
 800f16c:	b29b      	uxth	r3, r3
 800f16e:	687a      	ldr	r2, [r7, #4]
 800f170:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f17a:	461a      	mov	r2, r3
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f180:	005b      	lsls	r3, r3, #1
 800f182:	429a      	cmp	r2, r3
 800f184:	d206      	bcs.n	800f194 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f18a:	005b      	lsls	r3, r3, #1
 800f18c:	b29a      	uxth	r2, r3
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f19e:	4619      	mov	r1, r3
 800f1a0:	0049      	lsls	r1, r1, #1
 800f1a2:	440b      	add	r3, r1
 800f1a4:	b29b      	uxth	r3, r3
 800f1a6:	4413      	add	r3, r2
 800f1a8:	b29a      	uxth	r2, r3
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	8b5b      	ldrh	r3, [r3, #26]
 800f1b4:	f043 0304 	orr.w	r3, r3, #4
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f1c4:	bf00      	nop
 800f1c6:	3708      	adds	r7, #8
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}
 800f1cc:	08015198 	.word	0x08015198
 800f1d0:	08015850 	.word	0x08015850
 800f1d4:	080151ec 	.word	0x080151ec

0800f1d8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b086      	sub	sp, #24
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	607b      	str	r3, [r7, #4]
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	817b      	strh	r3, [r7, #10]
 800f1e6:	4613      	mov	r3, r2
 800f1e8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f1ea:	897a      	ldrh	r2, [r7, #10]
 800f1ec:	893b      	ldrh	r3, [r7, #8]
 800f1ee:	4413      	add	r3, r2
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	3314      	adds	r3, #20
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	2022      	movs	r0, #34	; 0x22
 800f1fe:	f7f9 fd17 	bl	8008c30 <pbuf_alloc>
 800f202:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d04e      	beq.n	800f2a8 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	895b      	ldrh	r3, [r3, #10]
 800f20e:	461a      	mov	r2, r3
 800f210:	897b      	ldrh	r3, [r7, #10]
 800f212:	3314      	adds	r3, #20
 800f214:	429a      	cmp	r2, r3
 800f216:	da06      	bge.n	800f226 <tcp_output_alloc_header_common+0x4e>
 800f218:	4b26      	ldr	r3, [pc, #152]	; (800f2b4 <tcp_output_alloc_header_common+0xdc>)
 800f21a:	f240 7224 	movw	r2, #1828	; 0x724
 800f21e:	4926      	ldr	r1, [pc, #152]	; (800f2b8 <tcp_output_alloc_header_common+0xe0>)
 800f220:	4826      	ldr	r0, [pc, #152]	; (800f2bc <tcp_output_alloc_header_common+0xe4>)
 800f222:	f003 fc93 	bl	8012b4c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f22c:	8c3b      	ldrh	r3, [r7, #32]
 800f22e:	4618      	mov	r0, r3
 800f230:	f7f8 fd2f 	bl	8007c92 <lwip_htons>
 800f234:	4603      	mov	r3, r0
 800f236:	461a      	mov	r2, r3
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f23c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f23e:	4618      	mov	r0, r3
 800f240:	f7f8 fd27 	bl	8007c92 <lwip_htons>
 800f244:	4603      	mov	r3, r0
 800f246:	461a      	mov	r2, r3
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	687a      	ldr	r2, [r7, #4]
 800f250:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f252:	68f8      	ldr	r0, [r7, #12]
 800f254:	f7f8 fd32 	bl	8007cbc <lwip_htonl>
 800f258:	4602      	mov	r2, r0
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f25e:	897b      	ldrh	r3, [r7, #10]
 800f260:	089b      	lsrs	r3, r3, #2
 800f262:	b29b      	uxth	r3, r3
 800f264:	3305      	adds	r3, #5
 800f266:	b29b      	uxth	r3, r3
 800f268:	031b      	lsls	r3, r3, #12
 800f26a:	b29a      	uxth	r2, r3
 800f26c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f270:	b29b      	uxth	r3, r3
 800f272:	4313      	orrs	r3, r2
 800f274:	b29b      	uxth	r3, r3
 800f276:	4618      	mov	r0, r3
 800f278:	f7f8 fd0b 	bl	8007c92 <lwip_htons>
 800f27c:	4603      	mov	r3, r0
 800f27e:	461a      	mov	r2, r3
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f284:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f286:	4618      	mov	r0, r3
 800f288:	f7f8 fd03 	bl	8007c92 <lwip_htons>
 800f28c:	4603      	mov	r3, r0
 800f28e:	461a      	mov	r2, r3
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	2200      	movs	r2, #0
 800f298:	741a      	strb	r2, [r3, #16]
 800f29a:	2200      	movs	r2, #0
 800f29c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	749a      	strb	r2, [r3, #18]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f2a8:	697b      	ldr	r3, [r7, #20]
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3718      	adds	r7, #24
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	08015198 	.word	0x08015198
 800f2b8:	08015870 	.word	0x08015870
 800f2bc:	080151ec 	.word	0x080151ec

0800f2c0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f2c0:	b5b0      	push	{r4, r5, r7, lr}
 800f2c2:	b08a      	sub	sp, #40	; 0x28
 800f2c4:	af04      	add	r7, sp, #16
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	607b      	str	r3, [r7, #4]
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	817b      	strh	r3, [r7, #10]
 800f2ce:	4613      	mov	r3, r2
 800f2d0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d106      	bne.n	800f2e6 <tcp_output_alloc_header+0x26>
 800f2d8:	4b15      	ldr	r3, [pc, #84]	; (800f330 <tcp_output_alloc_header+0x70>)
 800f2da:	f240 7242 	movw	r2, #1858	; 0x742
 800f2de:	4915      	ldr	r1, [pc, #84]	; (800f334 <tcp_output_alloc_header+0x74>)
 800f2e0:	4815      	ldr	r0, [pc, #84]	; (800f338 <tcp_output_alloc_header+0x78>)
 800f2e2:	f003 fc33 	bl	8012b4c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	8adb      	ldrh	r3, [r3, #22]
 800f2ee:	68fa      	ldr	r2, [r7, #12]
 800f2f0:	8b12      	ldrh	r2, [r2, #24]
 800f2f2:	68f9      	ldr	r1, [r7, #12]
 800f2f4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f2f6:	893d      	ldrh	r5, [r7, #8]
 800f2f8:	897c      	ldrh	r4, [r7, #10]
 800f2fa:	9103      	str	r1, [sp, #12]
 800f2fc:	2110      	movs	r1, #16
 800f2fe:	9102      	str	r1, [sp, #8]
 800f300:	9201      	str	r2, [sp, #4]
 800f302:	9300      	str	r3, [sp, #0]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	462a      	mov	r2, r5
 800f308:	4621      	mov	r1, r4
 800f30a:	f7ff ff65 	bl	800f1d8 <tcp_output_alloc_header_common>
 800f30e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d006      	beq.n	800f324 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f31a:	68fa      	ldr	r2, [r7, #12]
 800f31c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f31e:	441a      	add	r2, r3
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f324:	697b      	ldr	r3, [r7, #20]
}
 800f326:	4618      	mov	r0, r3
 800f328:	3718      	adds	r7, #24
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bdb0      	pop	{r4, r5, r7, pc}
 800f32e:	bf00      	nop
 800f330:	08015198 	.word	0x08015198
 800f334:	080158a0 	.word	0x080158a0
 800f338:	080151ec 	.word	0x080151ec

0800f33c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b088      	sub	sp, #32
 800f340:	af00      	add	r7, sp, #0
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	60b9      	str	r1, [r7, #8]
 800f346:	4611      	mov	r1, r2
 800f348:	461a      	mov	r2, r3
 800f34a:	460b      	mov	r3, r1
 800f34c:	71fb      	strb	r3, [r7, #7]
 800f34e:	4613      	mov	r3, r2
 800f350:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f352:	2300      	movs	r3, #0
 800f354:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d106      	bne.n	800f36a <tcp_output_fill_options+0x2e>
 800f35c:	4b13      	ldr	r3, [pc, #76]	; (800f3ac <tcp_output_fill_options+0x70>)
 800f35e:	f240 7256 	movw	r2, #1878	; 0x756
 800f362:	4913      	ldr	r1, [pc, #76]	; (800f3b0 <tcp_output_fill_options+0x74>)
 800f364:	4813      	ldr	r0, [pc, #76]	; (800f3b4 <tcp_output_fill_options+0x78>)
 800f366:	f003 fbf1 	bl	8012b4c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f370:	69bb      	ldr	r3, [r7, #24]
 800f372:	3314      	adds	r3, #20
 800f374:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f376:	69bb      	ldr	r3, [r7, #24]
 800f378:	f103 0214 	add.w	r2, r3, #20
 800f37c:	8bfb      	ldrh	r3, [r7, #30]
 800f37e:	009b      	lsls	r3, r3, #2
 800f380:	4619      	mov	r1, r3
 800f382:	79fb      	ldrb	r3, [r7, #7]
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	f003 0304 	and.w	r3, r3, #4
 800f38a:	440b      	add	r3, r1
 800f38c:	4413      	add	r3, r2
 800f38e:	697a      	ldr	r2, [r7, #20]
 800f390:	429a      	cmp	r2, r3
 800f392:	d006      	beq.n	800f3a2 <tcp_output_fill_options+0x66>
 800f394:	4b05      	ldr	r3, [pc, #20]	; (800f3ac <tcp_output_fill_options+0x70>)
 800f396:	f240 7275 	movw	r2, #1909	; 0x775
 800f39a:	4907      	ldr	r1, [pc, #28]	; (800f3b8 <tcp_output_fill_options+0x7c>)
 800f39c:	4805      	ldr	r0, [pc, #20]	; (800f3b4 <tcp_output_fill_options+0x78>)
 800f39e:	f003 fbd5 	bl	8012b4c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f3a2:	bf00      	nop
 800f3a4:	3720      	adds	r7, #32
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}
 800f3aa:	bf00      	nop
 800f3ac:	08015198 	.word	0x08015198
 800f3b0:	080158c8 	.word	0x080158c8
 800f3b4:	080151ec 	.word	0x080151ec
 800f3b8:	080157c0 	.word	0x080157c0

0800f3bc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b08a      	sub	sp, #40	; 0x28
 800f3c0:	af04      	add	r7, sp, #16
 800f3c2:	60f8      	str	r0, [r7, #12]
 800f3c4:	60b9      	str	r1, [r7, #8]
 800f3c6:	607a      	str	r2, [r7, #4]
 800f3c8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d106      	bne.n	800f3de <tcp_output_control_segment+0x22>
 800f3d0:	4b1c      	ldr	r3, [pc, #112]	; (800f444 <tcp_output_control_segment+0x88>)
 800f3d2:	f240 7287 	movw	r2, #1927	; 0x787
 800f3d6:	491c      	ldr	r1, [pc, #112]	; (800f448 <tcp_output_control_segment+0x8c>)
 800f3d8:	481c      	ldr	r0, [pc, #112]	; (800f44c <tcp_output_control_segment+0x90>)
 800f3da:	f003 fbb7 	bl	8012b4c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f3de:	683a      	ldr	r2, [r7, #0]
 800f3e0:	6879      	ldr	r1, [r7, #4]
 800f3e2:	68f8      	ldr	r0, [r7, #12]
 800f3e4:	f7fe fad6 	bl	800d994 <tcp_route>
 800f3e8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d102      	bne.n	800f3f6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f3f0:	23fc      	movs	r3, #252	; 0xfc
 800f3f2:	75fb      	strb	r3, [r7, #23]
 800f3f4:	e01c      	b.n	800f430 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d006      	beq.n	800f40a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	7adb      	ldrb	r3, [r3, #11]
 800f400:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	7a9b      	ldrb	r3, [r3, #10]
 800f406:	757b      	strb	r3, [r7, #21]
 800f408:	e003      	b.n	800f412 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f40a:	23ff      	movs	r3, #255	; 0xff
 800f40c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f40e:	2300      	movs	r3, #0
 800f410:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f412:	7dba      	ldrb	r2, [r7, #22]
 800f414:	693b      	ldr	r3, [r7, #16]
 800f416:	9302      	str	r3, [sp, #8]
 800f418:	2306      	movs	r3, #6
 800f41a:	9301      	str	r3, [sp, #4]
 800f41c:	7d7b      	ldrb	r3, [r7, #21]
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	4613      	mov	r3, r2
 800f422:	683a      	ldr	r2, [r7, #0]
 800f424:	6879      	ldr	r1, [r7, #4]
 800f426:	68b8      	ldr	r0, [r7, #8]
 800f428:	f002 fb26 	bl	8011a78 <ip4_output_if>
 800f42c:	4603      	mov	r3, r0
 800f42e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f430:	68b8      	ldr	r0, [r7, #8]
 800f432:	f7f9 fedd 	bl	80091f0 <pbuf_free>
  return err;
 800f436:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3718      	adds	r7, #24
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}
 800f442:	bf00      	nop
 800f444:	08015198 	.word	0x08015198
 800f448:	080158f0 	.word	0x080158f0
 800f44c:	080151ec 	.word	0x080151ec

0800f450 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f450:	b590      	push	{r4, r7, lr}
 800f452:	b08b      	sub	sp, #44	; 0x2c
 800f454:	af04      	add	r7, sp, #16
 800f456:	60f8      	str	r0, [r7, #12]
 800f458:	60b9      	str	r1, [r7, #8]
 800f45a:	607a      	str	r2, [r7, #4]
 800f45c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d106      	bne.n	800f472 <tcp_rst+0x22>
 800f464:	4b1f      	ldr	r3, [pc, #124]	; (800f4e4 <tcp_rst+0x94>)
 800f466:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f46a:	491f      	ldr	r1, [pc, #124]	; (800f4e8 <tcp_rst+0x98>)
 800f46c:	481f      	ldr	r0, [pc, #124]	; (800f4ec <tcp_rst+0x9c>)
 800f46e:	f003 fb6d 	bl	8012b4c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f474:	2b00      	cmp	r3, #0
 800f476:	d106      	bne.n	800f486 <tcp_rst+0x36>
 800f478:	4b1a      	ldr	r3, [pc, #104]	; (800f4e4 <tcp_rst+0x94>)
 800f47a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f47e:	491c      	ldr	r1, [pc, #112]	; (800f4f0 <tcp_rst+0xa0>)
 800f480:	481a      	ldr	r0, [pc, #104]	; (800f4ec <tcp_rst+0x9c>)
 800f482:	f003 fb63 	bl	8012b4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f486:	2300      	movs	r3, #0
 800f488:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f48a:	f246 0308 	movw	r3, #24584	; 0x6008
 800f48e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f490:	7dfb      	ldrb	r3, [r7, #23]
 800f492:	b29c      	uxth	r4, r3
 800f494:	68b8      	ldr	r0, [r7, #8]
 800f496:	f7f8 fc11 	bl	8007cbc <lwip_htonl>
 800f49a:	4602      	mov	r2, r0
 800f49c:	8abb      	ldrh	r3, [r7, #20]
 800f49e:	9303      	str	r3, [sp, #12]
 800f4a0:	2314      	movs	r3, #20
 800f4a2:	9302      	str	r3, [sp, #8]
 800f4a4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f4a6:	9301      	str	r3, [sp, #4]
 800f4a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f4aa:	9300      	str	r3, [sp, #0]
 800f4ac:	4613      	mov	r3, r2
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	4621      	mov	r1, r4
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f7ff fe90 	bl	800f1d8 <tcp_output_alloc_header_common>
 800f4b8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d00c      	beq.n	800f4da <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f4c0:	7dfb      	ldrb	r3, [r7, #23]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	6939      	ldr	r1, [r7, #16]
 800f4c6:	68f8      	ldr	r0, [r7, #12]
 800f4c8:	f7ff ff38 	bl	800f33c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ce:	683a      	ldr	r2, [r7, #0]
 800f4d0:	6939      	ldr	r1, [r7, #16]
 800f4d2:	68f8      	ldr	r0, [r7, #12]
 800f4d4:	f7ff ff72 	bl	800f3bc <tcp_output_control_segment>
 800f4d8:	e000      	b.n	800f4dc <tcp_rst+0x8c>
    return;
 800f4da:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f4dc:	371c      	adds	r7, #28
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd90      	pop	{r4, r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	08015198 	.word	0x08015198
 800f4e8:	0801591c 	.word	0x0801591c
 800f4ec:	080151ec 	.word	0x080151ec
 800f4f0:	08015938 	.word	0x08015938

0800f4f4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f4f4:	b590      	push	{r4, r7, lr}
 800f4f6:	b087      	sub	sp, #28
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f500:	2300      	movs	r3, #0
 800f502:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d106      	bne.n	800f518 <tcp_send_empty_ack+0x24>
 800f50a:	4b28      	ldr	r3, [pc, #160]	; (800f5ac <tcp_send_empty_ack+0xb8>)
 800f50c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f510:	4927      	ldr	r1, [pc, #156]	; (800f5b0 <tcp_send_empty_ack+0xbc>)
 800f512:	4828      	ldr	r0, [pc, #160]	; (800f5b4 <tcp_send_empty_ack+0xc0>)
 800f514:	f003 fb1a 	bl	8012b4c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f518:	7dfb      	ldrb	r3, [r7, #23]
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	f003 0304 	and.w	r3, r3, #4
 800f522:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f524:	7d7b      	ldrb	r3, [r7, #21]
 800f526:	b29c      	uxth	r4, r3
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7f8 fbc5 	bl	8007cbc <lwip_htonl>
 800f532:	4603      	mov	r3, r0
 800f534:	2200      	movs	r2, #0
 800f536:	4621      	mov	r1, r4
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f7ff fec1 	bl	800f2c0 <tcp_output_alloc_header>
 800f53e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d109      	bne.n	800f55a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	8b5b      	ldrh	r3, [r3, #26]
 800f54a:	f043 0303 	orr.w	r3, r3, #3
 800f54e:	b29a      	uxth	r2, r3
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f554:	f06f 0301 	mvn.w	r3, #1
 800f558:	e023      	b.n	800f5a2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f55a:	7dbb      	ldrb	r3, [r7, #22]
 800f55c:	7dfa      	ldrb	r2, [r7, #23]
 800f55e:	6939      	ldr	r1, [r7, #16]
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f7ff feeb 	bl	800f33c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f566:	687a      	ldr	r2, [r7, #4]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	3304      	adds	r3, #4
 800f56c:	6939      	ldr	r1, [r7, #16]
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f7ff ff24 	bl	800f3bc <tcp_output_control_segment>
 800f574:	4603      	mov	r3, r0
 800f576:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d007      	beq.n	800f590 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	8b5b      	ldrh	r3, [r3, #26]
 800f584:	f043 0303 	orr.w	r3, r3, #3
 800f588:	b29a      	uxth	r2, r3
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	835a      	strh	r2, [r3, #26]
 800f58e:	e006      	b.n	800f59e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	8b5b      	ldrh	r3, [r3, #26]
 800f594:	f023 0303 	bic.w	r3, r3, #3
 800f598:	b29a      	uxth	r2, r3
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f59e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	371c      	adds	r7, #28
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd90      	pop	{r4, r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	08015198 	.word	0x08015198
 800f5b0:	08015954 	.word	0x08015954
 800f5b4:	080151ec 	.word	0x080151ec

0800f5b8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f5b8:	b590      	push	{r4, r7, lr}
 800f5ba:	b087      	sub	sp, #28
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d106      	bne.n	800f5d8 <tcp_keepalive+0x20>
 800f5ca:	4b18      	ldr	r3, [pc, #96]	; (800f62c <tcp_keepalive+0x74>)
 800f5cc:	f640 0224 	movw	r2, #2084	; 0x824
 800f5d0:	4917      	ldr	r1, [pc, #92]	; (800f630 <tcp_keepalive+0x78>)
 800f5d2:	4818      	ldr	r0, [pc, #96]	; (800f634 <tcp_keepalive+0x7c>)
 800f5d4:	f003 faba 	bl	8012b4c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f5d8:	7dfb      	ldrb	r3, [r7, #23]
 800f5da:	b29c      	uxth	r4, r3
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5e0:	3b01      	subs	r3, #1
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7f8 fb6a 	bl	8007cbc <lwip_htonl>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	4621      	mov	r1, r4
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f7ff fe66 	bl	800f2c0 <tcp_output_alloc_header>
 800f5f4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d102      	bne.n	800f602 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800f600:	e010      	b.n	800f624 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f602:	7dfb      	ldrb	r3, [r7, #23]
 800f604:	2200      	movs	r2, #0
 800f606:	6939      	ldr	r1, [r7, #16]
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f7ff fe97 	bl	800f33c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	3304      	adds	r3, #4
 800f614:	6939      	ldr	r1, [r7, #16]
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f7ff fed0 	bl	800f3bc <tcp_output_control_segment>
 800f61c:	4603      	mov	r3, r0
 800f61e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f620:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f624:	4618      	mov	r0, r3
 800f626:	371c      	adds	r7, #28
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd90      	pop	{r4, r7, pc}
 800f62c:	08015198 	.word	0x08015198
 800f630:	08015974 	.word	0x08015974
 800f634:	080151ec 	.word	0x080151ec

0800f638 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f638:	b590      	push	{r4, r7, lr}
 800f63a:	b08b      	sub	sp, #44	; 0x2c
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f640:	2300      	movs	r3, #0
 800f642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d106      	bne.n	800f65a <tcp_zero_window_probe+0x22>
 800f64c:	4b4c      	ldr	r3, [pc, #304]	; (800f780 <tcp_zero_window_probe+0x148>)
 800f64e:	f640 024f 	movw	r2, #2127	; 0x84f
 800f652:	494c      	ldr	r1, [pc, #304]	; (800f784 <tcp_zero_window_probe+0x14c>)
 800f654:	484c      	ldr	r0, [pc, #304]	; (800f788 <tcp_zero_window_probe+0x150>)
 800f656:	f003 fa79 	bl	8012b4c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f65e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f660:	6a3b      	ldr	r3, [r7, #32]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d101      	bne.n	800f66a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f666:	2300      	movs	r3, #0
 800f668:	e086      	b.n	800f778 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f670:	2bff      	cmp	r3, #255	; 0xff
 800f672:	d007      	beq.n	800f684 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f67a:	3301      	adds	r3, #1
 800f67c:	b2da      	uxtb	r2, r3
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f684:	6a3b      	ldr	r3, [r7, #32]
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	899b      	ldrh	r3, [r3, #12]
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	4618      	mov	r0, r3
 800f68e:	f7f8 fb00 	bl	8007c92 <lwip_htons>
 800f692:	4603      	mov	r3, r0
 800f694:	b2db      	uxtb	r3, r3
 800f696:	f003 0301 	and.w	r3, r3, #1
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d005      	beq.n	800f6aa <tcp_zero_window_probe+0x72>
 800f69e:	6a3b      	ldr	r3, [r7, #32]
 800f6a0:	891b      	ldrh	r3, [r3, #8]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d101      	bne.n	800f6aa <tcp_zero_window_probe+0x72>
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	e000      	b.n	800f6ac <tcp_zero_window_probe+0x74>
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f6ae:	7ffb      	ldrb	r3, [r7, #31]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	bf0c      	ite	eq
 800f6b4:	2301      	moveq	r3, #1
 800f6b6:	2300      	movne	r3, #0
 800f6b8:	b2db      	uxtb	r3, r3
 800f6ba:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f6bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6c0:	b299      	uxth	r1, r3
 800f6c2:	6a3b      	ldr	r3, [r7, #32]
 800f6c4:	68db      	ldr	r3, [r3, #12]
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	8bba      	ldrh	r2, [r7, #28]
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f7ff fdf8 	bl	800f2c0 <tcp_output_alloc_header>
 800f6d0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f6d2:	69bb      	ldr	r3, [r7, #24]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d102      	bne.n	800f6de <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f6dc:	e04c      	b.n	800f778 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f6de:	69bb      	ldr	r3, [r7, #24]
 800f6e0:	685b      	ldr	r3, [r3, #4]
 800f6e2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f6e4:	7ffb      	ldrb	r3, [r7, #31]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d011      	beq.n	800f70e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	899b      	ldrh	r3, [r3, #12]
 800f6ee:	b29b      	uxth	r3, r3
 800f6f0:	b21b      	sxth	r3, r3
 800f6f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f6f6:	b21c      	sxth	r4, r3
 800f6f8:	2011      	movs	r0, #17
 800f6fa:	f7f8 faca 	bl	8007c92 <lwip_htons>
 800f6fe:	4603      	mov	r3, r0
 800f700:	b21b      	sxth	r3, r3
 800f702:	4323      	orrs	r3, r4
 800f704:	b21b      	sxth	r3, r3
 800f706:	b29a      	uxth	r2, r3
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	819a      	strh	r2, [r3, #12]
 800f70c:	e010      	b.n	800f730 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f70e:	69bb      	ldr	r3, [r7, #24]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	3314      	adds	r3, #20
 800f714:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f716:	6a3b      	ldr	r3, [r7, #32]
 800f718:	6858      	ldr	r0, [r3, #4]
 800f71a:	6a3b      	ldr	r3, [r7, #32]
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	891a      	ldrh	r2, [r3, #8]
 800f720:	6a3b      	ldr	r3, [r7, #32]
 800f722:	891b      	ldrh	r3, [r3, #8]
 800f724:	1ad3      	subs	r3, r2, r3
 800f726:	b29b      	uxth	r3, r3
 800f728:	2201      	movs	r2, #1
 800f72a:	6939      	ldr	r1, [r7, #16]
 800f72c:	f7f9 ff5a 	bl	80095e4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f730:	6a3b      	ldr	r3, [r7, #32]
 800f732:	68db      	ldr	r3, [r3, #12]
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	4618      	mov	r0, r3
 800f738:	f7f8 fac0 	bl	8007cbc <lwip_htonl>
 800f73c:	4603      	mov	r3, r0
 800f73e:	3301      	adds	r3, #1
 800f740:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	1ad3      	subs	r3, r2, r3
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	da02      	bge.n	800f754 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	68fa      	ldr	r2, [r7, #12]
 800f752:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f758:	2200      	movs	r2, #0
 800f75a:	69b9      	ldr	r1, [r7, #24]
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f7ff fded 	bl	800f33c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	3304      	adds	r3, #4
 800f768:	69b9      	ldr	r1, [r7, #24]
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f7ff fe26 	bl	800f3bc <tcp_output_control_segment>
 800f770:	4603      	mov	r3, r0
 800f772:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f774:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f778:	4618      	mov	r0, r3
 800f77a:	372c      	adds	r7, #44	; 0x2c
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd90      	pop	{r4, r7, pc}
 800f780:	08015198 	.word	0x08015198
 800f784:	08015990 	.word	0x08015990
 800f788:	080151ec 	.word	0x080151ec

0800f78c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b082      	sub	sp, #8
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f794:	f7fa f814 	bl	80097c0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f798:	4b0a      	ldr	r3, [pc, #40]	; (800f7c4 <tcpip_tcp_timer+0x38>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d103      	bne.n	800f7a8 <tcpip_tcp_timer+0x1c>
 800f7a0:	4b09      	ldr	r3, [pc, #36]	; (800f7c8 <tcpip_tcp_timer+0x3c>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d005      	beq.n	800f7b4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	4908      	ldr	r1, [pc, #32]	; (800f7cc <tcpip_tcp_timer+0x40>)
 800f7ac:	20fa      	movs	r0, #250	; 0xfa
 800f7ae:	f000 f8f1 	bl	800f994 <sys_timeout>
 800f7b2:	e002      	b.n	800f7ba <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f7b4:	4b06      	ldr	r3, [pc, #24]	; (800f7d0 <tcpip_tcp_timer+0x44>)
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	601a      	str	r2, [r3, #0]
  }
}
 800f7ba:	bf00      	nop
 800f7bc:	3708      	adds	r7, #8
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}
 800f7c2:	bf00      	nop
 800f7c4:	2000bcc4 	.word	0x2000bcc4
 800f7c8:	2000bcd4 	.word	0x2000bcd4
 800f7cc:	0800f78d 	.word	0x0800f78d
 800f7d0:	20000180 	.word	0x20000180

0800f7d4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f7d8:	4b0a      	ldr	r3, [pc, #40]	; (800f804 <tcp_timer_needed+0x30>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d10f      	bne.n	800f800 <tcp_timer_needed+0x2c>
 800f7e0:	4b09      	ldr	r3, [pc, #36]	; (800f808 <tcp_timer_needed+0x34>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d103      	bne.n	800f7f0 <tcp_timer_needed+0x1c>
 800f7e8:	4b08      	ldr	r3, [pc, #32]	; (800f80c <tcp_timer_needed+0x38>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d007      	beq.n	800f800 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f7f0:	4b04      	ldr	r3, [pc, #16]	; (800f804 <tcp_timer_needed+0x30>)
 800f7f2:	2201      	movs	r2, #1
 800f7f4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	4905      	ldr	r1, [pc, #20]	; (800f810 <tcp_timer_needed+0x3c>)
 800f7fa:	20fa      	movs	r0, #250	; 0xfa
 800f7fc:	f000 f8ca 	bl	800f994 <sys_timeout>
  }
}
 800f800:	bf00      	nop
 800f802:	bd80      	pop	{r7, pc}
 800f804:	20000180 	.word	0x20000180
 800f808:	2000bcc4 	.word	0x2000bcc4
 800f80c:	2000bcd4 	.word	0x2000bcd4
 800f810:	0800f78d 	.word	0x0800f78d

0800f814 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b086      	sub	sp, #24
 800f818:	af00      	add	r7, sp, #0
 800f81a:	60f8      	str	r0, [r7, #12]
 800f81c:	60b9      	str	r1, [r7, #8]
 800f81e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f820:	2006      	movs	r0, #6
 800f822:	f7f8 fe8b 	bl	800853c <memp_malloc>
 800f826:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f828:	693b      	ldr	r3, [r7, #16]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d109      	bne.n	800f842 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f82e:	693b      	ldr	r3, [r7, #16]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d151      	bne.n	800f8d8 <sys_timeout_abs+0xc4>
 800f834:	4b2a      	ldr	r3, [pc, #168]	; (800f8e0 <sys_timeout_abs+0xcc>)
 800f836:	22be      	movs	r2, #190	; 0xbe
 800f838:	492a      	ldr	r1, [pc, #168]	; (800f8e4 <sys_timeout_abs+0xd0>)
 800f83a:	482b      	ldr	r0, [pc, #172]	; (800f8e8 <sys_timeout_abs+0xd4>)
 800f83c:	f003 f986 	bl	8012b4c <iprintf>
    return;
 800f840:	e04a      	b.n	800f8d8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	2200      	movs	r2, #0
 800f846:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	68ba      	ldr	r2, [r7, #8]
 800f84c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	687a      	ldr	r2, [r7, #4]
 800f852:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	68fa      	ldr	r2, [r7, #12]
 800f858:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f85a:	4b24      	ldr	r3, [pc, #144]	; (800f8ec <sys_timeout_abs+0xd8>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d103      	bne.n	800f86a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f862:	4a22      	ldr	r2, [pc, #136]	; (800f8ec <sys_timeout_abs+0xd8>)
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	6013      	str	r3, [r2, #0]
    return;
 800f868:	e037      	b.n	800f8da <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	685a      	ldr	r2, [r3, #4]
 800f86e:	4b1f      	ldr	r3, [pc, #124]	; (800f8ec <sys_timeout_abs+0xd8>)
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	685b      	ldr	r3, [r3, #4]
 800f874:	1ad3      	subs	r3, r2, r3
 800f876:	0fdb      	lsrs	r3, r3, #31
 800f878:	f003 0301 	and.w	r3, r3, #1
 800f87c:	b2db      	uxtb	r3, r3
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d007      	beq.n	800f892 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f882:	4b1a      	ldr	r3, [pc, #104]	; (800f8ec <sys_timeout_abs+0xd8>)
 800f884:	681a      	ldr	r2, [r3, #0]
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f88a:	4a18      	ldr	r2, [pc, #96]	; (800f8ec <sys_timeout_abs+0xd8>)
 800f88c:	693b      	ldr	r3, [r7, #16]
 800f88e:	6013      	str	r3, [r2, #0]
 800f890:	e023      	b.n	800f8da <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f892:	4b16      	ldr	r3, [pc, #88]	; (800f8ec <sys_timeout_abs+0xd8>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	617b      	str	r3, [r7, #20]
 800f898:	e01a      	b.n	800f8d0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d00b      	beq.n	800f8ba <sys_timeout_abs+0xa6>
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	685a      	ldr	r2, [r3, #4]
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	685b      	ldr	r3, [r3, #4]
 800f8ac:	1ad3      	subs	r3, r2, r3
 800f8ae:	0fdb      	lsrs	r3, r3, #31
 800f8b0:	f003 0301 	and.w	r3, r3, #1
 800f8b4:	b2db      	uxtb	r3, r3
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d007      	beq.n	800f8ca <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	693a      	ldr	r2, [r7, #16]
 800f8c6:	601a      	str	r2, [r3, #0]
        break;
 800f8c8:	e007      	b.n	800f8da <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	617b      	str	r3, [r7, #20]
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d1e1      	bne.n	800f89a <sys_timeout_abs+0x86>
 800f8d6:	e000      	b.n	800f8da <sys_timeout_abs+0xc6>
    return;
 800f8d8:	bf00      	nop
      }
    }
  }
}
 800f8da:	3718      	adds	r7, #24
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	080159b4 	.word	0x080159b4
 800f8e4:	080159e8 	.word	0x080159e8
 800f8e8:	08015a28 	.word	0x08015a28
 800f8ec:	20000178 	.word	0x20000178

0800f8f0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b086      	sub	sp, #24
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	4798      	blx	r3

  now = sys_now();
 800f902:	f7f5 fd3d 	bl	8005380 <sys_now>
 800f906:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	681a      	ldr	r2, [r3, #0]
 800f90c:	4b0f      	ldr	r3, [pc, #60]	; (800f94c <lwip_cyclic_timer+0x5c>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4413      	add	r3, r2
 800f912:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f914:	68fa      	ldr	r2, [r7, #12]
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	1ad3      	subs	r3, r2, r3
 800f91a:	0fdb      	lsrs	r3, r3, #31
 800f91c:	f003 0301 	and.w	r3, r3, #1
 800f920:	b2db      	uxtb	r3, r3
 800f922:	2b00      	cmp	r3, #0
 800f924:	d009      	beq.n	800f93a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	4413      	add	r3, r2
 800f92e:	687a      	ldr	r2, [r7, #4]
 800f930:	4907      	ldr	r1, [pc, #28]	; (800f950 <lwip_cyclic_timer+0x60>)
 800f932:	4618      	mov	r0, r3
 800f934:	f7ff ff6e 	bl	800f814 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f938:	e004      	b.n	800f944 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f93a:	687a      	ldr	r2, [r7, #4]
 800f93c:	4904      	ldr	r1, [pc, #16]	; (800f950 <lwip_cyclic_timer+0x60>)
 800f93e:	68f8      	ldr	r0, [r7, #12]
 800f940:	f7ff ff68 	bl	800f814 <sys_timeout_abs>
}
 800f944:	bf00      	nop
 800f946:	3718      	adds	r7, #24
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	2000017c 	.word	0x2000017c
 800f950:	0800f8f1 	.word	0x0800f8f1

0800f954 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b082      	sub	sp, #8
 800f958:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f95a:	2301      	movs	r3, #1
 800f95c:	607b      	str	r3, [r7, #4]
 800f95e:	e00e      	b.n	800f97e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f960:	4a0a      	ldr	r2, [pc, #40]	; (800f98c <sys_timeouts_init+0x38>)
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	00db      	lsls	r3, r3, #3
 800f96c:	4a07      	ldr	r2, [pc, #28]	; (800f98c <sys_timeouts_init+0x38>)
 800f96e:	4413      	add	r3, r2
 800f970:	461a      	mov	r2, r3
 800f972:	4907      	ldr	r1, [pc, #28]	; (800f990 <sys_timeouts_init+0x3c>)
 800f974:	f000 f80e 	bl	800f994 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	3301      	adds	r3, #1
 800f97c:	607b      	str	r3, [r7, #4]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2b02      	cmp	r3, #2
 800f982:	d9ed      	bls.n	800f960 <sys_timeouts_init+0xc>
  }
}
 800f984:	bf00      	nop
 800f986:	3708      	adds	r7, #8
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}
 800f98c:	0801660c 	.word	0x0801660c
 800f990:	0800f8f1 	.word	0x0800f8f1

0800f994 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b086      	sub	sp, #24
 800f998:	af00      	add	r7, sp, #0
 800f99a:	60f8      	str	r0, [r7, #12]
 800f99c:	60b9      	str	r1, [r7, #8]
 800f99e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9a6:	d306      	bcc.n	800f9b6 <sys_timeout+0x22>
 800f9a8:	4b0a      	ldr	r3, [pc, #40]	; (800f9d4 <sys_timeout+0x40>)
 800f9aa:	f240 1229 	movw	r2, #297	; 0x129
 800f9ae:	490a      	ldr	r1, [pc, #40]	; (800f9d8 <sys_timeout+0x44>)
 800f9b0:	480a      	ldr	r0, [pc, #40]	; (800f9dc <sys_timeout+0x48>)
 800f9b2:	f003 f8cb 	bl	8012b4c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f9b6:	f7f5 fce3 	bl	8005380 <sys_now>
 800f9ba:	4602      	mov	r2, r0
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	4413      	add	r3, r2
 800f9c0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f9c2:	687a      	ldr	r2, [r7, #4]
 800f9c4:	68b9      	ldr	r1, [r7, #8]
 800f9c6:	6978      	ldr	r0, [r7, #20]
 800f9c8:	f7ff ff24 	bl	800f814 <sys_timeout_abs>
#endif
}
 800f9cc:	bf00      	nop
 800f9ce:	3718      	adds	r7, #24
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}
 800f9d4:	080159b4 	.word	0x080159b4
 800f9d8:	08015a50 	.word	0x08015a50
 800f9dc:	08015a28 	.word	0x08015a28

0800f9e0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f9e6:	f7f5 fccb 	bl	8005380 <sys_now>
 800f9ea:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800f9ec:	4b1a      	ldr	r3, [pc, #104]	; (800fa58 <sys_check_timeouts+0x78>)
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d001      	beq.n	800f9fa <sys_check_timeouts+0x1a>
 800f9f6:	f7f9 f8c5 	bl	8008b84 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800f9fa:	4b18      	ldr	r3, [pc, #96]	; (800fa5c <sys_check_timeouts+0x7c>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d022      	beq.n	800fa4c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	685b      	ldr	r3, [r3, #4]
 800fa0a:	68fa      	ldr	r2, [r7, #12]
 800fa0c:	1ad3      	subs	r3, r2, r3
 800fa0e:	0fdb      	lsrs	r3, r3, #31
 800fa10:	f003 0301 	and.w	r3, r3, #1
 800fa14:	b2db      	uxtb	r3, r3
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d11a      	bne.n	800fa50 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	4a0f      	ldr	r2, [pc, #60]	; (800fa5c <sys_check_timeouts+0x7c>)
 800fa20:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	689b      	ldr	r3, [r3, #8]
 800fa26:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	68db      	ldr	r3, [r3, #12]
 800fa2c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	685b      	ldr	r3, [r3, #4]
 800fa32:	4a0b      	ldr	r2, [pc, #44]	; (800fa60 <sys_check_timeouts+0x80>)
 800fa34:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800fa36:	68b9      	ldr	r1, [r7, #8]
 800fa38:	2006      	movs	r0, #6
 800fa3a:	f7f8 fdcb 	bl	80085d4 <memp_free>
    if (handler != NULL) {
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d0d3      	beq.n	800f9ec <sys_check_timeouts+0xc>
      handler(arg);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6838      	ldr	r0, [r7, #0]
 800fa48:	4798      	blx	r3
  do {
 800fa4a:	e7cf      	b.n	800f9ec <sys_check_timeouts+0xc>
      return;
 800fa4c:	bf00      	nop
 800fa4e:	e000      	b.n	800fa52 <sys_check_timeouts+0x72>
      return;
 800fa50:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800fa52:	3710      	adds	r7, #16
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}
 800fa58:	2000bcbc 	.word	0x2000bcbc
 800fa5c:	20000178 	.word	0x20000178
 800fa60:	2000017c 	.word	0x2000017c

0800fa64 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fa68:	f003 f888 	bl	8012b7c <rand>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fa74:	b29b      	uxth	r3, r3
 800fa76:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800fa7a:	b29a      	uxth	r2, r3
 800fa7c:	4b01      	ldr	r3, [pc, #4]	; (800fa84 <udp_init+0x20>)
 800fa7e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fa80:	bf00      	nop
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	2000004c 	.word	0x2000004c

0800fa88 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b083      	sub	sp, #12
 800fa8c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800fa92:	4b17      	ldr	r3, [pc, #92]	; (800faf0 <udp_new_port+0x68>)
 800fa94:	881b      	ldrh	r3, [r3, #0]
 800fa96:	1c5a      	adds	r2, r3, #1
 800fa98:	b291      	uxth	r1, r2
 800fa9a:	4a15      	ldr	r2, [pc, #84]	; (800faf0 <udp_new_port+0x68>)
 800fa9c:	8011      	strh	r1, [r2, #0]
 800fa9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800faa2:	4293      	cmp	r3, r2
 800faa4:	d103      	bne.n	800faae <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800faa6:	4b12      	ldr	r3, [pc, #72]	; (800faf0 <udp_new_port+0x68>)
 800faa8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800faac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800faae:	4b11      	ldr	r3, [pc, #68]	; (800faf4 <udp_new_port+0x6c>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	603b      	str	r3, [r7, #0]
 800fab4:	e011      	b.n	800fada <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	8a5a      	ldrh	r2, [r3, #18]
 800faba:	4b0d      	ldr	r3, [pc, #52]	; (800faf0 <udp_new_port+0x68>)
 800fabc:	881b      	ldrh	r3, [r3, #0]
 800fabe:	429a      	cmp	r2, r3
 800fac0:	d108      	bne.n	800fad4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800fac2:	88fb      	ldrh	r3, [r7, #6]
 800fac4:	3301      	adds	r3, #1
 800fac6:	80fb      	strh	r3, [r7, #6]
 800fac8:	88fb      	ldrh	r3, [r7, #6]
 800faca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800face:	d3e0      	bcc.n	800fa92 <udp_new_port+0xa>
        return 0;
 800fad0:	2300      	movs	r3, #0
 800fad2:	e007      	b.n	800fae4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	68db      	ldr	r3, [r3, #12]
 800fad8:	603b      	str	r3, [r7, #0]
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d1ea      	bne.n	800fab6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800fae0:	4b03      	ldr	r3, [pc, #12]	; (800faf0 <udp_new_port+0x68>)
 800fae2:	881b      	ldrh	r3, [r3, #0]
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	370c      	adds	r7, #12
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr
 800faf0:	2000004c 	.word	0x2000004c
 800faf4:	2000bcdc 	.word	0x2000bcdc

0800faf8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	60f8      	str	r0, [r7, #12]
 800fb00:	60b9      	str	r1, [r7, #8]
 800fb02:	4613      	mov	r3, r2
 800fb04:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d105      	bne.n	800fb18 <udp_input_local_match+0x20>
 800fb0c:	4b27      	ldr	r3, [pc, #156]	; (800fbac <udp_input_local_match+0xb4>)
 800fb0e:	2287      	movs	r2, #135	; 0x87
 800fb10:	4927      	ldr	r1, [pc, #156]	; (800fbb0 <udp_input_local_match+0xb8>)
 800fb12:	4828      	ldr	r0, [pc, #160]	; (800fbb4 <udp_input_local_match+0xbc>)
 800fb14:	f003 f81a 	bl	8012b4c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d105      	bne.n	800fb2a <udp_input_local_match+0x32>
 800fb1e:	4b23      	ldr	r3, [pc, #140]	; (800fbac <udp_input_local_match+0xb4>)
 800fb20:	2288      	movs	r2, #136	; 0x88
 800fb22:	4925      	ldr	r1, [pc, #148]	; (800fbb8 <udp_input_local_match+0xc0>)
 800fb24:	4823      	ldr	r0, [pc, #140]	; (800fbb4 <udp_input_local_match+0xbc>)
 800fb26:	f003 f811 	bl	8012b4c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	7a1b      	ldrb	r3, [r3, #8]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d00b      	beq.n	800fb4a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	7a1a      	ldrb	r2, [r3, #8]
 800fb36:	4b21      	ldr	r3, [pc, #132]	; (800fbbc <udp_input_local_match+0xc4>)
 800fb38:	685b      	ldr	r3, [r3, #4]
 800fb3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fb3e:	3301      	adds	r3, #1
 800fb40:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fb42:	429a      	cmp	r2, r3
 800fb44:	d001      	beq.n	800fb4a <udp_input_local_match+0x52>
    return 0;
 800fb46:	2300      	movs	r3, #0
 800fb48:	e02b      	b.n	800fba2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800fb4a:	79fb      	ldrb	r3, [r7, #7]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d018      	beq.n	800fb82 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d013      	beq.n	800fb7e <udp_input_local_match+0x86>
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d00f      	beq.n	800fb7e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fb5e:	4b17      	ldr	r3, [pc, #92]	; (800fbbc <udp_input_local_match+0xc4>)
 800fb60:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb66:	d00a      	beq.n	800fb7e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681a      	ldr	r2, [r3, #0]
 800fb6c:	4b13      	ldr	r3, [pc, #76]	; (800fbbc <udp_input_local_match+0xc4>)
 800fb6e:	695b      	ldr	r3, [r3, #20]
 800fb70:	405a      	eors	r2, r3
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	3308      	adds	r3, #8
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d110      	bne.n	800fba0 <udp_input_local_match+0xa8>
          return 1;
 800fb7e:	2301      	movs	r3, #1
 800fb80:	e00f      	b.n	800fba2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d009      	beq.n	800fb9c <udp_input_local_match+0xa4>
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d005      	beq.n	800fb9c <udp_input_local_match+0xa4>
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	681a      	ldr	r2, [r3, #0]
 800fb94:	4b09      	ldr	r3, [pc, #36]	; (800fbbc <udp_input_local_match+0xc4>)
 800fb96:	695b      	ldr	r3, [r3, #20]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d101      	bne.n	800fba0 <udp_input_local_match+0xa8>
        return 1;
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	e000      	b.n	800fba2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800fba0:	2300      	movs	r3, #0
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3710      	adds	r7, #16
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	bf00      	nop
 800fbac:	08015a9c 	.word	0x08015a9c
 800fbb0:	08015acc 	.word	0x08015acc
 800fbb4:	08015af0 	.word	0x08015af0
 800fbb8:	08015b18 	.word	0x08015b18
 800fbbc:	20008780 	.word	0x20008780

0800fbc0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800fbc0:	b590      	push	{r4, r7, lr}
 800fbc2:	b08d      	sub	sp, #52	; 0x34
 800fbc4:	af02      	add	r7, sp, #8
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d105      	bne.n	800fbe0 <udp_input+0x20>
 800fbd4:	4b7c      	ldr	r3, [pc, #496]	; (800fdc8 <udp_input+0x208>)
 800fbd6:	22cf      	movs	r2, #207	; 0xcf
 800fbd8:	497c      	ldr	r1, [pc, #496]	; (800fdcc <udp_input+0x20c>)
 800fbda:	487d      	ldr	r0, [pc, #500]	; (800fdd0 <udp_input+0x210>)
 800fbdc:	f002 ffb6 	bl	8012b4c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d105      	bne.n	800fbf2 <udp_input+0x32>
 800fbe6:	4b78      	ldr	r3, [pc, #480]	; (800fdc8 <udp_input+0x208>)
 800fbe8:	22d0      	movs	r2, #208	; 0xd0
 800fbea:	497a      	ldr	r1, [pc, #488]	; (800fdd4 <udp_input+0x214>)
 800fbec:	4878      	ldr	r0, [pc, #480]	; (800fdd0 <udp_input+0x210>)
 800fbee:	f002 ffad 	bl	8012b4c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	895b      	ldrh	r3, [r3, #10]
 800fbf6:	2b07      	cmp	r3, #7
 800fbf8:	d803      	bhi.n	800fc02 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f7f9 faf8 	bl	80091f0 <pbuf_free>
    goto end;
 800fc00:	e0de      	b.n	800fdc0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800fc08:	4b73      	ldr	r3, [pc, #460]	; (800fdd8 <udp_input+0x218>)
 800fc0a:	695a      	ldr	r2, [r3, #20]
 800fc0c:	4b72      	ldr	r3, [pc, #456]	; (800fdd8 <udp_input+0x218>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4619      	mov	r1, r3
 800fc12:	4610      	mov	r0, r2
 800fc14:	f002 f808 	bl	8011c28 <ip4_addr_isbroadcast_u32>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	881b      	ldrh	r3, [r3, #0]
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7f8 f835 	bl	8007c92 <lwip_htons>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	885b      	ldrh	r3, [r3, #2]
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7f8 f82d 	bl	8007c92 <lwip_htons>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800fc40:	2300      	movs	r3, #0
 800fc42:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800fc44:	2300      	movs	r3, #0
 800fc46:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc48:	4b64      	ldr	r3, [pc, #400]	; (800fddc <udp_input+0x21c>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	627b      	str	r3, [r7, #36]	; 0x24
 800fc4e:	e054      	b.n	800fcfa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800fc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc52:	8a5b      	ldrh	r3, [r3, #18]
 800fc54:	89fa      	ldrh	r2, [r7, #14]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d14a      	bne.n	800fcf0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800fc5a:	7cfb      	ldrb	r3, [r7, #19]
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	6839      	ldr	r1, [r7, #0]
 800fc60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc62:	f7ff ff49 	bl	800faf8 <udp_input_local_match>
 800fc66:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d041      	beq.n	800fcf0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800fc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6e:	7c1b      	ldrb	r3, [r3, #16]
 800fc70:	f003 0304 	and.w	r3, r3, #4
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d11d      	bne.n	800fcb4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d102      	bne.n	800fc84 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800fc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc80:	61fb      	str	r3, [r7, #28]
 800fc82:	e017      	b.n	800fcb4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800fc84:	7cfb      	ldrb	r3, [r7, #19]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d014      	beq.n	800fcb4 <udp_input+0xf4>
 800fc8a:	4b53      	ldr	r3, [pc, #332]	; (800fdd8 <udp_input+0x218>)
 800fc8c:	695b      	ldr	r3, [r3, #20]
 800fc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc92:	d10f      	bne.n	800fcb4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800fc94:	69fb      	ldr	r3, [r7, #28]
 800fc96:	681a      	ldr	r2, [r3, #0]
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	3304      	adds	r3, #4
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d008      	beq.n	800fcb4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800fca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	3304      	adds	r3, #4
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d101      	bne.n	800fcb4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800fcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800fcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb6:	8a9b      	ldrh	r3, [r3, #20]
 800fcb8:	8a3a      	ldrh	r2, [r7, #16]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d118      	bne.n	800fcf0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d005      	beq.n	800fcd2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800fcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc8:	685a      	ldr	r2, [r3, #4]
 800fcca:	4b43      	ldr	r3, [pc, #268]	; (800fdd8 <udp_input+0x218>)
 800fccc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d10e      	bne.n	800fcf0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800fcd2:	6a3b      	ldr	r3, [r7, #32]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d014      	beq.n	800fd02 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800fcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcda:	68da      	ldr	r2, [r3, #12]
 800fcdc:	6a3b      	ldr	r3, [r7, #32]
 800fcde:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800fce0:	4b3e      	ldr	r3, [pc, #248]	; (800fddc <udp_input+0x21c>)
 800fce2:	681a      	ldr	r2, [r3, #0]
 800fce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800fce8:	4a3c      	ldr	r2, [pc, #240]	; (800fddc <udp_input+0x21c>)
 800fcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcec:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800fcee:	e008      	b.n	800fd02 <udp_input+0x142>
      }
    }

    prev = pcb;
 800fcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf6:	68db      	ldr	r3, [r3, #12]
 800fcf8:	627b      	str	r3, [r7, #36]	; 0x24
 800fcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d1a7      	bne.n	800fc50 <udp_input+0x90>
 800fd00:	e000      	b.n	800fd04 <udp_input+0x144>
        break;
 800fd02:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800fd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d101      	bne.n	800fd0e <udp_input+0x14e>
    pcb = uncon_pcb;
 800fd0a:	69fb      	ldr	r3, [r7, #28]
 800fd0c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800fd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d002      	beq.n	800fd1a <udp_input+0x15a>
    for_us = 1;
 800fd14:	2301      	movs	r3, #1
 800fd16:	76fb      	strb	r3, [r7, #27]
 800fd18:	e00a      	b.n	800fd30 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	3304      	adds	r3, #4
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	4b2d      	ldr	r3, [pc, #180]	; (800fdd8 <udp_input+0x218>)
 800fd22:	695b      	ldr	r3, [r3, #20]
 800fd24:	429a      	cmp	r2, r3
 800fd26:	bf0c      	ite	eq
 800fd28:	2301      	moveq	r3, #1
 800fd2a:	2300      	movne	r3, #0
 800fd2c:	b2db      	uxtb	r3, r3
 800fd2e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800fd30:	7efb      	ldrb	r3, [r7, #27]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d041      	beq.n	800fdba <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800fd36:	2108      	movs	r1, #8
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f7f9 f9d3 	bl	80090e4 <pbuf_remove_header>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d00a      	beq.n	800fd5a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800fd44:	4b20      	ldr	r3, [pc, #128]	; (800fdc8 <udp_input+0x208>)
 800fd46:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800fd4a:	4925      	ldr	r1, [pc, #148]	; (800fde0 <udp_input+0x220>)
 800fd4c:	4820      	ldr	r0, [pc, #128]	; (800fdd0 <udp_input+0x210>)
 800fd4e:	f002 fefd 	bl	8012b4c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f7f9 fa4c 	bl	80091f0 <pbuf_free>
      goto end;
 800fd58:	e032      	b.n	800fdc0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800fd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d012      	beq.n	800fd86 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800fd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd62:	699b      	ldr	r3, [r3, #24]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d00a      	beq.n	800fd7e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800fd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6a:	699c      	ldr	r4, [r3, #24]
 800fd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6e:	69d8      	ldr	r0, [r3, #28]
 800fd70:	8a3b      	ldrh	r3, [r7, #16]
 800fd72:	9300      	str	r3, [sp, #0]
 800fd74:	4b1b      	ldr	r3, [pc, #108]	; (800fde4 <udp_input+0x224>)
 800fd76:	687a      	ldr	r2, [r7, #4]
 800fd78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd7a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800fd7c:	e021      	b.n	800fdc2 <udp_input+0x202>
        pbuf_free(p);
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f7f9 fa36 	bl	80091f0 <pbuf_free>
        goto end;
 800fd84:	e01c      	b.n	800fdc0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800fd86:	7cfb      	ldrb	r3, [r7, #19]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d112      	bne.n	800fdb2 <udp_input+0x1f2>
 800fd8c:	4b12      	ldr	r3, [pc, #72]	; (800fdd8 <udp_input+0x218>)
 800fd8e:	695b      	ldr	r3, [r3, #20]
 800fd90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fd94:	2be0      	cmp	r3, #224	; 0xe0
 800fd96:	d00c      	beq.n	800fdb2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fd98:	4b0f      	ldr	r3, [pc, #60]	; (800fdd8 <udp_input+0x218>)
 800fd9a:	899b      	ldrh	r3, [r3, #12]
 800fd9c:	3308      	adds	r3, #8
 800fd9e:	b29b      	uxth	r3, r3
 800fda0:	b21b      	sxth	r3, r3
 800fda2:	4619      	mov	r1, r3
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f7f9 fa10 	bl	80091ca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fdaa:	2103      	movs	r1, #3
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f001 fc1d 	bl	80115ec <icmp_dest_unreach>
      pbuf_free(p);
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f7f9 fa1c 	bl	80091f0 <pbuf_free>
  return;
 800fdb8:	e003      	b.n	800fdc2 <udp_input+0x202>
    pbuf_free(p);
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f7f9 fa18 	bl	80091f0 <pbuf_free>
  return;
 800fdc0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800fdc2:	372c      	adds	r7, #44	; 0x2c
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd90      	pop	{r4, r7, pc}
 800fdc8:	08015a9c 	.word	0x08015a9c
 800fdcc:	08015b40 	.word	0x08015b40
 800fdd0:	08015af0 	.word	0x08015af0
 800fdd4:	08015b58 	.word	0x08015b58
 800fdd8:	20008780 	.word	0x20008780
 800fddc:	2000bcdc 	.word	0x2000bcdc
 800fde0:	08015b74 	.word	0x08015b74
 800fde4:	20008790 	.word	0x20008790

0800fde8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b082      	sub	sp, #8
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d109      	bne.n	800fe0c <udp_send+0x24>
 800fdf8:	4b11      	ldr	r3, [pc, #68]	; (800fe40 <udp_send+0x58>)
 800fdfa:	f240 12d5 	movw	r2, #469	; 0x1d5
 800fdfe:	4911      	ldr	r1, [pc, #68]	; (800fe44 <udp_send+0x5c>)
 800fe00:	4811      	ldr	r0, [pc, #68]	; (800fe48 <udp_send+0x60>)
 800fe02:	f002 fea3 	bl	8012b4c <iprintf>
 800fe06:	f06f 030f 	mvn.w	r3, #15
 800fe0a:	e015      	b.n	800fe38 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d109      	bne.n	800fe26 <udp_send+0x3e>
 800fe12:	4b0b      	ldr	r3, [pc, #44]	; (800fe40 <udp_send+0x58>)
 800fe14:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800fe18:	490c      	ldr	r1, [pc, #48]	; (800fe4c <udp_send+0x64>)
 800fe1a:	480b      	ldr	r0, [pc, #44]	; (800fe48 <udp_send+0x60>)
 800fe1c:	f002 fe96 	bl	8012b4c <iprintf>
 800fe20:	f06f 030f 	mvn.w	r3, #15
 800fe24:	e008      	b.n	800fe38 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	1d1a      	adds	r2, r3, #4
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	8a9b      	ldrh	r3, [r3, #20]
 800fe2e:	6839      	ldr	r1, [r7, #0]
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f000 f80d 	bl	800fe50 <udp_sendto>
 800fe36:	4603      	mov	r3, r0
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3708      	adds	r7, #8
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	08015a9c 	.word	0x08015a9c
 800fe44:	08015b90 	.word	0x08015b90
 800fe48:	08015af0 	.word	0x08015af0
 800fe4c:	08015ba8 	.word	0x08015ba8

0800fe50 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b088      	sub	sp, #32
 800fe54:	af02      	add	r7, sp, #8
 800fe56:	60f8      	str	r0, [r7, #12]
 800fe58:	60b9      	str	r1, [r7, #8]
 800fe5a:	607a      	str	r2, [r7, #4]
 800fe5c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d109      	bne.n	800fe78 <udp_sendto+0x28>
 800fe64:	4b23      	ldr	r3, [pc, #140]	; (800fef4 <udp_sendto+0xa4>)
 800fe66:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fe6a:	4923      	ldr	r1, [pc, #140]	; (800fef8 <udp_sendto+0xa8>)
 800fe6c:	4823      	ldr	r0, [pc, #140]	; (800fefc <udp_sendto+0xac>)
 800fe6e:	f002 fe6d 	bl	8012b4c <iprintf>
 800fe72:	f06f 030f 	mvn.w	r3, #15
 800fe76:	e038      	b.n	800feea <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d109      	bne.n	800fe92 <udp_sendto+0x42>
 800fe7e:	4b1d      	ldr	r3, [pc, #116]	; (800fef4 <udp_sendto+0xa4>)
 800fe80:	f240 2219 	movw	r2, #537	; 0x219
 800fe84:	491e      	ldr	r1, [pc, #120]	; (800ff00 <udp_sendto+0xb0>)
 800fe86:	481d      	ldr	r0, [pc, #116]	; (800fefc <udp_sendto+0xac>)
 800fe88:	f002 fe60 	bl	8012b4c <iprintf>
 800fe8c:	f06f 030f 	mvn.w	r3, #15
 800fe90:	e02b      	b.n	800feea <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d109      	bne.n	800feac <udp_sendto+0x5c>
 800fe98:	4b16      	ldr	r3, [pc, #88]	; (800fef4 <udp_sendto+0xa4>)
 800fe9a:	f240 221a 	movw	r2, #538	; 0x21a
 800fe9e:	4919      	ldr	r1, [pc, #100]	; (800ff04 <udp_sendto+0xb4>)
 800fea0:	4816      	ldr	r0, [pc, #88]	; (800fefc <udp_sendto+0xac>)
 800fea2:	f002 fe53 	bl	8012b4c <iprintf>
 800fea6:	f06f 030f 	mvn.w	r3, #15
 800feaa:	e01e      	b.n	800feea <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	7a1b      	ldrb	r3, [r3, #8]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d006      	beq.n	800fec2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	7a1b      	ldrb	r3, [r3, #8]
 800feb8:	4618      	mov	r0, r3
 800feba:	f7f8 fe3d 	bl	8008b38 <netif_get_by_index>
 800febe:	6178      	str	r0, [r7, #20]
 800fec0:	e003      	b.n	800feca <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f001 fc1c 	bl	8011700 <ip4_route>
 800fec8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800feca:	697b      	ldr	r3, [r7, #20]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d102      	bne.n	800fed6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800fed0:	f06f 0303 	mvn.w	r3, #3
 800fed4:	e009      	b.n	800feea <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800fed6:	887a      	ldrh	r2, [r7, #2]
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	9300      	str	r3, [sp, #0]
 800fedc:	4613      	mov	r3, r2
 800fede:	687a      	ldr	r2, [r7, #4]
 800fee0:	68b9      	ldr	r1, [r7, #8]
 800fee2:	68f8      	ldr	r0, [r7, #12]
 800fee4:	f000 f810 	bl	800ff08 <udp_sendto_if>
 800fee8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800feea:	4618      	mov	r0, r3
 800feec:	3718      	adds	r7, #24
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}
 800fef2:	bf00      	nop
 800fef4:	08015a9c 	.word	0x08015a9c
 800fef8:	08015bc0 	.word	0x08015bc0
 800fefc:	08015af0 	.word	0x08015af0
 800ff00:	08015bd8 	.word	0x08015bd8
 800ff04:	08015bf4 	.word	0x08015bf4

0800ff08 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b088      	sub	sp, #32
 800ff0c:	af02      	add	r7, sp, #8
 800ff0e:	60f8      	str	r0, [r7, #12]
 800ff10:	60b9      	str	r1, [r7, #8]
 800ff12:	607a      	str	r2, [r7, #4]
 800ff14:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d109      	bne.n	800ff30 <udp_sendto_if+0x28>
 800ff1c:	4b2e      	ldr	r3, [pc, #184]	; (800ffd8 <udp_sendto_if+0xd0>)
 800ff1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ff22:	492e      	ldr	r1, [pc, #184]	; (800ffdc <udp_sendto_if+0xd4>)
 800ff24:	482e      	ldr	r0, [pc, #184]	; (800ffe0 <udp_sendto_if+0xd8>)
 800ff26:	f002 fe11 	bl	8012b4c <iprintf>
 800ff2a:	f06f 030f 	mvn.w	r3, #15
 800ff2e:	e04f      	b.n	800ffd0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d109      	bne.n	800ff4a <udp_sendto_if+0x42>
 800ff36:	4b28      	ldr	r3, [pc, #160]	; (800ffd8 <udp_sendto_if+0xd0>)
 800ff38:	f240 2281 	movw	r2, #641	; 0x281
 800ff3c:	4929      	ldr	r1, [pc, #164]	; (800ffe4 <udp_sendto_if+0xdc>)
 800ff3e:	4828      	ldr	r0, [pc, #160]	; (800ffe0 <udp_sendto_if+0xd8>)
 800ff40:	f002 fe04 	bl	8012b4c <iprintf>
 800ff44:	f06f 030f 	mvn.w	r3, #15
 800ff48:	e042      	b.n	800ffd0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d109      	bne.n	800ff64 <udp_sendto_if+0x5c>
 800ff50:	4b21      	ldr	r3, [pc, #132]	; (800ffd8 <udp_sendto_if+0xd0>)
 800ff52:	f240 2282 	movw	r2, #642	; 0x282
 800ff56:	4924      	ldr	r1, [pc, #144]	; (800ffe8 <udp_sendto_if+0xe0>)
 800ff58:	4821      	ldr	r0, [pc, #132]	; (800ffe0 <udp_sendto_if+0xd8>)
 800ff5a:	f002 fdf7 	bl	8012b4c <iprintf>
 800ff5e:	f06f 030f 	mvn.w	r3, #15
 800ff62:	e035      	b.n	800ffd0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800ff64:	6a3b      	ldr	r3, [r7, #32]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d109      	bne.n	800ff7e <udp_sendto_if+0x76>
 800ff6a:	4b1b      	ldr	r3, [pc, #108]	; (800ffd8 <udp_sendto_if+0xd0>)
 800ff6c:	f240 2283 	movw	r2, #643	; 0x283
 800ff70:	491e      	ldr	r1, [pc, #120]	; (800ffec <udp_sendto_if+0xe4>)
 800ff72:	481b      	ldr	r0, [pc, #108]	; (800ffe0 <udp_sendto_if+0xd8>)
 800ff74:	f002 fdea 	bl	8012b4c <iprintf>
 800ff78:	f06f 030f 	mvn.w	r3, #15
 800ff7c:	e028      	b.n	800ffd0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d009      	beq.n	800ff98 <udp_sendto_if+0x90>
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d005      	beq.n	800ff98 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ff94:	2be0      	cmp	r3, #224	; 0xe0
 800ff96:	d103      	bne.n	800ffa0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800ff98:	6a3b      	ldr	r3, [r7, #32]
 800ff9a:	3304      	adds	r3, #4
 800ff9c:	617b      	str	r3, [r7, #20]
 800ff9e:	e00b      	b.n	800ffb8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	681a      	ldr	r2, [r3, #0]
 800ffa4:	6a3b      	ldr	r3, [r7, #32]
 800ffa6:	3304      	adds	r3, #4
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d002      	beq.n	800ffb4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800ffae:	f06f 0303 	mvn.w	r3, #3
 800ffb2:	e00d      	b.n	800ffd0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800ffb8:	887a      	ldrh	r2, [r7, #2]
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	9301      	str	r3, [sp, #4]
 800ffbe:	6a3b      	ldr	r3, [r7, #32]
 800ffc0:	9300      	str	r3, [sp, #0]
 800ffc2:	4613      	mov	r3, r2
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	68b9      	ldr	r1, [r7, #8]
 800ffc8:	68f8      	ldr	r0, [r7, #12]
 800ffca:	f000 f811 	bl	800fff0 <udp_sendto_if_src>
 800ffce:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3718      	adds	r7, #24
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}
 800ffd8:	08015a9c 	.word	0x08015a9c
 800ffdc:	08015c10 	.word	0x08015c10
 800ffe0:	08015af0 	.word	0x08015af0
 800ffe4:	08015c2c 	.word	0x08015c2c
 800ffe8:	08015c48 	.word	0x08015c48
 800ffec:	08015c68 	.word	0x08015c68

0800fff0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b08c      	sub	sp, #48	; 0x30
 800fff4:	af04      	add	r7, sp, #16
 800fff6:	60f8      	str	r0, [r7, #12]
 800fff8:	60b9      	str	r1, [r7, #8]
 800fffa:	607a      	str	r2, [r7, #4]
 800fffc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d109      	bne.n	8010018 <udp_sendto_if_src+0x28>
 8010004:	4b65      	ldr	r3, [pc, #404]	; (801019c <udp_sendto_if_src+0x1ac>)
 8010006:	f240 22d1 	movw	r2, #721	; 0x2d1
 801000a:	4965      	ldr	r1, [pc, #404]	; (80101a0 <udp_sendto_if_src+0x1b0>)
 801000c:	4865      	ldr	r0, [pc, #404]	; (80101a4 <udp_sendto_if_src+0x1b4>)
 801000e:	f002 fd9d 	bl	8012b4c <iprintf>
 8010012:	f06f 030f 	mvn.w	r3, #15
 8010016:	e0bc      	b.n	8010192 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d109      	bne.n	8010032 <udp_sendto_if_src+0x42>
 801001e:	4b5f      	ldr	r3, [pc, #380]	; (801019c <udp_sendto_if_src+0x1ac>)
 8010020:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010024:	4960      	ldr	r1, [pc, #384]	; (80101a8 <udp_sendto_if_src+0x1b8>)
 8010026:	485f      	ldr	r0, [pc, #380]	; (80101a4 <udp_sendto_if_src+0x1b4>)
 8010028:	f002 fd90 	bl	8012b4c <iprintf>
 801002c:	f06f 030f 	mvn.w	r3, #15
 8010030:	e0af      	b.n	8010192 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d109      	bne.n	801004c <udp_sendto_if_src+0x5c>
 8010038:	4b58      	ldr	r3, [pc, #352]	; (801019c <udp_sendto_if_src+0x1ac>)
 801003a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801003e:	495b      	ldr	r1, [pc, #364]	; (80101ac <udp_sendto_if_src+0x1bc>)
 8010040:	4858      	ldr	r0, [pc, #352]	; (80101a4 <udp_sendto_if_src+0x1b4>)
 8010042:	f002 fd83 	bl	8012b4c <iprintf>
 8010046:	f06f 030f 	mvn.w	r3, #15
 801004a:	e0a2      	b.n	8010192 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801004c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801004e:	2b00      	cmp	r3, #0
 8010050:	d109      	bne.n	8010066 <udp_sendto_if_src+0x76>
 8010052:	4b52      	ldr	r3, [pc, #328]	; (801019c <udp_sendto_if_src+0x1ac>)
 8010054:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010058:	4955      	ldr	r1, [pc, #340]	; (80101b0 <udp_sendto_if_src+0x1c0>)
 801005a:	4852      	ldr	r0, [pc, #328]	; (80101a4 <udp_sendto_if_src+0x1b4>)
 801005c:	f002 fd76 	bl	8012b4c <iprintf>
 8010060:	f06f 030f 	mvn.w	r3, #15
 8010064:	e095      	b.n	8010192 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010068:	2b00      	cmp	r3, #0
 801006a:	d109      	bne.n	8010080 <udp_sendto_if_src+0x90>
 801006c:	4b4b      	ldr	r3, [pc, #300]	; (801019c <udp_sendto_if_src+0x1ac>)
 801006e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8010072:	4950      	ldr	r1, [pc, #320]	; (80101b4 <udp_sendto_if_src+0x1c4>)
 8010074:	484b      	ldr	r0, [pc, #300]	; (80101a4 <udp_sendto_if_src+0x1b4>)
 8010076:	f002 fd69 	bl	8012b4c <iprintf>
 801007a:	f06f 030f 	mvn.w	r3, #15
 801007e:	e088      	b.n	8010192 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	8a5b      	ldrh	r3, [r3, #18]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d10f      	bne.n	80100a8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010088:	68f9      	ldr	r1, [r7, #12]
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	8a5b      	ldrh	r3, [r3, #18]
 801008e:	461a      	mov	r2, r3
 8010090:	68f8      	ldr	r0, [r7, #12]
 8010092:	f000 f893 	bl	80101bc <udp_bind>
 8010096:	4603      	mov	r3, r0
 8010098:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801009a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d002      	beq.n	80100a8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80100a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80100a6:	e074      	b.n	8010192 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	891b      	ldrh	r3, [r3, #8]
 80100ac:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80100b0:	4293      	cmp	r3, r2
 80100b2:	d902      	bls.n	80100ba <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80100b4:	f04f 33ff 	mov.w	r3, #4294967295
 80100b8:	e06b      	b.n	8010192 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80100ba:	2108      	movs	r1, #8
 80100bc:	68b8      	ldr	r0, [r7, #8]
 80100be:	f7f9 f801 	bl	80090c4 <pbuf_add_header>
 80100c2:	4603      	mov	r3, r0
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d015      	beq.n	80100f4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80100c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80100cc:	2108      	movs	r1, #8
 80100ce:	2022      	movs	r0, #34	; 0x22
 80100d0:	f7f8 fdae 	bl	8008c30 <pbuf_alloc>
 80100d4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80100d6:	69fb      	ldr	r3, [r7, #28]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d102      	bne.n	80100e2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80100dc:	f04f 33ff 	mov.w	r3, #4294967295
 80100e0:	e057      	b.n	8010192 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	891b      	ldrh	r3, [r3, #8]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d006      	beq.n	80100f8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80100ea:	68b9      	ldr	r1, [r7, #8]
 80100ec:	69f8      	ldr	r0, [r7, #28]
 80100ee:	f7f9 f997 	bl	8009420 <pbuf_chain>
 80100f2:	e001      	b.n	80100f8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	895b      	ldrh	r3, [r3, #10]
 80100fc:	2b07      	cmp	r3, #7
 80100fe:	d806      	bhi.n	801010e <udp_sendto_if_src+0x11e>
 8010100:	4b26      	ldr	r3, [pc, #152]	; (801019c <udp_sendto_if_src+0x1ac>)
 8010102:	f240 320e 	movw	r2, #782	; 0x30e
 8010106:	492c      	ldr	r1, [pc, #176]	; (80101b8 <udp_sendto_if_src+0x1c8>)
 8010108:	4826      	ldr	r0, [pc, #152]	; (80101a4 <udp_sendto_if_src+0x1b4>)
 801010a:	f002 fd1f 	bl	8012b4c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801010e:	69fb      	ldr	r3, [r7, #28]
 8010110:	685b      	ldr	r3, [r3, #4]
 8010112:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	8a5b      	ldrh	r3, [r3, #18]
 8010118:	4618      	mov	r0, r3
 801011a:	f7f7 fdba 	bl	8007c92 <lwip_htons>
 801011e:	4603      	mov	r3, r0
 8010120:	461a      	mov	r2, r3
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010126:	887b      	ldrh	r3, [r7, #2]
 8010128:	4618      	mov	r0, r3
 801012a:	f7f7 fdb2 	bl	8007c92 <lwip_htons>
 801012e:	4603      	mov	r3, r0
 8010130:	461a      	mov	r2, r3
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	2200      	movs	r2, #0
 801013a:	719a      	strb	r2, [r3, #6]
 801013c:	2200      	movs	r2, #0
 801013e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010140:	69fb      	ldr	r3, [r7, #28]
 8010142:	891b      	ldrh	r3, [r3, #8]
 8010144:	4618      	mov	r0, r3
 8010146:	f7f7 fda4 	bl	8007c92 <lwip_htons>
 801014a:	4603      	mov	r3, r0
 801014c:	461a      	mov	r2, r3
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010152:	2311      	movs	r3, #17
 8010154:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	7adb      	ldrb	r3, [r3, #11]
 801015a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	7a9b      	ldrb	r3, [r3, #10]
 8010160:	7cb9      	ldrb	r1, [r7, #18]
 8010162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010164:	9202      	str	r2, [sp, #8]
 8010166:	7cfa      	ldrb	r2, [r7, #19]
 8010168:	9201      	str	r2, [sp, #4]
 801016a:	9300      	str	r3, [sp, #0]
 801016c:	460b      	mov	r3, r1
 801016e:	687a      	ldr	r2, [r7, #4]
 8010170:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010172:	69f8      	ldr	r0, [r7, #28]
 8010174:	f001 fcaa 	bl	8011acc <ip4_output_if_src>
 8010178:	4603      	mov	r3, r0
 801017a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801017c:	69fa      	ldr	r2, [r7, #28]
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	429a      	cmp	r2, r3
 8010182:	d004      	beq.n	801018e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010184:	69f8      	ldr	r0, [r7, #28]
 8010186:	f7f9 f833 	bl	80091f0 <pbuf_free>
    q = NULL;
 801018a:	2300      	movs	r3, #0
 801018c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801018e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010192:	4618      	mov	r0, r3
 8010194:	3720      	adds	r7, #32
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}
 801019a:	bf00      	nop
 801019c:	08015a9c 	.word	0x08015a9c
 80101a0:	08015c88 	.word	0x08015c88
 80101a4:	08015af0 	.word	0x08015af0
 80101a8:	08015ca8 	.word	0x08015ca8
 80101ac:	08015cc8 	.word	0x08015cc8
 80101b0:	08015cec 	.word	0x08015cec
 80101b4:	08015d10 	.word	0x08015d10
 80101b8:	08015d34 	.word	0x08015d34

080101bc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b086      	sub	sp, #24
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	60f8      	str	r0, [r7, #12]
 80101c4:	60b9      	str	r1, [r7, #8]
 80101c6:	4613      	mov	r3, r2
 80101c8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d101      	bne.n	80101d4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80101d0:	4b39      	ldr	r3, [pc, #228]	; (80102b8 <udp_bind+0xfc>)
 80101d2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d109      	bne.n	80101ee <udp_bind+0x32>
 80101da:	4b38      	ldr	r3, [pc, #224]	; (80102bc <udp_bind+0x100>)
 80101dc:	f240 32b7 	movw	r2, #951	; 0x3b7
 80101e0:	4937      	ldr	r1, [pc, #220]	; (80102c0 <udp_bind+0x104>)
 80101e2:	4838      	ldr	r0, [pc, #224]	; (80102c4 <udp_bind+0x108>)
 80101e4:	f002 fcb2 	bl	8012b4c <iprintf>
 80101e8:	f06f 030f 	mvn.w	r3, #15
 80101ec:	e060      	b.n	80102b0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80101ee:	2300      	movs	r3, #0
 80101f0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80101f2:	4b35      	ldr	r3, [pc, #212]	; (80102c8 <udp_bind+0x10c>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	617b      	str	r3, [r7, #20]
 80101f8:	e009      	b.n	801020e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80101fa:	68fa      	ldr	r2, [r7, #12]
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	429a      	cmp	r2, r3
 8010200:	d102      	bne.n	8010208 <udp_bind+0x4c>
      rebind = 1;
 8010202:	2301      	movs	r3, #1
 8010204:	74fb      	strb	r3, [r7, #19]
      break;
 8010206:	e005      	b.n	8010214 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	68db      	ldr	r3, [r3, #12]
 801020c:	617b      	str	r3, [r7, #20]
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d1f2      	bne.n	80101fa <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010214:	88fb      	ldrh	r3, [r7, #6]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d109      	bne.n	801022e <udp_bind+0x72>
    port = udp_new_port();
 801021a:	f7ff fc35 	bl	800fa88 <udp_new_port>
 801021e:	4603      	mov	r3, r0
 8010220:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010222:	88fb      	ldrh	r3, [r7, #6]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d12c      	bne.n	8010282 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010228:	f06f 0307 	mvn.w	r3, #7
 801022c:	e040      	b.n	80102b0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801022e:	4b26      	ldr	r3, [pc, #152]	; (80102c8 <udp_bind+0x10c>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	617b      	str	r3, [r7, #20]
 8010234:	e022      	b.n	801027c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010236:	68fa      	ldr	r2, [r7, #12]
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	429a      	cmp	r2, r3
 801023c:	d01b      	beq.n	8010276 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	8a5b      	ldrh	r3, [r3, #18]
 8010242:	88fa      	ldrh	r2, [r7, #6]
 8010244:	429a      	cmp	r2, r3
 8010246:	d116      	bne.n	8010276 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	681a      	ldr	r2, [r3, #0]
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010250:	429a      	cmp	r2, r3
 8010252:	d00d      	beq.n	8010270 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d00a      	beq.n	8010270 <udp_bind+0xb4>
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d006      	beq.n	8010270 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010262:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010264:	2b00      	cmp	r3, #0
 8010266:	d003      	beq.n	8010270 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d102      	bne.n	8010276 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010270:	f06f 0307 	mvn.w	r3, #7
 8010274:	e01c      	b.n	80102b0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	68db      	ldr	r3, [r3, #12]
 801027a:	617b      	str	r3, [r7, #20]
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d1d9      	bne.n	8010236 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d002      	beq.n	801028e <udp_bind+0xd2>
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	e000      	b.n	8010290 <udp_bind+0xd4>
 801028e:	2300      	movs	r3, #0
 8010290:	68fa      	ldr	r2, [r7, #12]
 8010292:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	88fa      	ldrh	r2, [r7, #6]
 8010298:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801029a:	7cfb      	ldrb	r3, [r7, #19]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d106      	bne.n	80102ae <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80102a0:	4b09      	ldr	r3, [pc, #36]	; (80102c8 <udp_bind+0x10c>)
 80102a2:	681a      	ldr	r2, [r3, #0]
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80102a8:	4a07      	ldr	r2, [pc, #28]	; (80102c8 <udp_bind+0x10c>)
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80102ae:	2300      	movs	r3, #0
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3718      	adds	r7, #24
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}
 80102b8:	08016624 	.word	0x08016624
 80102bc:	08015a9c 	.word	0x08015a9c
 80102c0:	08015d64 	.word	0x08015d64
 80102c4:	08015af0 	.word	0x08015af0
 80102c8:	2000bcdc 	.word	0x2000bcdc

080102cc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b086      	sub	sp, #24
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	60f8      	str	r0, [r7, #12]
 80102d4:	60b9      	str	r1, [r7, #8]
 80102d6:	4613      	mov	r3, r2
 80102d8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d109      	bne.n	80102f4 <udp_connect+0x28>
 80102e0:	4b2c      	ldr	r3, [pc, #176]	; (8010394 <udp_connect+0xc8>)
 80102e2:	f240 4235 	movw	r2, #1077	; 0x435
 80102e6:	492c      	ldr	r1, [pc, #176]	; (8010398 <udp_connect+0xcc>)
 80102e8:	482c      	ldr	r0, [pc, #176]	; (801039c <udp_connect+0xd0>)
 80102ea:	f002 fc2f 	bl	8012b4c <iprintf>
 80102ee:	f06f 030f 	mvn.w	r3, #15
 80102f2:	e04b      	b.n	801038c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d109      	bne.n	801030e <udp_connect+0x42>
 80102fa:	4b26      	ldr	r3, [pc, #152]	; (8010394 <udp_connect+0xc8>)
 80102fc:	f240 4236 	movw	r2, #1078	; 0x436
 8010300:	4927      	ldr	r1, [pc, #156]	; (80103a0 <udp_connect+0xd4>)
 8010302:	4826      	ldr	r0, [pc, #152]	; (801039c <udp_connect+0xd0>)
 8010304:	f002 fc22 	bl	8012b4c <iprintf>
 8010308:	f06f 030f 	mvn.w	r3, #15
 801030c:	e03e      	b.n	801038c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	8a5b      	ldrh	r3, [r3, #18]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d10f      	bne.n	8010336 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010316:	68f9      	ldr	r1, [r7, #12]
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	8a5b      	ldrh	r3, [r3, #18]
 801031c:	461a      	mov	r2, r3
 801031e:	68f8      	ldr	r0, [r7, #12]
 8010320:	f7ff ff4c 	bl	80101bc <udp_bind>
 8010324:	4603      	mov	r3, r0
 8010326:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010328:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d002      	beq.n	8010336 <udp_connect+0x6a>
      return err;
 8010330:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010334:	e02a      	b.n	801038c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d002      	beq.n	8010342 <udp_connect+0x76>
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	e000      	b.n	8010344 <udp_connect+0x78>
 8010342:	2300      	movs	r3, #0
 8010344:	68fa      	ldr	r2, [r7, #12]
 8010346:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	88fa      	ldrh	r2, [r7, #6]
 801034c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	7c1b      	ldrb	r3, [r3, #16]
 8010352:	f043 0304 	orr.w	r3, r3, #4
 8010356:	b2da      	uxtb	r2, r3
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801035c:	4b11      	ldr	r3, [pc, #68]	; (80103a4 <udp_connect+0xd8>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	617b      	str	r3, [r7, #20]
 8010362:	e008      	b.n	8010376 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010364:	68fa      	ldr	r2, [r7, #12]
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	429a      	cmp	r2, r3
 801036a:	d101      	bne.n	8010370 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801036c:	2300      	movs	r3, #0
 801036e:	e00d      	b.n	801038c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	617b      	str	r3, [r7, #20]
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d1f3      	bne.n	8010364 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801037c:	4b09      	ldr	r3, [pc, #36]	; (80103a4 <udp_connect+0xd8>)
 801037e:	681a      	ldr	r2, [r3, #0]
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010384:	4a07      	ldr	r2, [pc, #28]	; (80103a4 <udp_connect+0xd8>)
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801038a:	2300      	movs	r3, #0
}
 801038c:	4618      	mov	r0, r3
 801038e:	3718      	adds	r7, #24
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}
 8010394:	08015a9c 	.word	0x08015a9c
 8010398:	08015d7c 	.word	0x08015d7c
 801039c:	08015af0 	.word	0x08015af0
 80103a0:	08015d98 	.word	0x08015d98
 80103a4:	2000bcdc 	.word	0x2000bcdc

080103a8 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d107      	bne.n	80103c6 <udp_disconnect+0x1e>
 80103b6:	4b0d      	ldr	r3, [pc, #52]	; (80103ec <udp_disconnect+0x44>)
 80103b8:	f240 426a 	movw	r2, #1130	; 0x46a
 80103bc:	490c      	ldr	r1, [pc, #48]	; (80103f0 <udp_disconnect+0x48>)
 80103be:	480d      	ldr	r0, [pc, #52]	; (80103f4 <udp_disconnect+0x4c>)
 80103c0:	f002 fbc4 	bl	8012b4c <iprintf>
 80103c4:	e00f      	b.n	80103e6 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2200      	movs	r2, #0
 80103ca:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2200      	movs	r2, #0
 80103d0:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2200      	movs	r2, #0
 80103d6:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	7c1b      	ldrb	r3, [r3, #16]
 80103dc:	f023 0304 	bic.w	r3, r3, #4
 80103e0:	b2da      	uxtb	r2, r3
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	741a      	strb	r2, [r3, #16]
}
 80103e6:	3708      	adds	r7, #8
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	08015a9c 	.word	0x08015a9c
 80103f0:	08015db4 	.word	0x08015db4
 80103f4:	08015af0 	.word	0x08015af0

080103f8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b084      	sub	sp, #16
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	60f8      	str	r0, [r7, #12]
 8010400:	60b9      	str	r1, [r7, #8]
 8010402:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d107      	bne.n	801041a <udp_recv+0x22>
 801040a:	4b08      	ldr	r3, [pc, #32]	; (801042c <udp_recv+0x34>)
 801040c:	f240 428a 	movw	r2, #1162	; 0x48a
 8010410:	4907      	ldr	r1, [pc, #28]	; (8010430 <udp_recv+0x38>)
 8010412:	4808      	ldr	r0, [pc, #32]	; (8010434 <udp_recv+0x3c>)
 8010414:	f002 fb9a 	bl	8012b4c <iprintf>
 8010418:	e005      	b.n	8010426 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	68ba      	ldr	r2, [r7, #8]
 801041e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	687a      	ldr	r2, [r7, #4]
 8010424:	61da      	str	r2, [r3, #28]
}
 8010426:	3710      	adds	r7, #16
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	08015a9c 	.word	0x08015a9c
 8010430:	08015dd0 	.word	0x08015dd0
 8010434:	08015af0 	.word	0x08015af0

08010438 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d107      	bne.n	8010456 <udp_remove+0x1e>
 8010446:	4b19      	ldr	r3, [pc, #100]	; (80104ac <udp_remove+0x74>)
 8010448:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801044c:	4918      	ldr	r1, [pc, #96]	; (80104b0 <udp_remove+0x78>)
 801044e:	4819      	ldr	r0, [pc, #100]	; (80104b4 <udp_remove+0x7c>)
 8010450:	f002 fb7c 	bl	8012b4c <iprintf>
 8010454:	e026      	b.n	80104a4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010456:	4b18      	ldr	r3, [pc, #96]	; (80104b8 <udp_remove+0x80>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	687a      	ldr	r2, [r7, #4]
 801045c:	429a      	cmp	r2, r3
 801045e:	d105      	bne.n	801046c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010460:	4b15      	ldr	r3, [pc, #84]	; (80104b8 <udp_remove+0x80>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	68db      	ldr	r3, [r3, #12]
 8010466:	4a14      	ldr	r2, [pc, #80]	; (80104b8 <udp_remove+0x80>)
 8010468:	6013      	str	r3, [r2, #0]
 801046a:	e017      	b.n	801049c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801046c:	4b12      	ldr	r3, [pc, #72]	; (80104b8 <udp_remove+0x80>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	60fb      	str	r3, [r7, #12]
 8010472:	e010      	b.n	8010496 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	68db      	ldr	r3, [r3, #12]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d009      	beq.n	8010490 <udp_remove+0x58>
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	68db      	ldr	r3, [r3, #12]
 8010480:	687a      	ldr	r2, [r7, #4]
 8010482:	429a      	cmp	r2, r3
 8010484:	d104      	bne.n	8010490 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	68da      	ldr	r2, [r3, #12]
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	60da      	str	r2, [r3, #12]
        break;
 801048e:	e005      	b.n	801049c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	68db      	ldr	r3, [r3, #12]
 8010494:	60fb      	str	r3, [r7, #12]
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d1eb      	bne.n	8010474 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801049c:	6879      	ldr	r1, [r7, #4]
 801049e:	2000      	movs	r0, #0
 80104a0:	f7f8 f898 	bl	80085d4 <memp_free>
}
 80104a4:	3710      	adds	r7, #16
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
 80104aa:	bf00      	nop
 80104ac:	08015a9c 	.word	0x08015a9c
 80104b0:	08015de8 	.word	0x08015de8
 80104b4:	08015af0 	.word	0x08015af0
 80104b8:	2000bcdc 	.word	0x2000bcdc

080104bc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80104c2:	2000      	movs	r0, #0
 80104c4:	f7f8 f83a 	bl	800853c <memp_malloc>
 80104c8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d007      	beq.n	80104e0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80104d0:	2220      	movs	r2, #32
 80104d2:	2100      	movs	r1, #0
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f002 fb31 	bl	8012b3c <memset>
    pcb->ttl = UDP_TTL;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	22ff      	movs	r2, #255	; 0xff
 80104de:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80104e0:	687b      	ldr	r3, [r7, #4]
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3708      	adds	r7, #8
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}
	...

080104ec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80104ec:	b480      	push	{r7}
 80104ee:	b085      	sub	sp, #20
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d01e      	beq.n	801053a <udp_netif_ip_addr_changed+0x4e>
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d01a      	beq.n	801053a <udp_netif_ip_addr_changed+0x4e>
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d017      	beq.n	801053a <udp_netif_ip_addr_changed+0x4e>
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d013      	beq.n	801053a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010512:	4b0d      	ldr	r3, [pc, #52]	; (8010548 <udp_netif_ip_addr_changed+0x5c>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	60fb      	str	r3, [r7, #12]
 8010518:	e00c      	b.n	8010534 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	681a      	ldr	r2, [r3, #0]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	429a      	cmp	r2, r3
 8010524:	d103      	bne.n	801052e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	68db      	ldr	r3, [r3, #12]
 8010532:	60fb      	str	r3, [r7, #12]
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d1ef      	bne.n	801051a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801053a:	bf00      	nop
 801053c:	3714      	adds	r7, #20
 801053e:	46bd      	mov	sp, r7
 8010540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop
 8010548:	2000bcdc 	.word	0x2000bcdc

0801054c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010554:	4915      	ldr	r1, [pc, #84]	; (80105ac <etharp_free_entry+0x60>)
 8010556:	687a      	ldr	r2, [r7, #4]
 8010558:	4613      	mov	r3, r2
 801055a:	005b      	lsls	r3, r3, #1
 801055c:	4413      	add	r3, r2
 801055e:	00db      	lsls	r3, r3, #3
 8010560:	440b      	add	r3, r1
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d013      	beq.n	8010590 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010568:	4910      	ldr	r1, [pc, #64]	; (80105ac <etharp_free_entry+0x60>)
 801056a:	687a      	ldr	r2, [r7, #4]
 801056c:	4613      	mov	r3, r2
 801056e:	005b      	lsls	r3, r3, #1
 8010570:	4413      	add	r3, r2
 8010572:	00db      	lsls	r3, r3, #3
 8010574:	440b      	add	r3, r1
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	4618      	mov	r0, r3
 801057a:	f7f8 fe39 	bl	80091f0 <pbuf_free>
    arp_table[i].q = NULL;
 801057e:	490b      	ldr	r1, [pc, #44]	; (80105ac <etharp_free_entry+0x60>)
 8010580:	687a      	ldr	r2, [r7, #4]
 8010582:	4613      	mov	r3, r2
 8010584:	005b      	lsls	r3, r3, #1
 8010586:	4413      	add	r3, r2
 8010588:	00db      	lsls	r3, r3, #3
 801058a:	440b      	add	r3, r1
 801058c:	2200      	movs	r2, #0
 801058e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010590:	4906      	ldr	r1, [pc, #24]	; (80105ac <etharp_free_entry+0x60>)
 8010592:	687a      	ldr	r2, [r7, #4]
 8010594:	4613      	mov	r3, r2
 8010596:	005b      	lsls	r3, r3, #1
 8010598:	4413      	add	r3, r2
 801059a:	00db      	lsls	r3, r3, #3
 801059c:	440b      	add	r3, r1
 801059e:	3314      	adds	r3, #20
 80105a0:	2200      	movs	r2, #0
 80105a2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80105a4:	bf00      	nop
 80105a6:	3708      	adds	r7, #8
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}
 80105ac:	20000184 	.word	0x20000184

080105b0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80105b6:	2300      	movs	r3, #0
 80105b8:	607b      	str	r3, [r7, #4]
 80105ba:	e096      	b.n	80106ea <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80105bc:	494f      	ldr	r1, [pc, #316]	; (80106fc <etharp_tmr+0x14c>)
 80105be:	687a      	ldr	r2, [r7, #4]
 80105c0:	4613      	mov	r3, r2
 80105c2:	005b      	lsls	r3, r3, #1
 80105c4:	4413      	add	r3, r2
 80105c6:	00db      	lsls	r3, r3, #3
 80105c8:	440b      	add	r3, r1
 80105ca:	3314      	adds	r3, #20
 80105cc:	781b      	ldrb	r3, [r3, #0]
 80105ce:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80105d0:	78fb      	ldrb	r3, [r7, #3]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	f000 8086 	beq.w	80106e4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80105d8:	4948      	ldr	r1, [pc, #288]	; (80106fc <etharp_tmr+0x14c>)
 80105da:	687a      	ldr	r2, [r7, #4]
 80105dc:	4613      	mov	r3, r2
 80105de:	005b      	lsls	r3, r3, #1
 80105e0:	4413      	add	r3, r2
 80105e2:	00db      	lsls	r3, r3, #3
 80105e4:	440b      	add	r3, r1
 80105e6:	3312      	adds	r3, #18
 80105e8:	881b      	ldrh	r3, [r3, #0]
 80105ea:	3301      	adds	r3, #1
 80105ec:	b298      	uxth	r0, r3
 80105ee:	4943      	ldr	r1, [pc, #268]	; (80106fc <etharp_tmr+0x14c>)
 80105f0:	687a      	ldr	r2, [r7, #4]
 80105f2:	4613      	mov	r3, r2
 80105f4:	005b      	lsls	r3, r3, #1
 80105f6:	4413      	add	r3, r2
 80105f8:	00db      	lsls	r3, r3, #3
 80105fa:	440b      	add	r3, r1
 80105fc:	3312      	adds	r3, #18
 80105fe:	4602      	mov	r2, r0
 8010600:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010602:	493e      	ldr	r1, [pc, #248]	; (80106fc <etharp_tmr+0x14c>)
 8010604:	687a      	ldr	r2, [r7, #4]
 8010606:	4613      	mov	r3, r2
 8010608:	005b      	lsls	r3, r3, #1
 801060a:	4413      	add	r3, r2
 801060c:	00db      	lsls	r3, r3, #3
 801060e:	440b      	add	r3, r1
 8010610:	3312      	adds	r3, #18
 8010612:	881b      	ldrh	r3, [r3, #0]
 8010614:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010618:	d215      	bcs.n	8010646 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801061a:	4938      	ldr	r1, [pc, #224]	; (80106fc <etharp_tmr+0x14c>)
 801061c:	687a      	ldr	r2, [r7, #4]
 801061e:	4613      	mov	r3, r2
 8010620:	005b      	lsls	r3, r3, #1
 8010622:	4413      	add	r3, r2
 8010624:	00db      	lsls	r3, r3, #3
 8010626:	440b      	add	r3, r1
 8010628:	3314      	adds	r3, #20
 801062a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801062c:	2b01      	cmp	r3, #1
 801062e:	d10e      	bne.n	801064e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010630:	4932      	ldr	r1, [pc, #200]	; (80106fc <etharp_tmr+0x14c>)
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	4613      	mov	r3, r2
 8010636:	005b      	lsls	r3, r3, #1
 8010638:	4413      	add	r3, r2
 801063a:	00db      	lsls	r3, r3, #3
 801063c:	440b      	add	r3, r1
 801063e:	3312      	adds	r3, #18
 8010640:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010642:	2b04      	cmp	r3, #4
 8010644:	d903      	bls.n	801064e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f7ff ff80 	bl	801054c <etharp_free_entry>
 801064c:	e04a      	b.n	80106e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801064e:	492b      	ldr	r1, [pc, #172]	; (80106fc <etharp_tmr+0x14c>)
 8010650:	687a      	ldr	r2, [r7, #4]
 8010652:	4613      	mov	r3, r2
 8010654:	005b      	lsls	r3, r3, #1
 8010656:	4413      	add	r3, r2
 8010658:	00db      	lsls	r3, r3, #3
 801065a:	440b      	add	r3, r1
 801065c:	3314      	adds	r3, #20
 801065e:	781b      	ldrb	r3, [r3, #0]
 8010660:	2b03      	cmp	r3, #3
 8010662:	d10a      	bne.n	801067a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010664:	4925      	ldr	r1, [pc, #148]	; (80106fc <etharp_tmr+0x14c>)
 8010666:	687a      	ldr	r2, [r7, #4]
 8010668:	4613      	mov	r3, r2
 801066a:	005b      	lsls	r3, r3, #1
 801066c:	4413      	add	r3, r2
 801066e:	00db      	lsls	r3, r3, #3
 8010670:	440b      	add	r3, r1
 8010672:	3314      	adds	r3, #20
 8010674:	2204      	movs	r2, #4
 8010676:	701a      	strb	r2, [r3, #0]
 8010678:	e034      	b.n	80106e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801067a:	4920      	ldr	r1, [pc, #128]	; (80106fc <etharp_tmr+0x14c>)
 801067c:	687a      	ldr	r2, [r7, #4]
 801067e:	4613      	mov	r3, r2
 8010680:	005b      	lsls	r3, r3, #1
 8010682:	4413      	add	r3, r2
 8010684:	00db      	lsls	r3, r3, #3
 8010686:	440b      	add	r3, r1
 8010688:	3314      	adds	r3, #20
 801068a:	781b      	ldrb	r3, [r3, #0]
 801068c:	2b04      	cmp	r3, #4
 801068e:	d10a      	bne.n	80106a6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010690:	491a      	ldr	r1, [pc, #104]	; (80106fc <etharp_tmr+0x14c>)
 8010692:	687a      	ldr	r2, [r7, #4]
 8010694:	4613      	mov	r3, r2
 8010696:	005b      	lsls	r3, r3, #1
 8010698:	4413      	add	r3, r2
 801069a:	00db      	lsls	r3, r3, #3
 801069c:	440b      	add	r3, r1
 801069e:	3314      	adds	r3, #20
 80106a0:	2202      	movs	r2, #2
 80106a2:	701a      	strb	r2, [r3, #0]
 80106a4:	e01e      	b.n	80106e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80106a6:	4915      	ldr	r1, [pc, #84]	; (80106fc <etharp_tmr+0x14c>)
 80106a8:	687a      	ldr	r2, [r7, #4]
 80106aa:	4613      	mov	r3, r2
 80106ac:	005b      	lsls	r3, r3, #1
 80106ae:	4413      	add	r3, r2
 80106b0:	00db      	lsls	r3, r3, #3
 80106b2:	440b      	add	r3, r1
 80106b4:	3314      	adds	r3, #20
 80106b6:	781b      	ldrb	r3, [r3, #0]
 80106b8:	2b01      	cmp	r3, #1
 80106ba:	d113      	bne.n	80106e4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80106bc:	490f      	ldr	r1, [pc, #60]	; (80106fc <etharp_tmr+0x14c>)
 80106be:	687a      	ldr	r2, [r7, #4]
 80106c0:	4613      	mov	r3, r2
 80106c2:	005b      	lsls	r3, r3, #1
 80106c4:	4413      	add	r3, r2
 80106c6:	00db      	lsls	r3, r3, #3
 80106c8:	440b      	add	r3, r1
 80106ca:	3308      	adds	r3, #8
 80106cc:	6818      	ldr	r0, [r3, #0]
 80106ce:	687a      	ldr	r2, [r7, #4]
 80106d0:	4613      	mov	r3, r2
 80106d2:	005b      	lsls	r3, r3, #1
 80106d4:	4413      	add	r3, r2
 80106d6:	00db      	lsls	r3, r3, #3
 80106d8:	4a08      	ldr	r2, [pc, #32]	; (80106fc <etharp_tmr+0x14c>)
 80106da:	4413      	add	r3, r2
 80106dc:	3304      	adds	r3, #4
 80106de:	4619      	mov	r1, r3
 80106e0:	f000 fe6e 	bl	80113c0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	3301      	adds	r3, #1
 80106e8:	607b      	str	r3, [r7, #4]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2b09      	cmp	r3, #9
 80106ee:	f77f af65 	ble.w	80105bc <etharp_tmr+0xc>
      }
    }
  }
}
 80106f2:	bf00      	nop
 80106f4:	3708      	adds	r7, #8
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	20000184 	.word	0x20000184

08010700 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b08a      	sub	sp, #40	; 0x28
 8010704:	af00      	add	r7, sp, #0
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	460b      	mov	r3, r1
 801070a:	607a      	str	r2, [r7, #4]
 801070c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801070e:	230a      	movs	r3, #10
 8010710:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010712:	230a      	movs	r3, #10
 8010714:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010716:	230a      	movs	r3, #10
 8010718:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801071a:	2300      	movs	r3, #0
 801071c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801071e:	230a      	movs	r3, #10
 8010720:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010722:	2300      	movs	r3, #0
 8010724:	83bb      	strh	r3, [r7, #28]
 8010726:	2300      	movs	r3, #0
 8010728:	837b      	strh	r3, [r7, #26]
 801072a:	2300      	movs	r3, #0
 801072c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801072e:	2300      	movs	r3, #0
 8010730:	843b      	strh	r3, [r7, #32]
 8010732:	e0ae      	b.n	8010892 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010734:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010738:	49a6      	ldr	r1, [pc, #664]	; (80109d4 <etharp_find_entry+0x2d4>)
 801073a:	4613      	mov	r3, r2
 801073c:	005b      	lsls	r3, r3, #1
 801073e:	4413      	add	r3, r2
 8010740:	00db      	lsls	r3, r3, #3
 8010742:	440b      	add	r3, r1
 8010744:	3314      	adds	r3, #20
 8010746:	781b      	ldrb	r3, [r3, #0]
 8010748:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801074a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801074e:	2b0a      	cmp	r3, #10
 8010750:	d105      	bne.n	801075e <etharp_find_entry+0x5e>
 8010752:	7dfb      	ldrb	r3, [r7, #23]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d102      	bne.n	801075e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010758:	8c3b      	ldrh	r3, [r7, #32]
 801075a:	847b      	strh	r3, [r7, #34]	; 0x22
 801075c:	e095      	b.n	801088a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801075e:	7dfb      	ldrb	r3, [r7, #23]
 8010760:	2b00      	cmp	r3, #0
 8010762:	f000 8092 	beq.w	801088a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010766:	7dfb      	ldrb	r3, [r7, #23]
 8010768:	2b01      	cmp	r3, #1
 801076a:	d009      	beq.n	8010780 <etharp_find_entry+0x80>
 801076c:	7dfb      	ldrb	r3, [r7, #23]
 801076e:	2b01      	cmp	r3, #1
 8010770:	d806      	bhi.n	8010780 <etharp_find_entry+0x80>
 8010772:	4b99      	ldr	r3, [pc, #612]	; (80109d8 <etharp_find_entry+0x2d8>)
 8010774:	f44f 7292 	mov.w	r2, #292	; 0x124
 8010778:	4998      	ldr	r1, [pc, #608]	; (80109dc <etharp_find_entry+0x2dc>)
 801077a:	4899      	ldr	r0, [pc, #612]	; (80109e0 <etharp_find_entry+0x2e0>)
 801077c:	f002 f9e6 	bl	8012b4c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d020      	beq.n	80107c8 <etharp_find_entry+0xc8>
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	6819      	ldr	r1, [r3, #0]
 801078a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801078e:	4891      	ldr	r0, [pc, #580]	; (80109d4 <etharp_find_entry+0x2d4>)
 8010790:	4613      	mov	r3, r2
 8010792:	005b      	lsls	r3, r3, #1
 8010794:	4413      	add	r3, r2
 8010796:	00db      	lsls	r3, r3, #3
 8010798:	4403      	add	r3, r0
 801079a:	3304      	adds	r3, #4
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	4299      	cmp	r1, r3
 80107a0:	d112      	bne.n	80107c8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d00c      	beq.n	80107c2 <etharp_find_entry+0xc2>
 80107a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80107ac:	4989      	ldr	r1, [pc, #548]	; (80109d4 <etharp_find_entry+0x2d4>)
 80107ae:	4613      	mov	r3, r2
 80107b0:	005b      	lsls	r3, r3, #1
 80107b2:	4413      	add	r3, r2
 80107b4:	00db      	lsls	r3, r3, #3
 80107b6:	440b      	add	r3, r1
 80107b8:	3308      	adds	r3, #8
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	687a      	ldr	r2, [r7, #4]
 80107be:	429a      	cmp	r2, r3
 80107c0:	d102      	bne.n	80107c8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80107c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80107c6:	e100      	b.n	80109ca <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80107c8:	7dfb      	ldrb	r3, [r7, #23]
 80107ca:	2b01      	cmp	r3, #1
 80107cc:	d140      	bne.n	8010850 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80107ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80107d2:	4980      	ldr	r1, [pc, #512]	; (80109d4 <etharp_find_entry+0x2d4>)
 80107d4:	4613      	mov	r3, r2
 80107d6:	005b      	lsls	r3, r3, #1
 80107d8:	4413      	add	r3, r2
 80107da:	00db      	lsls	r3, r3, #3
 80107dc:	440b      	add	r3, r1
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d01a      	beq.n	801081a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80107e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80107e8:	497a      	ldr	r1, [pc, #488]	; (80109d4 <etharp_find_entry+0x2d4>)
 80107ea:	4613      	mov	r3, r2
 80107ec:	005b      	lsls	r3, r3, #1
 80107ee:	4413      	add	r3, r2
 80107f0:	00db      	lsls	r3, r3, #3
 80107f2:	440b      	add	r3, r1
 80107f4:	3312      	adds	r3, #18
 80107f6:	881b      	ldrh	r3, [r3, #0]
 80107f8:	8bba      	ldrh	r2, [r7, #28]
 80107fa:	429a      	cmp	r2, r3
 80107fc:	d845      	bhi.n	801088a <etharp_find_entry+0x18a>
            old_queue = i;
 80107fe:	8c3b      	ldrh	r3, [r7, #32]
 8010800:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010802:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010806:	4973      	ldr	r1, [pc, #460]	; (80109d4 <etharp_find_entry+0x2d4>)
 8010808:	4613      	mov	r3, r2
 801080a:	005b      	lsls	r3, r3, #1
 801080c:	4413      	add	r3, r2
 801080e:	00db      	lsls	r3, r3, #3
 8010810:	440b      	add	r3, r1
 8010812:	3312      	adds	r3, #18
 8010814:	881b      	ldrh	r3, [r3, #0]
 8010816:	83bb      	strh	r3, [r7, #28]
 8010818:	e037      	b.n	801088a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801081a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801081e:	496d      	ldr	r1, [pc, #436]	; (80109d4 <etharp_find_entry+0x2d4>)
 8010820:	4613      	mov	r3, r2
 8010822:	005b      	lsls	r3, r3, #1
 8010824:	4413      	add	r3, r2
 8010826:	00db      	lsls	r3, r3, #3
 8010828:	440b      	add	r3, r1
 801082a:	3312      	adds	r3, #18
 801082c:	881b      	ldrh	r3, [r3, #0]
 801082e:	8b7a      	ldrh	r2, [r7, #26]
 8010830:	429a      	cmp	r2, r3
 8010832:	d82a      	bhi.n	801088a <etharp_find_entry+0x18a>
            old_pending = i;
 8010834:	8c3b      	ldrh	r3, [r7, #32]
 8010836:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010838:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801083c:	4965      	ldr	r1, [pc, #404]	; (80109d4 <etharp_find_entry+0x2d4>)
 801083e:	4613      	mov	r3, r2
 8010840:	005b      	lsls	r3, r3, #1
 8010842:	4413      	add	r3, r2
 8010844:	00db      	lsls	r3, r3, #3
 8010846:	440b      	add	r3, r1
 8010848:	3312      	adds	r3, #18
 801084a:	881b      	ldrh	r3, [r3, #0]
 801084c:	837b      	strh	r3, [r7, #26]
 801084e:	e01c      	b.n	801088a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010850:	7dfb      	ldrb	r3, [r7, #23]
 8010852:	2b01      	cmp	r3, #1
 8010854:	d919      	bls.n	801088a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010856:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801085a:	495e      	ldr	r1, [pc, #376]	; (80109d4 <etharp_find_entry+0x2d4>)
 801085c:	4613      	mov	r3, r2
 801085e:	005b      	lsls	r3, r3, #1
 8010860:	4413      	add	r3, r2
 8010862:	00db      	lsls	r3, r3, #3
 8010864:	440b      	add	r3, r1
 8010866:	3312      	adds	r3, #18
 8010868:	881b      	ldrh	r3, [r3, #0]
 801086a:	8b3a      	ldrh	r2, [r7, #24]
 801086c:	429a      	cmp	r2, r3
 801086e:	d80c      	bhi.n	801088a <etharp_find_entry+0x18a>
            old_stable = i;
 8010870:	8c3b      	ldrh	r3, [r7, #32]
 8010872:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010874:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010878:	4956      	ldr	r1, [pc, #344]	; (80109d4 <etharp_find_entry+0x2d4>)
 801087a:	4613      	mov	r3, r2
 801087c:	005b      	lsls	r3, r3, #1
 801087e:	4413      	add	r3, r2
 8010880:	00db      	lsls	r3, r3, #3
 8010882:	440b      	add	r3, r1
 8010884:	3312      	adds	r3, #18
 8010886:	881b      	ldrh	r3, [r3, #0]
 8010888:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801088a:	8c3b      	ldrh	r3, [r7, #32]
 801088c:	3301      	adds	r3, #1
 801088e:	b29b      	uxth	r3, r3
 8010890:	843b      	strh	r3, [r7, #32]
 8010892:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010896:	2b09      	cmp	r3, #9
 8010898:	f77f af4c 	ble.w	8010734 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801089c:	7afb      	ldrb	r3, [r7, #11]
 801089e:	f003 0302 	and.w	r3, r3, #2
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d108      	bne.n	80108b8 <etharp_find_entry+0x1b8>
 80108a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80108aa:	2b0a      	cmp	r3, #10
 80108ac:	d107      	bne.n	80108be <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80108ae:	7afb      	ldrb	r3, [r7, #11]
 80108b0:	f003 0301 	and.w	r3, r3, #1
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d102      	bne.n	80108be <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80108b8:	f04f 33ff 	mov.w	r3, #4294967295
 80108bc:	e085      	b.n	80109ca <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80108be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80108c2:	2b09      	cmp	r3, #9
 80108c4:	dc02      	bgt.n	80108cc <etharp_find_entry+0x1cc>
    i = empty;
 80108c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80108c8:	843b      	strh	r3, [r7, #32]
 80108ca:	e039      	b.n	8010940 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80108cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80108d0:	2b09      	cmp	r3, #9
 80108d2:	dc14      	bgt.n	80108fe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80108d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80108d6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80108d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108dc:	493d      	ldr	r1, [pc, #244]	; (80109d4 <etharp_find_entry+0x2d4>)
 80108de:	4613      	mov	r3, r2
 80108e0:	005b      	lsls	r3, r3, #1
 80108e2:	4413      	add	r3, r2
 80108e4:	00db      	lsls	r3, r3, #3
 80108e6:	440b      	add	r3, r1
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d018      	beq.n	8010920 <etharp_find_entry+0x220>
 80108ee:	4b3a      	ldr	r3, [pc, #232]	; (80109d8 <etharp_find_entry+0x2d8>)
 80108f0:	f240 126d 	movw	r2, #365	; 0x16d
 80108f4:	493b      	ldr	r1, [pc, #236]	; (80109e4 <etharp_find_entry+0x2e4>)
 80108f6:	483a      	ldr	r0, [pc, #232]	; (80109e0 <etharp_find_entry+0x2e0>)
 80108f8:	f002 f928 	bl	8012b4c <iprintf>
 80108fc:	e010      	b.n	8010920 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80108fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010902:	2b09      	cmp	r3, #9
 8010904:	dc02      	bgt.n	801090c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010906:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010908:	843b      	strh	r3, [r7, #32]
 801090a:	e009      	b.n	8010920 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801090c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010910:	2b09      	cmp	r3, #9
 8010912:	dc02      	bgt.n	801091a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010914:	8bfb      	ldrh	r3, [r7, #30]
 8010916:	843b      	strh	r3, [r7, #32]
 8010918:	e002      	b.n	8010920 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801091a:	f04f 33ff 	mov.w	r3, #4294967295
 801091e:	e054      	b.n	80109ca <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010920:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010924:	2b09      	cmp	r3, #9
 8010926:	dd06      	ble.n	8010936 <etharp_find_entry+0x236>
 8010928:	4b2b      	ldr	r3, [pc, #172]	; (80109d8 <etharp_find_entry+0x2d8>)
 801092a:	f240 127f 	movw	r2, #383	; 0x17f
 801092e:	492e      	ldr	r1, [pc, #184]	; (80109e8 <etharp_find_entry+0x2e8>)
 8010930:	482b      	ldr	r0, [pc, #172]	; (80109e0 <etharp_find_entry+0x2e0>)
 8010932:	f002 f90b 	bl	8012b4c <iprintf>
    etharp_free_entry(i);
 8010936:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801093a:	4618      	mov	r0, r3
 801093c:	f7ff fe06 	bl	801054c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010940:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010944:	2b09      	cmp	r3, #9
 8010946:	dd06      	ble.n	8010956 <etharp_find_entry+0x256>
 8010948:	4b23      	ldr	r3, [pc, #140]	; (80109d8 <etharp_find_entry+0x2d8>)
 801094a:	f240 1283 	movw	r2, #387	; 0x183
 801094e:	4926      	ldr	r1, [pc, #152]	; (80109e8 <etharp_find_entry+0x2e8>)
 8010950:	4823      	ldr	r0, [pc, #140]	; (80109e0 <etharp_find_entry+0x2e0>)
 8010952:	f002 f8fb 	bl	8012b4c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010956:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801095a:	491e      	ldr	r1, [pc, #120]	; (80109d4 <etharp_find_entry+0x2d4>)
 801095c:	4613      	mov	r3, r2
 801095e:	005b      	lsls	r3, r3, #1
 8010960:	4413      	add	r3, r2
 8010962:	00db      	lsls	r3, r3, #3
 8010964:	440b      	add	r3, r1
 8010966:	3314      	adds	r3, #20
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d006      	beq.n	801097c <etharp_find_entry+0x27c>
 801096e:	4b1a      	ldr	r3, [pc, #104]	; (80109d8 <etharp_find_entry+0x2d8>)
 8010970:	f240 1285 	movw	r2, #389	; 0x185
 8010974:	491d      	ldr	r1, [pc, #116]	; (80109ec <etharp_find_entry+0x2ec>)
 8010976:	481a      	ldr	r0, [pc, #104]	; (80109e0 <etharp_find_entry+0x2e0>)
 8010978:	f002 f8e8 	bl	8012b4c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d00b      	beq.n	801099a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010982:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	6819      	ldr	r1, [r3, #0]
 801098a:	4812      	ldr	r0, [pc, #72]	; (80109d4 <etharp_find_entry+0x2d4>)
 801098c:	4613      	mov	r3, r2
 801098e:	005b      	lsls	r3, r3, #1
 8010990:	4413      	add	r3, r2
 8010992:	00db      	lsls	r3, r3, #3
 8010994:	4403      	add	r3, r0
 8010996:	3304      	adds	r3, #4
 8010998:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801099a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801099e:	490d      	ldr	r1, [pc, #52]	; (80109d4 <etharp_find_entry+0x2d4>)
 80109a0:	4613      	mov	r3, r2
 80109a2:	005b      	lsls	r3, r3, #1
 80109a4:	4413      	add	r3, r2
 80109a6:	00db      	lsls	r3, r3, #3
 80109a8:	440b      	add	r3, r1
 80109aa:	3312      	adds	r3, #18
 80109ac:	2200      	movs	r2, #0
 80109ae:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80109b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80109b4:	4907      	ldr	r1, [pc, #28]	; (80109d4 <etharp_find_entry+0x2d4>)
 80109b6:	4613      	mov	r3, r2
 80109b8:	005b      	lsls	r3, r3, #1
 80109ba:	4413      	add	r3, r2
 80109bc:	00db      	lsls	r3, r3, #3
 80109be:	440b      	add	r3, r1
 80109c0:	3308      	adds	r3, #8
 80109c2:	687a      	ldr	r2, [r7, #4]
 80109c4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80109c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3728      	adds	r7, #40	; 0x28
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	20000184 	.word	0x20000184
 80109d8:	08015e00 	.word	0x08015e00
 80109dc:	08015e38 	.word	0x08015e38
 80109e0:	08015e78 	.word	0x08015e78
 80109e4:	08015ea0 	.word	0x08015ea0
 80109e8:	08015eb8 	.word	0x08015eb8
 80109ec:	08015ecc 	.word	0x08015ecc

080109f0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b088      	sub	sp, #32
 80109f4:	af02      	add	r7, sp, #8
 80109f6:	60f8      	str	r0, [r7, #12]
 80109f8:	60b9      	str	r1, [r7, #8]
 80109fa:	607a      	str	r2, [r7, #4]
 80109fc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010a04:	2b06      	cmp	r3, #6
 8010a06:	d006      	beq.n	8010a16 <etharp_update_arp_entry+0x26>
 8010a08:	4b48      	ldr	r3, [pc, #288]	; (8010b2c <etharp_update_arp_entry+0x13c>)
 8010a0a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010a0e:	4948      	ldr	r1, [pc, #288]	; (8010b30 <etharp_update_arp_entry+0x140>)
 8010a10:	4848      	ldr	r0, [pc, #288]	; (8010b34 <etharp_update_arp_entry+0x144>)
 8010a12:	f002 f89b 	bl	8012b4c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d012      	beq.n	8010a42 <etharp_update_arp_entry+0x52>
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d00e      	beq.n	8010a42 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	68f9      	ldr	r1, [r7, #12]
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f001 f8fc 	bl	8011c28 <ip4_addr_isbroadcast_u32>
 8010a30:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d105      	bne.n	8010a42 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010a3e:	2be0      	cmp	r3, #224	; 0xe0
 8010a40:	d102      	bne.n	8010a48 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010a42:	f06f 030f 	mvn.w	r3, #15
 8010a46:	e06c      	b.n	8010b22 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010a48:	78fb      	ldrb	r3, [r7, #3]
 8010a4a:	68fa      	ldr	r2, [r7, #12]
 8010a4c:	4619      	mov	r1, r3
 8010a4e:	68b8      	ldr	r0, [r7, #8]
 8010a50:	f7ff fe56 	bl	8010700 <etharp_find_entry>
 8010a54:	4603      	mov	r3, r0
 8010a56:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010a58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	da02      	bge.n	8010a66 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010a60:	8afb      	ldrh	r3, [r7, #22]
 8010a62:	b25b      	sxtb	r3, r3
 8010a64:	e05d      	b.n	8010b22 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010a66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010a6a:	4933      	ldr	r1, [pc, #204]	; (8010b38 <etharp_update_arp_entry+0x148>)
 8010a6c:	4613      	mov	r3, r2
 8010a6e:	005b      	lsls	r3, r3, #1
 8010a70:	4413      	add	r3, r2
 8010a72:	00db      	lsls	r3, r3, #3
 8010a74:	440b      	add	r3, r1
 8010a76:	3314      	adds	r3, #20
 8010a78:	2202      	movs	r2, #2
 8010a7a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010a7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010a80:	492d      	ldr	r1, [pc, #180]	; (8010b38 <etharp_update_arp_entry+0x148>)
 8010a82:	4613      	mov	r3, r2
 8010a84:	005b      	lsls	r3, r3, #1
 8010a86:	4413      	add	r3, r2
 8010a88:	00db      	lsls	r3, r3, #3
 8010a8a:	440b      	add	r3, r1
 8010a8c:	3308      	adds	r3, #8
 8010a8e:	68fa      	ldr	r2, [r7, #12]
 8010a90:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010a92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010a96:	4613      	mov	r3, r2
 8010a98:	005b      	lsls	r3, r3, #1
 8010a9a:	4413      	add	r3, r2
 8010a9c:	00db      	lsls	r3, r3, #3
 8010a9e:	3308      	adds	r3, #8
 8010aa0:	4a25      	ldr	r2, [pc, #148]	; (8010b38 <etharp_update_arp_entry+0x148>)
 8010aa2:	4413      	add	r3, r2
 8010aa4:	3304      	adds	r3, #4
 8010aa6:	2206      	movs	r2, #6
 8010aa8:	6879      	ldr	r1, [r7, #4]
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f002 f83b 	bl	8012b26 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010ab0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010ab4:	4920      	ldr	r1, [pc, #128]	; (8010b38 <etharp_update_arp_entry+0x148>)
 8010ab6:	4613      	mov	r3, r2
 8010ab8:	005b      	lsls	r3, r3, #1
 8010aba:	4413      	add	r3, r2
 8010abc:	00db      	lsls	r3, r3, #3
 8010abe:	440b      	add	r3, r1
 8010ac0:	3312      	adds	r3, #18
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010ac6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010aca:	491b      	ldr	r1, [pc, #108]	; (8010b38 <etharp_update_arp_entry+0x148>)
 8010acc:	4613      	mov	r3, r2
 8010ace:	005b      	lsls	r3, r3, #1
 8010ad0:	4413      	add	r3, r2
 8010ad2:	00db      	lsls	r3, r3, #3
 8010ad4:	440b      	add	r3, r1
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d021      	beq.n	8010b20 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010adc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010ae0:	4915      	ldr	r1, [pc, #84]	; (8010b38 <etharp_update_arp_entry+0x148>)
 8010ae2:	4613      	mov	r3, r2
 8010ae4:	005b      	lsls	r3, r3, #1
 8010ae6:	4413      	add	r3, r2
 8010ae8:	00db      	lsls	r3, r3, #3
 8010aea:	440b      	add	r3, r1
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010af0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010af4:	4910      	ldr	r1, [pc, #64]	; (8010b38 <etharp_update_arp_entry+0x148>)
 8010af6:	4613      	mov	r3, r2
 8010af8:	005b      	lsls	r3, r3, #1
 8010afa:	4413      	add	r3, r2
 8010afc:	00db      	lsls	r3, r3, #3
 8010afe:	440b      	add	r3, r1
 8010b00:	2200      	movs	r2, #0
 8010b02:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010b0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010b0e:	9300      	str	r3, [sp, #0]
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6939      	ldr	r1, [r7, #16]
 8010b14:	68f8      	ldr	r0, [r7, #12]
 8010b16:	f001 ff8b 	bl	8012a30 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010b1a:	6938      	ldr	r0, [r7, #16]
 8010b1c:	f7f8 fb68 	bl	80091f0 <pbuf_free>
  }
  return ERR_OK;
 8010b20:	2300      	movs	r3, #0
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3718      	adds	r7, #24
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	08015e00 	.word	0x08015e00
 8010b30:	08015ef8 	.word	0x08015ef8
 8010b34:	08015e78 	.word	0x08015e78
 8010b38:	20000184 	.word	0x20000184

08010b3c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b44:	2300      	movs	r3, #0
 8010b46:	60fb      	str	r3, [r7, #12]
 8010b48:	e01e      	b.n	8010b88 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010b4a:	4913      	ldr	r1, [pc, #76]	; (8010b98 <etharp_cleanup_netif+0x5c>)
 8010b4c:	68fa      	ldr	r2, [r7, #12]
 8010b4e:	4613      	mov	r3, r2
 8010b50:	005b      	lsls	r3, r3, #1
 8010b52:	4413      	add	r3, r2
 8010b54:	00db      	lsls	r3, r3, #3
 8010b56:	440b      	add	r3, r1
 8010b58:	3314      	adds	r3, #20
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010b5e:	7afb      	ldrb	r3, [r7, #11]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d00e      	beq.n	8010b82 <etharp_cleanup_netif+0x46>
 8010b64:	490c      	ldr	r1, [pc, #48]	; (8010b98 <etharp_cleanup_netif+0x5c>)
 8010b66:	68fa      	ldr	r2, [r7, #12]
 8010b68:	4613      	mov	r3, r2
 8010b6a:	005b      	lsls	r3, r3, #1
 8010b6c:	4413      	add	r3, r2
 8010b6e:	00db      	lsls	r3, r3, #3
 8010b70:	440b      	add	r3, r1
 8010b72:	3308      	adds	r3, #8
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	687a      	ldr	r2, [r7, #4]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d102      	bne.n	8010b82 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010b7c:	68f8      	ldr	r0, [r7, #12]
 8010b7e:	f7ff fce5 	bl	801054c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	3301      	adds	r3, #1
 8010b86:	60fb      	str	r3, [r7, #12]
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	2b09      	cmp	r3, #9
 8010b8c:	dddd      	ble.n	8010b4a <etharp_cleanup_netif+0xe>
    }
  }
}
 8010b8e:	bf00      	nop
 8010b90:	3710      	adds	r7, #16
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	20000184 	.word	0x20000184

08010b9c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010b9c:	b5b0      	push	{r4, r5, r7, lr}
 8010b9e:	b08a      	sub	sp, #40	; 0x28
 8010ba0:	af04      	add	r7, sp, #16
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d107      	bne.n	8010bbc <etharp_input+0x20>
 8010bac:	4b3d      	ldr	r3, [pc, #244]	; (8010ca4 <etharp_input+0x108>)
 8010bae:	f240 228a 	movw	r2, #650	; 0x28a
 8010bb2:	493d      	ldr	r1, [pc, #244]	; (8010ca8 <etharp_input+0x10c>)
 8010bb4:	483d      	ldr	r0, [pc, #244]	; (8010cac <etharp_input+0x110>)
 8010bb6:	f001 ffc9 	bl	8012b4c <iprintf>
 8010bba:	e06f      	b.n	8010c9c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	685b      	ldr	r3, [r3, #4]
 8010bc0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	881b      	ldrh	r3, [r3, #0]
 8010bc6:	b29b      	uxth	r3, r3
 8010bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010bcc:	d10c      	bne.n	8010be8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010bce:	693b      	ldr	r3, [r7, #16]
 8010bd0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010bd2:	2b06      	cmp	r3, #6
 8010bd4:	d108      	bne.n	8010be8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010bda:	2b04      	cmp	r3, #4
 8010bdc:	d104      	bne.n	8010be8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010bde:	693b      	ldr	r3, [r7, #16]
 8010be0:	885b      	ldrh	r3, [r3, #2]
 8010be2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010be4:	2b08      	cmp	r3, #8
 8010be6:	d003      	beq.n	8010bf0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	f7f8 fb01 	bl	80091f0 <pbuf_free>
    return;
 8010bee:	e055      	b.n	8010c9c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010bf0:	693b      	ldr	r3, [r7, #16]
 8010bf2:	330e      	adds	r3, #14
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	3318      	adds	r3, #24
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	3304      	adds	r3, #4
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d102      	bne.n	8010c10 <etharp_input+0x74>
    for_us = 0;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	75fb      	strb	r3, [r7, #23]
 8010c0e:	e009      	b.n	8010c24 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010c10:	68ba      	ldr	r2, [r7, #8]
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	3304      	adds	r3, #4
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	bf0c      	ite	eq
 8010c1c:	2301      	moveq	r3, #1
 8010c1e:	2300      	movne	r3, #0
 8010c20:	b2db      	uxtb	r3, r3
 8010c22:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	f103 0208 	add.w	r2, r3, #8
 8010c2a:	7dfb      	ldrb	r3, [r7, #23]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d001      	beq.n	8010c34 <etharp_input+0x98>
 8010c30:	2301      	movs	r3, #1
 8010c32:	e000      	b.n	8010c36 <etharp_input+0x9a>
 8010c34:	2302      	movs	r3, #2
 8010c36:	f107 010c 	add.w	r1, r7, #12
 8010c3a:	6838      	ldr	r0, [r7, #0]
 8010c3c:	f7ff fed8 	bl	80109f0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010c40:	693b      	ldr	r3, [r7, #16]
 8010c42:	88db      	ldrh	r3, [r3, #6]
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c4a:	d003      	beq.n	8010c54 <etharp_input+0xb8>
 8010c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c50:	d01e      	beq.n	8010c90 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010c52:	e020      	b.n	8010c96 <etharp_input+0xfa>
      if (for_us) {
 8010c54:	7dfb      	ldrb	r3, [r7, #23]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d01c      	beq.n	8010c94 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010c70:	693a      	ldr	r2, [r7, #16]
 8010c72:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010c74:	2102      	movs	r1, #2
 8010c76:	9103      	str	r1, [sp, #12]
 8010c78:	f107 010c 	add.w	r1, r7, #12
 8010c7c:	9102      	str	r1, [sp, #8]
 8010c7e:	9201      	str	r2, [sp, #4]
 8010c80:	9300      	str	r3, [sp, #0]
 8010c82:	462b      	mov	r3, r5
 8010c84:	4622      	mov	r2, r4
 8010c86:	4601      	mov	r1, r0
 8010c88:	6838      	ldr	r0, [r7, #0]
 8010c8a:	f000 faeb 	bl	8011264 <etharp_raw>
      break;
 8010c8e:	e001      	b.n	8010c94 <etharp_input+0xf8>
      break;
 8010c90:	bf00      	nop
 8010c92:	e000      	b.n	8010c96 <etharp_input+0xfa>
      break;
 8010c94:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f7f8 faaa 	bl	80091f0 <pbuf_free>
}
 8010c9c:	3718      	adds	r7, #24
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bdb0      	pop	{r4, r5, r7, pc}
 8010ca2:	bf00      	nop
 8010ca4:	08015e00 	.word	0x08015e00
 8010ca8:	08015f50 	.word	0x08015f50
 8010cac:	08015e78 	.word	0x08015e78

08010cb0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b086      	sub	sp, #24
 8010cb4:	af02      	add	r7, sp, #8
 8010cb6:	60f8      	str	r0, [r7, #12]
 8010cb8:	60b9      	str	r1, [r7, #8]
 8010cba:	4613      	mov	r3, r2
 8010cbc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010cbe:	79fa      	ldrb	r2, [r7, #7]
 8010cc0:	4944      	ldr	r1, [pc, #272]	; (8010dd4 <etharp_output_to_arp_index+0x124>)
 8010cc2:	4613      	mov	r3, r2
 8010cc4:	005b      	lsls	r3, r3, #1
 8010cc6:	4413      	add	r3, r2
 8010cc8:	00db      	lsls	r3, r3, #3
 8010cca:	440b      	add	r3, r1
 8010ccc:	3314      	adds	r3, #20
 8010cce:	781b      	ldrb	r3, [r3, #0]
 8010cd0:	2b01      	cmp	r3, #1
 8010cd2:	d806      	bhi.n	8010ce2 <etharp_output_to_arp_index+0x32>
 8010cd4:	4b40      	ldr	r3, [pc, #256]	; (8010dd8 <etharp_output_to_arp_index+0x128>)
 8010cd6:	f240 22ef 	movw	r2, #751	; 0x2ef
 8010cda:	4940      	ldr	r1, [pc, #256]	; (8010ddc <etharp_output_to_arp_index+0x12c>)
 8010cdc:	4840      	ldr	r0, [pc, #256]	; (8010de0 <etharp_output_to_arp_index+0x130>)
 8010cde:	f001 ff35 	bl	8012b4c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010ce2:	79fa      	ldrb	r2, [r7, #7]
 8010ce4:	493b      	ldr	r1, [pc, #236]	; (8010dd4 <etharp_output_to_arp_index+0x124>)
 8010ce6:	4613      	mov	r3, r2
 8010ce8:	005b      	lsls	r3, r3, #1
 8010cea:	4413      	add	r3, r2
 8010cec:	00db      	lsls	r3, r3, #3
 8010cee:	440b      	add	r3, r1
 8010cf0:	3314      	adds	r3, #20
 8010cf2:	781b      	ldrb	r3, [r3, #0]
 8010cf4:	2b02      	cmp	r3, #2
 8010cf6:	d153      	bne.n	8010da0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010cf8:	79fa      	ldrb	r2, [r7, #7]
 8010cfa:	4936      	ldr	r1, [pc, #216]	; (8010dd4 <etharp_output_to_arp_index+0x124>)
 8010cfc:	4613      	mov	r3, r2
 8010cfe:	005b      	lsls	r3, r3, #1
 8010d00:	4413      	add	r3, r2
 8010d02:	00db      	lsls	r3, r3, #3
 8010d04:	440b      	add	r3, r1
 8010d06:	3312      	adds	r3, #18
 8010d08:	881b      	ldrh	r3, [r3, #0]
 8010d0a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010d0e:	d919      	bls.n	8010d44 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010d10:	79fa      	ldrb	r2, [r7, #7]
 8010d12:	4613      	mov	r3, r2
 8010d14:	005b      	lsls	r3, r3, #1
 8010d16:	4413      	add	r3, r2
 8010d18:	00db      	lsls	r3, r3, #3
 8010d1a:	4a2e      	ldr	r2, [pc, #184]	; (8010dd4 <etharp_output_to_arp_index+0x124>)
 8010d1c:	4413      	add	r3, r2
 8010d1e:	3304      	adds	r3, #4
 8010d20:	4619      	mov	r1, r3
 8010d22:	68f8      	ldr	r0, [r7, #12]
 8010d24:	f000 fb4c 	bl	80113c0 <etharp_request>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d138      	bne.n	8010da0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010d2e:	79fa      	ldrb	r2, [r7, #7]
 8010d30:	4928      	ldr	r1, [pc, #160]	; (8010dd4 <etharp_output_to_arp_index+0x124>)
 8010d32:	4613      	mov	r3, r2
 8010d34:	005b      	lsls	r3, r3, #1
 8010d36:	4413      	add	r3, r2
 8010d38:	00db      	lsls	r3, r3, #3
 8010d3a:	440b      	add	r3, r1
 8010d3c:	3314      	adds	r3, #20
 8010d3e:	2203      	movs	r2, #3
 8010d40:	701a      	strb	r2, [r3, #0]
 8010d42:	e02d      	b.n	8010da0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010d44:	79fa      	ldrb	r2, [r7, #7]
 8010d46:	4923      	ldr	r1, [pc, #140]	; (8010dd4 <etharp_output_to_arp_index+0x124>)
 8010d48:	4613      	mov	r3, r2
 8010d4a:	005b      	lsls	r3, r3, #1
 8010d4c:	4413      	add	r3, r2
 8010d4e:	00db      	lsls	r3, r3, #3
 8010d50:	440b      	add	r3, r1
 8010d52:	3312      	adds	r3, #18
 8010d54:	881b      	ldrh	r3, [r3, #0]
 8010d56:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010d5a:	d321      	bcc.n	8010da0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010d5c:	79fa      	ldrb	r2, [r7, #7]
 8010d5e:	4613      	mov	r3, r2
 8010d60:	005b      	lsls	r3, r3, #1
 8010d62:	4413      	add	r3, r2
 8010d64:	00db      	lsls	r3, r3, #3
 8010d66:	4a1b      	ldr	r2, [pc, #108]	; (8010dd4 <etharp_output_to_arp_index+0x124>)
 8010d68:	4413      	add	r3, r2
 8010d6a:	1d19      	adds	r1, r3, #4
 8010d6c:	79fa      	ldrb	r2, [r7, #7]
 8010d6e:	4613      	mov	r3, r2
 8010d70:	005b      	lsls	r3, r3, #1
 8010d72:	4413      	add	r3, r2
 8010d74:	00db      	lsls	r3, r3, #3
 8010d76:	3308      	adds	r3, #8
 8010d78:	4a16      	ldr	r2, [pc, #88]	; (8010dd4 <etharp_output_to_arp_index+0x124>)
 8010d7a:	4413      	add	r3, r2
 8010d7c:	3304      	adds	r3, #4
 8010d7e:	461a      	mov	r2, r3
 8010d80:	68f8      	ldr	r0, [r7, #12]
 8010d82:	f000 fafb 	bl	801137c <etharp_request_dst>
 8010d86:	4603      	mov	r3, r0
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d109      	bne.n	8010da0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010d8c:	79fa      	ldrb	r2, [r7, #7]
 8010d8e:	4911      	ldr	r1, [pc, #68]	; (8010dd4 <etharp_output_to_arp_index+0x124>)
 8010d90:	4613      	mov	r3, r2
 8010d92:	005b      	lsls	r3, r3, #1
 8010d94:	4413      	add	r3, r2
 8010d96:	00db      	lsls	r3, r3, #3
 8010d98:	440b      	add	r3, r1
 8010d9a:	3314      	adds	r3, #20
 8010d9c:	2203      	movs	r2, #3
 8010d9e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8010da6:	79fa      	ldrb	r2, [r7, #7]
 8010da8:	4613      	mov	r3, r2
 8010daa:	005b      	lsls	r3, r3, #1
 8010dac:	4413      	add	r3, r2
 8010dae:	00db      	lsls	r3, r3, #3
 8010db0:	3308      	adds	r3, #8
 8010db2:	4a08      	ldr	r2, [pc, #32]	; (8010dd4 <etharp_output_to_arp_index+0x124>)
 8010db4:	4413      	add	r3, r2
 8010db6:	1d1a      	adds	r2, r3, #4
 8010db8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010dbc:	9300      	str	r3, [sp, #0]
 8010dbe:	4613      	mov	r3, r2
 8010dc0:	460a      	mov	r2, r1
 8010dc2:	68b9      	ldr	r1, [r7, #8]
 8010dc4:	68f8      	ldr	r0, [r7, #12]
 8010dc6:	f001 fe33 	bl	8012a30 <ethernet_output>
 8010dca:	4603      	mov	r3, r0
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3710      	adds	r7, #16
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}
 8010dd4:	20000184 	.word	0x20000184
 8010dd8:	08015e00 	.word	0x08015e00
 8010ddc:	08015f70 	.word	0x08015f70
 8010de0:	08015e78 	.word	0x08015e78

08010de4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b08a      	sub	sp, #40	; 0x28
 8010de8:	af02      	add	r7, sp, #8
 8010dea:	60f8      	str	r0, [r7, #12]
 8010dec:	60b9      	str	r1, [r7, #8]
 8010dee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d106      	bne.n	8010e08 <etharp_output+0x24>
 8010dfa:	4b73      	ldr	r3, [pc, #460]	; (8010fc8 <etharp_output+0x1e4>)
 8010dfc:	f240 321e 	movw	r2, #798	; 0x31e
 8010e00:	4972      	ldr	r1, [pc, #456]	; (8010fcc <etharp_output+0x1e8>)
 8010e02:	4873      	ldr	r0, [pc, #460]	; (8010fd0 <etharp_output+0x1ec>)
 8010e04:	f001 fea2 	bl	8012b4c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d106      	bne.n	8010e1c <etharp_output+0x38>
 8010e0e:	4b6e      	ldr	r3, [pc, #440]	; (8010fc8 <etharp_output+0x1e4>)
 8010e10:	f240 321f 	movw	r2, #799	; 0x31f
 8010e14:	496f      	ldr	r1, [pc, #444]	; (8010fd4 <etharp_output+0x1f0>)
 8010e16:	486e      	ldr	r0, [pc, #440]	; (8010fd0 <etharp_output+0x1ec>)
 8010e18:	f001 fe98 	bl	8012b4c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d106      	bne.n	8010e30 <etharp_output+0x4c>
 8010e22:	4b69      	ldr	r3, [pc, #420]	; (8010fc8 <etharp_output+0x1e4>)
 8010e24:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010e28:	496b      	ldr	r1, [pc, #428]	; (8010fd8 <etharp_output+0x1f4>)
 8010e2a:	4869      	ldr	r0, [pc, #420]	; (8010fd0 <etharp_output+0x1ec>)
 8010e2c:	f001 fe8e 	bl	8012b4c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	68f9      	ldr	r1, [r7, #12]
 8010e36:	4618      	mov	r0, r3
 8010e38:	f000 fef6 	bl	8011c28 <ip4_addr_isbroadcast_u32>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d002      	beq.n	8010e48 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010e42:	4b66      	ldr	r3, [pc, #408]	; (8010fdc <etharp_output+0x1f8>)
 8010e44:	61fb      	str	r3, [r7, #28]
 8010e46:	e0af      	b.n	8010fa8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010e50:	2be0      	cmp	r3, #224	; 0xe0
 8010e52:	d118      	bne.n	8010e86 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010e54:	2301      	movs	r3, #1
 8010e56:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010e5c:	235e      	movs	r3, #94	; 0x5e
 8010e5e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	3301      	adds	r3, #1
 8010e64:	781b      	ldrb	r3, [r3, #0]
 8010e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e6a:	b2db      	uxtb	r3, r3
 8010e6c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	3302      	adds	r3, #2
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	3303      	adds	r3, #3
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010e7e:	f107 0310 	add.w	r3, r7, #16
 8010e82:	61fb      	str	r3, [r7, #28]
 8010e84:	e090      	b.n	8010fa8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681a      	ldr	r2, [r3, #0]
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	3304      	adds	r3, #4
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	405a      	eors	r2, r3
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	3308      	adds	r3, #8
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	4013      	ands	r3, r2
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d012      	beq.n	8010ec4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010ea4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010ea8:	4293      	cmp	r3, r2
 8010eaa:	d00b      	beq.n	8010ec4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	330c      	adds	r3, #12
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d003      	beq.n	8010ebe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	330c      	adds	r3, #12
 8010eba:	61bb      	str	r3, [r7, #24]
 8010ebc:	e002      	b.n	8010ec4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010ebe:	f06f 0303 	mvn.w	r3, #3
 8010ec2:	e07d      	b.n	8010fc0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010ec4:	4b46      	ldr	r3, [pc, #280]	; (8010fe0 <etharp_output+0x1fc>)
 8010ec6:	781b      	ldrb	r3, [r3, #0]
 8010ec8:	4619      	mov	r1, r3
 8010eca:	4a46      	ldr	r2, [pc, #280]	; (8010fe4 <etharp_output+0x200>)
 8010ecc:	460b      	mov	r3, r1
 8010ece:	005b      	lsls	r3, r3, #1
 8010ed0:	440b      	add	r3, r1
 8010ed2:	00db      	lsls	r3, r3, #3
 8010ed4:	4413      	add	r3, r2
 8010ed6:	3314      	adds	r3, #20
 8010ed8:	781b      	ldrb	r3, [r3, #0]
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d925      	bls.n	8010f2a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010ede:	4b40      	ldr	r3, [pc, #256]	; (8010fe0 <etharp_output+0x1fc>)
 8010ee0:	781b      	ldrb	r3, [r3, #0]
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	4a3f      	ldr	r2, [pc, #252]	; (8010fe4 <etharp_output+0x200>)
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	005b      	lsls	r3, r3, #1
 8010eea:	440b      	add	r3, r1
 8010eec:	00db      	lsls	r3, r3, #3
 8010eee:	4413      	add	r3, r2
 8010ef0:	3308      	adds	r3, #8
 8010ef2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010ef4:	68fa      	ldr	r2, [r7, #12]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d117      	bne.n	8010f2a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010efa:	69bb      	ldr	r3, [r7, #24]
 8010efc:	681a      	ldr	r2, [r3, #0]
 8010efe:	4b38      	ldr	r3, [pc, #224]	; (8010fe0 <etharp_output+0x1fc>)
 8010f00:	781b      	ldrb	r3, [r3, #0]
 8010f02:	4618      	mov	r0, r3
 8010f04:	4937      	ldr	r1, [pc, #220]	; (8010fe4 <etharp_output+0x200>)
 8010f06:	4603      	mov	r3, r0
 8010f08:	005b      	lsls	r3, r3, #1
 8010f0a:	4403      	add	r3, r0
 8010f0c:	00db      	lsls	r3, r3, #3
 8010f0e:	440b      	add	r3, r1
 8010f10:	3304      	adds	r3, #4
 8010f12:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d108      	bne.n	8010f2a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010f18:	4b31      	ldr	r3, [pc, #196]	; (8010fe0 <etharp_output+0x1fc>)
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	461a      	mov	r2, r3
 8010f1e:	68b9      	ldr	r1, [r7, #8]
 8010f20:	68f8      	ldr	r0, [r7, #12]
 8010f22:	f7ff fec5 	bl	8010cb0 <etharp_output_to_arp_index>
 8010f26:	4603      	mov	r3, r0
 8010f28:	e04a      	b.n	8010fc0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	75fb      	strb	r3, [r7, #23]
 8010f2e:	e031      	b.n	8010f94 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010f30:	7dfa      	ldrb	r2, [r7, #23]
 8010f32:	492c      	ldr	r1, [pc, #176]	; (8010fe4 <etharp_output+0x200>)
 8010f34:	4613      	mov	r3, r2
 8010f36:	005b      	lsls	r3, r3, #1
 8010f38:	4413      	add	r3, r2
 8010f3a:	00db      	lsls	r3, r3, #3
 8010f3c:	440b      	add	r3, r1
 8010f3e:	3314      	adds	r3, #20
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	2b01      	cmp	r3, #1
 8010f44:	d923      	bls.n	8010f8e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010f46:	7dfa      	ldrb	r2, [r7, #23]
 8010f48:	4926      	ldr	r1, [pc, #152]	; (8010fe4 <etharp_output+0x200>)
 8010f4a:	4613      	mov	r3, r2
 8010f4c:	005b      	lsls	r3, r3, #1
 8010f4e:	4413      	add	r3, r2
 8010f50:	00db      	lsls	r3, r3, #3
 8010f52:	440b      	add	r3, r1
 8010f54:	3308      	adds	r3, #8
 8010f56:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010f58:	68fa      	ldr	r2, [r7, #12]
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	d117      	bne.n	8010f8e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010f5e:	69bb      	ldr	r3, [r7, #24]
 8010f60:	6819      	ldr	r1, [r3, #0]
 8010f62:	7dfa      	ldrb	r2, [r7, #23]
 8010f64:	481f      	ldr	r0, [pc, #124]	; (8010fe4 <etharp_output+0x200>)
 8010f66:	4613      	mov	r3, r2
 8010f68:	005b      	lsls	r3, r3, #1
 8010f6a:	4413      	add	r3, r2
 8010f6c:	00db      	lsls	r3, r3, #3
 8010f6e:	4403      	add	r3, r0
 8010f70:	3304      	adds	r3, #4
 8010f72:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010f74:	4299      	cmp	r1, r3
 8010f76:	d10a      	bne.n	8010f8e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010f78:	4a19      	ldr	r2, [pc, #100]	; (8010fe0 <etharp_output+0x1fc>)
 8010f7a:	7dfb      	ldrb	r3, [r7, #23]
 8010f7c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010f7e:	7dfb      	ldrb	r3, [r7, #23]
 8010f80:	461a      	mov	r2, r3
 8010f82:	68b9      	ldr	r1, [r7, #8]
 8010f84:	68f8      	ldr	r0, [r7, #12]
 8010f86:	f7ff fe93 	bl	8010cb0 <etharp_output_to_arp_index>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	e018      	b.n	8010fc0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010f8e:	7dfb      	ldrb	r3, [r7, #23]
 8010f90:	3301      	adds	r3, #1
 8010f92:	75fb      	strb	r3, [r7, #23]
 8010f94:	7dfb      	ldrb	r3, [r7, #23]
 8010f96:	2b09      	cmp	r3, #9
 8010f98:	d9ca      	bls.n	8010f30 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010f9a:	68ba      	ldr	r2, [r7, #8]
 8010f9c:	69b9      	ldr	r1, [r7, #24]
 8010f9e:	68f8      	ldr	r0, [r7, #12]
 8010fa0:	f000 f822 	bl	8010fe8 <etharp_query>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	e00b      	b.n	8010fc0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010fae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010fb2:	9300      	str	r3, [sp, #0]
 8010fb4:	69fb      	ldr	r3, [r7, #28]
 8010fb6:	68b9      	ldr	r1, [r7, #8]
 8010fb8:	68f8      	ldr	r0, [r7, #12]
 8010fba:	f001 fd39 	bl	8012a30 <ethernet_output>
 8010fbe:	4603      	mov	r3, r0
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3720      	adds	r7, #32
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}
 8010fc8:	08015e00 	.word	0x08015e00
 8010fcc:	08015f50 	.word	0x08015f50
 8010fd0:	08015e78 	.word	0x08015e78
 8010fd4:	08015fa0 	.word	0x08015fa0
 8010fd8:	08015f40 	.word	0x08015f40
 8010fdc:	08016628 	.word	0x08016628
 8010fe0:	20000274 	.word	0x20000274
 8010fe4:	20000184 	.word	0x20000184

08010fe8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b08c      	sub	sp, #48	; 0x30
 8010fec:	af02      	add	r7, sp, #8
 8010fee:	60f8      	str	r0, [r7, #12]
 8010ff0:	60b9      	str	r1, [r7, #8]
 8010ff2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	3326      	adds	r3, #38	; 0x26
 8010ff8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010ffa:	23ff      	movs	r3, #255	; 0xff
 8010ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011000:	2300      	movs	r3, #0
 8011002:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	68f9      	ldr	r1, [r7, #12]
 801100a:	4618      	mov	r0, r3
 801100c:	f000 fe0c 	bl	8011c28 <ip4_addr_isbroadcast_u32>
 8011010:	4603      	mov	r3, r0
 8011012:	2b00      	cmp	r3, #0
 8011014:	d10c      	bne.n	8011030 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801101e:	2be0      	cmp	r3, #224	; 0xe0
 8011020:	d006      	beq.n	8011030 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d003      	beq.n	8011030 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d102      	bne.n	8011036 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011030:	f06f 030f 	mvn.w	r3, #15
 8011034:	e102      	b.n	801123c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011036:	68fa      	ldr	r2, [r7, #12]
 8011038:	2101      	movs	r1, #1
 801103a:	68b8      	ldr	r0, [r7, #8]
 801103c:	f7ff fb60 	bl	8010700 <etharp_find_entry>
 8011040:	4603      	mov	r3, r0
 8011042:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011044:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011048:	2b00      	cmp	r3, #0
 801104a:	da02      	bge.n	8011052 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801104c:	8a7b      	ldrh	r3, [r7, #18]
 801104e:	b25b      	sxtb	r3, r3
 8011050:	e0f4      	b.n	801123c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011052:	8a7b      	ldrh	r3, [r7, #18]
 8011054:	2b7e      	cmp	r3, #126	; 0x7e
 8011056:	d906      	bls.n	8011066 <etharp_query+0x7e>
 8011058:	4b7a      	ldr	r3, [pc, #488]	; (8011244 <etharp_query+0x25c>)
 801105a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801105e:	497a      	ldr	r1, [pc, #488]	; (8011248 <etharp_query+0x260>)
 8011060:	487a      	ldr	r0, [pc, #488]	; (801124c <etharp_query+0x264>)
 8011062:	f001 fd73 	bl	8012b4c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011066:	8a7b      	ldrh	r3, [r7, #18]
 8011068:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801106a:	7c7a      	ldrb	r2, [r7, #17]
 801106c:	4978      	ldr	r1, [pc, #480]	; (8011250 <etharp_query+0x268>)
 801106e:	4613      	mov	r3, r2
 8011070:	005b      	lsls	r3, r3, #1
 8011072:	4413      	add	r3, r2
 8011074:	00db      	lsls	r3, r3, #3
 8011076:	440b      	add	r3, r1
 8011078:	3314      	adds	r3, #20
 801107a:	781b      	ldrb	r3, [r3, #0]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d115      	bne.n	80110ac <etharp_query+0xc4>
    is_new_entry = 1;
 8011080:	2301      	movs	r3, #1
 8011082:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011084:	7c7a      	ldrb	r2, [r7, #17]
 8011086:	4972      	ldr	r1, [pc, #456]	; (8011250 <etharp_query+0x268>)
 8011088:	4613      	mov	r3, r2
 801108a:	005b      	lsls	r3, r3, #1
 801108c:	4413      	add	r3, r2
 801108e:	00db      	lsls	r3, r3, #3
 8011090:	440b      	add	r3, r1
 8011092:	3314      	adds	r3, #20
 8011094:	2201      	movs	r2, #1
 8011096:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011098:	7c7a      	ldrb	r2, [r7, #17]
 801109a:	496d      	ldr	r1, [pc, #436]	; (8011250 <etharp_query+0x268>)
 801109c:	4613      	mov	r3, r2
 801109e:	005b      	lsls	r3, r3, #1
 80110a0:	4413      	add	r3, r2
 80110a2:	00db      	lsls	r3, r3, #3
 80110a4:	440b      	add	r3, r1
 80110a6:	3308      	adds	r3, #8
 80110a8:	68fa      	ldr	r2, [r7, #12]
 80110aa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80110ac:	7c7a      	ldrb	r2, [r7, #17]
 80110ae:	4968      	ldr	r1, [pc, #416]	; (8011250 <etharp_query+0x268>)
 80110b0:	4613      	mov	r3, r2
 80110b2:	005b      	lsls	r3, r3, #1
 80110b4:	4413      	add	r3, r2
 80110b6:	00db      	lsls	r3, r3, #3
 80110b8:	440b      	add	r3, r1
 80110ba:	3314      	adds	r3, #20
 80110bc:	781b      	ldrb	r3, [r3, #0]
 80110be:	2b01      	cmp	r3, #1
 80110c0:	d011      	beq.n	80110e6 <etharp_query+0xfe>
 80110c2:	7c7a      	ldrb	r2, [r7, #17]
 80110c4:	4962      	ldr	r1, [pc, #392]	; (8011250 <etharp_query+0x268>)
 80110c6:	4613      	mov	r3, r2
 80110c8:	005b      	lsls	r3, r3, #1
 80110ca:	4413      	add	r3, r2
 80110cc:	00db      	lsls	r3, r3, #3
 80110ce:	440b      	add	r3, r1
 80110d0:	3314      	adds	r3, #20
 80110d2:	781b      	ldrb	r3, [r3, #0]
 80110d4:	2b01      	cmp	r3, #1
 80110d6:	d806      	bhi.n	80110e6 <etharp_query+0xfe>
 80110d8:	4b5a      	ldr	r3, [pc, #360]	; (8011244 <etharp_query+0x25c>)
 80110da:	f240 32cf 	movw	r2, #975	; 0x3cf
 80110de:	495d      	ldr	r1, [pc, #372]	; (8011254 <etharp_query+0x26c>)
 80110e0:	485a      	ldr	r0, [pc, #360]	; (801124c <etharp_query+0x264>)
 80110e2:	f001 fd33 	bl	8012b4c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80110e6:	6a3b      	ldr	r3, [r7, #32]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d102      	bne.n	80110f2 <etharp_query+0x10a>
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d10c      	bne.n	801110c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80110f2:	68b9      	ldr	r1, [r7, #8]
 80110f4:	68f8      	ldr	r0, [r7, #12]
 80110f6:	f000 f963 	bl	80113c0 <etharp_request>
 80110fa:	4603      	mov	r3, r0
 80110fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d102      	bne.n	801110c <etharp_query+0x124>
      return result;
 8011106:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801110a:	e097      	b.n	801123c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d106      	bne.n	8011120 <etharp_query+0x138>
 8011112:	4b4c      	ldr	r3, [pc, #304]	; (8011244 <etharp_query+0x25c>)
 8011114:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011118:	494f      	ldr	r1, [pc, #316]	; (8011258 <etharp_query+0x270>)
 801111a:	484c      	ldr	r0, [pc, #304]	; (801124c <etharp_query+0x264>)
 801111c:	f001 fd16 	bl	8012b4c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011120:	7c7a      	ldrb	r2, [r7, #17]
 8011122:	494b      	ldr	r1, [pc, #300]	; (8011250 <etharp_query+0x268>)
 8011124:	4613      	mov	r3, r2
 8011126:	005b      	lsls	r3, r3, #1
 8011128:	4413      	add	r3, r2
 801112a:	00db      	lsls	r3, r3, #3
 801112c:	440b      	add	r3, r1
 801112e:	3314      	adds	r3, #20
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	2b01      	cmp	r3, #1
 8011134:	d918      	bls.n	8011168 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011136:	4a49      	ldr	r2, [pc, #292]	; (801125c <etharp_query+0x274>)
 8011138:	7c7b      	ldrb	r3, [r7, #17]
 801113a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801113c:	7c7a      	ldrb	r2, [r7, #17]
 801113e:	4613      	mov	r3, r2
 8011140:	005b      	lsls	r3, r3, #1
 8011142:	4413      	add	r3, r2
 8011144:	00db      	lsls	r3, r3, #3
 8011146:	3308      	adds	r3, #8
 8011148:	4a41      	ldr	r2, [pc, #260]	; (8011250 <etharp_query+0x268>)
 801114a:	4413      	add	r3, r2
 801114c:	1d1a      	adds	r2, r3, #4
 801114e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011152:	9300      	str	r3, [sp, #0]
 8011154:	4613      	mov	r3, r2
 8011156:	697a      	ldr	r2, [r7, #20]
 8011158:	6879      	ldr	r1, [r7, #4]
 801115a:	68f8      	ldr	r0, [r7, #12]
 801115c:	f001 fc68 	bl	8012a30 <ethernet_output>
 8011160:	4603      	mov	r3, r0
 8011162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011166:	e067      	b.n	8011238 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011168:	7c7a      	ldrb	r2, [r7, #17]
 801116a:	4939      	ldr	r1, [pc, #228]	; (8011250 <etharp_query+0x268>)
 801116c:	4613      	mov	r3, r2
 801116e:	005b      	lsls	r3, r3, #1
 8011170:	4413      	add	r3, r2
 8011172:	00db      	lsls	r3, r3, #3
 8011174:	440b      	add	r3, r1
 8011176:	3314      	adds	r3, #20
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	2b01      	cmp	r3, #1
 801117c:	d15c      	bne.n	8011238 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801117e:	2300      	movs	r3, #0
 8011180:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011186:	e01c      	b.n	80111c2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011188:	69fb      	ldr	r3, [r7, #28]
 801118a:	895a      	ldrh	r2, [r3, #10]
 801118c:	69fb      	ldr	r3, [r7, #28]
 801118e:	891b      	ldrh	r3, [r3, #8]
 8011190:	429a      	cmp	r2, r3
 8011192:	d10a      	bne.n	80111aa <etharp_query+0x1c2>
 8011194:	69fb      	ldr	r3, [r7, #28]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d006      	beq.n	80111aa <etharp_query+0x1c2>
 801119c:	4b29      	ldr	r3, [pc, #164]	; (8011244 <etharp_query+0x25c>)
 801119e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80111a2:	492f      	ldr	r1, [pc, #188]	; (8011260 <etharp_query+0x278>)
 80111a4:	4829      	ldr	r0, [pc, #164]	; (801124c <etharp_query+0x264>)
 80111a6:	f001 fcd1 	bl	8012b4c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80111aa:	69fb      	ldr	r3, [r7, #28]
 80111ac:	7b1b      	ldrb	r3, [r3, #12]
 80111ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d002      	beq.n	80111bc <etharp_query+0x1d4>
        copy_needed = 1;
 80111b6:	2301      	movs	r3, #1
 80111b8:	61bb      	str	r3, [r7, #24]
        break;
 80111ba:	e005      	b.n	80111c8 <etharp_query+0x1e0>
      }
      p = p->next;
 80111bc:	69fb      	ldr	r3, [r7, #28]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80111c2:	69fb      	ldr	r3, [r7, #28]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d1df      	bne.n	8011188 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 80111c8:	69bb      	ldr	r3, [r7, #24]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d007      	beq.n	80111de <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80111ce:	687a      	ldr	r2, [r7, #4]
 80111d0:	f44f 7120 	mov.w	r1, #640	; 0x280
 80111d4:	200e      	movs	r0, #14
 80111d6:	f7f8 fa77 	bl	80096c8 <pbuf_clone>
 80111da:	61f8      	str	r0, [r7, #28]
 80111dc:	e004      	b.n	80111e8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80111e2:	69f8      	ldr	r0, [r7, #28]
 80111e4:	f7f8 f8a4 	bl	8009330 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80111e8:	69fb      	ldr	r3, [r7, #28]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d021      	beq.n	8011232 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80111ee:	7c7a      	ldrb	r2, [r7, #17]
 80111f0:	4917      	ldr	r1, [pc, #92]	; (8011250 <etharp_query+0x268>)
 80111f2:	4613      	mov	r3, r2
 80111f4:	005b      	lsls	r3, r3, #1
 80111f6:	4413      	add	r3, r2
 80111f8:	00db      	lsls	r3, r3, #3
 80111fa:	440b      	add	r3, r1
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d00a      	beq.n	8011218 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011202:	7c7a      	ldrb	r2, [r7, #17]
 8011204:	4912      	ldr	r1, [pc, #72]	; (8011250 <etharp_query+0x268>)
 8011206:	4613      	mov	r3, r2
 8011208:	005b      	lsls	r3, r3, #1
 801120a:	4413      	add	r3, r2
 801120c:	00db      	lsls	r3, r3, #3
 801120e:	440b      	add	r3, r1
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	4618      	mov	r0, r3
 8011214:	f7f7 ffec 	bl	80091f0 <pbuf_free>
      }
      arp_table[i].q = p;
 8011218:	7c7a      	ldrb	r2, [r7, #17]
 801121a:	490d      	ldr	r1, [pc, #52]	; (8011250 <etharp_query+0x268>)
 801121c:	4613      	mov	r3, r2
 801121e:	005b      	lsls	r3, r3, #1
 8011220:	4413      	add	r3, r2
 8011222:	00db      	lsls	r3, r3, #3
 8011224:	440b      	add	r3, r1
 8011226:	69fa      	ldr	r2, [r7, #28]
 8011228:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801122a:	2300      	movs	r3, #0
 801122c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011230:	e002      	b.n	8011238 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011232:	23ff      	movs	r3, #255	; 0xff
 8011234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011238:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801123c:	4618      	mov	r0, r3
 801123e:	3728      	adds	r7, #40	; 0x28
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}
 8011244:	08015e00 	.word	0x08015e00
 8011248:	08015fac 	.word	0x08015fac
 801124c:	08015e78 	.word	0x08015e78
 8011250:	20000184 	.word	0x20000184
 8011254:	08015fbc 	.word	0x08015fbc
 8011258:	08015fa0 	.word	0x08015fa0
 801125c:	20000274 	.word	0x20000274
 8011260:	08015fe4 	.word	0x08015fe4

08011264 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b08a      	sub	sp, #40	; 0x28
 8011268:	af02      	add	r7, sp, #8
 801126a:	60f8      	str	r0, [r7, #12]
 801126c:	60b9      	str	r1, [r7, #8]
 801126e:	607a      	str	r2, [r7, #4]
 8011270:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011272:	2300      	movs	r3, #0
 8011274:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d106      	bne.n	801128a <etharp_raw+0x26>
 801127c:	4b3a      	ldr	r3, [pc, #232]	; (8011368 <etharp_raw+0x104>)
 801127e:	f240 4257 	movw	r2, #1111	; 0x457
 8011282:	493a      	ldr	r1, [pc, #232]	; (801136c <etharp_raw+0x108>)
 8011284:	483a      	ldr	r0, [pc, #232]	; (8011370 <etharp_raw+0x10c>)
 8011286:	f001 fc61 	bl	8012b4c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801128a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801128e:	211c      	movs	r1, #28
 8011290:	200e      	movs	r0, #14
 8011292:	f7f7 fccd 	bl	8008c30 <pbuf_alloc>
 8011296:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011298:	69bb      	ldr	r3, [r7, #24]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d102      	bne.n	80112a4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801129e:	f04f 33ff 	mov.w	r3, #4294967295
 80112a2:	e05d      	b.n	8011360 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80112a4:	69bb      	ldr	r3, [r7, #24]
 80112a6:	895b      	ldrh	r3, [r3, #10]
 80112a8:	2b1b      	cmp	r3, #27
 80112aa:	d806      	bhi.n	80112ba <etharp_raw+0x56>
 80112ac:	4b2e      	ldr	r3, [pc, #184]	; (8011368 <etharp_raw+0x104>)
 80112ae:	f240 4263 	movw	r2, #1123	; 0x463
 80112b2:	4930      	ldr	r1, [pc, #192]	; (8011374 <etharp_raw+0x110>)
 80112b4:	482e      	ldr	r0, [pc, #184]	; (8011370 <etharp_raw+0x10c>)
 80112b6:	f001 fc49 	bl	8012b4c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80112ba:	69bb      	ldr	r3, [r7, #24]
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80112c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7f6 fce5 	bl	8007c92 <lwip_htons>
 80112c8:	4603      	mov	r3, r0
 80112ca:	461a      	mov	r2, r3
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80112d6:	2b06      	cmp	r3, #6
 80112d8:	d006      	beq.n	80112e8 <etharp_raw+0x84>
 80112da:	4b23      	ldr	r3, [pc, #140]	; (8011368 <etharp_raw+0x104>)
 80112dc:	f240 426a 	movw	r2, #1130	; 0x46a
 80112e0:	4925      	ldr	r1, [pc, #148]	; (8011378 <etharp_raw+0x114>)
 80112e2:	4823      	ldr	r0, [pc, #140]	; (8011370 <etharp_raw+0x10c>)
 80112e4:	f001 fc32 	bl	8012b4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	3308      	adds	r3, #8
 80112ec:	2206      	movs	r2, #6
 80112ee:	6839      	ldr	r1, [r7, #0]
 80112f0:	4618      	mov	r0, r3
 80112f2:	f001 fc18 	bl	8012b26 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	3312      	adds	r3, #18
 80112fa:	2206      	movs	r2, #6
 80112fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80112fe:	4618      	mov	r0, r3
 8011300:	f001 fc11 	bl	8012b26 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011304:	697b      	ldr	r3, [r7, #20]
 8011306:	330e      	adds	r3, #14
 8011308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801130a:	6812      	ldr	r2, [r2, #0]
 801130c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	3318      	adds	r3, #24
 8011312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011314:	6812      	ldr	r2, [r2, #0]
 8011316:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	2200      	movs	r2, #0
 801131c:	701a      	strb	r2, [r3, #0]
 801131e:	2200      	movs	r2, #0
 8011320:	f042 0201 	orr.w	r2, r2, #1
 8011324:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	2200      	movs	r2, #0
 801132a:	f042 0208 	orr.w	r2, r2, #8
 801132e:	709a      	strb	r2, [r3, #2]
 8011330:	2200      	movs	r2, #0
 8011332:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011334:	697b      	ldr	r3, [r7, #20]
 8011336:	2206      	movs	r2, #6
 8011338:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801133a:	697b      	ldr	r3, [r7, #20]
 801133c:	2204      	movs	r2, #4
 801133e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011340:	f640 0306 	movw	r3, #2054	; 0x806
 8011344:	9300      	str	r3, [sp, #0]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	68ba      	ldr	r2, [r7, #8]
 801134a:	69b9      	ldr	r1, [r7, #24]
 801134c:	68f8      	ldr	r0, [r7, #12]
 801134e:	f001 fb6f 	bl	8012a30 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011352:	69b8      	ldr	r0, [r7, #24]
 8011354:	f7f7 ff4c 	bl	80091f0 <pbuf_free>
  p = NULL;
 8011358:	2300      	movs	r3, #0
 801135a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801135c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011360:	4618      	mov	r0, r3
 8011362:	3720      	adds	r7, #32
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}
 8011368:	08015e00 	.word	0x08015e00
 801136c:	08015f50 	.word	0x08015f50
 8011370:	08015e78 	.word	0x08015e78
 8011374:	08016000 	.word	0x08016000
 8011378:	08016034 	.word	0x08016034

0801137c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b088      	sub	sp, #32
 8011380:	af04      	add	r7, sp, #16
 8011382:	60f8      	str	r0, [r7, #12]
 8011384:	60b9      	str	r1, [r7, #8]
 8011386:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011398:	2201      	movs	r2, #1
 801139a:	9203      	str	r2, [sp, #12]
 801139c:	68ba      	ldr	r2, [r7, #8]
 801139e:	9202      	str	r2, [sp, #8]
 80113a0:	4a06      	ldr	r2, [pc, #24]	; (80113bc <etharp_request_dst+0x40>)
 80113a2:	9201      	str	r2, [sp, #4]
 80113a4:	9300      	str	r3, [sp, #0]
 80113a6:	4603      	mov	r3, r0
 80113a8:	687a      	ldr	r2, [r7, #4]
 80113aa:	68f8      	ldr	r0, [r7, #12]
 80113ac:	f7ff ff5a 	bl	8011264 <etharp_raw>
 80113b0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3710      	adds	r7, #16
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	08016630 	.word	0x08016630

080113c0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b082      	sub	sp, #8
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
 80113c8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80113ca:	4a05      	ldr	r2, [pc, #20]	; (80113e0 <etharp_request+0x20>)
 80113cc:	6839      	ldr	r1, [r7, #0]
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f7ff ffd4 	bl	801137c <etharp_request_dst>
 80113d4:	4603      	mov	r3, r0
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3708      	adds	r7, #8
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}
 80113de:	bf00      	nop
 80113e0:	08016628 	.word	0x08016628

080113e4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b08e      	sub	sp, #56	; 0x38
 80113e8:	af04      	add	r7, sp, #16
 80113ea:	6078      	str	r0, [r7, #4]
 80113ec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80113ee:	4b79      	ldr	r3, [pc, #484]	; (80115d4 <icmp_input+0x1f0>)
 80113f0:	689b      	ldr	r3, [r3, #8]
 80113f2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80113f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	f003 030f 	and.w	r3, r3, #15
 80113fc:	b2db      	uxtb	r3, r3
 80113fe:	009b      	lsls	r3, r3, #2
 8011400:	b2db      	uxtb	r3, r3
 8011402:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011404:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011406:	2b13      	cmp	r3, #19
 8011408:	f240 80cd 	bls.w	80115a6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	895b      	ldrh	r3, [r3, #10]
 8011410:	2b03      	cmp	r3, #3
 8011412:	f240 80ca 	bls.w	80115aa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	685b      	ldr	r3, [r3, #4]
 801141a:	781b      	ldrb	r3, [r3, #0]
 801141c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011420:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011424:	2b00      	cmp	r3, #0
 8011426:	f000 80b7 	beq.w	8011598 <icmp_input+0x1b4>
 801142a:	2b08      	cmp	r3, #8
 801142c:	f040 80b7 	bne.w	801159e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011430:	4b69      	ldr	r3, [pc, #420]	; (80115d8 <icmp_input+0x1f4>)
 8011432:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011434:	4b67      	ldr	r3, [pc, #412]	; (80115d4 <icmp_input+0x1f0>)
 8011436:	695b      	ldr	r3, [r3, #20]
 8011438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801143c:	2be0      	cmp	r3, #224	; 0xe0
 801143e:	f000 80bb 	beq.w	80115b8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011442:	4b64      	ldr	r3, [pc, #400]	; (80115d4 <icmp_input+0x1f0>)
 8011444:	695a      	ldr	r2, [r3, #20]
 8011446:	4b63      	ldr	r3, [pc, #396]	; (80115d4 <icmp_input+0x1f0>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	4619      	mov	r1, r3
 801144c:	4610      	mov	r0, r2
 801144e:	f000 fbeb 	bl	8011c28 <ip4_addr_isbroadcast_u32>
 8011452:	4603      	mov	r3, r0
 8011454:	2b00      	cmp	r3, #0
 8011456:	f040 80b1 	bne.w	80115bc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	891b      	ldrh	r3, [r3, #8]
 801145e:	2b07      	cmp	r3, #7
 8011460:	f240 80a5 	bls.w	80115ae <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011464:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011466:	330e      	adds	r3, #14
 8011468:	4619      	mov	r1, r3
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f7f7 fe2a 	bl	80090c4 <pbuf_add_header>
 8011470:	4603      	mov	r3, r0
 8011472:	2b00      	cmp	r3, #0
 8011474:	d04b      	beq.n	801150e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	891a      	ldrh	r2, [r3, #8]
 801147a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801147c:	4413      	add	r3, r2
 801147e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	891b      	ldrh	r3, [r3, #8]
 8011484:	8b7a      	ldrh	r2, [r7, #26]
 8011486:	429a      	cmp	r2, r3
 8011488:	f0c0 809a 	bcc.w	80115c0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801148c:	8b7b      	ldrh	r3, [r7, #26]
 801148e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011492:	4619      	mov	r1, r3
 8011494:	200e      	movs	r0, #14
 8011496:	f7f7 fbcb 	bl	8008c30 <pbuf_alloc>
 801149a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	f000 8090 	beq.w	80115c4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	895b      	ldrh	r3, [r3, #10]
 80114a8:	461a      	mov	r2, r3
 80114aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80114ac:	3308      	adds	r3, #8
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d203      	bcs.n	80114ba <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80114b2:	6978      	ldr	r0, [r7, #20]
 80114b4:	f7f7 fe9c 	bl	80091f0 <pbuf_free>
          goto icmperr;
 80114b8:	e085      	b.n	80115c6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80114c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114c2:	4618      	mov	r0, r3
 80114c4:	f001 fb2f 	bl	8012b26 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80114c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80114ca:	4619      	mov	r1, r3
 80114cc:	6978      	ldr	r0, [r7, #20]
 80114ce:	f7f7 fe09 	bl	80090e4 <pbuf_remove_header>
 80114d2:	4603      	mov	r3, r0
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d009      	beq.n	80114ec <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80114d8:	4b40      	ldr	r3, [pc, #256]	; (80115dc <icmp_input+0x1f8>)
 80114da:	22b6      	movs	r2, #182	; 0xb6
 80114dc:	4940      	ldr	r1, [pc, #256]	; (80115e0 <icmp_input+0x1fc>)
 80114de:	4841      	ldr	r0, [pc, #260]	; (80115e4 <icmp_input+0x200>)
 80114e0:	f001 fb34 	bl	8012b4c <iprintf>
          pbuf_free(r);
 80114e4:	6978      	ldr	r0, [r7, #20]
 80114e6:	f7f7 fe83 	bl	80091f0 <pbuf_free>
          goto icmperr;
 80114ea:	e06c      	b.n	80115c6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80114ec:	6879      	ldr	r1, [r7, #4]
 80114ee:	6978      	ldr	r0, [r7, #20]
 80114f0:	f7f7 ffa6 	bl	8009440 <pbuf_copy>
 80114f4:	4603      	mov	r3, r0
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d003      	beq.n	8011502 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80114fa:	6978      	ldr	r0, [r7, #20]
 80114fc:	f7f7 fe78 	bl	80091f0 <pbuf_free>
          goto icmperr;
 8011500:	e061      	b.n	80115c6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	f7f7 fe74 	bl	80091f0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	607b      	str	r3, [r7, #4]
 801150c:	e00f      	b.n	801152e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801150e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011510:	330e      	adds	r3, #14
 8011512:	4619      	mov	r1, r3
 8011514:	6878      	ldr	r0, [r7, #4]
 8011516:	f7f7 fde5 	bl	80090e4 <pbuf_remove_header>
 801151a:	4603      	mov	r3, r0
 801151c:	2b00      	cmp	r3, #0
 801151e:	d006      	beq.n	801152e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011520:	4b2e      	ldr	r3, [pc, #184]	; (80115dc <icmp_input+0x1f8>)
 8011522:	22c7      	movs	r2, #199	; 0xc7
 8011524:	4930      	ldr	r1, [pc, #192]	; (80115e8 <icmp_input+0x204>)
 8011526:	482f      	ldr	r0, [pc, #188]	; (80115e4 <icmp_input+0x200>)
 8011528:	f001 fb10 	bl	8012b4c <iprintf>
          goto icmperr;
 801152c:	e04b      	b.n	80115c6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011534:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011536:	4619      	mov	r1, r3
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	f7f7 fdc3 	bl	80090c4 <pbuf_add_header>
 801153e:	4603      	mov	r3, r0
 8011540:	2b00      	cmp	r3, #0
 8011542:	d12b      	bne.n	801159c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801154a:	69fb      	ldr	r3, [r7, #28]
 801154c:	681a      	ldr	r2, [r3, #0]
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011552:	4b20      	ldr	r3, [pc, #128]	; (80115d4 <icmp_input+0x1f0>)
 8011554:	691a      	ldr	r2, [r3, #16]
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	2200      	movs	r2, #0
 801155e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	2200      	movs	r2, #0
 8011564:	709a      	strb	r2, [r3, #2]
 8011566:	2200      	movs	r2, #0
 8011568:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	22ff      	movs	r2, #255	; 0xff
 801156e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	2200      	movs	r2, #0
 8011574:	729a      	strb	r2, [r3, #10]
 8011576:	2200      	movs	r2, #0
 8011578:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	9302      	str	r3, [sp, #8]
 801157e:	2301      	movs	r3, #1
 8011580:	9301      	str	r3, [sp, #4]
 8011582:	2300      	movs	r3, #0
 8011584:	9300      	str	r3, [sp, #0]
 8011586:	23ff      	movs	r3, #255	; 0xff
 8011588:	2200      	movs	r2, #0
 801158a:	69f9      	ldr	r1, [r7, #28]
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f000 fa73 	bl	8011a78 <ip4_output_if>
 8011592:	4603      	mov	r3, r0
 8011594:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011596:	e001      	b.n	801159c <icmp_input+0x1b8>
      break;
 8011598:	bf00      	nop
 801159a:	e000      	b.n	801159e <icmp_input+0x1ba>
      break;
 801159c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f7f7 fe26 	bl	80091f0 <pbuf_free>
  return;
 80115a4:	e013      	b.n	80115ce <icmp_input+0x1ea>
    goto lenerr;
 80115a6:	bf00      	nop
 80115a8:	e002      	b.n	80115b0 <icmp_input+0x1cc>
    goto lenerr;
 80115aa:	bf00      	nop
 80115ac:	e000      	b.n	80115b0 <icmp_input+0x1cc>
        goto lenerr;
 80115ae:	bf00      	nop
lenerr:
  pbuf_free(p);
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f7f7 fe1d 	bl	80091f0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80115b6:	e00a      	b.n	80115ce <icmp_input+0x1ea>
        goto icmperr;
 80115b8:	bf00      	nop
 80115ba:	e004      	b.n	80115c6 <icmp_input+0x1e2>
        goto icmperr;
 80115bc:	bf00      	nop
 80115be:	e002      	b.n	80115c6 <icmp_input+0x1e2>
          goto icmperr;
 80115c0:	bf00      	nop
 80115c2:	e000      	b.n	80115c6 <icmp_input+0x1e2>
          goto icmperr;
 80115c4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80115c6:	6878      	ldr	r0, [r7, #4]
 80115c8:	f7f7 fe12 	bl	80091f0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80115cc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80115ce:	3728      	adds	r7, #40	; 0x28
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}
 80115d4:	20008780 	.word	0x20008780
 80115d8:	20008794 	.word	0x20008794
 80115dc:	08016078 	.word	0x08016078
 80115e0:	080160b0 	.word	0x080160b0
 80115e4:	080160e8 	.word	0x080160e8
 80115e8:	08016110 	.word	0x08016110

080115ec <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b082      	sub	sp, #8
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	460b      	mov	r3, r1
 80115f6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80115f8:	78fb      	ldrb	r3, [r7, #3]
 80115fa:	461a      	mov	r2, r3
 80115fc:	2103      	movs	r1, #3
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f000 f814 	bl	801162c <icmp_send_response>
}
 8011604:	bf00      	nop
 8011606:	3708      	adds	r7, #8
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}

0801160c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
 8011614:	460b      	mov	r3, r1
 8011616:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011618:	78fb      	ldrb	r3, [r7, #3]
 801161a:	461a      	mov	r2, r3
 801161c:	210b      	movs	r1, #11
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f000 f804 	bl	801162c <icmp_send_response>
}
 8011624:	bf00      	nop
 8011626:	3708      	adds	r7, #8
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}

0801162c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b08c      	sub	sp, #48	; 0x30
 8011630:	af04      	add	r7, sp, #16
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	460b      	mov	r3, r1
 8011636:	70fb      	strb	r3, [r7, #3]
 8011638:	4613      	mov	r3, r2
 801163a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801163c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011640:	2124      	movs	r1, #36	; 0x24
 8011642:	2022      	movs	r0, #34	; 0x22
 8011644:	f7f7 faf4 	bl	8008c30 <pbuf_alloc>
 8011648:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801164a:	69fb      	ldr	r3, [r7, #28]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d04c      	beq.n	80116ea <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011650:	69fb      	ldr	r3, [r7, #28]
 8011652:	895b      	ldrh	r3, [r3, #10]
 8011654:	2b23      	cmp	r3, #35	; 0x23
 8011656:	d806      	bhi.n	8011666 <icmp_send_response+0x3a>
 8011658:	4b26      	ldr	r3, [pc, #152]	; (80116f4 <icmp_send_response+0xc8>)
 801165a:	f240 1269 	movw	r2, #361	; 0x169
 801165e:	4926      	ldr	r1, [pc, #152]	; (80116f8 <icmp_send_response+0xcc>)
 8011660:	4826      	ldr	r0, [pc, #152]	; (80116fc <icmp_send_response+0xd0>)
 8011662:	f001 fa73 	bl	8012b4c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	685b      	ldr	r3, [r3, #4]
 801166a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801166c:	69fb      	ldr	r3, [r7, #28]
 801166e:	685b      	ldr	r3, [r3, #4]
 8011670:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	78fa      	ldrb	r2, [r7, #3]
 8011676:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	78ba      	ldrb	r2, [r7, #2]
 801167c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	2200      	movs	r2, #0
 8011682:	711a      	strb	r2, [r3, #4]
 8011684:	2200      	movs	r2, #0
 8011686:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	2200      	movs	r2, #0
 801168c:	719a      	strb	r2, [r3, #6]
 801168e:	2200      	movs	r2, #0
 8011690:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011692:	69fb      	ldr	r3, [r7, #28]
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	f103 0008 	add.w	r0, r3, #8
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	685b      	ldr	r3, [r3, #4]
 801169e:	221c      	movs	r2, #28
 80116a0:	4619      	mov	r1, r3
 80116a2:	f001 fa40 	bl	8012b26 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80116a6:	69bb      	ldr	r3, [r7, #24]
 80116a8:	68db      	ldr	r3, [r3, #12]
 80116aa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80116ac:	f107 030c 	add.w	r3, r7, #12
 80116b0:	4618      	mov	r0, r3
 80116b2:	f000 f825 	bl	8011700 <ip4_route>
 80116b6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80116b8:	693b      	ldr	r3, [r7, #16]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d011      	beq.n	80116e2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80116be:	697b      	ldr	r3, [r7, #20]
 80116c0:	2200      	movs	r2, #0
 80116c2:	709a      	strb	r2, [r3, #2]
 80116c4:	2200      	movs	r2, #0
 80116c6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80116c8:	f107 020c 	add.w	r2, r7, #12
 80116cc:	693b      	ldr	r3, [r7, #16]
 80116ce:	9302      	str	r3, [sp, #8]
 80116d0:	2301      	movs	r3, #1
 80116d2:	9301      	str	r3, [sp, #4]
 80116d4:	2300      	movs	r3, #0
 80116d6:	9300      	str	r3, [sp, #0]
 80116d8:	23ff      	movs	r3, #255	; 0xff
 80116da:	2100      	movs	r1, #0
 80116dc:	69f8      	ldr	r0, [r7, #28]
 80116de:	f000 f9cb 	bl	8011a78 <ip4_output_if>
  }
  pbuf_free(q);
 80116e2:	69f8      	ldr	r0, [r7, #28]
 80116e4:	f7f7 fd84 	bl	80091f0 <pbuf_free>
 80116e8:	e000      	b.n	80116ec <icmp_send_response+0xc0>
    return;
 80116ea:	bf00      	nop
}
 80116ec:	3720      	adds	r7, #32
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}
 80116f2:	bf00      	nop
 80116f4:	08016078 	.word	0x08016078
 80116f8:	08016144 	.word	0x08016144
 80116fc:	080160e8 	.word	0x080160e8

08011700 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011700:	b480      	push	{r7}
 8011702:	b085      	sub	sp, #20
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011708:	4b33      	ldr	r3, [pc, #204]	; (80117d8 <ip4_route+0xd8>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	60fb      	str	r3, [r7, #12]
 801170e:	e036      	b.n	801177e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011716:	f003 0301 	and.w	r3, r3, #1
 801171a:	b2db      	uxtb	r3, r3
 801171c:	2b00      	cmp	r3, #0
 801171e:	d02b      	beq.n	8011778 <ip4_route+0x78>
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011726:	089b      	lsrs	r3, r3, #2
 8011728:	f003 0301 	and.w	r3, r3, #1
 801172c:	b2db      	uxtb	r3, r3
 801172e:	2b00      	cmp	r3, #0
 8011730:	d022      	beq.n	8011778 <ip4_route+0x78>
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	3304      	adds	r3, #4
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d01d      	beq.n	8011778 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681a      	ldr	r2, [r3, #0]
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	3304      	adds	r3, #4
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	405a      	eors	r2, r3
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	3308      	adds	r3, #8
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	4013      	ands	r3, r2
 8011750:	2b00      	cmp	r3, #0
 8011752:	d101      	bne.n	8011758 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	e038      	b.n	80117ca <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801175e:	f003 0302 	and.w	r3, r3, #2
 8011762:	2b00      	cmp	r3, #0
 8011764:	d108      	bne.n	8011778 <ip4_route+0x78>
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681a      	ldr	r2, [r3, #0]
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	330c      	adds	r3, #12
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	429a      	cmp	r2, r3
 8011772:	d101      	bne.n	8011778 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	e028      	b.n	80117ca <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	60fb      	str	r3, [r7, #12]
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d1c5      	bne.n	8011710 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011784:	4b15      	ldr	r3, [pc, #84]	; (80117dc <ip4_route+0xdc>)
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d01a      	beq.n	80117c2 <ip4_route+0xc2>
 801178c:	4b13      	ldr	r3, [pc, #76]	; (80117dc <ip4_route+0xdc>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011794:	f003 0301 	and.w	r3, r3, #1
 8011798:	2b00      	cmp	r3, #0
 801179a:	d012      	beq.n	80117c2 <ip4_route+0xc2>
 801179c:	4b0f      	ldr	r3, [pc, #60]	; (80117dc <ip4_route+0xdc>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80117a4:	f003 0304 	and.w	r3, r3, #4
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d00a      	beq.n	80117c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80117ac:	4b0b      	ldr	r3, [pc, #44]	; (80117dc <ip4_route+0xdc>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	3304      	adds	r3, #4
 80117b2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d004      	beq.n	80117c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	b2db      	uxtb	r3, r3
 80117be:	2b7f      	cmp	r3, #127	; 0x7f
 80117c0:	d101      	bne.n	80117c6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80117c2:	2300      	movs	r3, #0
 80117c4:	e001      	b.n	80117ca <ip4_route+0xca>
  }

  return netif_default;
 80117c6:	4b05      	ldr	r3, [pc, #20]	; (80117dc <ip4_route+0xdc>)
 80117c8:	681b      	ldr	r3, [r3, #0]
}
 80117ca:	4618      	mov	r0, r3
 80117cc:	3714      	adds	r7, #20
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr
 80117d6:	bf00      	nop
 80117d8:	2000bcb4 	.word	0x2000bcb4
 80117dc:	2000bcb8 	.word	0x2000bcb8

080117e0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80117ee:	f003 0301 	and.w	r3, r3, #1
 80117f2:	b2db      	uxtb	r3, r3
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d016      	beq.n	8011826 <ip4_input_accept+0x46>
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	3304      	adds	r3, #4
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d011      	beq.n	8011826 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011802:	4b0b      	ldr	r3, [pc, #44]	; (8011830 <ip4_input_accept+0x50>)
 8011804:	695a      	ldr	r2, [r3, #20]
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	3304      	adds	r3, #4
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	429a      	cmp	r2, r3
 801180e:	d008      	beq.n	8011822 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011810:	4b07      	ldr	r3, [pc, #28]	; (8011830 <ip4_input_accept+0x50>)
 8011812:	695b      	ldr	r3, [r3, #20]
 8011814:	6879      	ldr	r1, [r7, #4]
 8011816:	4618      	mov	r0, r3
 8011818:	f000 fa06 	bl	8011c28 <ip4_addr_isbroadcast_u32>
 801181c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801181e:	2b00      	cmp	r3, #0
 8011820:	d001      	beq.n	8011826 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011822:	2301      	movs	r3, #1
 8011824:	e000      	b.n	8011828 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011826:	2300      	movs	r3, #0
}
 8011828:	4618      	mov	r0, r3
 801182a:	3708      	adds	r7, #8
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}
 8011830:	20008780 	.word	0x20008780

08011834 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b086      	sub	sp, #24
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
 801183c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011844:	697b      	ldr	r3, [r7, #20]
 8011846:	781b      	ldrb	r3, [r3, #0]
 8011848:	091b      	lsrs	r3, r3, #4
 801184a:	b2db      	uxtb	r3, r3
 801184c:	2b04      	cmp	r3, #4
 801184e:	d004      	beq.n	801185a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f7f7 fccd 	bl	80091f0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011856:	2300      	movs	r3, #0
 8011858:	e105      	b.n	8011a66 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	f003 030f 	and.w	r3, r3, #15
 8011862:	b2db      	uxtb	r3, r3
 8011864:	009b      	lsls	r3, r3, #2
 8011866:	b2db      	uxtb	r3, r3
 8011868:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	885b      	ldrh	r3, [r3, #2]
 801186e:	b29b      	uxth	r3, r3
 8011870:	4618      	mov	r0, r3
 8011872:	f7f6 fa0e 	bl	8007c92 <lwip_htons>
 8011876:	4603      	mov	r3, r0
 8011878:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	891b      	ldrh	r3, [r3, #8]
 801187e:	89ba      	ldrh	r2, [r7, #12]
 8011880:	429a      	cmp	r2, r3
 8011882:	d204      	bcs.n	801188e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011884:	89bb      	ldrh	r3, [r7, #12]
 8011886:	4619      	mov	r1, r3
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f7f7 fb2b 	bl	8008ee4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	895b      	ldrh	r3, [r3, #10]
 8011892:	89fa      	ldrh	r2, [r7, #14]
 8011894:	429a      	cmp	r2, r3
 8011896:	d807      	bhi.n	80118a8 <ip4_input+0x74>
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	891b      	ldrh	r3, [r3, #8]
 801189c:	89ba      	ldrh	r2, [r7, #12]
 801189e:	429a      	cmp	r2, r3
 80118a0:	d802      	bhi.n	80118a8 <ip4_input+0x74>
 80118a2:	89fb      	ldrh	r3, [r7, #14]
 80118a4:	2b13      	cmp	r3, #19
 80118a6:	d804      	bhi.n	80118b2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f7f7 fca1 	bl	80091f0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80118ae:	2300      	movs	r3, #0
 80118b0:	e0d9      	b.n	8011a66 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	691b      	ldr	r3, [r3, #16]
 80118b6:	4a6e      	ldr	r2, [pc, #440]	; (8011a70 <ip4_input+0x23c>)
 80118b8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	68db      	ldr	r3, [r3, #12]
 80118be:	4a6c      	ldr	r2, [pc, #432]	; (8011a70 <ip4_input+0x23c>)
 80118c0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80118c2:	4b6b      	ldr	r3, [pc, #428]	; (8011a70 <ip4_input+0x23c>)
 80118c4:	695b      	ldr	r3, [r3, #20]
 80118c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80118ca:	2be0      	cmp	r3, #224	; 0xe0
 80118cc:	d112      	bne.n	80118f4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80118d4:	f003 0301 	and.w	r3, r3, #1
 80118d8:	b2db      	uxtb	r3, r3
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d007      	beq.n	80118ee <ip4_input+0xba>
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	3304      	adds	r3, #4
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d002      	beq.n	80118ee <ip4_input+0xba>
      netif = inp;
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	613b      	str	r3, [r7, #16]
 80118ec:	e02a      	b.n	8011944 <ip4_input+0x110>
    } else {
      netif = NULL;
 80118ee:	2300      	movs	r3, #0
 80118f0:	613b      	str	r3, [r7, #16]
 80118f2:	e027      	b.n	8011944 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80118f4:	6838      	ldr	r0, [r7, #0]
 80118f6:	f7ff ff73 	bl	80117e0 <ip4_input_accept>
 80118fa:	4603      	mov	r3, r0
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d002      	beq.n	8011906 <ip4_input+0xd2>
      netif = inp;
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	613b      	str	r3, [r7, #16]
 8011904:	e01e      	b.n	8011944 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011906:	2300      	movs	r3, #0
 8011908:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801190a:	4b59      	ldr	r3, [pc, #356]	; (8011a70 <ip4_input+0x23c>)
 801190c:	695b      	ldr	r3, [r3, #20]
 801190e:	b2db      	uxtb	r3, r3
 8011910:	2b7f      	cmp	r3, #127	; 0x7f
 8011912:	d017      	beq.n	8011944 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011914:	4b57      	ldr	r3, [pc, #348]	; (8011a74 <ip4_input+0x240>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	613b      	str	r3, [r7, #16]
 801191a:	e00e      	b.n	801193a <ip4_input+0x106>
          if (netif == inp) {
 801191c:	693a      	ldr	r2, [r7, #16]
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	429a      	cmp	r2, r3
 8011922:	d006      	beq.n	8011932 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011924:	6938      	ldr	r0, [r7, #16]
 8011926:	f7ff ff5b 	bl	80117e0 <ip4_input_accept>
 801192a:	4603      	mov	r3, r0
 801192c:	2b00      	cmp	r3, #0
 801192e:	d108      	bne.n	8011942 <ip4_input+0x10e>
 8011930:	e000      	b.n	8011934 <ip4_input+0x100>
            continue;
 8011932:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	613b      	str	r3, [r7, #16]
 801193a:	693b      	ldr	r3, [r7, #16]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d1ed      	bne.n	801191c <ip4_input+0xe8>
 8011940:	e000      	b.n	8011944 <ip4_input+0x110>
            break;
 8011942:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011944:	4b4a      	ldr	r3, [pc, #296]	; (8011a70 <ip4_input+0x23c>)
 8011946:	691b      	ldr	r3, [r3, #16]
 8011948:	6839      	ldr	r1, [r7, #0]
 801194a:	4618      	mov	r0, r3
 801194c:	f000 f96c 	bl	8011c28 <ip4_addr_isbroadcast_u32>
 8011950:	4603      	mov	r3, r0
 8011952:	2b00      	cmp	r3, #0
 8011954:	d105      	bne.n	8011962 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011956:	4b46      	ldr	r3, [pc, #280]	; (8011a70 <ip4_input+0x23c>)
 8011958:	691b      	ldr	r3, [r3, #16]
 801195a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801195e:	2be0      	cmp	r3, #224	; 0xe0
 8011960:	d104      	bne.n	801196c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011962:	6878      	ldr	r0, [r7, #4]
 8011964:	f7f7 fc44 	bl	80091f0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011968:	2300      	movs	r3, #0
 801196a:	e07c      	b.n	8011a66 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801196c:	693b      	ldr	r3, [r7, #16]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d104      	bne.n	801197c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f7f7 fc3c 	bl	80091f0 <pbuf_free>
    return ERR_OK;
 8011978:	2300      	movs	r3, #0
 801197a:	e074      	b.n	8011a66 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	88db      	ldrh	r3, [r3, #6]
 8011980:	b29b      	uxth	r3, r3
 8011982:	461a      	mov	r2, r3
 8011984:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011988:	4013      	ands	r3, r2
 801198a:	2b00      	cmp	r3, #0
 801198c:	d00b      	beq.n	80119a6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f000 fc90 	bl	80122b4 <ip4_reass>
 8011994:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d101      	bne.n	80119a0 <ip4_input+0x16c>
      return ERR_OK;
 801199c:	2300      	movs	r3, #0
 801199e:	e062      	b.n	8011a66 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	685b      	ldr	r3, [r3, #4]
 80119a4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80119a6:	4a32      	ldr	r2, [pc, #200]	; (8011a70 <ip4_input+0x23c>)
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80119ac:	4a30      	ldr	r2, [pc, #192]	; (8011a70 <ip4_input+0x23c>)
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80119b2:	4a2f      	ldr	r2, [pc, #188]	; (8011a70 <ip4_input+0x23c>)
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	781b      	ldrb	r3, [r3, #0]
 80119bc:	f003 030f 	and.w	r3, r3, #15
 80119c0:	b2db      	uxtb	r3, r3
 80119c2:	009b      	lsls	r3, r3, #2
 80119c4:	b2db      	uxtb	r3, r3
 80119c6:	b29a      	uxth	r2, r3
 80119c8:	4b29      	ldr	r3, [pc, #164]	; (8011a70 <ip4_input+0x23c>)
 80119ca:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80119cc:	89fb      	ldrh	r3, [r7, #14]
 80119ce:	4619      	mov	r1, r3
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f7f7 fb87 	bl	80090e4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80119d6:	697b      	ldr	r3, [r7, #20]
 80119d8:	7a5b      	ldrb	r3, [r3, #9]
 80119da:	2b06      	cmp	r3, #6
 80119dc:	d009      	beq.n	80119f2 <ip4_input+0x1be>
 80119de:	2b11      	cmp	r3, #17
 80119e0:	d002      	beq.n	80119e8 <ip4_input+0x1b4>
 80119e2:	2b01      	cmp	r3, #1
 80119e4:	d00a      	beq.n	80119fc <ip4_input+0x1c8>
 80119e6:	e00e      	b.n	8011a06 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80119e8:	6839      	ldr	r1, [r7, #0]
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f7fe f8e8 	bl	800fbc0 <udp_input>
        break;
 80119f0:	e026      	b.n	8011a40 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80119f2:	6839      	ldr	r1, [r7, #0]
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	f7f9 fcc7 	bl	800b388 <tcp_input>
        break;
 80119fa:	e021      	b.n	8011a40 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80119fc:	6839      	ldr	r1, [r7, #0]
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f7ff fcf0 	bl	80113e4 <icmp_input>
        break;
 8011a04:	e01c      	b.n	8011a40 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011a06:	4b1a      	ldr	r3, [pc, #104]	; (8011a70 <ip4_input+0x23c>)
 8011a08:	695b      	ldr	r3, [r3, #20]
 8011a0a:	6939      	ldr	r1, [r7, #16]
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f000 f90b 	bl	8011c28 <ip4_addr_isbroadcast_u32>
 8011a12:	4603      	mov	r3, r0
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d10f      	bne.n	8011a38 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011a18:	4b15      	ldr	r3, [pc, #84]	; (8011a70 <ip4_input+0x23c>)
 8011a1a:	695b      	ldr	r3, [r3, #20]
 8011a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011a20:	2be0      	cmp	r3, #224	; 0xe0
 8011a22:	d009      	beq.n	8011a38 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011a24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011a28:	4619      	mov	r1, r3
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	f7f7 fbcd 	bl	80091ca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011a30:	2102      	movs	r1, #2
 8011a32:	6878      	ldr	r0, [r7, #4]
 8011a34:	f7ff fdda 	bl	80115ec <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f7f7 fbd9 	bl	80091f0 <pbuf_free>
        break;
 8011a3e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011a40:	4b0b      	ldr	r3, [pc, #44]	; (8011a70 <ip4_input+0x23c>)
 8011a42:	2200      	movs	r2, #0
 8011a44:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011a46:	4b0a      	ldr	r3, [pc, #40]	; (8011a70 <ip4_input+0x23c>)
 8011a48:	2200      	movs	r2, #0
 8011a4a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011a4c:	4b08      	ldr	r3, [pc, #32]	; (8011a70 <ip4_input+0x23c>)
 8011a4e:	2200      	movs	r2, #0
 8011a50:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011a52:	4b07      	ldr	r3, [pc, #28]	; (8011a70 <ip4_input+0x23c>)
 8011a54:	2200      	movs	r2, #0
 8011a56:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011a58:	4b05      	ldr	r3, [pc, #20]	; (8011a70 <ip4_input+0x23c>)
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011a5e:	4b04      	ldr	r3, [pc, #16]	; (8011a70 <ip4_input+0x23c>)
 8011a60:	2200      	movs	r2, #0
 8011a62:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011a64:	2300      	movs	r3, #0
}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3718      	adds	r7, #24
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}
 8011a6e:	bf00      	nop
 8011a70:	20008780 	.word	0x20008780
 8011a74:	2000bcb4 	.word	0x2000bcb4

08011a78 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b08a      	sub	sp, #40	; 0x28
 8011a7c:	af04      	add	r7, sp, #16
 8011a7e:	60f8      	str	r0, [r7, #12]
 8011a80:	60b9      	str	r1, [r7, #8]
 8011a82:	607a      	str	r2, [r7, #4]
 8011a84:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d009      	beq.n	8011aa4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d003      	beq.n	8011a9e <ip4_output_if+0x26>
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d102      	bne.n	8011aa4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aa0:	3304      	adds	r3, #4
 8011aa2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011aa4:	78fa      	ldrb	r2, [r7, #3]
 8011aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aa8:	9302      	str	r3, [sp, #8]
 8011aaa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011aae:	9301      	str	r3, [sp, #4]
 8011ab0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011ab4:	9300      	str	r3, [sp, #0]
 8011ab6:	4613      	mov	r3, r2
 8011ab8:	687a      	ldr	r2, [r7, #4]
 8011aba:	6979      	ldr	r1, [r7, #20]
 8011abc:	68f8      	ldr	r0, [r7, #12]
 8011abe:	f000 f805 	bl	8011acc <ip4_output_if_src>
 8011ac2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3718      	adds	r7, #24
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}

08011acc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b088      	sub	sp, #32
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	60f8      	str	r0, [r7, #12]
 8011ad4:	60b9      	str	r1, [r7, #8]
 8011ad6:	607a      	str	r2, [r7, #4]
 8011ad8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	7b9b      	ldrb	r3, [r3, #14]
 8011ade:	2b01      	cmp	r3, #1
 8011ae0:	d006      	beq.n	8011af0 <ip4_output_if_src+0x24>
 8011ae2:	4b4b      	ldr	r3, [pc, #300]	; (8011c10 <ip4_output_if_src+0x144>)
 8011ae4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011ae8:	494a      	ldr	r1, [pc, #296]	; (8011c14 <ip4_output_if_src+0x148>)
 8011aea:	484b      	ldr	r0, [pc, #300]	; (8011c18 <ip4_output_if_src+0x14c>)
 8011aec:	f001 f82e 	bl	8012b4c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d060      	beq.n	8011bb8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011af6:	2314      	movs	r3, #20
 8011af8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011afa:	2114      	movs	r1, #20
 8011afc:	68f8      	ldr	r0, [r7, #12]
 8011afe:	f7f7 fae1 	bl	80090c4 <pbuf_add_header>
 8011b02:	4603      	mov	r3, r0
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d002      	beq.n	8011b0e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011b08:	f06f 0301 	mvn.w	r3, #1
 8011b0c:	e07c      	b.n	8011c08 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	685b      	ldr	r3, [r3, #4]
 8011b12:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	895b      	ldrh	r3, [r3, #10]
 8011b18:	2b13      	cmp	r3, #19
 8011b1a:	d806      	bhi.n	8011b2a <ip4_output_if_src+0x5e>
 8011b1c:	4b3c      	ldr	r3, [pc, #240]	; (8011c10 <ip4_output_if_src+0x144>)
 8011b1e:	f240 3289 	movw	r2, #905	; 0x389
 8011b22:	493e      	ldr	r1, [pc, #248]	; (8011c1c <ip4_output_if_src+0x150>)
 8011b24:	483c      	ldr	r0, [pc, #240]	; (8011c18 <ip4_output_if_src+0x14c>)
 8011b26:	f001 f811 	bl	8012b4c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011b2a:	69fb      	ldr	r3, [r7, #28]
 8011b2c:	78fa      	ldrb	r2, [r7, #3]
 8011b2e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011b30:	69fb      	ldr	r3, [r7, #28]
 8011b32:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011b36:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681a      	ldr	r2, [r3, #0]
 8011b3c:	69fb      	ldr	r3, [r7, #28]
 8011b3e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011b40:	8b7b      	ldrh	r3, [r7, #26]
 8011b42:	089b      	lsrs	r3, r3, #2
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b4c:	b2da      	uxtb	r2, r3
 8011b4e:	69fb      	ldr	r3, [r7, #28]
 8011b50:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011b52:	69fb      	ldr	r3, [r7, #28]
 8011b54:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011b58:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	891b      	ldrh	r3, [r3, #8]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7f6 f897 	bl	8007c92 <lwip_htons>
 8011b64:	4603      	mov	r3, r0
 8011b66:	461a      	mov	r2, r3
 8011b68:	69fb      	ldr	r3, [r7, #28]
 8011b6a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011b6c:	69fb      	ldr	r3, [r7, #28]
 8011b6e:	2200      	movs	r2, #0
 8011b70:	719a      	strb	r2, [r3, #6]
 8011b72:	2200      	movs	r2, #0
 8011b74:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011b76:	4b2a      	ldr	r3, [pc, #168]	; (8011c20 <ip4_output_if_src+0x154>)
 8011b78:	881b      	ldrh	r3, [r3, #0]
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f7f6 f889 	bl	8007c92 <lwip_htons>
 8011b80:	4603      	mov	r3, r0
 8011b82:	461a      	mov	r2, r3
 8011b84:	69fb      	ldr	r3, [r7, #28]
 8011b86:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011b88:	4b25      	ldr	r3, [pc, #148]	; (8011c20 <ip4_output_if_src+0x154>)
 8011b8a:	881b      	ldrh	r3, [r3, #0]
 8011b8c:	3301      	adds	r3, #1
 8011b8e:	b29a      	uxth	r2, r3
 8011b90:	4b23      	ldr	r3, [pc, #140]	; (8011c20 <ip4_output_if_src+0x154>)
 8011b92:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d104      	bne.n	8011ba4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011b9a:	4b22      	ldr	r3, [pc, #136]	; (8011c24 <ip4_output_if_src+0x158>)
 8011b9c:	681a      	ldr	r2, [r3, #0]
 8011b9e:	69fb      	ldr	r3, [r7, #28]
 8011ba0:	60da      	str	r2, [r3, #12]
 8011ba2:	e003      	b.n	8011bac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	681a      	ldr	r2, [r3, #0]
 8011ba8:	69fb      	ldr	r3, [r7, #28]
 8011baa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011bac:	69fb      	ldr	r3, [r7, #28]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	729a      	strb	r2, [r3, #10]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	72da      	strb	r2, [r3, #11]
 8011bb6:	e00f      	b.n	8011bd8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	895b      	ldrh	r3, [r3, #10]
 8011bbc:	2b13      	cmp	r3, #19
 8011bbe:	d802      	bhi.n	8011bc6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011bc0:	f06f 0301 	mvn.w	r3, #1
 8011bc4:	e020      	b.n	8011c08 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011bcc:	69fb      	ldr	r3, [r7, #28]
 8011bce:	691b      	ldr	r3, [r3, #16]
 8011bd0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011bd2:	f107 0314 	add.w	r3, r7, #20
 8011bd6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d00c      	beq.n	8011bfa <ip4_output_if_src+0x12e>
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	891a      	ldrh	r2, [r3, #8]
 8011be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d906      	bls.n	8011bfa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011bec:	687a      	ldr	r2, [r7, #4]
 8011bee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011bf0:	68f8      	ldr	r0, [r7, #12]
 8011bf2:	f000 fd4b 	bl	801268c <ip4_frag>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	e006      	b.n	8011c08 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bfc:	695b      	ldr	r3, [r3, #20]
 8011bfe:	687a      	ldr	r2, [r7, #4]
 8011c00:	68f9      	ldr	r1, [r7, #12]
 8011c02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c04:	4798      	blx	r3
 8011c06:	4603      	mov	r3, r0
}
 8011c08:	4618      	mov	r0, r3
 8011c0a:	3720      	adds	r7, #32
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	bd80      	pop	{r7, pc}
 8011c10:	08016170 	.word	0x08016170
 8011c14:	080161a4 	.word	0x080161a4
 8011c18:	080161b0 	.word	0x080161b0
 8011c1c:	080161d8 	.word	0x080161d8
 8011c20:	20000276 	.word	0x20000276
 8011c24:	08016624 	.word	0x08016624

08011c28 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011c28:	b480      	push	{r7}
 8011c2a:	b085      	sub	sp, #20
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
 8011c30:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c3c:	d002      	beq.n	8011c44 <ip4_addr_isbroadcast_u32+0x1c>
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d101      	bne.n	8011c48 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011c44:	2301      	movs	r3, #1
 8011c46:	e02a      	b.n	8011c9e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c4e:	f003 0302 	and.w	r3, r3, #2
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d101      	bne.n	8011c5a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011c56:	2300      	movs	r3, #0
 8011c58:	e021      	b.n	8011c9e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	3304      	adds	r3, #4
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d101      	bne.n	8011c6a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011c66:	2300      	movs	r3, #0
 8011c68:	e019      	b.n	8011c9e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011c6a:	68fa      	ldr	r2, [r7, #12]
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	3304      	adds	r3, #4
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	405a      	eors	r2, r3
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	3308      	adds	r3, #8
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	4013      	ands	r3, r2
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d10d      	bne.n	8011c9c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	3308      	adds	r3, #8
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	43da      	mvns	r2, r3
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	3308      	adds	r3, #8
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d101      	bne.n	8011c9c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011c98:	2301      	movs	r3, #1
 8011c9a:	e000      	b.n	8011c9e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011c9c:	2300      	movs	r3, #0
  }
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3714      	adds	r7, #20
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca8:	4770      	bx	lr
	...

08011cac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b084      	sub	sp, #16
 8011cb0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011cb6:	4b12      	ldr	r3, [pc, #72]	; (8011d00 <ip_reass_tmr+0x54>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011cbc:	e018      	b.n	8011cf0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	7fdb      	ldrb	r3, [r3, #31]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d00b      	beq.n	8011cde <ip_reass_tmr+0x32>
      r->timer--;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	7fdb      	ldrb	r3, [r3, #31]
 8011cca:	3b01      	subs	r3, #1
 8011ccc:	b2da      	uxtb	r2, r3
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	60fb      	str	r3, [r7, #12]
 8011cdc:	e008      	b.n	8011cf0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011ce8:	68b9      	ldr	r1, [r7, #8]
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	f000 f80a 	bl	8011d04 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d1e3      	bne.n	8011cbe <ip_reass_tmr+0x12>
    }
  }
}
 8011cf6:	bf00      	nop
 8011cf8:	3710      	adds	r7, #16
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}
 8011cfe:	bf00      	nop
 8011d00:	20000278 	.word	0x20000278

08011d04 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b088      	sub	sp, #32
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011d12:	683a      	ldr	r2, [r7, #0]
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	429a      	cmp	r2, r3
 8011d18:	d105      	bne.n	8011d26 <ip_reass_free_complete_datagram+0x22>
 8011d1a:	4b45      	ldr	r3, [pc, #276]	; (8011e30 <ip_reass_free_complete_datagram+0x12c>)
 8011d1c:	22ab      	movs	r2, #171	; 0xab
 8011d1e:	4945      	ldr	r1, [pc, #276]	; (8011e34 <ip_reass_free_complete_datagram+0x130>)
 8011d20:	4845      	ldr	r0, [pc, #276]	; (8011e38 <ip_reass_free_complete_datagram+0x134>)
 8011d22:	f000 ff13 	bl	8012b4c <iprintf>
  if (prev != NULL) {
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d00a      	beq.n	8011d42 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	687a      	ldr	r2, [r7, #4]
 8011d32:	429a      	cmp	r2, r3
 8011d34:	d005      	beq.n	8011d42 <ip_reass_free_complete_datagram+0x3e>
 8011d36:	4b3e      	ldr	r3, [pc, #248]	; (8011e30 <ip_reass_free_complete_datagram+0x12c>)
 8011d38:	22ad      	movs	r2, #173	; 0xad
 8011d3a:	4940      	ldr	r1, [pc, #256]	; (8011e3c <ip_reass_free_complete_datagram+0x138>)
 8011d3c:	483e      	ldr	r0, [pc, #248]	; (8011e38 <ip_reass_free_complete_datagram+0x134>)
 8011d3e:	f000 ff05 	bl	8012b4c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	685b      	ldr	r3, [r3, #4]
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	889b      	ldrh	r3, [r3, #4]
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d12a      	bne.n	8011daa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011d5a:	697b      	ldr	r3, [r7, #20]
 8011d5c:	681a      	ldr	r2, [r3, #0]
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	6858      	ldr	r0, [r3, #4]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	3308      	adds	r3, #8
 8011d6a:	2214      	movs	r2, #20
 8011d6c:	4619      	mov	r1, r3
 8011d6e:	f000 feda 	bl	8012b26 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011d72:	2101      	movs	r1, #1
 8011d74:	69b8      	ldr	r0, [r7, #24]
 8011d76:	f7ff fc49 	bl	801160c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011d7a:	69b8      	ldr	r0, [r7, #24]
 8011d7c:	f7f7 fac0 	bl	8009300 <pbuf_clen>
 8011d80:	4603      	mov	r3, r0
 8011d82:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011d84:	8bfa      	ldrh	r2, [r7, #30]
 8011d86:	8a7b      	ldrh	r3, [r7, #18]
 8011d88:	4413      	add	r3, r2
 8011d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d8e:	db05      	blt.n	8011d9c <ip_reass_free_complete_datagram+0x98>
 8011d90:	4b27      	ldr	r3, [pc, #156]	; (8011e30 <ip_reass_free_complete_datagram+0x12c>)
 8011d92:	22bc      	movs	r2, #188	; 0xbc
 8011d94:	492a      	ldr	r1, [pc, #168]	; (8011e40 <ip_reass_free_complete_datagram+0x13c>)
 8011d96:	4828      	ldr	r0, [pc, #160]	; (8011e38 <ip_reass_free_complete_datagram+0x134>)
 8011d98:	f000 fed8 	bl	8012b4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011d9c:	8bfa      	ldrh	r2, [r7, #30]
 8011d9e:	8a7b      	ldrh	r3, [r7, #18]
 8011da0:	4413      	add	r3, r2
 8011da2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011da4:	69b8      	ldr	r0, [r7, #24]
 8011da6:	f7f7 fa23 	bl	80091f0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	685b      	ldr	r3, [r3, #4]
 8011dae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011db0:	e01f      	b.n	8011df2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011db2:	69bb      	ldr	r3, [r7, #24]
 8011db4:	685b      	ldr	r3, [r3, #4]
 8011db6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011db8:	69bb      	ldr	r3, [r7, #24]
 8011dba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011dbc:	697b      	ldr	r3, [r7, #20]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011dc2:	68f8      	ldr	r0, [r7, #12]
 8011dc4:	f7f7 fa9c 	bl	8009300 <pbuf_clen>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011dcc:	8bfa      	ldrh	r2, [r7, #30]
 8011dce:	8a7b      	ldrh	r3, [r7, #18]
 8011dd0:	4413      	add	r3, r2
 8011dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011dd6:	db05      	blt.n	8011de4 <ip_reass_free_complete_datagram+0xe0>
 8011dd8:	4b15      	ldr	r3, [pc, #84]	; (8011e30 <ip_reass_free_complete_datagram+0x12c>)
 8011dda:	22cc      	movs	r2, #204	; 0xcc
 8011ddc:	4918      	ldr	r1, [pc, #96]	; (8011e40 <ip_reass_free_complete_datagram+0x13c>)
 8011dde:	4816      	ldr	r0, [pc, #88]	; (8011e38 <ip_reass_free_complete_datagram+0x134>)
 8011de0:	f000 feb4 	bl	8012b4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011de4:	8bfa      	ldrh	r2, [r7, #30]
 8011de6:	8a7b      	ldrh	r3, [r7, #18]
 8011de8:	4413      	add	r3, r2
 8011dea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011dec:	68f8      	ldr	r0, [r7, #12]
 8011dee:	f7f7 f9ff 	bl	80091f0 <pbuf_free>
  while (p != NULL) {
 8011df2:	69bb      	ldr	r3, [r7, #24]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d1dc      	bne.n	8011db2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011df8:	6839      	ldr	r1, [r7, #0]
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f000 f8c2 	bl	8011f84 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011e00:	4b10      	ldr	r3, [pc, #64]	; (8011e44 <ip_reass_free_complete_datagram+0x140>)
 8011e02:	881b      	ldrh	r3, [r3, #0]
 8011e04:	8bfa      	ldrh	r2, [r7, #30]
 8011e06:	429a      	cmp	r2, r3
 8011e08:	d905      	bls.n	8011e16 <ip_reass_free_complete_datagram+0x112>
 8011e0a:	4b09      	ldr	r3, [pc, #36]	; (8011e30 <ip_reass_free_complete_datagram+0x12c>)
 8011e0c:	22d2      	movs	r2, #210	; 0xd2
 8011e0e:	490e      	ldr	r1, [pc, #56]	; (8011e48 <ip_reass_free_complete_datagram+0x144>)
 8011e10:	4809      	ldr	r0, [pc, #36]	; (8011e38 <ip_reass_free_complete_datagram+0x134>)
 8011e12:	f000 fe9b 	bl	8012b4c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011e16:	4b0b      	ldr	r3, [pc, #44]	; (8011e44 <ip_reass_free_complete_datagram+0x140>)
 8011e18:	881a      	ldrh	r2, [r3, #0]
 8011e1a:	8bfb      	ldrh	r3, [r7, #30]
 8011e1c:	1ad3      	subs	r3, r2, r3
 8011e1e:	b29a      	uxth	r2, r3
 8011e20:	4b08      	ldr	r3, [pc, #32]	; (8011e44 <ip_reass_free_complete_datagram+0x140>)
 8011e22:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011e24:	8bfb      	ldrh	r3, [r7, #30]
}
 8011e26:	4618      	mov	r0, r3
 8011e28:	3720      	adds	r7, #32
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	bd80      	pop	{r7, pc}
 8011e2e:	bf00      	nop
 8011e30:	08016208 	.word	0x08016208
 8011e34:	08016244 	.word	0x08016244
 8011e38:	08016250 	.word	0x08016250
 8011e3c:	08016278 	.word	0x08016278
 8011e40:	0801628c 	.word	0x0801628c
 8011e44:	2000027c 	.word	0x2000027c
 8011e48:	080162ac 	.word	0x080162ac

08011e4c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b08a      	sub	sp, #40	; 0x28
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011e56:	2300      	movs	r3, #0
 8011e58:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011e62:	2300      	movs	r3, #0
 8011e64:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011e66:	2300      	movs	r3, #0
 8011e68:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011e6a:	4b28      	ldr	r3, [pc, #160]	; (8011f0c <ip_reass_remove_oldest_datagram+0xc0>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011e70:	e030      	b.n	8011ed4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e74:	695a      	ldr	r2, [r3, #20]
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	68db      	ldr	r3, [r3, #12]
 8011e7a:	429a      	cmp	r2, r3
 8011e7c:	d10c      	bne.n	8011e98 <ip_reass_remove_oldest_datagram+0x4c>
 8011e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e80:	699a      	ldr	r2, [r3, #24]
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	691b      	ldr	r3, [r3, #16]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d106      	bne.n	8011e98 <ip_reass_remove_oldest_datagram+0x4c>
 8011e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e8c:	899a      	ldrh	r2, [r3, #12]
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	889b      	ldrh	r3, [r3, #4]
 8011e92:	b29b      	uxth	r3, r3
 8011e94:	429a      	cmp	r2, r3
 8011e96:	d014      	beq.n	8011ec2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011e9e:	6a3b      	ldr	r3, [r7, #32]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d104      	bne.n	8011eae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011ea8:	69fb      	ldr	r3, [r7, #28]
 8011eaa:	61bb      	str	r3, [r7, #24]
 8011eac:	e009      	b.n	8011ec2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb0:	7fda      	ldrb	r2, [r3, #31]
 8011eb2:	6a3b      	ldr	r3, [r7, #32]
 8011eb4:	7fdb      	ldrb	r3, [r3, #31]
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	d803      	bhi.n	8011ec2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ebc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011ebe:	69fb      	ldr	r3, [r7, #28]
 8011ec0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d001      	beq.n	8011ece <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ecc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d1cb      	bne.n	8011e72 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011eda:	6a3b      	ldr	r3, [r7, #32]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d008      	beq.n	8011ef2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011ee0:	69b9      	ldr	r1, [r7, #24]
 8011ee2:	6a38      	ldr	r0, [r7, #32]
 8011ee4:	f7ff ff0e 	bl	8011d04 <ip_reass_free_complete_datagram>
 8011ee8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011eea:	697a      	ldr	r2, [r7, #20]
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	4413      	add	r3, r2
 8011ef0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011ef2:	697a      	ldr	r2, [r7, #20]
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	da02      	bge.n	8011f00 <ip_reass_remove_oldest_datagram+0xb4>
 8011efa:	693b      	ldr	r3, [r7, #16]
 8011efc:	2b01      	cmp	r3, #1
 8011efe:	dcac      	bgt.n	8011e5a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011f00:	697b      	ldr	r3, [r7, #20]
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3728      	adds	r7, #40	; 0x28
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	20000278 	.word	0x20000278

08011f10 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b084      	sub	sp, #16
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011f1a:	2004      	movs	r0, #4
 8011f1c:	f7f6 fb0e 	bl	800853c <memp_malloc>
 8011f20:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d110      	bne.n	8011f4a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011f28:	6839      	ldr	r1, [r7, #0]
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f7ff ff8e 	bl	8011e4c <ip_reass_remove_oldest_datagram>
 8011f30:	4602      	mov	r2, r0
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	4293      	cmp	r3, r2
 8011f36:	dc03      	bgt.n	8011f40 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011f38:	2004      	movs	r0, #4
 8011f3a:	f7f6 faff 	bl	800853c <memp_malloc>
 8011f3e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d101      	bne.n	8011f4a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011f46:	2300      	movs	r3, #0
 8011f48:	e016      	b.n	8011f78 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011f4a:	2220      	movs	r2, #32
 8011f4c:	2100      	movs	r1, #0
 8011f4e:	68f8      	ldr	r0, [r7, #12]
 8011f50:	f000 fdf4 	bl	8012b3c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	220f      	movs	r2, #15
 8011f58:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011f5a:	4b09      	ldr	r3, [pc, #36]	; (8011f80 <ip_reass_enqueue_new_datagram+0x70>)
 8011f5c:	681a      	ldr	r2, [r3, #0]
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011f62:	4a07      	ldr	r2, [pc, #28]	; (8011f80 <ip_reass_enqueue_new_datagram+0x70>)
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	3308      	adds	r3, #8
 8011f6c:	2214      	movs	r2, #20
 8011f6e:	6879      	ldr	r1, [r7, #4]
 8011f70:	4618      	mov	r0, r3
 8011f72:	f000 fdd8 	bl	8012b26 <memcpy>
  return ipr;
 8011f76:	68fb      	ldr	r3, [r7, #12]
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	3710      	adds	r7, #16
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bd80      	pop	{r7, pc}
 8011f80:	20000278 	.word	0x20000278

08011f84 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b082      	sub	sp, #8
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
 8011f8c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011f8e:	4b10      	ldr	r3, [pc, #64]	; (8011fd0 <ip_reass_dequeue_datagram+0x4c>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	687a      	ldr	r2, [r7, #4]
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d104      	bne.n	8011fa2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	4a0c      	ldr	r2, [pc, #48]	; (8011fd0 <ip_reass_dequeue_datagram+0x4c>)
 8011f9e:	6013      	str	r3, [r2, #0]
 8011fa0:	e00d      	b.n	8011fbe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d106      	bne.n	8011fb6 <ip_reass_dequeue_datagram+0x32>
 8011fa8:	4b0a      	ldr	r3, [pc, #40]	; (8011fd4 <ip_reass_dequeue_datagram+0x50>)
 8011faa:	f240 1245 	movw	r2, #325	; 0x145
 8011fae:	490a      	ldr	r1, [pc, #40]	; (8011fd8 <ip_reass_dequeue_datagram+0x54>)
 8011fb0:	480a      	ldr	r0, [pc, #40]	; (8011fdc <ip_reass_dequeue_datagram+0x58>)
 8011fb2:	f000 fdcb 	bl	8012b4c <iprintf>
    prev->next = ipr->next;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681a      	ldr	r2, [r3, #0]
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011fbe:	6879      	ldr	r1, [r7, #4]
 8011fc0:	2004      	movs	r0, #4
 8011fc2:	f7f6 fb07 	bl	80085d4 <memp_free>
}
 8011fc6:	bf00      	nop
 8011fc8:	3708      	adds	r7, #8
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}
 8011fce:	bf00      	nop
 8011fd0:	20000278 	.word	0x20000278
 8011fd4:	08016208 	.word	0x08016208
 8011fd8:	080162d0 	.word	0x080162d0
 8011fdc:	08016250 	.word	0x08016250

08011fe0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b08c      	sub	sp, #48	; 0x30
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	60f8      	str	r0, [r7, #12]
 8011fe8:	60b9      	str	r1, [r7, #8]
 8011fea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011fec:	2300      	movs	r3, #0
 8011fee:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011ff0:	2301      	movs	r3, #1
 8011ff2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	685b      	ldr	r3, [r3, #4]
 8011ff8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011ffa:	69fb      	ldr	r3, [r7, #28]
 8011ffc:	885b      	ldrh	r3, [r3, #2]
 8011ffe:	b29b      	uxth	r3, r3
 8012000:	4618      	mov	r0, r3
 8012002:	f7f5 fe46 	bl	8007c92 <lwip_htons>
 8012006:	4603      	mov	r3, r0
 8012008:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801200a:	69fb      	ldr	r3, [r7, #28]
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	f003 030f 	and.w	r3, r3, #15
 8012012:	b2db      	uxtb	r3, r3
 8012014:	009b      	lsls	r3, r3, #2
 8012016:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012018:	7e7b      	ldrb	r3, [r7, #25]
 801201a:	b29b      	uxth	r3, r3
 801201c:	8b7a      	ldrh	r2, [r7, #26]
 801201e:	429a      	cmp	r2, r3
 8012020:	d202      	bcs.n	8012028 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012022:	f04f 33ff 	mov.w	r3, #4294967295
 8012026:	e135      	b.n	8012294 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012028:	7e7b      	ldrb	r3, [r7, #25]
 801202a:	b29b      	uxth	r3, r3
 801202c:	8b7a      	ldrh	r2, [r7, #26]
 801202e:	1ad3      	subs	r3, r2, r3
 8012030:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012032:	69fb      	ldr	r3, [r7, #28]
 8012034:	88db      	ldrh	r3, [r3, #6]
 8012036:	b29b      	uxth	r3, r3
 8012038:	4618      	mov	r0, r3
 801203a:	f7f5 fe2a 	bl	8007c92 <lwip_htons>
 801203e:	4603      	mov	r3, r0
 8012040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012044:	b29b      	uxth	r3, r3
 8012046:	00db      	lsls	r3, r3, #3
 8012048:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801204a:	68bb      	ldr	r3, [r7, #8]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012052:	2200      	movs	r2, #0
 8012054:	701a      	strb	r2, [r3, #0]
 8012056:	2200      	movs	r2, #0
 8012058:	705a      	strb	r2, [r3, #1]
 801205a:	2200      	movs	r2, #0
 801205c:	709a      	strb	r2, [r3, #2]
 801205e:	2200      	movs	r2, #0
 8012060:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012064:	8afa      	ldrh	r2, [r7, #22]
 8012066:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012068:	8afa      	ldrh	r2, [r7, #22]
 801206a:	8b7b      	ldrh	r3, [r7, #26]
 801206c:	4413      	add	r3, r2
 801206e:	b29a      	uxth	r2, r3
 8012070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012072:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012076:	88db      	ldrh	r3, [r3, #6]
 8012078:	b29b      	uxth	r3, r3
 801207a:	8afa      	ldrh	r2, [r7, #22]
 801207c:	429a      	cmp	r2, r3
 801207e:	d902      	bls.n	8012086 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012080:	f04f 33ff 	mov.w	r3, #4294967295
 8012084:	e106      	b.n	8012294 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	685b      	ldr	r3, [r3, #4]
 801208a:	627b      	str	r3, [r7, #36]	; 0x24
 801208c:	e068      	b.n	8012160 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012090:	685b      	ldr	r3, [r3, #4]
 8012092:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012096:	889b      	ldrh	r3, [r3, #4]
 8012098:	b29a      	uxth	r2, r3
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	889b      	ldrh	r3, [r3, #4]
 801209e:	b29b      	uxth	r3, r3
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d235      	bcs.n	8012110 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80120a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80120aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d020      	beq.n	80120f2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80120b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b2:	889b      	ldrh	r3, [r3, #4]
 80120b4:	b29a      	uxth	r2, r3
 80120b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b8:	88db      	ldrh	r3, [r3, #6]
 80120ba:	b29b      	uxth	r3, r3
 80120bc:	429a      	cmp	r2, r3
 80120be:	d307      	bcc.n	80120d0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80120c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c2:	88db      	ldrh	r3, [r3, #6]
 80120c4:	b29a      	uxth	r2, r3
 80120c6:	693b      	ldr	r3, [r7, #16]
 80120c8:	889b      	ldrh	r3, [r3, #4]
 80120ca:	b29b      	uxth	r3, r3
 80120cc:	429a      	cmp	r2, r3
 80120ce:	d902      	bls.n	80120d6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80120d0:	f04f 33ff 	mov.w	r3, #4294967295
 80120d4:	e0de      	b.n	8012294 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80120d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d8:	68ba      	ldr	r2, [r7, #8]
 80120da:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80120dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120de:	88db      	ldrh	r3, [r3, #6]
 80120e0:	b29a      	uxth	r2, r3
 80120e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e4:	889b      	ldrh	r3, [r3, #4]
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	429a      	cmp	r2, r3
 80120ea:	d03d      	beq.n	8012168 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80120ec:	2300      	movs	r3, #0
 80120ee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80120f0:	e03a      	b.n	8012168 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80120f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f4:	88db      	ldrh	r3, [r3, #6]
 80120f6:	b29a      	uxth	r2, r3
 80120f8:	693b      	ldr	r3, [r7, #16]
 80120fa:	889b      	ldrh	r3, [r3, #4]
 80120fc:	b29b      	uxth	r3, r3
 80120fe:	429a      	cmp	r2, r3
 8012100:	d902      	bls.n	8012108 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012102:	f04f 33ff 	mov.w	r3, #4294967295
 8012106:	e0c5      	b.n	8012294 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	68ba      	ldr	r2, [r7, #8]
 801210c:	605a      	str	r2, [r3, #4]
      break;
 801210e:	e02b      	b.n	8012168 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012112:	889b      	ldrh	r3, [r3, #4]
 8012114:	b29a      	uxth	r2, r3
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	889b      	ldrh	r3, [r3, #4]
 801211a:	b29b      	uxth	r3, r3
 801211c:	429a      	cmp	r2, r3
 801211e:	d102      	bne.n	8012126 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012120:	f04f 33ff 	mov.w	r3, #4294967295
 8012124:	e0b6      	b.n	8012294 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012128:	889b      	ldrh	r3, [r3, #4]
 801212a:	b29a      	uxth	r2, r3
 801212c:	693b      	ldr	r3, [r7, #16]
 801212e:	88db      	ldrh	r3, [r3, #6]
 8012130:	b29b      	uxth	r3, r3
 8012132:	429a      	cmp	r2, r3
 8012134:	d202      	bcs.n	801213c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012136:	f04f 33ff 	mov.w	r3, #4294967295
 801213a:	e0ab      	b.n	8012294 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801213c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801213e:	2b00      	cmp	r3, #0
 8012140:	d009      	beq.n	8012156 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012144:	88db      	ldrh	r3, [r3, #6]
 8012146:	b29a      	uxth	r2, r3
 8012148:	693b      	ldr	r3, [r7, #16]
 801214a:	889b      	ldrh	r3, [r3, #4]
 801214c:	b29b      	uxth	r3, r3
 801214e:	429a      	cmp	r2, r3
 8012150:	d001      	beq.n	8012156 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012152:	2300      	movs	r3, #0
 8012154:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012162:	2b00      	cmp	r3, #0
 8012164:	d193      	bne.n	801208e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012166:	e000      	b.n	801216a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012168:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216c:	2b00      	cmp	r3, #0
 801216e:	d12d      	bne.n	80121cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012172:	2b00      	cmp	r3, #0
 8012174:	d01c      	beq.n	80121b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012178:	88db      	ldrh	r3, [r3, #6]
 801217a:	b29a      	uxth	r2, r3
 801217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801217e:	889b      	ldrh	r3, [r3, #4]
 8012180:	b29b      	uxth	r3, r3
 8012182:	429a      	cmp	r2, r3
 8012184:	d906      	bls.n	8012194 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012186:	4b45      	ldr	r3, [pc, #276]	; (801229c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012188:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801218c:	4944      	ldr	r1, [pc, #272]	; (80122a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801218e:	4845      	ldr	r0, [pc, #276]	; (80122a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012190:	f000 fcdc 	bl	8012b4c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012196:	68ba      	ldr	r2, [r7, #8]
 8012198:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801219c:	88db      	ldrh	r3, [r3, #6]
 801219e:	b29a      	uxth	r2, r3
 80121a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a2:	889b      	ldrh	r3, [r3, #4]
 80121a4:	b29b      	uxth	r3, r3
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d010      	beq.n	80121cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80121aa:	2300      	movs	r3, #0
 80121ac:	623b      	str	r3, [r7, #32]
 80121ae:	e00d      	b.n	80121cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	685b      	ldr	r3, [r3, #4]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d006      	beq.n	80121c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80121b8:	4b38      	ldr	r3, [pc, #224]	; (801229c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80121ba:	f240 12bf 	movw	r2, #447	; 0x1bf
 80121be:	493a      	ldr	r1, [pc, #232]	; (80122a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80121c0:	4838      	ldr	r0, [pc, #224]	; (80122a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80121c2:	f000 fcc3 	bl	8012b4c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	68ba      	ldr	r2, [r7, #8]
 80121ca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d105      	bne.n	80121de <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	7f9b      	ldrb	r3, [r3, #30]
 80121d6:	f003 0301 	and.w	r3, r3, #1
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d059      	beq.n	8012292 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80121de:	6a3b      	ldr	r3, [r7, #32]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d04f      	beq.n	8012284 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	685b      	ldr	r3, [r3, #4]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d006      	beq.n	80121fa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	685b      	ldr	r3, [r3, #4]
 80121f0:	685b      	ldr	r3, [r3, #4]
 80121f2:	889b      	ldrh	r3, [r3, #4]
 80121f4:	b29b      	uxth	r3, r3
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d002      	beq.n	8012200 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80121fa:	2300      	movs	r3, #0
 80121fc:	623b      	str	r3, [r7, #32]
 80121fe:	e041      	b.n	8012284 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012202:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801220a:	e012      	b.n	8012232 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220e:	685b      	ldr	r3, [r3, #4]
 8012210:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012214:	88db      	ldrh	r3, [r3, #6]
 8012216:	b29a      	uxth	r2, r3
 8012218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801221a:	889b      	ldrh	r3, [r3, #4]
 801221c:	b29b      	uxth	r3, r3
 801221e:	429a      	cmp	r2, r3
 8012220:	d002      	beq.n	8012228 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012222:	2300      	movs	r3, #0
 8012224:	623b      	str	r3, [r7, #32]
            break;
 8012226:	e007      	b.n	8012238 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801222a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012234:	2b00      	cmp	r3, #0
 8012236:	d1e9      	bne.n	801220c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012238:	6a3b      	ldr	r3, [r7, #32]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d022      	beq.n	8012284 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	685b      	ldr	r3, [r3, #4]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d106      	bne.n	8012254 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012246:	4b15      	ldr	r3, [pc, #84]	; (801229c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012248:	f240 12df 	movw	r2, #479	; 0x1df
 801224c:	4917      	ldr	r1, [pc, #92]	; (80122ac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801224e:	4815      	ldr	r0, [pc, #84]	; (80122a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012250:	f000 fc7c 	bl	8012b4c <iprintf>
          LWIP_ASSERT("sanity check",
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801225c:	429a      	cmp	r2, r3
 801225e:	d106      	bne.n	801226e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012260:	4b0e      	ldr	r3, [pc, #56]	; (801229c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012262:	f240 12e1 	movw	r2, #481	; 0x1e1
 8012266:	4911      	ldr	r1, [pc, #68]	; (80122ac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012268:	480e      	ldr	r0, [pc, #56]	; (80122a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801226a:	f000 fc6f 	bl	8012b4c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d006      	beq.n	8012284 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012276:	4b09      	ldr	r3, [pc, #36]	; (801229c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012278:	f240 12e3 	movw	r2, #483	; 0x1e3
 801227c:	490c      	ldr	r1, [pc, #48]	; (80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801227e:	4809      	ldr	r0, [pc, #36]	; (80122a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012280:	f000 fc64 	bl	8012b4c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012284:	6a3b      	ldr	r3, [r7, #32]
 8012286:	2b00      	cmp	r3, #0
 8012288:	bf14      	ite	ne
 801228a:	2301      	movne	r3, #1
 801228c:	2300      	moveq	r3, #0
 801228e:	b2db      	uxtb	r3, r3
 8012290:	e000      	b.n	8012294 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012292:	2300      	movs	r3, #0
}
 8012294:	4618      	mov	r0, r3
 8012296:	3730      	adds	r7, #48	; 0x30
 8012298:	46bd      	mov	sp, r7
 801229a:	bd80      	pop	{r7, pc}
 801229c:	08016208 	.word	0x08016208
 80122a0:	080162ec 	.word	0x080162ec
 80122a4:	08016250 	.word	0x08016250
 80122a8:	0801630c 	.word	0x0801630c
 80122ac:	08016344 	.word	0x08016344
 80122b0:	08016354 	.word	0x08016354

080122b4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b08e      	sub	sp, #56	; 0x38
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80122c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122c4:	781b      	ldrb	r3, [r3, #0]
 80122c6:	f003 030f 	and.w	r3, r3, #15
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	009b      	lsls	r3, r3, #2
 80122ce:	b2db      	uxtb	r3, r3
 80122d0:	2b14      	cmp	r3, #20
 80122d2:	f040 8167 	bne.w	80125a4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80122d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d8:	88db      	ldrh	r3, [r3, #6]
 80122da:	b29b      	uxth	r3, r3
 80122dc:	4618      	mov	r0, r3
 80122de:	f7f5 fcd8 	bl	8007c92 <lwip_htons>
 80122e2:	4603      	mov	r3, r0
 80122e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80122e8:	b29b      	uxth	r3, r3
 80122ea:	00db      	lsls	r3, r3, #3
 80122ec:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80122ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f0:	885b      	ldrh	r3, [r3, #2]
 80122f2:	b29b      	uxth	r3, r3
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7f5 fccc 	bl	8007c92 <lwip_htons>
 80122fa:	4603      	mov	r3, r0
 80122fc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80122fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	f003 030f 	and.w	r3, r3, #15
 8012306:	b2db      	uxtb	r3, r3
 8012308:	009b      	lsls	r3, r3, #2
 801230a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801230e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012312:	b29b      	uxth	r3, r3
 8012314:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012316:	429a      	cmp	r2, r3
 8012318:	f0c0 8146 	bcc.w	80125a8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801231c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012320:	b29b      	uxth	r3, r3
 8012322:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012324:	1ad3      	subs	r3, r2, r3
 8012326:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f7f6 ffe9 	bl	8009300 <pbuf_clen>
 801232e:	4603      	mov	r3, r0
 8012330:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012332:	4ba3      	ldr	r3, [pc, #652]	; (80125c0 <ip4_reass+0x30c>)
 8012334:	881b      	ldrh	r3, [r3, #0]
 8012336:	461a      	mov	r2, r3
 8012338:	8c3b      	ldrh	r3, [r7, #32]
 801233a:	4413      	add	r3, r2
 801233c:	2b0a      	cmp	r3, #10
 801233e:	dd10      	ble.n	8012362 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012340:	8c3b      	ldrh	r3, [r7, #32]
 8012342:	4619      	mov	r1, r3
 8012344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012346:	f7ff fd81 	bl	8011e4c <ip_reass_remove_oldest_datagram>
 801234a:	4603      	mov	r3, r0
 801234c:	2b00      	cmp	r3, #0
 801234e:	f000 812d 	beq.w	80125ac <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012352:	4b9b      	ldr	r3, [pc, #620]	; (80125c0 <ip4_reass+0x30c>)
 8012354:	881b      	ldrh	r3, [r3, #0]
 8012356:	461a      	mov	r2, r3
 8012358:	8c3b      	ldrh	r3, [r7, #32]
 801235a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801235c:	2b0a      	cmp	r3, #10
 801235e:	f300 8125 	bgt.w	80125ac <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012362:	4b98      	ldr	r3, [pc, #608]	; (80125c4 <ip4_reass+0x310>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	633b      	str	r3, [r7, #48]	; 0x30
 8012368:	e015      	b.n	8012396 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801236c:	695a      	ldr	r2, [r3, #20]
 801236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012370:	68db      	ldr	r3, [r3, #12]
 8012372:	429a      	cmp	r2, r3
 8012374:	d10c      	bne.n	8012390 <ip4_reass+0xdc>
 8012376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012378:	699a      	ldr	r2, [r3, #24]
 801237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801237c:	691b      	ldr	r3, [r3, #16]
 801237e:	429a      	cmp	r2, r3
 8012380:	d106      	bne.n	8012390 <ip4_reass+0xdc>
 8012382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012384:	899a      	ldrh	r2, [r3, #12]
 8012386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012388:	889b      	ldrh	r3, [r3, #4]
 801238a:	b29b      	uxth	r3, r3
 801238c:	429a      	cmp	r2, r3
 801238e:	d006      	beq.n	801239e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	633b      	str	r3, [r7, #48]	; 0x30
 8012396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012398:	2b00      	cmp	r3, #0
 801239a:	d1e6      	bne.n	801236a <ip4_reass+0xb6>
 801239c:	e000      	b.n	80123a0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801239e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80123a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d109      	bne.n	80123ba <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80123a6:	8c3b      	ldrh	r3, [r7, #32]
 80123a8:	4619      	mov	r1, r3
 80123aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80123ac:	f7ff fdb0 	bl	8011f10 <ip_reass_enqueue_new_datagram>
 80123b0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80123b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d11c      	bne.n	80123f2 <ip4_reass+0x13e>
      goto nullreturn;
 80123b8:	e0f9      	b.n	80125ae <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80123ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123bc:	88db      	ldrh	r3, [r3, #6]
 80123be:	b29b      	uxth	r3, r3
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7f5 fc66 	bl	8007c92 <lwip_htons>
 80123c6:	4603      	mov	r3, r0
 80123c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d110      	bne.n	80123f2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80123d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d2:	89db      	ldrh	r3, [r3, #14]
 80123d4:	4618      	mov	r0, r3
 80123d6:	f7f5 fc5c 	bl	8007c92 <lwip_htons>
 80123da:	4603      	mov	r3, r0
 80123dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d006      	beq.n	80123f2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80123e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e6:	3308      	adds	r3, #8
 80123e8:	2214      	movs	r2, #20
 80123ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80123ec:	4618      	mov	r0, r3
 80123ee:	f000 fb9a 	bl	8012b26 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80123f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123f4:	88db      	ldrh	r3, [r3, #6]
 80123f6:	b29b      	uxth	r3, r3
 80123f8:	f003 0320 	and.w	r3, r3, #32
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	bf0c      	ite	eq
 8012400:	2301      	moveq	r3, #1
 8012402:	2300      	movne	r3, #0
 8012404:	b2db      	uxtb	r3, r3
 8012406:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012408:	69fb      	ldr	r3, [r7, #28]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d00e      	beq.n	801242c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801240e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012410:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012412:	4413      	add	r3, r2
 8012414:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012416:	8b7a      	ldrh	r2, [r7, #26]
 8012418:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801241a:	429a      	cmp	r2, r3
 801241c:	f0c0 80a0 	bcc.w	8012560 <ip4_reass+0x2ac>
 8012420:	8b7b      	ldrh	r3, [r7, #26]
 8012422:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012426:	4293      	cmp	r3, r2
 8012428:	f200 809a 	bhi.w	8012560 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801242c:	69fa      	ldr	r2, [r7, #28]
 801242e:	6879      	ldr	r1, [r7, #4]
 8012430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012432:	f7ff fdd5 	bl	8011fe0 <ip_reass_chain_frag_into_datagram_and_validate>
 8012436:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801243e:	f000 8091 	beq.w	8012564 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012442:	4b5f      	ldr	r3, [pc, #380]	; (80125c0 <ip4_reass+0x30c>)
 8012444:	881a      	ldrh	r2, [r3, #0]
 8012446:	8c3b      	ldrh	r3, [r7, #32]
 8012448:	4413      	add	r3, r2
 801244a:	b29a      	uxth	r2, r3
 801244c:	4b5c      	ldr	r3, [pc, #368]	; (80125c0 <ip4_reass+0x30c>)
 801244e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012450:	69fb      	ldr	r3, [r7, #28]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d00d      	beq.n	8012472 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012456:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801245a:	4413      	add	r3, r2
 801245c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012460:	8a7a      	ldrh	r2, [r7, #18]
 8012462:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012466:	7f9b      	ldrb	r3, [r3, #30]
 8012468:	f043 0301 	orr.w	r3, r3, #1
 801246c:	b2da      	uxtb	r2, r3
 801246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012470:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	2b01      	cmp	r3, #1
 8012476:	d171      	bne.n	801255c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801247a:	8b9b      	ldrh	r3, [r3, #28]
 801247c:	3314      	adds	r3, #20
 801247e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012482:	685b      	ldr	r3, [r3, #4]
 8012484:	685b      	ldr	r3, [r3, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801248c:	685b      	ldr	r3, [r3, #4]
 801248e:	685b      	ldr	r3, [r3, #4]
 8012490:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012494:	3308      	adds	r3, #8
 8012496:	2214      	movs	r2, #20
 8012498:	4619      	mov	r1, r3
 801249a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801249c:	f000 fb43 	bl	8012b26 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80124a0:	8a3b      	ldrh	r3, [r7, #16]
 80124a2:	4618      	mov	r0, r3
 80124a4:	f7f5 fbf5 	bl	8007c92 <lwip_htons>
 80124a8:	4603      	mov	r3, r0
 80124aa:	461a      	mov	r2, r3
 80124ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80124b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124b2:	2200      	movs	r2, #0
 80124b4:	719a      	strb	r2, [r3, #6]
 80124b6:	2200      	movs	r2, #0
 80124b8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80124ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124bc:	2200      	movs	r2, #0
 80124be:	729a      	strb	r2, [r3, #10]
 80124c0:	2200      	movs	r2, #0
 80124c2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80124c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c6:	685b      	ldr	r3, [r3, #4]
 80124c8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80124ca:	e00d      	b.n	80124e8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80124cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ce:	685b      	ldr	r3, [r3, #4]
 80124d0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80124d2:	2114      	movs	r1, #20
 80124d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80124d6:	f7f6 fe05 	bl	80090e4 <pbuf_remove_header>
      pbuf_cat(p, r);
 80124da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f7f6 ff49 	bl	8009374 <pbuf_cat>
      r = iprh->next_pbuf;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80124e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d1ee      	bne.n	80124cc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80124ee:	4b35      	ldr	r3, [pc, #212]	; (80125c4 <ip4_reass+0x310>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124f4:	429a      	cmp	r2, r3
 80124f6:	d102      	bne.n	80124fe <ip4_reass+0x24a>
      ipr_prev = NULL;
 80124f8:	2300      	movs	r3, #0
 80124fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80124fc:	e010      	b.n	8012520 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80124fe:	4b31      	ldr	r3, [pc, #196]	; (80125c4 <ip4_reass+0x310>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012504:	e007      	b.n	8012516 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801250c:	429a      	cmp	r2, r3
 801250e:	d006      	beq.n	801251e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012518:	2b00      	cmp	r3, #0
 801251a:	d1f4      	bne.n	8012506 <ip4_reass+0x252>
 801251c:	e000      	b.n	8012520 <ip4_reass+0x26c>
          break;
 801251e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012520:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012524:	f7ff fd2e 	bl	8011f84 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	f7f6 fee9 	bl	8009300 <pbuf_clen>
 801252e:	4603      	mov	r3, r0
 8012530:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012532:	4b23      	ldr	r3, [pc, #140]	; (80125c0 <ip4_reass+0x30c>)
 8012534:	881b      	ldrh	r3, [r3, #0]
 8012536:	8c3a      	ldrh	r2, [r7, #32]
 8012538:	429a      	cmp	r2, r3
 801253a:	d906      	bls.n	801254a <ip4_reass+0x296>
 801253c:	4b22      	ldr	r3, [pc, #136]	; (80125c8 <ip4_reass+0x314>)
 801253e:	f240 229b 	movw	r2, #667	; 0x29b
 8012542:	4922      	ldr	r1, [pc, #136]	; (80125cc <ip4_reass+0x318>)
 8012544:	4822      	ldr	r0, [pc, #136]	; (80125d0 <ip4_reass+0x31c>)
 8012546:	f000 fb01 	bl	8012b4c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801254a:	4b1d      	ldr	r3, [pc, #116]	; (80125c0 <ip4_reass+0x30c>)
 801254c:	881a      	ldrh	r2, [r3, #0]
 801254e:	8c3b      	ldrh	r3, [r7, #32]
 8012550:	1ad3      	subs	r3, r2, r3
 8012552:	b29a      	uxth	r2, r3
 8012554:	4b1a      	ldr	r3, [pc, #104]	; (80125c0 <ip4_reass+0x30c>)
 8012556:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	e02c      	b.n	80125b6 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801255c:	2300      	movs	r3, #0
 801255e:	e02a      	b.n	80125b6 <ip4_reass+0x302>

nullreturn_ipr:
 8012560:	bf00      	nop
 8012562:	e000      	b.n	8012566 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8012564:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012568:	2b00      	cmp	r3, #0
 801256a:	d106      	bne.n	801257a <ip4_reass+0x2c6>
 801256c:	4b16      	ldr	r3, [pc, #88]	; (80125c8 <ip4_reass+0x314>)
 801256e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012572:	4918      	ldr	r1, [pc, #96]	; (80125d4 <ip4_reass+0x320>)
 8012574:	4816      	ldr	r0, [pc, #88]	; (80125d0 <ip4_reass+0x31c>)
 8012576:	f000 fae9 	bl	8012b4c <iprintf>
  if (ipr->p == NULL) {
 801257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801257c:	685b      	ldr	r3, [r3, #4]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d114      	bne.n	80125ac <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012582:	4b10      	ldr	r3, [pc, #64]	; (80125c4 <ip4_reass+0x310>)
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012588:	429a      	cmp	r2, r3
 801258a:	d006      	beq.n	801259a <ip4_reass+0x2e6>
 801258c:	4b0e      	ldr	r3, [pc, #56]	; (80125c8 <ip4_reass+0x314>)
 801258e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012592:	4911      	ldr	r1, [pc, #68]	; (80125d8 <ip4_reass+0x324>)
 8012594:	480e      	ldr	r0, [pc, #56]	; (80125d0 <ip4_reass+0x31c>)
 8012596:	f000 fad9 	bl	8012b4c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801259a:	2100      	movs	r1, #0
 801259c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801259e:	f7ff fcf1 	bl	8011f84 <ip_reass_dequeue_datagram>
 80125a2:	e004      	b.n	80125ae <ip4_reass+0x2fa>
    goto nullreturn;
 80125a4:	bf00      	nop
 80125a6:	e002      	b.n	80125ae <ip4_reass+0x2fa>
    goto nullreturn;
 80125a8:	bf00      	nop
 80125aa:	e000      	b.n	80125ae <ip4_reass+0x2fa>
  }

nullreturn:
 80125ac:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f7f6 fe1e 	bl	80091f0 <pbuf_free>
  return NULL;
 80125b4:	2300      	movs	r3, #0
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3738      	adds	r7, #56	; 0x38
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}
 80125be:	bf00      	nop
 80125c0:	2000027c 	.word	0x2000027c
 80125c4:	20000278 	.word	0x20000278
 80125c8:	08016208 	.word	0x08016208
 80125cc:	08016378 	.word	0x08016378
 80125d0:	08016250 	.word	0x08016250
 80125d4:	08016394 	.word	0x08016394
 80125d8:	080163a0 	.word	0x080163a0

080125dc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80125e0:	2005      	movs	r0, #5
 80125e2:	f7f5 ffab 	bl	800853c <memp_malloc>
 80125e6:	4603      	mov	r3, r0
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	bd80      	pop	{r7, pc}

080125ec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b082      	sub	sp, #8
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d106      	bne.n	8012608 <ip_frag_free_pbuf_custom_ref+0x1c>
 80125fa:	4b07      	ldr	r3, [pc, #28]	; (8012618 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80125fc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012600:	4906      	ldr	r1, [pc, #24]	; (801261c <ip_frag_free_pbuf_custom_ref+0x30>)
 8012602:	4807      	ldr	r0, [pc, #28]	; (8012620 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012604:	f000 faa2 	bl	8012b4c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012608:	6879      	ldr	r1, [r7, #4]
 801260a:	2005      	movs	r0, #5
 801260c:	f7f5 ffe2 	bl	80085d4 <memp_free>
}
 8012610:	bf00      	nop
 8012612:	3708      	adds	r7, #8
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}
 8012618:	08016208 	.word	0x08016208
 801261c:	080163c0 	.word	0x080163c0
 8012620:	08016250 	.word	0x08016250

08012624 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b084      	sub	sp, #16
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d106      	bne.n	8012644 <ipfrag_free_pbuf_custom+0x20>
 8012636:	4b11      	ldr	r3, [pc, #68]	; (801267c <ipfrag_free_pbuf_custom+0x58>)
 8012638:	f240 22ce 	movw	r2, #718	; 0x2ce
 801263c:	4910      	ldr	r1, [pc, #64]	; (8012680 <ipfrag_free_pbuf_custom+0x5c>)
 801263e:	4811      	ldr	r0, [pc, #68]	; (8012684 <ipfrag_free_pbuf_custom+0x60>)
 8012640:	f000 fa84 	bl	8012b4c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012644:	68fa      	ldr	r2, [r7, #12]
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	429a      	cmp	r2, r3
 801264a:	d006      	beq.n	801265a <ipfrag_free_pbuf_custom+0x36>
 801264c:	4b0b      	ldr	r3, [pc, #44]	; (801267c <ipfrag_free_pbuf_custom+0x58>)
 801264e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012652:	490d      	ldr	r1, [pc, #52]	; (8012688 <ipfrag_free_pbuf_custom+0x64>)
 8012654:	480b      	ldr	r0, [pc, #44]	; (8012684 <ipfrag_free_pbuf_custom+0x60>)
 8012656:	f000 fa79 	bl	8012b4c <iprintf>
  if (pcr->original != NULL) {
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	695b      	ldr	r3, [r3, #20]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d004      	beq.n	801266c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	695b      	ldr	r3, [r3, #20]
 8012666:	4618      	mov	r0, r3
 8012668:	f7f6 fdc2 	bl	80091f0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801266c:	68f8      	ldr	r0, [r7, #12]
 801266e:	f7ff ffbd 	bl	80125ec <ip_frag_free_pbuf_custom_ref>
}
 8012672:	bf00      	nop
 8012674:	3710      	adds	r7, #16
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}
 801267a:	bf00      	nop
 801267c:	08016208 	.word	0x08016208
 8012680:	080163cc 	.word	0x080163cc
 8012684:	08016250 	.word	0x08016250
 8012688:	080163d8 	.word	0x080163d8

0801268c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b094      	sub	sp, #80	; 0x50
 8012690:	af02      	add	r7, sp, #8
 8012692:	60f8      	str	r0, [r7, #12]
 8012694:	60b9      	str	r1, [r7, #8]
 8012696:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012698:	2300      	movs	r3, #0
 801269a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80126a2:	3b14      	subs	r3, #20
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	da00      	bge.n	80126aa <ip4_frag+0x1e>
 80126a8:	3307      	adds	r3, #7
 80126aa:	10db      	asrs	r3, r3, #3
 80126ac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80126ae:	2314      	movs	r3, #20
 80126b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	685b      	ldr	r3, [r3, #4]
 80126b6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80126b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80126bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126be:	781b      	ldrb	r3, [r3, #0]
 80126c0:	f003 030f 	and.w	r3, r3, #15
 80126c4:	b2db      	uxtb	r3, r3
 80126c6:	009b      	lsls	r3, r3, #2
 80126c8:	b2db      	uxtb	r3, r3
 80126ca:	2b14      	cmp	r3, #20
 80126cc:	d002      	beq.n	80126d4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80126ce:	f06f 0305 	mvn.w	r3, #5
 80126d2:	e10f      	b.n	80128f4 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	895b      	ldrh	r3, [r3, #10]
 80126d8:	2b13      	cmp	r3, #19
 80126da:	d809      	bhi.n	80126f0 <ip4_frag+0x64>
 80126dc:	4b87      	ldr	r3, [pc, #540]	; (80128fc <ip4_frag+0x270>)
 80126de:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80126e2:	4987      	ldr	r1, [pc, #540]	; (8012900 <ip4_frag+0x274>)
 80126e4:	4887      	ldr	r0, [pc, #540]	; (8012904 <ip4_frag+0x278>)
 80126e6:	f000 fa31 	bl	8012b4c <iprintf>
 80126ea:	f06f 0305 	mvn.w	r3, #5
 80126ee:	e101      	b.n	80128f4 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80126f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f2:	88db      	ldrh	r3, [r3, #6]
 80126f4:	b29b      	uxth	r3, r3
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7f5 facb 	bl	8007c92 <lwip_htons>
 80126fc:	4603      	mov	r3, r0
 80126fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012700:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012702:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012706:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801270a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801270c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012710:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	891b      	ldrh	r3, [r3, #8]
 8012716:	3b14      	subs	r3, #20
 8012718:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801271c:	e0e0      	b.n	80128e0 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801271e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012720:	00db      	lsls	r3, r3, #3
 8012722:	b29b      	uxth	r3, r3
 8012724:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012728:	4293      	cmp	r3, r2
 801272a:	bf28      	it	cs
 801272c:	4613      	movcs	r3, r2
 801272e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012730:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012734:	2114      	movs	r1, #20
 8012736:	200e      	movs	r0, #14
 8012738:	f7f6 fa7a 	bl	8008c30 <pbuf_alloc>
 801273c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012740:	2b00      	cmp	r3, #0
 8012742:	f000 80d4 	beq.w	80128ee <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012748:	895b      	ldrh	r3, [r3, #10]
 801274a:	2b13      	cmp	r3, #19
 801274c:	d806      	bhi.n	801275c <ip4_frag+0xd0>
 801274e:	4b6b      	ldr	r3, [pc, #428]	; (80128fc <ip4_frag+0x270>)
 8012750:	f240 3225 	movw	r2, #805	; 0x325
 8012754:	496c      	ldr	r1, [pc, #432]	; (8012908 <ip4_frag+0x27c>)
 8012756:	486b      	ldr	r0, [pc, #428]	; (8012904 <ip4_frag+0x278>)
 8012758:	f000 f9f8 	bl	8012b4c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801275e:	685b      	ldr	r3, [r3, #4]
 8012760:	2214      	movs	r2, #20
 8012762:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012764:	4618      	mov	r0, r3
 8012766:	f000 f9de 	bl	8012b26 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801276c:	685b      	ldr	r3, [r3, #4]
 801276e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012770:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012772:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012776:	e064      	b.n	8012842 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	895a      	ldrh	r2, [r3, #10]
 801277c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801277e:	1ad3      	subs	r3, r2, r3
 8012780:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	895b      	ldrh	r3, [r3, #10]
 8012786:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012788:	429a      	cmp	r2, r3
 801278a:	d906      	bls.n	801279a <ip4_frag+0x10e>
 801278c:	4b5b      	ldr	r3, [pc, #364]	; (80128fc <ip4_frag+0x270>)
 801278e:	f240 322d 	movw	r2, #813	; 0x32d
 8012792:	495e      	ldr	r1, [pc, #376]	; (801290c <ip4_frag+0x280>)
 8012794:	485b      	ldr	r0, [pc, #364]	; (8012904 <ip4_frag+0x278>)
 8012796:	f000 f9d9 	bl	8012b4c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801279a:	8bfa      	ldrh	r2, [r7, #30]
 801279c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80127a0:	4293      	cmp	r3, r2
 80127a2:	bf28      	it	cs
 80127a4:	4613      	movcs	r3, r2
 80127a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80127aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d105      	bne.n	80127be <ip4_frag+0x132>
        poff = 0;
 80127b2:	2300      	movs	r3, #0
 80127b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	60fb      	str	r3, [r7, #12]
        continue;
 80127bc:	e041      	b.n	8012842 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80127be:	f7ff ff0d 	bl	80125dc <ip_frag_alloc_pbuf_custom_ref>
 80127c2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80127c4:	69bb      	ldr	r3, [r7, #24]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d103      	bne.n	80127d2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80127ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127cc:	f7f6 fd10 	bl	80091f0 <pbuf_free>
        goto memerr;
 80127d0:	e08e      	b.n	80128f0 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80127d2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80127d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80127da:	4413      	add	r3, r2
 80127dc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80127e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80127e4:	9201      	str	r2, [sp, #4]
 80127e6:	9300      	str	r3, [sp, #0]
 80127e8:	4603      	mov	r3, r0
 80127ea:	2241      	movs	r2, #65	; 0x41
 80127ec:	2000      	movs	r0, #0
 80127ee:	f7f6 fb45 	bl	8008e7c <pbuf_alloced_custom>
 80127f2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d106      	bne.n	8012808 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80127fa:	69b8      	ldr	r0, [r7, #24]
 80127fc:	f7ff fef6 	bl	80125ec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012800:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012802:	f7f6 fcf5 	bl	80091f0 <pbuf_free>
        goto memerr;
 8012806:	e073      	b.n	80128f0 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8012808:	68f8      	ldr	r0, [r7, #12]
 801280a:	f7f6 fd91 	bl	8009330 <pbuf_ref>
      pcr->original = p;
 801280e:	69bb      	ldr	r3, [r7, #24]
 8012810:	68fa      	ldr	r2, [r7, #12]
 8012812:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012814:	69bb      	ldr	r3, [r7, #24]
 8012816:	4a3e      	ldr	r2, [pc, #248]	; (8012910 <ip4_frag+0x284>)
 8012818:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801281a:	6979      	ldr	r1, [r7, #20]
 801281c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801281e:	f7f6 fda9 	bl	8009374 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012822:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012826:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801282a:	1ad3      	subs	r3, r2, r3
 801282c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012830:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012834:	2b00      	cmp	r3, #0
 8012836:	d004      	beq.n	8012842 <ip4_frag+0x1b6>
        poff = 0;
 8012838:	2300      	movs	r3, #0
 801283a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012842:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012846:	2b00      	cmp	r3, #0
 8012848:	d196      	bne.n	8012778 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801284a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801284c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012850:	4413      	add	r3, r2
 8012852:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012854:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801285c:	3b14      	subs	r3, #20
 801285e:	429a      	cmp	r2, r3
 8012860:	bfd4      	ite	le
 8012862:	2301      	movle	r3, #1
 8012864:	2300      	movgt	r3, #0
 8012866:	b2db      	uxtb	r3, r3
 8012868:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801286a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801286e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012872:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012874:	6a3b      	ldr	r3, [r7, #32]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d002      	beq.n	8012880 <ip4_frag+0x1f4>
 801287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801287c:	2b00      	cmp	r3, #0
 801287e:	d003      	beq.n	8012888 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012880:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012882:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012886:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012888:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801288a:	4618      	mov	r0, r3
 801288c:	f7f5 fa01 	bl	8007c92 <lwip_htons>
 8012890:	4603      	mov	r3, r0
 8012892:	461a      	mov	r2, r3
 8012894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012896:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012898:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801289a:	3314      	adds	r3, #20
 801289c:	b29b      	uxth	r3, r3
 801289e:	4618      	mov	r0, r3
 80128a0:	f7f5 f9f7 	bl	8007c92 <lwip_htons>
 80128a4:	4603      	mov	r3, r0
 80128a6:	461a      	mov	r2, r3
 80128a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128aa:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80128ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ae:	2200      	movs	r2, #0
 80128b0:	729a      	strb	r2, [r3, #10]
 80128b2:	2200      	movs	r2, #0
 80128b4:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	695b      	ldr	r3, [r3, #20]
 80128ba:	687a      	ldr	r2, [r7, #4]
 80128bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80128be:	68b8      	ldr	r0, [r7, #8]
 80128c0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80128c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128c4:	f7f6 fc94 	bl	80091f0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80128c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80128cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80128ce:	1ad3      	subs	r3, r2, r3
 80128d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80128d4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80128d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80128da:	4413      	add	r3, r2
 80128dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80128e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	f47f af1a 	bne.w	801271e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80128ea:	2300      	movs	r3, #0
 80128ec:	e002      	b.n	80128f4 <ip4_frag+0x268>
      goto memerr;
 80128ee:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80128f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80128f4:	4618      	mov	r0, r3
 80128f6:	3748      	adds	r7, #72	; 0x48
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}
 80128fc:	08016208 	.word	0x08016208
 8012900:	080163e4 	.word	0x080163e4
 8012904:	08016250 	.word	0x08016250
 8012908:	08016400 	.word	0x08016400
 801290c:	08016420 	.word	0x08016420
 8012910:	08012625 	.word	0x08012625

08012914 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b086      	sub	sp, #24
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
 801291c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801291e:	230e      	movs	r3, #14
 8012920:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	895b      	ldrh	r3, [r3, #10]
 8012926:	2b0e      	cmp	r3, #14
 8012928:	d96e      	bls.n	8012a08 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	7bdb      	ldrb	r3, [r3, #15]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d106      	bne.n	8012940 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012932:	683b      	ldr	r3, [r7, #0]
 8012934:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012938:	3301      	adds	r3, #1
 801293a:	b2da      	uxtb	r2, r3
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	685b      	ldr	r3, [r3, #4]
 8012944:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012946:	693b      	ldr	r3, [r7, #16]
 8012948:	7b1a      	ldrb	r2, [r3, #12]
 801294a:	7b5b      	ldrb	r3, [r3, #13]
 801294c:	021b      	lsls	r3, r3, #8
 801294e:	4313      	orrs	r3, r2
 8012950:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012952:	693b      	ldr	r3, [r7, #16]
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	f003 0301 	and.w	r3, r3, #1
 801295a:	2b00      	cmp	r3, #0
 801295c:	d023      	beq.n	80129a6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	2b01      	cmp	r3, #1
 8012964:	d10f      	bne.n	8012986 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012966:	693b      	ldr	r3, [r7, #16]
 8012968:	785b      	ldrb	r3, [r3, #1]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d11b      	bne.n	80129a6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801296e:	693b      	ldr	r3, [r7, #16]
 8012970:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012972:	2b5e      	cmp	r3, #94	; 0x5e
 8012974:	d117      	bne.n	80129a6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	7b5b      	ldrb	r3, [r3, #13]
 801297a:	f043 0310 	orr.w	r3, r3, #16
 801297e:	b2da      	uxtb	r2, r3
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	735a      	strb	r2, [r3, #13]
 8012984:	e00f      	b.n	80129a6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012986:	693b      	ldr	r3, [r7, #16]
 8012988:	2206      	movs	r2, #6
 801298a:	4928      	ldr	r1, [pc, #160]	; (8012a2c <ethernet_input+0x118>)
 801298c:	4618      	mov	r0, r3
 801298e:	f000 f8bb 	bl	8012b08 <memcmp>
 8012992:	4603      	mov	r3, r0
 8012994:	2b00      	cmp	r3, #0
 8012996:	d106      	bne.n	80129a6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	7b5b      	ldrb	r3, [r3, #13]
 801299c:	f043 0308 	orr.w	r3, r3, #8
 80129a0:	b2da      	uxtb	r2, r3
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80129a6:	89fb      	ldrh	r3, [r7, #14]
 80129a8:	2b08      	cmp	r3, #8
 80129aa:	d003      	beq.n	80129b4 <ethernet_input+0xa0>
 80129ac:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80129b0:	d014      	beq.n	80129dc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80129b2:	e032      	b.n	8012a1a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80129ba:	f003 0308 	and.w	r3, r3, #8
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d024      	beq.n	8012a0c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80129c2:	8afb      	ldrh	r3, [r7, #22]
 80129c4:	4619      	mov	r1, r3
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f7f6 fb8c 	bl	80090e4 <pbuf_remove_header>
 80129cc:	4603      	mov	r3, r0
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d11e      	bne.n	8012a10 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80129d2:	6839      	ldr	r1, [r7, #0]
 80129d4:	6878      	ldr	r0, [r7, #4]
 80129d6:	f7fe ff2d 	bl	8011834 <ip4_input>
      break;
 80129da:	e013      	b.n	8012a04 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80129e2:	f003 0308 	and.w	r3, r3, #8
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d014      	beq.n	8012a14 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80129ea:	8afb      	ldrh	r3, [r7, #22]
 80129ec:	4619      	mov	r1, r3
 80129ee:	6878      	ldr	r0, [r7, #4]
 80129f0:	f7f6 fb78 	bl	80090e4 <pbuf_remove_header>
 80129f4:	4603      	mov	r3, r0
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d10e      	bne.n	8012a18 <ethernet_input+0x104>
        etharp_input(p, netif);
 80129fa:	6839      	ldr	r1, [r7, #0]
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f7fe f8cd 	bl	8010b9c <etharp_input>
      break;
 8012a02:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012a04:	2300      	movs	r3, #0
 8012a06:	e00c      	b.n	8012a22 <ethernet_input+0x10e>
    goto free_and_return;
 8012a08:	bf00      	nop
 8012a0a:	e006      	b.n	8012a1a <ethernet_input+0x106>
        goto free_and_return;
 8012a0c:	bf00      	nop
 8012a0e:	e004      	b.n	8012a1a <ethernet_input+0x106>
        goto free_and_return;
 8012a10:	bf00      	nop
 8012a12:	e002      	b.n	8012a1a <ethernet_input+0x106>
        goto free_and_return;
 8012a14:	bf00      	nop
 8012a16:	e000      	b.n	8012a1a <ethernet_input+0x106>
        goto free_and_return;
 8012a18:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012a1a:	6878      	ldr	r0, [r7, #4]
 8012a1c:	f7f6 fbe8 	bl	80091f0 <pbuf_free>
  return ERR_OK;
 8012a20:	2300      	movs	r3, #0
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3718      	adds	r7, #24
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}
 8012a2a:	bf00      	nop
 8012a2c:	08016628 	.word	0x08016628

08012a30 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b086      	sub	sp, #24
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	60f8      	str	r0, [r7, #12]
 8012a38:	60b9      	str	r1, [r7, #8]
 8012a3a:	607a      	str	r2, [r7, #4]
 8012a3c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012a3e:	8c3b      	ldrh	r3, [r7, #32]
 8012a40:	4618      	mov	r0, r3
 8012a42:	f7f5 f926 	bl	8007c92 <lwip_htons>
 8012a46:	4603      	mov	r3, r0
 8012a48:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012a4a:	210e      	movs	r1, #14
 8012a4c:	68b8      	ldr	r0, [r7, #8]
 8012a4e:	f7f6 fb39 	bl	80090c4 <pbuf_add_header>
 8012a52:	4603      	mov	r3, r0
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d125      	bne.n	8012aa4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	685b      	ldr	r3, [r3, #4]
 8012a5c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	8afa      	ldrh	r2, [r7, #22]
 8012a62:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012a64:	693b      	ldr	r3, [r7, #16]
 8012a66:	2206      	movs	r2, #6
 8012a68:	6839      	ldr	r1, [r7, #0]
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f000 f85b 	bl	8012b26 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	3306      	adds	r3, #6
 8012a74:	2206      	movs	r2, #6
 8012a76:	6879      	ldr	r1, [r7, #4]
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f000 f854 	bl	8012b26 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012a84:	2b06      	cmp	r3, #6
 8012a86:	d006      	beq.n	8012a96 <ethernet_output+0x66>
 8012a88:	4b0a      	ldr	r3, [pc, #40]	; (8012ab4 <ethernet_output+0x84>)
 8012a8a:	f240 1233 	movw	r2, #307	; 0x133
 8012a8e:	490a      	ldr	r1, [pc, #40]	; (8012ab8 <ethernet_output+0x88>)
 8012a90:	480a      	ldr	r0, [pc, #40]	; (8012abc <ethernet_output+0x8c>)
 8012a92:	f000 f85b 	bl	8012b4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	699b      	ldr	r3, [r3, #24]
 8012a9a:	68b9      	ldr	r1, [r7, #8]
 8012a9c:	68f8      	ldr	r0, [r7, #12]
 8012a9e:	4798      	blx	r3
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	e002      	b.n	8012aaa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012aa4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012aa6:	f06f 0301 	mvn.w	r3, #1
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3718      	adds	r7, #24
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bd80      	pop	{r7, pc}
 8012ab2:	bf00      	nop
 8012ab4:	08016430 	.word	0x08016430
 8012ab8:	08016468 	.word	0x08016468
 8012abc:	0801649c 	.word	0x0801649c

08012ac0 <__libc_init_array>:
 8012ac0:	b570      	push	{r4, r5, r6, lr}
 8012ac2:	4e0d      	ldr	r6, [pc, #52]	; (8012af8 <__libc_init_array+0x38>)
 8012ac4:	4c0d      	ldr	r4, [pc, #52]	; (8012afc <__libc_init_array+0x3c>)
 8012ac6:	1ba4      	subs	r4, r4, r6
 8012ac8:	10a4      	asrs	r4, r4, #2
 8012aca:	2500      	movs	r5, #0
 8012acc:	42a5      	cmp	r5, r4
 8012ace:	d109      	bne.n	8012ae4 <__libc_init_array+0x24>
 8012ad0:	4e0b      	ldr	r6, [pc, #44]	; (8012b00 <__libc_init_array+0x40>)
 8012ad2:	4c0c      	ldr	r4, [pc, #48]	; (8012b04 <__libc_init_array+0x44>)
 8012ad4:	f000 ff62 	bl	801399c <_init>
 8012ad8:	1ba4      	subs	r4, r4, r6
 8012ada:	10a4      	asrs	r4, r4, #2
 8012adc:	2500      	movs	r5, #0
 8012ade:	42a5      	cmp	r5, r4
 8012ae0:	d105      	bne.n	8012aee <__libc_init_array+0x2e>
 8012ae2:	bd70      	pop	{r4, r5, r6, pc}
 8012ae4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012ae8:	4798      	blx	r3
 8012aea:	3501      	adds	r5, #1
 8012aec:	e7ee      	b.n	8012acc <__libc_init_array+0xc>
 8012aee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012af2:	4798      	blx	r3
 8012af4:	3501      	adds	r5, #1
 8012af6:	e7f2      	b.n	8012ade <__libc_init_array+0x1e>
 8012af8:	080166d8 	.word	0x080166d8
 8012afc:	080166d8 	.word	0x080166d8
 8012b00:	080166d8 	.word	0x080166d8
 8012b04:	080166dc 	.word	0x080166dc

08012b08 <memcmp>:
 8012b08:	b530      	push	{r4, r5, lr}
 8012b0a:	2400      	movs	r4, #0
 8012b0c:	42a2      	cmp	r2, r4
 8012b0e:	d101      	bne.n	8012b14 <memcmp+0xc>
 8012b10:	2000      	movs	r0, #0
 8012b12:	e007      	b.n	8012b24 <memcmp+0x1c>
 8012b14:	5d03      	ldrb	r3, [r0, r4]
 8012b16:	3401      	adds	r4, #1
 8012b18:	190d      	adds	r5, r1, r4
 8012b1a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8012b1e:	42ab      	cmp	r3, r5
 8012b20:	d0f4      	beq.n	8012b0c <memcmp+0x4>
 8012b22:	1b58      	subs	r0, r3, r5
 8012b24:	bd30      	pop	{r4, r5, pc}

08012b26 <memcpy>:
 8012b26:	b510      	push	{r4, lr}
 8012b28:	1e43      	subs	r3, r0, #1
 8012b2a:	440a      	add	r2, r1
 8012b2c:	4291      	cmp	r1, r2
 8012b2e:	d100      	bne.n	8012b32 <memcpy+0xc>
 8012b30:	bd10      	pop	{r4, pc}
 8012b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b3a:	e7f7      	b.n	8012b2c <memcpy+0x6>

08012b3c <memset>:
 8012b3c:	4402      	add	r2, r0
 8012b3e:	4603      	mov	r3, r0
 8012b40:	4293      	cmp	r3, r2
 8012b42:	d100      	bne.n	8012b46 <memset+0xa>
 8012b44:	4770      	bx	lr
 8012b46:	f803 1b01 	strb.w	r1, [r3], #1
 8012b4a:	e7f9      	b.n	8012b40 <memset+0x4>

08012b4c <iprintf>:
 8012b4c:	b40f      	push	{r0, r1, r2, r3}
 8012b4e:	4b0a      	ldr	r3, [pc, #40]	; (8012b78 <iprintf+0x2c>)
 8012b50:	b513      	push	{r0, r1, r4, lr}
 8012b52:	681c      	ldr	r4, [r3, #0]
 8012b54:	b124      	cbz	r4, 8012b60 <iprintf+0x14>
 8012b56:	69a3      	ldr	r3, [r4, #24]
 8012b58:	b913      	cbnz	r3, 8012b60 <iprintf+0x14>
 8012b5a:	4620      	mov	r0, r4
 8012b5c:	f000 f88a 	bl	8012c74 <__sinit>
 8012b60:	ab05      	add	r3, sp, #20
 8012b62:	9a04      	ldr	r2, [sp, #16]
 8012b64:	68a1      	ldr	r1, [r4, #8]
 8012b66:	9301      	str	r3, [sp, #4]
 8012b68:	4620      	mov	r0, r4
 8012b6a:	f000 f9e7 	bl	8012f3c <_vfiprintf_r>
 8012b6e:	b002      	add	sp, #8
 8012b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b74:	b004      	add	sp, #16
 8012b76:	4770      	bx	lr
 8012b78:	20000050 	.word	0x20000050

08012b7c <rand>:
 8012b7c:	b538      	push	{r3, r4, r5, lr}
 8012b7e:	4b13      	ldr	r3, [pc, #76]	; (8012bcc <rand+0x50>)
 8012b80:	681c      	ldr	r4, [r3, #0]
 8012b82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012b84:	b97b      	cbnz	r3, 8012ba6 <rand+0x2a>
 8012b86:	2018      	movs	r0, #24
 8012b88:	f000 f8fe 	bl	8012d88 <malloc>
 8012b8c:	4a10      	ldr	r2, [pc, #64]	; (8012bd0 <rand+0x54>)
 8012b8e:	4b11      	ldr	r3, [pc, #68]	; (8012bd4 <rand+0x58>)
 8012b90:	63a0      	str	r0, [r4, #56]	; 0x38
 8012b92:	e9c0 2300 	strd	r2, r3, [r0]
 8012b96:	4b10      	ldr	r3, [pc, #64]	; (8012bd8 <rand+0x5c>)
 8012b98:	6083      	str	r3, [r0, #8]
 8012b9a:	230b      	movs	r3, #11
 8012b9c:	8183      	strh	r3, [r0, #12]
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012ba6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012ba8:	480c      	ldr	r0, [pc, #48]	; (8012bdc <rand+0x60>)
 8012baa:	690a      	ldr	r2, [r1, #16]
 8012bac:	694b      	ldr	r3, [r1, #20]
 8012bae:	4c0c      	ldr	r4, [pc, #48]	; (8012be0 <rand+0x64>)
 8012bb0:	4350      	muls	r0, r2
 8012bb2:	fb04 0003 	mla	r0, r4, r3, r0
 8012bb6:	fba2 2304 	umull	r2, r3, r2, r4
 8012bba:	4403      	add	r3, r0
 8012bbc:	1c54      	adds	r4, r2, #1
 8012bbe:	f143 0500 	adc.w	r5, r3, #0
 8012bc2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8012bc6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8012bca:	bd38      	pop	{r3, r4, r5, pc}
 8012bcc:	20000050 	.word	0x20000050
 8012bd0:	abcd330e 	.word	0xabcd330e
 8012bd4:	e66d1234 	.word	0xe66d1234
 8012bd8:	0005deec 	.word	0x0005deec
 8012bdc:	5851f42d 	.word	0x5851f42d
 8012be0:	4c957f2d 	.word	0x4c957f2d

08012be4 <strcpy>:
 8012be4:	4603      	mov	r3, r0
 8012be6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012bea:	f803 2b01 	strb.w	r2, [r3], #1
 8012bee:	2a00      	cmp	r2, #0
 8012bf0:	d1f9      	bne.n	8012be6 <strcpy+0x2>
 8012bf2:	4770      	bx	lr

08012bf4 <std>:
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	b510      	push	{r4, lr}
 8012bf8:	4604      	mov	r4, r0
 8012bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8012bfe:	6083      	str	r3, [r0, #8]
 8012c00:	8181      	strh	r1, [r0, #12]
 8012c02:	6643      	str	r3, [r0, #100]	; 0x64
 8012c04:	81c2      	strh	r2, [r0, #14]
 8012c06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012c0a:	6183      	str	r3, [r0, #24]
 8012c0c:	4619      	mov	r1, r3
 8012c0e:	2208      	movs	r2, #8
 8012c10:	305c      	adds	r0, #92	; 0x5c
 8012c12:	f7ff ff93 	bl	8012b3c <memset>
 8012c16:	4b05      	ldr	r3, [pc, #20]	; (8012c2c <std+0x38>)
 8012c18:	6263      	str	r3, [r4, #36]	; 0x24
 8012c1a:	4b05      	ldr	r3, [pc, #20]	; (8012c30 <std+0x3c>)
 8012c1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012c1e:	4b05      	ldr	r3, [pc, #20]	; (8012c34 <std+0x40>)
 8012c20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012c22:	4b05      	ldr	r3, [pc, #20]	; (8012c38 <std+0x44>)
 8012c24:	6224      	str	r4, [r4, #32]
 8012c26:	6323      	str	r3, [r4, #48]	; 0x30
 8012c28:	bd10      	pop	{r4, pc}
 8012c2a:	bf00      	nop
 8012c2c:	08013499 	.word	0x08013499
 8012c30:	080134bb 	.word	0x080134bb
 8012c34:	080134f3 	.word	0x080134f3
 8012c38:	08013517 	.word	0x08013517

08012c3c <_cleanup_r>:
 8012c3c:	4901      	ldr	r1, [pc, #4]	; (8012c44 <_cleanup_r+0x8>)
 8012c3e:	f000 b885 	b.w	8012d4c <_fwalk_reent>
 8012c42:	bf00      	nop
 8012c44:	080137f1 	.word	0x080137f1

08012c48 <__sfmoreglue>:
 8012c48:	b570      	push	{r4, r5, r6, lr}
 8012c4a:	1e4a      	subs	r2, r1, #1
 8012c4c:	2568      	movs	r5, #104	; 0x68
 8012c4e:	4355      	muls	r5, r2
 8012c50:	460e      	mov	r6, r1
 8012c52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012c56:	f000 f8ed 	bl	8012e34 <_malloc_r>
 8012c5a:	4604      	mov	r4, r0
 8012c5c:	b140      	cbz	r0, 8012c70 <__sfmoreglue+0x28>
 8012c5e:	2100      	movs	r1, #0
 8012c60:	e9c0 1600 	strd	r1, r6, [r0]
 8012c64:	300c      	adds	r0, #12
 8012c66:	60a0      	str	r0, [r4, #8]
 8012c68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012c6c:	f7ff ff66 	bl	8012b3c <memset>
 8012c70:	4620      	mov	r0, r4
 8012c72:	bd70      	pop	{r4, r5, r6, pc}

08012c74 <__sinit>:
 8012c74:	6983      	ldr	r3, [r0, #24]
 8012c76:	b510      	push	{r4, lr}
 8012c78:	4604      	mov	r4, r0
 8012c7a:	bb33      	cbnz	r3, 8012cca <__sinit+0x56>
 8012c7c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012c80:	6503      	str	r3, [r0, #80]	; 0x50
 8012c82:	4b12      	ldr	r3, [pc, #72]	; (8012ccc <__sinit+0x58>)
 8012c84:	4a12      	ldr	r2, [pc, #72]	; (8012cd0 <__sinit+0x5c>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	6282      	str	r2, [r0, #40]	; 0x28
 8012c8a:	4298      	cmp	r0, r3
 8012c8c:	bf04      	itt	eq
 8012c8e:	2301      	moveq	r3, #1
 8012c90:	6183      	streq	r3, [r0, #24]
 8012c92:	f000 f81f 	bl	8012cd4 <__sfp>
 8012c96:	6060      	str	r0, [r4, #4]
 8012c98:	4620      	mov	r0, r4
 8012c9a:	f000 f81b 	bl	8012cd4 <__sfp>
 8012c9e:	60a0      	str	r0, [r4, #8]
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	f000 f817 	bl	8012cd4 <__sfp>
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	60e0      	str	r0, [r4, #12]
 8012caa:	2104      	movs	r1, #4
 8012cac:	6860      	ldr	r0, [r4, #4]
 8012cae:	f7ff ffa1 	bl	8012bf4 <std>
 8012cb2:	2201      	movs	r2, #1
 8012cb4:	2109      	movs	r1, #9
 8012cb6:	68a0      	ldr	r0, [r4, #8]
 8012cb8:	f7ff ff9c 	bl	8012bf4 <std>
 8012cbc:	2202      	movs	r2, #2
 8012cbe:	2112      	movs	r1, #18
 8012cc0:	68e0      	ldr	r0, [r4, #12]
 8012cc2:	f7ff ff97 	bl	8012bf4 <std>
 8012cc6:	2301      	movs	r3, #1
 8012cc8:	61a3      	str	r3, [r4, #24]
 8012cca:	bd10      	pop	{r4, pc}
 8012ccc:	08016638 	.word	0x08016638
 8012cd0:	08012c3d 	.word	0x08012c3d

08012cd4 <__sfp>:
 8012cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cd6:	4b1b      	ldr	r3, [pc, #108]	; (8012d44 <__sfp+0x70>)
 8012cd8:	681e      	ldr	r6, [r3, #0]
 8012cda:	69b3      	ldr	r3, [r6, #24]
 8012cdc:	4607      	mov	r7, r0
 8012cde:	b913      	cbnz	r3, 8012ce6 <__sfp+0x12>
 8012ce0:	4630      	mov	r0, r6
 8012ce2:	f7ff ffc7 	bl	8012c74 <__sinit>
 8012ce6:	3648      	adds	r6, #72	; 0x48
 8012ce8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012cec:	3b01      	subs	r3, #1
 8012cee:	d503      	bpl.n	8012cf8 <__sfp+0x24>
 8012cf0:	6833      	ldr	r3, [r6, #0]
 8012cf2:	b133      	cbz	r3, 8012d02 <__sfp+0x2e>
 8012cf4:	6836      	ldr	r6, [r6, #0]
 8012cf6:	e7f7      	b.n	8012ce8 <__sfp+0x14>
 8012cf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012cfc:	b16d      	cbz	r5, 8012d1a <__sfp+0x46>
 8012cfe:	3468      	adds	r4, #104	; 0x68
 8012d00:	e7f4      	b.n	8012cec <__sfp+0x18>
 8012d02:	2104      	movs	r1, #4
 8012d04:	4638      	mov	r0, r7
 8012d06:	f7ff ff9f 	bl	8012c48 <__sfmoreglue>
 8012d0a:	6030      	str	r0, [r6, #0]
 8012d0c:	2800      	cmp	r0, #0
 8012d0e:	d1f1      	bne.n	8012cf4 <__sfp+0x20>
 8012d10:	230c      	movs	r3, #12
 8012d12:	603b      	str	r3, [r7, #0]
 8012d14:	4604      	mov	r4, r0
 8012d16:	4620      	mov	r0, r4
 8012d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d1a:	4b0b      	ldr	r3, [pc, #44]	; (8012d48 <__sfp+0x74>)
 8012d1c:	6665      	str	r5, [r4, #100]	; 0x64
 8012d1e:	e9c4 5500 	strd	r5, r5, [r4]
 8012d22:	60a5      	str	r5, [r4, #8]
 8012d24:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012d28:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012d2c:	2208      	movs	r2, #8
 8012d2e:	4629      	mov	r1, r5
 8012d30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012d34:	f7ff ff02 	bl	8012b3c <memset>
 8012d38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012d3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012d40:	e7e9      	b.n	8012d16 <__sfp+0x42>
 8012d42:	bf00      	nop
 8012d44:	08016638 	.word	0x08016638
 8012d48:	ffff0001 	.word	0xffff0001

08012d4c <_fwalk_reent>:
 8012d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d50:	4680      	mov	r8, r0
 8012d52:	4689      	mov	r9, r1
 8012d54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012d58:	2600      	movs	r6, #0
 8012d5a:	b914      	cbnz	r4, 8012d62 <_fwalk_reent+0x16>
 8012d5c:	4630      	mov	r0, r6
 8012d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d62:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012d66:	3f01      	subs	r7, #1
 8012d68:	d501      	bpl.n	8012d6e <_fwalk_reent+0x22>
 8012d6a:	6824      	ldr	r4, [r4, #0]
 8012d6c:	e7f5      	b.n	8012d5a <_fwalk_reent+0xe>
 8012d6e:	89ab      	ldrh	r3, [r5, #12]
 8012d70:	2b01      	cmp	r3, #1
 8012d72:	d907      	bls.n	8012d84 <_fwalk_reent+0x38>
 8012d74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d78:	3301      	adds	r3, #1
 8012d7a:	d003      	beq.n	8012d84 <_fwalk_reent+0x38>
 8012d7c:	4629      	mov	r1, r5
 8012d7e:	4640      	mov	r0, r8
 8012d80:	47c8      	blx	r9
 8012d82:	4306      	orrs	r6, r0
 8012d84:	3568      	adds	r5, #104	; 0x68
 8012d86:	e7ee      	b.n	8012d66 <_fwalk_reent+0x1a>

08012d88 <malloc>:
 8012d88:	4b02      	ldr	r3, [pc, #8]	; (8012d94 <malloc+0xc>)
 8012d8a:	4601      	mov	r1, r0
 8012d8c:	6818      	ldr	r0, [r3, #0]
 8012d8e:	f000 b851 	b.w	8012e34 <_malloc_r>
 8012d92:	bf00      	nop
 8012d94:	20000050 	.word	0x20000050

08012d98 <_free_r>:
 8012d98:	b538      	push	{r3, r4, r5, lr}
 8012d9a:	4605      	mov	r5, r0
 8012d9c:	2900      	cmp	r1, #0
 8012d9e:	d045      	beq.n	8012e2c <_free_r+0x94>
 8012da0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012da4:	1f0c      	subs	r4, r1, #4
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	bfb8      	it	lt
 8012daa:	18e4      	addlt	r4, r4, r3
 8012dac:	f000 fdc0 	bl	8013930 <__malloc_lock>
 8012db0:	4a1f      	ldr	r2, [pc, #124]	; (8012e30 <_free_r+0x98>)
 8012db2:	6813      	ldr	r3, [r2, #0]
 8012db4:	4610      	mov	r0, r2
 8012db6:	b933      	cbnz	r3, 8012dc6 <_free_r+0x2e>
 8012db8:	6063      	str	r3, [r4, #4]
 8012dba:	6014      	str	r4, [r2, #0]
 8012dbc:	4628      	mov	r0, r5
 8012dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012dc2:	f000 bdb6 	b.w	8013932 <__malloc_unlock>
 8012dc6:	42a3      	cmp	r3, r4
 8012dc8:	d90c      	bls.n	8012de4 <_free_r+0x4c>
 8012dca:	6821      	ldr	r1, [r4, #0]
 8012dcc:	1862      	adds	r2, r4, r1
 8012dce:	4293      	cmp	r3, r2
 8012dd0:	bf04      	itt	eq
 8012dd2:	681a      	ldreq	r2, [r3, #0]
 8012dd4:	685b      	ldreq	r3, [r3, #4]
 8012dd6:	6063      	str	r3, [r4, #4]
 8012dd8:	bf04      	itt	eq
 8012dda:	1852      	addeq	r2, r2, r1
 8012ddc:	6022      	streq	r2, [r4, #0]
 8012dde:	6004      	str	r4, [r0, #0]
 8012de0:	e7ec      	b.n	8012dbc <_free_r+0x24>
 8012de2:	4613      	mov	r3, r2
 8012de4:	685a      	ldr	r2, [r3, #4]
 8012de6:	b10a      	cbz	r2, 8012dec <_free_r+0x54>
 8012de8:	42a2      	cmp	r2, r4
 8012dea:	d9fa      	bls.n	8012de2 <_free_r+0x4a>
 8012dec:	6819      	ldr	r1, [r3, #0]
 8012dee:	1858      	adds	r0, r3, r1
 8012df0:	42a0      	cmp	r0, r4
 8012df2:	d10b      	bne.n	8012e0c <_free_r+0x74>
 8012df4:	6820      	ldr	r0, [r4, #0]
 8012df6:	4401      	add	r1, r0
 8012df8:	1858      	adds	r0, r3, r1
 8012dfa:	4282      	cmp	r2, r0
 8012dfc:	6019      	str	r1, [r3, #0]
 8012dfe:	d1dd      	bne.n	8012dbc <_free_r+0x24>
 8012e00:	6810      	ldr	r0, [r2, #0]
 8012e02:	6852      	ldr	r2, [r2, #4]
 8012e04:	605a      	str	r2, [r3, #4]
 8012e06:	4401      	add	r1, r0
 8012e08:	6019      	str	r1, [r3, #0]
 8012e0a:	e7d7      	b.n	8012dbc <_free_r+0x24>
 8012e0c:	d902      	bls.n	8012e14 <_free_r+0x7c>
 8012e0e:	230c      	movs	r3, #12
 8012e10:	602b      	str	r3, [r5, #0]
 8012e12:	e7d3      	b.n	8012dbc <_free_r+0x24>
 8012e14:	6820      	ldr	r0, [r4, #0]
 8012e16:	1821      	adds	r1, r4, r0
 8012e18:	428a      	cmp	r2, r1
 8012e1a:	bf04      	itt	eq
 8012e1c:	6811      	ldreq	r1, [r2, #0]
 8012e1e:	6852      	ldreq	r2, [r2, #4]
 8012e20:	6062      	str	r2, [r4, #4]
 8012e22:	bf04      	itt	eq
 8012e24:	1809      	addeq	r1, r1, r0
 8012e26:	6021      	streq	r1, [r4, #0]
 8012e28:	605c      	str	r4, [r3, #4]
 8012e2a:	e7c7      	b.n	8012dbc <_free_r+0x24>
 8012e2c:	bd38      	pop	{r3, r4, r5, pc}
 8012e2e:	bf00      	nop
 8012e30:	20000280 	.word	0x20000280

08012e34 <_malloc_r>:
 8012e34:	b570      	push	{r4, r5, r6, lr}
 8012e36:	1ccd      	adds	r5, r1, #3
 8012e38:	f025 0503 	bic.w	r5, r5, #3
 8012e3c:	3508      	adds	r5, #8
 8012e3e:	2d0c      	cmp	r5, #12
 8012e40:	bf38      	it	cc
 8012e42:	250c      	movcc	r5, #12
 8012e44:	2d00      	cmp	r5, #0
 8012e46:	4606      	mov	r6, r0
 8012e48:	db01      	blt.n	8012e4e <_malloc_r+0x1a>
 8012e4a:	42a9      	cmp	r1, r5
 8012e4c:	d903      	bls.n	8012e56 <_malloc_r+0x22>
 8012e4e:	230c      	movs	r3, #12
 8012e50:	6033      	str	r3, [r6, #0]
 8012e52:	2000      	movs	r0, #0
 8012e54:	bd70      	pop	{r4, r5, r6, pc}
 8012e56:	f000 fd6b 	bl	8013930 <__malloc_lock>
 8012e5a:	4a21      	ldr	r2, [pc, #132]	; (8012ee0 <_malloc_r+0xac>)
 8012e5c:	6814      	ldr	r4, [r2, #0]
 8012e5e:	4621      	mov	r1, r4
 8012e60:	b991      	cbnz	r1, 8012e88 <_malloc_r+0x54>
 8012e62:	4c20      	ldr	r4, [pc, #128]	; (8012ee4 <_malloc_r+0xb0>)
 8012e64:	6823      	ldr	r3, [r4, #0]
 8012e66:	b91b      	cbnz	r3, 8012e70 <_malloc_r+0x3c>
 8012e68:	4630      	mov	r0, r6
 8012e6a:	f000 fb05 	bl	8013478 <_sbrk_r>
 8012e6e:	6020      	str	r0, [r4, #0]
 8012e70:	4629      	mov	r1, r5
 8012e72:	4630      	mov	r0, r6
 8012e74:	f000 fb00 	bl	8013478 <_sbrk_r>
 8012e78:	1c43      	adds	r3, r0, #1
 8012e7a:	d124      	bne.n	8012ec6 <_malloc_r+0x92>
 8012e7c:	230c      	movs	r3, #12
 8012e7e:	6033      	str	r3, [r6, #0]
 8012e80:	4630      	mov	r0, r6
 8012e82:	f000 fd56 	bl	8013932 <__malloc_unlock>
 8012e86:	e7e4      	b.n	8012e52 <_malloc_r+0x1e>
 8012e88:	680b      	ldr	r3, [r1, #0]
 8012e8a:	1b5b      	subs	r3, r3, r5
 8012e8c:	d418      	bmi.n	8012ec0 <_malloc_r+0x8c>
 8012e8e:	2b0b      	cmp	r3, #11
 8012e90:	d90f      	bls.n	8012eb2 <_malloc_r+0x7e>
 8012e92:	600b      	str	r3, [r1, #0]
 8012e94:	50cd      	str	r5, [r1, r3]
 8012e96:	18cc      	adds	r4, r1, r3
 8012e98:	4630      	mov	r0, r6
 8012e9a:	f000 fd4a 	bl	8013932 <__malloc_unlock>
 8012e9e:	f104 000b 	add.w	r0, r4, #11
 8012ea2:	1d23      	adds	r3, r4, #4
 8012ea4:	f020 0007 	bic.w	r0, r0, #7
 8012ea8:	1ac3      	subs	r3, r0, r3
 8012eaa:	d0d3      	beq.n	8012e54 <_malloc_r+0x20>
 8012eac:	425a      	negs	r2, r3
 8012eae:	50e2      	str	r2, [r4, r3]
 8012eb0:	e7d0      	b.n	8012e54 <_malloc_r+0x20>
 8012eb2:	428c      	cmp	r4, r1
 8012eb4:	684b      	ldr	r3, [r1, #4]
 8012eb6:	bf16      	itet	ne
 8012eb8:	6063      	strne	r3, [r4, #4]
 8012eba:	6013      	streq	r3, [r2, #0]
 8012ebc:	460c      	movne	r4, r1
 8012ebe:	e7eb      	b.n	8012e98 <_malloc_r+0x64>
 8012ec0:	460c      	mov	r4, r1
 8012ec2:	6849      	ldr	r1, [r1, #4]
 8012ec4:	e7cc      	b.n	8012e60 <_malloc_r+0x2c>
 8012ec6:	1cc4      	adds	r4, r0, #3
 8012ec8:	f024 0403 	bic.w	r4, r4, #3
 8012ecc:	42a0      	cmp	r0, r4
 8012ece:	d005      	beq.n	8012edc <_malloc_r+0xa8>
 8012ed0:	1a21      	subs	r1, r4, r0
 8012ed2:	4630      	mov	r0, r6
 8012ed4:	f000 fad0 	bl	8013478 <_sbrk_r>
 8012ed8:	3001      	adds	r0, #1
 8012eda:	d0cf      	beq.n	8012e7c <_malloc_r+0x48>
 8012edc:	6025      	str	r5, [r4, #0]
 8012ede:	e7db      	b.n	8012e98 <_malloc_r+0x64>
 8012ee0:	20000280 	.word	0x20000280
 8012ee4:	20000284 	.word	0x20000284

08012ee8 <__sfputc_r>:
 8012ee8:	6893      	ldr	r3, [r2, #8]
 8012eea:	3b01      	subs	r3, #1
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	b410      	push	{r4}
 8012ef0:	6093      	str	r3, [r2, #8]
 8012ef2:	da08      	bge.n	8012f06 <__sfputc_r+0x1e>
 8012ef4:	6994      	ldr	r4, [r2, #24]
 8012ef6:	42a3      	cmp	r3, r4
 8012ef8:	db01      	blt.n	8012efe <__sfputc_r+0x16>
 8012efa:	290a      	cmp	r1, #10
 8012efc:	d103      	bne.n	8012f06 <__sfputc_r+0x1e>
 8012efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f02:	f000 bb0d 	b.w	8013520 <__swbuf_r>
 8012f06:	6813      	ldr	r3, [r2, #0]
 8012f08:	1c58      	adds	r0, r3, #1
 8012f0a:	6010      	str	r0, [r2, #0]
 8012f0c:	7019      	strb	r1, [r3, #0]
 8012f0e:	4608      	mov	r0, r1
 8012f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f14:	4770      	bx	lr

08012f16 <__sfputs_r>:
 8012f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f18:	4606      	mov	r6, r0
 8012f1a:	460f      	mov	r7, r1
 8012f1c:	4614      	mov	r4, r2
 8012f1e:	18d5      	adds	r5, r2, r3
 8012f20:	42ac      	cmp	r4, r5
 8012f22:	d101      	bne.n	8012f28 <__sfputs_r+0x12>
 8012f24:	2000      	movs	r0, #0
 8012f26:	e007      	b.n	8012f38 <__sfputs_r+0x22>
 8012f28:	463a      	mov	r2, r7
 8012f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f2e:	4630      	mov	r0, r6
 8012f30:	f7ff ffda 	bl	8012ee8 <__sfputc_r>
 8012f34:	1c43      	adds	r3, r0, #1
 8012f36:	d1f3      	bne.n	8012f20 <__sfputs_r+0xa>
 8012f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012f3c <_vfiprintf_r>:
 8012f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f40:	460c      	mov	r4, r1
 8012f42:	b09d      	sub	sp, #116	; 0x74
 8012f44:	4617      	mov	r7, r2
 8012f46:	461d      	mov	r5, r3
 8012f48:	4606      	mov	r6, r0
 8012f4a:	b118      	cbz	r0, 8012f54 <_vfiprintf_r+0x18>
 8012f4c:	6983      	ldr	r3, [r0, #24]
 8012f4e:	b90b      	cbnz	r3, 8012f54 <_vfiprintf_r+0x18>
 8012f50:	f7ff fe90 	bl	8012c74 <__sinit>
 8012f54:	4b7c      	ldr	r3, [pc, #496]	; (8013148 <_vfiprintf_r+0x20c>)
 8012f56:	429c      	cmp	r4, r3
 8012f58:	d158      	bne.n	801300c <_vfiprintf_r+0xd0>
 8012f5a:	6874      	ldr	r4, [r6, #4]
 8012f5c:	89a3      	ldrh	r3, [r4, #12]
 8012f5e:	0718      	lsls	r0, r3, #28
 8012f60:	d55e      	bpl.n	8013020 <_vfiprintf_r+0xe4>
 8012f62:	6923      	ldr	r3, [r4, #16]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d05b      	beq.n	8013020 <_vfiprintf_r+0xe4>
 8012f68:	2300      	movs	r3, #0
 8012f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8012f6c:	2320      	movs	r3, #32
 8012f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012f72:	2330      	movs	r3, #48	; 0x30
 8012f74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012f78:	9503      	str	r5, [sp, #12]
 8012f7a:	f04f 0b01 	mov.w	fp, #1
 8012f7e:	46b8      	mov	r8, r7
 8012f80:	4645      	mov	r5, r8
 8012f82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012f86:	b10b      	cbz	r3, 8012f8c <_vfiprintf_r+0x50>
 8012f88:	2b25      	cmp	r3, #37	; 0x25
 8012f8a:	d154      	bne.n	8013036 <_vfiprintf_r+0xfa>
 8012f8c:	ebb8 0a07 	subs.w	sl, r8, r7
 8012f90:	d00b      	beq.n	8012faa <_vfiprintf_r+0x6e>
 8012f92:	4653      	mov	r3, sl
 8012f94:	463a      	mov	r2, r7
 8012f96:	4621      	mov	r1, r4
 8012f98:	4630      	mov	r0, r6
 8012f9a:	f7ff ffbc 	bl	8012f16 <__sfputs_r>
 8012f9e:	3001      	adds	r0, #1
 8012fa0:	f000 80c2 	beq.w	8013128 <_vfiprintf_r+0x1ec>
 8012fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fa6:	4453      	add	r3, sl
 8012fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8012faa:	f898 3000 	ldrb.w	r3, [r8]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	f000 80ba 	beq.w	8013128 <_vfiprintf_r+0x1ec>
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8012fba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012fbe:	9304      	str	r3, [sp, #16]
 8012fc0:	9307      	str	r3, [sp, #28]
 8012fc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012fc6:	931a      	str	r3, [sp, #104]	; 0x68
 8012fc8:	46a8      	mov	r8, r5
 8012fca:	2205      	movs	r2, #5
 8012fcc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012fd0:	485e      	ldr	r0, [pc, #376]	; (801314c <_vfiprintf_r+0x210>)
 8012fd2:	f7ed f905 	bl	80001e0 <memchr>
 8012fd6:	9b04      	ldr	r3, [sp, #16]
 8012fd8:	bb78      	cbnz	r0, 801303a <_vfiprintf_r+0xfe>
 8012fda:	06d9      	lsls	r1, r3, #27
 8012fdc:	bf44      	itt	mi
 8012fde:	2220      	movmi	r2, #32
 8012fe0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012fe4:	071a      	lsls	r2, r3, #28
 8012fe6:	bf44      	itt	mi
 8012fe8:	222b      	movmi	r2, #43	; 0x2b
 8012fea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012fee:	782a      	ldrb	r2, [r5, #0]
 8012ff0:	2a2a      	cmp	r2, #42	; 0x2a
 8012ff2:	d02a      	beq.n	801304a <_vfiprintf_r+0x10e>
 8012ff4:	9a07      	ldr	r2, [sp, #28]
 8012ff6:	46a8      	mov	r8, r5
 8012ff8:	2000      	movs	r0, #0
 8012ffa:	250a      	movs	r5, #10
 8012ffc:	4641      	mov	r1, r8
 8012ffe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013002:	3b30      	subs	r3, #48	; 0x30
 8013004:	2b09      	cmp	r3, #9
 8013006:	d969      	bls.n	80130dc <_vfiprintf_r+0x1a0>
 8013008:	b360      	cbz	r0, 8013064 <_vfiprintf_r+0x128>
 801300a:	e024      	b.n	8013056 <_vfiprintf_r+0x11a>
 801300c:	4b50      	ldr	r3, [pc, #320]	; (8013150 <_vfiprintf_r+0x214>)
 801300e:	429c      	cmp	r4, r3
 8013010:	d101      	bne.n	8013016 <_vfiprintf_r+0xda>
 8013012:	68b4      	ldr	r4, [r6, #8]
 8013014:	e7a2      	b.n	8012f5c <_vfiprintf_r+0x20>
 8013016:	4b4f      	ldr	r3, [pc, #316]	; (8013154 <_vfiprintf_r+0x218>)
 8013018:	429c      	cmp	r4, r3
 801301a:	bf08      	it	eq
 801301c:	68f4      	ldreq	r4, [r6, #12]
 801301e:	e79d      	b.n	8012f5c <_vfiprintf_r+0x20>
 8013020:	4621      	mov	r1, r4
 8013022:	4630      	mov	r0, r6
 8013024:	f000 fae0 	bl	80135e8 <__swsetup_r>
 8013028:	2800      	cmp	r0, #0
 801302a:	d09d      	beq.n	8012f68 <_vfiprintf_r+0x2c>
 801302c:	f04f 30ff 	mov.w	r0, #4294967295
 8013030:	b01d      	add	sp, #116	; 0x74
 8013032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013036:	46a8      	mov	r8, r5
 8013038:	e7a2      	b.n	8012f80 <_vfiprintf_r+0x44>
 801303a:	4a44      	ldr	r2, [pc, #272]	; (801314c <_vfiprintf_r+0x210>)
 801303c:	1a80      	subs	r0, r0, r2
 801303e:	fa0b f000 	lsl.w	r0, fp, r0
 8013042:	4318      	orrs	r0, r3
 8013044:	9004      	str	r0, [sp, #16]
 8013046:	4645      	mov	r5, r8
 8013048:	e7be      	b.n	8012fc8 <_vfiprintf_r+0x8c>
 801304a:	9a03      	ldr	r2, [sp, #12]
 801304c:	1d11      	adds	r1, r2, #4
 801304e:	6812      	ldr	r2, [r2, #0]
 8013050:	9103      	str	r1, [sp, #12]
 8013052:	2a00      	cmp	r2, #0
 8013054:	db01      	blt.n	801305a <_vfiprintf_r+0x11e>
 8013056:	9207      	str	r2, [sp, #28]
 8013058:	e004      	b.n	8013064 <_vfiprintf_r+0x128>
 801305a:	4252      	negs	r2, r2
 801305c:	f043 0302 	orr.w	r3, r3, #2
 8013060:	9207      	str	r2, [sp, #28]
 8013062:	9304      	str	r3, [sp, #16]
 8013064:	f898 3000 	ldrb.w	r3, [r8]
 8013068:	2b2e      	cmp	r3, #46	; 0x2e
 801306a:	d10e      	bne.n	801308a <_vfiprintf_r+0x14e>
 801306c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013070:	2b2a      	cmp	r3, #42	; 0x2a
 8013072:	d138      	bne.n	80130e6 <_vfiprintf_r+0x1aa>
 8013074:	9b03      	ldr	r3, [sp, #12]
 8013076:	1d1a      	adds	r2, r3, #4
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	9203      	str	r2, [sp, #12]
 801307c:	2b00      	cmp	r3, #0
 801307e:	bfb8      	it	lt
 8013080:	f04f 33ff 	movlt.w	r3, #4294967295
 8013084:	f108 0802 	add.w	r8, r8, #2
 8013088:	9305      	str	r3, [sp, #20]
 801308a:	4d33      	ldr	r5, [pc, #204]	; (8013158 <_vfiprintf_r+0x21c>)
 801308c:	f898 1000 	ldrb.w	r1, [r8]
 8013090:	2203      	movs	r2, #3
 8013092:	4628      	mov	r0, r5
 8013094:	f7ed f8a4 	bl	80001e0 <memchr>
 8013098:	b140      	cbz	r0, 80130ac <_vfiprintf_r+0x170>
 801309a:	2340      	movs	r3, #64	; 0x40
 801309c:	1b40      	subs	r0, r0, r5
 801309e:	fa03 f000 	lsl.w	r0, r3, r0
 80130a2:	9b04      	ldr	r3, [sp, #16]
 80130a4:	4303      	orrs	r3, r0
 80130a6:	f108 0801 	add.w	r8, r8, #1
 80130aa:	9304      	str	r3, [sp, #16]
 80130ac:	f898 1000 	ldrb.w	r1, [r8]
 80130b0:	482a      	ldr	r0, [pc, #168]	; (801315c <_vfiprintf_r+0x220>)
 80130b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80130b6:	2206      	movs	r2, #6
 80130b8:	f108 0701 	add.w	r7, r8, #1
 80130bc:	f7ed f890 	bl	80001e0 <memchr>
 80130c0:	2800      	cmp	r0, #0
 80130c2:	d037      	beq.n	8013134 <_vfiprintf_r+0x1f8>
 80130c4:	4b26      	ldr	r3, [pc, #152]	; (8013160 <_vfiprintf_r+0x224>)
 80130c6:	bb1b      	cbnz	r3, 8013110 <_vfiprintf_r+0x1d4>
 80130c8:	9b03      	ldr	r3, [sp, #12]
 80130ca:	3307      	adds	r3, #7
 80130cc:	f023 0307 	bic.w	r3, r3, #7
 80130d0:	3308      	adds	r3, #8
 80130d2:	9303      	str	r3, [sp, #12]
 80130d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130d6:	444b      	add	r3, r9
 80130d8:	9309      	str	r3, [sp, #36]	; 0x24
 80130da:	e750      	b.n	8012f7e <_vfiprintf_r+0x42>
 80130dc:	fb05 3202 	mla	r2, r5, r2, r3
 80130e0:	2001      	movs	r0, #1
 80130e2:	4688      	mov	r8, r1
 80130e4:	e78a      	b.n	8012ffc <_vfiprintf_r+0xc0>
 80130e6:	2300      	movs	r3, #0
 80130e8:	f108 0801 	add.w	r8, r8, #1
 80130ec:	9305      	str	r3, [sp, #20]
 80130ee:	4619      	mov	r1, r3
 80130f0:	250a      	movs	r5, #10
 80130f2:	4640      	mov	r0, r8
 80130f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80130f8:	3a30      	subs	r2, #48	; 0x30
 80130fa:	2a09      	cmp	r2, #9
 80130fc:	d903      	bls.n	8013106 <_vfiprintf_r+0x1ca>
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d0c3      	beq.n	801308a <_vfiprintf_r+0x14e>
 8013102:	9105      	str	r1, [sp, #20]
 8013104:	e7c1      	b.n	801308a <_vfiprintf_r+0x14e>
 8013106:	fb05 2101 	mla	r1, r5, r1, r2
 801310a:	2301      	movs	r3, #1
 801310c:	4680      	mov	r8, r0
 801310e:	e7f0      	b.n	80130f2 <_vfiprintf_r+0x1b6>
 8013110:	ab03      	add	r3, sp, #12
 8013112:	9300      	str	r3, [sp, #0]
 8013114:	4622      	mov	r2, r4
 8013116:	4b13      	ldr	r3, [pc, #76]	; (8013164 <_vfiprintf_r+0x228>)
 8013118:	a904      	add	r1, sp, #16
 801311a:	4630      	mov	r0, r6
 801311c:	f3af 8000 	nop.w
 8013120:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013124:	4681      	mov	r9, r0
 8013126:	d1d5      	bne.n	80130d4 <_vfiprintf_r+0x198>
 8013128:	89a3      	ldrh	r3, [r4, #12]
 801312a:	065b      	lsls	r3, r3, #25
 801312c:	f53f af7e 	bmi.w	801302c <_vfiprintf_r+0xf0>
 8013130:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013132:	e77d      	b.n	8013030 <_vfiprintf_r+0xf4>
 8013134:	ab03      	add	r3, sp, #12
 8013136:	9300      	str	r3, [sp, #0]
 8013138:	4622      	mov	r2, r4
 801313a:	4b0a      	ldr	r3, [pc, #40]	; (8013164 <_vfiprintf_r+0x228>)
 801313c:	a904      	add	r1, sp, #16
 801313e:	4630      	mov	r0, r6
 8013140:	f000 f888 	bl	8013254 <_printf_i>
 8013144:	e7ec      	b.n	8013120 <_vfiprintf_r+0x1e4>
 8013146:	bf00      	nop
 8013148:	0801665c 	.word	0x0801665c
 801314c:	0801669c 	.word	0x0801669c
 8013150:	0801667c 	.word	0x0801667c
 8013154:	0801663c 	.word	0x0801663c
 8013158:	080166a2 	.word	0x080166a2
 801315c:	080166a6 	.word	0x080166a6
 8013160:	00000000 	.word	0x00000000
 8013164:	08012f17 	.word	0x08012f17

08013168 <_printf_common>:
 8013168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801316c:	4691      	mov	r9, r2
 801316e:	461f      	mov	r7, r3
 8013170:	688a      	ldr	r2, [r1, #8]
 8013172:	690b      	ldr	r3, [r1, #16]
 8013174:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013178:	4293      	cmp	r3, r2
 801317a:	bfb8      	it	lt
 801317c:	4613      	movlt	r3, r2
 801317e:	f8c9 3000 	str.w	r3, [r9]
 8013182:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013186:	4606      	mov	r6, r0
 8013188:	460c      	mov	r4, r1
 801318a:	b112      	cbz	r2, 8013192 <_printf_common+0x2a>
 801318c:	3301      	adds	r3, #1
 801318e:	f8c9 3000 	str.w	r3, [r9]
 8013192:	6823      	ldr	r3, [r4, #0]
 8013194:	0699      	lsls	r1, r3, #26
 8013196:	bf42      	ittt	mi
 8013198:	f8d9 3000 	ldrmi.w	r3, [r9]
 801319c:	3302      	addmi	r3, #2
 801319e:	f8c9 3000 	strmi.w	r3, [r9]
 80131a2:	6825      	ldr	r5, [r4, #0]
 80131a4:	f015 0506 	ands.w	r5, r5, #6
 80131a8:	d107      	bne.n	80131ba <_printf_common+0x52>
 80131aa:	f104 0a19 	add.w	sl, r4, #25
 80131ae:	68e3      	ldr	r3, [r4, #12]
 80131b0:	f8d9 2000 	ldr.w	r2, [r9]
 80131b4:	1a9b      	subs	r3, r3, r2
 80131b6:	42ab      	cmp	r3, r5
 80131b8:	dc28      	bgt.n	801320c <_printf_common+0xa4>
 80131ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80131be:	6822      	ldr	r2, [r4, #0]
 80131c0:	3300      	adds	r3, #0
 80131c2:	bf18      	it	ne
 80131c4:	2301      	movne	r3, #1
 80131c6:	0692      	lsls	r2, r2, #26
 80131c8:	d42d      	bmi.n	8013226 <_printf_common+0xbe>
 80131ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80131ce:	4639      	mov	r1, r7
 80131d0:	4630      	mov	r0, r6
 80131d2:	47c0      	blx	r8
 80131d4:	3001      	adds	r0, #1
 80131d6:	d020      	beq.n	801321a <_printf_common+0xb2>
 80131d8:	6823      	ldr	r3, [r4, #0]
 80131da:	68e5      	ldr	r5, [r4, #12]
 80131dc:	f8d9 2000 	ldr.w	r2, [r9]
 80131e0:	f003 0306 	and.w	r3, r3, #6
 80131e4:	2b04      	cmp	r3, #4
 80131e6:	bf08      	it	eq
 80131e8:	1aad      	subeq	r5, r5, r2
 80131ea:	68a3      	ldr	r3, [r4, #8]
 80131ec:	6922      	ldr	r2, [r4, #16]
 80131ee:	bf0c      	ite	eq
 80131f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80131f4:	2500      	movne	r5, #0
 80131f6:	4293      	cmp	r3, r2
 80131f8:	bfc4      	itt	gt
 80131fa:	1a9b      	subgt	r3, r3, r2
 80131fc:	18ed      	addgt	r5, r5, r3
 80131fe:	f04f 0900 	mov.w	r9, #0
 8013202:	341a      	adds	r4, #26
 8013204:	454d      	cmp	r5, r9
 8013206:	d11a      	bne.n	801323e <_printf_common+0xd6>
 8013208:	2000      	movs	r0, #0
 801320a:	e008      	b.n	801321e <_printf_common+0xb6>
 801320c:	2301      	movs	r3, #1
 801320e:	4652      	mov	r2, sl
 8013210:	4639      	mov	r1, r7
 8013212:	4630      	mov	r0, r6
 8013214:	47c0      	blx	r8
 8013216:	3001      	adds	r0, #1
 8013218:	d103      	bne.n	8013222 <_printf_common+0xba>
 801321a:	f04f 30ff 	mov.w	r0, #4294967295
 801321e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013222:	3501      	adds	r5, #1
 8013224:	e7c3      	b.n	80131ae <_printf_common+0x46>
 8013226:	18e1      	adds	r1, r4, r3
 8013228:	1c5a      	adds	r2, r3, #1
 801322a:	2030      	movs	r0, #48	; 0x30
 801322c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013230:	4422      	add	r2, r4
 8013232:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013236:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801323a:	3302      	adds	r3, #2
 801323c:	e7c5      	b.n	80131ca <_printf_common+0x62>
 801323e:	2301      	movs	r3, #1
 8013240:	4622      	mov	r2, r4
 8013242:	4639      	mov	r1, r7
 8013244:	4630      	mov	r0, r6
 8013246:	47c0      	blx	r8
 8013248:	3001      	adds	r0, #1
 801324a:	d0e6      	beq.n	801321a <_printf_common+0xb2>
 801324c:	f109 0901 	add.w	r9, r9, #1
 8013250:	e7d8      	b.n	8013204 <_printf_common+0x9c>
	...

08013254 <_printf_i>:
 8013254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013258:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801325c:	460c      	mov	r4, r1
 801325e:	7e09      	ldrb	r1, [r1, #24]
 8013260:	b085      	sub	sp, #20
 8013262:	296e      	cmp	r1, #110	; 0x6e
 8013264:	4617      	mov	r7, r2
 8013266:	4606      	mov	r6, r0
 8013268:	4698      	mov	r8, r3
 801326a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801326c:	f000 80b3 	beq.w	80133d6 <_printf_i+0x182>
 8013270:	d822      	bhi.n	80132b8 <_printf_i+0x64>
 8013272:	2963      	cmp	r1, #99	; 0x63
 8013274:	d036      	beq.n	80132e4 <_printf_i+0x90>
 8013276:	d80a      	bhi.n	801328e <_printf_i+0x3a>
 8013278:	2900      	cmp	r1, #0
 801327a:	f000 80b9 	beq.w	80133f0 <_printf_i+0x19c>
 801327e:	2958      	cmp	r1, #88	; 0x58
 8013280:	f000 8083 	beq.w	801338a <_printf_i+0x136>
 8013284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013288:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801328c:	e032      	b.n	80132f4 <_printf_i+0xa0>
 801328e:	2964      	cmp	r1, #100	; 0x64
 8013290:	d001      	beq.n	8013296 <_printf_i+0x42>
 8013292:	2969      	cmp	r1, #105	; 0x69
 8013294:	d1f6      	bne.n	8013284 <_printf_i+0x30>
 8013296:	6820      	ldr	r0, [r4, #0]
 8013298:	6813      	ldr	r3, [r2, #0]
 801329a:	0605      	lsls	r5, r0, #24
 801329c:	f103 0104 	add.w	r1, r3, #4
 80132a0:	d52a      	bpl.n	80132f8 <_printf_i+0xa4>
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	6011      	str	r1, [r2, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	da03      	bge.n	80132b2 <_printf_i+0x5e>
 80132aa:	222d      	movs	r2, #45	; 0x2d
 80132ac:	425b      	negs	r3, r3
 80132ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80132b2:	486f      	ldr	r0, [pc, #444]	; (8013470 <_printf_i+0x21c>)
 80132b4:	220a      	movs	r2, #10
 80132b6:	e039      	b.n	801332c <_printf_i+0xd8>
 80132b8:	2973      	cmp	r1, #115	; 0x73
 80132ba:	f000 809d 	beq.w	80133f8 <_printf_i+0x1a4>
 80132be:	d808      	bhi.n	80132d2 <_printf_i+0x7e>
 80132c0:	296f      	cmp	r1, #111	; 0x6f
 80132c2:	d020      	beq.n	8013306 <_printf_i+0xb2>
 80132c4:	2970      	cmp	r1, #112	; 0x70
 80132c6:	d1dd      	bne.n	8013284 <_printf_i+0x30>
 80132c8:	6823      	ldr	r3, [r4, #0]
 80132ca:	f043 0320 	orr.w	r3, r3, #32
 80132ce:	6023      	str	r3, [r4, #0]
 80132d0:	e003      	b.n	80132da <_printf_i+0x86>
 80132d2:	2975      	cmp	r1, #117	; 0x75
 80132d4:	d017      	beq.n	8013306 <_printf_i+0xb2>
 80132d6:	2978      	cmp	r1, #120	; 0x78
 80132d8:	d1d4      	bne.n	8013284 <_printf_i+0x30>
 80132da:	2378      	movs	r3, #120	; 0x78
 80132dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80132e0:	4864      	ldr	r0, [pc, #400]	; (8013474 <_printf_i+0x220>)
 80132e2:	e055      	b.n	8013390 <_printf_i+0x13c>
 80132e4:	6813      	ldr	r3, [r2, #0]
 80132e6:	1d19      	adds	r1, r3, #4
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	6011      	str	r1, [r2, #0]
 80132ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80132f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80132f4:	2301      	movs	r3, #1
 80132f6:	e08c      	b.n	8013412 <_printf_i+0x1be>
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	6011      	str	r1, [r2, #0]
 80132fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013300:	bf18      	it	ne
 8013302:	b21b      	sxthne	r3, r3
 8013304:	e7cf      	b.n	80132a6 <_printf_i+0x52>
 8013306:	6813      	ldr	r3, [r2, #0]
 8013308:	6825      	ldr	r5, [r4, #0]
 801330a:	1d18      	adds	r0, r3, #4
 801330c:	6010      	str	r0, [r2, #0]
 801330e:	0628      	lsls	r0, r5, #24
 8013310:	d501      	bpl.n	8013316 <_printf_i+0xc2>
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	e002      	b.n	801331c <_printf_i+0xc8>
 8013316:	0668      	lsls	r0, r5, #25
 8013318:	d5fb      	bpl.n	8013312 <_printf_i+0xbe>
 801331a:	881b      	ldrh	r3, [r3, #0]
 801331c:	4854      	ldr	r0, [pc, #336]	; (8013470 <_printf_i+0x21c>)
 801331e:	296f      	cmp	r1, #111	; 0x6f
 8013320:	bf14      	ite	ne
 8013322:	220a      	movne	r2, #10
 8013324:	2208      	moveq	r2, #8
 8013326:	2100      	movs	r1, #0
 8013328:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801332c:	6865      	ldr	r5, [r4, #4]
 801332e:	60a5      	str	r5, [r4, #8]
 8013330:	2d00      	cmp	r5, #0
 8013332:	f2c0 8095 	blt.w	8013460 <_printf_i+0x20c>
 8013336:	6821      	ldr	r1, [r4, #0]
 8013338:	f021 0104 	bic.w	r1, r1, #4
 801333c:	6021      	str	r1, [r4, #0]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d13d      	bne.n	80133be <_printf_i+0x16a>
 8013342:	2d00      	cmp	r5, #0
 8013344:	f040 808e 	bne.w	8013464 <_printf_i+0x210>
 8013348:	4665      	mov	r5, ip
 801334a:	2a08      	cmp	r2, #8
 801334c:	d10b      	bne.n	8013366 <_printf_i+0x112>
 801334e:	6823      	ldr	r3, [r4, #0]
 8013350:	07db      	lsls	r3, r3, #31
 8013352:	d508      	bpl.n	8013366 <_printf_i+0x112>
 8013354:	6923      	ldr	r3, [r4, #16]
 8013356:	6862      	ldr	r2, [r4, #4]
 8013358:	429a      	cmp	r2, r3
 801335a:	bfde      	ittt	le
 801335c:	2330      	movle	r3, #48	; 0x30
 801335e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013362:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013366:	ebac 0305 	sub.w	r3, ip, r5
 801336a:	6123      	str	r3, [r4, #16]
 801336c:	f8cd 8000 	str.w	r8, [sp]
 8013370:	463b      	mov	r3, r7
 8013372:	aa03      	add	r2, sp, #12
 8013374:	4621      	mov	r1, r4
 8013376:	4630      	mov	r0, r6
 8013378:	f7ff fef6 	bl	8013168 <_printf_common>
 801337c:	3001      	adds	r0, #1
 801337e:	d14d      	bne.n	801341c <_printf_i+0x1c8>
 8013380:	f04f 30ff 	mov.w	r0, #4294967295
 8013384:	b005      	add	sp, #20
 8013386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801338a:	4839      	ldr	r0, [pc, #228]	; (8013470 <_printf_i+0x21c>)
 801338c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013390:	6813      	ldr	r3, [r2, #0]
 8013392:	6821      	ldr	r1, [r4, #0]
 8013394:	1d1d      	adds	r5, r3, #4
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	6015      	str	r5, [r2, #0]
 801339a:	060a      	lsls	r2, r1, #24
 801339c:	d50b      	bpl.n	80133b6 <_printf_i+0x162>
 801339e:	07ca      	lsls	r2, r1, #31
 80133a0:	bf44      	itt	mi
 80133a2:	f041 0120 	orrmi.w	r1, r1, #32
 80133a6:	6021      	strmi	r1, [r4, #0]
 80133a8:	b91b      	cbnz	r3, 80133b2 <_printf_i+0x15e>
 80133aa:	6822      	ldr	r2, [r4, #0]
 80133ac:	f022 0220 	bic.w	r2, r2, #32
 80133b0:	6022      	str	r2, [r4, #0]
 80133b2:	2210      	movs	r2, #16
 80133b4:	e7b7      	b.n	8013326 <_printf_i+0xd2>
 80133b6:	064d      	lsls	r5, r1, #25
 80133b8:	bf48      	it	mi
 80133ba:	b29b      	uxthmi	r3, r3
 80133bc:	e7ef      	b.n	801339e <_printf_i+0x14a>
 80133be:	4665      	mov	r5, ip
 80133c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80133c4:	fb02 3311 	mls	r3, r2, r1, r3
 80133c8:	5cc3      	ldrb	r3, [r0, r3]
 80133ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80133ce:	460b      	mov	r3, r1
 80133d0:	2900      	cmp	r1, #0
 80133d2:	d1f5      	bne.n	80133c0 <_printf_i+0x16c>
 80133d4:	e7b9      	b.n	801334a <_printf_i+0xf6>
 80133d6:	6813      	ldr	r3, [r2, #0]
 80133d8:	6825      	ldr	r5, [r4, #0]
 80133da:	6961      	ldr	r1, [r4, #20]
 80133dc:	1d18      	adds	r0, r3, #4
 80133de:	6010      	str	r0, [r2, #0]
 80133e0:	0628      	lsls	r0, r5, #24
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	d501      	bpl.n	80133ea <_printf_i+0x196>
 80133e6:	6019      	str	r1, [r3, #0]
 80133e8:	e002      	b.n	80133f0 <_printf_i+0x19c>
 80133ea:	066a      	lsls	r2, r5, #25
 80133ec:	d5fb      	bpl.n	80133e6 <_printf_i+0x192>
 80133ee:	8019      	strh	r1, [r3, #0]
 80133f0:	2300      	movs	r3, #0
 80133f2:	6123      	str	r3, [r4, #16]
 80133f4:	4665      	mov	r5, ip
 80133f6:	e7b9      	b.n	801336c <_printf_i+0x118>
 80133f8:	6813      	ldr	r3, [r2, #0]
 80133fa:	1d19      	adds	r1, r3, #4
 80133fc:	6011      	str	r1, [r2, #0]
 80133fe:	681d      	ldr	r5, [r3, #0]
 8013400:	6862      	ldr	r2, [r4, #4]
 8013402:	2100      	movs	r1, #0
 8013404:	4628      	mov	r0, r5
 8013406:	f7ec feeb 	bl	80001e0 <memchr>
 801340a:	b108      	cbz	r0, 8013410 <_printf_i+0x1bc>
 801340c:	1b40      	subs	r0, r0, r5
 801340e:	6060      	str	r0, [r4, #4]
 8013410:	6863      	ldr	r3, [r4, #4]
 8013412:	6123      	str	r3, [r4, #16]
 8013414:	2300      	movs	r3, #0
 8013416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801341a:	e7a7      	b.n	801336c <_printf_i+0x118>
 801341c:	6923      	ldr	r3, [r4, #16]
 801341e:	462a      	mov	r2, r5
 8013420:	4639      	mov	r1, r7
 8013422:	4630      	mov	r0, r6
 8013424:	47c0      	blx	r8
 8013426:	3001      	adds	r0, #1
 8013428:	d0aa      	beq.n	8013380 <_printf_i+0x12c>
 801342a:	6823      	ldr	r3, [r4, #0]
 801342c:	079b      	lsls	r3, r3, #30
 801342e:	d413      	bmi.n	8013458 <_printf_i+0x204>
 8013430:	68e0      	ldr	r0, [r4, #12]
 8013432:	9b03      	ldr	r3, [sp, #12]
 8013434:	4298      	cmp	r0, r3
 8013436:	bfb8      	it	lt
 8013438:	4618      	movlt	r0, r3
 801343a:	e7a3      	b.n	8013384 <_printf_i+0x130>
 801343c:	2301      	movs	r3, #1
 801343e:	464a      	mov	r2, r9
 8013440:	4639      	mov	r1, r7
 8013442:	4630      	mov	r0, r6
 8013444:	47c0      	blx	r8
 8013446:	3001      	adds	r0, #1
 8013448:	d09a      	beq.n	8013380 <_printf_i+0x12c>
 801344a:	3501      	adds	r5, #1
 801344c:	68e3      	ldr	r3, [r4, #12]
 801344e:	9a03      	ldr	r2, [sp, #12]
 8013450:	1a9b      	subs	r3, r3, r2
 8013452:	42ab      	cmp	r3, r5
 8013454:	dcf2      	bgt.n	801343c <_printf_i+0x1e8>
 8013456:	e7eb      	b.n	8013430 <_printf_i+0x1dc>
 8013458:	2500      	movs	r5, #0
 801345a:	f104 0919 	add.w	r9, r4, #25
 801345e:	e7f5      	b.n	801344c <_printf_i+0x1f8>
 8013460:	2b00      	cmp	r3, #0
 8013462:	d1ac      	bne.n	80133be <_printf_i+0x16a>
 8013464:	7803      	ldrb	r3, [r0, #0]
 8013466:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801346a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801346e:	e76c      	b.n	801334a <_printf_i+0xf6>
 8013470:	080166ad 	.word	0x080166ad
 8013474:	080166be 	.word	0x080166be

08013478 <_sbrk_r>:
 8013478:	b538      	push	{r3, r4, r5, lr}
 801347a:	4c06      	ldr	r4, [pc, #24]	; (8013494 <_sbrk_r+0x1c>)
 801347c:	2300      	movs	r3, #0
 801347e:	4605      	mov	r5, r0
 8013480:	4608      	mov	r0, r1
 8013482:	6023      	str	r3, [r4, #0]
 8013484:	f7ed ff7e 	bl	8001384 <_sbrk>
 8013488:	1c43      	adds	r3, r0, #1
 801348a:	d102      	bne.n	8013492 <_sbrk_r+0x1a>
 801348c:	6823      	ldr	r3, [r4, #0]
 801348e:	b103      	cbz	r3, 8013492 <_sbrk_r+0x1a>
 8013490:	602b      	str	r3, [r5, #0]
 8013492:	bd38      	pop	{r3, r4, r5, pc}
 8013494:	2000bce0 	.word	0x2000bce0

08013498 <__sread>:
 8013498:	b510      	push	{r4, lr}
 801349a:	460c      	mov	r4, r1
 801349c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134a0:	f000 fa48 	bl	8013934 <_read_r>
 80134a4:	2800      	cmp	r0, #0
 80134a6:	bfab      	itete	ge
 80134a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80134aa:	89a3      	ldrhlt	r3, [r4, #12]
 80134ac:	181b      	addge	r3, r3, r0
 80134ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80134b2:	bfac      	ite	ge
 80134b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80134b6:	81a3      	strhlt	r3, [r4, #12]
 80134b8:	bd10      	pop	{r4, pc}

080134ba <__swrite>:
 80134ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134be:	461f      	mov	r7, r3
 80134c0:	898b      	ldrh	r3, [r1, #12]
 80134c2:	05db      	lsls	r3, r3, #23
 80134c4:	4605      	mov	r5, r0
 80134c6:	460c      	mov	r4, r1
 80134c8:	4616      	mov	r6, r2
 80134ca:	d505      	bpl.n	80134d8 <__swrite+0x1e>
 80134cc:	2302      	movs	r3, #2
 80134ce:	2200      	movs	r2, #0
 80134d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134d4:	f000 f9b6 	bl	8013844 <_lseek_r>
 80134d8:	89a3      	ldrh	r3, [r4, #12]
 80134da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80134e2:	81a3      	strh	r3, [r4, #12]
 80134e4:	4632      	mov	r2, r6
 80134e6:	463b      	mov	r3, r7
 80134e8:	4628      	mov	r0, r5
 80134ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134ee:	f000 b869 	b.w	80135c4 <_write_r>

080134f2 <__sseek>:
 80134f2:	b510      	push	{r4, lr}
 80134f4:	460c      	mov	r4, r1
 80134f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134fa:	f000 f9a3 	bl	8013844 <_lseek_r>
 80134fe:	1c43      	adds	r3, r0, #1
 8013500:	89a3      	ldrh	r3, [r4, #12]
 8013502:	bf15      	itete	ne
 8013504:	6560      	strne	r0, [r4, #84]	; 0x54
 8013506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801350a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801350e:	81a3      	strheq	r3, [r4, #12]
 8013510:	bf18      	it	ne
 8013512:	81a3      	strhne	r3, [r4, #12]
 8013514:	bd10      	pop	{r4, pc}

08013516 <__sclose>:
 8013516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801351a:	f000 b8d3 	b.w	80136c4 <_close_r>
	...

08013520 <__swbuf_r>:
 8013520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013522:	460e      	mov	r6, r1
 8013524:	4614      	mov	r4, r2
 8013526:	4605      	mov	r5, r0
 8013528:	b118      	cbz	r0, 8013532 <__swbuf_r+0x12>
 801352a:	6983      	ldr	r3, [r0, #24]
 801352c:	b90b      	cbnz	r3, 8013532 <__swbuf_r+0x12>
 801352e:	f7ff fba1 	bl	8012c74 <__sinit>
 8013532:	4b21      	ldr	r3, [pc, #132]	; (80135b8 <__swbuf_r+0x98>)
 8013534:	429c      	cmp	r4, r3
 8013536:	d12a      	bne.n	801358e <__swbuf_r+0x6e>
 8013538:	686c      	ldr	r4, [r5, #4]
 801353a:	69a3      	ldr	r3, [r4, #24]
 801353c:	60a3      	str	r3, [r4, #8]
 801353e:	89a3      	ldrh	r3, [r4, #12]
 8013540:	071a      	lsls	r2, r3, #28
 8013542:	d52e      	bpl.n	80135a2 <__swbuf_r+0x82>
 8013544:	6923      	ldr	r3, [r4, #16]
 8013546:	b363      	cbz	r3, 80135a2 <__swbuf_r+0x82>
 8013548:	6923      	ldr	r3, [r4, #16]
 801354a:	6820      	ldr	r0, [r4, #0]
 801354c:	1ac0      	subs	r0, r0, r3
 801354e:	6963      	ldr	r3, [r4, #20]
 8013550:	b2f6      	uxtb	r6, r6
 8013552:	4283      	cmp	r3, r0
 8013554:	4637      	mov	r7, r6
 8013556:	dc04      	bgt.n	8013562 <__swbuf_r+0x42>
 8013558:	4621      	mov	r1, r4
 801355a:	4628      	mov	r0, r5
 801355c:	f000 f948 	bl	80137f0 <_fflush_r>
 8013560:	bb28      	cbnz	r0, 80135ae <__swbuf_r+0x8e>
 8013562:	68a3      	ldr	r3, [r4, #8]
 8013564:	3b01      	subs	r3, #1
 8013566:	60a3      	str	r3, [r4, #8]
 8013568:	6823      	ldr	r3, [r4, #0]
 801356a:	1c5a      	adds	r2, r3, #1
 801356c:	6022      	str	r2, [r4, #0]
 801356e:	701e      	strb	r6, [r3, #0]
 8013570:	6963      	ldr	r3, [r4, #20]
 8013572:	3001      	adds	r0, #1
 8013574:	4283      	cmp	r3, r0
 8013576:	d004      	beq.n	8013582 <__swbuf_r+0x62>
 8013578:	89a3      	ldrh	r3, [r4, #12]
 801357a:	07db      	lsls	r3, r3, #31
 801357c:	d519      	bpl.n	80135b2 <__swbuf_r+0x92>
 801357e:	2e0a      	cmp	r6, #10
 8013580:	d117      	bne.n	80135b2 <__swbuf_r+0x92>
 8013582:	4621      	mov	r1, r4
 8013584:	4628      	mov	r0, r5
 8013586:	f000 f933 	bl	80137f0 <_fflush_r>
 801358a:	b190      	cbz	r0, 80135b2 <__swbuf_r+0x92>
 801358c:	e00f      	b.n	80135ae <__swbuf_r+0x8e>
 801358e:	4b0b      	ldr	r3, [pc, #44]	; (80135bc <__swbuf_r+0x9c>)
 8013590:	429c      	cmp	r4, r3
 8013592:	d101      	bne.n	8013598 <__swbuf_r+0x78>
 8013594:	68ac      	ldr	r4, [r5, #8]
 8013596:	e7d0      	b.n	801353a <__swbuf_r+0x1a>
 8013598:	4b09      	ldr	r3, [pc, #36]	; (80135c0 <__swbuf_r+0xa0>)
 801359a:	429c      	cmp	r4, r3
 801359c:	bf08      	it	eq
 801359e:	68ec      	ldreq	r4, [r5, #12]
 80135a0:	e7cb      	b.n	801353a <__swbuf_r+0x1a>
 80135a2:	4621      	mov	r1, r4
 80135a4:	4628      	mov	r0, r5
 80135a6:	f000 f81f 	bl	80135e8 <__swsetup_r>
 80135aa:	2800      	cmp	r0, #0
 80135ac:	d0cc      	beq.n	8013548 <__swbuf_r+0x28>
 80135ae:	f04f 37ff 	mov.w	r7, #4294967295
 80135b2:	4638      	mov	r0, r7
 80135b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135b6:	bf00      	nop
 80135b8:	0801665c 	.word	0x0801665c
 80135bc:	0801667c 	.word	0x0801667c
 80135c0:	0801663c 	.word	0x0801663c

080135c4 <_write_r>:
 80135c4:	b538      	push	{r3, r4, r5, lr}
 80135c6:	4c07      	ldr	r4, [pc, #28]	; (80135e4 <_write_r+0x20>)
 80135c8:	4605      	mov	r5, r0
 80135ca:	4608      	mov	r0, r1
 80135cc:	4611      	mov	r1, r2
 80135ce:	2200      	movs	r2, #0
 80135d0:	6022      	str	r2, [r4, #0]
 80135d2:	461a      	mov	r2, r3
 80135d4:	f7ed fe85 	bl	80012e2 <_write>
 80135d8:	1c43      	adds	r3, r0, #1
 80135da:	d102      	bne.n	80135e2 <_write_r+0x1e>
 80135dc:	6823      	ldr	r3, [r4, #0]
 80135de:	b103      	cbz	r3, 80135e2 <_write_r+0x1e>
 80135e0:	602b      	str	r3, [r5, #0]
 80135e2:	bd38      	pop	{r3, r4, r5, pc}
 80135e4:	2000bce0 	.word	0x2000bce0

080135e8 <__swsetup_r>:
 80135e8:	4b32      	ldr	r3, [pc, #200]	; (80136b4 <__swsetup_r+0xcc>)
 80135ea:	b570      	push	{r4, r5, r6, lr}
 80135ec:	681d      	ldr	r5, [r3, #0]
 80135ee:	4606      	mov	r6, r0
 80135f0:	460c      	mov	r4, r1
 80135f2:	b125      	cbz	r5, 80135fe <__swsetup_r+0x16>
 80135f4:	69ab      	ldr	r3, [r5, #24]
 80135f6:	b913      	cbnz	r3, 80135fe <__swsetup_r+0x16>
 80135f8:	4628      	mov	r0, r5
 80135fa:	f7ff fb3b 	bl	8012c74 <__sinit>
 80135fe:	4b2e      	ldr	r3, [pc, #184]	; (80136b8 <__swsetup_r+0xd0>)
 8013600:	429c      	cmp	r4, r3
 8013602:	d10f      	bne.n	8013624 <__swsetup_r+0x3c>
 8013604:	686c      	ldr	r4, [r5, #4]
 8013606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801360a:	b29a      	uxth	r2, r3
 801360c:	0715      	lsls	r5, r2, #28
 801360e:	d42c      	bmi.n	801366a <__swsetup_r+0x82>
 8013610:	06d0      	lsls	r0, r2, #27
 8013612:	d411      	bmi.n	8013638 <__swsetup_r+0x50>
 8013614:	2209      	movs	r2, #9
 8013616:	6032      	str	r2, [r6, #0]
 8013618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801361c:	81a3      	strh	r3, [r4, #12]
 801361e:	f04f 30ff 	mov.w	r0, #4294967295
 8013622:	e03e      	b.n	80136a2 <__swsetup_r+0xba>
 8013624:	4b25      	ldr	r3, [pc, #148]	; (80136bc <__swsetup_r+0xd4>)
 8013626:	429c      	cmp	r4, r3
 8013628:	d101      	bne.n	801362e <__swsetup_r+0x46>
 801362a:	68ac      	ldr	r4, [r5, #8]
 801362c:	e7eb      	b.n	8013606 <__swsetup_r+0x1e>
 801362e:	4b24      	ldr	r3, [pc, #144]	; (80136c0 <__swsetup_r+0xd8>)
 8013630:	429c      	cmp	r4, r3
 8013632:	bf08      	it	eq
 8013634:	68ec      	ldreq	r4, [r5, #12]
 8013636:	e7e6      	b.n	8013606 <__swsetup_r+0x1e>
 8013638:	0751      	lsls	r1, r2, #29
 801363a:	d512      	bpl.n	8013662 <__swsetup_r+0x7a>
 801363c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801363e:	b141      	cbz	r1, 8013652 <__swsetup_r+0x6a>
 8013640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013644:	4299      	cmp	r1, r3
 8013646:	d002      	beq.n	801364e <__swsetup_r+0x66>
 8013648:	4630      	mov	r0, r6
 801364a:	f7ff fba5 	bl	8012d98 <_free_r>
 801364e:	2300      	movs	r3, #0
 8013650:	6363      	str	r3, [r4, #52]	; 0x34
 8013652:	89a3      	ldrh	r3, [r4, #12]
 8013654:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013658:	81a3      	strh	r3, [r4, #12]
 801365a:	2300      	movs	r3, #0
 801365c:	6063      	str	r3, [r4, #4]
 801365e:	6923      	ldr	r3, [r4, #16]
 8013660:	6023      	str	r3, [r4, #0]
 8013662:	89a3      	ldrh	r3, [r4, #12]
 8013664:	f043 0308 	orr.w	r3, r3, #8
 8013668:	81a3      	strh	r3, [r4, #12]
 801366a:	6923      	ldr	r3, [r4, #16]
 801366c:	b94b      	cbnz	r3, 8013682 <__swsetup_r+0x9a>
 801366e:	89a3      	ldrh	r3, [r4, #12]
 8013670:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013678:	d003      	beq.n	8013682 <__swsetup_r+0x9a>
 801367a:	4621      	mov	r1, r4
 801367c:	4630      	mov	r0, r6
 801367e:	f000 f917 	bl	80138b0 <__smakebuf_r>
 8013682:	89a2      	ldrh	r2, [r4, #12]
 8013684:	f012 0301 	ands.w	r3, r2, #1
 8013688:	d00c      	beq.n	80136a4 <__swsetup_r+0xbc>
 801368a:	2300      	movs	r3, #0
 801368c:	60a3      	str	r3, [r4, #8]
 801368e:	6963      	ldr	r3, [r4, #20]
 8013690:	425b      	negs	r3, r3
 8013692:	61a3      	str	r3, [r4, #24]
 8013694:	6923      	ldr	r3, [r4, #16]
 8013696:	b953      	cbnz	r3, 80136ae <__swsetup_r+0xc6>
 8013698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801369c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80136a0:	d1ba      	bne.n	8013618 <__swsetup_r+0x30>
 80136a2:	bd70      	pop	{r4, r5, r6, pc}
 80136a4:	0792      	lsls	r2, r2, #30
 80136a6:	bf58      	it	pl
 80136a8:	6963      	ldrpl	r3, [r4, #20]
 80136aa:	60a3      	str	r3, [r4, #8]
 80136ac:	e7f2      	b.n	8013694 <__swsetup_r+0xac>
 80136ae:	2000      	movs	r0, #0
 80136b0:	e7f7      	b.n	80136a2 <__swsetup_r+0xba>
 80136b2:	bf00      	nop
 80136b4:	20000050 	.word	0x20000050
 80136b8:	0801665c 	.word	0x0801665c
 80136bc:	0801667c 	.word	0x0801667c
 80136c0:	0801663c 	.word	0x0801663c

080136c4 <_close_r>:
 80136c4:	b538      	push	{r3, r4, r5, lr}
 80136c6:	4c06      	ldr	r4, [pc, #24]	; (80136e0 <_close_r+0x1c>)
 80136c8:	2300      	movs	r3, #0
 80136ca:	4605      	mov	r5, r0
 80136cc:	4608      	mov	r0, r1
 80136ce:	6023      	str	r3, [r4, #0]
 80136d0:	f7ed fe23 	bl	800131a <_close>
 80136d4:	1c43      	adds	r3, r0, #1
 80136d6:	d102      	bne.n	80136de <_close_r+0x1a>
 80136d8:	6823      	ldr	r3, [r4, #0]
 80136da:	b103      	cbz	r3, 80136de <_close_r+0x1a>
 80136dc:	602b      	str	r3, [r5, #0]
 80136de:	bd38      	pop	{r3, r4, r5, pc}
 80136e0:	2000bce0 	.word	0x2000bce0

080136e4 <__sflush_r>:
 80136e4:	898a      	ldrh	r2, [r1, #12]
 80136e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136ea:	4605      	mov	r5, r0
 80136ec:	0710      	lsls	r0, r2, #28
 80136ee:	460c      	mov	r4, r1
 80136f0:	d458      	bmi.n	80137a4 <__sflush_r+0xc0>
 80136f2:	684b      	ldr	r3, [r1, #4]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	dc05      	bgt.n	8013704 <__sflush_r+0x20>
 80136f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	dc02      	bgt.n	8013704 <__sflush_r+0x20>
 80136fe:	2000      	movs	r0, #0
 8013700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013706:	2e00      	cmp	r6, #0
 8013708:	d0f9      	beq.n	80136fe <__sflush_r+0x1a>
 801370a:	2300      	movs	r3, #0
 801370c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013710:	682f      	ldr	r7, [r5, #0]
 8013712:	6a21      	ldr	r1, [r4, #32]
 8013714:	602b      	str	r3, [r5, #0]
 8013716:	d032      	beq.n	801377e <__sflush_r+0x9a>
 8013718:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801371a:	89a3      	ldrh	r3, [r4, #12]
 801371c:	075a      	lsls	r2, r3, #29
 801371e:	d505      	bpl.n	801372c <__sflush_r+0x48>
 8013720:	6863      	ldr	r3, [r4, #4]
 8013722:	1ac0      	subs	r0, r0, r3
 8013724:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013726:	b10b      	cbz	r3, 801372c <__sflush_r+0x48>
 8013728:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801372a:	1ac0      	subs	r0, r0, r3
 801372c:	2300      	movs	r3, #0
 801372e:	4602      	mov	r2, r0
 8013730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013732:	6a21      	ldr	r1, [r4, #32]
 8013734:	4628      	mov	r0, r5
 8013736:	47b0      	blx	r6
 8013738:	1c43      	adds	r3, r0, #1
 801373a:	89a3      	ldrh	r3, [r4, #12]
 801373c:	d106      	bne.n	801374c <__sflush_r+0x68>
 801373e:	6829      	ldr	r1, [r5, #0]
 8013740:	291d      	cmp	r1, #29
 8013742:	d848      	bhi.n	80137d6 <__sflush_r+0xf2>
 8013744:	4a29      	ldr	r2, [pc, #164]	; (80137ec <__sflush_r+0x108>)
 8013746:	40ca      	lsrs	r2, r1
 8013748:	07d6      	lsls	r6, r2, #31
 801374a:	d544      	bpl.n	80137d6 <__sflush_r+0xf2>
 801374c:	2200      	movs	r2, #0
 801374e:	6062      	str	r2, [r4, #4]
 8013750:	04d9      	lsls	r1, r3, #19
 8013752:	6922      	ldr	r2, [r4, #16]
 8013754:	6022      	str	r2, [r4, #0]
 8013756:	d504      	bpl.n	8013762 <__sflush_r+0x7e>
 8013758:	1c42      	adds	r2, r0, #1
 801375a:	d101      	bne.n	8013760 <__sflush_r+0x7c>
 801375c:	682b      	ldr	r3, [r5, #0]
 801375e:	b903      	cbnz	r3, 8013762 <__sflush_r+0x7e>
 8013760:	6560      	str	r0, [r4, #84]	; 0x54
 8013762:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013764:	602f      	str	r7, [r5, #0]
 8013766:	2900      	cmp	r1, #0
 8013768:	d0c9      	beq.n	80136fe <__sflush_r+0x1a>
 801376a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801376e:	4299      	cmp	r1, r3
 8013770:	d002      	beq.n	8013778 <__sflush_r+0x94>
 8013772:	4628      	mov	r0, r5
 8013774:	f7ff fb10 	bl	8012d98 <_free_r>
 8013778:	2000      	movs	r0, #0
 801377a:	6360      	str	r0, [r4, #52]	; 0x34
 801377c:	e7c0      	b.n	8013700 <__sflush_r+0x1c>
 801377e:	2301      	movs	r3, #1
 8013780:	4628      	mov	r0, r5
 8013782:	47b0      	blx	r6
 8013784:	1c41      	adds	r1, r0, #1
 8013786:	d1c8      	bne.n	801371a <__sflush_r+0x36>
 8013788:	682b      	ldr	r3, [r5, #0]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d0c5      	beq.n	801371a <__sflush_r+0x36>
 801378e:	2b1d      	cmp	r3, #29
 8013790:	d001      	beq.n	8013796 <__sflush_r+0xb2>
 8013792:	2b16      	cmp	r3, #22
 8013794:	d101      	bne.n	801379a <__sflush_r+0xb6>
 8013796:	602f      	str	r7, [r5, #0]
 8013798:	e7b1      	b.n	80136fe <__sflush_r+0x1a>
 801379a:	89a3      	ldrh	r3, [r4, #12]
 801379c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137a0:	81a3      	strh	r3, [r4, #12]
 80137a2:	e7ad      	b.n	8013700 <__sflush_r+0x1c>
 80137a4:	690f      	ldr	r7, [r1, #16]
 80137a6:	2f00      	cmp	r7, #0
 80137a8:	d0a9      	beq.n	80136fe <__sflush_r+0x1a>
 80137aa:	0793      	lsls	r3, r2, #30
 80137ac:	680e      	ldr	r6, [r1, #0]
 80137ae:	bf08      	it	eq
 80137b0:	694b      	ldreq	r3, [r1, #20]
 80137b2:	600f      	str	r7, [r1, #0]
 80137b4:	bf18      	it	ne
 80137b6:	2300      	movne	r3, #0
 80137b8:	eba6 0807 	sub.w	r8, r6, r7
 80137bc:	608b      	str	r3, [r1, #8]
 80137be:	f1b8 0f00 	cmp.w	r8, #0
 80137c2:	dd9c      	ble.n	80136fe <__sflush_r+0x1a>
 80137c4:	4643      	mov	r3, r8
 80137c6:	463a      	mov	r2, r7
 80137c8:	6a21      	ldr	r1, [r4, #32]
 80137ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80137cc:	4628      	mov	r0, r5
 80137ce:	47b0      	blx	r6
 80137d0:	2800      	cmp	r0, #0
 80137d2:	dc06      	bgt.n	80137e2 <__sflush_r+0xfe>
 80137d4:	89a3      	ldrh	r3, [r4, #12]
 80137d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137da:	81a3      	strh	r3, [r4, #12]
 80137dc:	f04f 30ff 	mov.w	r0, #4294967295
 80137e0:	e78e      	b.n	8013700 <__sflush_r+0x1c>
 80137e2:	4407      	add	r7, r0
 80137e4:	eba8 0800 	sub.w	r8, r8, r0
 80137e8:	e7e9      	b.n	80137be <__sflush_r+0xda>
 80137ea:	bf00      	nop
 80137ec:	20400001 	.word	0x20400001

080137f0 <_fflush_r>:
 80137f0:	b538      	push	{r3, r4, r5, lr}
 80137f2:	690b      	ldr	r3, [r1, #16]
 80137f4:	4605      	mov	r5, r0
 80137f6:	460c      	mov	r4, r1
 80137f8:	b1db      	cbz	r3, 8013832 <_fflush_r+0x42>
 80137fa:	b118      	cbz	r0, 8013804 <_fflush_r+0x14>
 80137fc:	6983      	ldr	r3, [r0, #24]
 80137fe:	b90b      	cbnz	r3, 8013804 <_fflush_r+0x14>
 8013800:	f7ff fa38 	bl	8012c74 <__sinit>
 8013804:	4b0c      	ldr	r3, [pc, #48]	; (8013838 <_fflush_r+0x48>)
 8013806:	429c      	cmp	r4, r3
 8013808:	d109      	bne.n	801381e <_fflush_r+0x2e>
 801380a:	686c      	ldr	r4, [r5, #4]
 801380c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013810:	b17b      	cbz	r3, 8013832 <_fflush_r+0x42>
 8013812:	4621      	mov	r1, r4
 8013814:	4628      	mov	r0, r5
 8013816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801381a:	f7ff bf63 	b.w	80136e4 <__sflush_r>
 801381e:	4b07      	ldr	r3, [pc, #28]	; (801383c <_fflush_r+0x4c>)
 8013820:	429c      	cmp	r4, r3
 8013822:	d101      	bne.n	8013828 <_fflush_r+0x38>
 8013824:	68ac      	ldr	r4, [r5, #8]
 8013826:	e7f1      	b.n	801380c <_fflush_r+0x1c>
 8013828:	4b05      	ldr	r3, [pc, #20]	; (8013840 <_fflush_r+0x50>)
 801382a:	429c      	cmp	r4, r3
 801382c:	bf08      	it	eq
 801382e:	68ec      	ldreq	r4, [r5, #12]
 8013830:	e7ec      	b.n	801380c <_fflush_r+0x1c>
 8013832:	2000      	movs	r0, #0
 8013834:	bd38      	pop	{r3, r4, r5, pc}
 8013836:	bf00      	nop
 8013838:	0801665c 	.word	0x0801665c
 801383c:	0801667c 	.word	0x0801667c
 8013840:	0801663c 	.word	0x0801663c

08013844 <_lseek_r>:
 8013844:	b538      	push	{r3, r4, r5, lr}
 8013846:	4c07      	ldr	r4, [pc, #28]	; (8013864 <_lseek_r+0x20>)
 8013848:	4605      	mov	r5, r0
 801384a:	4608      	mov	r0, r1
 801384c:	4611      	mov	r1, r2
 801384e:	2200      	movs	r2, #0
 8013850:	6022      	str	r2, [r4, #0]
 8013852:	461a      	mov	r2, r3
 8013854:	f7ed fd88 	bl	8001368 <_lseek>
 8013858:	1c43      	adds	r3, r0, #1
 801385a:	d102      	bne.n	8013862 <_lseek_r+0x1e>
 801385c:	6823      	ldr	r3, [r4, #0]
 801385e:	b103      	cbz	r3, 8013862 <_lseek_r+0x1e>
 8013860:	602b      	str	r3, [r5, #0]
 8013862:	bd38      	pop	{r3, r4, r5, pc}
 8013864:	2000bce0 	.word	0x2000bce0

08013868 <__swhatbuf_r>:
 8013868:	b570      	push	{r4, r5, r6, lr}
 801386a:	460e      	mov	r6, r1
 801386c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013870:	2900      	cmp	r1, #0
 8013872:	b096      	sub	sp, #88	; 0x58
 8013874:	4614      	mov	r4, r2
 8013876:	461d      	mov	r5, r3
 8013878:	da07      	bge.n	801388a <__swhatbuf_r+0x22>
 801387a:	2300      	movs	r3, #0
 801387c:	602b      	str	r3, [r5, #0]
 801387e:	89b3      	ldrh	r3, [r6, #12]
 8013880:	061a      	lsls	r2, r3, #24
 8013882:	d410      	bmi.n	80138a6 <__swhatbuf_r+0x3e>
 8013884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013888:	e00e      	b.n	80138a8 <__swhatbuf_r+0x40>
 801388a:	466a      	mov	r2, sp
 801388c:	f000 f864 	bl	8013958 <_fstat_r>
 8013890:	2800      	cmp	r0, #0
 8013892:	dbf2      	blt.n	801387a <__swhatbuf_r+0x12>
 8013894:	9a01      	ldr	r2, [sp, #4]
 8013896:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801389a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801389e:	425a      	negs	r2, r3
 80138a0:	415a      	adcs	r2, r3
 80138a2:	602a      	str	r2, [r5, #0]
 80138a4:	e7ee      	b.n	8013884 <__swhatbuf_r+0x1c>
 80138a6:	2340      	movs	r3, #64	; 0x40
 80138a8:	2000      	movs	r0, #0
 80138aa:	6023      	str	r3, [r4, #0]
 80138ac:	b016      	add	sp, #88	; 0x58
 80138ae:	bd70      	pop	{r4, r5, r6, pc}

080138b0 <__smakebuf_r>:
 80138b0:	898b      	ldrh	r3, [r1, #12]
 80138b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80138b4:	079d      	lsls	r5, r3, #30
 80138b6:	4606      	mov	r6, r0
 80138b8:	460c      	mov	r4, r1
 80138ba:	d507      	bpl.n	80138cc <__smakebuf_r+0x1c>
 80138bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80138c0:	6023      	str	r3, [r4, #0]
 80138c2:	6123      	str	r3, [r4, #16]
 80138c4:	2301      	movs	r3, #1
 80138c6:	6163      	str	r3, [r4, #20]
 80138c8:	b002      	add	sp, #8
 80138ca:	bd70      	pop	{r4, r5, r6, pc}
 80138cc:	ab01      	add	r3, sp, #4
 80138ce:	466a      	mov	r2, sp
 80138d0:	f7ff ffca 	bl	8013868 <__swhatbuf_r>
 80138d4:	9900      	ldr	r1, [sp, #0]
 80138d6:	4605      	mov	r5, r0
 80138d8:	4630      	mov	r0, r6
 80138da:	f7ff faab 	bl	8012e34 <_malloc_r>
 80138de:	b948      	cbnz	r0, 80138f4 <__smakebuf_r+0x44>
 80138e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138e4:	059a      	lsls	r2, r3, #22
 80138e6:	d4ef      	bmi.n	80138c8 <__smakebuf_r+0x18>
 80138e8:	f023 0303 	bic.w	r3, r3, #3
 80138ec:	f043 0302 	orr.w	r3, r3, #2
 80138f0:	81a3      	strh	r3, [r4, #12]
 80138f2:	e7e3      	b.n	80138bc <__smakebuf_r+0xc>
 80138f4:	4b0d      	ldr	r3, [pc, #52]	; (801392c <__smakebuf_r+0x7c>)
 80138f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80138f8:	89a3      	ldrh	r3, [r4, #12]
 80138fa:	6020      	str	r0, [r4, #0]
 80138fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013900:	81a3      	strh	r3, [r4, #12]
 8013902:	9b00      	ldr	r3, [sp, #0]
 8013904:	6163      	str	r3, [r4, #20]
 8013906:	9b01      	ldr	r3, [sp, #4]
 8013908:	6120      	str	r0, [r4, #16]
 801390a:	b15b      	cbz	r3, 8013924 <__smakebuf_r+0x74>
 801390c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013910:	4630      	mov	r0, r6
 8013912:	f000 f833 	bl	801397c <_isatty_r>
 8013916:	b128      	cbz	r0, 8013924 <__smakebuf_r+0x74>
 8013918:	89a3      	ldrh	r3, [r4, #12]
 801391a:	f023 0303 	bic.w	r3, r3, #3
 801391e:	f043 0301 	orr.w	r3, r3, #1
 8013922:	81a3      	strh	r3, [r4, #12]
 8013924:	89a3      	ldrh	r3, [r4, #12]
 8013926:	431d      	orrs	r5, r3
 8013928:	81a5      	strh	r5, [r4, #12]
 801392a:	e7cd      	b.n	80138c8 <__smakebuf_r+0x18>
 801392c:	08012c3d 	.word	0x08012c3d

08013930 <__malloc_lock>:
 8013930:	4770      	bx	lr

08013932 <__malloc_unlock>:
 8013932:	4770      	bx	lr

08013934 <_read_r>:
 8013934:	b538      	push	{r3, r4, r5, lr}
 8013936:	4c07      	ldr	r4, [pc, #28]	; (8013954 <_read_r+0x20>)
 8013938:	4605      	mov	r5, r0
 801393a:	4608      	mov	r0, r1
 801393c:	4611      	mov	r1, r2
 801393e:	2200      	movs	r2, #0
 8013940:	6022      	str	r2, [r4, #0]
 8013942:	461a      	mov	r2, r3
 8013944:	f7ed fcb0 	bl	80012a8 <_read>
 8013948:	1c43      	adds	r3, r0, #1
 801394a:	d102      	bne.n	8013952 <_read_r+0x1e>
 801394c:	6823      	ldr	r3, [r4, #0]
 801394e:	b103      	cbz	r3, 8013952 <_read_r+0x1e>
 8013950:	602b      	str	r3, [r5, #0]
 8013952:	bd38      	pop	{r3, r4, r5, pc}
 8013954:	2000bce0 	.word	0x2000bce0

08013958 <_fstat_r>:
 8013958:	b538      	push	{r3, r4, r5, lr}
 801395a:	4c07      	ldr	r4, [pc, #28]	; (8013978 <_fstat_r+0x20>)
 801395c:	2300      	movs	r3, #0
 801395e:	4605      	mov	r5, r0
 8013960:	4608      	mov	r0, r1
 8013962:	4611      	mov	r1, r2
 8013964:	6023      	str	r3, [r4, #0]
 8013966:	f7ed fce4 	bl	8001332 <_fstat>
 801396a:	1c43      	adds	r3, r0, #1
 801396c:	d102      	bne.n	8013974 <_fstat_r+0x1c>
 801396e:	6823      	ldr	r3, [r4, #0]
 8013970:	b103      	cbz	r3, 8013974 <_fstat_r+0x1c>
 8013972:	602b      	str	r3, [r5, #0]
 8013974:	bd38      	pop	{r3, r4, r5, pc}
 8013976:	bf00      	nop
 8013978:	2000bce0 	.word	0x2000bce0

0801397c <_isatty_r>:
 801397c:	b538      	push	{r3, r4, r5, lr}
 801397e:	4c06      	ldr	r4, [pc, #24]	; (8013998 <_isatty_r+0x1c>)
 8013980:	2300      	movs	r3, #0
 8013982:	4605      	mov	r5, r0
 8013984:	4608      	mov	r0, r1
 8013986:	6023      	str	r3, [r4, #0]
 8013988:	f7ed fce3 	bl	8001352 <_isatty>
 801398c:	1c43      	adds	r3, r0, #1
 801398e:	d102      	bne.n	8013996 <_isatty_r+0x1a>
 8013990:	6823      	ldr	r3, [r4, #0]
 8013992:	b103      	cbz	r3, 8013996 <_isatty_r+0x1a>
 8013994:	602b      	str	r3, [r5, #0]
 8013996:	bd38      	pop	{r3, r4, r5, pc}
 8013998:	2000bce0 	.word	0x2000bce0

0801399c <_init>:
 801399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801399e:	bf00      	nop
 80139a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139a2:	bc08      	pop	{r3}
 80139a4:	469e      	mov	lr, r3
 80139a6:	4770      	bx	lr

080139a8 <_fini>:
 80139a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139aa:	bf00      	nop
 80139ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139ae:	bc08      	pop	{r3}
 80139b0:	469e      	mov	lr, r3
 80139b2:	4770      	bx	lr
