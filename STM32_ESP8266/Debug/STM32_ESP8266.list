
STM32_ESP8266.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004554  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080046e4  080046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004874  08004874  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800487c  0800487c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800487c  0800487c  0001487c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004880  08004880  00014880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000070  080048f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  080048f4  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009197  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001838  00000000  00000000  00029237  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007b8  00000000  00000000  0002aa70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f0  00000000  00000000  0002b228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020aa4  00000000  00000000  0002b918  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006e2d  00000000  00000000  0004c3bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c706b  00000000  00000000  000531e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011a254  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021ec  00000000  00000000  0011a2d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080046cc 	.word	0x080046cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080046cc 	.word	0x080046cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b085      	sub	sp, #20
 8000584:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fd63 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f91b 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fa1f 	bl	80009d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000592:	f000 f9fd 	bl	8000990 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000596:	f000 f9d1 	bl	800093c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800059a:	f000 f97d 	bl	8000898 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 800059e:	4b70      	ldr	r3, [pc, #448]	; (8000760 <main+0x1e0>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	68da      	ldr	r2, [r3, #12]
 80005a4:	4b6e      	ldr	r3, [pc, #440]	; (8000760 <main+0x1e0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f042 0220 	orr.w	r2, r2, #32
 80005ac:	60da      	str	r2, [r3, #12]

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, 1);
 80005ae:	2201      	movs	r2, #1
 80005b0:	496c      	ldr	r1, [pc, #432]	; (8000764 <main+0x1e4>)
 80005b2:	486d      	ldr	r0, [pc, #436]	; (8000768 <main+0x1e8>)
 80005b4:	f000 fe24 	bl	8001200 <HAL_ADC_Start_DMA>

start:
  if (ESP_INIT()) goto start;
 80005b8:	f000 fa6a 	bl	8000a90 <ESP_INIT>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d000      	beq.n	80005c4 <main+0x44>
 80005c2:	e7f9      	b.n	80005b8 <main+0x38>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  button = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 80005c4:	2101      	movs	r1, #1
 80005c6:	4869      	ldr	r0, [pc, #420]	; (800076c <main+0x1ec>)
 80005c8:	f002 f806 	bl	80025d8 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b67      	ldr	r3, [pc, #412]	; (8000770 <main+0x1f0>)
 80005d2:	701a      	strb	r2, [r3, #0]
	  led1    = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_15);
 80005d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d8:	4866      	ldr	r0, [pc, #408]	; (8000774 <main+0x1f4>)
 80005da:	f001 fffd 	bl	80025d8 <HAL_GPIO_ReadPin>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b65      	ldr	r3, [pc, #404]	; (8000778 <main+0x1f8>)
 80005e4:	701a      	strb	r2, [r3, #0]
	  led2    = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14);
 80005e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ea:	4862      	ldr	r0, [pc, #392]	; (8000774 <main+0x1f4>)
 80005ec:	f001 fff4 	bl	80025d8 <HAL_GPIO_ReadPin>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b61      	ldr	r3, [pc, #388]	; (800077c <main+0x1fc>)
 80005f6:	701a      	strb	r2, [r3, #0]
	  adc = adc_buffer[0];
 80005f8:	4b5a      	ldr	r3, [pc, #360]	; (8000764 <main+0x1e4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a60      	ldr	r2, [pc, #384]	; (8000780 <main+0x200>)
 80005fe:	6013      	str	r3, [r2, #0]

	  if(counter>=2000)
 8000600:	4b60      	ldr	r3, [pc, #384]	; (8000784 <main+0x204>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000608:	d35a      	bcc.n	80006c0 <main+0x140>
	  {
		  counter = 0;
 800060a:	4b5e      	ldr	r3, [pc, #376]	; (8000784 <main+0x204>)
 800060c:	2200      	movs	r2, #0
 800060e:	801a      	strh	r2, [r3, #0]

		  ret = ESP_Check_AT();
 8000610:	f000 fada 	bl	8000bc8 <ESP_Check_AT>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	4b5b      	ldr	r3, [pc, #364]	; (8000788 <main+0x208>)
 800061a:	701a      	strb	r2, [r3, #0]
		  if(ret==1) goto start;
 800061c:	4b5a      	ldr	r3, [pc, #360]	; (8000788 <main+0x208>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d100      	bne.n	8000626 <main+0xa6>
 8000624:	e7c8      	b.n	80005b8 <main+0x38>

		  sprintf(Buffer,"MSG:%d ADC:%d BTN:%d LED1:%d LED2:%d\r\n\0",cnt++,adc,button,led1,led2);
 8000626:	4b59      	ldr	r3, [pc, #356]	; (800078c <main+0x20c>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	b2d1      	uxtb	r1, r2
 800062e:	4a57      	ldr	r2, [pc, #348]	; (800078c <main+0x20c>)
 8000630:	7011      	strb	r1, [r2, #0]
 8000632:	461c      	mov	r4, r3
 8000634:	4b52      	ldr	r3, [pc, #328]	; (8000780 <main+0x200>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b4d      	ldr	r3, [pc, #308]	; (8000770 <main+0x1f0>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	4b4e      	ldr	r3, [pc, #312]	; (8000778 <main+0x1f8>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	4b4d      	ldr	r3, [pc, #308]	; (800077c <main+0x1fc>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	9302      	str	r3, [sp, #8]
 800064a:	9001      	str	r0, [sp, #4]
 800064c:	9100      	str	r1, [sp, #0]
 800064e:	4613      	mov	r3, r2
 8000650:	4622      	mov	r2, r4
 8000652:	494f      	ldr	r1, [pc, #316]	; (8000790 <main+0x210>)
 8000654:	484f      	ldr	r0, [pc, #316]	; (8000794 <main+0x214>)
 8000656:	f003 fc23 	bl	8003ea0 <siprintf>

		  sprintf(Uart_TxData,"AT+CIPSEND=%d\r\n",strlen(Buffer));
 800065a:	484e      	ldr	r0, [pc, #312]	; (8000794 <main+0x214>)
 800065c:	f7ff fdb8 	bl	80001d0 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	494c      	ldr	r1, [pc, #304]	; (8000798 <main+0x218>)
 8000666:	484d      	ldr	r0, [pc, #308]	; (800079c <main+0x21c>)
 8000668:	f003 fc1a 	bl	8003ea0 <siprintf>
		  ret = ESP_AT_Send(Uart_TxData, strlen(Uart_TxData), ESP_SEND_RET, sizeof(ESP_SEND_RET), CMD_TRIAL);
 800066c:	484b      	ldr	r0, [pc, #300]	; (800079c <main+0x21c>)
 800066e:	f7ff fdaf 	bl	80001d0 <strlen>
 8000672:	4603      	mov	r3, r0
 8000674:	b2d9      	uxtb	r1, r3
 8000676:	2305      	movs	r3, #5
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2305      	movs	r3, #5
 800067c:	4a48      	ldr	r2, [pc, #288]	; (80007a0 <main+0x220>)
 800067e:	4847      	ldr	r0, [pc, #284]	; (800079c <main+0x21c>)
 8000680:	f000 fabe 	bl	8000c00 <ESP_AT_Send>
 8000684:	4603      	mov	r3, r0
 8000686:	461a      	mov	r2, r3
 8000688:	4b3f      	ldr	r3, [pc, #252]	; (8000788 <main+0x208>)
 800068a:	701a      	strb	r2, [r3, #0]
		  if(ret==1) goto start;
 800068c:	4b3e      	ldr	r3, [pc, #248]	; (8000788 <main+0x208>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d100      	bne.n	8000696 <main+0x116>
 8000694:	e790      	b.n	80005b8 <main+0x38>

		  ret = ESP_AT_Send(Buffer, strlen(Buffer), ESP_SEND_OK, sizeof(ESP_SEND_OK), CMD_TRIAL);
 8000696:	483f      	ldr	r0, [pc, #252]	; (8000794 <main+0x214>)
 8000698:	f7ff fd9a 	bl	80001d0 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	b2d9      	uxtb	r1, r3
 80006a0:	2305      	movs	r3, #5
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	230b      	movs	r3, #11
 80006a6:	4a3f      	ldr	r2, [pc, #252]	; (80007a4 <main+0x224>)
 80006a8:	483a      	ldr	r0, [pc, #232]	; (8000794 <main+0x214>)
 80006aa:	f000 faa9 	bl	8000c00 <ESP_AT_Send>
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b35      	ldr	r3, [pc, #212]	; (8000788 <main+0x208>)
 80006b4:	701a      	strb	r2, [r3, #0]

		  memset(Uart_RxData,0x00,sizeof(Uart_RxData));
 80006b6:	22ff      	movs	r2, #255	; 0xff
 80006b8:	2100      	movs	r1, #0
 80006ba:	483b      	ldr	r0, [pc, #236]	; (80007a8 <main+0x228>)
 80006bc:	f003 fbe7 	bl	8003e8e <memset>
	  }

	  if(Rx_Message)
 80006c0:	4b3a      	ldr	r3, [pc, #232]	; (80007ac <main+0x22c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d041      	beq.n	800074c <main+0x1cc>
	  {
		  HAL_Delay(50);
 80006c8:	2032      	movs	r0, #50	; 0x32
 80006ca:	f000 fd33 	bl	8001134 <HAL_Delay>
		  Rx_Cnt = 0;
 80006ce:	4b38      	ldr	r3, [pc, #224]	; (80007b0 <main+0x230>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
		  Rx_Message = 0;
 80006d4:	4b35      	ldr	r3, [pc, #212]	; (80007ac <main+0x22c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]

		  if(strstr(Uart_RxData,"LED1 ON") != 0)
 80006da:	4936      	ldr	r1, [pc, #216]	; (80007b4 <main+0x234>)
 80006dc:	4832      	ldr	r0, [pc, #200]	; (80007a8 <main+0x228>)
 80006de:	f003 fbff 	bl	8003ee0 <strstr>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d005      	beq.n	80006f4 <main+0x174>
		  {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);		// Mavi LED ON
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ee:	4821      	ldr	r0, [pc, #132]	; (8000774 <main+0x1f4>)
 80006f0:	f001 ff8a 	bl	8002608 <HAL_GPIO_WritePin>
		  }
		  if(strstr(Uart_RxData,"LED1 OFF") != 0)
 80006f4:	4930      	ldr	r1, [pc, #192]	; (80007b8 <main+0x238>)
 80006f6:	482c      	ldr	r0, [pc, #176]	; (80007a8 <main+0x228>)
 80006f8:	f003 fbf2 	bl	8003ee0 <strstr>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d005      	beq.n	800070e <main+0x18e>
		  {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);	// Mavi LED OFF
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000708:	481a      	ldr	r0, [pc, #104]	; (8000774 <main+0x1f4>)
 800070a:	f001 ff7d 	bl	8002608 <HAL_GPIO_WritePin>
		  }
		  if(strstr(Uart_RxData,"LED2 ON") != 0)
 800070e:	492b      	ldr	r1, [pc, #172]	; (80007bc <main+0x23c>)
 8000710:	4825      	ldr	r0, [pc, #148]	; (80007a8 <main+0x228>)
 8000712:	f003 fbe5 	bl	8003ee0 <strstr>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d005      	beq.n	8000728 <main+0x1a8>
		  {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);		// Mavi LED ON
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000722:	4814      	ldr	r0, [pc, #80]	; (8000774 <main+0x1f4>)
 8000724:	f001 ff70 	bl	8002608 <HAL_GPIO_WritePin>
		  }
		  if(strstr(Uart_RxData,"LED2 OFF") != 0)
 8000728:	4925      	ldr	r1, [pc, #148]	; (80007c0 <main+0x240>)
 800072a:	481f      	ldr	r0, [pc, #124]	; (80007a8 <main+0x228>)
 800072c:	f003 fbd8 	bl	8003ee0 <strstr>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d005      	beq.n	8000742 <main+0x1c2>
		  {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);	// Mavi LED OFF
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <main+0x1f4>)
 800073e:	f001 ff63 	bl	8002608 <HAL_GPIO_WritePin>
		  }

		  memset(Uart_RxData,0x00,sizeof(Uart_RxData));
 8000742:	22ff      	movs	r2, #255	; 0xff
 8000744:	2100      	movs	r1, #0
 8000746:	4818      	ldr	r0, [pc, #96]	; (80007a8 <main+0x228>)
 8000748:	f003 fba1 	bl	8003e8e <memset>

	  }


	  HAL_Delay(0);
 800074c:	2000      	movs	r0, #0
 800074e:	f000 fcf1 	bl	8001134 <HAL_Delay>
	  counter++;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <main+0x204>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	b29a      	uxth	r2, r3
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <main+0x204>)
 800075c:	801a      	strh	r2, [r3, #0]
	  button = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 800075e:	e731      	b.n	80005c4 <main+0x44>
 8000760:	200001a0 	.word	0x200001a0
 8000764:	200002b0 	.word	0x200002b0
 8000768:	20000204 	.word	0x20000204
 800076c:	40020000 	.word	0x40020000
 8000770:	200001e5 	.word	0x200001e5
 8000774:	40020c00 	.word	0x40020c00
 8000778:	200001e4 	.word	0x200001e4
 800077c:	200004b4 	.word	0x200004b4
 8000780:	2000024c 	.word	0x2000024c
 8000784:	20000090 	.word	0x20000090
 8000788:	200004b3 	.word	0x200004b3
 800078c:	2000008f 	.word	0x2000008f
 8000790:	080046e4 	.word	0x080046e4
 8000794:	200002b4 	.word	0x200002b4
 8000798:	0800470c 	.word	0x0800470c
 800079c:	200003b4 	.word	0x200003b4
 80007a0:	0800480c 	.word	0x0800480c
 80007a4:	08004814 	.word	0x08004814
 80007a8:	200000a0 	.word	0x200000a0
 80007ac:	2000008e 	.word	0x2000008e
 80007b0:	2000008c 	.word	0x2000008c
 80007b4:	0800471c 	.word	0x0800471c
 80007b8:	08004724 	.word	0x08004724
 80007bc:	08004730 	.word	0x08004730
 80007c0:	08004738 	.word	0x08004738

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	; 0x50
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	2230      	movs	r2, #48	; 0x30
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 fb5b 	bl	8003e8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	4b28      	ldr	r3, [pc, #160]	; (8000890 <SystemClock_Config+0xcc>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	4a27      	ldr	r2, [pc, #156]	; (8000890 <SystemClock_Config+0xcc>)
 80007f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f6:	6413      	str	r3, [r2, #64]	; 0x40
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <SystemClock_Config+0xcc>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	4b22      	ldr	r3, [pc, #136]	; (8000894 <SystemClock_Config+0xd0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a21      	ldr	r2, [pc, #132]	; (8000894 <SystemClock_Config+0xd0>)
 800080e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <SystemClock_Config+0xd0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000832:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000834:	2304      	movs	r3, #4
 8000836:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000838:	23a8      	movs	r3, #168	; 0xa8
 800083a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800083c:	2302      	movs	r3, #2
 800083e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000840:	2304      	movs	r3, #4
 8000842:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4618      	mov	r0, r3
 800084a:	f001 fef7 	bl	800263c <HAL_RCC_OscConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000854:	f000 fa1e 	bl	8000c94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	230f      	movs	r3, #15
 800085a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085c:	2302      	movs	r3, #2
 800085e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000864:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000868:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800086a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	2105      	movs	r1, #5
 8000876:	4618      	mov	r0, r3
 8000878:	f002 f950 	bl	8002b1c <HAL_RCC_ClockConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000882:	f000 fa07 	bl	8000c94 <Error_Handler>
  }
}
 8000886:	bf00      	nop
 8000888:	3750      	adds	r7, #80	; 0x50
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40007000 	.word	0x40007000

08000898 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089e:	463b      	mov	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_ADC1_Init+0x98>)
 80008ac:	4a21      	ldr	r2, [pc, #132]	; (8000934 <MX_ADC1_Init+0x9c>)
 80008ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_ADC1_Init+0x98>)
 80008b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_ADC1_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_ADC1_Init+0x98>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_ADC1_Init+0x98>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_ADC1_Init+0x98>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_ADC1_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_ADC1_Init+0x98>)
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <MX_ADC1_Init+0xa0>)
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_ADC1_Init+0x98>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_ADC1_Init+0x98>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_ADC1_Init+0x98>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_ADC1_Init+0x98>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_ADC1_Init+0x98>)
 80008fa:	f000 fc3d 	bl	8001178 <HAL_ADC_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000904:	f000 f9c6 	bl	8000c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000908:	2301      	movs	r3, #1
 800090a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800090c:	2301      	movs	r3, #1
 800090e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000910:	2303      	movs	r3, #3
 8000912:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_ADC1_Init+0x98>)
 800091a:	f000 fd81 	bl	8001420 <HAL_ADC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000924:	f000 f9b6 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000204 	.word	0x20000204
 8000934:	40012000 	.word	0x40012000
 8000938:	0f000001 	.word	0x0f000001

0800093c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <MX_USART3_UART_Init+0x50>)
 8000944:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800094c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000974:	f002 fac4 	bl	8002f00 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800097e:	f000 f989 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200001a0 	.word	0x200001a0
 800098c:	40004800 	.word	0x40004800

08000990 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_DMA_Init+0x3c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <MX_DMA_Init+0x3c>)
 80009a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_DMA_Init+0x3c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	203c      	movs	r0, #60	; 0x3c
 80009b8:	f001 f8ad 	bl	8001b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80009bc:	203c      	movs	r0, #60	; 0x3c
 80009be:	f001 f8c6 	bl	8001b4e <HAL_NVIC_EnableIRQ>

}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <MX_GPIO_Init+0xb4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a25      	ldr	r2, [pc, #148]	; (8000a84 <MX_GPIO_Init+0xb4>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <MX_GPIO_Init+0xb4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_GPIO_Init+0xb4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <MX_GPIO_Init+0xb4>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_GPIO_Init+0xb4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_GPIO_Init+0xb4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <MX_GPIO_Init+0xb4>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_GPIO_Init+0xb4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 8000a40:	4811      	ldr	r0, [pc, #68]	; (8000a88 <MX_GPIO_Init+0xb8>)
 8000a42:	f001 fde1 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a46:	2301      	movs	r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4619      	mov	r1, r3
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <MX_GPIO_Init+0xbc>)
 8000a5a:	f001 fc23 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
 8000a5e:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8000a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4619      	mov	r1, r3
 8000a76:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_GPIO_Init+0xb8>)
 8000a78:	f001 fc14 	bl	80022a4 <HAL_GPIO_Init>

}
 8000a7c:	bf00      	nop
 8000a7e:	3720      	adds	r7, #32
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	40020000 	.word	0x40020000

08000a90 <ESP_INIT>:

/* USER CODE BEGIN 4 */
char ESP_INIT(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af02      	add	r7, sp, #8
	char ret;

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a9c:	4841      	ldr	r0, [pc, #260]	; (8000ba4 <ESP_INIT+0x114>)
 8000a9e:	f001 fdb3 	bl	8002608 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000aa2:	20c8      	movs	r0, #200	; 0xc8
 8000aa4:	f000 fb46 	bl	8001134 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aae:	483d      	ldr	r0, [pc, #244]	; (8000ba4 <ESP_INIT+0x114>)
 8000ab0:	f001 fdaa 	bl	8002608 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000ab4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab8:	f000 fb3c 	bl	8001134 <HAL_Delay>

	ret = ESP_AT_Send(ESP_AT_CMD, sizeof(ESP_AT_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 8000abc:	2305      	movs	r3, #5
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	4a39      	ldr	r2, [pc, #228]	; (8000ba8 <ESP_INIT+0x118>)
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	4839      	ldr	r0, [pc, #228]	; (8000bac <ESP_INIT+0x11c>)
 8000ac8:	f000 f89a 	bl	8000c00 <ESP_AT_Send>
 8000acc:	4603      	mov	r3, r0
 8000ace:	71fb      	strb	r3, [r7, #7]
	if(ret==1) return 1;
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d101      	bne.n	8000ada <ESP_INIT+0x4a>
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e05f      	b.n	8000b9a <ESP_INIT+0x10a>
	ret = ESP_AT_Send(ESP_AT_CMD, sizeof(ESP_AT_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 8000ada:	2305      	movs	r3, #5
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2308      	movs	r3, #8
 8000ae0:	4a31      	ldr	r2, [pc, #196]	; (8000ba8 <ESP_INIT+0x118>)
 8000ae2:	2108      	movs	r1, #8
 8000ae4:	4831      	ldr	r0, [pc, #196]	; (8000bac <ESP_INIT+0x11c>)
 8000ae6:	f000 f88b 	bl	8000c00 <ESP_AT_Send>
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
	if(ret==1) return 1;
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d101      	bne.n	8000af8 <ESP_INIT+0x68>
 8000af4:	2301      	movs	r3, #1
 8000af6:	e050      	b.n	8000b9a <ESP_INIT+0x10a>
	HAL_Delay(200);
 8000af8:	20c8      	movs	r0, #200	; 0xc8
 8000afa:	f000 fb1b 	bl	8001134 <HAL_Delay>
	ret = ESP_AT_Send(ESP_MODE_CMD, sizeof(ESP_MODE_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 8000afe:	2305      	movs	r3, #5
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2308      	movs	r3, #8
 8000b04:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <ESP_INIT+0x118>)
 8000b06:	210f      	movs	r1, #15
 8000b08:	4829      	ldr	r0, [pc, #164]	; (8000bb0 <ESP_INIT+0x120>)
 8000b0a:	f000 f879 	bl	8000c00 <ESP_AT_Send>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	if(ret==1) return 1;
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d101      	bne.n	8000b1c <ESP_INIT+0x8c>
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e03e      	b.n	8000b9a <ESP_INIT+0x10a>
	HAL_Delay(200);
 8000b1c:	20c8      	movs	r0, #200	; 0xc8
 8000b1e:	f000 fb09 	bl	8001134 <HAL_Delay>
	ret = ESP_AT_Send(ESP_WIFI_SET_CMD, sizeof(ESP_WIFI_SET_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 8000b22:	2305      	movs	r3, #5
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2308      	movs	r3, #8
 8000b28:	4a1f      	ldr	r2, [pc, #124]	; (8000ba8 <ESP_INIT+0x118>)
 8000b2a:	2123      	movs	r1, #35	; 0x23
 8000b2c:	4821      	ldr	r0, [pc, #132]	; (8000bb4 <ESP_INIT+0x124>)
 8000b2e:	f000 f867 	bl	8000c00 <ESP_AT_Send>
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	if(ret==1) return 1;
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d101      	bne.n	8000b40 <ESP_INIT+0xb0>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e02c      	b.n	8000b9a <ESP_INIT+0x10a>
	HAL_Delay(200);
 8000b40:	20c8      	movs	r0, #200	; 0xc8
 8000b42:	f000 faf7 	bl	8001134 <HAL_Delay>
	ret = ESP_AT_Send(ESP_WIFI_IP_CMD, sizeof(ESP_WIFI_IP_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 8000b46:	2305      	movs	r3, #5
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	4a16      	ldr	r2, [pc, #88]	; (8000ba8 <ESP_INIT+0x118>)
 8000b4e:	213a      	movs	r1, #58	; 0x3a
 8000b50:	4819      	ldr	r0, [pc, #100]	; (8000bb8 <ESP_INIT+0x128>)
 8000b52:	f000 f855 	bl	8000c00 <ESP_AT_Send>
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	if(ret==1) return 1;
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d101      	bne.n	8000b64 <ESP_INIT+0xd4>
 8000b60:	2301      	movs	r3, #1
 8000b62:	e01a      	b.n	8000b9a <ESP_INIT+0x10a>
	HAL_Delay(200);
 8000b64:	20c8      	movs	r0, #200	; 0xc8
 8000b66:	f000 fae5 	bl	8001134 <HAL_Delay>
	ret = ESP_AT_Send(ESP_UDP_CMD, sizeof(ESP_UDP_CMD), ESP_UDP_RET, sizeof(ESP_UDP_RET), CMD_TRIAL);
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	230d      	movs	r3, #13
 8000b70:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <ESP_INIT+0x12c>)
 8000b72:	212f      	movs	r1, #47	; 0x2f
 8000b74:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <ESP_INIT+0x130>)
 8000b76:	f000 f843 	bl	8000c00 <ESP_AT_Send>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
	if(ret==1) return 1;
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d101      	bne.n	8000b88 <ESP_INIT+0xf8>
 8000b84:	2301      	movs	r3, #1
 8000b86:	e008      	b.n	8000b9a <ESP_INIT+0x10a>
	HAL_Delay(200);
 8000b88:	20c8      	movs	r0, #200	; 0xc8
 8000b8a:	f000 fad3 	bl	8001134 <HAL_Delay>



	memset(Uart_RxData,0x00,sizeof(Uart_RxData));
 8000b8e:	22ff      	movs	r2, #255	; 0xff
 8000b90:	2100      	movs	r1, #0
 8000b92:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <ESP_INIT+0x134>)
 8000b94:	f003 f97b 	bl	8003e8e <memset>

	return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	08004754 	.word	0x08004754
 8000bac:	0800474c 	.word	0x0800474c
 8000bb0:	0800475c 	.word	0x0800475c
 8000bb4:	0800476c 	.word	0x0800476c
 8000bb8:	08004790 	.word	0x08004790
 8000bbc:	080047fc 	.word	0x080047fc
 8000bc0:	080047cc 	.word	0x080047cc
 8000bc4:	200000a0 	.word	0x200000a0

08000bc8 <ESP_Check_AT>:

char ESP_Check_AT(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af02      	add	r7, sp, #8
	char ret;

	ret = ESP_AT_Send(ESP_AT_CMD, sizeof(ESP_AT_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 8000bce:	2305      	movs	r3, #5
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2308      	movs	r3, #8
 8000bd4:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <ESP_Check_AT+0x30>)
 8000bd6:	2108      	movs	r1, #8
 8000bd8:	4808      	ldr	r0, [pc, #32]	; (8000bfc <ESP_Check_AT+0x34>)
 8000bda:	f000 f811 	bl	8000c00 <ESP_AT_Send>
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
	if(ret==1) return 1;
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d101      	bne.n	8000bec <ESP_Check_AT+0x24>
 8000be8:	2301      	movs	r3, #1
 8000bea:	e000      	b.n	8000bee <ESP_Check_AT+0x26>

	return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	08004754 	.word	0x08004754
 8000bfc:	0800474c 	.word	0x0800474c

08000c00 <ESP_AT_Send>:

char ESP_AT_Send(char *Cmd, char CmdSize, char *rData, char RetSize, char trial)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	72fb      	strb	r3, [r7, #11]
 8000c10:	4613      	mov	r3, r2
 8000c12:	72bb      	strb	r3, [r7, #10]
    char cnt=0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	75fb      	strb	r3, [r7, #23]

	memset(returnData,0x00,sizeof(returnData));
 8000c18:	2219      	movs	r2, #25
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4818      	ldr	r0, [pc, #96]	; (8000c80 <ESP_AT_Send+0x80>)
 8000c1e:	f003 f936 	bl	8003e8e <memset>
	memcpy(returnData,rData,RetSize);
 8000c22:	7abb      	ldrb	r3, [r7, #10]
 8000c24:	461a      	mov	r2, r3
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	4815      	ldr	r0, [pc, #84]	; (8000c80 <ESP_AT_Send+0x80>)
 8000c2a:	f003 f925 	bl	8003e78 <memcpy>

    while(cnt<trial)
 8000c2e:	e01d      	b.n	8000c6c <ESP_AT_Send+0x6c>
    {

    	Rx_Cnt = 0;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <ESP_AT_Send+0x84>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
        memset(Uart_RxData,0x00,sizeof(Uart_RxData));
 8000c36:	22ff      	movs	r2, #255	; 0xff
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4813      	ldr	r0, [pc, #76]	; (8000c88 <ESP_AT_Send+0x88>)
 8000c3c:	f003 f927 	bl	8003e8e <memset>
        HAL_UART_Transmit(&huart3, (uint8_t*)Cmd, CmdSize, 50);
 8000c40:	7afb      	ldrb	r3, [r7, #11]
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	2332      	movs	r3, #50	; 0x32
 8000c46:	68f9      	ldr	r1, [r7, #12]
 8000c48:	4810      	ldr	r0, [pc, #64]	; (8000c8c <ESP_AT_Send+0x8c>)
 8000c4a:	f002 f9a6 	bl	8002f9a <HAL_UART_Transmit>
        HAL_Delay(50);
 8000c4e:	2032      	movs	r0, #50	; 0x32
 8000c50:	f000 fa70 	bl	8001134 <HAL_Delay>
        if(Rx_Flag)
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <ESP_AT_Send+0x90>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d004      	beq.n	8000c66 <ESP_AT_Send+0x66>
        {
        	Rx_Flag = 0;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <ESP_AT_Send+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
        	return 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	e008      	b.n	8000c78 <ESP_AT_Send+0x78>
        }
    	cnt++;
 8000c66:	7dfb      	ldrb	r3, [r7, #23]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	75fb      	strb	r3, [r7, #23]
    while(cnt<trial)
 8000c6c:	7dfa      	ldrb	r2, [r7, #23]
 8000c6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d3dc      	bcc.n	8000c30 <ESP_AT_Send+0x30>
    }

    return 1;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200001e8 	.word	0x200001e8
 8000c84:	2000008c 	.word	0x2000008c
 8000c88:	200000a0 	.word	0x200000a0
 8000c8c:	200001a0 	.word	0x200001a0
 8000c90:	2000008d 	.word	0x2000008d

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <Error_Handler+0x6>

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4a0f      	ldr	r2, [pc, #60]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800

08000cec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <HAL_ADC_MspInit+0xdc>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d158      	bne.n	8000dc0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a26      	ldr	r2, [pc, #152]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d46:	2302      	movs	r3, #2
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	481d      	ldr	r0, [pc, #116]	; (8000dd0 <HAL_ADC_MspInit+0xe4>)
 8000d5a:	f001 faa3 	bl	80022a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d60:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <HAL_ADC_MspInit+0xec>)
 8000d62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d9c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000da6:	f000 feed 	bl	8001b84 <HAL_DMA_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000db0:	f7ff ff70 	bl	8000c94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000db8:	639a      	str	r2, [r3, #56]	; 0x38
 8000dba:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40012000 	.word	0x40012000
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	20000250 	.word	0x20000250
 8000dd8:	40026470 	.word	0x40026470

08000ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a1d      	ldr	r2, [pc, #116]	; (8000e70 <HAL_UART_MspInit+0x94>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d134      	bne.n	8000e68 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <HAL_UART_MspInit+0x98>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <HAL_UART_MspInit+0x98>)
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <HAL_UART_MspInit+0x98>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <HAL_UART_MspInit+0x98>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <HAL_UART_MspInit+0x98>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_UART_MspInit+0x98>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e48:	2307      	movs	r3, #7
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4809      	ldr	r0, [pc, #36]	; (8000e78 <HAL_UART_MspInit+0x9c>)
 8000e54:	f001 fa26 	bl	80022a4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2027      	movs	r0, #39	; 0x27
 8000e5e:	f000 fe5a 	bl	8001b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e62:	2027      	movs	r0, #39	; 0x27
 8000e64:	f000 fe73 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e68:	bf00      	nop
 8000e6a:	3728      	adds	r7, #40	; 0x28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40004800 	.word	0x40004800
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020c00 	.word	0x40020c00

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <NMI_Handler+0x4>

08000e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <MemManage_Handler+0x4>

08000e8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec8:	f000 f914 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  HAL_UART_Receive(&huart3, &Rx_Byte[0], 1, 10);
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4915      	ldr	r1, [pc, #84]	; (8000f30 <USART3_IRQHandler+0x60>)
 8000eda:	4816      	ldr	r0, [pc, #88]	; (8000f34 <USART3_IRQHandler+0x64>)
 8000edc:	f002 f8f6 	bl	80030cc <HAL_UART_Receive>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ee0:	4814      	ldr	r0, [pc, #80]	; (8000f34 <USART3_IRQHandler+0x64>)
 8000ee2:	f002 f999 	bl	8003218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  Uart_RxData[Rx_Cnt++] = Rx_Byte[0];
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <USART3_IRQHandler+0x68>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	1c5a      	adds	r2, r3, #1
 8000eec:	b2d1      	uxtb	r1, r2
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <USART3_IRQHandler+0x68>)
 8000ef0:	7011      	strb	r1, [r2, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <USART3_IRQHandler+0x60>)
 8000ef6:	7819      	ldrb	r1, [r3, #0]
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <USART3_IRQHandler+0x6c>)
 8000efa:	5499      	strb	r1, [r3, r2]

  if(strstr(Uart_RxData,"+IPD") != 0)
 8000efc:	4910      	ldr	r1, [pc, #64]	; (8000f40 <USART3_IRQHandler+0x70>)
 8000efe:	480f      	ldr	r0, [pc, #60]	; (8000f3c <USART3_IRQHandler+0x6c>)
 8000f00:	f002 ffee 	bl	8003ee0 <strstr>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <USART3_IRQHandler+0x40>
  {
	Rx_Message = 1;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <USART3_IRQHandler+0x74>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
  }

  if(strstr(Uart_RxData,returnData) != 0)
 8000f10:	490d      	ldr	r1, [pc, #52]	; (8000f48 <USART3_IRQHandler+0x78>)
 8000f12:	480a      	ldr	r0, [pc, #40]	; (8000f3c <USART3_IRQHandler+0x6c>)
 8000f14:	f002 ffe4 	bl	8003ee0 <strstr>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d005      	beq.n	8000f2a <USART3_IRQHandler+0x5a>
  {
	Rx_Cnt = 0;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <USART3_IRQHandler+0x68>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
	Rx_Flag = 1;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <USART3_IRQHandler+0x7c>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END USART3_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200004b8 	.word	0x200004b8
 8000f34:	200001a0 	.word	0x200001a0
 8000f38:	2000008c 	.word	0x2000008c
 8000f3c:	200000a0 	.word	0x200000a0
 8000f40:	08004744 	.word	0x08004744
 8000f44:	2000008e 	.word	0x2000008e
 8000f48:	200001e8 	.word	0x200001e8
 8000f4c:	2000008d 	.word	0x2000008d

08000f50 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <DMA2_Stream4_IRQHandler+0x10>)
 8000f56:	f000 ff3d 	bl	8001dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000250 	.word	0x20000250

08000f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f6c:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <_sbrk+0x5c>)
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <_sbrk+0x60>)
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <_sbrk+0x64>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <_sbrk+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d207      	bcs.n	8000fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f94:	f002 ff46 	bl	8003e24 <__errno>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	230c      	movs	r3, #12
 8000f9c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	e009      	b.n	8000fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <_sbrk+0x64>)
 8000fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20020000 	.word	0x20020000
 8000fc4:	00000400 	.word	0x00000400
 8000fc8:	20000094 	.word	0x20000094
 8000fcc:	200004c8 	.word	0x200004c8

08000fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <SystemInit+0x28>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fda:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <SystemInit+0x28>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SystemInit+0x28>)
 8000fe6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fea:	609a      	str	r2, [r3, #8]
#endif
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001000:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001002:	e003      	b.n	800100c <LoopCopyDataInit>

08001004 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001006:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001008:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800100a:	3104      	adds	r1, #4

0800100c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800100c:	480b      	ldr	r0, [pc, #44]	; (800103c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001010:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001012:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001014:	d3f6      	bcc.n	8001004 <CopyDataInit>
  ldr  r2, =_sbss
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001018:	e002      	b.n	8001020 <LoopFillZerobss>

0800101a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800101a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800101c:	f842 3b04 	str.w	r3, [r2], #4

08001020 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001022:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001024:	d3f9      	bcc.n	800101a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001026:	f7ff ffd3 	bl	8000fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f002 ff01 	bl	8003e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff faa7 	bl	8000580 <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001034:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001038:	08004884 	.word	0x08004884
  ldr  r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001040:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001044:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001048:	200004c4 	.word	0x200004c4

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 fd41 	bl	8001b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fe0a 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fd59 	bl	8001b6a <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 fd21 	bl	8001b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	200004bc 	.word	0x200004bc

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200004bc 	.word	0x200004bc

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_Delay+0x40>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffde 	bl	800111c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000008 	.word	0x20000008

08001178 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e033      	b.n	80011f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	2b00      	cmp	r3, #0
 8001194:	d109      	bne.n	80011aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff fda8 	bl	8000cec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d118      	bne.n	80011e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011be:	f023 0302 	bic.w	r3, r3, #2
 80011c2:	f043 0202 	orr.w	r2, r3, #2
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fa4a 	bl	8001664 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f023 0303 	bic.w	r3, r3, #3
 80011de:	f043 0201 	orr.w	r2, r3, #1
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
 80011e6:	e001      	b.n	80011ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001216:	2b01      	cmp	r3, #1
 8001218:	d101      	bne.n	800121e <HAL_ADC_Start_DMA+0x1e>
 800121a:	2302      	movs	r3, #2
 800121c:	e0cc      	b.n	80013b8 <HAL_ADC_Start_DMA+0x1b8>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b01      	cmp	r3, #1
 8001232:	d018      	beq.n	8001266 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0201 	orr.w	r2, r2, #1
 8001242:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001244:	4b5e      	ldr	r3, [pc, #376]	; (80013c0 <HAL_ADC_Start_DMA+0x1c0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a5e      	ldr	r2, [pc, #376]	; (80013c4 <HAL_ADC_Start_DMA+0x1c4>)
 800124a:	fba2 2303 	umull	r2, r3, r2, r3
 800124e:	0c9a      	lsrs	r2, r3, #18
 8001250:	4613      	mov	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	4413      	add	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001258:	e002      	b.n	8001260 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	3b01      	subs	r3, #1
 800125e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f9      	bne.n	800125a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b01      	cmp	r3, #1
 8001272:	f040 80a0 	bne.w	80013b6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800127e:	f023 0301 	bic.w	r3, r3, #1
 8001282:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001294:	2b00      	cmp	r3, #0
 8001296:	d007      	beq.n	80012a8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012b4:	d106      	bne.n	80012c4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f023 0206 	bic.w	r2, r3, #6
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	645a      	str	r2, [r3, #68]	; 0x44
 80012c2:	e002      	b.n	80012ca <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012d2:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <HAL_ADC_Start_DMA+0x1c8>)
 80012d4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012da:	4a3c      	ldr	r2, [pc, #240]	; (80013cc <HAL_ADC_Start_DMA+0x1cc>)
 80012dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e2:	4a3b      	ldr	r2, [pc, #236]	; (80013d0 <HAL_ADC_Start_DMA+0x1d0>)
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ea:	4a3a      	ldr	r2, [pc, #232]	; (80013d4 <HAL_ADC_Start_DMA+0x1d4>)
 80012ec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001306:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001316:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	334c      	adds	r3, #76	; 0x4c
 8001322:	4619      	mov	r1, r3
 8001324:	68ba      	ldr	r2, [r7, #8]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f000 fcda 	bl	8001ce0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	2b00      	cmp	r3, #0
 8001336:	d12a      	bne.n	800138e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a26      	ldr	r2, [pc, #152]	; (80013d8 <HAL_ADC_Start_DMA+0x1d8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d015      	beq.n	800136e <HAL_ADC_Start_DMA+0x16e>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a25      	ldr	r2, [pc, #148]	; (80013dc <HAL_ADC_Start_DMA+0x1dc>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d105      	bne.n	8001358 <HAL_ADC_Start_DMA+0x158>
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <HAL_ADC_Start_DMA+0x1c8>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 031f 	and.w	r3, r3, #31
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00a      	beq.n	800136e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <HAL_ADC_Start_DMA+0x1e0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d129      	bne.n	80013b6 <HAL_ADC_Start_DMA+0x1b6>
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_ADC_Start_DMA+0x1c8>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 031f 	and.w	r3, r3, #31
 800136a:	2b0f      	cmp	r3, #15
 800136c:	d823      	bhi.n	80013b6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d11c      	bne.n	80013b6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	e013      	b.n	80013b6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a11      	ldr	r2, [pc, #68]	; (80013d8 <HAL_ADC_Start_DMA+0x1d8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d10e      	bne.n	80013b6 <HAL_ADC_Start_DMA+0x1b6>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d107      	bne.n	80013b6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013b4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000000 	.word	0x20000000
 80013c4:	431bde83 	.word	0x431bde83
 80013c8:	40012300 	.word	0x40012300
 80013cc:	0800185d 	.word	0x0800185d
 80013d0:	08001917 	.word	0x08001917
 80013d4:	08001933 	.word	0x08001933
 80013d8:	40012000 	.word	0x40012000
 80013dc:	40012100 	.word	0x40012100
 80013e0:	40012200 	.word	0x40012200

080013e4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_ADC_ConfigChannel+0x1c>
 8001438:	2302      	movs	r3, #2
 800143a:	e105      	b.n	8001648 <HAL_ADC_ConfigChannel+0x228>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b09      	cmp	r3, #9
 800144a:	d925      	bls.n	8001498 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68d9      	ldr	r1, [r3, #12]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	3b1e      	subs	r3, #30
 8001462:	2207      	movs	r2, #7
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43da      	mvns	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	400a      	ands	r2, r1
 8001470:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68d9      	ldr	r1, [r3, #12]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b29b      	uxth	r3, r3
 8001482:	4618      	mov	r0, r3
 8001484:	4603      	mov	r3, r0
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4403      	add	r3, r0
 800148a:	3b1e      	subs	r3, #30
 800148c:	409a      	lsls	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	e022      	b.n	80014de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6919      	ldr	r1, [r3, #16]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	2207      	movs	r2, #7
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43da      	mvns	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	400a      	ands	r2, r1
 80014ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6919      	ldr	r1, [r3, #16]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	4603      	mov	r3, r0
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4403      	add	r3, r0
 80014d4:	409a      	lsls	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d824      	bhi.n	8001530 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	3b05      	subs	r3, #5
 80014f8:	221f      	movs	r2, #31
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	400a      	ands	r2, r1
 8001506:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	b29b      	uxth	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	3b05      	subs	r3, #5
 8001522:	fa00 f203 	lsl.w	r2, r0, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	635a      	str	r2, [r3, #52]	; 0x34
 800152e:	e04c      	b.n	80015ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b0c      	cmp	r3, #12
 8001536:	d824      	bhi.n	8001582 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	3b23      	subs	r3, #35	; 0x23
 800154a:	221f      	movs	r2, #31
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43da      	mvns	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	400a      	ands	r2, r1
 8001558:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	b29b      	uxth	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	3b23      	subs	r3, #35	; 0x23
 8001574:	fa00 f203 	lsl.w	r2, r0, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	631a      	str	r2, [r3, #48]	; 0x30
 8001580:	e023      	b.n	80015ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	3b41      	subs	r3, #65	; 0x41
 8001594:	221f      	movs	r2, #31
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	400a      	ands	r2, r1
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4618      	mov	r0, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	3b41      	subs	r3, #65	; 0x41
 80015be:	fa00 f203 	lsl.w	r2, r0, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <HAL_ADC_ConfigChannel+0x234>)
 80015cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a21      	ldr	r2, [pc, #132]	; (8001658 <HAL_ADC_ConfigChannel+0x238>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d109      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1cc>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b12      	cmp	r3, #18
 80015de:	d105      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_ADC_ConfigChannel+0x238>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d123      	bne.n	800163e <HAL_ADC_ConfigChannel+0x21e>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b10      	cmp	r3, #16
 80015fc:	d003      	beq.n	8001606 <HAL_ADC_ConfigChannel+0x1e6>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b11      	cmp	r3, #17
 8001604:	d11b      	bne.n	800163e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b10      	cmp	r3, #16
 8001618:	d111      	bne.n	800163e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_ADC_ConfigChannel+0x23c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a10      	ldr	r2, [pc, #64]	; (8001660 <HAL_ADC_ConfigChannel+0x240>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	0c9a      	lsrs	r2, r3, #18
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001630:	e002      	b.n	8001638 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	3b01      	subs	r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f9      	bne.n	8001632 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	40012300 	.word	0x40012300
 8001658:	40012000 	.word	0x40012000
 800165c:	20000000 	.word	0x20000000
 8001660:	431bde83 	.word	0x431bde83

08001664 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800166c:	4b79      	ldr	r3, [pc, #484]	; (8001854 <ADC_Init+0x1f0>)
 800166e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	431a      	orrs	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001698:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	021a      	lsls	r2, r3, #8
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6899      	ldr	r1, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	4a58      	ldr	r2, [pc, #352]	; (8001858 <ADC_Init+0x1f4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d022      	beq.n	8001742 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800170a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6899      	ldr	r1, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800172c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6899      	ldr	r1, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	e00f      	b.n	8001762 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001750:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001760:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0202 	bic.w	r2, r2, #2
 8001770:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6899      	ldr	r1, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7e1b      	ldrb	r3, [r3, #24]
 800177c:	005a      	lsls	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d01b      	beq.n	80017c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800179e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6859      	ldr	r1, [r3, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	3b01      	subs	r3, #1
 80017bc:	035a      	lsls	r2, r3, #13
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	e007      	b.n	80017d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	051a      	lsls	r2, r3, #20
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800180c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6899      	ldr	r1, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800181a:	025a      	lsls	r2, r3, #9
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6899      	ldr	r1, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	029a      	lsls	r2, r3, #10
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	609a      	str	r2, [r3, #8]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	40012300 	.word	0x40012300
 8001858:	0f000001 	.word	0x0f000001

0800185c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001868:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001872:	2b00      	cmp	r3, #0
 8001874:	d13c      	bne.n	80018f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d12b      	bne.n	80018e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001894:	2b00      	cmp	r3, #0
 8001896:	d127      	bne.n	80018e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d119      	bne.n	80018e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0220 	bic.w	r2, r2, #32
 80018c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d105      	bne.n	80018e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f043 0201 	orr.w	r2, r3, #1
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f7ff fd7b 	bl	80013e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80018ee:	e00e      	b.n	800190e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f7ff fd85 	bl	800140c <HAL_ADC_ErrorCallback>
}
 8001902:	e004      	b.n	800190e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	4798      	blx	r3
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001922:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f7ff fd67 	bl	80013f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2240      	movs	r2, #64	; 0x40
 8001944:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f043 0204 	orr.w	r2, r3, #4
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f7ff fd5a 	bl	800140c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800197c:	4013      	ands	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800198c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60d3      	str	r3, [r2, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 0307 	and.w	r3, r3, #7
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db0b      	blt.n	80019ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	f003 021f 	and.w	r2, r3, #31
 80019dc:	4907      	ldr	r1, [pc, #28]	; (80019fc <__NVIC_EnableIRQ+0x38>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	2001      	movs	r0, #1
 80019e6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e100 	.word	0xe000e100

08001a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	db0a      	blt.n	8001a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	490c      	ldr	r1, [pc, #48]	; (8001a4c <__NVIC_SetPriority+0x4c>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	0112      	lsls	r2, r2, #4
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a28:	e00a      	b.n	8001a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4908      	ldr	r1, [pc, #32]	; (8001a50 <__NVIC_SetPriority+0x50>)
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	3b04      	subs	r3, #4
 8001a38:	0112      	lsls	r2, r2, #4
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	761a      	strb	r2, [r3, #24]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000e100 	.word	0xe000e100
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f1c3 0307 	rsb	r3, r3, #7
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	bf28      	it	cs
 8001a72:	2304      	movcs	r3, #4
 8001a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d902      	bls.n	8001a84 <NVIC_EncodePriority+0x30>
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3b03      	subs	r3, #3
 8001a82:	e000      	b.n	8001a86 <NVIC_EncodePriority+0x32>
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43da      	mvns	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	401a      	ands	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	4313      	orrs	r3, r2
         );
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001acc:	d301      	bcc.n	8001ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00f      	b.n	8001af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <SysTick_Config+0x40>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ada:	210f      	movs	r1, #15
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f7ff ff8e 	bl	8001a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <SysTick_Config+0x40>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <SysTick_Config+0x40>)
 8001aec:	2207      	movs	r2, #7
 8001aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	e000e010 	.word	0xe000e010

08001b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff29 	bl	8001960 <__NVIC_SetPriorityGrouping>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b28:	f7ff ff3e 	bl	80019a8 <__NVIC_GetPriorityGrouping>
 8001b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6978      	ldr	r0, [r7, #20]
 8001b34:	f7ff ff8e 	bl	8001a54 <NVIC_EncodePriority>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff5d 	bl	8001a00 <__NVIC_SetPriority>
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff31 	bl	80019c4 <__NVIC_EnableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffa2 	bl	8001abc <SysTick_Config>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff fac4 	bl	800111c <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e099      	b.n	8001cd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc0:	e00f      	b.n	8001be2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bc2:	f7ff faab 	bl	800111c <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d908      	bls.n	8001be2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2203      	movs	r2, #3
 8001bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e078      	b.n	8001cd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1e8      	bne.n	8001bc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <HAL_DMA_Init+0x158>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d107      	bne.n	8001c4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	4313      	orrs	r3, r2
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f023 0307 	bic.w	r3, r3, #7
 8001c62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d117      	bne.n	8001ca6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00e      	beq.n	8001ca6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fa91 	bl	80021b0 <DMA_CheckFifoParam>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2240      	movs	r2, #64	; 0x40
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e016      	b.n	8001cd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fa48 	bl	8002144 <DMA_CalcBaseAndBitshift>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbc:	223f      	movs	r2, #63	; 0x3f
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	f010803f 	.word	0xf010803f

08001ce0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_DMA_Start_IT+0x26>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e040      	b.n	8001d88 <HAL_DMA_Start_IT+0xa8>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d12f      	bne.n	8001d7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f9da 	bl	80020e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d38:	223f      	movs	r2, #63	; 0x3f
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0216 	orr.w	r2, r2, #22
 8001d4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d007      	beq.n	8001d68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0208 	orr.w	r2, r2, #8
 8001d66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	e005      	b.n	8001d86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d82:	2302      	movs	r3, #2
 8001d84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d004      	beq.n	8001dae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2280      	movs	r2, #128	; 0x80
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00c      	b.n	8001dc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2205      	movs	r2, #5
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0201 	bic.w	r2, r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001de0:	4b92      	ldr	r3, [pc, #584]	; (800202c <HAL_DMA_IRQHandler+0x258>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a92      	ldr	r2, [pc, #584]	; (8002030 <HAL_DMA_IRQHandler+0x25c>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	0a9b      	lsrs	r3, r3, #10
 8001dec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfe:	2208      	movs	r2, #8
 8001e00:	409a      	lsls	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d01a      	beq.n	8001e40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d013      	beq.n	8001e40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0204 	bic.w	r2, r2, #4
 8001e26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e38:	f043 0201 	orr.w	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e44:	2201      	movs	r2, #1
 8001e46:	409a      	lsls	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d012      	beq.n	8001e76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	2201      	movs	r2, #1
 8001e64:	409a      	lsls	r2, r3
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	f043 0202 	orr.w	r2, r3, #2
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d012      	beq.n	8001eac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00b      	beq.n	8001eac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e98:	2204      	movs	r2, #4
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea4:	f043 0204 	orr.w	r2, r3, #4
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d043      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d03c      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ece:	2210      	movs	r2, #16
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d018      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d108      	bne.n	8001f04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d024      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
 8001f02:	e01f      	b.n	8001f44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d01b      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	4798      	blx	r3
 8001f14:	e016      	b.n	8001f44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d107      	bne.n	8001f34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0208 	bic.w	r2, r2, #8
 8001f32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	2220      	movs	r2, #32
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 808e 	beq.w	8002072 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 8086 	beq.w	8002072 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b05      	cmp	r3, #5
 8001f7c:	d136      	bne.n	8001fec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0216 	bic.w	r2, r2, #22
 8001f8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695a      	ldr	r2, [r3, #20]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d103      	bne.n	8001fae <HAL_DMA_IRQHandler+0x1da>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d007      	beq.n	8001fbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0208 	bic.w	r2, r2, #8
 8001fbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	223f      	movs	r2, #63	; 0x3f
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d07d      	beq.n	80020de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	4798      	blx	r3
        }
        return;
 8001fea:	e078      	b.n	80020de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d01c      	beq.n	8002034 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d108      	bne.n	800201a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	2b00      	cmp	r3, #0
 800200e:	d030      	beq.n	8002072 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
 8002018:	e02b      	b.n	8002072 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201e:	2b00      	cmp	r3, #0
 8002020:	d027      	beq.n	8002072 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	4798      	blx	r3
 800202a:	e022      	b.n	8002072 <HAL_DMA_IRQHandler+0x29e>
 800202c:	20000000 	.word	0x20000000
 8002030:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10f      	bne.n	8002062 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0210 	bic.w	r2, r2, #16
 8002050:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002076:	2b00      	cmp	r3, #0
 8002078:	d032      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d022      	beq.n	80020cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2205      	movs	r2, #5
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	3301      	adds	r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d307      	bcc.n	80020ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f2      	bne.n	800209e <HAL_DMA_IRQHandler+0x2ca>
 80020b8:	e000      	b.n	80020bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	4798      	blx	r3
 80020dc:	e000      	b.n	80020e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80020de:	bf00      	nop
    }
  }
}
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop

080020e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002104:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b40      	cmp	r3, #64	; 0x40
 8002114:	d108      	bne.n	8002128 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002126:	e007      	b.n	8002138 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	60da      	str	r2, [r3, #12]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	3b10      	subs	r3, #16
 8002154:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	091b      	lsrs	r3, r3, #4
 800215c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800215e:	4a13      	ldr	r2, [pc, #76]	; (80021ac <DMA_CalcBaseAndBitshift+0x68>)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d909      	bls.n	8002186 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800217a:	f023 0303 	bic.w	r3, r3, #3
 800217e:	1d1a      	adds	r2, r3, #4
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	659a      	str	r2, [r3, #88]	; 0x58
 8002184:	e007      	b.n	8002196 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800218e:	f023 0303 	bic.w	r3, r3, #3
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	aaaaaaab 	.word	0xaaaaaaab
 80021ac:	08004838 	.word	0x08004838

080021b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d11f      	bne.n	800220a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d855      	bhi.n	800227c <DMA_CheckFifoParam+0xcc>
 80021d0:	a201      	add	r2, pc, #4	; (adr r2, 80021d8 <DMA_CheckFifoParam+0x28>)
 80021d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d6:	bf00      	nop
 80021d8:	080021e9 	.word	0x080021e9
 80021dc:	080021fb 	.word	0x080021fb
 80021e0:	080021e9 	.word	0x080021e9
 80021e4:	0800227d 	.word	0x0800227d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d045      	beq.n	8002280 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f8:	e042      	b.n	8002280 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002202:	d13f      	bne.n	8002284 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002208:	e03c      	b.n	8002284 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002212:	d121      	bne.n	8002258 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b03      	cmp	r3, #3
 8002218:	d836      	bhi.n	8002288 <DMA_CheckFifoParam+0xd8>
 800221a:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <DMA_CheckFifoParam+0x70>)
 800221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002220:	08002231 	.word	0x08002231
 8002224:	08002237 	.word	0x08002237
 8002228:	08002231 	.word	0x08002231
 800222c:	08002249 	.word	0x08002249
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
      break;
 8002234:	e02f      	b.n	8002296 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d024      	beq.n	800228c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002246:	e021      	b.n	800228c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002250:	d11e      	bne.n	8002290 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002256:	e01b      	b.n	8002290 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d902      	bls.n	8002264 <DMA_CheckFifoParam+0xb4>
 800225e:	2b03      	cmp	r3, #3
 8002260:	d003      	beq.n	800226a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002262:	e018      	b.n	8002296 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
      break;
 8002268:	e015      	b.n	8002296 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00e      	beq.n	8002294 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
      break;
 800227a:	e00b      	b.n	8002294 <DMA_CheckFifoParam+0xe4>
      break;
 800227c:	bf00      	nop
 800227e:	e00a      	b.n	8002296 <DMA_CheckFifoParam+0xe6>
      break;
 8002280:	bf00      	nop
 8002282:	e008      	b.n	8002296 <DMA_CheckFifoParam+0xe6>
      break;
 8002284:	bf00      	nop
 8002286:	e006      	b.n	8002296 <DMA_CheckFifoParam+0xe6>
      break;
 8002288:	bf00      	nop
 800228a:	e004      	b.n	8002296 <DMA_CheckFifoParam+0xe6>
      break;
 800228c:	bf00      	nop
 800228e:	e002      	b.n	8002296 <DMA_CheckFifoParam+0xe6>
      break;   
 8002290:	bf00      	nop
 8002292:	e000      	b.n	8002296 <DMA_CheckFifoParam+0xe6>
      break;
 8002294:	bf00      	nop
    }
  } 
  
  return status; 
 8002296:	7bfb      	ldrb	r3, [r7, #15]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	; 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	e16b      	b.n	8002598 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022c0:	2201      	movs	r2, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	429a      	cmp	r2, r3
 80022da:	f040 815a 	bne.w	8002592 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d00b      	beq.n	80022fe <HAL_GPIO_Init+0x5a>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d007      	beq.n	80022fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f2:	2b11      	cmp	r3, #17
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b12      	cmp	r3, #18
 80022fc:	d130      	bne.n	8002360 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002334:	2201      	movs	r2, #1
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 0201 	and.w	r2, r3, #1
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0xfc>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b12      	cmp	r3, #18
 800239e:	d123      	bne.n	80023e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	08da      	lsrs	r2, r3, #3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3208      	adds	r2, #8
 80023a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	220f      	movs	r2, #15
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	08da      	lsrs	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3208      	adds	r2, #8
 80023e2:	69b9      	ldr	r1, [r7, #24]
 80023e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	2203      	movs	r2, #3
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0203 	and.w	r2, r3, #3
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80b4 	beq.w	8002592 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	4b5f      	ldr	r3, [pc, #380]	; (80025ac <HAL_GPIO_Init+0x308>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	4a5e      	ldr	r2, [pc, #376]	; (80025ac <HAL_GPIO_Init+0x308>)
 8002434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002438:	6453      	str	r3, [r2, #68]	; 0x44
 800243a:	4b5c      	ldr	r3, [pc, #368]	; (80025ac <HAL_GPIO_Init+0x308>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002446:	4a5a      	ldr	r2, [pc, #360]	; (80025b0 <HAL_GPIO_Init+0x30c>)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	3302      	adds	r3, #2
 800244e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	220f      	movs	r2, #15
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a51      	ldr	r2, [pc, #324]	; (80025b4 <HAL_GPIO_Init+0x310>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d02b      	beq.n	80024ca <HAL_GPIO_Init+0x226>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a50      	ldr	r2, [pc, #320]	; (80025b8 <HAL_GPIO_Init+0x314>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d025      	beq.n	80024c6 <HAL_GPIO_Init+0x222>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4f      	ldr	r2, [pc, #316]	; (80025bc <HAL_GPIO_Init+0x318>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d01f      	beq.n	80024c2 <HAL_GPIO_Init+0x21e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4e      	ldr	r2, [pc, #312]	; (80025c0 <HAL_GPIO_Init+0x31c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d019      	beq.n	80024be <HAL_GPIO_Init+0x21a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4d      	ldr	r2, [pc, #308]	; (80025c4 <HAL_GPIO_Init+0x320>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <HAL_GPIO_Init+0x216>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4c      	ldr	r2, [pc, #304]	; (80025c8 <HAL_GPIO_Init+0x324>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00d      	beq.n	80024b6 <HAL_GPIO_Init+0x212>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4b      	ldr	r2, [pc, #300]	; (80025cc <HAL_GPIO_Init+0x328>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d007      	beq.n	80024b2 <HAL_GPIO_Init+0x20e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4a      	ldr	r2, [pc, #296]	; (80025d0 <HAL_GPIO_Init+0x32c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_GPIO_Init+0x20a>
 80024aa:	2307      	movs	r3, #7
 80024ac:	e00e      	b.n	80024cc <HAL_GPIO_Init+0x228>
 80024ae:	2308      	movs	r3, #8
 80024b0:	e00c      	b.n	80024cc <HAL_GPIO_Init+0x228>
 80024b2:	2306      	movs	r3, #6
 80024b4:	e00a      	b.n	80024cc <HAL_GPIO_Init+0x228>
 80024b6:	2305      	movs	r3, #5
 80024b8:	e008      	b.n	80024cc <HAL_GPIO_Init+0x228>
 80024ba:	2304      	movs	r3, #4
 80024bc:	e006      	b.n	80024cc <HAL_GPIO_Init+0x228>
 80024be:	2303      	movs	r3, #3
 80024c0:	e004      	b.n	80024cc <HAL_GPIO_Init+0x228>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e002      	b.n	80024cc <HAL_GPIO_Init+0x228>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_GPIO_Init+0x228>
 80024ca:	2300      	movs	r3, #0
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	f002 0203 	and.w	r2, r2, #3
 80024d2:	0092      	lsls	r2, r2, #2
 80024d4:	4093      	lsls	r3, r2
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024dc:	4934      	ldr	r1, [pc, #208]	; (80025b0 <HAL_GPIO_Init+0x30c>)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	3302      	adds	r3, #2
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ea:	4b3a      	ldr	r3, [pc, #232]	; (80025d4 <HAL_GPIO_Init+0x330>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800250e:	4a31      	ldr	r2, [pc, #196]	; (80025d4 <HAL_GPIO_Init+0x330>)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002514:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <HAL_GPIO_Init+0x330>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002538:	4a26      	ldr	r2, [pc, #152]	; (80025d4 <HAL_GPIO_Init+0x330>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800253e:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <HAL_GPIO_Init+0x330>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002562:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <HAL_GPIO_Init+0x330>)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002568:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <HAL_GPIO_Init+0x330>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800258c:	4a11      	ldr	r2, [pc, #68]	; (80025d4 <HAL_GPIO_Init+0x330>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3301      	adds	r3, #1
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2b0f      	cmp	r3, #15
 800259c:	f67f ae90 	bls.w	80022c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a0:	bf00      	nop
 80025a2:	3724      	adds	r7, #36	; 0x24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40013800 	.word	0x40013800
 80025b4:	40020000 	.word	0x40020000
 80025b8:	40020400 	.word	0x40020400
 80025bc:	40020800 	.word	0x40020800
 80025c0:	40020c00 	.word	0x40020c00
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40021400 	.word	0x40021400
 80025cc:	40021800 	.word	0x40021800
 80025d0:	40021c00 	.word	0x40021c00
 80025d4:	40013c00 	.word	0x40013c00

080025d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	887b      	ldrh	r3, [r7, #2]
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
 80025f4:	e001      	b.n	80025fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
 8002614:	4613      	mov	r3, r2
 8002616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002624:	e003      	b.n	800262e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e25b      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d075      	beq.n	8002746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800265a:	4ba3      	ldr	r3, [pc, #652]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b04      	cmp	r3, #4
 8002664:	d00c      	beq.n	8002680 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002666:	4ba0      	ldr	r3, [pc, #640]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800266e:	2b08      	cmp	r3, #8
 8002670:	d112      	bne.n	8002698 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002672:	4b9d      	ldr	r3, [pc, #628]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800267e:	d10b      	bne.n	8002698 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	4b99      	ldr	r3, [pc, #612]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d05b      	beq.n	8002744 <HAL_RCC_OscConfig+0x108>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d157      	bne.n	8002744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e236      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a0:	d106      	bne.n	80026b0 <HAL_RCC_OscConfig+0x74>
 80026a2:	4b91      	ldr	r3, [pc, #580]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a90      	ldr	r2, [pc, #576]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e01d      	b.n	80026ec <HAL_RCC_OscConfig+0xb0>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x98>
 80026ba:	4b8b      	ldr	r3, [pc, #556]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a8a      	ldr	r2, [pc, #552]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b88      	ldr	r3, [pc, #544]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a87      	ldr	r2, [pc, #540]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0xb0>
 80026d4:	4b84      	ldr	r3, [pc, #528]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a83      	ldr	r2, [pc, #524]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 80026da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b81      	ldr	r3, [pc, #516]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a80      	ldr	r2, [pc, #512]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 80026e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fd12 	bl	800111c <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026fc:	f7fe fd0e 	bl	800111c <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	; 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e1fb      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b76      	ldr	r3, [pc, #472]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0xc0>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fe fcfe 	bl	800111c <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002724:	f7fe fcfa 	bl	800111c <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e1e7      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	4b6c      	ldr	r3, [pc, #432]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0xe8>
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d063      	beq.n	800281a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002752:	4b65      	ldr	r3, [pc, #404]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275e:	4b62      	ldr	r3, [pc, #392]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002766:	2b08      	cmp	r3, #8
 8002768:	d11c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276a:	4b5f      	ldr	r3, [pc, #380]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d116      	bne.n	80027a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	4b5c      	ldr	r3, [pc, #368]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_RCC_OscConfig+0x152>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d001      	beq.n	800278e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e1bb      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	4b56      	ldr	r3, [pc, #344]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4952      	ldr	r1, [pc, #328]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a2:	e03a      	b.n	800281a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d020      	beq.n	80027ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ac:	4b4f      	ldr	r3, [pc, #316]	; (80028ec <HAL_RCC_OscConfig+0x2b0>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7fe fcb3 	bl	800111c <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ba:	f7fe fcaf 	bl	800111c <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e19c      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d8:	4b43      	ldr	r3, [pc, #268]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4940      	ldr	r1, [pc, #256]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ee:	4b3f      	ldr	r3, [pc, #252]	; (80028ec <HAL_RCC_OscConfig+0x2b0>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fc92 	bl	800111c <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027fc:	f7fe fc8e 	bl	800111c <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e17b      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d030      	beq.n	8002888 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d016      	beq.n	800285c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282e:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <HAL_RCC_OscConfig+0x2b4>)
 8002830:	2201      	movs	r2, #1
 8002832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7fe fc72 	bl	800111c <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283c:	f7fe fc6e 	bl	800111c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e15b      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284e:	4b26      	ldr	r3, [pc, #152]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 8002850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x200>
 800285a:	e015      	b.n	8002888 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285c:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <HAL_RCC_OscConfig+0x2b4>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002862:	f7fe fc5b 	bl	800111c <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800286a:	f7fe fc57 	bl	800111c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e144      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 800287e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80a0 	beq.w	80029d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289a:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10f      	bne.n	80028c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	4a0e      	ldr	r2, [pc, #56]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 80028b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b4:	6413      	str	r3, [r2, #64]	; 0x40
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c2:	2301      	movs	r3, #1
 80028c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCC_OscConfig+0x2b8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d121      	bne.n	8002916 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d2:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <HAL_RCC_OscConfig+0x2b8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a07      	ldr	r2, [pc, #28]	; (80028f4 <HAL_RCC_OscConfig+0x2b8>)
 80028d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028de:	f7fe fc1d 	bl	800111c <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	e011      	b.n	800290a <HAL_RCC_OscConfig+0x2ce>
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	42470000 	.word	0x42470000
 80028f0:	42470e80 	.word	0x42470e80
 80028f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f8:	f7fe fc10 	bl	800111c <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e0fd      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b81      	ldr	r3, [pc, #516]	; (8002b10 <HAL_RCC_OscConfig+0x4d4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d106      	bne.n	800292c <HAL_RCC_OscConfig+0x2f0>
 800291e:	4b7d      	ldr	r3, [pc, #500]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	4a7c      	ldr	r2, [pc, #496]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6713      	str	r3, [r2, #112]	; 0x70
 800292a:	e01c      	b.n	8002966 <HAL_RCC_OscConfig+0x32a>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b05      	cmp	r3, #5
 8002932:	d10c      	bne.n	800294e <HAL_RCC_OscConfig+0x312>
 8002934:	4b77      	ldr	r3, [pc, #476]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	4a76      	ldr	r2, [pc, #472]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 800293a:	f043 0304 	orr.w	r3, r3, #4
 800293e:	6713      	str	r3, [r2, #112]	; 0x70
 8002940:	4b74      	ldr	r3, [pc, #464]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	4a73      	ldr	r2, [pc, #460]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6713      	str	r3, [r2, #112]	; 0x70
 800294c:	e00b      	b.n	8002966 <HAL_RCC_OscConfig+0x32a>
 800294e:	4b71      	ldr	r3, [pc, #452]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	4a70      	ldr	r2, [pc, #448]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	6713      	str	r3, [r2, #112]	; 0x70
 800295a:	4b6e      	ldr	r3, [pc, #440]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	4a6d      	ldr	r2, [pc, #436]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 8002960:	f023 0304 	bic.w	r3, r3, #4
 8002964:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d015      	beq.n	800299a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296e:	f7fe fbd5 	bl	800111c <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002974:	e00a      	b.n	800298c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002976:	f7fe fbd1 	bl	800111c <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	f241 3288 	movw	r2, #5000	; 0x1388
 8002984:	4293      	cmp	r3, r2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e0bc      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298c:	4b61      	ldr	r3, [pc, #388]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0ee      	beq.n	8002976 <HAL_RCC_OscConfig+0x33a>
 8002998:	e014      	b.n	80029c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299a:	f7fe fbbf 	bl	800111c <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a0:	e00a      	b.n	80029b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a2:	f7fe fbbb 	bl	800111c <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e0a6      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b8:	4b56      	ldr	r3, [pc, #344]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1ee      	bne.n	80029a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029c4:	7dfb      	ldrb	r3, [r7, #23]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d105      	bne.n	80029d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ca:	4b52      	ldr	r3, [pc, #328]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a51      	ldr	r2, [pc, #324]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 80029d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 8092 	beq.w	8002b04 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029e0:	4b4c      	ldr	r3, [pc, #304]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 030c 	and.w	r3, r3, #12
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d05c      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d141      	bne.n	8002a78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f4:	4b48      	ldr	r3, [pc, #288]	; (8002b18 <HAL_RCC_OscConfig+0x4dc>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fa:	f7fe fb8f 	bl	800111c <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a02:	f7fe fb8b 	bl	800111c <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e078      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a14:	4b3f      	ldr	r3, [pc, #252]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f0      	bne.n	8002a02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69da      	ldr	r2, [r3, #28]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	019b      	lsls	r3, r3, #6
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a36:	085b      	lsrs	r3, r3, #1
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	041b      	lsls	r3, r3, #16
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	061b      	lsls	r3, r3, #24
 8002a44:	4933      	ldr	r1, [pc, #204]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a4a:	4b33      	ldr	r3, [pc, #204]	; (8002b18 <HAL_RCC_OscConfig+0x4dc>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7fe fb64 	bl	800111c <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a58:	f7fe fb60 	bl	800111c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e04d      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x41c>
 8002a76:	e045      	b.n	8002b04 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a78:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <HAL_RCC_OscConfig+0x4dc>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fb4d 	bl	800111c <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a86:	f7fe fb49 	bl	800111c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e036      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a98:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f0      	bne.n	8002a86 <HAL_RCC_OscConfig+0x44a>
 8002aa4:	e02e      	b.n	8002b04 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e029      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ab2:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <HAL_RCC_OscConfig+0x4d8>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d11c      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d115      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ada:	4013      	ands	r3, r2
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d10d      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d106      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40007000 	.word	0x40007000
 8002b14:	40023800 	.word	0x40023800
 8002b18:	42470060 	.word	0x42470060

08002b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0cc      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b30:	4b68      	ldr	r3, [pc, #416]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d90c      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b65      	ldr	r3, [pc, #404]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b63      	ldr	r3, [pc, #396]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0b8      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b70:	4b59      	ldr	r3, [pc, #356]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4a58      	ldr	r2, [pc, #352]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	4a52      	ldr	r2, [pc, #328]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4b50      	ldr	r3, [pc, #320]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	494d      	ldr	r1, [pc, #308]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d044      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d119      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e07f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d003      	beq.n	8002bda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bda:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e06f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bea:	4b3b      	ldr	r3, [pc, #236]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e067      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfa:	4b37      	ldr	r3, [pc, #220]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f023 0203 	bic.w	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4934      	ldr	r1, [pc, #208]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c0c:	f7fe fa86 	bl	800111c <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c14:	f7fe fa82 	bl	800111c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e04f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2a:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 020c 	and.w	r2, r3, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1eb      	bne.n	8002c14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d20c      	bcs.n	8002c64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e032      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4916      	ldr	r1, [pc, #88]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	490e      	ldr	r1, [pc, #56]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ca2:	f000 f821 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8002ca6:	4601      	mov	r1, r0
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	5cd3      	ldrb	r3, [r2, r3]
 8002cb6:	fa21 f303 	lsr.w	r3, r1, r3
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe f9e6 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023c00 	.word	0x40023c00
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	08004820 	.word	0x08004820
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	20000004 	.word	0x20000004

08002ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cfe:	4b63      	ldr	r3, [pc, #396]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d007      	beq.n	8002d1a <HAL_RCC_GetSysClockFreq+0x32>
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d008      	beq.n	8002d20 <HAL_RCC_GetSysClockFreq+0x38>
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f040 80b4 	bne.w	8002e7c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d14:	4b5e      	ldr	r3, [pc, #376]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d16:	60bb      	str	r3, [r7, #8]
       break;
 8002d18:	e0b3      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d1a:	4b5e      	ldr	r3, [pc, #376]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002d1c:	60bb      	str	r3, [r7, #8]
      break;
 8002d1e:	e0b0      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d20:	4b5a      	ldr	r3, [pc, #360]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d2a:	4b58      	ldr	r3, [pc, #352]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d04a      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d36:	4b55      	ldr	r3, [pc, #340]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	099b      	lsrs	r3, r3, #6
 8002d3c:	f04f 0400 	mov.w	r4, #0
 8002d40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	ea03 0501 	and.w	r5, r3, r1
 8002d4c:	ea04 0602 	and.w	r6, r4, r2
 8002d50:	4629      	mov	r1, r5
 8002d52:	4632      	mov	r2, r6
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	f04f 0400 	mov.w	r4, #0
 8002d5c:	0154      	lsls	r4, r2, #5
 8002d5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d62:	014b      	lsls	r3, r1, #5
 8002d64:	4619      	mov	r1, r3
 8002d66:	4622      	mov	r2, r4
 8002d68:	1b49      	subs	r1, r1, r5
 8002d6a:	eb62 0206 	sbc.w	r2, r2, r6
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	f04f 0400 	mov.w	r4, #0
 8002d76:	0194      	lsls	r4, r2, #6
 8002d78:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d7c:	018b      	lsls	r3, r1, #6
 8002d7e:	1a5b      	subs	r3, r3, r1
 8002d80:	eb64 0402 	sbc.w	r4, r4, r2
 8002d84:	f04f 0100 	mov.w	r1, #0
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	00e2      	lsls	r2, r4, #3
 8002d8e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d92:	00d9      	lsls	r1, r3, #3
 8002d94:	460b      	mov	r3, r1
 8002d96:	4614      	mov	r4, r2
 8002d98:	195b      	adds	r3, r3, r5
 8002d9a:	eb44 0406 	adc.w	r4, r4, r6
 8002d9e:	f04f 0100 	mov.w	r1, #0
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	0262      	lsls	r2, r4, #9
 8002da8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002dac:	0259      	lsls	r1, r3, #9
 8002dae:	460b      	mov	r3, r1
 8002db0:	4614      	mov	r4, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	4621      	mov	r1, r4
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f04f 0400 	mov.w	r4, #0
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4623      	mov	r3, r4
 8002dc0:	f7fd fa5e 	bl	8000280 <__aeabi_uldivmod>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	460c      	mov	r4, r1
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	e049      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dcc:	4b2f      	ldr	r3, [pc, #188]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	099b      	lsrs	r3, r3, #6
 8002dd2:	f04f 0400 	mov.w	r4, #0
 8002dd6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	ea03 0501 	and.w	r5, r3, r1
 8002de2:	ea04 0602 	and.w	r6, r4, r2
 8002de6:	4629      	mov	r1, r5
 8002de8:	4632      	mov	r2, r6
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	f04f 0400 	mov.w	r4, #0
 8002df2:	0154      	lsls	r4, r2, #5
 8002df4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002df8:	014b      	lsls	r3, r1, #5
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4622      	mov	r2, r4
 8002dfe:	1b49      	subs	r1, r1, r5
 8002e00:	eb62 0206 	sbc.w	r2, r2, r6
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	f04f 0400 	mov.w	r4, #0
 8002e0c:	0194      	lsls	r4, r2, #6
 8002e0e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e12:	018b      	lsls	r3, r1, #6
 8002e14:	1a5b      	subs	r3, r3, r1
 8002e16:	eb64 0402 	sbc.w	r4, r4, r2
 8002e1a:	f04f 0100 	mov.w	r1, #0
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	00e2      	lsls	r2, r4, #3
 8002e24:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e28:	00d9      	lsls	r1, r3, #3
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4614      	mov	r4, r2
 8002e2e:	195b      	adds	r3, r3, r5
 8002e30:	eb44 0406 	adc.w	r4, r4, r6
 8002e34:	f04f 0100 	mov.w	r1, #0
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	02a2      	lsls	r2, r4, #10
 8002e3e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e42:	0299      	lsls	r1, r3, #10
 8002e44:	460b      	mov	r3, r1
 8002e46:	4614      	mov	r4, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	4621      	mov	r1, r4
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f04f 0400 	mov.w	r4, #0
 8002e52:	461a      	mov	r2, r3
 8002e54:	4623      	mov	r3, r4
 8002e56:	f7fd fa13 	bl	8000280 <__aeabi_uldivmod>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	460c      	mov	r4, r1
 8002e5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e60:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	60bb      	str	r3, [r7, #8]
      break;
 8002e7a:	e002      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e7e:	60bb      	str	r3, [r7, #8]
      break;
 8002e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e82:	68bb      	ldr	r3, [r7, #8]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	00f42400 	.word	0x00f42400
 8002e94:	007a1200 	.word	0x007a1200

08002e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_RCC_GetHCLKFreq+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000000 	.word	0x20000000

08002eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002eb4:	f7ff fff0 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002eb8:	4601      	mov	r1, r0
 8002eba:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	0a9b      	lsrs	r3, r3, #10
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	4a03      	ldr	r2, [pc, #12]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ec6:	5cd3      	ldrb	r3, [r2, r3]
 8002ec8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	08004830 	.word	0x08004830

08002ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002edc:	f7ff ffdc 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4601      	mov	r1, r0
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0b5b      	lsrs	r3, r3, #13
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4a03      	ldr	r2, [pc, #12]	; (8002efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eee:	5cd3      	ldrb	r3, [r2, r3]
 8002ef0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	08004830 	.word	0x08004830

08002f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e03f      	b.n	8002f92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fd ff58 	bl	8000ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	; 0x24
 8002f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fbf1 	bl	800372c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b088      	sub	sp, #32
 8002f9e:	af02      	add	r7, sp, #8
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	f040 8083 	bne.w	80030c2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_UART_Transmit+0x2e>
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e07b      	b.n	80030c4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_UART_Transmit+0x40>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e074      	b.n	80030c4 <HAL_UART_Transmit+0x12a>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2221      	movs	r2, #33	; 0x21
 8002fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ff0:	f7fe f894 	bl	800111c <HAL_GetTick>
 8002ff4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	88fa      	ldrh	r2, [r7, #6]
 8002ffa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	88fa      	ldrh	r2, [r7, #6]
 8003000:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800300a:	e042      	b.n	8003092 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003022:	d122      	bne.n	800306a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2200      	movs	r2, #0
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fa10 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e042      	b.n	80030c4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003050:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d103      	bne.n	8003062 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	3302      	adds	r3, #2
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	e017      	b.n	8003092 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	3301      	adds	r3, #1
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	e013      	b.n	8003092 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2200      	movs	r2, #0
 8003072:	2180      	movs	r1, #128	; 0x80
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f9ed 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e01f      	b.n	80030c4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	60ba      	str	r2, [r7, #8]
 800308a:	781a      	ldrb	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1b7      	bne.n	800300c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2200      	movs	r2, #0
 80030a4:	2140      	movs	r1, #64	; 0x40
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f9d4 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e006      	b.n	80030c4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	e000      	b.n	80030c4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80030c2:	2302      	movs	r3, #2
  }
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	f040 8090 	bne.w	800320e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <HAL_UART_Receive+0x2e>
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e088      	b.n	8003210 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_UART_Receive+0x40>
 8003108:	2302      	movs	r3, #2
 800310a:	e081      	b.n	8003210 <HAL_UART_Receive+0x144>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2222      	movs	r2, #34	; 0x22
 800311e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003122:	f7fd fffb 	bl	800111c <HAL_GetTick>
 8003126:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	88fa      	ldrh	r2, [r7, #6]
 800312c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	88fa      	ldrh	r2, [r7, #6]
 8003132:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800313c:	e05c      	b.n	80031f8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003154:	d12b      	bne.n	80031ae <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2200      	movs	r2, #0
 800315e:	2120      	movs	r1, #32
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f977 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e04f      	b.n	8003210 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10c      	bne.n	8003196 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	b29b      	uxth	r3, r3
 8003184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003188:	b29a      	uxth	r2, r3
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	3302      	adds	r3, #2
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	e030      	b.n	80031f8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	b29b      	uxth	r3, r3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	3301      	adds	r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]
 80031ac:	e024      	b.n	80031f8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2200      	movs	r2, #0
 80031b6:	2120      	movs	r1, #32
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f94b 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e023      	b.n	8003210 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d108      	bne.n	80031e2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	60ba      	str	r2, [r7, #8]
 80031dc:	b2ca      	uxtb	r2, r1
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	e00a      	b.n	80031f8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	1c59      	adds	r1, r3, #1
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d19d      	bne.n	800313e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e000      	b.n	8003210 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10d      	bne.n	800326a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_UART_IRQHandler+0x52>
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f9e0 	bl	8003628 <UART_Receive_IT>
      return;
 8003268:	e0d1      	b.n	800340e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80b0 	beq.w	80033d2 <HAL_UART_IRQHandler+0x1ba>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d105      	bne.n	8003288 <HAL_UART_IRQHandler+0x70>
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80a5 	beq.w	80033d2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <HAL_UART_IRQHandler+0x90>
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_UART_IRQHandler+0xb0>
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c0:	f043 0202 	orr.w	r2, r3, #2
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_UART_IRQHandler+0xd0>
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	f043 0204 	orr.w	r2, r3, #4
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00f      	beq.n	8003312 <HAL_UART_IRQHandler+0xfa>
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d104      	bne.n	8003306 <HAL_UART_IRQHandler+0xee>
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330a:	f043 0208 	orr.w	r2, r3, #8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003316:	2b00      	cmp	r3, #0
 8003318:	d078      	beq.n	800340c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <HAL_UART_IRQHandler+0x11c>
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f97a 	bl	8003628 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333e:	2b40      	cmp	r3, #64	; 0x40
 8003340:	bf0c      	ite	eq
 8003342:	2301      	moveq	r3, #1
 8003344:	2300      	movne	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d102      	bne.n	800335c <HAL_UART_IRQHandler+0x144>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d031      	beq.n	80033c0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f8c3 	bl	80034e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336c:	2b40      	cmp	r3, #64	; 0x40
 800336e:	d123      	bne.n	80033b8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800337e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	2b00      	cmp	r3, #0
 8003386:	d013      	beq.n	80033b0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338c:	4a21      	ldr	r2, [pc, #132]	; (8003414 <HAL_UART_IRQHandler+0x1fc>)
 800338e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003394:	4618      	mov	r0, r3
 8003396:	f7fe fcfb 	bl	8001d90 <HAL_DMA_Abort_IT>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d016      	beq.n	80033ce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033aa:	4610      	mov	r0, r2
 80033ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ae:	e00e      	b.n	80033ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f845 	bl	8003440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b6:	e00a      	b.n	80033ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f841 	bl	8003440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033be:	e006      	b.n	80033ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f83d 	bl	8003440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80033cc:	e01e      	b.n	800340c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ce:	bf00      	nop
    return;
 80033d0:	e01c      	b.n	800340c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_UART_IRQHandler+0x1d6>
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f8b0 	bl	800354c <UART_Transmit_IT>
    return;
 80033ec:	e00f      	b.n	800340e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <HAL_UART_IRQHandler+0x1f6>
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f8f8 	bl	80035f8 <UART_EndTransmit_IT>
    return;
 8003408:	bf00      	nop
 800340a:	e000      	b.n	800340e <HAL_UART_IRQHandler+0x1f6>
    return;
 800340c:	bf00      	nop
  }
}
 800340e:	3720      	adds	r7, #32
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	08003525 	.word	0x08003525

08003418 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003464:	e02c      	b.n	80034c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d028      	beq.n	80034c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <UART_WaitOnFlagUntilTimeout+0x30>
 8003474:	f7fd fe52 	bl	800111c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	429a      	cmp	r2, r3
 8003482:	d21d      	bcs.n	80034c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003492:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0201 	bic.w	r2, r2, #1
 80034a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e00f      	b.n	80034e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4013      	ands	r3, r2
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d0c3      	beq.n	8003466 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0201 	bic.w	r2, r2, #1
 800350e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7ff ff7e 	bl	8003440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b21      	cmp	r3, #33	; 0x21
 800355e:	d144      	bne.n	80035ea <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003568:	d11a      	bne.n	80035a0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800357e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d105      	bne.n	8003594 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	1c9a      	adds	r2, r3, #2
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	621a      	str	r2, [r3, #32]
 8003592:	e00e      	b.n	80035b2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	621a      	str	r2, [r3, #32]
 800359e:	e008      	b.n	80035b2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	1c59      	adds	r1, r3, #1
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6211      	str	r1, [r2, #32]
 80035aa:	781a      	ldrb	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4619      	mov	r1, r3
 80035c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10f      	bne.n	80035e6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	e000      	b.n	80035ec <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80035ea:	2302      	movs	r3, #2
  }
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800360e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff fefd 	bl	8003418 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b22      	cmp	r3, #34	; 0x22
 800363a:	d171      	bne.n	8003720 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003644:	d123      	bne.n	800368e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10e      	bne.n	8003672 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	b29b      	uxth	r3, r3
 800365c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	1c9a      	adds	r2, r3, #2
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	629a      	str	r2, [r3, #40]	; 0x28
 8003670:	e029      	b.n	80036c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	b29b      	uxth	r3, r3
 800367a:	b2db      	uxtb	r3, r3
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
 800368c:	e01b      	b.n	80036c6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10a      	bne.n	80036ac <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6858      	ldr	r0, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	1c59      	adds	r1, r3, #1
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6291      	str	r1, [r2, #40]	; 0x28
 80036a6:	b2c2      	uxtb	r2, r0
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	e00c      	b.n	80036c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	1c58      	adds	r0, r3, #1
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	6288      	str	r0, [r1, #40]	; 0x28
 80036be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	4619      	mov	r1, r3
 80036d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d120      	bne.n	800371c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0220 	bic.w	r2, r2, #32
 80036e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695a      	ldr	r2, [r3, #20]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0201 	bic.w	r2, r2, #1
 8003708:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff fe8a 	bl	800342c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	e002      	b.n	8003722 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	e000      	b.n	8003722 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003720:	2302      	movs	r3, #2
  }
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800372c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800376e:	f023 030c 	bic.w	r3, r3, #12
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	68f9      	ldr	r1, [r7, #12]
 8003778:	430b      	orrs	r3, r1
 800377a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800379a:	f040 818b 	bne.w	8003ab4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4ac1      	ldr	r2, [pc, #772]	; (8003aa8 <UART_SetConfig+0x37c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d005      	beq.n	80037b4 <UART_SetConfig+0x88>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4abf      	ldr	r2, [pc, #764]	; (8003aac <UART_SetConfig+0x380>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	f040 80bd 	bne.w	800392e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037b4:	f7ff fb90 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 80037b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	461d      	mov	r5, r3
 80037be:	f04f 0600 	mov.w	r6, #0
 80037c2:	46a8      	mov	r8, r5
 80037c4:	46b1      	mov	r9, r6
 80037c6:	eb18 0308 	adds.w	r3, r8, r8
 80037ca:	eb49 0409 	adc.w	r4, r9, r9
 80037ce:	4698      	mov	r8, r3
 80037d0:	46a1      	mov	r9, r4
 80037d2:	eb18 0805 	adds.w	r8, r8, r5
 80037d6:	eb49 0906 	adc.w	r9, r9, r6
 80037da:	f04f 0100 	mov.w	r1, #0
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037ee:	4688      	mov	r8, r1
 80037f0:	4691      	mov	r9, r2
 80037f2:	eb18 0005 	adds.w	r0, r8, r5
 80037f6:	eb49 0106 	adc.w	r1, r9, r6
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	461d      	mov	r5, r3
 8003800:	f04f 0600 	mov.w	r6, #0
 8003804:	196b      	adds	r3, r5, r5
 8003806:	eb46 0406 	adc.w	r4, r6, r6
 800380a:	461a      	mov	r2, r3
 800380c:	4623      	mov	r3, r4
 800380e:	f7fc fd37 	bl	8000280 <__aeabi_uldivmod>
 8003812:	4603      	mov	r3, r0
 8003814:	460c      	mov	r4, r1
 8003816:	461a      	mov	r2, r3
 8003818:	4ba5      	ldr	r3, [pc, #660]	; (8003ab0 <UART_SetConfig+0x384>)
 800381a:	fba3 2302 	umull	r2, r3, r3, r2
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	461d      	mov	r5, r3
 8003828:	f04f 0600 	mov.w	r6, #0
 800382c:	46a9      	mov	r9, r5
 800382e:	46b2      	mov	sl, r6
 8003830:	eb19 0309 	adds.w	r3, r9, r9
 8003834:	eb4a 040a 	adc.w	r4, sl, sl
 8003838:	4699      	mov	r9, r3
 800383a:	46a2      	mov	sl, r4
 800383c:	eb19 0905 	adds.w	r9, r9, r5
 8003840:	eb4a 0a06 	adc.w	sl, sl, r6
 8003844:	f04f 0100 	mov.w	r1, #0
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003850:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003854:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003858:	4689      	mov	r9, r1
 800385a:	4692      	mov	sl, r2
 800385c:	eb19 0005 	adds.w	r0, r9, r5
 8003860:	eb4a 0106 	adc.w	r1, sl, r6
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	461d      	mov	r5, r3
 800386a:	f04f 0600 	mov.w	r6, #0
 800386e:	196b      	adds	r3, r5, r5
 8003870:	eb46 0406 	adc.w	r4, r6, r6
 8003874:	461a      	mov	r2, r3
 8003876:	4623      	mov	r3, r4
 8003878:	f7fc fd02 	bl	8000280 <__aeabi_uldivmod>
 800387c:	4603      	mov	r3, r0
 800387e:	460c      	mov	r4, r1
 8003880:	461a      	mov	r2, r3
 8003882:	4b8b      	ldr	r3, [pc, #556]	; (8003ab0 <UART_SetConfig+0x384>)
 8003884:	fba3 1302 	umull	r1, r3, r3, r2
 8003888:	095b      	lsrs	r3, r3, #5
 800388a:	2164      	movs	r1, #100	; 0x64
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	3332      	adds	r3, #50	; 0x32
 8003896:	4a86      	ldr	r2, [pc, #536]	; (8003ab0 <UART_SetConfig+0x384>)
 8003898:	fba2 2303 	umull	r2, r3, r2, r3
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038a4:	4498      	add	r8, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	461d      	mov	r5, r3
 80038aa:	f04f 0600 	mov.w	r6, #0
 80038ae:	46a9      	mov	r9, r5
 80038b0:	46b2      	mov	sl, r6
 80038b2:	eb19 0309 	adds.w	r3, r9, r9
 80038b6:	eb4a 040a 	adc.w	r4, sl, sl
 80038ba:	4699      	mov	r9, r3
 80038bc:	46a2      	mov	sl, r4
 80038be:	eb19 0905 	adds.w	r9, r9, r5
 80038c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80038c6:	f04f 0100 	mov.w	r1, #0
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038da:	4689      	mov	r9, r1
 80038dc:	4692      	mov	sl, r2
 80038de:	eb19 0005 	adds.w	r0, r9, r5
 80038e2:	eb4a 0106 	adc.w	r1, sl, r6
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	461d      	mov	r5, r3
 80038ec:	f04f 0600 	mov.w	r6, #0
 80038f0:	196b      	adds	r3, r5, r5
 80038f2:	eb46 0406 	adc.w	r4, r6, r6
 80038f6:	461a      	mov	r2, r3
 80038f8:	4623      	mov	r3, r4
 80038fa:	f7fc fcc1 	bl	8000280 <__aeabi_uldivmod>
 80038fe:	4603      	mov	r3, r0
 8003900:	460c      	mov	r4, r1
 8003902:	461a      	mov	r2, r3
 8003904:	4b6a      	ldr	r3, [pc, #424]	; (8003ab0 <UART_SetConfig+0x384>)
 8003906:	fba3 1302 	umull	r1, r3, r3, r2
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	2164      	movs	r1, #100	; 0x64
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	3332      	adds	r3, #50	; 0x32
 8003918:	4a65      	ldr	r2, [pc, #404]	; (8003ab0 <UART_SetConfig+0x384>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	f003 0207 	and.w	r2, r3, #7
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4442      	add	r2, r8
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	e26f      	b.n	8003e0e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800392e:	f7ff fabf 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8003932:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	461d      	mov	r5, r3
 8003938:	f04f 0600 	mov.w	r6, #0
 800393c:	46a8      	mov	r8, r5
 800393e:	46b1      	mov	r9, r6
 8003940:	eb18 0308 	adds.w	r3, r8, r8
 8003944:	eb49 0409 	adc.w	r4, r9, r9
 8003948:	4698      	mov	r8, r3
 800394a:	46a1      	mov	r9, r4
 800394c:	eb18 0805 	adds.w	r8, r8, r5
 8003950:	eb49 0906 	adc.w	r9, r9, r6
 8003954:	f04f 0100 	mov.w	r1, #0
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003960:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003964:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003968:	4688      	mov	r8, r1
 800396a:	4691      	mov	r9, r2
 800396c:	eb18 0005 	adds.w	r0, r8, r5
 8003970:	eb49 0106 	adc.w	r1, r9, r6
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	461d      	mov	r5, r3
 800397a:	f04f 0600 	mov.w	r6, #0
 800397e:	196b      	adds	r3, r5, r5
 8003980:	eb46 0406 	adc.w	r4, r6, r6
 8003984:	461a      	mov	r2, r3
 8003986:	4623      	mov	r3, r4
 8003988:	f7fc fc7a 	bl	8000280 <__aeabi_uldivmod>
 800398c:	4603      	mov	r3, r0
 800398e:	460c      	mov	r4, r1
 8003990:	461a      	mov	r2, r3
 8003992:	4b47      	ldr	r3, [pc, #284]	; (8003ab0 <UART_SetConfig+0x384>)
 8003994:	fba3 2302 	umull	r2, r3, r3, r2
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	461d      	mov	r5, r3
 80039a2:	f04f 0600 	mov.w	r6, #0
 80039a6:	46a9      	mov	r9, r5
 80039a8:	46b2      	mov	sl, r6
 80039aa:	eb19 0309 	adds.w	r3, r9, r9
 80039ae:	eb4a 040a 	adc.w	r4, sl, sl
 80039b2:	4699      	mov	r9, r3
 80039b4:	46a2      	mov	sl, r4
 80039b6:	eb19 0905 	adds.w	r9, r9, r5
 80039ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80039be:	f04f 0100 	mov.w	r1, #0
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039d2:	4689      	mov	r9, r1
 80039d4:	4692      	mov	sl, r2
 80039d6:	eb19 0005 	adds.w	r0, r9, r5
 80039da:	eb4a 0106 	adc.w	r1, sl, r6
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	461d      	mov	r5, r3
 80039e4:	f04f 0600 	mov.w	r6, #0
 80039e8:	196b      	adds	r3, r5, r5
 80039ea:	eb46 0406 	adc.w	r4, r6, r6
 80039ee:	461a      	mov	r2, r3
 80039f0:	4623      	mov	r3, r4
 80039f2:	f7fc fc45 	bl	8000280 <__aeabi_uldivmod>
 80039f6:	4603      	mov	r3, r0
 80039f8:	460c      	mov	r4, r1
 80039fa:	461a      	mov	r2, r3
 80039fc:	4b2c      	ldr	r3, [pc, #176]	; (8003ab0 <UART_SetConfig+0x384>)
 80039fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	2164      	movs	r1, #100	; 0x64
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	3332      	adds	r3, #50	; 0x32
 8003a10:	4a27      	ldr	r2, [pc, #156]	; (8003ab0 <UART_SetConfig+0x384>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a1e:	4498      	add	r8, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	461d      	mov	r5, r3
 8003a24:	f04f 0600 	mov.w	r6, #0
 8003a28:	46a9      	mov	r9, r5
 8003a2a:	46b2      	mov	sl, r6
 8003a2c:	eb19 0309 	adds.w	r3, r9, r9
 8003a30:	eb4a 040a 	adc.w	r4, sl, sl
 8003a34:	4699      	mov	r9, r3
 8003a36:	46a2      	mov	sl, r4
 8003a38:	eb19 0905 	adds.w	r9, r9, r5
 8003a3c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a40:	f04f 0100 	mov.w	r1, #0
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a54:	4689      	mov	r9, r1
 8003a56:	4692      	mov	sl, r2
 8003a58:	eb19 0005 	adds.w	r0, r9, r5
 8003a5c:	eb4a 0106 	adc.w	r1, sl, r6
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	461d      	mov	r5, r3
 8003a66:	f04f 0600 	mov.w	r6, #0
 8003a6a:	196b      	adds	r3, r5, r5
 8003a6c:	eb46 0406 	adc.w	r4, r6, r6
 8003a70:	461a      	mov	r2, r3
 8003a72:	4623      	mov	r3, r4
 8003a74:	f7fc fc04 	bl	8000280 <__aeabi_uldivmod>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	460c      	mov	r4, r1
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <UART_SetConfig+0x384>)
 8003a80:	fba3 1302 	umull	r1, r3, r3, r2
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	2164      	movs	r1, #100	; 0x64
 8003a88:	fb01 f303 	mul.w	r3, r1, r3
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	3332      	adds	r3, #50	; 0x32
 8003a92:	4a07      	ldr	r2, [pc, #28]	; (8003ab0 <UART_SetConfig+0x384>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	f003 0207 	and.w	r2, r3, #7
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4442      	add	r2, r8
 8003aa4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003aa6:	e1b2      	b.n	8003e0e <UART_SetConfig+0x6e2>
 8003aa8:	40011000 	.word	0x40011000
 8003aac:	40011400 	.word	0x40011400
 8003ab0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4ad7      	ldr	r2, [pc, #860]	; (8003e18 <UART_SetConfig+0x6ec>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d005      	beq.n	8003aca <UART_SetConfig+0x39e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4ad6      	ldr	r2, [pc, #856]	; (8003e1c <UART_SetConfig+0x6f0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	f040 80d1 	bne.w	8003c6c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003aca:	f7ff fa05 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 8003ace:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	469a      	mov	sl, r3
 8003ad4:	f04f 0b00 	mov.w	fp, #0
 8003ad8:	46d0      	mov	r8, sl
 8003ada:	46d9      	mov	r9, fp
 8003adc:	eb18 0308 	adds.w	r3, r8, r8
 8003ae0:	eb49 0409 	adc.w	r4, r9, r9
 8003ae4:	4698      	mov	r8, r3
 8003ae6:	46a1      	mov	r9, r4
 8003ae8:	eb18 080a 	adds.w	r8, r8, sl
 8003aec:	eb49 090b 	adc.w	r9, r9, fp
 8003af0:	f04f 0100 	mov.w	r1, #0
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003afc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b00:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b04:	4688      	mov	r8, r1
 8003b06:	4691      	mov	r9, r2
 8003b08:	eb1a 0508 	adds.w	r5, sl, r8
 8003b0c:	eb4b 0609 	adc.w	r6, fp, r9
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4619      	mov	r1, r3
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	f04f 0400 	mov.w	r4, #0
 8003b22:	0094      	lsls	r4, r2, #2
 8003b24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b28:	008b      	lsls	r3, r1, #2
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4623      	mov	r3, r4
 8003b2e:	4628      	mov	r0, r5
 8003b30:	4631      	mov	r1, r6
 8003b32:	f7fc fba5 	bl	8000280 <__aeabi_uldivmod>
 8003b36:	4603      	mov	r3, r0
 8003b38:	460c      	mov	r4, r1
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4bb8      	ldr	r3, [pc, #736]	; (8003e20 <UART_SetConfig+0x6f4>)
 8003b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	469b      	mov	fp, r3
 8003b4c:	f04f 0c00 	mov.w	ip, #0
 8003b50:	46d9      	mov	r9, fp
 8003b52:	46e2      	mov	sl, ip
 8003b54:	eb19 0309 	adds.w	r3, r9, r9
 8003b58:	eb4a 040a 	adc.w	r4, sl, sl
 8003b5c:	4699      	mov	r9, r3
 8003b5e:	46a2      	mov	sl, r4
 8003b60:	eb19 090b 	adds.w	r9, r9, fp
 8003b64:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b68:	f04f 0100 	mov.w	r1, #0
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b7c:	4689      	mov	r9, r1
 8003b7e:	4692      	mov	sl, r2
 8003b80:	eb1b 0509 	adds.w	r5, fp, r9
 8003b84:	eb4c 060a 	adc.w	r6, ip, sl
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	f04f 0400 	mov.w	r4, #0
 8003b9a:	0094      	lsls	r4, r2, #2
 8003b9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ba0:	008b      	lsls	r3, r1, #2
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4623      	mov	r3, r4
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	4631      	mov	r1, r6
 8003baa:	f7fc fb69 	bl	8000280 <__aeabi_uldivmod>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4b9a      	ldr	r3, [pc, #616]	; (8003e20 <UART_SetConfig+0x6f4>)
 8003bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	2164      	movs	r1, #100	; 0x64
 8003bbe:	fb01 f303 	mul.w	r3, r1, r3
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	3332      	adds	r3, #50	; 0x32
 8003bc8:	4a95      	ldr	r2, [pc, #596]	; (8003e20 <UART_SetConfig+0x6f4>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd4:	4498      	add	r8, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	469b      	mov	fp, r3
 8003bda:	f04f 0c00 	mov.w	ip, #0
 8003bde:	46d9      	mov	r9, fp
 8003be0:	46e2      	mov	sl, ip
 8003be2:	eb19 0309 	adds.w	r3, r9, r9
 8003be6:	eb4a 040a 	adc.w	r4, sl, sl
 8003bea:	4699      	mov	r9, r3
 8003bec:	46a2      	mov	sl, r4
 8003bee:	eb19 090b 	adds.w	r9, r9, fp
 8003bf2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003bf6:	f04f 0100 	mov.w	r1, #0
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c0a:	4689      	mov	r9, r1
 8003c0c:	4692      	mov	sl, r2
 8003c0e:	eb1b 0509 	adds.w	r5, fp, r9
 8003c12:	eb4c 060a 	adc.w	r6, ip, sl
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	f04f 0400 	mov.w	r4, #0
 8003c28:	0094      	lsls	r4, r2, #2
 8003c2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c2e:	008b      	lsls	r3, r1, #2
 8003c30:	461a      	mov	r2, r3
 8003c32:	4623      	mov	r3, r4
 8003c34:	4628      	mov	r0, r5
 8003c36:	4631      	mov	r1, r6
 8003c38:	f7fc fb22 	bl	8000280 <__aeabi_uldivmod>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	460c      	mov	r4, r1
 8003c40:	461a      	mov	r2, r3
 8003c42:	4b77      	ldr	r3, [pc, #476]	; (8003e20 <UART_SetConfig+0x6f4>)
 8003c44:	fba3 1302 	umull	r1, r3, r3, r2
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	2164      	movs	r1, #100	; 0x64
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	3332      	adds	r3, #50	; 0x32
 8003c56:	4a72      	ldr	r2, [pc, #456]	; (8003e20 <UART_SetConfig+0x6f4>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	f003 020f 	and.w	r2, r3, #15
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4442      	add	r2, r8
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	e0d0      	b.n	8003e0e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c6c:	f7ff f920 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8003c70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	469a      	mov	sl, r3
 8003c76:	f04f 0b00 	mov.w	fp, #0
 8003c7a:	46d0      	mov	r8, sl
 8003c7c:	46d9      	mov	r9, fp
 8003c7e:	eb18 0308 	adds.w	r3, r8, r8
 8003c82:	eb49 0409 	adc.w	r4, r9, r9
 8003c86:	4698      	mov	r8, r3
 8003c88:	46a1      	mov	r9, r4
 8003c8a:	eb18 080a 	adds.w	r8, r8, sl
 8003c8e:	eb49 090b 	adc.w	r9, r9, fp
 8003c92:	f04f 0100 	mov.w	r1, #0
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ca2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ca6:	4688      	mov	r8, r1
 8003ca8:	4691      	mov	r9, r2
 8003caa:	eb1a 0508 	adds.w	r5, sl, r8
 8003cae:	eb4b 0609 	adc.w	r6, fp, r9
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	f04f 0400 	mov.w	r4, #0
 8003cc4:	0094      	lsls	r4, r2, #2
 8003cc6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cca:	008b      	lsls	r3, r1, #2
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4623      	mov	r3, r4
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	4631      	mov	r1, r6
 8003cd4:	f7fc fad4 	bl	8000280 <__aeabi_uldivmod>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	460c      	mov	r4, r1
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4b50      	ldr	r3, [pc, #320]	; (8003e20 <UART_SetConfig+0x6f4>)
 8003ce0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	469b      	mov	fp, r3
 8003cee:	f04f 0c00 	mov.w	ip, #0
 8003cf2:	46d9      	mov	r9, fp
 8003cf4:	46e2      	mov	sl, ip
 8003cf6:	eb19 0309 	adds.w	r3, r9, r9
 8003cfa:	eb4a 040a 	adc.w	r4, sl, sl
 8003cfe:	4699      	mov	r9, r3
 8003d00:	46a2      	mov	sl, r4
 8003d02:	eb19 090b 	adds.w	r9, r9, fp
 8003d06:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d0a:	f04f 0100 	mov.w	r1, #0
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d1e:	4689      	mov	r9, r1
 8003d20:	4692      	mov	sl, r2
 8003d22:	eb1b 0509 	adds.w	r5, fp, r9
 8003d26:	eb4c 060a 	adc.w	r6, ip, sl
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	f04f 0400 	mov.w	r4, #0
 8003d3c:	0094      	lsls	r4, r2, #2
 8003d3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d42:	008b      	lsls	r3, r1, #2
 8003d44:	461a      	mov	r2, r3
 8003d46:	4623      	mov	r3, r4
 8003d48:	4628      	mov	r0, r5
 8003d4a:	4631      	mov	r1, r6
 8003d4c:	f7fc fa98 	bl	8000280 <__aeabi_uldivmod>
 8003d50:	4603      	mov	r3, r0
 8003d52:	460c      	mov	r4, r1
 8003d54:	461a      	mov	r2, r3
 8003d56:	4b32      	ldr	r3, [pc, #200]	; (8003e20 <UART_SetConfig+0x6f4>)
 8003d58:	fba3 1302 	umull	r1, r3, r3, r2
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	2164      	movs	r1, #100	; 0x64
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	3332      	adds	r3, #50	; 0x32
 8003d6a:	4a2d      	ldr	r2, [pc, #180]	; (8003e20 <UART_SetConfig+0x6f4>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d76:	4498      	add	r8, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	469b      	mov	fp, r3
 8003d7c:	f04f 0c00 	mov.w	ip, #0
 8003d80:	46d9      	mov	r9, fp
 8003d82:	46e2      	mov	sl, ip
 8003d84:	eb19 0309 	adds.w	r3, r9, r9
 8003d88:	eb4a 040a 	adc.w	r4, sl, sl
 8003d8c:	4699      	mov	r9, r3
 8003d8e:	46a2      	mov	sl, r4
 8003d90:	eb19 090b 	adds.w	r9, r9, fp
 8003d94:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d98:	f04f 0100 	mov.w	r1, #0
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003da4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003da8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dac:	4689      	mov	r9, r1
 8003dae:	4692      	mov	sl, r2
 8003db0:	eb1b 0509 	adds.w	r5, fp, r9
 8003db4:	eb4c 060a 	adc.w	r6, ip, sl
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	f04f 0400 	mov.w	r4, #0
 8003dca:	0094      	lsls	r4, r2, #2
 8003dcc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dd0:	008b      	lsls	r3, r1, #2
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	4623      	mov	r3, r4
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	4631      	mov	r1, r6
 8003dda:	f7fc fa51 	bl	8000280 <__aeabi_uldivmod>
 8003dde:	4603      	mov	r3, r0
 8003de0:	460c      	mov	r4, r1
 8003de2:	461a      	mov	r2, r3
 8003de4:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <UART_SetConfig+0x6f4>)
 8003de6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	2164      	movs	r1, #100	; 0x64
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	3332      	adds	r3, #50	; 0x32
 8003df8:	4a09      	ldr	r2, [pc, #36]	; (8003e20 <UART_SetConfig+0x6f4>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	f003 020f 	and.w	r2, r3, #15
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4442      	add	r2, r8
 8003e0a:	609a      	str	r2, [r3, #8]
}
 8003e0c:	e7ff      	b.n	8003e0e <UART_SetConfig+0x6e2>
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e18:	40011000 	.word	0x40011000
 8003e1c:	40011400 	.word	0x40011400
 8003e20:	51eb851f 	.word	0x51eb851f

08003e24 <__errno>:
 8003e24:	4b01      	ldr	r3, [pc, #4]	; (8003e2c <__errno+0x8>)
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	2000000c 	.word	0x2000000c

08003e30 <__libc_init_array>:
 8003e30:	b570      	push	{r4, r5, r6, lr}
 8003e32:	4e0d      	ldr	r6, [pc, #52]	; (8003e68 <__libc_init_array+0x38>)
 8003e34:	4c0d      	ldr	r4, [pc, #52]	; (8003e6c <__libc_init_array+0x3c>)
 8003e36:	1ba4      	subs	r4, r4, r6
 8003e38:	10a4      	asrs	r4, r4, #2
 8003e3a:	2500      	movs	r5, #0
 8003e3c:	42a5      	cmp	r5, r4
 8003e3e:	d109      	bne.n	8003e54 <__libc_init_array+0x24>
 8003e40:	4e0b      	ldr	r6, [pc, #44]	; (8003e70 <__libc_init_array+0x40>)
 8003e42:	4c0c      	ldr	r4, [pc, #48]	; (8003e74 <__libc_init_array+0x44>)
 8003e44:	f000 fc42 	bl	80046cc <_init>
 8003e48:	1ba4      	subs	r4, r4, r6
 8003e4a:	10a4      	asrs	r4, r4, #2
 8003e4c:	2500      	movs	r5, #0
 8003e4e:	42a5      	cmp	r5, r4
 8003e50:	d105      	bne.n	8003e5e <__libc_init_array+0x2e>
 8003e52:	bd70      	pop	{r4, r5, r6, pc}
 8003e54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e58:	4798      	blx	r3
 8003e5a:	3501      	adds	r5, #1
 8003e5c:	e7ee      	b.n	8003e3c <__libc_init_array+0xc>
 8003e5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e62:	4798      	blx	r3
 8003e64:	3501      	adds	r5, #1
 8003e66:	e7f2      	b.n	8003e4e <__libc_init_array+0x1e>
 8003e68:	0800487c 	.word	0x0800487c
 8003e6c:	0800487c 	.word	0x0800487c
 8003e70:	0800487c 	.word	0x0800487c
 8003e74:	08004880 	.word	0x08004880

08003e78 <memcpy>:
 8003e78:	b510      	push	{r4, lr}
 8003e7a:	1e43      	subs	r3, r0, #1
 8003e7c:	440a      	add	r2, r1
 8003e7e:	4291      	cmp	r1, r2
 8003e80:	d100      	bne.n	8003e84 <memcpy+0xc>
 8003e82:	bd10      	pop	{r4, pc}
 8003e84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e8c:	e7f7      	b.n	8003e7e <memcpy+0x6>

08003e8e <memset>:
 8003e8e:	4402      	add	r2, r0
 8003e90:	4603      	mov	r3, r0
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d100      	bne.n	8003e98 <memset+0xa>
 8003e96:	4770      	bx	lr
 8003e98:	f803 1b01 	strb.w	r1, [r3], #1
 8003e9c:	e7f9      	b.n	8003e92 <memset+0x4>
	...

08003ea0 <siprintf>:
 8003ea0:	b40e      	push	{r1, r2, r3}
 8003ea2:	b500      	push	{lr}
 8003ea4:	b09c      	sub	sp, #112	; 0x70
 8003ea6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ea8:	9002      	str	r0, [sp, #8]
 8003eaa:	9006      	str	r0, [sp, #24]
 8003eac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003eb0:	4809      	ldr	r0, [pc, #36]	; (8003ed8 <siprintf+0x38>)
 8003eb2:	9107      	str	r1, [sp, #28]
 8003eb4:	9104      	str	r1, [sp, #16]
 8003eb6:	4909      	ldr	r1, [pc, #36]	; (8003edc <siprintf+0x3c>)
 8003eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ebc:	9105      	str	r1, [sp, #20]
 8003ebe:	6800      	ldr	r0, [r0, #0]
 8003ec0:	9301      	str	r3, [sp, #4]
 8003ec2:	a902      	add	r1, sp, #8
 8003ec4:	f000 f880 	bl	8003fc8 <_svfiprintf_r>
 8003ec8:	9b02      	ldr	r3, [sp, #8]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	b01c      	add	sp, #112	; 0x70
 8003ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ed4:	b003      	add	sp, #12
 8003ed6:	4770      	bx	lr
 8003ed8:	2000000c 	.word	0x2000000c
 8003edc:	ffff0208 	.word	0xffff0208

08003ee0 <strstr>:
 8003ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee2:	7803      	ldrb	r3, [r0, #0]
 8003ee4:	b17b      	cbz	r3, 8003f06 <strstr+0x26>
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	7823      	ldrb	r3, [r4, #0]
 8003eea:	4620      	mov	r0, r4
 8003eec:	1c66      	adds	r6, r4, #1
 8003eee:	b17b      	cbz	r3, 8003f10 <strstr+0x30>
 8003ef0:	1e4a      	subs	r2, r1, #1
 8003ef2:	1e63      	subs	r3, r4, #1
 8003ef4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8003ef8:	b14d      	cbz	r5, 8003f0e <strstr+0x2e>
 8003efa:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003efe:	42af      	cmp	r7, r5
 8003f00:	4634      	mov	r4, r6
 8003f02:	d0f7      	beq.n	8003ef4 <strstr+0x14>
 8003f04:	e7f0      	b.n	8003ee8 <strstr+0x8>
 8003f06:	780b      	ldrb	r3, [r1, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	bf18      	it	ne
 8003f0c:	2000      	movne	r0, #0
 8003f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f10:	4618      	mov	r0, r3
 8003f12:	e7fc      	b.n	8003f0e <strstr+0x2e>

08003f14 <__ssputs_r>:
 8003f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f18:	688e      	ldr	r6, [r1, #8]
 8003f1a:	429e      	cmp	r6, r3
 8003f1c:	4682      	mov	sl, r0
 8003f1e:	460c      	mov	r4, r1
 8003f20:	4690      	mov	r8, r2
 8003f22:	4699      	mov	r9, r3
 8003f24:	d837      	bhi.n	8003f96 <__ssputs_r+0x82>
 8003f26:	898a      	ldrh	r2, [r1, #12]
 8003f28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f2c:	d031      	beq.n	8003f92 <__ssputs_r+0x7e>
 8003f2e:	6825      	ldr	r5, [r4, #0]
 8003f30:	6909      	ldr	r1, [r1, #16]
 8003f32:	1a6f      	subs	r7, r5, r1
 8003f34:	6965      	ldr	r5, [r4, #20]
 8003f36:	2302      	movs	r3, #2
 8003f38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f3c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003f40:	f109 0301 	add.w	r3, r9, #1
 8003f44:	443b      	add	r3, r7
 8003f46:	429d      	cmp	r5, r3
 8003f48:	bf38      	it	cc
 8003f4a:	461d      	movcc	r5, r3
 8003f4c:	0553      	lsls	r3, r2, #21
 8003f4e:	d530      	bpl.n	8003fb2 <__ssputs_r+0x9e>
 8003f50:	4629      	mov	r1, r5
 8003f52:	f000 fb21 	bl	8004598 <_malloc_r>
 8003f56:	4606      	mov	r6, r0
 8003f58:	b950      	cbnz	r0, 8003f70 <__ssputs_r+0x5c>
 8003f5a:	230c      	movs	r3, #12
 8003f5c:	f8ca 3000 	str.w	r3, [sl]
 8003f60:	89a3      	ldrh	r3, [r4, #12]
 8003f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f66:	81a3      	strh	r3, [r4, #12]
 8003f68:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f70:	463a      	mov	r2, r7
 8003f72:	6921      	ldr	r1, [r4, #16]
 8003f74:	f7ff ff80 	bl	8003e78 <memcpy>
 8003f78:	89a3      	ldrh	r3, [r4, #12]
 8003f7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f82:	81a3      	strh	r3, [r4, #12]
 8003f84:	6126      	str	r6, [r4, #16]
 8003f86:	6165      	str	r5, [r4, #20]
 8003f88:	443e      	add	r6, r7
 8003f8a:	1bed      	subs	r5, r5, r7
 8003f8c:	6026      	str	r6, [r4, #0]
 8003f8e:	60a5      	str	r5, [r4, #8]
 8003f90:	464e      	mov	r6, r9
 8003f92:	454e      	cmp	r6, r9
 8003f94:	d900      	bls.n	8003f98 <__ssputs_r+0x84>
 8003f96:	464e      	mov	r6, r9
 8003f98:	4632      	mov	r2, r6
 8003f9a:	4641      	mov	r1, r8
 8003f9c:	6820      	ldr	r0, [r4, #0]
 8003f9e:	f000 fa93 	bl	80044c8 <memmove>
 8003fa2:	68a3      	ldr	r3, [r4, #8]
 8003fa4:	1b9b      	subs	r3, r3, r6
 8003fa6:	60a3      	str	r3, [r4, #8]
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	441e      	add	r6, r3
 8003fac:	6026      	str	r6, [r4, #0]
 8003fae:	2000      	movs	r0, #0
 8003fb0:	e7dc      	b.n	8003f6c <__ssputs_r+0x58>
 8003fb2:	462a      	mov	r2, r5
 8003fb4:	f000 fb4a 	bl	800464c <_realloc_r>
 8003fb8:	4606      	mov	r6, r0
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d1e2      	bne.n	8003f84 <__ssputs_r+0x70>
 8003fbe:	6921      	ldr	r1, [r4, #16]
 8003fc0:	4650      	mov	r0, sl
 8003fc2:	f000 fa9b 	bl	80044fc <_free_r>
 8003fc6:	e7c8      	b.n	8003f5a <__ssputs_r+0x46>

08003fc8 <_svfiprintf_r>:
 8003fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fcc:	461d      	mov	r5, r3
 8003fce:	898b      	ldrh	r3, [r1, #12]
 8003fd0:	061f      	lsls	r7, r3, #24
 8003fd2:	b09d      	sub	sp, #116	; 0x74
 8003fd4:	4680      	mov	r8, r0
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	4616      	mov	r6, r2
 8003fda:	d50f      	bpl.n	8003ffc <_svfiprintf_r+0x34>
 8003fdc:	690b      	ldr	r3, [r1, #16]
 8003fde:	b96b      	cbnz	r3, 8003ffc <_svfiprintf_r+0x34>
 8003fe0:	2140      	movs	r1, #64	; 0x40
 8003fe2:	f000 fad9 	bl	8004598 <_malloc_r>
 8003fe6:	6020      	str	r0, [r4, #0]
 8003fe8:	6120      	str	r0, [r4, #16]
 8003fea:	b928      	cbnz	r0, 8003ff8 <_svfiprintf_r+0x30>
 8003fec:	230c      	movs	r3, #12
 8003fee:	f8c8 3000 	str.w	r3, [r8]
 8003ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff6:	e0c8      	b.n	800418a <_svfiprintf_r+0x1c2>
 8003ff8:	2340      	movs	r3, #64	; 0x40
 8003ffa:	6163      	str	r3, [r4, #20]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8004000:	2320      	movs	r3, #32
 8004002:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004006:	2330      	movs	r3, #48	; 0x30
 8004008:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800400c:	9503      	str	r5, [sp, #12]
 800400e:	f04f 0b01 	mov.w	fp, #1
 8004012:	4637      	mov	r7, r6
 8004014:	463d      	mov	r5, r7
 8004016:	f815 3b01 	ldrb.w	r3, [r5], #1
 800401a:	b10b      	cbz	r3, 8004020 <_svfiprintf_r+0x58>
 800401c:	2b25      	cmp	r3, #37	; 0x25
 800401e:	d13e      	bne.n	800409e <_svfiprintf_r+0xd6>
 8004020:	ebb7 0a06 	subs.w	sl, r7, r6
 8004024:	d00b      	beq.n	800403e <_svfiprintf_r+0x76>
 8004026:	4653      	mov	r3, sl
 8004028:	4632      	mov	r2, r6
 800402a:	4621      	mov	r1, r4
 800402c:	4640      	mov	r0, r8
 800402e:	f7ff ff71 	bl	8003f14 <__ssputs_r>
 8004032:	3001      	adds	r0, #1
 8004034:	f000 80a4 	beq.w	8004180 <_svfiprintf_r+0x1b8>
 8004038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800403a:	4453      	add	r3, sl
 800403c:	9309      	str	r3, [sp, #36]	; 0x24
 800403e:	783b      	ldrb	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 809d 	beq.w	8004180 <_svfiprintf_r+0x1b8>
 8004046:	2300      	movs	r3, #0
 8004048:	f04f 32ff 	mov.w	r2, #4294967295
 800404c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004050:	9304      	str	r3, [sp, #16]
 8004052:	9307      	str	r3, [sp, #28]
 8004054:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004058:	931a      	str	r3, [sp, #104]	; 0x68
 800405a:	462f      	mov	r7, r5
 800405c:	2205      	movs	r2, #5
 800405e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004062:	4850      	ldr	r0, [pc, #320]	; (80041a4 <_svfiprintf_r+0x1dc>)
 8004064:	f7fc f8bc 	bl	80001e0 <memchr>
 8004068:	9b04      	ldr	r3, [sp, #16]
 800406a:	b9d0      	cbnz	r0, 80040a2 <_svfiprintf_r+0xda>
 800406c:	06d9      	lsls	r1, r3, #27
 800406e:	bf44      	itt	mi
 8004070:	2220      	movmi	r2, #32
 8004072:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004076:	071a      	lsls	r2, r3, #28
 8004078:	bf44      	itt	mi
 800407a:	222b      	movmi	r2, #43	; 0x2b
 800407c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004080:	782a      	ldrb	r2, [r5, #0]
 8004082:	2a2a      	cmp	r2, #42	; 0x2a
 8004084:	d015      	beq.n	80040b2 <_svfiprintf_r+0xea>
 8004086:	9a07      	ldr	r2, [sp, #28]
 8004088:	462f      	mov	r7, r5
 800408a:	2000      	movs	r0, #0
 800408c:	250a      	movs	r5, #10
 800408e:	4639      	mov	r1, r7
 8004090:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004094:	3b30      	subs	r3, #48	; 0x30
 8004096:	2b09      	cmp	r3, #9
 8004098:	d94d      	bls.n	8004136 <_svfiprintf_r+0x16e>
 800409a:	b1b8      	cbz	r0, 80040cc <_svfiprintf_r+0x104>
 800409c:	e00f      	b.n	80040be <_svfiprintf_r+0xf6>
 800409e:	462f      	mov	r7, r5
 80040a0:	e7b8      	b.n	8004014 <_svfiprintf_r+0x4c>
 80040a2:	4a40      	ldr	r2, [pc, #256]	; (80041a4 <_svfiprintf_r+0x1dc>)
 80040a4:	1a80      	subs	r0, r0, r2
 80040a6:	fa0b f000 	lsl.w	r0, fp, r0
 80040aa:	4318      	orrs	r0, r3
 80040ac:	9004      	str	r0, [sp, #16]
 80040ae:	463d      	mov	r5, r7
 80040b0:	e7d3      	b.n	800405a <_svfiprintf_r+0x92>
 80040b2:	9a03      	ldr	r2, [sp, #12]
 80040b4:	1d11      	adds	r1, r2, #4
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	9103      	str	r1, [sp, #12]
 80040ba:	2a00      	cmp	r2, #0
 80040bc:	db01      	blt.n	80040c2 <_svfiprintf_r+0xfa>
 80040be:	9207      	str	r2, [sp, #28]
 80040c0:	e004      	b.n	80040cc <_svfiprintf_r+0x104>
 80040c2:	4252      	negs	r2, r2
 80040c4:	f043 0302 	orr.w	r3, r3, #2
 80040c8:	9207      	str	r2, [sp, #28]
 80040ca:	9304      	str	r3, [sp, #16]
 80040cc:	783b      	ldrb	r3, [r7, #0]
 80040ce:	2b2e      	cmp	r3, #46	; 0x2e
 80040d0:	d10c      	bne.n	80040ec <_svfiprintf_r+0x124>
 80040d2:	787b      	ldrb	r3, [r7, #1]
 80040d4:	2b2a      	cmp	r3, #42	; 0x2a
 80040d6:	d133      	bne.n	8004140 <_svfiprintf_r+0x178>
 80040d8:	9b03      	ldr	r3, [sp, #12]
 80040da:	1d1a      	adds	r2, r3, #4
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	9203      	str	r2, [sp, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bfb8      	it	lt
 80040e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80040e8:	3702      	adds	r7, #2
 80040ea:	9305      	str	r3, [sp, #20]
 80040ec:	4d2e      	ldr	r5, [pc, #184]	; (80041a8 <_svfiprintf_r+0x1e0>)
 80040ee:	7839      	ldrb	r1, [r7, #0]
 80040f0:	2203      	movs	r2, #3
 80040f2:	4628      	mov	r0, r5
 80040f4:	f7fc f874 	bl	80001e0 <memchr>
 80040f8:	b138      	cbz	r0, 800410a <_svfiprintf_r+0x142>
 80040fa:	2340      	movs	r3, #64	; 0x40
 80040fc:	1b40      	subs	r0, r0, r5
 80040fe:	fa03 f000 	lsl.w	r0, r3, r0
 8004102:	9b04      	ldr	r3, [sp, #16]
 8004104:	4303      	orrs	r3, r0
 8004106:	3701      	adds	r7, #1
 8004108:	9304      	str	r3, [sp, #16]
 800410a:	7839      	ldrb	r1, [r7, #0]
 800410c:	4827      	ldr	r0, [pc, #156]	; (80041ac <_svfiprintf_r+0x1e4>)
 800410e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004112:	2206      	movs	r2, #6
 8004114:	1c7e      	adds	r6, r7, #1
 8004116:	f7fc f863 	bl	80001e0 <memchr>
 800411a:	2800      	cmp	r0, #0
 800411c:	d038      	beq.n	8004190 <_svfiprintf_r+0x1c8>
 800411e:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <_svfiprintf_r+0x1e8>)
 8004120:	bb13      	cbnz	r3, 8004168 <_svfiprintf_r+0x1a0>
 8004122:	9b03      	ldr	r3, [sp, #12]
 8004124:	3307      	adds	r3, #7
 8004126:	f023 0307 	bic.w	r3, r3, #7
 800412a:	3308      	adds	r3, #8
 800412c:	9303      	str	r3, [sp, #12]
 800412e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004130:	444b      	add	r3, r9
 8004132:	9309      	str	r3, [sp, #36]	; 0x24
 8004134:	e76d      	b.n	8004012 <_svfiprintf_r+0x4a>
 8004136:	fb05 3202 	mla	r2, r5, r2, r3
 800413a:	2001      	movs	r0, #1
 800413c:	460f      	mov	r7, r1
 800413e:	e7a6      	b.n	800408e <_svfiprintf_r+0xc6>
 8004140:	2300      	movs	r3, #0
 8004142:	3701      	adds	r7, #1
 8004144:	9305      	str	r3, [sp, #20]
 8004146:	4619      	mov	r1, r3
 8004148:	250a      	movs	r5, #10
 800414a:	4638      	mov	r0, r7
 800414c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004150:	3a30      	subs	r2, #48	; 0x30
 8004152:	2a09      	cmp	r2, #9
 8004154:	d903      	bls.n	800415e <_svfiprintf_r+0x196>
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0c8      	beq.n	80040ec <_svfiprintf_r+0x124>
 800415a:	9105      	str	r1, [sp, #20]
 800415c:	e7c6      	b.n	80040ec <_svfiprintf_r+0x124>
 800415e:	fb05 2101 	mla	r1, r5, r1, r2
 8004162:	2301      	movs	r3, #1
 8004164:	4607      	mov	r7, r0
 8004166:	e7f0      	b.n	800414a <_svfiprintf_r+0x182>
 8004168:	ab03      	add	r3, sp, #12
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	4622      	mov	r2, r4
 800416e:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <_svfiprintf_r+0x1ec>)
 8004170:	a904      	add	r1, sp, #16
 8004172:	4640      	mov	r0, r8
 8004174:	f3af 8000 	nop.w
 8004178:	f1b0 3fff 	cmp.w	r0, #4294967295
 800417c:	4681      	mov	r9, r0
 800417e:	d1d6      	bne.n	800412e <_svfiprintf_r+0x166>
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	065b      	lsls	r3, r3, #25
 8004184:	f53f af35 	bmi.w	8003ff2 <_svfiprintf_r+0x2a>
 8004188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800418a:	b01d      	add	sp, #116	; 0x74
 800418c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004190:	ab03      	add	r3, sp, #12
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	4622      	mov	r2, r4
 8004196:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <_svfiprintf_r+0x1ec>)
 8004198:	a904      	add	r1, sp, #16
 800419a:	4640      	mov	r0, r8
 800419c:	f000 f882 	bl	80042a4 <_printf_i>
 80041a0:	e7ea      	b.n	8004178 <_svfiprintf_r+0x1b0>
 80041a2:	bf00      	nop
 80041a4:	08004840 	.word	0x08004840
 80041a8:	08004846 	.word	0x08004846
 80041ac:	0800484a 	.word	0x0800484a
 80041b0:	00000000 	.word	0x00000000
 80041b4:	08003f15 	.word	0x08003f15

080041b8 <_printf_common>:
 80041b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041bc:	4691      	mov	r9, r2
 80041be:	461f      	mov	r7, r3
 80041c0:	688a      	ldr	r2, [r1, #8]
 80041c2:	690b      	ldr	r3, [r1, #16]
 80041c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041c8:	4293      	cmp	r3, r2
 80041ca:	bfb8      	it	lt
 80041cc:	4613      	movlt	r3, r2
 80041ce:	f8c9 3000 	str.w	r3, [r9]
 80041d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041d6:	4606      	mov	r6, r0
 80041d8:	460c      	mov	r4, r1
 80041da:	b112      	cbz	r2, 80041e2 <_printf_common+0x2a>
 80041dc:	3301      	adds	r3, #1
 80041de:	f8c9 3000 	str.w	r3, [r9]
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	0699      	lsls	r1, r3, #26
 80041e6:	bf42      	ittt	mi
 80041e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80041ec:	3302      	addmi	r3, #2
 80041ee:	f8c9 3000 	strmi.w	r3, [r9]
 80041f2:	6825      	ldr	r5, [r4, #0]
 80041f4:	f015 0506 	ands.w	r5, r5, #6
 80041f8:	d107      	bne.n	800420a <_printf_common+0x52>
 80041fa:	f104 0a19 	add.w	sl, r4, #25
 80041fe:	68e3      	ldr	r3, [r4, #12]
 8004200:	f8d9 2000 	ldr.w	r2, [r9]
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	42ab      	cmp	r3, r5
 8004208:	dc28      	bgt.n	800425c <_printf_common+0xa4>
 800420a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	3300      	adds	r3, #0
 8004212:	bf18      	it	ne
 8004214:	2301      	movne	r3, #1
 8004216:	0692      	lsls	r2, r2, #26
 8004218:	d42d      	bmi.n	8004276 <_printf_common+0xbe>
 800421a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800421e:	4639      	mov	r1, r7
 8004220:	4630      	mov	r0, r6
 8004222:	47c0      	blx	r8
 8004224:	3001      	adds	r0, #1
 8004226:	d020      	beq.n	800426a <_printf_common+0xb2>
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	68e5      	ldr	r5, [r4, #12]
 800422c:	f8d9 2000 	ldr.w	r2, [r9]
 8004230:	f003 0306 	and.w	r3, r3, #6
 8004234:	2b04      	cmp	r3, #4
 8004236:	bf08      	it	eq
 8004238:	1aad      	subeq	r5, r5, r2
 800423a:	68a3      	ldr	r3, [r4, #8]
 800423c:	6922      	ldr	r2, [r4, #16]
 800423e:	bf0c      	ite	eq
 8004240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004244:	2500      	movne	r5, #0
 8004246:	4293      	cmp	r3, r2
 8004248:	bfc4      	itt	gt
 800424a:	1a9b      	subgt	r3, r3, r2
 800424c:	18ed      	addgt	r5, r5, r3
 800424e:	f04f 0900 	mov.w	r9, #0
 8004252:	341a      	adds	r4, #26
 8004254:	454d      	cmp	r5, r9
 8004256:	d11a      	bne.n	800428e <_printf_common+0xd6>
 8004258:	2000      	movs	r0, #0
 800425a:	e008      	b.n	800426e <_printf_common+0xb6>
 800425c:	2301      	movs	r3, #1
 800425e:	4652      	mov	r2, sl
 8004260:	4639      	mov	r1, r7
 8004262:	4630      	mov	r0, r6
 8004264:	47c0      	blx	r8
 8004266:	3001      	adds	r0, #1
 8004268:	d103      	bne.n	8004272 <_printf_common+0xba>
 800426a:	f04f 30ff 	mov.w	r0, #4294967295
 800426e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004272:	3501      	adds	r5, #1
 8004274:	e7c3      	b.n	80041fe <_printf_common+0x46>
 8004276:	18e1      	adds	r1, r4, r3
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	2030      	movs	r0, #48	; 0x30
 800427c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004280:	4422      	add	r2, r4
 8004282:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004286:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800428a:	3302      	adds	r3, #2
 800428c:	e7c5      	b.n	800421a <_printf_common+0x62>
 800428e:	2301      	movs	r3, #1
 8004290:	4622      	mov	r2, r4
 8004292:	4639      	mov	r1, r7
 8004294:	4630      	mov	r0, r6
 8004296:	47c0      	blx	r8
 8004298:	3001      	adds	r0, #1
 800429a:	d0e6      	beq.n	800426a <_printf_common+0xb2>
 800429c:	f109 0901 	add.w	r9, r9, #1
 80042a0:	e7d8      	b.n	8004254 <_printf_common+0x9c>
	...

080042a4 <_printf_i>:
 80042a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80042ac:	460c      	mov	r4, r1
 80042ae:	7e09      	ldrb	r1, [r1, #24]
 80042b0:	b085      	sub	sp, #20
 80042b2:	296e      	cmp	r1, #110	; 0x6e
 80042b4:	4617      	mov	r7, r2
 80042b6:	4606      	mov	r6, r0
 80042b8:	4698      	mov	r8, r3
 80042ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042bc:	f000 80b3 	beq.w	8004426 <_printf_i+0x182>
 80042c0:	d822      	bhi.n	8004308 <_printf_i+0x64>
 80042c2:	2963      	cmp	r1, #99	; 0x63
 80042c4:	d036      	beq.n	8004334 <_printf_i+0x90>
 80042c6:	d80a      	bhi.n	80042de <_printf_i+0x3a>
 80042c8:	2900      	cmp	r1, #0
 80042ca:	f000 80b9 	beq.w	8004440 <_printf_i+0x19c>
 80042ce:	2958      	cmp	r1, #88	; 0x58
 80042d0:	f000 8083 	beq.w	80043da <_printf_i+0x136>
 80042d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80042dc:	e032      	b.n	8004344 <_printf_i+0xa0>
 80042de:	2964      	cmp	r1, #100	; 0x64
 80042e0:	d001      	beq.n	80042e6 <_printf_i+0x42>
 80042e2:	2969      	cmp	r1, #105	; 0x69
 80042e4:	d1f6      	bne.n	80042d4 <_printf_i+0x30>
 80042e6:	6820      	ldr	r0, [r4, #0]
 80042e8:	6813      	ldr	r3, [r2, #0]
 80042ea:	0605      	lsls	r5, r0, #24
 80042ec:	f103 0104 	add.w	r1, r3, #4
 80042f0:	d52a      	bpl.n	8004348 <_printf_i+0xa4>
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6011      	str	r1, [r2, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	da03      	bge.n	8004302 <_printf_i+0x5e>
 80042fa:	222d      	movs	r2, #45	; 0x2d
 80042fc:	425b      	negs	r3, r3
 80042fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004302:	486f      	ldr	r0, [pc, #444]	; (80044c0 <_printf_i+0x21c>)
 8004304:	220a      	movs	r2, #10
 8004306:	e039      	b.n	800437c <_printf_i+0xd8>
 8004308:	2973      	cmp	r1, #115	; 0x73
 800430a:	f000 809d 	beq.w	8004448 <_printf_i+0x1a4>
 800430e:	d808      	bhi.n	8004322 <_printf_i+0x7e>
 8004310:	296f      	cmp	r1, #111	; 0x6f
 8004312:	d020      	beq.n	8004356 <_printf_i+0xb2>
 8004314:	2970      	cmp	r1, #112	; 0x70
 8004316:	d1dd      	bne.n	80042d4 <_printf_i+0x30>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	f043 0320 	orr.w	r3, r3, #32
 800431e:	6023      	str	r3, [r4, #0]
 8004320:	e003      	b.n	800432a <_printf_i+0x86>
 8004322:	2975      	cmp	r1, #117	; 0x75
 8004324:	d017      	beq.n	8004356 <_printf_i+0xb2>
 8004326:	2978      	cmp	r1, #120	; 0x78
 8004328:	d1d4      	bne.n	80042d4 <_printf_i+0x30>
 800432a:	2378      	movs	r3, #120	; 0x78
 800432c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004330:	4864      	ldr	r0, [pc, #400]	; (80044c4 <_printf_i+0x220>)
 8004332:	e055      	b.n	80043e0 <_printf_i+0x13c>
 8004334:	6813      	ldr	r3, [r2, #0]
 8004336:	1d19      	adds	r1, r3, #4
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6011      	str	r1, [r2, #0]
 800433c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004344:	2301      	movs	r3, #1
 8004346:	e08c      	b.n	8004462 <_printf_i+0x1be>
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6011      	str	r1, [r2, #0]
 800434c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004350:	bf18      	it	ne
 8004352:	b21b      	sxthne	r3, r3
 8004354:	e7cf      	b.n	80042f6 <_printf_i+0x52>
 8004356:	6813      	ldr	r3, [r2, #0]
 8004358:	6825      	ldr	r5, [r4, #0]
 800435a:	1d18      	adds	r0, r3, #4
 800435c:	6010      	str	r0, [r2, #0]
 800435e:	0628      	lsls	r0, r5, #24
 8004360:	d501      	bpl.n	8004366 <_printf_i+0xc2>
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	e002      	b.n	800436c <_printf_i+0xc8>
 8004366:	0668      	lsls	r0, r5, #25
 8004368:	d5fb      	bpl.n	8004362 <_printf_i+0xbe>
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	4854      	ldr	r0, [pc, #336]	; (80044c0 <_printf_i+0x21c>)
 800436e:	296f      	cmp	r1, #111	; 0x6f
 8004370:	bf14      	ite	ne
 8004372:	220a      	movne	r2, #10
 8004374:	2208      	moveq	r2, #8
 8004376:	2100      	movs	r1, #0
 8004378:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800437c:	6865      	ldr	r5, [r4, #4]
 800437e:	60a5      	str	r5, [r4, #8]
 8004380:	2d00      	cmp	r5, #0
 8004382:	f2c0 8095 	blt.w	80044b0 <_printf_i+0x20c>
 8004386:	6821      	ldr	r1, [r4, #0]
 8004388:	f021 0104 	bic.w	r1, r1, #4
 800438c:	6021      	str	r1, [r4, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d13d      	bne.n	800440e <_printf_i+0x16a>
 8004392:	2d00      	cmp	r5, #0
 8004394:	f040 808e 	bne.w	80044b4 <_printf_i+0x210>
 8004398:	4665      	mov	r5, ip
 800439a:	2a08      	cmp	r2, #8
 800439c:	d10b      	bne.n	80043b6 <_printf_i+0x112>
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	07db      	lsls	r3, r3, #31
 80043a2:	d508      	bpl.n	80043b6 <_printf_i+0x112>
 80043a4:	6923      	ldr	r3, [r4, #16]
 80043a6:	6862      	ldr	r2, [r4, #4]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	bfde      	ittt	le
 80043ac:	2330      	movle	r3, #48	; 0x30
 80043ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043b6:	ebac 0305 	sub.w	r3, ip, r5
 80043ba:	6123      	str	r3, [r4, #16]
 80043bc:	f8cd 8000 	str.w	r8, [sp]
 80043c0:	463b      	mov	r3, r7
 80043c2:	aa03      	add	r2, sp, #12
 80043c4:	4621      	mov	r1, r4
 80043c6:	4630      	mov	r0, r6
 80043c8:	f7ff fef6 	bl	80041b8 <_printf_common>
 80043cc:	3001      	adds	r0, #1
 80043ce:	d14d      	bne.n	800446c <_printf_i+0x1c8>
 80043d0:	f04f 30ff 	mov.w	r0, #4294967295
 80043d4:	b005      	add	sp, #20
 80043d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043da:	4839      	ldr	r0, [pc, #228]	; (80044c0 <_printf_i+0x21c>)
 80043dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80043e0:	6813      	ldr	r3, [r2, #0]
 80043e2:	6821      	ldr	r1, [r4, #0]
 80043e4:	1d1d      	adds	r5, r3, #4
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6015      	str	r5, [r2, #0]
 80043ea:	060a      	lsls	r2, r1, #24
 80043ec:	d50b      	bpl.n	8004406 <_printf_i+0x162>
 80043ee:	07ca      	lsls	r2, r1, #31
 80043f0:	bf44      	itt	mi
 80043f2:	f041 0120 	orrmi.w	r1, r1, #32
 80043f6:	6021      	strmi	r1, [r4, #0]
 80043f8:	b91b      	cbnz	r3, 8004402 <_printf_i+0x15e>
 80043fa:	6822      	ldr	r2, [r4, #0]
 80043fc:	f022 0220 	bic.w	r2, r2, #32
 8004400:	6022      	str	r2, [r4, #0]
 8004402:	2210      	movs	r2, #16
 8004404:	e7b7      	b.n	8004376 <_printf_i+0xd2>
 8004406:	064d      	lsls	r5, r1, #25
 8004408:	bf48      	it	mi
 800440a:	b29b      	uxthmi	r3, r3
 800440c:	e7ef      	b.n	80043ee <_printf_i+0x14a>
 800440e:	4665      	mov	r5, ip
 8004410:	fbb3 f1f2 	udiv	r1, r3, r2
 8004414:	fb02 3311 	mls	r3, r2, r1, r3
 8004418:	5cc3      	ldrb	r3, [r0, r3]
 800441a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800441e:	460b      	mov	r3, r1
 8004420:	2900      	cmp	r1, #0
 8004422:	d1f5      	bne.n	8004410 <_printf_i+0x16c>
 8004424:	e7b9      	b.n	800439a <_printf_i+0xf6>
 8004426:	6813      	ldr	r3, [r2, #0]
 8004428:	6825      	ldr	r5, [r4, #0]
 800442a:	6961      	ldr	r1, [r4, #20]
 800442c:	1d18      	adds	r0, r3, #4
 800442e:	6010      	str	r0, [r2, #0]
 8004430:	0628      	lsls	r0, r5, #24
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	d501      	bpl.n	800443a <_printf_i+0x196>
 8004436:	6019      	str	r1, [r3, #0]
 8004438:	e002      	b.n	8004440 <_printf_i+0x19c>
 800443a:	066a      	lsls	r2, r5, #25
 800443c:	d5fb      	bpl.n	8004436 <_printf_i+0x192>
 800443e:	8019      	strh	r1, [r3, #0]
 8004440:	2300      	movs	r3, #0
 8004442:	6123      	str	r3, [r4, #16]
 8004444:	4665      	mov	r5, ip
 8004446:	e7b9      	b.n	80043bc <_printf_i+0x118>
 8004448:	6813      	ldr	r3, [r2, #0]
 800444a:	1d19      	adds	r1, r3, #4
 800444c:	6011      	str	r1, [r2, #0]
 800444e:	681d      	ldr	r5, [r3, #0]
 8004450:	6862      	ldr	r2, [r4, #4]
 8004452:	2100      	movs	r1, #0
 8004454:	4628      	mov	r0, r5
 8004456:	f7fb fec3 	bl	80001e0 <memchr>
 800445a:	b108      	cbz	r0, 8004460 <_printf_i+0x1bc>
 800445c:	1b40      	subs	r0, r0, r5
 800445e:	6060      	str	r0, [r4, #4]
 8004460:	6863      	ldr	r3, [r4, #4]
 8004462:	6123      	str	r3, [r4, #16]
 8004464:	2300      	movs	r3, #0
 8004466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800446a:	e7a7      	b.n	80043bc <_printf_i+0x118>
 800446c:	6923      	ldr	r3, [r4, #16]
 800446e:	462a      	mov	r2, r5
 8004470:	4639      	mov	r1, r7
 8004472:	4630      	mov	r0, r6
 8004474:	47c0      	blx	r8
 8004476:	3001      	adds	r0, #1
 8004478:	d0aa      	beq.n	80043d0 <_printf_i+0x12c>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	079b      	lsls	r3, r3, #30
 800447e:	d413      	bmi.n	80044a8 <_printf_i+0x204>
 8004480:	68e0      	ldr	r0, [r4, #12]
 8004482:	9b03      	ldr	r3, [sp, #12]
 8004484:	4298      	cmp	r0, r3
 8004486:	bfb8      	it	lt
 8004488:	4618      	movlt	r0, r3
 800448a:	e7a3      	b.n	80043d4 <_printf_i+0x130>
 800448c:	2301      	movs	r3, #1
 800448e:	464a      	mov	r2, r9
 8004490:	4639      	mov	r1, r7
 8004492:	4630      	mov	r0, r6
 8004494:	47c0      	blx	r8
 8004496:	3001      	adds	r0, #1
 8004498:	d09a      	beq.n	80043d0 <_printf_i+0x12c>
 800449a:	3501      	adds	r5, #1
 800449c:	68e3      	ldr	r3, [r4, #12]
 800449e:	9a03      	ldr	r2, [sp, #12]
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	42ab      	cmp	r3, r5
 80044a4:	dcf2      	bgt.n	800448c <_printf_i+0x1e8>
 80044a6:	e7eb      	b.n	8004480 <_printf_i+0x1dc>
 80044a8:	2500      	movs	r5, #0
 80044aa:	f104 0919 	add.w	r9, r4, #25
 80044ae:	e7f5      	b.n	800449c <_printf_i+0x1f8>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1ac      	bne.n	800440e <_printf_i+0x16a>
 80044b4:	7803      	ldrb	r3, [r0, #0]
 80044b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044be:	e76c      	b.n	800439a <_printf_i+0xf6>
 80044c0:	08004851 	.word	0x08004851
 80044c4:	08004862 	.word	0x08004862

080044c8 <memmove>:
 80044c8:	4288      	cmp	r0, r1
 80044ca:	b510      	push	{r4, lr}
 80044cc:	eb01 0302 	add.w	r3, r1, r2
 80044d0:	d807      	bhi.n	80044e2 <memmove+0x1a>
 80044d2:	1e42      	subs	r2, r0, #1
 80044d4:	4299      	cmp	r1, r3
 80044d6:	d00a      	beq.n	80044ee <memmove+0x26>
 80044d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044dc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80044e0:	e7f8      	b.n	80044d4 <memmove+0xc>
 80044e2:	4283      	cmp	r3, r0
 80044e4:	d9f5      	bls.n	80044d2 <memmove+0xa>
 80044e6:	1881      	adds	r1, r0, r2
 80044e8:	1ad2      	subs	r2, r2, r3
 80044ea:	42d3      	cmn	r3, r2
 80044ec:	d100      	bne.n	80044f0 <memmove+0x28>
 80044ee:	bd10      	pop	{r4, pc}
 80044f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80044f8:	e7f7      	b.n	80044ea <memmove+0x22>
	...

080044fc <_free_r>:
 80044fc:	b538      	push	{r3, r4, r5, lr}
 80044fe:	4605      	mov	r5, r0
 8004500:	2900      	cmp	r1, #0
 8004502:	d045      	beq.n	8004590 <_free_r+0x94>
 8004504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004508:	1f0c      	subs	r4, r1, #4
 800450a:	2b00      	cmp	r3, #0
 800450c:	bfb8      	it	lt
 800450e:	18e4      	addlt	r4, r4, r3
 8004510:	f000 f8d2 	bl	80046b8 <__malloc_lock>
 8004514:	4a1f      	ldr	r2, [pc, #124]	; (8004594 <_free_r+0x98>)
 8004516:	6813      	ldr	r3, [r2, #0]
 8004518:	4610      	mov	r0, r2
 800451a:	b933      	cbnz	r3, 800452a <_free_r+0x2e>
 800451c:	6063      	str	r3, [r4, #4]
 800451e:	6014      	str	r4, [r2, #0]
 8004520:	4628      	mov	r0, r5
 8004522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004526:	f000 b8c8 	b.w	80046ba <__malloc_unlock>
 800452a:	42a3      	cmp	r3, r4
 800452c:	d90c      	bls.n	8004548 <_free_r+0x4c>
 800452e:	6821      	ldr	r1, [r4, #0]
 8004530:	1862      	adds	r2, r4, r1
 8004532:	4293      	cmp	r3, r2
 8004534:	bf04      	itt	eq
 8004536:	681a      	ldreq	r2, [r3, #0]
 8004538:	685b      	ldreq	r3, [r3, #4]
 800453a:	6063      	str	r3, [r4, #4]
 800453c:	bf04      	itt	eq
 800453e:	1852      	addeq	r2, r2, r1
 8004540:	6022      	streq	r2, [r4, #0]
 8004542:	6004      	str	r4, [r0, #0]
 8004544:	e7ec      	b.n	8004520 <_free_r+0x24>
 8004546:	4613      	mov	r3, r2
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	b10a      	cbz	r2, 8004550 <_free_r+0x54>
 800454c:	42a2      	cmp	r2, r4
 800454e:	d9fa      	bls.n	8004546 <_free_r+0x4a>
 8004550:	6819      	ldr	r1, [r3, #0]
 8004552:	1858      	adds	r0, r3, r1
 8004554:	42a0      	cmp	r0, r4
 8004556:	d10b      	bne.n	8004570 <_free_r+0x74>
 8004558:	6820      	ldr	r0, [r4, #0]
 800455a:	4401      	add	r1, r0
 800455c:	1858      	adds	r0, r3, r1
 800455e:	4282      	cmp	r2, r0
 8004560:	6019      	str	r1, [r3, #0]
 8004562:	d1dd      	bne.n	8004520 <_free_r+0x24>
 8004564:	6810      	ldr	r0, [r2, #0]
 8004566:	6852      	ldr	r2, [r2, #4]
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	4401      	add	r1, r0
 800456c:	6019      	str	r1, [r3, #0]
 800456e:	e7d7      	b.n	8004520 <_free_r+0x24>
 8004570:	d902      	bls.n	8004578 <_free_r+0x7c>
 8004572:	230c      	movs	r3, #12
 8004574:	602b      	str	r3, [r5, #0]
 8004576:	e7d3      	b.n	8004520 <_free_r+0x24>
 8004578:	6820      	ldr	r0, [r4, #0]
 800457a:	1821      	adds	r1, r4, r0
 800457c:	428a      	cmp	r2, r1
 800457e:	bf04      	itt	eq
 8004580:	6811      	ldreq	r1, [r2, #0]
 8004582:	6852      	ldreq	r2, [r2, #4]
 8004584:	6062      	str	r2, [r4, #4]
 8004586:	bf04      	itt	eq
 8004588:	1809      	addeq	r1, r1, r0
 800458a:	6021      	streq	r1, [r4, #0]
 800458c:	605c      	str	r4, [r3, #4]
 800458e:	e7c7      	b.n	8004520 <_free_r+0x24>
 8004590:	bd38      	pop	{r3, r4, r5, pc}
 8004592:	bf00      	nop
 8004594:	20000098 	.word	0x20000098

08004598 <_malloc_r>:
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	1ccd      	adds	r5, r1, #3
 800459c:	f025 0503 	bic.w	r5, r5, #3
 80045a0:	3508      	adds	r5, #8
 80045a2:	2d0c      	cmp	r5, #12
 80045a4:	bf38      	it	cc
 80045a6:	250c      	movcc	r5, #12
 80045a8:	2d00      	cmp	r5, #0
 80045aa:	4606      	mov	r6, r0
 80045ac:	db01      	blt.n	80045b2 <_malloc_r+0x1a>
 80045ae:	42a9      	cmp	r1, r5
 80045b0:	d903      	bls.n	80045ba <_malloc_r+0x22>
 80045b2:	230c      	movs	r3, #12
 80045b4:	6033      	str	r3, [r6, #0]
 80045b6:	2000      	movs	r0, #0
 80045b8:	bd70      	pop	{r4, r5, r6, pc}
 80045ba:	f000 f87d 	bl	80046b8 <__malloc_lock>
 80045be:	4a21      	ldr	r2, [pc, #132]	; (8004644 <_malloc_r+0xac>)
 80045c0:	6814      	ldr	r4, [r2, #0]
 80045c2:	4621      	mov	r1, r4
 80045c4:	b991      	cbnz	r1, 80045ec <_malloc_r+0x54>
 80045c6:	4c20      	ldr	r4, [pc, #128]	; (8004648 <_malloc_r+0xb0>)
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	b91b      	cbnz	r3, 80045d4 <_malloc_r+0x3c>
 80045cc:	4630      	mov	r0, r6
 80045ce:	f000 f863 	bl	8004698 <_sbrk_r>
 80045d2:	6020      	str	r0, [r4, #0]
 80045d4:	4629      	mov	r1, r5
 80045d6:	4630      	mov	r0, r6
 80045d8:	f000 f85e 	bl	8004698 <_sbrk_r>
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	d124      	bne.n	800462a <_malloc_r+0x92>
 80045e0:	230c      	movs	r3, #12
 80045e2:	6033      	str	r3, [r6, #0]
 80045e4:	4630      	mov	r0, r6
 80045e6:	f000 f868 	bl	80046ba <__malloc_unlock>
 80045ea:	e7e4      	b.n	80045b6 <_malloc_r+0x1e>
 80045ec:	680b      	ldr	r3, [r1, #0]
 80045ee:	1b5b      	subs	r3, r3, r5
 80045f0:	d418      	bmi.n	8004624 <_malloc_r+0x8c>
 80045f2:	2b0b      	cmp	r3, #11
 80045f4:	d90f      	bls.n	8004616 <_malloc_r+0x7e>
 80045f6:	600b      	str	r3, [r1, #0]
 80045f8:	50cd      	str	r5, [r1, r3]
 80045fa:	18cc      	adds	r4, r1, r3
 80045fc:	4630      	mov	r0, r6
 80045fe:	f000 f85c 	bl	80046ba <__malloc_unlock>
 8004602:	f104 000b 	add.w	r0, r4, #11
 8004606:	1d23      	adds	r3, r4, #4
 8004608:	f020 0007 	bic.w	r0, r0, #7
 800460c:	1ac3      	subs	r3, r0, r3
 800460e:	d0d3      	beq.n	80045b8 <_malloc_r+0x20>
 8004610:	425a      	negs	r2, r3
 8004612:	50e2      	str	r2, [r4, r3]
 8004614:	e7d0      	b.n	80045b8 <_malloc_r+0x20>
 8004616:	428c      	cmp	r4, r1
 8004618:	684b      	ldr	r3, [r1, #4]
 800461a:	bf16      	itet	ne
 800461c:	6063      	strne	r3, [r4, #4]
 800461e:	6013      	streq	r3, [r2, #0]
 8004620:	460c      	movne	r4, r1
 8004622:	e7eb      	b.n	80045fc <_malloc_r+0x64>
 8004624:	460c      	mov	r4, r1
 8004626:	6849      	ldr	r1, [r1, #4]
 8004628:	e7cc      	b.n	80045c4 <_malloc_r+0x2c>
 800462a:	1cc4      	adds	r4, r0, #3
 800462c:	f024 0403 	bic.w	r4, r4, #3
 8004630:	42a0      	cmp	r0, r4
 8004632:	d005      	beq.n	8004640 <_malloc_r+0xa8>
 8004634:	1a21      	subs	r1, r4, r0
 8004636:	4630      	mov	r0, r6
 8004638:	f000 f82e 	bl	8004698 <_sbrk_r>
 800463c:	3001      	adds	r0, #1
 800463e:	d0cf      	beq.n	80045e0 <_malloc_r+0x48>
 8004640:	6025      	str	r5, [r4, #0]
 8004642:	e7db      	b.n	80045fc <_malloc_r+0x64>
 8004644:	20000098 	.word	0x20000098
 8004648:	2000009c 	.word	0x2000009c

0800464c <_realloc_r>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	4607      	mov	r7, r0
 8004650:	4614      	mov	r4, r2
 8004652:	460e      	mov	r6, r1
 8004654:	b921      	cbnz	r1, 8004660 <_realloc_r+0x14>
 8004656:	4611      	mov	r1, r2
 8004658:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800465c:	f7ff bf9c 	b.w	8004598 <_malloc_r>
 8004660:	b922      	cbnz	r2, 800466c <_realloc_r+0x20>
 8004662:	f7ff ff4b 	bl	80044fc <_free_r>
 8004666:	4625      	mov	r5, r4
 8004668:	4628      	mov	r0, r5
 800466a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800466c:	f000 f826 	bl	80046bc <_malloc_usable_size_r>
 8004670:	42a0      	cmp	r0, r4
 8004672:	d20f      	bcs.n	8004694 <_realloc_r+0x48>
 8004674:	4621      	mov	r1, r4
 8004676:	4638      	mov	r0, r7
 8004678:	f7ff ff8e 	bl	8004598 <_malloc_r>
 800467c:	4605      	mov	r5, r0
 800467e:	2800      	cmp	r0, #0
 8004680:	d0f2      	beq.n	8004668 <_realloc_r+0x1c>
 8004682:	4631      	mov	r1, r6
 8004684:	4622      	mov	r2, r4
 8004686:	f7ff fbf7 	bl	8003e78 <memcpy>
 800468a:	4631      	mov	r1, r6
 800468c:	4638      	mov	r0, r7
 800468e:	f7ff ff35 	bl	80044fc <_free_r>
 8004692:	e7e9      	b.n	8004668 <_realloc_r+0x1c>
 8004694:	4635      	mov	r5, r6
 8004696:	e7e7      	b.n	8004668 <_realloc_r+0x1c>

08004698 <_sbrk_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	4c06      	ldr	r4, [pc, #24]	; (80046b4 <_sbrk_r+0x1c>)
 800469c:	2300      	movs	r3, #0
 800469e:	4605      	mov	r5, r0
 80046a0:	4608      	mov	r0, r1
 80046a2:	6023      	str	r3, [r4, #0]
 80046a4:	f7fc fc5e 	bl	8000f64 <_sbrk>
 80046a8:	1c43      	adds	r3, r0, #1
 80046aa:	d102      	bne.n	80046b2 <_sbrk_r+0x1a>
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	b103      	cbz	r3, 80046b2 <_sbrk_r+0x1a>
 80046b0:	602b      	str	r3, [r5, #0]
 80046b2:	bd38      	pop	{r3, r4, r5, pc}
 80046b4:	200004c0 	.word	0x200004c0

080046b8 <__malloc_lock>:
 80046b8:	4770      	bx	lr

080046ba <__malloc_unlock>:
 80046ba:	4770      	bx	lr

080046bc <_malloc_usable_size_r>:
 80046bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046c0:	1f18      	subs	r0, r3, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	bfbc      	itt	lt
 80046c6:	580b      	ldrlt	r3, [r1, r0]
 80046c8:	18c0      	addlt	r0, r0, r3
 80046ca:	4770      	bx	lr

080046cc <_init>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	bf00      	nop
 80046d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d2:	bc08      	pop	{r3}
 80046d4:	469e      	mov	lr, r3
 80046d6:	4770      	bx	lr

080046d8 <_fini>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	bf00      	nop
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr
