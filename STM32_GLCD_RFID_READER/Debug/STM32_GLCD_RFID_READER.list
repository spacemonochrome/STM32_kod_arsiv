
STM32_GLCD_RFID_READER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012988  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000232c  08012b18  08012b18  00022b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014e44  08014e44  0003018c  2**0
                  CONTENTS
  4 .ARM          00000008  08014e44  08014e44  00024e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014e4c  08014e4c  0003018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014e4c  08014e4c  00024e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014e50  08014e50  00024e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08014e54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000076b4  2000018c  08014fe0  0003018c  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20007840  08014fe0  00037840  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e6dc  00000000  00000000  000301ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000342a  00000000  00000000  0004e896  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001150  00000000  00000000  00051cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fb8  00000000  00000000  00052e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000267ad  00000000  00000000  00053dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101bb  00000000  00000000  0007a575  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8530  00000000  00000000  0008a730  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fd  00000000  00000000  00162c60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a64  00000000  00000000  00162d60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012b00 	.word	0x08012b00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	08012b00 	.word	0x08012b00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8000584:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <GUI_X_Config+0x18>)
 800058a:	f00e fca3 	bl	800eed4 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 800058e:	4803      	ldr	r0, [pc, #12]	; (800059c <GUI_X_Config+0x1c>)
 8000590:	f00d f852 	bl	800d638 <GUI_SetDefaultFont>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200001a8 	.word	0x200001a8
 800059c:	080131f0 	.word	0x080131f0

080005a0 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <LcdWriteReg>:
*
* Function description:
*   Sets display register
*/
static void LcdWriteReg(U8 Data)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2102      	movs	r1, #2
 80005be:	480b      	ldr	r0, [pc, #44]	; (80005ec <LcdWriteReg+0x3c>)
 80005c0:	f002 f9ea 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2104      	movs	r1, #4
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <LcdWriteReg+0x3c>)
 80005ca:	f002 f9e5 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 1);
 80005ce:	1df9      	adds	r1, r7, #7
 80005d0:	2301      	movs	r3, #1
 80005d2:	2201      	movs	r2, #1
 80005d4:	4806      	ldr	r0, [pc, #24]	; (80005f0 <LcdWriteReg+0x40>)
 80005d6:	f002 fedd 	bl	8003394 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2102      	movs	r1, #2
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <LcdWriteReg+0x3c>)
 80005e0:	f002 f9da 	bl	8002998 <HAL_GPIO_WritePin>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40020800 	.word	0x40020800
 80005f0:	2000557c 	.word	0x2000557c

080005f4 <LcdReadReg>:
*       LcdWriteReg
*
* Function description:
*   Sets display register
*/
static U8 LcdReadReg(void) {
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  // ... TBD by user
	return 0;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <LcdWriteData>:
*
* Function description:
*   Writes a value to a display register
*/
static void LcdWriteData(U8 Data)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2102      	movs	r1, #2
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <LcdWriteData+0x3c>)
 8000614:	f002 f9c0 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2104      	movs	r1, #4
 800061c:	4808      	ldr	r0, [pc, #32]	; (8000640 <LcdWriteData+0x3c>)
 800061e:	f002 f9bb 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 1);
 8000622:	1df9      	adds	r1, r7, #7
 8000624:	2301      	movs	r3, #1
 8000626:	2201      	movs	r2, #1
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <LcdWriteData+0x40>)
 800062a:	f002 feb3 	bl	8003394 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	2102      	movs	r1, #2
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <LcdWriteData+0x3c>)
 8000634:	f002 f9b0 	bl	8002998 <HAL_GPIO_WritePin>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020800 	.word	0x40020800
 8000644:	2000557c 	.word	0x2000557c

08000648 <LcdWriteDataMultiple>:
*       LcdWriteDataMultiple
*
* Function description:
*   Writes multiple values to a display register.
*/
static void LcdWriteDataMultiple(U8 * pData, int NumItems) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]

	while (NumItems--)
 8000652:	e011      	b.n	8000678 <LcdWriteDataMultiple+0x30>
	{
		HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2102      	movs	r1, #2
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <LcdWriteDataMultiple+0x44>)
 800065a:	f002 f99d 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	2104      	movs	r1, #4
 8000662:	480a      	ldr	r0, [pc, #40]	; (800068c <LcdWriteDataMultiple+0x44>)
 8000664:	f002 f998 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, pData++, 1, 1);
 8000668:	6879      	ldr	r1, [r7, #4]
 800066a:	1c4b      	adds	r3, r1, #1
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	2301      	movs	r3, #1
 8000670:	2201      	movs	r2, #1
 8000672:	4807      	ldr	r0, [pc, #28]	; (8000690 <LcdWriteDataMultiple+0x48>)
 8000674:	f002 fe8e 	bl	8003394 <HAL_SPI_Transmit>
	while (NumItems--)
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	1e5a      	subs	r2, r3, #1
 800067c:	603a      	str	r2, [r7, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1e8      	bne.n	8000654 <LcdWriteDataMultiple+0xc>
  }
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40020800 	.word	0x40020800
 8000690:	2000557c 	.word	0x2000557c

08000694 <LcdReadDataMultiple>:
*       LcdReadDataMultiple
*
* Function description:
*   Reads multiple values from a display register.
*/
static void LcdReadDataMultiple(U8 * pData, int NumItems) {
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
  while (NumItems--) {
 800069e:	bf00      	nop
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	1e5a      	subs	r2, r3, #1
 80006a4:	603a      	str	r2, [r7, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d1fa      	bne.n	80006a0 <LcdReadDataMultiple+0xc>
    // ... TBD by user
  }
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
	...

080006b8 <LcdInit>:

void LcdInit(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2102      	movs	r1, #2
 80006c2:	489a      	ldr	r0, [pc, #616]	; (800092c <LcdInit+0x274>)
 80006c4:	f002 f968 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2104      	movs	r1, #4
 80006cc:	4897      	ldr	r0, [pc, #604]	; (800092c <LcdInit+0x274>)
 80006ce:	f002 f963 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2108      	movs	r1, #8
 80006d6:	4895      	ldr	r0, [pc, #596]	; (800092c <LcdInit+0x274>)
 80006d8:	f002 f95e 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_Delay(2);//Reset delay
 80006dc:	2002      	movs	r0, #2
 80006de:	f001 fea1 	bl	8002424 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2102      	movs	r1, #2
 80006e6:	4891      	ldr	r0, [pc, #580]	; (800092c <LcdInit+0x274>)
 80006e8:	f002 f956 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2104      	movs	r1, #4
 80006f0:	488e      	ldr	r0, [pc, #568]	; (800092c <LcdInit+0x274>)
 80006f2:	f002 f951 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2108      	movs	r1, #8
 80006fa:	488c      	ldr	r0, [pc, #560]	; (800092c <LcdInit+0x274>)
 80006fc:	f002 f94c 	bl	8002998 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<3; i++)  {
 8000700:	2300      	movs	r3, #0
 8000702:	71fb      	strb	r3, [r7, #7]
 8000704:	e005      	b.n	8000712 <LcdInit+0x5a>
		LcdWriteReg(0x00);
 8000706:	2000      	movs	r0, #0
 8000708:	f7ff ff52 	bl	80005b0 <LcdWriteReg>
	for(uint8_t i=0; i<3; i++)  {
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	3301      	adds	r3, #1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b02      	cmp	r3, #2
 8000716:	d9f6      	bls.n	8000706 <LcdInit+0x4e>
	} // Three extra 0x00s
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	2102      	movs	r1, #2
 800071c:	4883      	ldr	r0, [pc, #524]	; (800092c <LcdInit+0x274>)
 800071e:	f002 f93b 	bl	8002998 <HAL_GPIO_WritePin>

//ILI9341 initialization sequence

	LcdWriteReg(0x01);//soft reset
 8000722:	2001      	movs	r0, #1
 8000724:	f7ff ff44 	bl	80005b0 <LcdWriteReg>
	HAL_Delay(1000);
 8000728:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800072c:	f001 fe7a 	bl	8002424 <HAL_Delay>
	//power control A
	LcdWriteReg(0xCB);
 8000730:	20cb      	movs	r0, #203	; 0xcb
 8000732:	f7ff ff3d 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x39);
 8000736:	2039      	movs	r0, #57	; 0x39
 8000738:	f7ff ff64 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x2C);
 800073c:	202c      	movs	r0, #44	; 0x2c
 800073e:	f7ff ff61 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x00);
 8000742:	2000      	movs	r0, #0
 8000744:	f7ff ff5e 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x34);
 8000748:	2034      	movs	r0, #52	; 0x34
 800074a:	f7ff ff5b 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x02);
 800074e:	2002      	movs	r0, #2
 8000750:	f7ff ff58 	bl	8000604 <LcdWriteData>

	//power control B
	LcdWriteReg(0xCF);
 8000754:	20cf      	movs	r0, #207	; 0xcf
 8000756:	f7ff ff2b 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x00);
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff ff52 	bl	8000604 <LcdWriteData>
	LcdWriteData(0xC1);
 8000760:	20c1      	movs	r0, #193	; 0xc1
 8000762:	f7ff ff4f 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x30);
 8000766:	2030      	movs	r0, #48	; 0x30
 8000768:	f7ff ff4c 	bl	8000604 <LcdWriteData>

	//driver timing control A
	LcdWriteReg(0xE8);
 800076c:	20e8      	movs	r0, #232	; 0xe8
 800076e:	f7ff ff1f 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x85);
 8000772:	2085      	movs	r0, #133	; 0x85
 8000774:	f7ff ff46 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x00);
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff ff43 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x78);
 800077e:	2078      	movs	r0, #120	; 0x78
 8000780:	f7ff ff40 	bl	8000604 <LcdWriteData>

	//driver timing control B
	LcdWriteReg(0xEA);
 8000784:	20ea      	movs	r0, #234	; 0xea
 8000786:	f7ff ff13 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x00);
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff ff3a 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x00);
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff ff37 	bl	8000604 <LcdWriteData>

	//power on sequence control
	LcdWriteReg(0xED);
 8000796:	20ed      	movs	r0, #237	; 0xed
 8000798:	f7ff ff0a 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x64);
 800079c:	2064      	movs	r0, #100	; 0x64
 800079e:	f7ff ff31 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x03);
 80007a2:	2003      	movs	r0, #3
 80007a4:	f7ff ff2e 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x12);
 80007a8:	2012      	movs	r0, #18
 80007aa:	f7ff ff2b 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x81);
 80007ae:	2081      	movs	r0, #129	; 0x81
 80007b0:	f7ff ff28 	bl	8000604 <LcdWriteData>

	//pump ratio control
	LcdWriteReg(0xF7);
 80007b4:	20f7      	movs	r0, #247	; 0xf7
 80007b6:	f7ff fefb 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x20);
 80007ba:	2020      	movs	r0, #32
 80007bc:	f7ff ff22 	bl	8000604 <LcdWriteData>

	//power control,VRH[5:0]
	LcdWriteReg(0xC0);
 80007c0:	20c0      	movs	r0, #192	; 0xc0
 80007c2:	f7ff fef5 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x23);
 80007c6:	2023      	movs	r0, #35	; 0x23
 80007c8:	f7ff ff1c 	bl	8000604 <LcdWriteData>

	//Power control,SAP[2:0];BT[3:0]
	LcdWriteReg(0xC1);
 80007cc:	20c1      	movs	r0, #193	; 0xc1
 80007ce:	f7ff feef 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x10);
 80007d2:	2010      	movs	r0, #16
 80007d4:	f7ff ff16 	bl	8000604 <LcdWriteData>

	//vcm control
	LcdWriteReg(0xC5);
 80007d8:	20c5      	movs	r0, #197	; 0xc5
 80007da:	f7ff fee9 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x3E);
 80007de:	203e      	movs	r0, #62	; 0x3e
 80007e0:	f7ff ff10 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x28);
 80007e4:	2028      	movs	r0, #40	; 0x28
 80007e6:	f7ff ff0d 	bl	8000604 <LcdWriteData>

	//vcm control 2
	LcdWriteReg(0xC7);
 80007ea:	20c7      	movs	r0, #199	; 0xc7
 80007ec:	f7ff fee0 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x86);
 80007f0:	2086      	movs	r0, #134	; 0x86
 80007f2:	f7ff ff07 	bl	8000604 <LcdWriteData>

	//memory access control
	LcdWriteReg(0x36);
 80007f6:	2036      	movs	r0, #54	; 0x36
 80007f8:	f7ff feda 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x48);
 80007fc:	2048      	movs	r0, #72	; 0x48
 80007fe:	f7ff ff01 	bl	8000604 <LcdWriteData>

	//pixel format
	LcdWriteReg(0x3A);
 8000802:	203a      	movs	r0, #58	; 0x3a
 8000804:	f7ff fed4 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x55);
 8000808:	2055      	movs	r0, #85	; 0x55
 800080a:	f7ff fefb 	bl	8000604 <LcdWriteData>

	//frameration control,normal mode full colours
	LcdWriteReg(0xB1);
 800080e:	20b1      	movs	r0, #177	; 0xb1
 8000810:	f7ff fece 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x00);
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff fef5 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x18);
 800081a:	2018      	movs	r0, #24
 800081c:	f7ff fef2 	bl	8000604 <LcdWriteData>

	//display function control
	LcdWriteReg(0xB6);
 8000820:	20b6      	movs	r0, #182	; 0xb6
 8000822:	f7ff fec5 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x08);
 8000826:	2008      	movs	r0, #8
 8000828:	f7ff feec 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x82);
 800082c:	2082      	movs	r0, #130	; 0x82
 800082e:	f7ff fee9 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x27);
 8000832:	2027      	movs	r0, #39	; 0x27
 8000834:	f7ff fee6 	bl	8000604 <LcdWriteData>

	//3gamma function disable
	LcdWriteReg(0xF2);
 8000838:	20f2      	movs	r0, #242	; 0xf2
 800083a:	f7ff feb9 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x00);
 800083e:	2000      	movs	r0, #0
 8000840:	f7ff fee0 	bl	8000604 <LcdWriteData>

	//gamma curve selected
	LcdWriteReg(0x26);
 8000844:	2026      	movs	r0, #38	; 0x26
 8000846:	f7ff feb3 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x01);
 800084a:	2001      	movs	r0, #1
 800084c:	f7ff feda 	bl	8000604 <LcdWriteData>

	//set positive gamma correction
	LcdWriteReg(0xE0);
 8000850:	20e0      	movs	r0, #224	; 0xe0
 8000852:	f7ff fead 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x0F);
 8000856:	200f      	movs	r0, #15
 8000858:	f7ff fed4 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x31);
 800085c:	2031      	movs	r0, #49	; 0x31
 800085e:	f7ff fed1 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x2B);
 8000862:	202b      	movs	r0, #43	; 0x2b
 8000864:	f7ff fece 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x0C);
 8000868:	200c      	movs	r0, #12
 800086a:	f7ff fecb 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x0E);
 800086e:	200e      	movs	r0, #14
 8000870:	f7ff fec8 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x08);
 8000874:	2008      	movs	r0, #8
 8000876:	f7ff fec5 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x4E);
 800087a:	204e      	movs	r0, #78	; 0x4e
 800087c:	f7ff fec2 	bl	8000604 <LcdWriteData>
	LcdWriteData(0xF1);
 8000880:	20f1      	movs	r0, #241	; 0xf1
 8000882:	f7ff febf 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x37);
 8000886:	2037      	movs	r0, #55	; 0x37
 8000888:	f7ff febc 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x07);
 800088c:	2007      	movs	r0, #7
 800088e:	f7ff feb9 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x10);
 8000892:	2010      	movs	r0, #16
 8000894:	f7ff feb6 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x03);
 8000898:	2003      	movs	r0, #3
 800089a:	f7ff feb3 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x0E);
 800089e:	200e      	movs	r0, #14
 80008a0:	f7ff feb0 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x09);
 80008a4:	2009      	movs	r0, #9
 80008a6:	f7ff fead 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x00);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff feaa 	bl	8000604 <LcdWriteData>

	//set negative gamma correction
	LcdWriteReg(0xE1);
 80008b0:	20e1      	movs	r0, #225	; 0xe1
 80008b2:	f7ff fe7d 	bl	80005b0 <LcdWriteReg>
	LcdWriteData(0x00);
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff fea4 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x0E);
 80008bc:	200e      	movs	r0, #14
 80008be:	f7ff fea1 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x14);
 80008c2:	2014      	movs	r0, #20
 80008c4:	f7ff fe9e 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x03);
 80008c8:	2003      	movs	r0, #3
 80008ca:	f7ff fe9b 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x11);
 80008ce:	2011      	movs	r0, #17
 80008d0:	f7ff fe98 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x07);
 80008d4:	2007      	movs	r0, #7
 80008d6:	f7ff fe95 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x31);
 80008da:	2031      	movs	r0, #49	; 0x31
 80008dc:	f7ff fe92 	bl	8000604 <LcdWriteData>
	LcdWriteData(0xC1);
 80008e0:	20c1      	movs	r0, #193	; 0xc1
 80008e2:	f7ff fe8f 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x48);
 80008e6:	2048      	movs	r0, #72	; 0x48
 80008e8:	f7ff fe8c 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x08);
 80008ec:	2008      	movs	r0, #8
 80008ee:	f7ff fe89 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x0F);
 80008f2:	200f      	movs	r0, #15
 80008f4:	f7ff fe86 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x0C);
 80008f8:	200c      	movs	r0, #12
 80008fa:	f7ff fe83 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x31);
 80008fe:	2031      	movs	r0, #49	; 0x31
 8000900:	f7ff fe80 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x36);
 8000904:	2036      	movs	r0, #54	; 0x36
 8000906:	f7ff fe7d 	bl	8000604 <LcdWriteData>
	LcdWriteData(0x0F);
 800090a:	200f      	movs	r0, #15
 800090c:	f7ff fe7a 	bl	8000604 <LcdWriteData>

	//exit sleep
	LcdWriteReg(0x11);
 8000910:	2011      	movs	r0, #17
 8000912:	f7ff fe4d 	bl	80005b0 <LcdWriteReg>
	HAL_Delay(120);
 8000916:	2078      	movs	r0, #120	; 0x78
 8000918:	f001 fd84 	bl	8002424 <HAL_Delay>
	//display on
	LcdWriteReg(0x29);
 800091c:	2029      	movs	r0, #41	; 0x29
 800091e:	f7ff fe47 	bl	80005b0 <LcdWriteReg>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40020800 	.word	0x40020800

08000930 <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b0a0      	sub	sp, #128	; 0x80
 8000934:	af00      	add	r7, sp, #0
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 8000936:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
  GUI_PORT_API PortAPI = {0};
 8000946:	463b      	mov	r3, r7
 8000948:	2268      	movs	r2, #104	; 0x68
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f011 fc53 	bl	80121f8 <memset>
  //
  // Set display driver and color conversion
  //
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_565, 0, 0);//16bit color flexcolor driver
 8000952:	2300      	movs	r3, #0
 8000954:	2200      	movs	r2, #0
 8000956:	4916      	ldr	r1, [pc, #88]	; (80009b0 <LCD_X_Config+0x80>)
 8000958:	4816      	ldr	r0, [pc, #88]	; (80009b4 <LCD_X_Config+0x84>)
 800095a:	f00c fdef 	bl	800d53c <GUI_DEVICE_CreateAndLink>
 800095e:	67f8      	str	r0, [r7, #124]	; 0x7c
  //
  // Display driver configuration, required for Lin-driver
  //
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8000960:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000964:	21f0      	movs	r1, #240	; 0xf0
 8000966:	2000      	movs	r0, #0
 8000968:	f00b fabc 	bl	800bee4 <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);
 800096c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000970:	21f0      	movs	r1, #240	; 0xf0
 8000972:	2000      	movs	r0, #0
 8000974:	f00b fa9e 	bl	800beb4 <LCD_SetVSizeEx>
  //
  // Orientation
  //
  Config.Orientation = GUI_SWAP_XY | GUI_ROTATION_180;
 8000978:	2307      	movs	r3, #7
 800097a:	673b      	str	r3, [r7, #112]	; 0x70
  GUIDRV_FlexColor_Config(pDevice, &Config);
 800097c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000980:	4619      	mov	r1, r3
 8000982:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000984:	f00b fa35 	bl	800bdf2 <GUIDRV_FlexColor_Config>
  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite8_A0  = LcdWriteReg;
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <LCD_X_Config+0x88>)
 800098a:	603b      	str	r3, [r7, #0]
  PortAPI.pfWrite8_A1  = LcdWriteData;
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <LCD_X_Config+0x8c>)
 800098e:	607b      	str	r3, [r7, #4]
  PortAPI.pfWriteM8_A1  = LcdWriteDataMultiple;
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <LCD_X_Config+0x90>)
 8000992:	60fb      	str	r3, [r7, #12]
  PortAPI.pfRead8_A1  = LcdReadReg;
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <LCD_X_Config+0x94>)
 8000996:	617b      	str	r3, [r7, #20]
  PortAPI.pfReadM8_A1 = LcdReadDataMultiple;
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <LCD_X_Config+0x98>)
 800099a:	61fb      	str	r3, [r7, #28]

  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M16C0B8);//ILI9341, 16bit color, 8 bit bus, no cache
 800099c:	4639      	mov	r1, r7
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <LCD_X_Config+0x9c>)
 80009a0:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <LCD_X_Config+0xa0>)
 80009a2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80009a4:	f00b fa43 	bl	800be2e <GUIDRV_FlexColor_SetFunc>
}
 80009a8:	bf00      	nop
 80009aa:	3780      	adds	r7, #128	; 0x80
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	080142c4 	.word	0x080142c4
 80009b4:	08014164 	.word	0x08014164
 80009b8:	080005b1 	.word	0x080005b1
 80009bc:	08000605 	.word	0x08000605
 80009c0:	08000649 	.word	0x08000649
 80009c4:	080005f5 	.word	0x080005f5
 80009c8:	08000695 	.word	0x08000695
 80009cc:	0800b7b5 	.word	0x0800b7b5
 80009d0:	0800b0b1 	.word	0x0800b0b1

080009d4 <LCD_X_DisplayDriver>:
* Return Value:
*   < -1 - Error
*     -1 - Command not handled
*      0 - Ok
*/
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d103      	bne.n	80009ee <LCD_X_DisplayDriver+0x1a>
  case LCD_X_INITCONTROLLER: {
	LcdInit();	//ili9341 init code
 80009e6:	f7ff fe67 	bl	80006b8 <LcdInit>
    return 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e003      	b.n	80009f6 <LCD_X_DisplayDriver+0x22>
  }
  default:
    r = -1;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	617b      	str	r3, [r7, #20]
  }
  return r;
 80009f4:	697b      	ldr	r3, [r7, #20]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]

  switch (pMsg->MsgId) {
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f009 f886 	bl	8009b18 <WM_DefaultProc>
    break;
 8000a0c:	bf00      	nop
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <CreatePersonelGecis>:
/*********************************************************************
*
*       CreatePersonelGecis
*/
WM_HWIN CreatePersonelGecis(void);
WM_HWIN CreatePersonelGecis(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af02      	add	r7, sp, #8
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 8000a1e:	f007 fc7f 	bl	8008320 <WM_GetDesktopWindow>
 8000a22:	4602      	mov	r2, r0
 8000a24:	2300      	movs	r3, #0
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <CreatePersonelGecis+0x2c>)
 8000a30:	2109      	movs	r1, #9
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <CreatePersonelGecis+0x30>)
 8000a34:	f007 f914 	bl	8007c60 <GUI_CreateDialogBox>
 8000a38:	6078      	str	r0, [r7, #4]
  return hWin;
 8000a3a:	687b      	ldr	r3, [r7, #4]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	080009ff 	.word	0x080009ff
 8000a48:	08012c14 	.word	0x08012c14

08000a4c <RFID_Card_Check_ID>:

// USER START (Optionally insert additional public code)
char RFID_Card_Check_ID(char *CardID)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	if(MFRC522_Check(CardID) == MI_OK)
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f001 f8ab 	bl	8001bb0 <MFRC522_Check>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d107      	bne.n	8000a70 <RFID_Card_Check_ID+0x24>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a66:	4808      	ldr	r0, [pc, #32]	; (8000a88 <RFID_Card_Check_ID+0x3c>)
 8000a68:	f001 ff96 	bl	8002998 <HAL_GPIO_WritePin>
		return MI_OK;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	e006      	b.n	8000a7e <RFID_Card_Check_ID+0x32>
	}

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a76:	4804      	ldr	r0, [pc, #16]	; (8000a88 <RFID_Card_Check_ID+0x3c>)
 8000a78:	f001 ff8e 	bl	8002998 <HAL_GPIO_WritePin>

	return MI_NOK;
 8000a7c:	2303      	movs	r3, #3
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40020c00 	.word	0x40020c00

08000a8c <CheckDataBase>:


char CheckDataBase(char *CardID)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b087      	sub	sp, #28
 8000a90:	af04      	add	r7, sp, #16
 8000a92:	6078      	str	r0, [r7, #4]
	sprintf(strCardID, "%03d%03d%03d%03d%03d",CardID[0],CardID[1],CardID[2],CardID[3],CardID[4]);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461c      	mov	r4, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3302      	adds	r3, #2
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3303      	adds	r3, #3
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	9302      	str	r3, [sp, #8]
 8000aba:	9101      	str	r1, [sp, #4]
 8000abc:	9200      	str	r2, [sp, #0]
 8000abe:	4623      	mov	r3, r4
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	493f      	ldr	r1, [pc, #252]	; (8000bc0 <CheckDataBase+0x134>)
 8000ac4:	483f      	ldr	r0, [pc, #252]	; (8000bc4 <CheckDataBase+0x138>)
 8000ac6:	f011 fb9f 	bl	8012208 <siprintf>

	res = f_open(&file, "liste.txt", FA_READ);
 8000aca:	2201      	movs	r2, #1
 8000acc:	493e      	ldr	r1, [pc, #248]	; (8000bc8 <CheckDataBase+0x13c>)
 8000ace:	483f      	ldr	r0, [pc, #252]	; (8000bcc <CheckDataBase+0x140>)
 8000ad0:	f005 fca4 	bl	800641c <f_open>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b3d      	ldr	r3, [pc, #244]	; (8000bd0 <CheckDataBase+0x144>)
 8000ada:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
 8000adc:	4b3c      	ldr	r3, [pc, #240]	; (8000bd0 <CheckDataBase+0x144>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d160      	bne.n	8000ba6 <CheckDataBase+0x11a>
	{
		res = f_read(&file, buffer, sizeof(buffer), &br);
 8000ae4:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <CheckDataBase+0x148>)
 8000ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aea:	493b      	ldr	r1, [pc, #236]	; (8000bd8 <CheckDataBase+0x14c>)
 8000aec:	4837      	ldr	r0, [pc, #220]	; (8000bcc <CheckDataBase+0x140>)
 8000aee:	f005 fef0 	bl	80068d2 <f_read>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b36      	ldr	r3, [pc, #216]	; (8000bd0 <CheckDataBase+0x144>)
 8000af8:	701a      	strb	r2, [r3, #0]
		if(res == FR_OK)
 8000afa:	4b35      	ldr	r3, [pc, #212]	; (8000bd0 <CheckDataBase+0x144>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14c      	bne.n	8000b9c <CheckDataBase+0x110>
		{
			ptr = strstr(buffer, strCardID);
 8000b02:	4930      	ldr	r1, [pc, #192]	; (8000bc4 <CheckDataBase+0x138>)
 8000b04:	4834      	ldr	r0, [pc, #208]	; (8000bd8 <CheckDataBase+0x14c>)
 8000b06:	f011 fbb4 	bl	8012272 <strstr>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	4b33      	ldr	r3, [pc, #204]	; (8000bdc <CheckDataBase+0x150>)
 8000b0e:	601a      	str	r2, [r3, #0]
			if(ptr)
 8000b10:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <CheckDataBase+0x150>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d04b      	beq.n	8000bb0 <CheckDataBase+0x124>
			{
				token = strtok(ptr, "\t");
 8000b18:	4b30      	ldr	r3, [pc, #192]	; (8000bdc <CheckDataBase+0x150>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4930      	ldr	r1, [pc, #192]	; (8000be0 <CheckDataBase+0x154>)
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f011 fbc2 	bl	80122a8 <strtok>
 8000b24:	4603      	mov	r3, r0
 8000b26:	461a      	mov	r2, r3
 8000b28:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <CheckDataBase+0x158>)
 8000b2a:	601a      	str	r2, [r3, #0]
				i=0;
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <CheckDataBase+0x15c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	801a      	strh	r2, [r3, #0]
				while(token != NULL)
 8000b32:	e021      	b.n	8000b78 <CheckDataBase+0xec>
				{
					sprintf(&PersonelInfo[i++][0], token);
 8000b34:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <CheckDataBase+0x15c>)
 8000b36:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b3a:	b293      	uxth	r3, r2
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	b219      	sxth	r1, r3
 8000b42:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <CheckDataBase+0x15c>)
 8000b44:	8019      	strh	r1, [r3, #0]
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4a27      	ldr	r2, [pc, #156]	; (8000bec <CheckDataBase+0x160>)
 8000b50:	441a      	add	r2, r3
 8000b52:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <CheckDataBase+0x158>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4619      	mov	r1, r3
 8000b58:	4610      	mov	r0, r2
 8000b5a:	f011 fb55 	bl	8012208 <siprintf>
					if(i==5) break;
 8000b5e:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <CheckDataBase+0x15c>)
 8000b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b64:	2b05      	cmp	r3, #5
 8000b66:	d00c      	beq.n	8000b82 <CheckDataBase+0xf6>
					token = strtok(NULL, "\t");
 8000b68:	491d      	ldr	r1, [pc, #116]	; (8000be0 <CheckDataBase+0x154>)
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f011 fb9c 	bl	80122a8 <strtok>
 8000b70:	4603      	mov	r3, r0
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <CheckDataBase+0x158>)
 8000b76:	601a      	str	r2, [r3, #0]
				while(token != NULL)
 8000b78:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <CheckDataBase+0x158>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1d9      	bne.n	8000b34 <CheckDataBase+0xa8>
 8000b80:	e000      	b.n	8000b84 <CheckDataBase+0xf8>
					if(i==5) break;
 8000b82:	bf00      	nop
				}
				ptr = strchr(&PersonelInfo[4][0], '\r');
 8000b84:	210d      	movs	r1, #13
 8000b86:	481a      	ldr	r0, [pc, #104]	; (8000bf0 <CheckDataBase+0x164>)
 8000b88:	f011 fb5e 	bl	8012248 <strchr>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <CheckDataBase+0x150>)
 8000b90:	601a      	str	r2, [r3, #0]
				*ptr = 0;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <CheckDataBase+0x150>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
 8000b9a:	e009      	b.n	8000bb0 <CheckDataBase+0x124>
			}
		}
		else
		{
			f_close(&file);
 8000b9c:	480b      	ldr	r0, [pc, #44]	; (8000bcc <CheckDataBase+0x140>)
 8000b9e:	f006 f875 	bl	8006c8c <f_close>
			return 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e008      	b.n	8000bb8 <CheckDataBase+0x12c>
		}
	}
	else
	{
		f_close(&file);
 8000ba6:	4809      	ldr	r0, [pc, #36]	; (8000bcc <CheckDataBase+0x140>)
 8000ba8:	f006 f870 	bl	8006c8c <f_close>
		return 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	e003      	b.n	8000bb8 <CheckDataBase+0x12c>
	}
	f_close(&file);
 8000bb0:	4806      	ldr	r0, [pc, #24]	; (8000bcc <CheckDataBase+0x140>)
 8000bb2:	f006 f86b 	bl	8006c8c <f_close>

	return 1;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd90      	pop	{r4, r7, pc}
 8000bc0:	08012b58 	.word	0x08012b58
 8000bc4:	2000543c 	.word	0x2000543c
 8000bc8:	08012b70 	.word	0x08012b70
 8000bcc:	20003c08 	.word	0x20003c08
 8000bd0:	200054b0 	.word	0x200054b0
 8000bd4:	20003c04 	.word	0x20003c04
 8000bd8:	2000503c 	.word	0x2000503c
 8000bdc:	20003c00 	.word	0x20003c00
 8000be0:	08012b7c 	.word	0x08012b7c
 8000be4:	200054bc 	.word	0x200054bc
 8000be8:	20004c38 	.word	0x20004c38
 8000bec:	2000544c 	.word	0x2000544c
 8000bf0:	2000549c 	.word	0x2000549c

08000bf4 <_GetData>:

char _acBuffer[1024];
static int _GetData(void * p, const U8 ** ppData, unsigned NumBytesReq, U32 Offset) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	603b      	str	r3, [r7, #0]
    unsigned int NumBytesRead;
    f_lseek((FIL *) p, Offset); //Set file pointer to the required position
 8000c02:	6839      	ldr	r1, [r7, #0]
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f006 f86b 	bl	8006ce0 <f_lseek>
     * FIL*     fp      -	Pointer to the file object
     * void*    buff    -	Pointer to data buffer
     * UINT     btr     -	Number of bytes to read
     * UINT*    br      -	Pointer to number of bytes read
     */
    f_read((FIL *) p, (void *) _acBuffer, NumBytesReq, &NumBytesRead); //Read data into buffer
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	4905      	ldr	r1, [pc, #20]	; (8000c28 <_GetData+0x34>)
 8000c12:	68f8      	ldr	r0, [r7, #12]
 8000c14:	f005 fe5d 	bl	80068d2 <f_read>
    *ppData = (const U8 *) _acBuffer; //Set pointer to the buffer
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4a03      	ldr	r2, [pc, #12]	; (8000c28 <_GetData+0x34>)
 8000c1c:	601a      	str	r2, [r3, #0]
    return NumBytesRead;
 8000c1e:	697b      	ldr	r3, [r7, #20]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20004c3c 	.word	0x20004c3c

08000c2c <RFID_Reader>:


void RFID_Reader()
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
	WM_HWIN hWin;
	TEXT_Handle		hText4,hText5,hText6,hText7;

	ret = f_mount(&fs, "", 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	4932      	ldr	r1, [pc, #200]	; (8000d00 <RFID_Reader+0xd4>)
 8000c36:	4833      	ldr	r0, [pc, #204]	; (8000d04 <RFID_Reader+0xd8>)
 8000c38:	f005 fbaa 	bl	8006390 <f_mount>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b31      	ldr	r3, [pc, #196]	; (8000d08 <RFID_Reader+0xdc>)
 8000c42:	701a      	strb	r2, [r3, #0]
	if(ret != FR_OK)
 8000c44:	4b30      	ldr	r3, [pc, #192]	; (8000d08 <RFID_Reader+0xdc>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d000      	beq.n	8000c4e <RFID_Reader+0x22>
	{
		while(1);
 8000c4c:	e7fe      	b.n	8000c4c <RFID_Reader+0x20>
	}

	hWin = CreatePersonelGecis();
 8000c4e:	f7ff fee3 	bl	8000a18 <CreatePersonelGecis>
 8000c52:	6178      	str	r0, [r7, #20]

	hText4 = WM_GetDialogItem(hWin, ID_TEXT_4);
 8000c54:	f640 0106 	movw	r1, #2054	; 0x806
 8000c58:	6978      	ldr	r0, [r7, #20]
 8000c5a:	f007 fbb1 	bl	80083c0 <WM_GetDialogItem>
 8000c5e:	6138      	str	r0, [r7, #16]
	hText5 = WM_GetDialogItem(hWin, ID_TEXT_5);
 8000c60:	f640 0107 	movw	r1, #2055	; 0x807
 8000c64:	6978      	ldr	r0, [r7, #20]
 8000c66:	f007 fbab 	bl	80083c0 <WM_GetDialogItem>
 8000c6a:	60f8      	str	r0, [r7, #12]
	hText6 = WM_GetDialogItem(hWin, ID_TEXT_6);
 8000c6c:	f640 0108 	movw	r1, #2056	; 0x808
 8000c70:	6978      	ldr	r0, [r7, #20]
 8000c72:	f007 fba5 	bl	80083c0 <WM_GetDialogItem>
 8000c76:	60b8      	str	r0, [r7, #8]
	hText7 = WM_GetDialogItem(hWin, ID_TEXT_7);
 8000c78:	f640 0109 	movw	r1, #2057	; 0x809
 8000c7c:	6978      	ldr	r0, [r7, #20]
 8000c7e:	f007 fb9f 	bl	80083c0 <WM_GetDialogItem>
 8000c82:	6078      	str	r0, [r7, #4]

	while(1)
	{

		ret = RFID_Card_Check_ID(CardID);
 8000c84:	4821      	ldr	r0, [pc, #132]	; (8000d0c <RFID_Reader+0xe0>)
 8000c86:	f7ff fee1 	bl	8000a4c <RFID_Card_Check_ID>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <RFID_Reader+0xdc>)
 8000c90:	701a      	strb	r2, [r3, #0]
		if(ret == MI_OK)
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <RFID_Reader+0xdc>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d12b      	bne.n	8000cf2 <RFID_Reader+0xc6>
		{
			if(CheckDataBase(CardID))
 8000c9a:	481c      	ldr	r0, [pc, #112]	; (8000d0c <RFID_Reader+0xe0>)
 8000c9c:	f7ff fef6 	bl	8000a8c <CheckDataBase>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d025      	beq.n	8000cf2 <RFID_Reader+0xc6>
			{
				TEXT_SetText(hText4, &PersonelInfo[1][0]);
 8000ca6:	491a      	ldr	r1, [pc, #104]	; (8000d10 <RFID_Reader+0xe4>)
 8000ca8:	6938      	ldr	r0, [r7, #16]
 8000caa:	f006 fc24 	bl	80074f6 <TEXT_SetText>
				TEXT_SetText(hText5, &PersonelInfo[2][0]);
 8000cae:	4919      	ldr	r1, [pc, #100]	; (8000d14 <RFID_Reader+0xe8>)
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f006 fc20 	bl	80074f6 <TEXT_SetText>
				TEXT_SetText(hText6, &PersonelInfo[3][0]);
 8000cb6:	4918      	ldr	r1, [pc, #96]	; (8000d18 <RFID_Reader+0xec>)
 8000cb8:	68b8      	ldr	r0, [r7, #8]
 8000cba:	f006 fc1c 	bl	80074f6 <TEXT_SetText>
				TEXT_SetText(hText7, &PersonelInfo[0][0]);
 8000cbe:	4917      	ldr	r1, [pc, #92]	; (8000d1c <RFID_Reader+0xf0>)
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f006 fc18 	bl	80074f6 <TEXT_SetText>

				res = f_open(&file, &PersonelInfo[4][0], FA_OPEN_EXISTING | FA_READ);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4915      	ldr	r1, [pc, #84]	; (8000d20 <RFID_Reader+0xf4>)
 8000cca:	4816      	ldr	r0, [pc, #88]	; (8000d24 <RFID_Reader+0xf8>)
 8000ccc:	f005 fba6 	bl	800641c <f_open>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <RFID_Reader+0xfc>)
 8000cd6:	701a      	strb	r2, [r3, #0]
				if (res == FR_OK)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <RFID_Reader+0xfc>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d105      	bne.n	8000cec <RFID_Reader+0xc0>
					GUI_BMP_DrawEx(_GetData, &file, 14, 30);
 8000ce0:	231e      	movs	r3, #30
 8000ce2:	220e      	movs	r2, #14
 8000ce4:	490f      	ldr	r1, [pc, #60]	; (8000d24 <RFID_Reader+0xf8>)
 8000ce6:	4811      	ldr	r0, [pc, #68]	; (8000d2c <RFID_Reader+0x100>)
 8000ce8:	f00d fd9a 	bl	800e820 <GUI_BMP_DrawEx>
				f_close(&file);
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <RFID_Reader+0xf8>)
 8000cee:	f005 ffcd 	bl	8006c8c <f_close>
			}
		}

		HAL_Delay(500);
 8000cf2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cf6:	f001 fb95 	bl	8002424 <HAL_Delay>
		GUI_Exec();
 8000cfa:	f00c fe19 	bl	800d930 <GUI_Exec>
		ret = RFID_Card_Check_ID(CardID);
 8000cfe:	e7c1      	b.n	8000c84 <RFID_Reader+0x58>
 8000d00:	08012b80 	.word	0x08012b80
 8000d04:	20002bc8 	.word	0x20002bc8
 8000d08:	200054b9 	.word	0x200054b9
 8000d0c:	200054b4 	.word	0x200054b4
 8000d10:	20005460 	.word	0x20005460
 8000d14:	20005474 	.word	0x20005474
 8000d18:	20005488 	.word	0x20005488
 8000d1c:	2000544c 	.word	0x2000544c
 8000d20:	2000549c 	.word	0x2000549c
 8000d24:	20003c08 	.word	0x20003c08
 8000d28:	200054b0 	.word	0x200054b0
 8000d2c:	08000bf5 	.word	0x08000bf5

08000d30 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3a:	4804      	ldr	r0, [pc, #16]	; (8000d4c <SELECT+0x1c>)
 8000d3c:	f001 fe2c 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d40:	2001      	movs	r0, #1
 8000d42:	f001 fb6f 	bl	8002424 <HAL_Delay>
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40020400 	.word	0x40020400

08000d50 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5a:	4804      	ldr	r0, [pc, #16]	; (8000d6c <DESELECT+0x1c>)
 8000d5c:	f001 fe1c 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d60:	2001      	movs	r0, #1
 8000d62:	f001 fb5f 	bl	8002424 <HAL_Delay>
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40020400 	.word	0x40020400

08000d70 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d7a:	bf00      	nop
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <SPI_TxByte+0x30>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d1f8      	bne.n	8000d7c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000d8a:	1df9      	adds	r1, r7, #7
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4803      	ldr	r0, [pc, #12]	; (8000da0 <SPI_TxByte+0x30>)
 8000d92:	f002 faff 	bl	8003394 <HAL_SPI_Transmit>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200054c4 	.word	0x200054c4

08000da4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000db0:	bf00      	nop
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <SPI_TxBuffer+0x30>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d1f8      	bne.n	8000db2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000dc0:	887a      	ldrh	r2, [r7, #2]
 8000dc2:	2364      	movs	r3, #100	; 0x64
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <SPI_TxBuffer+0x30>)
 8000dc8:	f002 fae4 	bl	8003394 <HAL_SPI_Transmit>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200054c4 	.word	0x200054c4

08000dd8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000dde:	23ff      	movs	r3, #255	; 0xff
 8000de0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000de2:	bf00      	nop
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <SPI_RxByte+0x34>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d1f8      	bne.n	8000de4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000df2:	1dba      	adds	r2, r7, #6
 8000df4:	1df9      	adds	r1, r7, #7
 8000df6:	2364      	movs	r3, #100	; 0x64
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <SPI_RxByte+0x34>)
 8000dfe:	f002 fbfd 	bl	80035fc <HAL_SPI_TransmitReceive>

	return data;
 8000e02:	79bb      	ldrb	r3, [r7, #6]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200054c4 	.word	0x200054c4

08000e10 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000e18:	f7ff ffde 	bl	8000dd8 <SPI_RxByte>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	701a      	strb	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <SD_ReadyWait+0x30>)
 8000e34:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e38:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000e3a:	f7ff ffcd 	bl	8000dd8 <SPI_RxByte>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2bff      	cmp	r3, #255	; 0xff
 8000e46:	d003      	beq.n	8000e50 <SD_ReadyWait+0x24>
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SD_ReadyWait+0x30>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1f4      	bne.n	8000e3a <SD_ReadyWait+0xe>

	return res;
 8000e50:	79fb      	ldrb	r3, [r7, #7]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200054c0 	.word	0x200054c0

08000e60 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000e66:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e6a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000e6c:	f7ff ff70 	bl	8000d50 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	e005      	b.n	8000e82 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000e76:	20ff      	movs	r0, #255	; 0xff
 8000e78:	f7ff ff7a 	bl	8000d70 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	2b09      	cmp	r3, #9
 8000e86:	ddf6      	ble.n	8000e76 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000e88:	f7ff ff52 	bl	8000d30 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000e8c:	2340      	movs	r3, #64	; 0x40
 8000e8e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000ea0:	2395      	movs	r3, #149	; 0x95
 8000ea2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2106      	movs	r1, #6
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff7b 	bl	8000da4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000eae:	e002      	b.n	8000eb6 <SD_PowerOn+0x56>
	{
		cnt--;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000eb6:	f7ff ff8f 	bl	8000dd8 <SPI_RxByte>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d002      	beq.n	8000ec6 <SD_PowerOn+0x66>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f4      	bne.n	8000eb0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000ec6:	f7ff ff43 	bl	8000d50 <DESELECT>
	SPI_TxByte(0XFF);
 8000eca:	20ff      	movs	r0, #255	; 0xff
 8000ecc:	f7ff ff50 	bl	8000d70 <SPI_TxByte>

	PowerFlag = 1;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <SD_PowerOn+0x80>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200029a9 	.word	0x200029a9

08000ee4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <SD_PowerOff+0x14>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	200029a9 	.word	0x200029a9

08000efc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <SD_CheckPower+0x14>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	200029a9 	.word	0x200029a9

08000f14 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <SD_RxDataBlock+0x58>)
 8000f20:	22c8      	movs	r2, #200	; 0xc8
 8000f22:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000f24:	f7ff ff58 	bl	8000dd8 <SPI_RxByte>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	2bff      	cmp	r3, #255	; 0xff
 8000f30:	d103      	bne.n	8000f3a <SD_RxDataBlock+0x26>
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <SD_RxDataBlock+0x58>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f4      	bne.n	8000f24 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	2bfe      	cmp	r3, #254	; 0xfe
 8000f3e:	d001      	beq.n	8000f44 <SD_RxDataBlock+0x30>
 8000f40:	2300      	movs	r3, #0
 8000f42:	e00f      	b.n	8000f64 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff60 	bl	8000e10 <SPI_RxBytePtr>
	} while(len--);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	1e5a      	subs	r2, r3, #1
 8000f54:	603a      	str	r2, [r7, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f4      	bne.n	8000f44 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000f5a:	f7ff ff3d 	bl	8000dd8 <SPI_RxByte>
	SPI_RxByte();
 8000f5e:	f7ff ff3b 	bl	8000dd8 <SPI_RxByte>

	return TRUE;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200054c2 	.word	0x200054c2

08000f70 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000f80:	f7ff ff54 	bl	8000e2c <SD_ReadyWait>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2bff      	cmp	r3, #255	; 0xff
 8000f88:	d001      	beq.n	8000f8e <SD_TxDataBlock+0x1e>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e02f      	b.n	8000fee <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000f8e:	78fb      	ldrb	r3, [r7, #3]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff feed 	bl	8000d70 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000f96:	78fb      	ldrb	r3, [r7, #3]
 8000f98:	2bfd      	cmp	r3, #253	; 0xfd
 8000f9a:	d020      	beq.n	8000fde <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff feff 	bl	8000da4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000fa6:	f7ff ff17 	bl	8000dd8 <SPI_RxByte>
		SPI_RxByte();
 8000faa:	f7ff ff15 	bl	8000dd8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000fae:	e00b      	b.n	8000fc8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000fb0:	f7ff ff12 	bl	8000dd8 <SPI_RxByte>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	f003 031f 	and.w	r3, r3, #31
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	d006      	beq.n	8000fd0 <SD_TxDataBlock+0x60>
			i++;
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000fc8:	7bbb      	ldrb	r3, [r7, #14]
 8000fca:	2b40      	cmp	r3, #64	; 0x40
 8000fcc:	d9f0      	bls.n	8000fb0 <SD_TxDataBlock+0x40>
 8000fce:	e000      	b.n	8000fd2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000fd0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ff00 	bl	8000dd8 <SPI_RxByte>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0fa      	beq.n	8000fd4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	f003 031f 	and.w	r3, r3, #31
 8000fe4:	2b05      	cmp	r3, #5
 8000fe6:	d101      	bne.n	8000fec <SD_TxDataBlock+0x7c>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <SD_TxDataBlock+0x7e>

	return FALSE;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	6039      	str	r1, [r7, #0]
 8001000:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001002:	f7ff ff13 	bl	8000e2c <SD_ReadyWait>
 8001006:	4603      	mov	r3, r0
 8001008:	2bff      	cmp	r3, #255	; 0xff
 800100a:	d001      	beq.n	8001010 <SD_SendCmd+0x1a>
 800100c:	23ff      	movs	r3, #255	; 0xff
 800100e:	e042      	b.n	8001096 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff feac 	bl	8000d70 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	0e1b      	lsrs	r3, r3, #24
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fea6 	bl	8000d70 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	0c1b      	lsrs	r3, r3, #16
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fea0 	bl	8000d70 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	0a1b      	lsrs	r3, r3, #8
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fe9a 	bl	8000d70 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fe95 	bl	8000d70 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b40      	cmp	r3, #64	; 0x40
 800104a:	d102      	bne.n	8001052 <SD_SendCmd+0x5c>
 800104c:	2395      	movs	r3, #149	; 0x95
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	e007      	b.n	8001062 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b48      	cmp	r3, #72	; 0x48
 8001056:	d102      	bne.n	800105e <SD_SendCmd+0x68>
 8001058:	2387      	movs	r3, #135	; 0x87
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	e001      	b.n	8001062 <SD_SendCmd+0x6c>
	else crc = 1;
 800105e:	2301      	movs	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fe83 	bl	8000d70 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b4c      	cmp	r3, #76	; 0x4c
 800106e:	d101      	bne.n	8001074 <SD_SendCmd+0x7e>
 8001070:	f7ff feb2 	bl	8000dd8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001074:	230a      	movs	r3, #10
 8001076:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001078:	f7ff feae 	bl	8000dd8 <SPI_RxByte>
 800107c:	4603      	mov	r3, r0
 800107e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001080:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001084:	2b00      	cmp	r3, #0
 8001086:	da05      	bge.n	8001094 <SD_SendCmd+0x9e>
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	3b01      	subs	r3, #1
 800108c:	73bb      	strb	r3, [r7, #14]
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f1      	bne.n	8001078 <SD_SendCmd+0x82>

	return res;
 8001094:	7b7b      	ldrb	r3, [r7, #13]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SD_disk_initialize+0x14>
 80010b0:	2301      	movs	r3, #1
 80010b2:	e0d1      	b.n	8001258 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80010b4:	4b6a      	ldr	r3, [pc, #424]	; (8001260 <SD_disk_initialize+0x1c0>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <SD_disk_initialize+0x2a>
 80010c2:	4b67      	ldr	r3, [pc, #412]	; (8001260 <SD_disk_initialize+0x1c0>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	e0c6      	b.n	8001258 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80010ca:	f7ff fec9 	bl	8000e60 <SD_PowerOn>

	/* slave select */
	SELECT();
 80010ce:	f7ff fe2f 	bl	8000d30 <SELECT>

	/* check disk type */
	type = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80010d6:	2100      	movs	r1, #0
 80010d8:	2040      	movs	r0, #64	; 0x40
 80010da:	f7ff ff8c 	bl	8000ff6 <SD_SendCmd>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	f040 80a1 	bne.w	8001228 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80010e6:	4b5f      	ldr	r3, [pc, #380]	; (8001264 <SD_disk_initialize+0x1c4>)
 80010e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ec:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80010ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80010f2:	2048      	movs	r0, #72	; 0x48
 80010f4:	f7ff ff7f 	bl	8000ff6 <SD_SendCmd>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d155      	bne.n	80011aa <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80010fe:	2300      	movs	r3, #0
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	e00c      	b.n	800111e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001104:	7bfc      	ldrb	r4, [r7, #15]
 8001106:	f7ff fe67 	bl	8000dd8 <SPI_RxByte>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4423      	add	r3, r4
 8001114:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	3301      	adds	r3, #1
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d9ef      	bls.n	8001104 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001124:	7abb      	ldrb	r3, [r7, #10]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d17e      	bne.n	8001228 <SD_disk_initialize+0x188>
 800112a:	7afb      	ldrb	r3, [r7, #11]
 800112c:	2baa      	cmp	r3, #170	; 0xaa
 800112e:	d17b      	bne.n	8001228 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001130:	2100      	movs	r1, #0
 8001132:	2077      	movs	r0, #119	; 0x77
 8001134:	f7ff ff5f 	bl	8000ff6 <SD_SendCmd>
 8001138:	4603      	mov	r3, r0
 800113a:	2b01      	cmp	r3, #1
 800113c:	d807      	bhi.n	800114e <SD_disk_initialize+0xae>
 800113e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001142:	2069      	movs	r0, #105	; 0x69
 8001144:	f7ff ff57 	bl	8000ff6 <SD_SendCmd>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d004      	beq.n	8001158 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800114e:	4b45      	ldr	r3, [pc, #276]	; (8001264 <SD_disk_initialize+0x1c4>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1ec      	bne.n	8001130 <SD_disk_initialize+0x90>
 8001156:	e000      	b.n	800115a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001158:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800115a:	4b42      	ldr	r3, [pc, #264]	; (8001264 <SD_disk_initialize+0x1c4>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d062      	beq.n	8001228 <SD_disk_initialize+0x188>
 8001162:	2100      	movs	r1, #0
 8001164:	207a      	movs	r0, #122	; 0x7a
 8001166:	f7ff ff46 	bl	8000ff6 <SD_SendCmd>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d15b      	bne.n	8001228 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e00c      	b.n	8001190 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001176:	7bfc      	ldrb	r4, [r7, #15]
 8001178:	f7ff fe2e 	bl	8000dd8 <SPI_RxByte>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4423      	add	r3, r4
 8001186:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	3301      	adds	r3, #1
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	2b03      	cmp	r3, #3
 8001194:	d9ef      	bls.n	8001176 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001196:	7a3b      	ldrb	r3, [r7, #8]
 8001198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <SD_disk_initialize+0x104>
 80011a0:	230c      	movs	r3, #12
 80011a2:	e000      	b.n	80011a6 <SD_disk_initialize+0x106>
 80011a4:	2304      	movs	r3, #4
 80011a6:	73bb      	strb	r3, [r7, #14]
 80011a8:	e03e      	b.n	8001228 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80011aa:	2100      	movs	r1, #0
 80011ac:	2077      	movs	r0, #119	; 0x77
 80011ae:	f7ff ff22 	bl	8000ff6 <SD_SendCmd>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d808      	bhi.n	80011ca <SD_disk_initialize+0x12a>
 80011b8:	2100      	movs	r1, #0
 80011ba:	2069      	movs	r0, #105	; 0x69
 80011bc:	f7ff ff1b 	bl	8000ff6 <SD_SendCmd>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d801      	bhi.n	80011ca <SD_disk_initialize+0x12a>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e000      	b.n	80011cc <SD_disk_initialize+0x12c>
 80011ca:	2301      	movs	r3, #1
 80011cc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d10e      	bne.n	80011f2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80011d4:	2100      	movs	r1, #0
 80011d6:	2077      	movs	r0, #119	; 0x77
 80011d8:	f7ff ff0d 	bl	8000ff6 <SD_SendCmd>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d80e      	bhi.n	8001200 <SD_disk_initialize+0x160>
 80011e2:	2100      	movs	r1, #0
 80011e4:	2069      	movs	r0, #105	; 0x69
 80011e6:	f7ff ff06 	bl	8000ff6 <SD_SendCmd>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d107      	bne.n	8001200 <SD_disk_initialize+0x160>
 80011f0:	e00c      	b.n	800120c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80011f2:	2100      	movs	r1, #0
 80011f4:	2041      	movs	r0, #65	; 0x41
 80011f6:	f7ff fefe 	bl	8000ff6 <SD_SendCmd>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <SD_disk_initialize+0x1c4>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1e2      	bne.n	80011ce <SD_disk_initialize+0x12e>
 8001208:	e000      	b.n	800120c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800120a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <SD_disk_initialize+0x1c4>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d007      	beq.n	8001224 <SD_disk_initialize+0x184>
 8001214:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001218:	2050      	movs	r0, #80	; 0x50
 800121a:	f7ff feec 	bl	8000ff6 <SD_SendCmd>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SD_disk_initialize+0x188>
 8001224:	2300      	movs	r3, #0
 8001226:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <SD_disk_initialize+0x1c8>)
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800122e:	f7ff fd8f 	bl	8000d50 <DESELECT>
	SPI_RxByte();
 8001232:	f7ff fdd1 	bl	8000dd8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <SD_disk_initialize+0x1c0>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f023 0301 	bic.w	r3, r3, #1
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <SD_disk_initialize+0x1c0>)
 800124a:	701a      	strb	r2, [r3, #0]
 800124c:	e001      	b.n	8001252 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800124e:	f7ff fe49 	bl	8000ee4 <SD_PowerOff>
	}

	return Stat;
 8001252:	4b03      	ldr	r3, [pc, #12]	; (8001260 <SD_disk_initialize+0x1c0>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b2db      	uxtb	r3, r3
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	20000000 	.word	0x20000000
 8001264:	200054c2 	.word	0x200054c2
 8001268:	200029a8 	.word	0x200029a8

0800126c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SD_disk_status+0x14>
 800127c:	2301      	movs	r3, #1
 800127e:	e002      	b.n	8001286 <SD_disk_status+0x1a>
	return Stat;
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <SD_disk_status+0x28>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b2db      	uxtb	r3, r3
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000000 	.word	0x20000000

08001298 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	4603      	mov	r3, r0
 80012a6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <SD_disk_read+0x1c>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <SD_disk_read+0x20>
 80012b4:	2304      	movs	r3, #4
 80012b6:	e051      	b.n	800135c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012b8:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <SD_disk_read+0xcc>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SD_disk_read+0x32>
 80012c6:	2303      	movs	r3, #3
 80012c8:	e048      	b.n	800135c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80012ca:	4b27      	ldr	r3, [pc, #156]	; (8001368 <SD_disk_read+0xd0>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <SD_disk_read+0x44>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	025b      	lsls	r3, r3, #9
 80012da:	607b      	str	r3, [r7, #4]

	SELECT();
 80012dc:	f7ff fd28 	bl	8000d30 <SELECT>

	if (count == 1)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d111      	bne.n	800130a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	2051      	movs	r0, #81	; 0x51
 80012ea:	f7ff fe84 	bl	8000ff6 <SD_SendCmd>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d129      	bne.n	8001348 <SD_disk_read+0xb0>
 80012f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f8:	68b8      	ldr	r0, [r7, #8]
 80012fa:	f7ff fe0b 	bl	8000f14 <SD_RxDataBlock>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d021      	beq.n	8001348 <SD_disk_read+0xb0>
 8001304:	2300      	movs	r3, #0
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	e01e      	b.n	8001348 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	2052      	movs	r0, #82	; 0x52
 800130e:	f7ff fe72 	bl	8000ff6 <SD_SendCmd>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d117      	bne.n	8001348 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800131c:	68b8      	ldr	r0, [r7, #8]
 800131e:	f7ff fdf9 	bl	8000f14 <SD_RxDataBlock>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00a      	beq.n	800133e <SD_disk_read+0xa6>
				buff += 512;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800132e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	3b01      	subs	r3, #1
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1ed      	bne.n	8001318 <SD_disk_read+0x80>
 800133c:	e000      	b.n	8001340 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800133e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001340:	2100      	movs	r1, #0
 8001342:	204c      	movs	r0, #76	; 0x4c
 8001344:	f7ff fe57 	bl	8000ff6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001348:	f7ff fd02 	bl	8000d50 <DESELECT>
	SPI_RxByte();
 800134c:	f7ff fd44 	bl	8000dd8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	bf14      	ite	ne
 8001356:	2301      	movne	r3, #1
 8001358:	2300      	moveq	r3, #0
 800135a:	b2db      	uxtb	r3, r3
}
 800135c:	4618      	mov	r0, r3
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000000 	.word	0x20000000
 8001368:	200029a8 	.word	0x200029a8

0800136c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <SD_disk_write+0x1c>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <SD_disk_write+0x20>
 8001388:	2304      	movs	r3, #4
 800138a:	e06b      	b.n	8001464 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800138c:	4b37      	ldr	r3, [pc, #220]	; (800146c <SD_disk_write+0x100>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SD_disk_write+0x32>
 800139a:	2303      	movs	r3, #3
 800139c:	e062      	b.n	8001464 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800139e:	4b33      	ldr	r3, [pc, #204]	; (800146c <SD_disk_write+0x100>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SD_disk_write+0x44>
 80013ac:	2302      	movs	r3, #2
 80013ae:	e059      	b.n	8001464 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80013b0:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <SD_disk_write+0x104>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <SD_disk_write+0x56>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	025b      	lsls	r3, r3, #9
 80013c0:	607b      	str	r3, [r7, #4]

	SELECT();
 80013c2:	f7ff fcb5 	bl	8000d30 <SELECT>

	if (count == 1)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d110      	bne.n	80013ee <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	2058      	movs	r0, #88	; 0x58
 80013d0:	f7ff fe11 	bl	8000ff6 <SD_SendCmd>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d13a      	bne.n	8001450 <SD_disk_write+0xe4>
 80013da:	21fe      	movs	r1, #254	; 0xfe
 80013dc:	68b8      	ldr	r0, [r7, #8]
 80013de:	f7ff fdc7 	bl	8000f70 <SD_TxDataBlock>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d033      	beq.n	8001450 <SD_disk_write+0xe4>
			count = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	e030      	b.n	8001450 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80013ee:	4b20      	ldr	r3, [pc, #128]	; (8001470 <SD_disk_write+0x104>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d007      	beq.n	800140a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80013fa:	2100      	movs	r1, #0
 80013fc:	2077      	movs	r0, #119	; 0x77
 80013fe:	f7ff fdfa 	bl	8000ff6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001402:	6839      	ldr	r1, [r7, #0]
 8001404:	2057      	movs	r0, #87	; 0x57
 8001406:	f7ff fdf6 	bl	8000ff6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	2059      	movs	r0, #89	; 0x59
 800140e:	f7ff fdf2 	bl	8000ff6 <SD_SendCmd>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d11b      	bne.n	8001450 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001418:	21fc      	movs	r1, #252	; 0xfc
 800141a:	68b8      	ldr	r0, [r7, #8]
 800141c:	f7ff fda8 	bl	8000f70 <SD_TxDataBlock>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00a      	beq.n	800143c <SD_disk_write+0xd0>
				buff += 512;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800142c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	3b01      	subs	r3, #1
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1ee      	bne.n	8001418 <SD_disk_write+0xac>
 800143a:	e000      	b.n	800143e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800143c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800143e:	21fd      	movs	r1, #253	; 0xfd
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff fd95 	bl	8000f70 <SD_TxDataBlock>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <SD_disk_write+0xe4>
			{
				count = 1;
 800144c:	2301      	movs	r3, #1
 800144e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001450:	f7ff fc7e 	bl	8000d50 <DESELECT>
	SPI_RxByte();
 8001454:	f7ff fcc0 	bl	8000dd8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	bf14      	ite	ne
 800145e:	2301      	movne	r3, #1
 8001460:	2300      	moveq	r3, #0
 8001462:	b2db      	uxtb	r3, r3
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000000 	.word	0x20000000
 8001470:	200029a8 	.word	0x200029a8

08001474 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b08b      	sub	sp, #44	; 0x2c
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	603a      	str	r2, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
 8001480:	460b      	mov	r3, r1
 8001482:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SD_disk_ioctl+0x1e>
 800148e:	2304      	movs	r3, #4
 8001490:	e113      	b.n	80016ba <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001498:	79bb      	ldrb	r3, [r7, #6]
 800149a:	2b05      	cmp	r3, #5
 800149c:	d121      	bne.n	80014e2 <SD_disk_ioctl+0x6e>
	{
		switch (*ptr)
 800149e:	6a3b      	ldr	r3, [r7, #32]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d009      	beq.n	80014ba <SD_disk_ioctl+0x46>
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d00d      	beq.n	80014c6 <SD_disk_ioctl+0x52>
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d115      	bne.n	80014da <SD_disk_ioctl+0x66>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80014ae:	f7ff fd19 	bl	8000ee4 <SD_PowerOff>
			res = RES_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014b8:	e0fd      	b.n	80016b6 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80014ba:	f7ff fcd1 	bl	8000e60 <SD_PowerOn>
			res = RES_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014c4:	e0f7      	b.n	80016b6 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	1c5c      	adds	r4, r3, #1
 80014ca:	f7ff fd17 	bl	8000efc <SD_CheckPower>
 80014ce:	4603      	mov	r3, r0
 80014d0:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80014d2:	2300      	movs	r3, #0
 80014d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014d8:	e0ed      	b.n	80016b6 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80014da:	2304      	movs	r3, #4
 80014dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014e0:	e0e9      	b.n	80016b6 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014e2:	4b78      	ldr	r3, [pc, #480]	; (80016c4 <SD_disk_ioctl+0x250>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SD_disk_ioctl+0x80>
 80014f0:	2303      	movs	r3, #3
 80014f2:	e0e2      	b.n	80016ba <SD_disk_ioctl+0x246>

		SELECT();
 80014f4:	f7ff fc1c 	bl	8000d30 <SELECT>

		switch (ctrl)
 80014f8:	79bb      	ldrb	r3, [r7, #6]
 80014fa:	2b0d      	cmp	r3, #13
 80014fc:	f200 80cc 	bhi.w	8001698 <SD_disk_ioctl+0x224>
 8001500:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <SD_disk_ioctl+0x94>)
 8001502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001506:	bf00      	nop
 8001508:	08001603 	.word	0x08001603
 800150c:	08001541 	.word	0x08001541
 8001510:	080015f3 	.word	0x080015f3
 8001514:	08001699 	.word	0x08001699
 8001518:	08001699 	.word	0x08001699
 800151c:	08001699 	.word	0x08001699
 8001520:	08001699 	.word	0x08001699
 8001524:	08001699 	.word	0x08001699
 8001528:	08001699 	.word	0x08001699
 800152c:	08001699 	.word	0x08001699
 8001530:	08001699 	.word	0x08001699
 8001534:	08001615 	.word	0x08001615
 8001538:	08001639 	.word	0x08001639
 800153c:	0800165d 	.word	0x0800165d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001540:	2100      	movs	r1, #0
 8001542:	2049      	movs	r0, #73	; 0x49
 8001544:	f7ff fd57 	bl	8000ff6 <SD_SendCmd>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	f040 80a8 	bne.w	80016a0 <SD_disk_ioctl+0x22c>
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2110      	movs	r1, #16
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fcdc 	bl	8000f14 <SD_RxDataBlock>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 809e 	beq.w	80016a0 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001564:	7b3b      	ldrb	r3, [r7, #12]
 8001566:	099b      	lsrs	r3, r3, #6
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b01      	cmp	r3, #1
 800156c:	d10e      	bne.n	800158c <SD_disk_ioctl+0x118>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800156e:	7d7b      	ldrb	r3, [r7, #21]
 8001570:	b29a      	uxth	r2, r3
 8001572:	7d3b      	ldrb	r3, [r7, #20]
 8001574:	b29b      	uxth	r3, r3
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b29b      	uxth	r3, r3
 800157a:	4413      	add	r3, r2
 800157c:	b29b      	uxth	r3, r3
 800157e:	3301      	adds	r3, #1
 8001580:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001582:	8bfb      	ldrh	r3, [r7, #30]
 8001584:	029a      	lsls	r2, r3, #10
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e02e      	b.n	80015ea <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800158c:	7c7b      	ldrb	r3, [r7, #17]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	b2da      	uxtb	r2, r3
 8001594:	7dbb      	ldrb	r3, [r7, #22]
 8001596:	09db      	lsrs	r3, r3, #7
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4413      	add	r3, r2
 800159c:	b2da      	uxtb	r2, r3
 800159e:	7d7b      	ldrb	r3, [r7, #21]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f003 0306 	and.w	r3, r3, #6
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	3302      	adds	r3, #2
 80015b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80015b4:	7d3b      	ldrb	r3, [r7, #20]
 80015b6:	099b      	lsrs	r3, r3, #6
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	7cfb      	ldrb	r3, [r7, #19]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	4413      	add	r3, r2
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	7cbb      	ldrb	r3, [r7, #18]
 80015ca:	029b      	lsls	r3, r3, #10
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4413      	add	r3, r2
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	3301      	adds	r3, #1
 80015da:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80015dc:	8bfa      	ldrh	r2, [r7, #30]
 80015de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015e2:	3b09      	subs	r3, #9
 80015e4:	409a      	lsls	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80015f0:	e056      	b.n	80016a0 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001600:	e055      	b.n	80016ae <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001602:	f7ff fc13 	bl	8000e2c <SD_ReadyWait>
 8001606:	4603      	mov	r3, r0
 8001608:	2bff      	cmp	r3, #255	; 0xff
 800160a:	d14b      	bne.n	80016a4 <SD_disk_ioctl+0x230>
 800160c:	2300      	movs	r3, #0
 800160e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001612:	e047      	b.n	80016a4 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001614:	2100      	movs	r1, #0
 8001616:	2049      	movs	r0, #73	; 0x49
 8001618:	f7ff fced 	bl	8000ff6 <SD_SendCmd>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d142      	bne.n	80016a8 <SD_disk_ioctl+0x234>
 8001622:	2110      	movs	r1, #16
 8001624:	6a38      	ldr	r0, [r7, #32]
 8001626:	f7ff fc75 	bl	8000f14 <SD_RxDataBlock>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d03b      	beq.n	80016a8 <SD_disk_ioctl+0x234>
 8001630:	2300      	movs	r3, #0
 8001632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001636:	e037      	b.n	80016a8 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001638:	2100      	movs	r1, #0
 800163a:	204a      	movs	r0, #74	; 0x4a
 800163c:	f7ff fcdb 	bl	8000ff6 <SD_SendCmd>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d132      	bne.n	80016ac <SD_disk_ioctl+0x238>
 8001646:	2110      	movs	r1, #16
 8001648:	6a38      	ldr	r0, [r7, #32]
 800164a:	f7ff fc63 	bl	8000f14 <SD_RxDataBlock>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d02b      	beq.n	80016ac <SD_disk_ioctl+0x238>
 8001654:	2300      	movs	r3, #0
 8001656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800165a:	e027      	b.n	80016ac <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800165c:	2100      	movs	r1, #0
 800165e:	207a      	movs	r0, #122	; 0x7a
 8001660:	f7ff fcc9 	bl	8000ff6 <SD_SendCmd>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d116      	bne.n	8001698 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800166a:	2300      	movs	r3, #0
 800166c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001670:	e00b      	b.n	800168a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001672:	6a3c      	ldr	r4, [r7, #32]
 8001674:	1c63      	adds	r3, r4, #1
 8001676:	623b      	str	r3, [r7, #32]
 8001678:	f7ff fbae 	bl	8000dd8 <SPI_RxByte>
 800167c:	4603      	mov	r3, r0
 800167e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001680:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001684:	3301      	adds	r3, #1
 8001686:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800168a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800168e:	2b03      	cmp	r3, #3
 8001690:	d9ef      	bls.n	8001672 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001698:	2304      	movs	r3, #4
 800169a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800169e:	e006      	b.n	80016ae <SD_disk_ioctl+0x23a>
			break;
 80016a0:	bf00      	nop
 80016a2:	e004      	b.n	80016ae <SD_disk_ioctl+0x23a>
			break;
 80016a4:	bf00      	nop
 80016a6:	e002      	b.n	80016ae <SD_disk_ioctl+0x23a>
			break;
 80016a8:	bf00      	nop
 80016aa:	e000      	b.n	80016ae <SD_disk_ioctl+0x23a>
			break;
 80016ac:	bf00      	nop
		}

		DESELECT();
 80016ae:	f7ff fb4f 	bl	8000d50 <DESELECT>
		SPI_RxByte();
 80016b2:	f7ff fb91 	bl	8000dd8 <SPI_RxByte>
	}

	return res;
 80016b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	372c      	adds	r7, #44	; 0x2c
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000000 	.word	0x20000000

080016c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016cc:	f000 fe68 	bl	80023a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d0:	f000 f814 	bl	80016fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d4:	f000 f932 	bl	800193c <MX_GPIO_Init>
  MX_CRC_Init();
 80016d8:	f000 f87a 	bl	80017d0 <MX_CRC_Init>
  MX_SPI1_Init();
 80016dc:	f000 f88c 	bl	80017f8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80016e0:	f000 f8c0 	bl	8001864 <MX_SPI2_Init>
  MX_SPI3_Init();
 80016e4:	f000 f8f4 	bl	80018d0 <MX_SPI3_Init>
  MX_FATFS_Init();
 80016e8:	f002 fc14 	bl	8003f14 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 80016ec:	f000 fc2b 	bl	8001f46 <MFRC522_Init>
  GUI_Init();
 80016f0:	f00c f814 	bl	800d71c <GUI_Init>
  RFID_Reader();
 80016f4:	f7ff fa9a 	bl	8000c2c <RFID_Reader>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <main+0x30>
	...

080016fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b094      	sub	sp, #80	; 0x50
 8001700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001702:	f107 0320 	add.w	r3, r7, #32
 8001706:	2230      	movs	r2, #48	; 0x30
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f010 fd74 	bl	80121f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <SystemClock_Config+0xcc>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	4a27      	ldr	r2, [pc, #156]	; (80017c8 <SystemClock_Config+0xcc>)
 800172a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172e:	6413      	str	r3, [r2, #64]	; 0x40
 8001730:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <SystemClock_Config+0xcc>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <SystemClock_Config+0xd0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <SystemClock_Config+0xd0>)
 8001746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <SystemClock_Config+0xd0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001758:	2301      	movs	r3, #1
 800175a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800175c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001762:	2302      	movs	r3, #2
 8001764:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001766:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800176a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800176c:	2304      	movs	r3, #4
 800176e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001770:	23a8      	movs	r3, #168	; 0xa8
 8001772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001774:	2302      	movs	r3, #2
 8001776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001778:	2304      	movs	r3, #4
 800177a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177c:	f107 0320 	add.w	r3, r7, #32
 8001780:	4618      	mov	r0, r3
 8001782:	f001 f923 	bl	80029cc <HAL_RCC_OscConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800178c:	f000 f982 	bl	8001a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001790:	230f      	movs	r3, #15
 8001792:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001794:	2302      	movs	r3, #2
 8001796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800179c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	2105      	movs	r1, #5
 80017ae:	4618      	mov	r0, r3
 80017b0:	f001 fb7c 	bl	8002eac <HAL_RCC_ClockConfig>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017ba:	f000 f96b 	bl	8001a94 <Error_Handler>
  }
}
 80017be:	bf00      	nop
 80017c0:	3750      	adds	r7, #80	; 0x50
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40007000 	.word	0x40007000

080017d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_CRC_Init+0x20>)
 80017d6:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <MX_CRC_Init+0x24>)
 80017d8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_CRC_Init+0x20>)
 80017dc:	f000 ff26 	bl	800262c <HAL_CRC_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80017e6:	f000 f955 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000551c 	.word	0x2000551c
 80017f4:	40023000 	.word	0x40023000

080017f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <MX_SPI1_Init+0x64>)
 80017fe:	4a18      	ldr	r2, [pc, #96]	; (8001860 <MX_SPI1_Init+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <MX_SPI1_Init+0x64>)
 8001804:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001808:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_SPI1_Init+0x64>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <MX_SPI1_Init+0x64>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_SPI1_Init+0x64>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <MX_SPI1_Init+0x64>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_SPI1_Init+0x64>)
 8001824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001828:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_SPI1_Init+0x64>)
 800182c:	2200      	movs	r2, #0
 800182e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <MX_SPI1_Init+0x64>)
 8001832:	2200      	movs	r2, #0
 8001834:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_SPI1_Init+0x64>)
 8001838:	2200      	movs	r2, #0
 800183a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <MX_SPI1_Init+0x64>)
 800183e:	2200      	movs	r2, #0
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_SPI1_Init+0x64>)
 8001844:	220a      	movs	r2, #10
 8001846:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <MX_SPI1_Init+0x64>)
 800184a:	f001 fd3f 	bl	80032cc <HAL_SPI_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001854:	f000 f91e 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2000557c 	.word	0x2000557c
 8001860:	40013000 	.word	0x40013000

08001864 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <MX_SPI2_Init+0x64>)
 800186a:	4a18      	ldr	r2, [pc, #96]	; (80018cc <MX_SPI2_Init+0x68>)
 800186c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <MX_SPI2_Init+0x64>)
 8001870:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001874:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_SPI2_Init+0x64>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <MX_SPI2_Init+0x64>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_SPI2_Init+0x64>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_SPI2_Init+0x64>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_SPI2_Init+0x64>)
 8001890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001894:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_SPI2_Init+0x64>)
 8001898:	2210      	movs	r2, #16
 800189a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <MX_SPI2_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_SPI2_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <MX_SPI2_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_SPI2_Init+0x64>)
 80018b0:	220a      	movs	r2, #10
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018b4:	4804      	ldr	r0, [pc, #16]	; (80018c8 <MX_SPI2_Init+0x64>)
 80018b6:	f001 fd09 	bl	80032cc <HAL_SPI_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018c0:	f000 f8e8 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200054c4 	.word	0x200054c4
 80018cc:	40003800 	.word	0x40003800

080018d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <MX_SPI3_Init+0x64>)
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <MX_SPI3_Init+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <MX_SPI3_Init+0x64>)
 80018dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_SPI3_Init+0x64>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_SPI3_Init+0x64>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_SPI3_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_SPI3_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_SPI3_Init+0x64>)
 80018fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001900:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <MX_SPI3_Init+0x64>)
 8001904:	2210      	movs	r2, #16
 8001906:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <MX_SPI3_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_SPI3_Init+0x64>)
 8001910:	2200      	movs	r2, #0
 8001912:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <MX_SPI3_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_SPI3_Init+0x64>)
 800191c:	220a      	movs	r2, #10
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <MX_SPI3_Init+0x64>)
 8001922:	f001 fcd3 	bl	80032cc <HAL_SPI_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800192c:	f000 f8b2 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20005524 	.word	0x20005524
 8001938:	40003c00 	.word	0x40003c00

0800193c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <MX_GPIO_Init+0x124>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a41      	ldr	r2, [pc, #260]	; (8001a60 <MX_GPIO_Init+0x124>)
 800195c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b3f      	ldr	r3, [pc, #252]	; (8001a60 <MX_GPIO_Init+0x124>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <MX_GPIO_Init+0x124>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a3a      	ldr	r2, [pc, #232]	; (8001a60 <MX_GPIO_Init+0x124>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b38      	ldr	r3, [pc, #224]	; (8001a60 <MX_GPIO_Init+0x124>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	4b34      	ldr	r3, [pc, #208]	; (8001a60 <MX_GPIO_Init+0x124>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a33      	ldr	r2, [pc, #204]	; (8001a60 <MX_GPIO_Init+0x124>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <MX_GPIO_Init+0x124>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <MX_GPIO_Init+0x124>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a2c      	ldr	r2, [pc, #176]	; (8001a60 <MX_GPIO_Init+0x124>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <MX_GPIO_Init+0x124>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <MX_GPIO_Init+0x124>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a25      	ldr	r2, [pc, #148]	; (8001a60 <MX_GPIO_Init+0x124>)
 80019cc:	f043 0308 	orr.w	r3, r3, #8
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <MX_GPIO_Init+0x124>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	210e      	movs	r1, #14
 80019e2:	4820      	ldr	r0, [pc, #128]	; (8001a64 <MX_GPIO_Init+0x128>)
 80019e4:	f000 ffd8 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80019e8:	2200      	movs	r2, #0
 80019ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ee:	481e      	ldr	r0, [pc, #120]	; (8001a68 <MX_GPIO_Init+0x12c>)
 80019f0:	f000 ffd2 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f24c 0101 	movw	r1, #49153	; 0xc001
 80019fa:	481c      	ldr	r0, [pc, #112]	; (8001a6c <MX_GPIO_Init+0x130>)
 80019fc:	f000 ffcc 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8001a00:	230e      	movs	r3, #14
 8001a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	4813      	ldr	r0, [pc, #76]	; (8001a64 <MX_GPIO_Init+0x128>)
 8001a18:	f000 fe24 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	480c      	ldr	r0, [pc, #48]	; (8001a68 <MX_GPIO_Init+0x12c>)
 8001a36:	f000 fe15 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
 8001a3a:	f24c 0301 	movw	r3, #49153	; 0xc001
 8001a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4619      	mov	r1, r3
 8001a52:	4806      	ldr	r0, [pc, #24]	; (8001a6c <MX_GPIO_Init+0x130>)
 8001a54:	f000 fe06 	bl	8002664 <HAL_GPIO_Init>

}
 8001a58:	bf00      	nop
 8001a5a:	3728      	adds	r7, #40	; 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	40020c00 	.word	0x40020c00

08001a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a82:	f000 fcaf 	bl	80023e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40010000 	.word	0x40010000

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <Error_Handler+0x6>

08001a9c <SPI1SendByte>:
#include "rc522.h"

extern SPI_HandleTypeDef hspi3;


uint8_t SPI1SendByte(uint8_t data) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8001aaa:	f107 0208 	add.w	r2, r7, #8
 8001aae:	f107 010c 	add.w	r1, r7, #12
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <SPI1SendByte+0x2c>)
 8001aba:	f001 fd9f 	bl	80035fc <HAL_SPI_TransmitReceive>
	return readValue[0];
 8001abe:	7a3b      	ldrb	r3, [r7, #8]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20005524 	.word	0x20005524

08001acc <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	71fb      	strb	r3, [r7, #7]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8001adc:	2200      	movs	r2, #0
 8001ade:	2101      	movs	r1, #1
 8001ae0:	4809      	ldr	r0, [pc, #36]	; (8001b08 <SPI1_WriteReg+0x3c>)
 8001ae2:	f000 ff59 	bl	8002998 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ffd7 	bl	8001a9c <SPI1SendByte>
	SPI1SendByte(value);
 8001aee:	79bb      	ldrb	r3, [r7, #6]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ffd3 	bl	8001a9c <SPI1SendByte>
	cs_set();
 8001af6:	2201      	movs	r2, #1
 8001af8:	2101      	movs	r1, #1
 8001afa:	4803      	ldr	r0, [pc, #12]	; (8001b08 <SPI1_WriteReg+0x3c>)
 8001afc:	f000 ff4c 	bl	8002998 <HAL_GPIO_WritePin>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40020c00 	.word	0x40020c00

08001b0c <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8001b16:	2200      	movs	r2, #0
 8001b18:	2101      	movs	r1, #1
 8001b1a:	480b      	ldr	r0, [pc, #44]	; (8001b48 <SPI1_ReadReg+0x3c>)
 8001b1c:	f000 ff3c 	bl	8002998 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ffba 	bl	8001a9c <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff ffb7 	bl	8001a9c <SPI1SendByte>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8001b32:	2201      	movs	r2, #1
 8001b34:	2101      	movs	r1, #1
 8001b36:	4804      	ldr	r0, [pc, #16]	; (8001b48 <SPI1_ReadReg+0x3c>)
 8001b38:	f000 ff2e 	bl	8002998 <HAL_GPIO_WritePin>
	return val;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40020c00 	.word	0x40020c00

08001b4c <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	460a      	mov	r2, r1
 8001b56:	71fb      	strb	r3, [r7, #7]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001b66:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8001b68:	79ba      	ldrb	r2, [r7, #6]
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ffac 	bl	8001acc <SPI1_WriteReg>
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	b25b      	sxtb	r3, r3
 8001b8c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001b90:	b25b      	sxtb	r3, r3
 8001b92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b96:	b25b      	sxtb	r3, r3
 8001b98:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ffb5 	bl	8001b0c <SPI1_ReadReg>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	73fb      	strb	r3, [r7, #15]
	return val;	
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	2026      	movs	r0, #38	; 0x26
 8001bbc:	f000 f849 	bl	8001c52 <MFRC522_Request>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d104      	bne.n	8001bd4 <MFRC522_Check+0x24>
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f935 	bl	8001e3a <MFRC522_Anticoll>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation 
 8001bd4:	f000 f9f8 	bl	8001fc8 <MFRC522_Halt>
	return status;
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	460a      	mov	r2, r1
 8001bec:	71fb      	strb	r3, [r7, #7]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ffc1 	bl	8001b7c <MFRC522_ReadRegister>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	79bb      	ldrb	r3, [r7, #6]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff9f 	bl	8001b4c <MFRC522_WriteRegister>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	460a      	mov	r2, r1
 8001c20:	71fb      	strb	r3, [r7, #7]
 8001c22:	4613      	mov	r3, r2
 8001c24:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ffa7 	bl	8001b7c <MFRC522_ReadRegister>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	b25a      	sxtb	r2, r3
 8001c32:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	b25b      	sxtb	r3, r3
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff81 	bl	8001b4c <MFRC522_WriteRegister>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af02      	add	r7, sp, #8
 8001c58:	4603      	mov	r3, r0
 8001c5a:	6039      	str	r1, [r7, #0]
 8001c5c:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8001c5e:	2107      	movs	r1, #7
 8001c60:	200d      	movs	r0, #13
 8001c62:	f7ff ff73 	bl	8001b4c <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	79fa      	ldrb	r2, [r7, #7]
 8001c6a:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2201      	movs	r2, #1
 8001c76:	6839      	ldr	r1, [r7, #0]
 8001c78:	200c      	movs	r0, #12
 8001c7a:	f000 f80f 	bl	8001c9c <MFRC522_ToCard>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d102      	bne.n	8001c8e <MFRC522_Request+0x3c>
 8001c88:	89bb      	ldrh	r3, [r7, #12]
 8001c8a:	2b10      	cmp	r3, #16
 8001c8c:	d001      	beq.n	8001c92 <MFRC522_Request+0x40>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	73fb      	strb	r3, [r7, #15]
	return status;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	73fb      	strb	r3, [r7, #15]
 8001caa:	4613      	mov	r3, r2
 8001cac:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	2b0c      	cmp	r3, #12
 8001cbe:	d007      	beq.n	8001cd0 <MFRC522_ToCard+0x34>
 8001cc0:	2b0e      	cmp	r3, #14
 8001cc2:	d000      	beq.n	8001cc6 <MFRC522_ToCard+0x2a>
			irqEn = 0x77;
			waitIRq = 0x30;
			break;
		}
		default:
		break;
 8001cc4:	e009      	b.n	8001cda <MFRC522_ToCard+0x3e>
			irqEn = 0x12;
 8001cc6:	2312      	movs	r3, #18
 8001cc8:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8001cca:	2310      	movs	r3, #16
 8001ccc:	757b      	strb	r3, [r7, #21]
			break;
 8001cce:	e004      	b.n	8001cda <MFRC522_ToCard+0x3e>
			irqEn = 0x77;
 8001cd0:	2377      	movs	r3, #119	; 0x77
 8001cd2:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8001cd4:	2330      	movs	r3, #48	; 0x30
 8001cd6:	757b      	strb	r3, [r7, #21]
			break;
 8001cd8:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8001cda:	7dbb      	ldrb	r3, [r7, #22]
 8001cdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	f7ff ff31 	bl	8001b4c <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8001cea:	2180      	movs	r1, #128	; 0x80
 8001cec:	2004      	movs	r0, #4
 8001cee:	f7ff ff92 	bl	8001c16 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001cf2:	2180      	movs	r1, #128	; 0x80
 8001cf4:	200a      	movs	r0, #10
 8001cf6:	f7ff ff74 	bl	8001be2 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f7ff ff25 	bl	8001b4c <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8001d02:	2300      	movs	r3, #0
 8001d04:	827b      	strh	r3, [r7, #18]
 8001d06:	e00a      	b.n	8001d1e <MFRC522_ToCard+0x82>
 8001d08:	8a7b      	ldrh	r3, [r7, #18]
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	2009      	movs	r0, #9
 8001d14:	f7ff ff1a 	bl	8001b4c <MFRC522_WriteRegister>
 8001d18:	8a7b      	ldrh	r3, [r7, #18]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	827b      	strh	r3, [r7, #18]
 8001d1e:	7bbb      	ldrb	r3, [r7, #14]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	8a7a      	ldrh	r2, [r7, #18]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d3ef      	bcc.n	8001d08 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f7ff ff0d 	bl	8001b4c <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	2b0c      	cmp	r3, #12
 8001d36:	d103      	bne.n	8001d40 <MFRC522_ToCard+0xa4>
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	200d      	movs	r0, #13
 8001d3c:	f7ff ff51 	bl	8001be2 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001d40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d44:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001d46:	2004      	movs	r0, #4
 8001d48:	f7ff ff18 	bl	8001b7c <MFRC522_ReadRegister>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	753b      	strb	r3, [r7, #20]
		i--;
 8001d50:	8a7b      	ldrh	r3, [r7, #18]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001d56:	8a7b      	ldrh	r3, [r7, #18]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00a      	beq.n	8001d72 <MFRC522_ToCard+0xd6>
 8001d5c:	7d3b      	ldrb	r3, [r7, #20]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <MFRC522_ToCard+0xd6>
 8001d66:	7d3a      	ldrb	r2, [r7, #20]
 8001d68:	7d7b      	ldrb	r3, [r7, #21]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0e9      	beq.n	8001d46 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8001d72:	2180      	movs	r1, #128	; 0x80
 8001d74:	200d      	movs	r0, #13
 8001d76:	f7ff ff4e 	bl	8001c16 <MFRC522_ClearBitMask>

	if (i != 0)  {
 8001d7a:	8a7b      	ldrh	r3, [r7, #18]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d057      	beq.n	8001e30 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001d80:	2006      	movs	r0, #6
 8001d82:	f7ff fefb 	bl	8001b7c <MFRC522_ReadRegister>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f003 031b 	and.w	r3, r3, #27
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d14d      	bne.n	8001e2c <MFRC522_ToCard+0x190>
			status = MI_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8001d94:	7d3a      	ldrb	r2, [r7, #20]
 8001d96:	7dbb      	ldrb	r3, [r7, #22]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MFRC522_ToCard+0x10c>
 8001da4:	2301      	movs	r3, #1
 8001da6:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d140      	bne.n	8001e30 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8001dae:	200a      	movs	r0, #10
 8001db0:	f7ff fee4 	bl	8001b7c <MFRC522_ReadRegister>
 8001db4:	4603      	mov	r3, r0
 8001db6:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8001db8:	200c      	movs	r0, #12
 8001dba:	f7ff fedf 	bl	8001b7c <MFRC522_ReadRegister>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8001dc6:	7c7b      	ldrb	r3, [r7, #17]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00b      	beq.n	8001de4 <MFRC522_ToCard+0x148>
 8001dcc:	7d3b      	ldrb	r3, [r7, #20]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	7c7b      	ldrb	r3, [r7, #17]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	4413      	add	r3, r2
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de0:	801a      	strh	r2, [r3, #0]
 8001de2:	e005      	b.n	8001df0 <MFRC522_ToCard+0x154>
 8001de4:	7d3b      	ldrb	r3, [r7, #20]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dee:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8001df0:	7d3b      	ldrb	r3, [r7, #20]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <MFRC522_ToCard+0x15e>
 8001df6:	2301      	movs	r3, #1
 8001df8:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8001dfa:	7d3b      	ldrb	r3, [r7, #20]
 8001dfc:	2b10      	cmp	r3, #16
 8001dfe:	d901      	bls.n	8001e04 <MFRC522_ToCard+0x168>
 8001e00:	2310      	movs	r3, #16
 8001e02:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8001e04:	2300      	movs	r3, #0
 8001e06:	827b      	strh	r3, [r7, #18]
 8001e08:	e00a      	b.n	8001e20 <MFRC522_ToCard+0x184>
 8001e0a:	8a7b      	ldrh	r3, [r7, #18]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	18d4      	adds	r4, r2, r3
 8001e10:	2009      	movs	r0, #9
 8001e12:	f7ff feb3 	bl	8001b7c <MFRC522_ReadRegister>
 8001e16:	4603      	mov	r3, r0
 8001e18:	7023      	strb	r3, [r4, #0]
 8001e1a:	8a7b      	ldrh	r3, [r7, #18]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	827b      	strh	r3, [r7, #18]
 8001e20:	7d3b      	ldrb	r3, [r7, #20]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	8a7a      	ldrh	r2, [r7, #18]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d3ef      	bcc.n	8001e0a <MFRC522_ToCard+0x16e>
 8001e2a:	e001      	b.n	8001e30 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	371c      	adds	r7, #28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd90      	pop	{r4, r7, pc}

08001e3a <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af02      	add	r7, sp, #8
 8001e40:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8001e46:	2100      	movs	r1, #0
 8001e48:	200d      	movs	r0, #13
 8001e4a:	f7ff fe7f 	bl	8001b4c <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2293      	movs	r2, #147	; 0x93
 8001e52:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3301      	adds	r3, #1
 8001e58:	2220      	movs	r2, #32
 8001e5a:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001e5c:	f107 030a 	add.w	r3, r7, #10
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2202      	movs	r2, #2
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	200c      	movs	r0, #12
 8001e6a:	f7ff ff17 	bl	8001c9c <MFRC522_ToCard>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d118      	bne.n	8001eaa <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73bb      	strb	r3, [r7, #14]
 8001e7c:	e009      	b.n	8001e92 <MFRC522_Anticoll+0x58>
 8001e7e:	7bbb      	ldrb	r3, [r7, #14]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	781a      	ldrb	r2, [r3, #0]
 8001e86:	7b7b      	ldrb	r3, [r7, #13]
 8001e88:	4053      	eors	r3, r2
 8001e8a:	737b      	strb	r3, [r7, #13]
 8001e8c:	7bbb      	ldrb	r3, [r7, #14]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	73bb      	strb	r3, [r7, #14]
 8001e92:	7bbb      	ldrb	r3, [r7, #14]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d9f2      	bls.n	8001e7e <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8001e98:	7bbb      	ldrb	r3, [r7, #14]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	7b7a      	ldrb	r2, [r7, #13]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d001      	beq.n	8001eaa <MFRC522_Anticoll+0x70>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
} 
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8001ec2:	2104      	movs	r1, #4
 8001ec4:	2005      	movs	r0, #5
 8001ec6:	f7ff fea6 	bl	8001c16 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 8001eca:	2180      	movs	r1, #128	; 0x80
 8001ecc:	200a      	movs	r0, #10
 8001ece:	f7ff fe88 	bl	8001be2 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	75fb      	strb	r3, [r7, #23]
 8001ed6:	e00a      	b.n	8001eee <MFRC522_CalculateCRC+0x3a>
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4413      	add	r3, r2
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	2009      	movs	r0, #9
 8001ee4:	f7ff fe32 	bl	8001b4c <MFRC522_WriteRegister>
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
 8001eea:	3301      	adds	r3, #1
 8001eec:	75fb      	strb	r3, [r7, #23]
 8001eee:	7dfa      	ldrb	r2, [r7, #23]
 8001ef0:	7afb      	ldrb	r3, [r7, #11]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d3f0      	bcc.n	8001ed8 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001ef6:	2103      	movs	r1, #3
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f7ff fe27 	bl	8001b4c <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 8001efe:	23ff      	movs	r3, #255	; 0xff
 8001f00:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001f02:	2005      	movs	r0, #5
 8001f04:	f7ff fe3a 	bl	8001b7c <MFRC522_ReadRegister>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	75bb      	strb	r3, [r7, #22]
		i--;
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <MFRC522_CalculateCRC+0x6e>
 8001f18:	7dbb      	ldrb	r3, [r7, #22]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0ef      	beq.n	8001f02 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001f22:	2022      	movs	r0, #34	; 0x22
 8001f24:	f7ff fe2a 	bl	8001b7c <MFRC522_ReadRegister>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	1c5c      	adds	r4, r3, #1
 8001f34:	2021      	movs	r0, #33	; 0x21
 8001f36:	f7ff fe21 	bl	8001b7c <MFRC522_ReadRegister>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	7023      	strb	r3, [r4, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	371c      	adds	r7, #28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd90      	pop	{r4, r7, pc}

08001f46 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 8001f46:	b580      	push	{r7, lr}
 8001f48:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8001f4a:	f000 f820 	bl	8001f8e <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8001f4e:	218d      	movs	r1, #141	; 0x8d
 8001f50:	202a      	movs	r0, #42	; 0x2a
 8001f52:	f7ff fdfb 	bl	8001b4c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001f56:	213e      	movs	r1, #62	; 0x3e
 8001f58:	202b      	movs	r0, #43	; 0x2b
 8001f5a:	f7ff fdf7 	bl	8001b4c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8001f5e:	211e      	movs	r1, #30
 8001f60:	202d      	movs	r0, #45	; 0x2d
 8001f62:	f7ff fdf3 	bl	8001b4c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8001f66:	2100      	movs	r1, #0
 8001f68:	202c      	movs	r0, #44	; 0x2c
 8001f6a:	f7ff fdef 	bl	8001b4c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 8001f6e:	2170      	movs	r1, #112	; 0x70
 8001f70:	2026      	movs	r0, #38	; 0x26
 8001f72:	f7ff fdeb 	bl	8001b4c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001f76:	2140      	movs	r1, #64	; 0x40
 8001f78:	2015      	movs	r0, #21
 8001f7a:	f7ff fde7 	bl	8001b4c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001f7e:	213d      	movs	r1, #61	; 0x3d
 8001f80:	2011      	movs	r0, #17
 8001f82:	f7ff fde3 	bl	8001b4c <MFRC522_WriteRegister>
	MFRC522_AntennaOn();											// Open the antenna
 8001f86:	f000 f80a 	bl	8001f9e <MFRC522_AntennaOn>
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001f92:	210f      	movs	r1, #15
 8001f94:	2001      	movs	r0, #1
 8001f96:	f7ff fdd9 	bl	8001b4c <MFRC522_WriteRegister>
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001fa4:	2014      	movs	r0, #20
 8001fa6:	f7ff fde9 	bl	8001b7c <MFRC522_ReadRegister>
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d103      	bne.n	8001fc0 <MFRC522_AntennaOn+0x22>
 8001fb8:	2103      	movs	r1, #3
 8001fba:	2014      	movs	r0, #20
 8001fbc:	f7ff fe11 	bl	8001be2 <MFRC522_SetBitMask>
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8001fce:	2350      	movs	r3, #80	; 0x50
 8001fd0:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001fd6:	463b      	mov	r3, r7
 8001fd8:	1c9a      	adds	r2, r3, #2
 8001fda:	463b      	mov	r3, r7
 8001fdc:	2102      	movs	r1, #2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff68 	bl	8001eb4 <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001fe4:	463a      	mov	r2, r7
 8001fe6:	4639      	mov	r1, r7
 8001fe8:	1dbb      	adds	r3, r7, #6
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	4613      	mov	r3, r2
 8001fee:	2204      	movs	r2, #4
 8001ff0:	200c      	movs	r0, #12
 8001ff2:	f7ff fe53 	bl	8001c9c <MFRC522_ToCard>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <HAL_MspInit+0x4c>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	4a0f      	ldr	r2, [pc, #60]	; (800204c <HAL_MspInit+0x4c>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002014:	6453      	str	r3, [r2, #68]	; 0x44
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <HAL_MspInit+0x4c>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	603b      	str	r3, [r7, #0]
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_MspInit+0x4c>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a08      	ldr	r2, [pc, #32]	; (800204c <HAL_MspInit+0x4c>)
 800202c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_MspInit+0x4c>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800

08002050 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0b      	ldr	r2, [pc, #44]	; (800208c <HAL_CRC_MspInit+0x3c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d10d      	bne.n	800207e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_CRC_MspInit+0x40>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a09      	ldr	r2, [pc, #36]	; (8002090 <HAL_CRC_MspInit+0x40>)
 800206c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <HAL_CRC_MspInit+0x40>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40023000 	.word	0x40023000
 8002090:	40023800 	.word	0x40023800

08002094 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08e      	sub	sp, #56	; 0x38
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a4c      	ldr	r2, [pc, #304]	; (80021e4 <HAL_SPI_MspInit+0x150>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d12c      	bne.n	8002110 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	623b      	str	r3, [r7, #32]
 80020ba:	4b4b      	ldr	r3, [pc, #300]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	4a4a      	ldr	r2, [pc, #296]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 80020c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020c4:	6453      	str	r3, [r2, #68]	; 0x44
 80020c6:	4b48      	ldr	r3, [pc, #288]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ce:	623b      	str	r3, [r7, #32]
 80020d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	4b44      	ldr	r3, [pc, #272]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a43      	ldr	r2, [pc, #268]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	61fb      	str	r3, [r7, #28]
 80020ec:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020ee:	23e0      	movs	r3, #224	; 0xe0
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fa:	2303      	movs	r3, #3
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020fe:	2305      	movs	r3, #5
 8002100:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002106:	4619      	mov	r1, r3
 8002108:	4838      	ldr	r0, [pc, #224]	; (80021ec <HAL_SPI_MspInit+0x158>)
 800210a:	f000 faab 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800210e:	e064      	b.n	80021da <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a36      	ldr	r2, [pc, #216]	; (80021f0 <HAL_SPI_MspInit+0x15c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d12d      	bne.n	8002176 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
 800211e:	4b32      	ldr	r3, [pc, #200]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a31      	ldr	r2, [pc, #196]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 8002124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b2f      	ldr	r3, [pc, #188]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a2a      	ldr	r2, [pc, #168]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002152:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002164:	2305      	movs	r3, #5
 8002166:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216c:	4619      	mov	r1, r3
 800216e:	4821      	ldr	r0, [pc, #132]	; (80021f4 <HAL_SPI_MspInit+0x160>)
 8002170:	f000 fa78 	bl	8002664 <HAL_GPIO_Init>
}
 8002174:	e031      	b.n	80021da <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <HAL_SPI_MspInit+0x164>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d12c      	bne.n	80021da <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 800218a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800218e:	6413      	str	r3, [r2, #64]	; 0x40
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	4a10      	ldr	r2, [pc, #64]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6313      	str	r3, [r2, #48]	; 0x30
 80021ac:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <HAL_SPI_MspInit+0x154>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c6:	2303      	movs	r3, #3
 80021c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021ca:	2306      	movs	r3, #6
 80021cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d2:	4619      	mov	r1, r3
 80021d4:	4809      	ldr	r0, [pc, #36]	; (80021fc <HAL_SPI_MspInit+0x168>)
 80021d6:	f000 fa45 	bl	8002664 <HAL_GPIO_Init>
}
 80021da:	bf00      	nop
 80021dc:	3738      	adds	r7, #56	; 0x38
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40013000 	.word	0x40013000
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40020000 	.word	0x40020000
 80021f0:	40003800 	.word	0x40003800
 80021f4:	40020400 	.word	0x40020400
 80021f8:	40003c00 	.word	0x40003c00
 80021fc:	40020800 	.word	0x40020800

08002200 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002210:	2200      	movs	r2, #0
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	2019      	movs	r0, #25
 8002216:	f000 f9df 	bl	80025d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800221a:	2019      	movs	r0, #25
 800221c:	f000 f9f8 	bl	8002610 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <HAL_InitTick+0xa4>)
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	4a1e      	ldr	r2, [pc, #120]	; (80022a4 <HAL_InitTick+0xa4>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6453      	str	r3, [r2, #68]	; 0x44
 8002230:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <HAL_InitTick+0xa4>)
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800223c:	f107 0210 	add.w	r2, r7, #16
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	4611      	mov	r1, r2
 8002246:	4618      	mov	r0, r3
 8002248:	f001 f80e 	bl	8003268 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800224c:	f000 fff8 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 8002250:	4603      	mov	r3, r0
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002258:	4a13      	ldr	r2, [pc, #76]	; (80022a8 <HAL_InitTick+0xa8>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0c9b      	lsrs	r3, r3, #18
 8002260:	3b01      	subs	r3, #1
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_InitTick+0xac>)
 8002266:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <HAL_InitTick+0xb0>)
 8002268:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <HAL_InitTick+0xac>)
 800226c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002270:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002272:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <HAL_InitTick+0xac>)
 8002274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002276:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <HAL_InitTick+0xac>)
 800227a:	2200      	movs	r2, #0
 800227c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_InitTick+0xac>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002284:	4809      	ldr	r0, [pc, #36]	; (80022ac <HAL_InitTick+0xac>)
 8002286:	f001 fc07 	bl	8003a98 <HAL_TIM_Base_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d104      	bne.n	800229a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002290:	4806      	ldr	r0, [pc, #24]	; (80022ac <HAL_InitTick+0xac>)
 8002292:	f001 fc36 	bl	8003b02 <HAL_TIM_Base_Start_IT>
 8002296:	4603      	mov	r3, r0
 8002298:	e000      	b.n	800229c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	3730      	adds	r7, #48	; 0x30
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40023800 	.word	0x40023800
 80022a8:	431bde83 	.word	0x431bde83
 80022ac:	200055d4 	.word	0x200055d4
 80022b0:	40010000 	.word	0x40010000

080022b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022b8:	e7fe      	b.n	80022b8 <NMI_Handler+0x4>

080022ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022be:	e7fe      	b.n	80022be <HardFault_Handler+0x4>

080022c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <MemManage_Handler+0x4>

080022c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <BusFault_Handler+0x4>

080022cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <UsageFault_Handler+0x4>

080022d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002312:	f001 fc1a 	bl	8003b4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200055d4 	.word	0x200055d4

08002320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <SystemInit+0x28>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	4a07      	ldr	r2, [pc, #28]	; (8002348 <SystemInit+0x28>)
 800232c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <SystemInit+0x28>)
 8002336:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800233a:	609a      	str	r2, [r3, #8]
#endif
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800234c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002384 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002350:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002352:	e003      	b.n	800235c <LoopCopyDataInit>

08002354 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002356:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002358:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800235a:	3104      	adds	r1, #4

0800235c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800235c:	480b      	ldr	r0, [pc, #44]	; (800238c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002360:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002362:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002364:	d3f6      	bcc.n	8002354 <CopyDataInit>
  ldr  r2, =_sbss
 8002366:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002368:	e002      	b.n	8002370 <LoopFillZerobss>

0800236a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800236a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800236c:	f842 3b04 	str.w	r3, [r2], #4

08002370 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002372:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002374:	d3f9      	bcc.n	800236a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002376:	f7ff ffd3 	bl	8002320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800237a:	f00f fef5 	bl	8012168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800237e:	f7ff f9a3 	bl	80016c8 <main>
  bx  lr    
 8002382:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002384:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002388:	08014e54 	.word	0x08014e54
  ldr  r0, =_sdata
 800238c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002390:	2000018c 	.word	0x2000018c
  ldr  r2, =_sbss
 8002394:	2000018c 	.word	0x2000018c
  ldr  r3, = _ebss
 8002398:	20007840 	.word	0x20007840

0800239c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800239c:	e7fe      	b.n	800239c <ADC_IRQHandler>
	...

080023a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_Init+0x40>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <HAL_Init+0x40>)
 80023aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_Init+0x40>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <HAL_Init+0x40>)
 80023b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <HAL_Init+0x40>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <HAL_Init+0x40>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c8:	2003      	movs	r0, #3
 80023ca:	f000 f8fa 	bl	80025c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ce:	2000      	movs	r0, #0
 80023d0:	f7ff ff16 	bl	8002200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d4:	f7ff fe14 	bl	8002000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023c00 	.word	0x40023c00

080023e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_IncTick+0x20>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_IncTick+0x24>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	4a04      	ldr	r2, [pc, #16]	; (8002408 <HAL_IncTick+0x24>)
 80023f6:	6013      	str	r3, [r2, #0]
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	2000000c 	.word	0x2000000c
 8002408:	20005614 	.word	0x20005614

0800240c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return uwTick;
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <HAL_GetTick+0x14>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20005614 	.word	0x20005614

08002424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800242c:	f7ff ffee 	bl	800240c <HAL_GetTick>
 8002430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243c:	d005      	beq.n	800244a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800243e:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_Delay+0x40>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4413      	add	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800244a:	bf00      	nop
 800244c:	f7ff ffde 	bl	800240c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	429a      	cmp	r2, r3
 800245a:	d8f7      	bhi.n	800244c <HAL_Delay+0x28>
  {
  }
}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	2000000c 	.word	0x2000000c

08002468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002484:	4013      	ands	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249a:	4a04      	ldr	r2, [pc, #16]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	60d3      	str	r3, [r2, #12]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <__NVIC_GetPriorityGrouping+0x18>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	f003 0307 	and.w	r3, r3, #7
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	db0b      	blt.n	80024f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	4907      	ldr	r1, [pc, #28]	; (8002504 <__NVIC_EnableIRQ+0x38>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2001      	movs	r0, #1
 80024ee:	fa00 f202 	lsl.w	r2, r0, r2
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000e100 	.word	0xe000e100

08002508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	2b00      	cmp	r3, #0
 800251a:	db0a      	blt.n	8002532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	490c      	ldr	r1, [pc, #48]	; (8002554 <__NVIC_SetPriority+0x4c>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	0112      	lsls	r2, r2, #4
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	440b      	add	r3, r1
 800252c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002530:	e00a      	b.n	8002548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4908      	ldr	r1, [pc, #32]	; (8002558 <__NVIC_SetPriority+0x50>)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	3b04      	subs	r3, #4
 8002540:	0112      	lsls	r2, r2, #4
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	440b      	add	r3, r1
 8002546:	761a      	strb	r2, [r3, #24]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000e100 	.word	0xe000e100
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f1c3 0307 	rsb	r3, r3, #7
 8002576:	2b04      	cmp	r3, #4
 8002578:	bf28      	it	cs
 800257a:	2304      	movcs	r3, #4
 800257c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3304      	adds	r3, #4
 8002582:	2b06      	cmp	r3, #6
 8002584:	d902      	bls.n	800258c <NVIC_EncodePriority+0x30>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3b03      	subs	r3, #3
 800258a:	e000      	b.n	800258e <NVIC_EncodePriority+0x32>
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	f04f 32ff 	mov.w	r2, #4294967295
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	401a      	ands	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a4:	f04f 31ff 	mov.w	r1, #4294967295
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	4313      	orrs	r3, r2
         );
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3724      	adds	r7, #36	; 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ff4c 	bl	8002468 <__NVIC_SetPriorityGrouping>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ea:	f7ff ff61 	bl	80024b0 <__NVIC_GetPriorityGrouping>
 80025ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	6978      	ldr	r0, [r7, #20]
 80025f6:	f7ff ffb1 	bl	800255c <NVIC_EncodePriority>
 80025fa:	4602      	mov	r2, r0
 80025fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002600:	4611      	mov	r1, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff80 	bl	8002508 <__NVIC_SetPriority>
}
 8002608:	bf00      	nop
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff ff54 	bl	80024cc <__NVIC_EnableIRQ>
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e00e      	b.n	800265c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	795b      	ldrb	r3, [r3, #5]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff fcfe 	bl	8002050 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	e16b      	b.n	8002958 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002680:	2201      	movs	r2, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	429a      	cmp	r2, r3
 800269a:	f040 815a 	bne.w	8002952 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d00b      	beq.n	80026be <HAL_GPIO_Init+0x5a>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d007      	beq.n	80026be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026b2:	2b11      	cmp	r3, #17
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b12      	cmp	r3, #18
 80026bc:	d130      	bne.n	8002720 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	2203      	movs	r2, #3
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026f4:	2201      	movs	r2, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 0201 	and.w	r2, r3, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2203      	movs	r2, #3
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0xfc>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b12      	cmp	r3, #18
 800275e:	d123      	bne.n	80027a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	08da      	lsrs	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3208      	adds	r2, #8
 8002768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	220f      	movs	r2, #15
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	08da      	lsrs	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	69b9      	ldr	r1, [r7, #24]
 80027a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0203 	and.w	r2, r3, #3
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80b4 	beq.w	8002952 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b5f      	ldr	r3, [pc, #380]	; (800296c <HAL_GPIO_Init+0x308>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	4a5e      	ldr	r2, [pc, #376]	; (800296c <HAL_GPIO_Init+0x308>)
 80027f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f8:	6453      	str	r3, [r2, #68]	; 0x44
 80027fa:	4b5c      	ldr	r3, [pc, #368]	; (800296c <HAL_GPIO_Init+0x308>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002806:	4a5a      	ldr	r2, [pc, #360]	; (8002970 <HAL_GPIO_Init+0x30c>)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	3302      	adds	r3, #2
 800280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	220f      	movs	r2, #15
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_GPIO_Init+0x310>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d02b      	beq.n	800288a <HAL_GPIO_Init+0x226>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a50      	ldr	r2, [pc, #320]	; (8002978 <HAL_GPIO_Init+0x314>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d025      	beq.n	8002886 <HAL_GPIO_Init+0x222>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a4f      	ldr	r2, [pc, #316]	; (800297c <HAL_GPIO_Init+0x318>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d01f      	beq.n	8002882 <HAL_GPIO_Init+0x21e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4e      	ldr	r2, [pc, #312]	; (8002980 <HAL_GPIO_Init+0x31c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d019      	beq.n	800287e <HAL_GPIO_Init+0x21a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4d      	ldr	r2, [pc, #308]	; (8002984 <HAL_GPIO_Init+0x320>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d013      	beq.n	800287a <HAL_GPIO_Init+0x216>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4c      	ldr	r2, [pc, #304]	; (8002988 <HAL_GPIO_Init+0x324>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00d      	beq.n	8002876 <HAL_GPIO_Init+0x212>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4b      	ldr	r2, [pc, #300]	; (800298c <HAL_GPIO_Init+0x328>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d007      	beq.n	8002872 <HAL_GPIO_Init+0x20e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4a      	ldr	r2, [pc, #296]	; (8002990 <HAL_GPIO_Init+0x32c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d101      	bne.n	800286e <HAL_GPIO_Init+0x20a>
 800286a:	2307      	movs	r3, #7
 800286c:	e00e      	b.n	800288c <HAL_GPIO_Init+0x228>
 800286e:	2308      	movs	r3, #8
 8002870:	e00c      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002872:	2306      	movs	r3, #6
 8002874:	e00a      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002876:	2305      	movs	r3, #5
 8002878:	e008      	b.n	800288c <HAL_GPIO_Init+0x228>
 800287a:	2304      	movs	r3, #4
 800287c:	e006      	b.n	800288c <HAL_GPIO_Init+0x228>
 800287e:	2303      	movs	r3, #3
 8002880:	e004      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002882:	2302      	movs	r3, #2
 8002884:	e002      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_GPIO_Init+0x228>
 800288a:	2300      	movs	r3, #0
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	f002 0203 	and.w	r2, r2, #3
 8002892:	0092      	lsls	r2, r2, #2
 8002894:	4093      	lsls	r3, r2
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800289c:	4934      	ldr	r1, [pc, #208]	; (8002970 <HAL_GPIO_Init+0x30c>)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028aa:	4b3a      	ldr	r3, [pc, #232]	; (8002994 <HAL_GPIO_Init+0x330>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028ce:	4a31      	ldr	r2, [pc, #196]	; (8002994 <HAL_GPIO_Init+0x330>)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028d4:	4b2f      	ldr	r3, [pc, #188]	; (8002994 <HAL_GPIO_Init+0x330>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028f8:	4a26      	ldr	r2, [pc, #152]	; (8002994 <HAL_GPIO_Init+0x330>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028fe:	4b25      	ldr	r3, [pc, #148]	; (8002994 <HAL_GPIO_Init+0x330>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002922:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <HAL_GPIO_Init+0x330>)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002928:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <HAL_GPIO_Init+0x330>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800294c:	4a11      	ldr	r2, [pc, #68]	; (8002994 <HAL_GPIO_Init+0x330>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3301      	adds	r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2b0f      	cmp	r3, #15
 800295c:	f67f ae90 	bls.w	8002680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002960:	bf00      	nop
 8002962:	3724      	adds	r7, #36	; 0x24
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	40023800 	.word	0x40023800
 8002970:	40013800 	.word	0x40013800
 8002974:	40020000 	.word	0x40020000
 8002978:	40020400 	.word	0x40020400
 800297c:	40020800 	.word	0x40020800
 8002980:	40020c00 	.word	0x40020c00
 8002984:	40021000 	.word	0x40021000
 8002988:	40021400 	.word	0x40021400
 800298c:	40021800 	.word	0x40021800
 8002990:	40021c00 	.word	0x40021c00
 8002994:	40013c00 	.word	0x40013c00

08002998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
 80029a4:	4613      	mov	r3, r2
 80029a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a8:	787b      	ldrb	r3, [r7, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ae:	887a      	ldrh	r2, [r7, #2]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029b4:	e003      	b.n	80029be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	041a      	lsls	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	619a      	str	r2, [r3, #24]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e25b      	b.n	8002e96 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d075      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ea:	4ba3      	ldr	r3, [pc, #652]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d00c      	beq.n	8002a10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f6:	4ba0      	ldr	r3, [pc, #640]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d112      	bne.n	8002a28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a02:	4b9d      	ldr	r3, [pc, #628]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a0e:	d10b      	bne.n	8002a28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	4b99      	ldr	r3, [pc, #612]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d05b      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x108>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d157      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e236      	b.n	8002e96 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a30:	d106      	bne.n	8002a40 <HAL_RCC_OscConfig+0x74>
 8002a32:	4b91      	ldr	r3, [pc, #580]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a90      	ldr	r2, [pc, #576]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e01d      	b.n	8002a7c <HAL_RCC_OscConfig+0xb0>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x98>
 8002a4a:	4b8b      	ldr	r3, [pc, #556]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a8a      	ldr	r2, [pc, #552]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b88      	ldr	r3, [pc, #544]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a87      	ldr	r2, [pc, #540]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e00b      	b.n	8002a7c <HAL_RCC_OscConfig+0xb0>
 8002a64:	4b84      	ldr	r3, [pc, #528]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a83      	ldr	r2, [pc, #524]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	4b81      	ldr	r3, [pc, #516]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a80      	ldr	r2, [pc, #512]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d013      	beq.n	8002aac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7ff fcc2 	bl	800240c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7ff fcbe 	bl	800240c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1fb      	b.n	8002e96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	4b76      	ldr	r3, [pc, #472]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0xc0>
 8002aaa:	e014      	b.n	8002ad6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7ff fcae 	bl	800240c <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7ff fcaa 	bl	800240c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1e7      	b.n	8002e96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac6:	4b6c      	ldr	r3, [pc, #432]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0xe8>
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d063      	beq.n	8002baa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ae2:	4b65      	ldr	r3, [pc, #404]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aee:	4b62      	ldr	r3, [pc, #392]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d11c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afa:	4b5f      	ldr	r3, [pc, #380]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d116      	bne.n	8002b34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b06:	4b5c      	ldr	r3, [pc, #368]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_RCC_OscConfig+0x152>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e1bb      	b.n	8002e96 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1e:	4b56      	ldr	r3, [pc, #344]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4952      	ldr	r1, [pc, #328]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b32:	e03a      	b.n	8002baa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d020      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b3c:	4b4f      	ldr	r3, [pc, #316]	; (8002c7c <HAL_RCC_OscConfig+0x2b0>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b42:	f7ff fc63 	bl	800240c <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4a:	f7ff fc5f 	bl	800240c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e19c      	b.n	8002e96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5c:	4b46      	ldr	r3, [pc, #280]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b68:	4b43      	ldr	r3, [pc, #268]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4940      	ldr	r1, [pc, #256]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
 8002b7c:	e015      	b.n	8002baa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7e:	4b3f      	ldr	r3, [pc, #252]	; (8002c7c <HAL_RCC_OscConfig+0x2b0>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7ff fc42 	bl	800240c <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b8c:	f7ff fc3e 	bl	800240c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e17b      	b.n	8002e96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9e:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d030      	beq.n	8002c18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d016      	beq.n	8002bec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bbe:	4b30      	ldr	r3, [pc, #192]	; (8002c80 <HAL_RCC_OscConfig+0x2b4>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7ff fc22 	bl	800240c <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bcc:	f7ff fc1e 	bl	800240c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e15b      	b.n	8002e96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bde:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x200>
 8002bea:	e015      	b.n	8002c18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bec:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <HAL_RCC_OscConfig+0x2b4>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf2:	f7ff fc0b 	bl	800240c <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bfa:	f7ff fc07 	bl	800240c <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e144      	b.n	8002e96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f0      	bne.n	8002bfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80a0 	beq.w	8002d66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2a:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10f      	bne.n	8002c56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c44:	6413      	str	r3, [r2, #64]	; 0x40
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c52:	2301      	movs	r3, #1
 8002c54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_OscConfig+0x2b8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d121      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c62:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <HAL_RCC_OscConfig+0x2b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <HAL_RCC_OscConfig+0x2b8>)
 8002c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6e:	f7ff fbcd 	bl	800240c <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	e011      	b.n	8002c9a <HAL_RCC_OscConfig+0x2ce>
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	42470000 	.word	0x42470000
 8002c80:	42470e80 	.word	0x42470e80
 8002c84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c88:	f7ff fbc0 	bl	800240c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e0fd      	b.n	8002e96 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	4b81      	ldr	r3, [pc, #516]	; (8002ea0 <HAL_RCC_OscConfig+0x4d4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d106      	bne.n	8002cbc <HAL_RCC_OscConfig+0x2f0>
 8002cae:	4b7d      	ldr	r3, [pc, #500]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	4a7c      	ldr	r2, [pc, #496]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cba:	e01c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x32a>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b05      	cmp	r3, #5
 8002cc2:	d10c      	bne.n	8002cde <HAL_RCC_OscConfig+0x312>
 8002cc4:	4b77      	ldr	r3, [pc, #476]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	4a76      	ldr	r2, [pc, #472]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002cca:	f043 0304 	orr.w	r3, r3, #4
 8002cce:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd0:	4b74      	ldr	r3, [pc, #464]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	4a73      	ldr	r2, [pc, #460]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
 8002cdc:	e00b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x32a>
 8002cde:	4b71      	ldr	r3, [pc, #452]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	4a70      	ldr	r2, [pc, #448]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002ce4:	f023 0301 	bic.w	r3, r3, #1
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cea:	4b6e      	ldr	r3, [pc, #440]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	4a6d      	ldr	r2, [pc, #436]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002cf0:	f023 0304 	bic.w	r3, r3, #4
 8002cf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d015      	beq.n	8002d2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfe:	f7ff fb85 	bl	800240c <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7ff fb81 	bl	800240c <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e0bc      	b.n	8002e96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1c:	4b61      	ldr	r3, [pc, #388]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0ee      	beq.n	8002d06 <HAL_RCC_OscConfig+0x33a>
 8002d28:	e014      	b.n	8002d54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2a:	f7ff fb6f 	bl	800240c <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7ff fb6b 	bl	800240c <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e0a6      	b.n	8002e96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d48:	4b56      	ldr	r3, [pc, #344]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ee      	bne.n	8002d32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d105      	bne.n	8002d66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5a:	4b52      	ldr	r3, [pc, #328]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4a51      	ldr	r2, [pc, #324]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8092 	beq.w	8002e94 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d70:	4b4c      	ldr	r3, [pc, #304]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d05c      	beq.n	8002e36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d141      	bne.n	8002e08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d84:	4b48      	ldr	r3, [pc, #288]	; (8002ea8 <HAL_RCC_OscConfig+0x4dc>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7ff fb3f 	bl	800240c <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d92:	f7ff fb3b 	bl	800240c <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e078      	b.n	8002e96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da4:	4b3f      	ldr	r3, [pc, #252]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	019b      	lsls	r3, r3, #6
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	041b      	lsls	r3, r3, #16
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	061b      	lsls	r3, r3, #24
 8002dd4:	4933      	ldr	r1, [pc, #204]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dda:	4b33      	ldr	r3, [pc, #204]	; (8002ea8 <HAL_RCC_OscConfig+0x4dc>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7ff fb14 	bl	800240c <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de8:	f7ff fb10 	bl	800240c <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e04d      	b.n	8002e96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x41c>
 8002e06:	e045      	b.n	8002e94 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e08:	4b27      	ldr	r3, [pc, #156]	; (8002ea8 <HAL_RCC_OscConfig+0x4dc>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0e:	f7ff fafd 	bl	800240c <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e16:	f7ff faf9 	bl	800240c <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e036      	b.n	8002e96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e28:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f0      	bne.n	8002e16 <HAL_RCC_OscConfig+0x44a>
 8002e34:	e02e      	b.n	8002e94 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e029      	b.n	8002e96 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e42:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <HAL_RCC_OscConfig+0x4d8>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d11c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d115      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d10d      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d106      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	42470060 	.word	0x42470060

08002eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0cc      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b68      	ldr	r3, [pc, #416]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d90c      	bls.n	8002ee8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b65      	ldr	r3, [pc, #404]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b63      	ldr	r3, [pc, #396]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0b8      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d020      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f00:	4b59      	ldr	r3, [pc, #356]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a58      	ldr	r2, [pc, #352]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f18:	4b53      	ldr	r3, [pc, #332]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	4a52      	ldr	r2, [pc, #328]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f24:	4b50      	ldr	r3, [pc, #320]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	494d      	ldr	r1, [pc, #308]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d044      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d107      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4a:	4b47      	ldr	r3, [pc, #284]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d119      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e07f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6a:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e06f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7a:	4b3b      	ldr	r3, [pc, #236]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e067      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8a:	4b37      	ldr	r3, [pc, #220]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f023 0203 	bic.w	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4934      	ldr	r1, [pc, #208]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f9c:	f7ff fa36 	bl	800240c <HAL_GetTick>
 8002fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa4:	f7ff fa32 	bl	800240c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e04f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 020c 	and.w	r2, r3, #12
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d1eb      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b25      	ldr	r3, [pc, #148]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d20c      	bcs.n	8002ff4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b22      	ldr	r3, [pc, #136]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e032      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4916      	ldr	r1, [pc, #88]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	490e      	ldr	r1, [pc, #56]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003032:	f000 f821 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8003036:	4601      	mov	r1, r0
 8003038:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	5cd3      	ldrb	r3, [r2, r3]
 8003046:	fa21 f303 	lsr.w	r3, r1, r3
 800304a:	4a09      	ldr	r2, [pc, #36]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff f8d4 	bl	8002200 <HAL_InitTick>

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40023c00 	.word	0x40023c00
 8003068:	40023800 	.word	0x40023800
 800306c:	08012d10 	.word	0x08012d10
 8003070:	20000004 	.word	0x20000004
 8003074:	20000008 	.word	0x20000008

08003078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	2300      	movs	r3, #0
 8003088:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800308e:	4b63      	ldr	r3, [pc, #396]	; (800321c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b04      	cmp	r3, #4
 8003098:	d007      	beq.n	80030aa <HAL_RCC_GetSysClockFreq+0x32>
 800309a:	2b08      	cmp	r3, #8
 800309c:	d008      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0x38>
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f040 80b4 	bne.w	800320c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030a4:	4b5e      	ldr	r3, [pc, #376]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80030a6:	60bb      	str	r3, [r7, #8]
       break;
 80030a8:	e0b3      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030aa:	4b5e      	ldr	r3, [pc, #376]	; (8003224 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80030ac:	60bb      	str	r3, [r7, #8]
      break;
 80030ae:	e0b0      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b0:	4b5a      	ldr	r3, [pc, #360]	; (800321c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ba:	4b58      	ldr	r3, [pc, #352]	; (800321c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d04a      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c6:	4b55      	ldr	r3, [pc, #340]	; (800321c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	099b      	lsrs	r3, r3, #6
 80030cc:	f04f 0400 	mov.w	r4, #0
 80030d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	ea03 0501 	and.w	r5, r3, r1
 80030dc:	ea04 0602 	and.w	r6, r4, r2
 80030e0:	4629      	mov	r1, r5
 80030e2:	4632      	mov	r2, r6
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	f04f 0400 	mov.w	r4, #0
 80030ec:	0154      	lsls	r4, r2, #5
 80030ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030f2:	014b      	lsls	r3, r1, #5
 80030f4:	4619      	mov	r1, r3
 80030f6:	4622      	mov	r2, r4
 80030f8:	1b49      	subs	r1, r1, r5
 80030fa:	eb62 0206 	sbc.w	r2, r2, r6
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	f04f 0400 	mov.w	r4, #0
 8003106:	0194      	lsls	r4, r2, #6
 8003108:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800310c:	018b      	lsls	r3, r1, #6
 800310e:	1a5b      	subs	r3, r3, r1
 8003110:	eb64 0402 	sbc.w	r4, r4, r2
 8003114:	f04f 0100 	mov.w	r1, #0
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	00e2      	lsls	r2, r4, #3
 800311e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003122:	00d9      	lsls	r1, r3, #3
 8003124:	460b      	mov	r3, r1
 8003126:	4614      	mov	r4, r2
 8003128:	195b      	adds	r3, r3, r5
 800312a:	eb44 0406 	adc.w	r4, r4, r6
 800312e:	f04f 0100 	mov.w	r1, #0
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	0262      	lsls	r2, r4, #9
 8003138:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800313c:	0259      	lsls	r1, r3, #9
 800313e:	460b      	mov	r3, r1
 8003140:	4614      	mov	r4, r2
 8003142:	4618      	mov	r0, r3
 8003144:	4621      	mov	r1, r4
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f04f 0400 	mov.w	r4, #0
 800314c:	461a      	mov	r2, r3
 800314e:	4623      	mov	r3, r4
 8003150:	f7fd f896 	bl	8000280 <__aeabi_uldivmod>
 8003154:	4603      	mov	r3, r0
 8003156:	460c      	mov	r4, r1
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	e049      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315c:	4b2f      	ldr	r3, [pc, #188]	; (800321c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	f04f 0400 	mov.w	r4, #0
 8003166:	f240 11ff 	movw	r1, #511	; 0x1ff
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	ea03 0501 	and.w	r5, r3, r1
 8003172:	ea04 0602 	and.w	r6, r4, r2
 8003176:	4629      	mov	r1, r5
 8003178:	4632      	mov	r2, r6
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	f04f 0400 	mov.w	r4, #0
 8003182:	0154      	lsls	r4, r2, #5
 8003184:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003188:	014b      	lsls	r3, r1, #5
 800318a:	4619      	mov	r1, r3
 800318c:	4622      	mov	r2, r4
 800318e:	1b49      	subs	r1, r1, r5
 8003190:	eb62 0206 	sbc.w	r2, r2, r6
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	f04f 0400 	mov.w	r4, #0
 800319c:	0194      	lsls	r4, r2, #6
 800319e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031a2:	018b      	lsls	r3, r1, #6
 80031a4:	1a5b      	subs	r3, r3, r1
 80031a6:	eb64 0402 	sbc.w	r4, r4, r2
 80031aa:	f04f 0100 	mov.w	r1, #0
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	00e2      	lsls	r2, r4, #3
 80031b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031b8:	00d9      	lsls	r1, r3, #3
 80031ba:	460b      	mov	r3, r1
 80031bc:	4614      	mov	r4, r2
 80031be:	195b      	adds	r3, r3, r5
 80031c0:	eb44 0406 	adc.w	r4, r4, r6
 80031c4:	f04f 0100 	mov.w	r1, #0
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	02a2      	lsls	r2, r4, #10
 80031ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80031d2:	0299      	lsls	r1, r3, #10
 80031d4:	460b      	mov	r3, r1
 80031d6:	4614      	mov	r4, r2
 80031d8:	4618      	mov	r0, r3
 80031da:	4621      	mov	r1, r4
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f04f 0400 	mov.w	r4, #0
 80031e2:	461a      	mov	r2, r3
 80031e4:	4623      	mov	r3, r4
 80031e6:	f7fd f84b 	bl	8000280 <__aeabi_uldivmod>
 80031ea:	4603      	mov	r3, r0
 80031ec:	460c      	mov	r4, r1
 80031ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	3301      	adds	r3, #1
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	60bb      	str	r3, [r7, #8]
      break;
 800320a:	e002      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800320c:	4b04      	ldr	r3, [pc, #16]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800320e:	60bb      	str	r3, [r7, #8]
      break;
 8003210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003212:	68bb      	ldr	r3, [r7, #8]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	00f42400 	.word	0x00f42400
 8003224:	007a1200 	.word	0x007a1200

08003228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800322c:	4b03      	ldr	r3, [pc, #12]	; (800323c <HAL_RCC_GetHCLKFreq+0x14>)
 800322e:	681b      	ldr	r3, [r3, #0]
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000004 	.word	0x20000004

08003240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003244:	f7ff fff0 	bl	8003228 <HAL_RCC_GetHCLKFreq>
 8003248:	4601      	mov	r1, r0
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	0b5b      	lsrs	r3, r3, #13
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4a03      	ldr	r2, [pc, #12]	; (8003264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003256:	5cd3      	ldrb	r3, [r2, r3]
 8003258:	fa21 f303 	lsr.w	r3, r1, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40023800 	.word	0x40023800
 8003264:	08012d20 	.word	0x08012d20

08003268 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	220f      	movs	r2, #15
 8003276:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003278:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <HAL_RCC_GetClockConfig+0x5c>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0203 	and.w	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003284:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800329c:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <HAL_RCC_GetClockConfig+0x5c>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	08db      	lsrs	r3, r3, #3
 80032a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032aa:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <HAL_RCC_GetClockConfig+0x60>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 020f 	and.w	r2, r3, #15
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	601a      	str	r2, [r3, #0]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40023c00 	.word	0x40023c00

080032cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e056      	b.n	800338c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d106      	bne.n	80032fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7fe fecb 	bl	8002094 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003314:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	ea42 0103 	orr.w	r1, r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	0c1b      	lsrs	r3, r3, #16
 800335c:	f003 0104 	and.w	r1, r3, #4
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	69da      	ldr	r2, [r3, #28]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800337a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	4613      	mov	r3, r2
 80033a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_SPI_Transmit+0x22>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e11e      	b.n	80035f4 <HAL_SPI_Transmit+0x260>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033be:	f7ff f825 	bl	800240c <HAL_GetTick>
 80033c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d002      	beq.n	80033da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033d4:	2302      	movs	r3, #2
 80033d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033d8:	e103      	b.n	80035e2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_SPI_Transmit+0x52>
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033ea:	e0fa      	b.n	80035e2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2203      	movs	r2, #3
 80033f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	88fa      	ldrh	r2, [r7, #6]
 8003404:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	88fa      	ldrh	r2, [r7, #6]
 800340a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003432:	d107      	bne.n	8003444 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003442:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d007      	beq.n	8003462 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003460:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800346a:	d14b      	bne.n	8003504 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <HAL_SPI_Transmit+0xe6>
 8003474:	8afb      	ldrh	r3, [r7, #22]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d13e      	bne.n	80034f8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	881a      	ldrh	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	1c9a      	adds	r2, r3, #2
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003494:	b29b      	uxth	r3, r3
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800349e:	e02b      	b.n	80034f8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d112      	bne.n	80034d4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	881a      	ldrh	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	1c9a      	adds	r2, r3, #2
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80034d2:	e011      	b.n	80034f8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034d4:	f7fe ff9a 	bl	800240c <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d803      	bhi.n	80034ec <HAL_SPI_Transmit+0x158>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ea:	d102      	bne.n	80034f2 <HAL_SPI_Transmit+0x15e>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d102      	bne.n	80034f8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034f6:	e074      	b.n	80035e2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1ce      	bne.n	80034a0 <HAL_SPI_Transmit+0x10c>
 8003502:	e04c      	b.n	800359e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <HAL_SPI_Transmit+0x17e>
 800350c:	8afb      	ldrh	r3, [r7, #22]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d140      	bne.n	8003594 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	330c      	adds	r3, #12
 800351c:	7812      	ldrb	r2, [r2, #0]
 800351e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003538:	e02c      	b.n	8003594 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b02      	cmp	r3, #2
 8003546:	d113      	bne.n	8003570 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	330c      	adds	r3, #12
 8003552:	7812      	ldrb	r2, [r2, #0]
 8003554:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	86da      	strh	r2, [r3, #54]	; 0x36
 800356e:	e011      	b.n	8003594 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003570:	f7fe ff4c 	bl	800240c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d803      	bhi.n	8003588 <HAL_SPI_Transmit+0x1f4>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003586:	d102      	bne.n	800358e <HAL_SPI_Transmit+0x1fa>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003592:	e026      	b.n	80035e2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1cd      	bne.n	800353a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	6839      	ldr	r1, [r7, #0]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fa36 	bl	8003a14 <SPI_EndRxTxTransaction>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10a      	bne.n	80035d2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035bc:	2300      	movs	r3, #0
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	77fb      	strb	r3, [r7, #31]
 80035de:	e000      	b.n	80035e2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80035e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3720      	adds	r7, #32
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	; 0x30
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800360a:	2301      	movs	r3, #1
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_SPI_TransmitReceive+0x26>
 800361e:	2302      	movs	r3, #2
 8003620:	e18a      	b.n	8003938 <HAL_SPI_TransmitReceive+0x33c>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800362a:	f7fe feef 	bl	800240c <HAL_GetTick>
 800362e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003640:	887b      	ldrh	r3, [r7, #2]
 8003642:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003644:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003648:	2b01      	cmp	r3, #1
 800364a:	d00f      	beq.n	800366c <HAL_SPI_TransmitReceive+0x70>
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003652:	d107      	bne.n	8003664 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d103      	bne.n	8003664 <HAL_SPI_TransmitReceive+0x68>
 800365c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003660:	2b04      	cmp	r3, #4
 8003662:	d003      	beq.n	800366c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003664:	2302      	movs	r3, #2
 8003666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800366a:	e15b      	b.n	8003924 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_SPI_TransmitReceive+0x82>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <HAL_SPI_TransmitReceive+0x82>
 8003678:	887b      	ldrh	r3, [r7, #2]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d103      	bne.n	8003686 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003684:	e14e      	b.n	8003924 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b04      	cmp	r3, #4
 8003690:	d003      	beq.n	800369a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2205      	movs	r2, #5
 8003696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	887a      	ldrh	r2, [r7, #2]
 80036aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	887a      	ldrh	r2, [r7, #2]
 80036b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	887a      	ldrh	r2, [r7, #2]
 80036c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d007      	beq.n	80036ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f6:	d178      	bne.n	80037ea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_SPI_TransmitReceive+0x10a>
 8003700:	8b7b      	ldrh	r3, [r7, #26]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d166      	bne.n	80037d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	881a      	ldrh	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	1c9a      	adds	r2, r3, #2
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800372a:	e053      	b.n	80037d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b02      	cmp	r3, #2
 8003738:	d11b      	bne.n	8003772 <HAL_SPI_TransmitReceive+0x176>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d016      	beq.n	8003772 <HAL_SPI_TransmitReceive+0x176>
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	2b01      	cmp	r3, #1
 8003748:	d113      	bne.n	8003772 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	881a      	ldrh	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	1c9a      	adds	r2, r3, #2
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b01      	cmp	r3, #1
 800377e:	d119      	bne.n	80037b4 <HAL_SPI_TransmitReceive+0x1b8>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d014      	beq.n	80037b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	b292      	uxth	r2, r2
 8003796:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	1c9a      	adds	r2, r3, #2
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037b0:	2301      	movs	r3, #1
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037b4:	f7fe fe2a 	bl	800240c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d807      	bhi.n	80037d4 <HAL_SPI_TransmitReceive+0x1d8>
 80037c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ca:	d003      	beq.n	80037d4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80037d2:	e0a7      	b.n	8003924 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1a6      	bne.n	800372c <HAL_SPI_TransmitReceive+0x130>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1a1      	bne.n	800372c <HAL_SPI_TransmitReceive+0x130>
 80037e8:	e07c      	b.n	80038e4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_SPI_TransmitReceive+0x1fc>
 80037f2:	8b7b      	ldrh	r3, [r7, #26]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d16b      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	330c      	adds	r3, #12
 8003802:	7812      	ldrb	r2, [r2, #0]
 8003804:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800381e:	e057      	b.n	80038d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b02      	cmp	r3, #2
 800382c:	d11c      	bne.n	8003868 <HAL_SPI_TransmitReceive+0x26c>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d017      	beq.n	8003868 <HAL_SPI_TransmitReceive+0x26c>
 8003838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383a:	2b01      	cmp	r3, #1
 800383c:	d114      	bne.n	8003868 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	7812      	ldrb	r2, [r2, #0]
 800384a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b01      	cmp	r3, #1
 8003874:	d119      	bne.n	80038aa <HAL_SPI_TransmitReceive+0x2ae>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d014      	beq.n	80038aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038a6:	2301      	movs	r3, #1
 80038a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038aa:	f7fe fdaf 	bl	800240c <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d803      	bhi.n	80038c2 <HAL_SPI_TransmitReceive+0x2c6>
 80038ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d102      	bne.n	80038c8 <HAL_SPI_TransmitReceive+0x2cc>
 80038c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d103      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038ce:	e029      	b.n	8003924 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1a2      	bne.n	8003820 <HAL_SPI_TransmitReceive+0x224>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d19d      	bne.n	8003820 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f893 	bl	8003a14 <SPI_EndRxTxTransaction>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d006      	beq.n	8003902 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2220      	movs	r2, #32
 80038fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003900:	e010      	b.n	8003924 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	e000      	b.n	8003924 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003922:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003934:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003938:	4618      	mov	r0, r3
 800393a:	3730      	adds	r7, #48	; 0x30
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003950:	e04c      	b.n	80039ec <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d048      	beq.n	80039ec <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800395a:	f7fe fd57 	bl	800240c <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d902      	bls.n	8003970 <SPI_WaitFlagStateUntilTimeout+0x30>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d13d      	bne.n	80039ec <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800397e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003988:	d111      	bne.n	80039ae <SPI_WaitFlagStateUntilTimeout+0x6e>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003992:	d004      	beq.n	800399e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399c:	d107      	bne.n	80039ae <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b6:	d10f      	bne.n	80039d8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e00f      	b.n	8003a0c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	4013      	ands	r3, r2
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	bf0c      	ite	eq
 80039fc:	2301      	moveq	r3, #1
 80039fe:	2300      	movne	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	461a      	mov	r2, r3
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d1a3      	bne.n	8003952 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a20:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <SPI_EndRxTxTransaction+0x7c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <SPI_EndRxTxTransaction+0x80>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	0d5b      	lsrs	r3, r3, #21
 8003a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a30:	fb02 f303 	mul.w	r3, r2, r3
 8003a34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a3e:	d112      	bne.n	8003a66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2200      	movs	r2, #0
 8003a48:	2180      	movs	r1, #128	; 0x80
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f7ff ff78 	bl	8003940 <SPI_WaitFlagStateUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d016      	beq.n	8003a84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5a:	f043 0220 	orr.w	r2, r3, #32
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e00f      	b.n	8003a86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	2b80      	cmp	r3, #128	; 0x80
 8003a7e:	d0f2      	beq.n	8003a66 <SPI_EndRxTxTransaction+0x52>
 8003a80:	e000      	b.n	8003a84 <SPI_EndRxTxTransaction+0x70>
        break;
 8003a82:	bf00      	nop
  }

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000004 	.word	0x20000004
 8003a94:	165e9f81 	.word	0x165e9f81

08003a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e01d      	b.n	8003ae6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f815 	bl	8003aee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	f000 f968 	bl	8003dac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b085      	sub	sp, #20
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b06      	cmp	r3, #6
 8003b2a:	d007      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d122      	bne.n	8003ba6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d11b      	bne.n	8003ba6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f06f 0202 	mvn.w	r2, #2
 8003b76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f8ee 	bl	8003d6e <HAL_TIM_IC_CaptureCallback>
 8003b92:	e005      	b.n	8003ba0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f8e0 	bl	8003d5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f8f1 	bl	8003d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d122      	bne.n	8003bfa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d11b      	bne.n	8003bfa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f06f 0204 	mvn.w	r2, #4
 8003bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f8c4 	bl	8003d6e <HAL_TIM_IC_CaptureCallback>
 8003be6:	e005      	b.n	8003bf4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f8b6 	bl	8003d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f8c7 	bl	8003d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d122      	bne.n	8003c4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d11b      	bne.n	8003c4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f06f 0208 	mvn.w	r2, #8
 8003c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2204      	movs	r2, #4
 8003c24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f89a 	bl	8003d6e <HAL_TIM_IC_CaptureCallback>
 8003c3a:	e005      	b.n	8003c48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f88c 	bl	8003d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f89d 	bl	8003d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d122      	bne.n	8003ca2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d11b      	bne.n	8003ca2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f06f 0210 	mvn.w	r2, #16
 8003c72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2208      	movs	r2, #8
 8003c78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f870 	bl	8003d6e <HAL_TIM_IC_CaptureCallback>
 8003c8e:	e005      	b.n	8003c9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f862 	bl	8003d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f873 	bl	8003d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d10e      	bne.n	8003cce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d107      	bne.n	8003cce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f06f 0201 	mvn.w	r2, #1
 8003cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7fd fed1 	bl	8001a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	2b80      	cmp	r3, #128	; 0x80
 8003cda:	d10e      	bne.n	8003cfa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	2b80      	cmp	r3, #128	; 0x80
 8003ce8:	d107      	bne.n	8003cfa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f903 	bl	8003f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	d10e      	bne.n	8003d26 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b40      	cmp	r3, #64	; 0x40
 8003d14:	d107      	bne.n	8003d26 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f838 	bl	8003d96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d10e      	bne.n	8003d52 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d107      	bne.n	8003d52 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f06f 0220 	mvn.w	r2, #32
 8003d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f8cd 	bl	8003eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a40      	ldr	r2, [pc, #256]	; (8003ec0 <TIM_Base_SetConfig+0x114>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d013      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dca:	d00f      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a3d      	ldr	r2, [pc, #244]	; (8003ec4 <TIM_Base_SetConfig+0x118>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00b      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a3c      	ldr	r2, [pc, #240]	; (8003ec8 <TIM_Base_SetConfig+0x11c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a3b      	ldr	r2, [pc, #236]	; (8003ecc <TIM_Base_SetConfig+0x120>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a3a      	ldr	r2, [pc, #232]	; (8003ed0 <TIM_Base_SetConfig+0x124>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d108      	bne.n	8003dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a2f      	ldr	r2, [pc, #188]	; (8003ec0 <TIM_Base_SetConfig+0x114>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d02b      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0c:	d027      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a2c      	ldr	r2, [pc, #176]	; (8003ec4 <TIM_Base_SetConfig+0x118>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d023      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a2b      	ldr	r2, [pc, #172]	; (8003ec8 <TIM_Base_SetConfig+0x11c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01f      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a2a      	ldr	r2, [pc, #168]	; (8003ecc <TIM_Base_SetConfig+0x120>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01b      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a29      	ldr	r2, [pc, #164]	; (8003ed0 <TIM_Base_SetConfig+0x124>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d017      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a28      	ldr	r2, [pc, #160]	; (8003ed4 <TIM_Base_SetConfig+0x128>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a27      	ldr	r2, [pc, #156]	; (8003ed8 <TIM_Base_SetConfig+0x12c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00f      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a26      	ldr	r2, [pc, #152]	; (8003edc <TIM_Base_SetConfig+0x130>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00b      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a25      	ldr	r2, [pc, #148]	; (8003ee0 <TIM_Base_SetConfig+0x134>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d007      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a24      	ldr	r2, [pc, #144]	; (8003ee4 <TIM_Base_SetConfig+0x138>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d003      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a23      	ldr	r2, [pc, #140]	; (8003ee8 <TIM_Base_SetConfig+0x13c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d108      	bne.n	8003e70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <TIM_Base_SetConfig+0x114>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_Base_SetConfig+0xf8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <TIM_Base_SetConfig+0x124>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d103      	bne.n	8003eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	615a      	str	r2, [r3, #20]
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40010000 	.word	0x40010000
 8003ec4:	40000400 	.word	0x40000400
 8003ec8:	40000800 	.word	0x40000800
 8003ecc:	40000c00 	.word	0x40000c00
 8003ed0:	40010400 	.word	0x40010400
 8003ed4:	40014000 	.word	0x40014000
 8003ed8:	40014400 	.word	0x40014400
 8003edc:	40014800 	.word	0x40014800
 8003ee0:	40001800 	.word	0x40001800
 8003ee4:	40001c00 	.word	0x40001c00
 8003ee8:	40002000 	.word	0x40002000

08003eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003f18:	4904      	ldr	r1, [pc, #16]	; (8003f2c <MX_FATFS_Init+0x18>)
 8003f1a:	4805      	ldr	r0, [pc, #20]	; (8003f30 <MX_FATFS_Init+0x1c>)
 8003f1c:	f003 f950 	bl	80071c0 <FATFS_LinkDriver>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <MX_FATFS_Init+0x20>)
 8003f26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003f28:	bf00      	nop
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20005618 	.word	0x20005618
 8003f30:	20000010 	.word	0x20000010
 8003f34:	2000561c 	.word	0x2000561c

08003f38 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003f3c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fd f8a3 	bl	80010a0 <SD_disk_initialize>
 8003f5a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8003f6e:	79fb      	ldrb	r3, [r7, #7]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fd f97b 	bl	800126c <SD_disk_status>
 8003f76:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8003f90:	7bf8      	ldrb	r0, [r7, #15]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	68b9      	ldr	r1, [r7, #8]
 8003f98:	f7fd f97e 	bl	8001298 <SD_disk_read>
 8003f9c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b084      	sub	sp, #16
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8003fb6:	7bf8      	ldrb	r0, [r7, #15]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	f7fd f9d5 	bl	800136c <SD_disk_write>
 8003fc2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	603a      	str	r2, [r7, #0]
 8003fd6:	71fb      	strb	r3, [r7, #7]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8003fdc:	79b9      	ldrb	r1, [r7, #6]
 8003fde:	79fb      	ldrb	r3, [r7, #7]
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fd fa46 	bl	8001474 <SD_disk_ioctl>
 8003fe8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	4a08      	ldr	r2, [pc, #32]	; (8004024 <disk_status+0x30>)
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	79fa      	ldrb	r2, [r7, #7]
 800400c:	4905      	ldr	r1, [pc, #20]	; (8004024 <disk_status+0x30>)
 800400e:	440a      	add	r2, r1
 8004010:	7a12      	ldrb	r2, [r2, #8]
 8004012:	4610      	mov	r0, r2
 8004014:	4798      	blx	r3
 8004016:	4603      	mov	r3, r0
 8004018:	73fb      	strb	r3, [r7, #15]
  return stat;
 800401a:	7bfb      	ldrb	r3, [r7, #15]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	200029d4 	.word	0x200029d4

08004028 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	4a0d      	ldr	r2, [pc, #52]	; (8004070 <disk_initialize+0x48>)
 800403a:	5cd3      	ldrb	r3, [r2, r3]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d111      	bne.n	8004064 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	4a0b      	ldr	r2, [pc, #44]	; (8004070 <disk_initialize+0x48>)
 8004044:	2101      	movs	r1, #1
 8004046:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	4a09      	ldr	r2, [pc, #36]	; (8004070 <disk_initialize+0x48>)
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	79fa      	ldrb	r2, [r7, #7]
 8004056:	4906      	ldr	r1, [pc, #24]	; (8004070 <disk_initialize+0x48>)
 8004058:	440a      	add	r2, r1
 800405a:	7a12      	ldrb	r2, [r2, #8]
 800405c:	4610      	mov	r0, r2
 800405e:	4798      	blx	r3
 8004060:	4603      	mov	r3, r0
 8004062:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004064:	7bfb      	ldrb	r3, [r7, #15]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	200029d4 	.word	0x200029d4

08004074 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	4603      	mov	r3, r0
 8004082:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <disk_read+0x3c>)
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	689c      	ldr	r4, [r3, #8]
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	4a07      	ldr	r2, [pc, #28]	; (80040b0 <disk_read+0x3c>)
 8004094:	4413      	add	r3, r2
 8004096:	7a18      	ldrb	r0, [r3, #8]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	47a0      	blx	r4
 80040a0:	4603      	mov	r3, r0
 80040a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd90      	pop	{r4, r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200029d4 	.word	0x200029d4

080040b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80040b4:	b590      	push	{r4, r7, lr}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	4603      	mov	r3, r0
 80040c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	4a0a      	ldr	r2, [pc, #40]	; (80040f0 <disk_write+0x3c>)
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	68dc      	ldr	r4, [r3, #12]
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	4a07      	ldr	r2, [pc, #28]	; (80040f0 <disk_write+0x3c>)
 80040d4:	4413      	add	r3, r2
 80040d6:	7a18      	ldrb	r0, [r3, #8]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	47a0      	blx	r4
 80040e0:	4603      	mov	r3, r0
 80040e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd90      	pop	{r4, r7, pc}
 80040ee:	bf00      	nop
 80040f0:	200029d4 	.word	0x200029d4

080040f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	603a      	str	r2, [r7, #0]
 80040fe:	71fb      	strb	r3, [r7, #7]
 8004100:	460b      	mov	r3, r1
 8004102:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	4a09      	ldr	r2, [pc, #36]	; (800412c <disk_ioctl+0x38>)
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	79fa      	ldrb	r2, [r7, #7]
 8004112:	4906      	ldr	r1, [pc, #24]	; (800412c <disk_ioctl+0x38>)
 8004114:	440a      	add	r2, r1
 8004116:	7a10      	ldrb	r0, [r2, #8]
 8004118:	79b9      	ldrb	r1, [r7, #6]
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	4798      	blx	r3
 800411e:	4603      	mov	r3, r0
 8004120:	73fb      	strb	r3, [r7, #15]
  return res;
 8004122:	7bfb      	ldrb	r3, [r7, #15]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	200029d4 	.word	0x200029d4

08004130 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3301      	adds	r3, #1
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004140:	89fb      	ldrh	r3, [r7, #14]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	b21a      	sxth	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	b21b      	sxth	r3, r3
 800414c:	4313      	orrs	r3, r2
 800414e:	b21b      	sxth	r3, r3
 8004150:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004152:	89fb      	ldrh	r3, [r7, #14]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3303      	adds	r3, #3
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	3202      	adds	r2, #2
 8004178:	7812      	ldrb	r2, [r2, #0]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	3201      	adds	r2, #1
 8004186:	7812      	ldrb	r2, [r2, #0]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	7812      	ldrb	r2, [r2, #0]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
	return rv;
 8004198:	68fb      	ldr	r3, [r7, #12]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	887a      	ldrh	r2, [r7, #2]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	887b      	ldrh	r3, [r7, #2]
 80041c0:	0a1b      	lsrs	r3, r3, #8
 80041c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	701a      	strb	r2, [r3, #0]
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	0a1b      	lsrs	r3, r3, #8
 80041f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	701a      	strb	r2, [r3, #0]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00d      	beq.n	800426a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	1c53      	adds	r3, r2, #1
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	1c59      	adds	r1, r3, #1
 8004258:	6179      	str	r1, [r7, #20]
 800425a:	7812      	ldrb	r2, [r2, #0]
 800425c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3b01      	subs	r3, #1
 8004262:	607b      	str	r3, [r7, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f1      	bne.n	800424e <mem_cpy+0x1a>
	}
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004276:	b480      	push	{r7}
 8004278:	b087      	sub	sp, #28
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	617a      	str	r2, [r7, #20]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3b01      	subs	r3, #1
 8004296:	607b      	str	r3, [r7, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f3      	bne.n	8004286 <mem_set+0x10>
}
 800429e:	bf00      	nop
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80042aa:	b480      	push	{r7}
 80042ac:	b089      	sub	sp, #36	; 0x24
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	61fb      	str	r3, [r7, #28]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	61fa      	str	r2, [r7, #28]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	4619      	mov	r1, r3
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	61ba      	str	r2, [r7, #24]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	1acb      	subs	r3, r1, r3
 80042d6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3b01      	subs	r3, #1
 80042dc:	607b      	str	r3, [r7, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <mem_cmp+0x40>
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0eb      	beq.n	80042c2 <mem_cmp+0x18>

	return r;
 80042ea:	697b      	ldr	r3, [r7, #20]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3724      	adds	r7, #36	; 0x24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004302:	e002      	b.n	800430a <chk_chr+0x12>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3301      	adds	r3, #1
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <chk_chr+0x26>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	4293      	cmp	r3, r2
 800431c:	d1f2      	bne.n	8004304 <chk_chr+0xc>
	return *str;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	781b      	ldrb	r3, [r3, #0]
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	e029      	b.n	8004398 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004344:	4a27      	ldr	r2, [pc, #156]	; (80043e4 <chk_lock+0xb4>)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	4413      	add	r3, r2
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d01d      	beq.n	800438e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004352:	4a24      	ldr	r2, [pc, #144]	; (80043e4 <chk_lock+0xb4>)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	4413      	add	r3, r2
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d116      	bne.n	8004392 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004364:	4a1f      	ldr	r2, [pc, #124]	; (80043e4 <chk_lock+0xb4>)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	4413      	add	r3, r2
 800436c:	3304      	adds	r3, #4
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004374:	429a      	cmp	r2, r3
 8004376:	d10c      	bne.n	8004392 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004378:	4a1a      	ldr	r2, [pc, #104]	; (80043e4 <chk_lock+0xb4>)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	4413      	add	r3, r2
 8004380:	3308      	adds	r3, #8
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004388:	429a      	cmp	r2, r3
 800438a:	d102      	bne.n	8004392 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800438c:	e007      	b.n	800439e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800438e:	2301      	movs	r3, #1
 8004390:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3301      	adds	r3, #1
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d9d2      	bls.n	8004344 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d109      	bne.n	80043b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <chk_lock+0x80>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d101      	bne.n	80043b4 <chk_lock+0x84>
 80043b0:	2300      	movs	r3, #0
 80043b2:	e010      	b.n	80043d6 <chk_lock+0xa6>
 80043b4:	2312      	movs	r3, #18
 80043b6:	e00e      	b.n	80043d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d108      	bne.n	80043d0 <chk_lock+0xa0>
 80043be:	4a09      	ldr	r2, [pc, #36]	; (80043e4 <chk_lock+0xb4>)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	4413      	add	r3, r2
 80043c6:	330c      	adds	r3, #12
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ce:	d101      	bne.n	80043d4 <chk_lock+0xa4>
 80043d0:	2310      	movs	r3, #16
 80043d2:	e000      	b.n	80043d6 <chk_lock+0xa6>
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	200029b4 	.word	0x200029b4

080043e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80043ee:	2300      	movs	r3, #0
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	e002      	b.n	80043fa <enq_lock+0x12>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3301      	adds	r3, #1
 80043f8:	607b      	str	r3, [r7, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d806      	bhi.n	800440e <enq_lock+0x26>
 8004400:	4a09      	ldr	r2, [pc, #36]	; (8004428 <enq_lock+0x40>)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	4413      	add	r3, r2
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f2      	bne.n	80043f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b02      	cmp	r3, #2
 8004412:	bf14      	ite	ne
 8004414:	2301      	movne	r3, #1
 8004416:	2300      	moveq	r3, #0
 8004418:	b2db      	uxtb	r3, r3
}
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	200029b4 	.word	0x200029b4

0800442c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004436:	2300      	movs	r3, #0
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	e01f      	b.n	800447c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800443c:	4a41      	ldr	r2, [pc, #260]	; (8004544 <inc_lock+0x118>)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	4413      	add	r3, r2
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d113      	bne.n	8004476 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800444e:	4a3d      	ldr	r2, [pc, #244]	; (8004544 <inc_lock+0x118>)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	4413      	add	r3, r2
 8004456:	3304      	adds	r3, #4
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800445e:	429a      	cmp	r2, r3
 8004460:	d109      	bne.n	8004476 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004462:	4a38      	ldr	r2, [pc, #224]	; (8004544 <inc_lock+0x118>)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	4413      	add	r3, r2
 800446a:	3308      	adds	r3, #8
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004472:	429a      	cmp	r2, r3
 8004474:	d006      	beq.n	8004484 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3301      	adds	r3, #1
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d9dc      	bls.n	800443c <inc_lock+0x10>
 8004482:	e000      	b.n	8004486 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004484:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d132      	bne.n	80044f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	e002      	b.n	8004498 <inc_lock+0x6c>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3301      	adds	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d806      	bhi.n	80044ac <inc_lock+0x80>
 800449e:	4a29      	ldr	r2, [pc, #164]	; (8004544 <inc_lock+0x118>)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	4413      	add	r3, r2
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f2      	bne.n	8004492 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d101      	bne.n	80044b6 <inc_lock+0x8a>
 80044b2:	2300      	movs	r3, #0
 80044b4:	e040      	b.n	8004538 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	4922      	ldr	r1, [pc, #136]	; (8004544 <inc_lock+0x118>)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	440b      	add	r3, r1
 80044c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	491e      	ldr	r1, [pc, #120]	; (8004544 <inc_lock+0x118>)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	440b      	add	r3, r1
 80044d0:	3304      	adds	r3, #4
 80044d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	695a      	ldr	r2, [r3, #20]
 80044d8:	491a      	ldr	r1, [pc, #104]	; (8004544 <inc_lock+0x118>)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	440b      	add	r3, r1
 80044e0:	3308      	adds	r3, #8
 80044e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80044e4:	4a17      	ldr	r2, [pc, #92]	; (8004544 <inc_lock+0x118>)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	4413      	add	r3, r2
 80044ec:	330c      	adds	r3, #12
 80044ee:	2200      	movs	r2, #0
 80044f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d009      	beq.n	800450c <inc_lock+0xe0>
 80044f8:	4a12      	ldr	r2, [pc, #72]	; (8004544 <inc_lock+0x118>)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	4413      	add	r3, r2
 8004500:	330c      	adds	r3, #12
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <inc_lock+0xe0>
 8004508:	2300      	movs	r3, #0
 800450a:	e015      	b.n	8004538 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d108      	bne.n	8004524 <inc_lock+0xf8>
 8004512:	4a0c      	ldr	r2, [pc, #48]	; (8004544 <inc_lock+0x118>)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	4413      	add	r3, r2
 800451a:	330c      	adds	r3, #12
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	3301      	adds	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	e001      	b.n	8004528 <inc_lock+0xfc>
 8004524:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004528:	4906      	ldr	r1, [pc, #24]	; (8004544 <inc_lock+0x118>)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	440b      	add	r3, r1
 8004530:	330c      	adds	r3, #12
 8004532:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3301      	adds	r3, #1
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	200029b4 	.word	0x200029b4

08004548 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3b01      	subs	r3, #1
 8004554:	607b      	str	r3, [r7, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d825      	bhi.n	80045a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800455c:	4a17      	ldr	r2, [pc, #92]	; (80045bc <dec_lock+0x74>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	4413      	add	r3, r2
 8004564:	330c      	adds	r3, #12
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800456a:	89fb      	ldrh	r3, [r7, #14]
 800456c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004570:	d101      	bne.n	8004576 <dec_lock+0x2e>
 8004572:	2300      	movs	r3, #0
 8004574:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004576:	89fb      	ldrh	r3, [r7, #14]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <dec_lock+0x3a>
 800457c:	89fb      	ldrh	r3, [r7, #14]
 800457e:	3b01      	subs	r3, #1
 8004580:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004582:	4a0e      	ldr	r2, [pc, #56]	; (80045bc <dec_lock+0x74>)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	4413      	add	r3, r2
 800458a:	330c      	adds	r3, #12
 800458c:	89fa      	ldrh	r2, [r7, #14]
 800458e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004590:	89fb      	ldrh	r3, [r7, #14]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d105      	bne.n	80045a2 <dec_lock+0x5a>
 8004596:	4a09      	ldr	r2, [pc, #36]	; (80045bc <dec_lock+0x74>)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	4413      	add	r3, r2
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	737b      	strb	r3, [r7, #13]
 80045a6:	e001      	b.n	80045ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80045a8:	2302      	movs	r3, #2
 80045aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80045ac:	7b7b      	ldrb	r3, [r7, #13]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	200029b4 	.word	0x200029b4

080045c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	e010      	b.n	80045f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80045ce:	4a0d      	ldr	r2, [pc, #52]	; (8004604 <clear_lock+0x44>)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	4413      	add	r3, r2
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d105      	bne.n	80045ea <clear_lock+0x2a>
 80045de:	4a09      	ldr	r2, [pc, #36]	; (8004604 <clear_lock+0x44>)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	4413      	add	r3, r2
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3301      	adds	r3, #1
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d9eb      	bls.n	80045ce <clear_lock+0xe>
	}
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	200029b4 	.word	0x200029b4

08004608 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	78db      	ldrb	r3, [r3, #3]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d034      	beq.n	8004686 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004620:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	7858      	ldrb	r0, [r3, #1]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800462c:	2301      	movs	r3, #1
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	f7ff fd40 	bl	80040b4 <disk_write>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <sync_window+0x38>
			res = FR_DISK_ERR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
 800463e:	e022      	b.n	8004686 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	1ad2      	subs	r2, r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	429a      	cmp	r2, r3
 8004654:	d217      	bcs.n	8004686 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	789b      	ldrb	r3, [r3, #2]
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	e010      	b.n	8004680 <sync_window+0x78>
					wsect += fs->fsize;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4413      	add	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	7858      	ldrb	r0, [r3, #1]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004672:	2301      	movs	r3, #1
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	f7ff fd1d 	bl	80040b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	3b01      	subs	r3, #1
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d8eb      	bhi.n	800465e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004686:	7bfb      	ldrb	r3, [r7, #15]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d01b      	beq.n	80046e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7ff ffad 	bl	8004608 <sync_window>
 80046ae:	4603      	mov	r3, r0
 80046b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d113      	bne.n	80046e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	7858      	ldrb	r0, [r3, #1]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80046c2:	2301      	movs	r3, #1
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	f7ff fcd5 	bl	8004074 <disk_read>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d004      	beq.n	80046da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80046d0:	f04f 33ff 	mov.w	r3, #4294967295
 80046d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff ff87 	bl	8004608 <sync_window>
 80046fa:	4603      	mov	r3, r0
 80046fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d159      	bne.n	80047b8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d149      	bne.n	80047a0 <sync_fs+0xb4>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	791b      	ldrb	r3, [r3, #4]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d145      	bne.n	80047a0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	899b      	ldrh	r3, [r3, #12]
 800471e:	461a      	mov	r2, r3
 8004720:	2100      	movs	r1, #0
 8004722:	f7ff fda8 	bl	8004276 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3338      	adds	r3, #56	; 0x38
 800472a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800472e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fd37 	bl	80041a6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3338      	adds	r3, #56	; 0x38
 800473c:	4921      	ldr	r1, [pc, #132]	; (80047c4 <sync_fs+0xd8>)
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fd4c 	bl	80041dc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3338      	adds	r3, #56	; 0x38
 8004748:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800474c:	491e      	ldr	r1, [pc, #120]	; (80047c8 <sync_fs+0xdc>)
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fd44 	bl	80041dc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3338      	adds	r3, #56	; 0x38
 8004758:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f7ff fd3a 	bl	80041dc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3338      	adds	r3, #56	; 0x38
 800476c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	4619      	mov	r1, r3
 8004776:	4610      	mov	r0, r2
 8004778:	f7ff fd30 	bl	80041dc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	7858      	ldrb	r0, [r3, #1]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004794:	2301      	movs	r3, #1
 8004796:	f7ff fc8d 	bl	80040b4 <disk_write>
			fs->fsi_flag = 0;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	2200      	movs	r2, #0
 80047a6:	2100      	movs	r1, #0
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fca3 	bl	80040f4 <disk_ioctl>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <sync_fs+0xcc>
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	41615252 	.word	0x41615252
 80047c8:	61417272 	.word	0x61417272

080047cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	3b02      	subs	r3, #2
 80047da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	3b02      	subs	r3, #2
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d301      	bcc.n	80047ec <clust2sect+0x20>
 80047e8:	2300      	movs	r3, #0
 80047ea:	e008      	b.n	80047fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	895b      	ldrh	r3, [r3, #10]
 80047f0:	461a      	mov	r2, r3
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	fb03 f202 	mul.w	r2, r3, r2
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	4413      	add	r3, r2
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b086      	sub	sp, #24
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d904      	bls.n	800482a <get_fat+0x20>
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d302      	bcc.n	8004830 <get_fat+0x26>
		val = 1;	/* Internal error */
 800482a:	2301      	movs	r3, #1
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	e0b7      	b.n	80049a0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004830:	f04f 33ff 	mov.w	r3, #4294967295
 8004834:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d05a      	beq.n	80048f4 <get_fat+0xea>
 800483e:	2b03      	cmp	r3, #3
 8004840:	d07d      	beq.n	800493e <get_fat+0x134>
 8004842:	2b01      	cmp	r3, #1
 8004844:	f040 80a2 	bne.w	800498c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	085b      	lsrs	r3, r3, #1
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	899b      	ldrh	r3, [r3, #12]
 800485e:	4619      	mov	r1, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	fbb3 f3f1 	udiv	r3, r3, r1
 8004866:	4413      	add	r3, r2
 8004868:	4619      	mov	r1, r3
 800486a:	6938      	ldr	r0, [r7, #16]
 800486c:	f7ff ff10 	bl	8004690 <move_window>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	f040 808d 	bne.w	8004992 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	60fa      	str	r2, [r7, #12]
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	8992      	ldrh	r2, [r2, #12]
 8004882:	fbb3 f1f2 	udiv	r1, r3, r2
 8004886:	fb02 f201 	mul.w	r2, r2, r1
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4413      	add	r3, r2
 8004890:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004894:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	899b      	ldrh	r3, [r3, #12]
 800489e:	4619      	mov	r1, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80048a6:	4413      	add	r3, r2
 80048a8:	4619      	mov	r1, r3
 80048aa:	6938      	ldr	r0, [r7, #16]
 80048ac:	f7ff fef0 	bl	8004690 <move_window>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d16f      	bne.n	8004996 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	899b      	ldrh	r3, [r3, #12]
 80048ba:	461a      	mov	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	fbb3 f1f2 	udiv	r1, r3, r2
 80048c2:	fb02 f201 	mul.w	r2, r2, r1
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4413      	add	r3, r2
 80048cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	461a      	mov	r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <get_fat+0xe0>
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	e002      	b.n	80048f0 <get_fat+0xe6>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f0:	617b      	str	r3, [r7, #20]
			break;
 80048f2:	e055      	b.n	80049a0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	899b      	ldrh	r3, [r3, #12]
 80048fc:	085b      	lsrs	r3, r3, #1
 80048fe:	b29b      	uxth	r3, r3
 8004900:	4619      	mov	r1, r3
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	fbb3 f3f1 	udiv	r3, r3, r1
 8004908:	4413      	add	r3, r2
 800490a:	4619      	mov	r1, r3
 800490c:	6938      	ldr	r0, [r7, #16]
 800490e:	f7ff febf 	bl	8004690 <move_window>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d140      	bne.n	800499a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	8992      	ldrh	r2, [r2, #12]
 8004926:	fbb3 f0f2 	udiv	r0, r3, r2
 800492a:	fb02 f200 	mul.w	r2, r2, r0
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	440b      	add	r3, r1
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff fbfc 	bl	8004130 <ld_word>
 8004938:	4603      	mov	r3, r0
 800493a:	617b      	str	r3, [r7, #20]
			break;
 800493c:	e030      	b.n	80049a0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	899b      	ldrh	r3, [r3, #12]
 8004946:	089b      	lsrs	r3, r3, #2
 8004948:	b29b      	uxth	r3, r3
 800494a:	4619      	mov	r1, r3
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004952:	4413      	add	r3, r2
 8004954:	4619      	mov	r1, r3
 8004956:	6938      	ldr	r0, [r7, #16]
 8004958:	f7ff fe9a 	bl	8004690 <move_window>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d11d      	bne.n	800499e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	8992      	ldrh	r2, [r2, #12]
 8004970:	fbb3 f0f2 	udiv	r0, r3, r2
 8004974:	fb02 f200 	mul.w	r2, r2, r0
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	440b      	add	r3, r1
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fbef 	bl	8004160 <ld_dword>
 8004982:	4603      	mov	r3, r0
 8004984:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004988:	617b      	str	r3, [r7, #20]
			break;
 800498a:	e009      	b.n	80049a0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800498c:	2301      	movs	r3, #1
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	e006      	b.n	80049a0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004992:	bf00      	nop
 8004994:	e004      	b.n	80049a0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004996:	bf00      	nop
 8004998:	e002      	b.n	80049a0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800499e:	bf00      	nop
		}
	}

	return val;
 80049a0:	697b      	ldr	r3, [r7, #20]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80049aa:	b590      	push	{r4, r7, lr}
 80049ac:	b089      	sub	sp, #36	; 0x24
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80049b6:	2302      	movs	r3, #2
 80049b8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	f240 8106 	bls.w	8004bce <put_fat+0x224>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	f080 8100 	bcs.w	8004bce <put_fat+0x224>
		switch (fs->fs_type) {
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	f000 8088 	beq.w	8004ae8 <put_fat+0x13e>
 80049d8:	2b03      	cmp	r3, #3
 80049da:	f000 80b0 	beq.w	8004b3e <put_fat+0x194>
 80049de:	2b01      	cmp	r3, #1
 80049e0:	f040 80f5 	bne.w	8004bce <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	61bb      	str	r3, [r7, #24]
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4413      	add	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	899b      	ldrh	r3, [r3, #12]
 80049fa:	4619      	mov	r1, r3
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a02:	4413      	add	r3, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff fe42 	bl	8004690 <move_window>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a10:	7ffb      	ldrb	r3, [r7, #31]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f040 80d4 	bne.w	8004bc0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	61ba      	str	r2, [r7, #24]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	8992      	ldrh	r2, [r2, #12]
 8004a28:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a2c:	fb02 f200 	mul.w	r2, r2, r0
 8004a30:	1a9b      	subs	r3, r3, r2
 8004a32:	440b      	add	r3, r1
 8004a34:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00d      	beq.n	8004a5c <put_fat+0xb2>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	b25b      	sxtb	r3, r3
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	b25a      	sxtb	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	b25b      	sxtb	r3, r3
 8004a54:	4313      	orrs	r3, r2
 8004a56:	b25b      	sxtb	r3, r3
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	e001      	b.n	8004a60 <put_fat+0xb6>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2201      	movs	r2, #1
 8004a68:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	899b      	ldrh	r3, [r3, #12]
 8004a72:	4619      	mov	r1, r3
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a7a:	4413      	add	r3, r2
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f7ff fe06 	bl	8004690 <move_window>
 8004a84:	4603      	mov	r3, r0
 8004a86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a88:	7ffb      	ldrb	r3, [r7, #31]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f040 809a 	bne.w	8004bc4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	899b      	ldrh	r3, [r3, #12]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004aa2:	fb02 f200 	mul.w	r2, r2, r0
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <put_fat+0x114>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	e00e      	b.n	8004adc <put_fat+0x132>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	b25b      	sxtb	r3, r3
 8004ac4:	f023 030f 	bic.w	r3, r3, #15
 8004ac8:	b25a      	sxtb	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	0a1b      	lsrs	r3, r3, #8
 8004ace:	b25b      	sxtb	r3, r3
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	b25b      	sxtb	r3, r3
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	b25b      	sxtb	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	70da      	strb	r2, [r3, #3]
			break;
 8004ae6:	e072      	b.n	8004bce <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	899b      	ldrh	r3, [r3, #12]
 8004af0:	085b      	lsrs	r3, r3, #1
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	4619      	mov	r1, r3
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004afc:	4413      	add	r3, r2
 8004afe:	4619      	mov	r1, r3
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f7ff fdc5 	bl	8004690 <move_window>
 8004b06:	4603      	mov	r3, r0
 8004b08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b0a:	7ffb      	ldrb	r3, [r7, #31]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d15b      	bne.n	8004bc8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	8992      	ldrh	r2, [r2, #12]
 8004b1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b22:	fb02 f200 	mul.w	r2, r2, r0
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	440b      	add	r3, r1
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	b292      	uxth	r2, r2
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fb38 	bl	80041a6 <st_word>
			fs->wflag = 1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	70da      	strb	r2, [r3, #3]
			break;
 8004b3c:	e047      	b.n	8004bce <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	899b      	ldrh	r3, [r3, #12]
 8004b46:	089b      	lsrs	r3, r3, #2
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b52:	4413      	add	r3, r2
 8004b54:	4619      	mov	r1, r3
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f7ff fd9a 	bl	8004690 <move_window>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b60:	7ffb      	ldrb	r3, [r7, #31]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d132      	bne.n	8004bcc <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	8992      	ldrh	r2, [r2, #12]
 8004b7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b7e:	fb02 f200 	mul.w	r2, r2, r0
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	440b      	add	r3, r1
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff faea 	bl	8004160 <ld_dword>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004b92:	4323      	orrs	r3, r4
 8004b94:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	8992      	ldrh	r2, [r2, #12]
 8004ba4:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ba8:	fb02 f200 	mul.w	r2, r2, r0
 8004bac:	1a9b      	subs	r3, r3, r2
 8004bae:	440b      	add	r3, r1
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff fb12 	bl	80041dc <st_dword>
			fs->wflag = 1;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	70da      	strb	r2, [r3, #3]
			break;
 8004bbe:	e006      	b.n	8004bce <put_fat+0x224>
			if (res != FR_OK) break;
 8004bc0:	bf00      	nop
 8004bc2:	e004      	b.n	8004bce <put_fat+0x224>
			if (res != FR_OK) break;
 8004bc4:	bf00      	nop
 8004bc6:	e002      	b.n	8004bce <put_fat+0x224>
			if (res != FR_OK) break;
 8004bc8:	bf00      	nop
 8004bca:	e000      	b.n	8004bce <put_fat+0x224>
			if (res != FR_OK) break;
 8004bcc:	bf00      	nop
		}
	}
	return res;
 8004bce:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3724      	adds	r7, #36	; 0x24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd90      	pop	{r4, r7, pc}

08004bd8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d904      	bls.n	8004bfe <remove_chain+0x26>
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d301      	bcc.n	8004c02 <remove_chain+0x2a>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e04b      	b.n	8004c9a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00c      	beq.n	8004c22 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004c08:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	69b8      	ldr	r0, [r7, #24]
 8004c10:	f7ff fecb 	bl	80049aa <put_fat>
 8004c14:	4603      	mov	r3, r0
 8004c16:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004c18:	7ffb      	ldrb	r3, [r7, #31]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <remove_chain+0x4a>
 8004c1e:	7ffb      	ldrb	r3, [r7, #31]
 8004c20:	e03b      	b.n	8004c9a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7ff fdf0 	bl	800480a <get_fat>
 8004c2a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d031      	beq.n	8004c96 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <remove_chain+0x64>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e02e      	b.n	8004c9a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c42:	d101      	bne.n	8004c48 <remove_chain+0x70>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e028      	b.n	8004c9a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004c48:	2200      	movs	r2, #0
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	69b8      	ldr	r0, [r7, #24]
 8004c4e:	f7ff feac 	bl	80049aa <put_fat>
 8004c52:	4603      	mov	r3, r0
 8004c54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004c56:	7ffb      	ldrb	r3, [r7, #31]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <remove_chain+0x88>
 8004c5c:	7ffb      	ldrb	r3, [r7, #31]
 8004c5e:	e01c      	b.n	8004c9a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	699a      	ldr	r2, [r3, #24]
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	3b02      	subs	r3, #2
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d20b      	bcs.n	8004c86 <remove_chain+0xae>
			fs->free_clst++;
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	791b      	ldrb	r3, [r3, #4]
 8004c7c:	f043 0301 	orr.w	r3, r3, #1
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d3c6      	bcc.n	8004c22 <remove_chain+0x4a>
 8004c94:	e000      	b.n	8004c98 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004c96:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b088      	sub	sp, #32
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10d      	bne.n	8004cd4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d004      	beq.n	8004cce <create_chain+0x2c>
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d31b      	bcc.n	8004d06 <create_chain+0x64>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	61bb      	str	r3, [r7, #24]
 8004cd2:	e018      	b.n	8004d06 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004cd4:	6839      	ldr	r1, [r7, #0]
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff fd97 	bl	800480a <get_fat>
 8004cdc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d801      	bhi.n	8004ce8 <create_chain+0x46>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e070      	b.n	8004dca <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d101      	bne.n	8004cf4 <create_chain+0x52>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	e06a      	b.n	8004dca <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d201      	bcs.n	8004d02 <create_chain+0x60>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	e063      	b.n	8004dca <create_chain+0x128>
		scl = clst;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	69fa      	ldr	r2, [r7, #28]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d307      	bcc.n	8004d2a <create_chain+0x88>
				ncl = 2;
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d901      	bls.n	8004d2a <create_chain+0x88>
 8004d26:	2300      	movs	r3, #0
 8004d28:	e04f      	b.n	8004dca <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004d2a:	69f9      	ldr	r1, [r7, #28]
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff fd6c 	bl	800480a <get_fat>
 8004d32:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00e      	beq.n	8004d58 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d003      	beq.n	8004d48 <create_chain+0xa6>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d46:	d101      	bne.n	8004d4c <create_chain+0xaa>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	e03e      	b.n	8004dca <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004d4c:	69fa      	ldr	r2, [r7, #28]
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d1da      	bne.n	8004d0a <create_chain+0x68>
 8004d54:	2300      	movs	r3, #0
 8004d56:	e038      	b.n	8004dca <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004d58:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d5e:	69f9      	ldr	r1, [r7, #28]
 8004d60:	6938      	ldr	r0, [r7, #16]
 8004d62:	f7ff fe22 	bl	80049aa <put_fat>
 8004d66:	4603      	mov	r3, r0
 8004d68:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d109      	bne.n	8004d84 <create_chain+0xe2>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d006      	beq.n	8004d84 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	6839      	ldr	r1, [r7, #0]
 8004d7a:	6938      	ldr	r0, [r7, #16]
 8004d7c:	f7ff fe15 	bl	80049aa <put_fat>
 8004d80:	4603      	mov	r3, r0
 8004d82:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004d84:	7dfb      	ldrb	r3, [r7, #23]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d116      	bne.n	8004db8 <create_chain+0x116>
		fs->last_clst = ncl;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	69fa      	ldr	r2, [r7, #28]
 8004d8e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	699a      	ldr	r2, [r3, #24]
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	3b02      	subs	r3, #2
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d804      	bhi.n	8004da8 <create_chain+0x106>
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	1e5a      	subs	r2, r3, #1
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	791b      	ldrb	r3, [r3, #4]
 8004dac:	f043 0301 	orr.w	r3, r3, #1
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	711a      	strb	r2, [r3, #4]
 8004db6:	e007      	b.n	8004dc8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004db8:	7dfb      	ldrb	r3, [r7, #23]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d102      	bne.n	8004dc4 <create_chain+0x122>
 8004dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc2:	e000      	b.n	8004dc6 <create_chain+0x124>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004dc8:	69fb      	ldr	r3, [r7, #28]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3720      	adds	r7, #32
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b087      	sub	sp, #28
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	3304      	adds	r3, #4
 8004de8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	899b      	ldrh	r3, [r3, #12]
 8004dee:	461a      	mov	r2, r3
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	8952      	ldrh	r2, [r2, #10]
 8004dfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1d1a      	adds	r2, r3, #4
 8004e04:	613a      	str	r2, [r7, #16]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <clmt_clust+0x42>
 8004e10:	2300      	movs	r3, #0
 8004e12:	e010      	b.n	8004e36 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d307      	bcc.n	8004e2c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	3304      	adds	r3, #4
 8004e28:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e2a:	e7e9      	b.n	8004e00 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004e2c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	4413      	add	r3, r2
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b086      	sub	sp, #24
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e58:	d204      	bcs.n	8004e64 <dir_sdi+0x22>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	f003 031f 	and.w	r3, r3, #31
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004e64:	2302      	movs	r3, #2
 8004e66:	e071      	b.n	8004f4c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <dir_sdi+0x46>
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d902      	bls.n	8004e88 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e86:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10c      	bne.n	8004ea8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	8912      	ldrh	r2, [r2, #8]
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d301      	bcc.n	8004e9e <dir_sdi+0x5c>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e056      	b.n	8004f4c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	61da      	str	r2, [r3, #28]
 8004ea6:	e02d      	b.n	8004f04 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	895b      	ldrh	r3, [r3, #10]
 8004eac:	461a      	mov	r2, r3
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	899b      	ldrh	r3, [r3, #12]
 8004eb2:	fb03 f302 	mul.w	r3, r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004eb8:	e019      	b.n	8004eee <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6979      	ldr	r1, [r7, #20]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff fca3 	bl	800480a <get_fat>
 8004ec4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d101      	bne.n	8004ed2 <dir_sdi+0x90>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e03c      	b.n	8004f4c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d904      	bls.n	8004ee2 <dir_sdi+0xa0>
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d301      	bcc.n	8004ee6 <dir_sdi+0xa4>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e032      	b.n	8004f4c <dir_sdi+0x10a>
			ofs -= csz;
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d2e1      	bcs.n	8004eba <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004ef6:	6979      	ldr	r1, [r7, #20]
 8004ef8:	6938      	ldr	r0, [r7, #16]
 8004efa:	f7ff fc67 	bl	80047cc <clust2sect>
 8004efe:	4602      	mov	r2, r0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <dir_sdi+0xd4>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e01a      	b.n	8004f4c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69da      	ldr	r2, [r3, #28]
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	899b      	ldrh	r3, [r3, #12]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f26:	441a      	add	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	899b      	ldrh	r3, [r3, #12]
 8004f36:	461a      	mov	r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f3e:	fb02 f200 	mul.w	r2, r2, r0
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	18ca      	adds	r2, r1, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	3320      	adds	r3, #32
 8004f6a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <dir_next+0x28>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f7a:	d301      	bcc.n	8004f80 <dir_next+0x2c>
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	e0bb      	b.n	80050f8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	899b      	ldrh	r3, [r3, #12]
 8004f84:	461a      	mov	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f8c:	fb02 f201 	mul.w	r2, r2, r1
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f040 809d 	bne.w	80050d2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10b      	bne.n	8004fc2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	8912      	ldrh	r2, [r2, #8]
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	f0c0 808d 	bcc.w	80050d2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	61da      	str	r2, [r3, #28]
 8004fbe:	2304      	movs	r3, #4
 8004fc0:	e09a      	b.n	80050f8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	899b      	ldrh	r3, [r3, #12]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	8952      	ldrh	r2, [r2, #10]
 8004fd2:	3a01      	subs	r2, #1
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d17b      	bne.n	80050d2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	f7ff fc11 	bl	800480a <get_fat>
 8004fe8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d801      	bhi.n	8004ff4 <dir_next+0xa0>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e081      	b.n	80050f8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffa:	d101      	bne.n	8005000 <dir_next+0xac>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e07b      	b.n	80050f8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	429a      	cmp	r2, r3
 8005008:	d359      	bcc.n	80050be <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d104      	bne.n	800501a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	61da      	str	r2, [r3, #28]
 8005016:	2304      	movs	r3, #4
 8005018:	e06e      	b.n	80050f8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	4619      	mov	r1, r3
 8005022:	4610      	mov	r0, r2
 8005024:	f7ff fe3d 	bl	8004ca2 <create_chain>
 8005028:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <dir_next+0xe0>
 8005030:	2307      	movs	r3, #7
 8005032:	e061      	b.n	80050f8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <dir_next+0xea>
 800503a:	2302      	movs	r3, #2
 800503c:	e05c      	b.n	80050f8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005044:	d101      	bne.n	800504a <dir_next+0xf6>
 8005046:	2301      	movs	r3, #1
 8005048:	e056      	b.n	80050f8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f7ff fadc 	bl	8004608 <sync_window>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <dir_next+0x106>
 8005056:	2301      	movs	r3, #1
 8005058:	e04e      	b.n	80050f8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	899b      	ldrh	r3, [r3, #12]
 8005064:	461a      	mov	r2, r3
 8005066:	2100      	movs	r1, #0
 8005068:	f7ff f905 	bl	8004276 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800506c:	2300      	movs	r3, #0
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	6979      	ldr	r1, [r7, #20]
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7ff fbaa 	bl	80047cc <clust2sect>
 8005078:	4602      	mov	r2, r0
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	635a      	str	r2, [r3, #52]	; 0x34
 800507e:	e012      	b.n	80050a6 <dir_next+0x152>
						fs->wflag = 1;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7ff fabe 	bl	8004608 <sync_window>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <dir_next+0x142>
 8005092:	2301      	movs	r3, #1
 8005094:	e030      	b.n	80050f8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	3301      	adds	r3, #1
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	635a      	str	r2, [r3, #52]	; 0x34
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	895b      	ldrh	r3, [r3, #10]
 80050aa:	461a      	mov	r2, r3
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d3e6      	bcc.n	8005080 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad2      	subs	r2, r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80050c4:	6979      	ldr	r1, [r7, #20]
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f7ff fb80 	bl	80047cc <clust2sect>
 80050cc:	4602      	mov	r2, r0
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	899b      	ldrh	r3, [r3, #12]
 80050e2:	461a      	mov	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80050ea:	fb02 f200 	mul.w	r2, r2, r0
 80050ee:	1a9b      	subs	r3, r3, r2
 80050f0:	18ca      	adds	r2, r1, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005110:	2100      	movs	r1, #0
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff fe95 	bl	8004e42 <dir_sdi>
 8005118:	4603      	mov	r3, r0
 800511a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800511c:	7dfb      	ldrb	r3, [r7, #23]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d12b      	bne.n	800517a <dir_alloc+0x7a>
		n = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	4619      	mov	r1, r3
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f7ff faaf 	bl	8004690 <move_window>
 8005132:	4603      	mov	r3, r0
 8005134:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005136:	7dfb      	ldrb	r3, [r7, #23]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d11d      	bne.n	8005178 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2be5      	cmp	r3, #229	; 0xe5
 8005144:	d004      	beq.n	8005150 <dir_alloc+0x50>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d107      	bne.n	8005160 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	3301      	adds	r3, #1
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d102      	bne.n	8005164 <dir_alloc+0x64>
 800515e:	e00c      	b.n	800517a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005160:	2300      	movs	r3, #0
 8005162:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005164:	2101      	movs	r1, #1
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7ff fef4 	bl	8004f54 <dir_next>
 800516c:	4603      	mov	r3, r0
 800516e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005170:	7dfb      	ldrb	r3, [r7, #23]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0d7      	beq.n	8005126 <dir_alloc+0x26>
 8005176:	e000      	b.n	800517a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005178:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800517a:	7dfb      	ldrb	r3, [r7, #23]
 800517c:	2b04      	cmp	r3, #4
 800517e:	d101      	bne.n	8005184 <dir_alloc+0x84>
 8005180:	2307      	movs	r3, #7
 8005182:	75fb      	strb	r3, [r7, #23]
	return res;
 8005184:	7dfb      	ldrb	r3, [r7, #23]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	331a      	adds	r3, #26
 800519c:	4618      	mov	r0, r3
 800519e:	f7fe ffc7 	bl	8004130 <ld_word>
 80051a2:	4603      	mov	r3, r0
 80051a4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d109      	bne.n	80051c2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	3314      	adds	r3, #20
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe ffbc 	bl	8004130 <ld_word>
 80051b8:	4603      	mov	r3, r0
 80051ba:	041b      	lsls	r3, r3, #16
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80051c2:	68fb      	ldr	r3, [r7, #12]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	331a      	adds	r3, #26
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	b292      	uxth	r2, r2
 80051e0:	4611      	mov	r1, r2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fe ffdf 	bl	80041a6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d109      	bne.n	8005204 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f103 0214 	add.w	r2, r3, #20
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	0c1b      	lsrs	r3, r3, #16
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	4619      	mov	r1, r3
 80051fe:	4610      	mov	r0, r2
 8005200:	f7fe ffd1 	bl	80041a6 <st_word>
	}
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800520c:	b590      	push	{r4, r7, lr}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	331a      	adds	r3, #26
 800521a:	4618      	mov	r0, r3
 800521c:	f7fe ff88 	bl	8004130 <ld_word>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <cmp_lfn+0x1e>
 8005226:	2300      	movs	r3, #0
 8005228:	e059      	b.n	80052de <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005232:	1e5a      	subs	r2, r3, #1
 8005234:	4613      	mov	r3, r2
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	4413      	add	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005240:	2301      	movs	r3, #1
 8005242:	81fb      	strh	r3, [r7, #14]
 8005244:	2300      	movs	r3, #0
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	e033      	b.n	80052b2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800524a:	4a27      	ldr	r2, [pc, #156]	; (80052e8 <cmp_lfn+0xdc>)
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4413      	add	r3, r2
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	4413      	add	r3, r2
 8005258:	4618      	mov	r0, r3
 800525a:	f7fe ff69 	bl	8004130 <ld_word>
 800525e:	4603      	mov	r3, r0
 8005260:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005262:	89fb      	ldrh	r3, [r7, #14]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01a      	beq.n	800529e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2bfe      	cmp	r3, #254	; 0xfe
 800526c:	d812      	bhi.n	8005294 <cmp_lfn+0x88>
 800526e:	89bb      	ldrh	r3, [r7, #12]
 8005270:	4618      	mov	r0, r3
 8005272:	f001 fff1 	bl	8007258 <ff_wtoupper>
 8005276:	4603      	mov	r3, r0
 8005278:	461c      	mov	r4, r3
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	617a      	str	r2, [r7, #20]
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	4413      	add	r3, r2
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f001 ffe5 	bl	8007258 <ff_wtoupper>
 800528e:	4603      	mov	r3, r0
 8005290:	429c      	cmp	r4, r3
 8005292:	d001      	beq.n	8005298 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005294:	2300      	movs	r3, #0
 8005296:	e022      	b.n	80052de <cmp_lfn+0xd2>
			}
			wc = uc;
 8005298:	89bb      	ldrh	r3, [r7, #12]
 800529a:	81fb      	strh	r3, [r7, #14]
 800529c:	e006      	b.n	80052ac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800529e:	89bb      	ldrh	r3, [r7, #12]
 80052a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d001      	beq.n	80052ac <cmp_lfn+0xa0>
 80052a8:	2300      	movs	r3, #0
 80052aa:	e018      	b.n	80052de <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	3301      	adds	r3, #1
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	2b0c      	cmp	r3, #12
 80052b6:	d9c8      	bls.n	800524a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00b      	beq.n	80052dc <cmp_lfn+0xd0>
 80052c4:	89fb      	ldrh	r3, [r7, #14]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d008      	beq.n	80052dc <cmp_lfn+0xd0>
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	4413      	add	r3, r2
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <cmp_lfn+0xd0>
 80052d8:	2300      	movs	r3, #0
 80052da:	e000      	b.n	80052de <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80052dc:	2301      	movs	r3, #1
}
 80052de:	4618      	mov	r0, r3
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd90      	pop	{r4, r7, pc}
 80052e6:	bf00      	nop
 80052e8:	08012da8 	.word	0x08012da8

080052ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	4611      	mov	r1, r2
 80052f8:	461a      	mov	r2, r3
 80052fa:	460b      	mov	r3, r1
 80052fc:	71fb      	strb	r3, [r7, #7]
 80052fe:	4613      	mov	r3, r2
 8005300:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	330d      	adds	r3, #13
 8005306:	79ba      	ldrb	r2, [r7, #6]
 8005308:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	330b      	adds	r3, #11
 800530e:	220f      	movs	r2, #15
 8005310:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	330c      	adds	r3, #12
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	331a      	adds	r3, #26
 800531e:	2100      	movs	r1, #0
 8005320:	4618      	mov	r0, r3
 8005322:	f7fe ff40 	bl	80041a6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	1e5a      	subs	r2, r3, #1
 800532a:	4613      	mov	r3, r2
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005336:	2300      	movs	r3, #0
 8005338:	82fb      	strh	r3, [r7, #22]
 800533a:	2300      	movs	r3, #0
 800533c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800533e:	8afb      	ldrh	r3, [r7, #22]
 8005340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005344:	4293      	cmp	r3, r2
 8005346:	d007      	beq.n	8005358 <put_lfn+0x6c>
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	61fa      	str	r2, [r7, #28]
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005358:	4a17      	ldr	r2, [pc, #92]	; (80053b8 <put_lfn+0xcc>)
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	4413      	add	r3, r2
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	4413      	add	r3, r2
 8005366:	8afa      	ldrh	r2, [r7, #22]
 8005368:	4611      	mov	r1, r2
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe ff1b 	bl	80041a6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005370:	8afb      	ldrh	r3, [r7, #22]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <put_lfn+0x90>
 8005376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800537a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	3301      	adds	r3, #1
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	2b0c      	cmp	r3, #12
 8005386:	d9da      	bls.n	800533e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005388:	8afb      	ldrh	r3, [r7, #22]
 800538a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800538e:	4293      	cmp	r3, r2
 8005390:	d006      	beq.n	80053a0 <put_lfn+0xb4>
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4413      	add	r3, r2
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d103      	bne.n	80053a8 <put_lfn+0xbc>
 80053a0:	79fb      	ldrb	r3, [r7, #7]
 80053a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053a6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	79fa      	ldrb	r2, [r7, #7]
 80053ac:	701a      	strb	r2, [r3, #0]
}
 80053ae:	bf00      	nop
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	08012da8 	.word	0x08012da8

080053bc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08c      	sub	sp, #48	; 0x30
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80053ca:	220b      	movs	r2, #11
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7fe ff30 	bl	8004234 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b05      	cmp	r3, #5
 80053d8:	d92b      	bls.n	8005432 <gen_numname+0x76>
		sr = seq;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80053de:	e022      	b.n	8005426 <gen_numname+0x6a>
			wc = *lfn++;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	1c9a      	adds	r2, r3, #2
 80053e4:	607a      	str	r2, [r7, #4]
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80053ea:	2300      	movs	r3, #0
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ee:	e017      	b.n	8005420 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	005a      	lsls	r2, r3, #1
 80053f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	4413      	add	r3, r2
 80053fc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80053fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005400:	085b      	lsrs	r3, r3, #1
 8005402:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <gen_numname+0x5e>
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005414:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005418:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800541a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541c:	3301      	adds	r3, #1
 800541e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	2b0f      	cmp	r3, #15
 8005424:	d9e4      	bls.n	80053f0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1d8      	bne.n	80053e0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005432:	2307      	movs	r3, #7
 8005434:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	b2db      	uxtb	r3, r3
 8005440:	3330      	adds	r3, #48	; 0x30
 8005442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005446:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800544a:	2b39      	cmp	r3, #57	; 0x39
 800544c:	d904      	bls.n	8005458 <gen_numname+0x9c>
 800544e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005452:	3307      	adds	r3, #7
 8005454:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	1e5a      	subs	r2, r3, #1
 800545c:	62ba      	str	r2, [r7, #40]	; 0x28
 800545e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005462:	4413      	add	r3, r2
 8005464:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005468:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	091b      	lsrs	r3, r3, #4
 8005470:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1de      	bne.n	8005436 <gen_numname+0x7a>
	ns[i] = '~';
 8005478:	f107 0214 	add.w	r2, r7, #20
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	4413      	add	r3, r2
 8005480:	227e      	movs	r2, #126	; 0x7e
 8005482:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005484:	2300      	movs	r3, #0
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
 8005488:	e002      	b.n	8005490 <gen_numname+0xd4>
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	3301      	adds	r3, #1
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
 8005490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	429a      	cmp	r2, r3
 8005496:	d205      	bcs.n	80054a4 <gen_numname+0xe8>
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	4413      	add	r3, r2
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d1f2      	bne.n	800548a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	2b07      	cmp	r3, #7
 80054a8:	d808      	bhi.n	80054bc <gen_numname+0x100>
 80054aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80054b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80054b4:	4413      	add	r3, r2
 80054b6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80054ba:	e000      	b.n	80054be <gen_numname+0x102>
 80054bc:	2120      	movs	r1, #32
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	627a      	str	r2, [r7, #36]	; 0x24
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	460a      	mov	r2, r1
 80054ca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	2b07      	cmp	r3, #7
 80054d0:	d9e8      	bls.n	80054a4 <gen_numname+0xe8>
}
 80054d2:	bf00      	nop
 80054d4:	3730      	adds	r7, #48	; 0x30
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80054e6:	230b      	movs	r3, #11
 80054e8:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	0852      	lsrs	r2, r2, #1
 80054f0:	01db      	lsls	r3, r3, #7
 80054f2:	4313      	orrs	r3, r2
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	1c59      	adds	r1, r3, #1
 80054fa:	6079      	str	r1, [r7, #4]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	4413      	add	r3, r2
 8005500:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	3b01      	subs	r3, #1
 8005506:	60bb      	str	r3, [r7, #8]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1ed      	bne.n	80054ea <sum_sfn+0x10>
	return sum;
 800550e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800552a:	2100      	movs	r1, #0
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff fc88 	bl	8004e42 <dir_sdi>
 8005532:	4603      	mov	r3, r0
 8005534:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005536:	7dfb      	ldrb	r3, [r7, #23]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <dir_find+0x24>
 800553c:	7dfb      	ldrb	r3, [r7, #23]
 800553e:	e0a9      	b.n	8005694 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005540:	23ff      	movs	r3, #255	; 0xff
 8005542:	753b      	strb	r3, [r7, #20]
 8005544:	7d3b      	ldrb	r3, [r7, #20]
 8005546:	757b      	strb	r3, [r7, #21]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f04f 32ff 	mov.w	r2, #4294967295
 800554e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	4619      	mov	r1, r3
 8005556:	6938      	ldr	r0, [r7, #16]
 8005558:	f7ff f89a 	bl	8004690 <move_window>
 800555c:	4603      	mov	r3, r0
 800555e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005560:	7dfb      	ldrb	r3, [r7, #23]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f040 8090 	bne.w	8005688 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005570:	7dbb      	ldrb	r3, [r7, #22]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d102      	bne.n	800557c <dir_find+0x60>
 8005576:	2304      	movs	r3, #4
 8005578:	75fb      	strb	r3, [r7, #23]
 800557a:	e08a      	b.n	8005692 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	330b      	adds	r3, #11
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005588:	73fb      	strb	r3, [r7, #15]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	7bfa      	ldrb	r2, [r7, #15]
 800558e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005590:	7dbb      	ldrb	r3, [r7, #22]
 8005592:	2be5      	cmp	r3, #229	; 0xe5
 8005594:	d007      	beq.n	80055a6 <dir_find+0x8a>
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	f003 0308 	and.w	r3, r3, #8
 800559c:	2b00      	cmp	r3, #0
 800559e:	d009      	beq.n	80055b4 <dir_find+0x98>
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	2b0f      	cmp	r3, #15
 80055a4:	d006      	beq.n	80055b4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80055a6:	23ff      	movs	r3, #255	; 0xff
 80055a8:	757b      	strb	r3, [r7, #21]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f04f 32ff 	mov.w	r2, #4294967295
 80055b0:	631a      	str	r2, [r3, #48]	; 0x30
 80055b2:	e05e      	b.n	8005672 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b0f      	cmp	r3, #15
 80055b8:	d136      	bne.n	8005628 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80055c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d154      	bne.n	8005672 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80055c8:	7dbb      	ldrb	r3, [r7, #22]
 80055ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00d      	beq.n	80055ee <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	7b5b      	ldrb	r3, [r3, #13]
 80055d8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80055da:	7dbb      	ldrb	r3, [r7, #22]
 80055dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e0:	75bb      	strb	r3, [r7, #22]
 80055e2:	7dbb      	ldrb	r3, [r7, #22]
 80055e4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695a      	ldr	r2, [r3, #20]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80055ee:	7dba      	ldrb	r2, [r7, #22]
 80055f0:	7d7b      	ldrb	r3, [r7, #21]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d115      	bne.n	8005622 <dir_find+0x106>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	330d      	adds	r3, #13
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	7d3a      	ldrb	r2, [r7, #20]
 8005600:	429a      	cmp	r2, r3
 8005602:	d10e      	bne.n	8005622 <dir_find+0x106>
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f7ff fdfc 	bl	800520c <cmp_lfn>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <dir_find+0x106>
 800561a:	7d7b      	ldrb	r3, [r7, #21]
 800561c:	3b01      	subs	r3, #1
 800561e:	b2db      	uxtb	r3, r3
 8005620:	e000      	b.n	8005624 <dir_find+0x108>
 8005622:	23ff      	movs	r3, #255	; 0xff
 8005624:	757b      	strb	r3, [r7, #21]
 8005626:	e024      	b.n	8005672 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005628:	7d7b      	ldrb	r3, [r7, #21]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d109      	bne.n	8005642 <dir_find+0x126>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff ff51 	bl	80054da <sum_sfn>
 8005638:	4603      	mov	r3, r0
 800563a:	461a      	mov	r2, r3
 800563c:	7d3b      	ldrb	r3, [r7, #20]
 800563e:	4293      	cmp	r3, r2
 8005640:	d024      	beq.n	800568c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10a      	bne.n	8005666 <dir_find+0x14a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a18      	ldr	r0, [r3, #32]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3324      	adds	r3, #36	; 0x24
 8005658:	220b      	movs	r2, #11
 800565a:	4619      	mov	r1, r3
 800565c:	f7fe fe25 	bl	80042aa <mem_cmp>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d014      	beq.n	8005690 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005666:	23ff      	movs	r3, #255	; 0xff
 8005668:	757b      	strb	r3, [r7, #21]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f04f 32ff 	mov.w	r2, #4294967295
 8005670:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005672:	2100      	movs	r1, #0
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff fc6d 	bl	8004f54 <dir_next>
 800567a:	4603      	mov	r3, r0
 800567c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800567e:	7dfb      	ldrb	r3, [r7, #23]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f43f af65 	beq.w	8005550 <dir_find+0x34>
 8005686:	e004      	b.n	8005692 <dir_find+0x176>
		if (res != FR_OK) break;
 8005688:	bf00      	nop
 800568a:	e002      	b.n	8005692 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800568c:	bf00      	nop
 800568e:	e000      	b.n	8005692 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005690:	bf00      	nop

	return res;
 8005692:	7dfb      	ldrb	r3, [r7, #23]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08c      	sub	sp, #48	; 0x30
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80056b0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <dir_register+0x20>
 80056b8:	2306      	movs	r3, #6
 80056ba:	e0e0      	b.n	800587e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80056bc:	2300      	movs	r3, #0
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
 80056c0:	e002      	b.n	80056c8 <dir_register+0x2c>
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	3301      	adds	r3, #1
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	691a      	ldr	r2, [r3, #16]
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	4413      	add	r3, r2
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1f4      	bne.n	80056c2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80056de:	f107 030c 	add.w	r3, r7, #12
 80056e2:	220c      	movs	r2, #12
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fe fda5 	bl	8004234 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80056ea:	7dfb      	ldrb	r3, [r7, #23]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d032      	beq.n	800575a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2240      	movs	r2, #64	; 0x40
 80056f8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80056fc:	2301      	movs	r3, #1
 80056fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005700:	e016      	b.n	8005730 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	f107 010c 	add.w	r1, r7, #12
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	f7ff fe53 	bl	80053bc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff ff00 	bl	800551c <dir_find>
 800571c:	4603      	mov	r3, r0
 800571e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005722:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	3301      	adds	r3, #1
 800572e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	2b63      	cmp	r3, #99	; 0x63
 8005734:	d9e5      	bls.n	8005702 <dir_register+0x66>
 8005736:	e000      	b.n	800573a <dir_register+0x9e>
			if (res != FR_OK) break;
 8005738:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	2b64      	cmp	r3, #100	; 0x64
 800573e:	d101      	bne.n	8005744 <dir_register+0xa8>
 8005740:	2307      	movs	r3, #7
 8005742:	e09c      	b.n	800587e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005744:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005748:	2b04      	cmp	r3, #4
 800574a:	d002      	beq.n	8005752 <dir_register+0xb6>
 800574c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005750:	e095      	b.n	800587e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005752:	7dfa      	ldrb	r2, [r7, #23]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800575a:	7dfb      	ldrb	r3, [r7, #23]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d007      	beq.n	8005774 <dir_register+0xd8>
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	330c      	adds	r3, #12
 8005768:	4a47      	ldr	r2, [pc, #284]	; (8005888 <dir_register+0x1ec>)
 800576a:	fba2 2303 	umull	r2, r3, r2, r3
 800576e:	089b      	lsrs	r3, r3, #2
 8005770:	3301      	adds	r3, #1
 8005772:	e000      	b.n	8005776 <dir_register+0xda>
 8005774:	2301      	movs	r3, #1
 8005776:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005778:	6a39      	ldr	r1, [r7, #32]
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7ff fcc0 	bl	8005100 <dir_alloc>
 8005780:	4603      	mov	r3, r0
 8005782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800578a:	2b00      	cmp	r3, #0
 800578c:	d148      	bne.n	8005820 <dir_register+0x184>
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	3b01      	subs	r3, #1
 8005792:	623b      	str	r3, [r7, #32]
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d042      	beq.n	8005820 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695a      	ldr	r2, [r3, #20]
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	015b      	lsls	r3, r3, #5
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	4619      	mov	r1, r3
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff fb4b 	bl	8004e42 <dir_sdi>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80057b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d132      	bne.n	8005820 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3324      	adds	r3, #36	; 0x24
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff fe8b 	bl	80054da <sum_sfn>
 80057c4:	4603      	mov	r3, r0
 80057c6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	4619      	mov	r1, r3
 80057ce:	69f8      	ldr	r0, [r7, #28]
 80057d0:	f7fe ff5e 	bl	8004690 <move_window>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80057da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d11d      	bne.n	800581e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	6918      	ldr	r0, [r3, #16]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a19      	ldr	r1, [r3, #32]
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	7efb      	ldrb	r3, [r7, #27]
 80057f0:	f7ff fd7c 	bl	80052ec <put_lfn>
				fs->wflag = 1;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	2201      	movs	r2, #1
 80057f8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80057fa:	2100      	movs	r1, #0
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff fba9 	bl	8004f54 <dir_next>
 8005802:	4603      	mov	r3, r0
 8005804:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800580c:	2b00      	cmp	r3, #0
 800580e:	d107      	bne.n	8005820 <dir_register+0x184>
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	3b01      	subs	r3, #1
 8005814:	623b      	str	r3, [r7, #32]
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1d5      	bne.n	80057c8 <dir_register+0x12c>
 800581c:	e000      	b.n	8005820 <dir_register+0x184>
				if (res != FR_OK) break;
 800581e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005824:	2b00      	cmp	r3, #0
 8005826:	d128      	bne.n	800587a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	4619      	mov	r1, r3
 800582e:	69f8      	ldr	r0, [r7, #28]
 8005830:	f7fe ff2e 	bl	8004690 <move_window>
 8005834:	4603      	mov	r3, r0
 8005836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800583a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800583e:	2b00      	cmp	r3, #0
 8005840:	d11b      	bne.n	800587a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	2220      	movs	r2, #32
 8005848:	2100      	movs	r1, #0
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe fd13 	bl	8004276 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a18      	ldr	r0, [r3, #32]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3324      	adds	r3, #36	; 0x24
 8005858:	220b      	movs	r2, #11
 800585a:	4619      	mov	r1, r3
 800585c:	f7fe fcea 	bl	8004234 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	330c      	adds	r3, #12
 800586c:	f002 0218 	and.w	r2, r2, #24
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	2201      	movs	r2, #1
 8005878:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800587a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800587e:	4618      	mov	r0, r3
 8005880:	3730      	adds	r7, #48	; 0x30
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	4ec4ec4f 	.word	0x4ec4ec4f

0800588c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08a      	sub	sp, #40	; 0x28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	2300      	movs	r3, #0
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	61ba      	str	r2, [r7, #24]
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4413      	add	r3, r2
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80058ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058bc:	2b1f      	cmp	r3, #31
 80058be:	d940      	bls.n	8005942 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80058c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058c2:	2b2f      	cmp	r3, #47	; 0x2f
 80058c4:	d006      	beq.n	80058d4 <create_name+0x48>
 80058c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058c8:	2b5c      	cmp	r3, #92	; 0x5c
 80058ca:	d110      	bne.n	80058ee <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80058cc:	e002      	b.n	80058d4 <create_name+0x48>
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	3301      	adds	r3, #1
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	4413      	add	r3, r2
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b2f      	cmp	r3, #47	; 0x2f
 80058de:	d0f6      	beq.n	80058ce <create_name+0x42>
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	4413      	add	r3, r2
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b5c      	cmp	r3, #92	; 0x5c
 80058ea:	d0f0      	beq.n	80058ce <create_name+0x42>
			break;
 80058ec:	e02a      	b.n	8005944 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2bfe      	cmp	r3, #254	; 0xfe
 80058f2:	d901      	bls.n	80058f8 <create_name+0x6c>
 80058f4:	2306      	movs	r3, #6
 80058f6:	e177      	b.n	8005be8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80058f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80058fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005900:	2101      	movs	r1, #1
 8005902:	4618      	mov	r0, r3
 8005904:	f001 fc6c 	bl	80071e0 <ff_convert>
 8005908:	4603      	mov	r3, r0
 800590a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800590c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <create_name+0x8a>
 8005912:	2306      	movs	r3, #6
 8005914:	e168      	b.n	8005be8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005918:	2b7f      	cmp	r3, #127	; 0x7f
 800591a:	d809      	bhi.n	8005930 <create_name+0xa4>
 800591c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800591e:	4619      	mov	r1, r3
 8005920:	48b3      	ldr	r0, [pc, #716]	; (8005bf0 <create_name+0x364>)
 8005922:	f7fe fce9 	bl	80042f8 <chk_chr>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <create_name+0xa4>
 800592c:	2306      	movs	r3, #6
 800592e:	e15b      	b.n	8005be8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	617a      	str	r2, [r7, #20]
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800593e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005940:	e7b4      	b.n	80058ac <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005942:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	441a      	add	r2, r3
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800594e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005950:	2b1f      	cmp	r3, #31
 8005952:	d801      	bhi.n	8005958 <create_name+0xcc>
 8005954:	2304      	movs	r3, #4
 8005956:	e000      	b.n	800595a <create_name+0xce>
 8005958:	2300      	movs	r3, #0
 800595a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800595e:	e011      	b.n	8005984 <create_name+0xf8>
		w = lfn[di - 1];
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005966:	3b01      	subs	r3, #1
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005974:	2b20      	cmp	r3, #32
 8005976:	d002      	beq.n	800597e <create_name+0xf2>
 8005978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800597a:	2b2e      	cmp	r3, #46	; 0x2e
 800597c:	d106      	bne.n	800598c <create_name+0x100>
		di--;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	3b01      	subs	r3, #1
 8005982:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1ea      	bne.n	8005960 <create_name+0xd4>
 800598a:	e000      	b.n	800598e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800598c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4413      	add	r3, r2
 8005996:	2200      	movs	r2, #0
 8005998:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <create_name+0x118>
 80059a0:	2306      	movs	r3, #6
 80059a2:	e121      	b.n	8005be8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3324      	adds	r3, #36	; 0x24
 80059a8:	220b      	movs	r2, #11
 80059aa:	2120      	movs	r1, #32
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fe fc62 	bl	8004276 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80059b2:	2300      	movs	r3, #0
 80059b4:	61bb      	str	r3, [r7, #24]
 80059b6:	e002      	b.n	80059be <create_name+0x132>
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	3301      	adds	r3, #1
 80059bc:	61bb      	str	r3, [r7, #24]
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	d0f5      	beq.n	80059b8 <create_name+0x12c>
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	2b2e      	cmp	r3, #46	; 0x2e
 80059d8:	d0ee      	beq.n	80059b8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d009      	beq.n	80059f4 <create_name+0x168>
 80059e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059e4:	f043 0303 	orr.w	r3, r3, #3
 80059e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80059ec:	e002      	b.n	80059f4 <create_name+0x168>
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <create_name+0x182>
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a00:	3b01      	subs	r3, #1
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a0c:	d1ef      	bne.n	80059ee <create_name+0x162>

	i = b = 0; ni = 8;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a14:	2300      	movs	r3, #0
 8005a16:	623b      	str	r3, [r7, #32]
 8005a18:	2308      	movs	r3, #8
 8005a1a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	61ba      	str	r2, [r7, #24]
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005a2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 8090 	beq.w	8005b54 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005a34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d006      	beq.n	8005a48 <create_name+0x1bc>
 8005a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a3c:	2b2e      	cmp	r3, #46	; 0x2e
 8005a3e:	d10a      	bne.n	8005a56 <create_name+0x1ca>
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d006      	beq.n	8005a56 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a4c:	f043 0303 	orr.w	r3, r3, #3
 8005a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a54:	e07d      	b.n	8005b52 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005a56:	6a3a      	ldr	r2, [r7, #32]
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d203      	bcs.n	8005a66 <create_name+0x1da>
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d123      	bne.n	8005aae <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	2b0b      	cmp	r3, #11
 8005a6a:	d106      	bne.n	8005a7a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a70:	f043 0303 	orr.w	r3, r3, #3
 8005a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a78:	e06f      	b.n	8005b5a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d005      	beq.n	8005a8e <create_name+0x202>
 8005a82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a86:	f043 0303 	orr.w	r3, r3, #3
 8005a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d860      	bhi.n	8005b58 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	61bb      	str	r3, [r7, #24]
 8005a9a:	2308      	movs	r3, #8
 8005a9c:	623b      	str	r3, [r7, #32]
 8005a9e:	230b      	movs	r3, #11
 8005aa0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005aa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005aac:	e051      	b.n	8005b52 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005aae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ab0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab2:	d914      	bls.n	8005ade <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005ab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 fb91 	bl	80071e0 <ff_convert>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005ac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d004      	beq.n	8005ad2 <create_name+0x246>
 8005ac8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aca:	3b80      	subs	r3, #128	; 0x80
 8005acc:	4a49      	ldr	r2, [pc, #292]	; (8005bf4 <create_name+0x368>)
 8005ace:	5cd3      	ldrb	r3, [r2, r3]
 8005ad0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ad6:	f043 0302 	orr.w	r3, r3, #2
 8005ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005ade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d007      	beq.n	8005af4 <create_name+0x268>
 8005ae4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4843      	ldr	r0, [pc, #268]	; (8005bf8 <create_name+0x36c>)
 8005aea:	f7fe fc05 	bl	80042f8 <chk_chr>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005af4:	235f      	movs	r3, #95	; 0x5f
 8005af6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005afc:	f043 0303 	orr.w	r3, r3, #3
 8005b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b04:	e01b      	b.n	8005b3e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005b06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b08:	2b40      	cmp	r3, #64	; 0x40
 8005b0a:	d909      	bls.n	8005b20 <create_name+0x294>
 8005b0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b0e:	2b5a      	cmp	r3, #90	; 0x5a
 8005b10:	d806      	bhi.n	8005b20 <create_name+0x294>
					b |= 2;
 8005b12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b16:	f043 0302 	orr.w	r3, r3, #2
 8005b1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005b1e:	e00e      	b.n	8005b3e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005b20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b22:	2b60      	cmp	r3, #96	; 0x60
 8005b24:	d90b      	bls.n	8005b3e <create_name+0x2b2>
 8005b26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b28:	2b7a      	cmp	r3, #122	; 0x7a
 8005b2a:	d808      	bhi.n	8005b3e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005b2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b30:	f043 0301 	orr.w	r3, r3, #1
 8005b34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b3a:	3b20      	subs	r3, #32
 8005b3c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	623a      	str	r2, [r7, #32]
 8005b44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b46:	b2d1      	uxtb	r1, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005b52:	e763      	b.n	8005a1c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005b54:	bf00      	nop
 8005b56:	e000      	b.n	8005b5a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8005b58:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b60:	2be5      	cmp	r3, #229	; 0xe5
 8005b62:	d103      	bne.n	8005b6c <create_name+0x2e0>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2205      	movs	r2, #5
 8005b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d104      	bne.n	8005b7c <create_name+0x2f0>
 8005b72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005b7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b80:	f003 030c 	and.w	r3, r3, #12
 8005b84:	2b0c      	cmp	r3, #12
 8005b86:	d005      	beq.n	8005b94 <create_name+0x308>
 8005b88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d105      	bne.n	8005ba0 <create_name+0x314>
 8005b94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b98:	f043 0302 	orr.w	r3, r3, #2
 8005b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d117      	bne.n	8005bdc <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005bac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005bb0:	f003 0303 	and.w	r3, r3, #3
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d105      	bne.n	8005bc4 <create_name+0x338>
 8005bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bbc:	f043 0310 	orr.w	r3, r3, #16
 8005bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005bc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005bc8:	f003 030c 	and.w	r3, r3, #12
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d105      	bne.n	8005bdc <create_name+0x350>
 8005bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bd4:	f043 0308 	orr.w	r3, r3, #8
 8005bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005be2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005be6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3728      	adds	r7, #40	; 0x28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	08012b84 	.word	0x08012b84
 8005bf4:	08012d28 	.word	0x08012d28
 8005bf8:	08012b90 	.word	0x08012b90

08005bfc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005c10:	e002      	b.n	8005c18 <follow_path+0x1c>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	3301      	adds	r3, #1
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b2f      	cmp	r3, #47	; 0x2f
 8005c1e:	d0f8      	beq.n	8005c12 <follow_path+0x16>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b5c      	cmp	r3, #92	; 0x5c
 8005c26:	d0f4      	beq.n	8005c12 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b1f      	cmp	r3, #31
 8005c34:	d80a      	bhi.n	8005c4c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2280      	movs	r2, #128	; 0x80
 8005c3a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005c3e:	2100      	movs	r1, #0
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7ff f8fe 	bl	8004e42 <dir_sdi>
 8005c46:	4603      	mov	r3, r0
 8005c48:	75fb      	strb	r3, [r7, #23]
 8005c4a:	e048      	b.n	8005cde <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005c4c:	463b      	mov	r3, r7
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7ff fe1b 	bl	800588c <create_name>
 8005c56:	4603      	mov	r3, r0
 8005c58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d139      	bne.n	8005cd4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff fc5b 	bl	800551c <dir_find>
 8005c66:	4603      	mov	r3, r0
 8005c68:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005c70:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00a      	beq.n	8005c8e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d12c      	bne.n	8005cd8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d127      	bne.n	8005cd8 <follow_path+0xdc>
 8005c88:	2305      	movs	r3, #5
 8005c8a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005c8c:	e024      	b.n	8005cd8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005c8e:	7afb      	ldrb	r3, [r7, #11]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d121      	bne.n	8005cdc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	799b      	ldrb	r3, [r3, #6]
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d102      	bne.n	8005caa <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005ca4:	2305      	movs	r3, #5
 8005ca6:	75fb      	strb	r3, [r7, #23]
 8005ca8:	e019      	b.n	8005cde <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	8992      	ldrh	r2, [r2, #12]
 8005cb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cbc:	fb02 f200 	mul.w	r2, r2, r0
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f7ff fa61 	bl	800518e <ld_clust>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005cd2:	e7bb      	b.n	8005c4c <follow_path+0x50>
			if (res != FR_OK) break;
 8005cd4:	bf00      	nop
 8005cd6:	e002      	b.n	8005cde <follow_path+0xe2>
				break;
 8005cd8:	bf00      	nop
 8005cda:	e000      	b.n	8005cde <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005cdc:	bf00      	nop
			}
		}
	}

	return res;
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d031      	beq.n	8005d62 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	617b      	str	r3, [r7, #20]
 8005d04:	e002      	b.n	8005d0c <get_ldnumber+0x24>
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b1f      	cmp	r3, #31
 8005d12:	d903      	bls.n	8005d1c <get_ldnumber+0x34>
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b3a      	cmp	r3, #58	; 0x3a
 8005d1a:	d1f4      	bne.n	8005d06 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b3a      	cmp	r3, #58	; 0x3a
 8005d22:	d11c      	bne.n	8005d5e <get_ldnumber+0x76>
			tp = *path;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	60fa      	str	r2, [r7, #12]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	3b30      	subs	r3, #48	; 0x30
 8005d34:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b09      	cmp	r3, #9
 8005d3a:	d80e      	bhi.n	8005d5a <get_ldnumber+0x72>
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d10a      	bne.n	8005d5a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d107      	bne.n	8005d5a <get_ldnumber+0x72>
					vol = (int)i;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	3301      	adds	r3, #1
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	e002      	b.n	8005d64 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005d5e:	2300      	movs	r3, #0
 8005d60:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005d62:	693b      	ldr	r3, [r7, #16]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	70da      	strb	r2, [r3, #3]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f04f 32ff 	mov.w	r2, #4294967295
 8005d86:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005d88:	6839      	ldr	r1, [r7, #0]
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7fe fc80 	bl	8004690 <move_window>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <check_fs+0x2a>
 8005d96:	2304      	movs	r3, #4
 8005d98:	e038      	b.n	8005e0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3338      	adds	r3, #56	; 0x38
 8005d9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fe f9c4 	bl	8004130 <ld_word>
 8005da8:	4603      	mov	r3, r0
 8005daa:	461a      	mov	r2, r3
 8005dac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d001      	beq.n	8005db8 <check_fs+0x48>
 8005db4:	2303      	movs	r3, #3
 8005db6:	e029      	b.n	8005e0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005dbe:	2be9      	cmp	r3, #233	; 0xe9
 8005dc0:	d009      	beq.n	8005dd6 <check_fs+0x66>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005dc8:	2beb      	cmp	r3, #235	; 0xeb
 8005dca:	d11e      	bne.n	8005e0a <check_fs+0x9a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005dd2:	2b90      	cmp	r3, #144	; 0x90
 8005dd4:	d119      	bne.n	8005e0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3338      	adds	r3, #56	; 0x38
 8005dda:	3336      	adds	r3, #54	; 0x36
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fe f9bf 	bl	8004160 <ld_dword>
 8005de2:	4603      	mov	r3, r0
 8005de4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005de8:	4a0a      	ldr	r2, [pc, #40]	; (8005e14 <check_fs+0xa4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d101      	bne.n	8005df2 <check_fs+0x82>
 8005dee:	2300      	movs	r3, #0
 8005df0:	e00c      	b.n	8005e0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3338      	adds	r3, #56	; 0x38
 8005df6:	3352      	adds	r3, #82	; 0x52
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe f9b1 	bl	8004160 <ld_dword>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <check_fs+0xa8>)
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d101      	bne.n	8005e0a <check_fs+0x9a>
 8005e06:	2300      	movs	r3, #0
 8005e08:	e000      	b.n	8005e0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005e0a:	2302      	movs	r3, #2
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	00544146 	.word	0x00544146
 8005e18:	33544146 	.word	0x33544146

08005e1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b096      	sub	sp, #88	; 0x58
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	4613      	mov	r3, r2
 8005e28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f7ff ff59 	bl	8005ce8 <get_ldnumber>
 8005e36:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	da01      	bge.n	8005e42 <find_volume+0x26>
 8005e3e:	230b      	movs	r3, #11
 8005e40:	e265      	b.n	800630e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005e42:	4ab0      	ldr	r2, [pc, #704]	; (8006104 <find_volume+0x2e8>)
 8005e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e4a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <find_volume+0x3a>
 8005e52:	230c      	movs	r3, #12
 8005e54:	e25b      	b.n	800630e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005e5c:	79fb      	ldrb	r3, [r7, #7]
 8005e5e:	f023 0301 	bic.w	r3, r3, #1
 8005e62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d01a      	beq.n	8005ea2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6e:	785b      	ldrb	r3, [r3, #1]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fe f8bf 	bl	8003ff4 <disk_status>
 8005e76:	4603      	mov	r3, r0
 8005e78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005e7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10c      	bne.n	8005ea2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d007      	beq.n	8005e9e <find_volume+0x82>
 8005e8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005e9a:	230a      	movs	r3, #10
 8005e9c:	e237      	b.n	800630e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e235      	b.n	800630e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	785b      	ldrb	r3, [r3, #1]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fe f8b7 	bl	8004028 <disk_initialize>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e21e      	b.n	800630e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005ed0:	79fb      	ldrb	r3, [r7, #7]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d007      	beq.n	8005ee6 <find_volume+0xca>
 8005ed6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005ee2:	230a      	movs	r3, #10
 8005ee4:	e213      	b.n	800630e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	7858      	ldrb	r0, [r3, #1]
 8005eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eec:	330c      	adds	r3, #12
 8005eee:	461a      	mov	r2, r3
 8005ef0:	2102      	movs	r1, #2
 8005ef2:	f7fe f8ff 	bl	80040f4 <disk_ioctl>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <find_volume+0xe4>
 8005efc:	2301      	movs	r3, #1
 8005efe:	e206      	b.n	800630e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	899b      	ldrh	r3, [r3, #12]
 8005f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f08:	d80d      	bhi.n	8005f26 <find_volume+0x10a>
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	899b      	ldrh	r3, [r3, #12]
 8005f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f12:	d308      	bcc.n	8005f26 <find_volume+0x10a>
 8005f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f16:	899b      	ldrh	r3, [r3, #12]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	899b      	ldrh	r3, [r3, #12]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	4013      	ands	r3, r2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <find_volume+0x10e>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e1f1      	b.n	800630e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005f2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f32:	f7ff ff1d 	bl	8005d70 <check_fs>
 8005f36:	4603      	mov	r3, r0
 8005f38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005f3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d14b      	bne.n	8005fdc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f44:	2300      	movs	r3, #0
 8005f46:	643b      	str	r3, [r7, #64]	; 0x40
 8005f48:	e01f      	b.n	8005f8a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005f58:	4413      	add	r3, r2
 8005f5a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	3304      	adds	r3, #4
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d006      	beq.n	8005f74 <find_volume+0x158>
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	3308      	adds	r3, #8
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe f8f8 	bl	8004160 <ld_dword>
 8005f70:	4602      	mov	r2, r0
 8005f72:	e000      	b.n	8005f76 <find_volume+0x15a>
 8005f74:	2200      	movs	r2, #0
 8005f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005f7e:	440b      	add	r3, r1
 8005f80:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f86:	3301      	adds	r3, #1
 8005f88:	643b      	str	r3, [r7, #64]	; 0x40
 8005f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f8c:	2b03      	cmp	r3, #3
 8005f8e:	d9dc      	bls.n	8005f4a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005f90:	2300      	movs	r3, #0
 8005f92:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <find_volume+0x184>
 8005f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005fa8:	4413      	add	r3, r2
 8005faa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005fae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <find_volume+0x1a6>
 8005fb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fba:	f7ff fed9 	bl	8005d70 <check_fs>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	e000      	b.n	8005fc4 <find_volume+0x1a8>
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005fc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d905      	bls.n	8005fdc <find_volume+0x1c0>
 8005fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d9e1      	bls.n	8005fa0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005fdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fe0:	2b04      	cmp	r3, #4
 8005fe2:	d101      	bne.n	8005fe8 <find_volume+0x1cc>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e192      	b.n	800630e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005fe8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d901      	bls.n	8005ff4 <find_volume+0x1d8>
 8005ff0:	230d      	movs	r3, #13
 8005ff2:	e18c      	b.n	800630e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	3338      	adds	r3, #56	; 0x38
 8005ff8:	330b      	adds	r3, #11
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe f898 	bl	8004130 <ld_word>
 8006000:	4603      	mov	r3, r0
 8006002:	461a      	mov	r2, r3
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	899b      	ldrh	r3, [r3, #12]
 8006008:	429a      	cmp	r2, r3
 800600a:	d001      	beq.n	8006010 <find_volume+0x1f4>
 800600c:	230d      	movs	r3, #13
 800600e:	e17e      	b.n	800630e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	3338      	adds	r3, #56	; 0x38
 8006014:	3316      	adds	r3, #22
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe f88a 	bl	8004130 <ld_word>
 800601c:	4603      	mov	r3, r0
 800601e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <find_volume+0x218>
 8006026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006028:	3338      	adds	r3, #56	; 0x38
 800602a:	3324      	adds	r3, #36	; 0x24
 800602c:	4618      	mov	r0, r3
 800602e:	f7fe f897 	bl	8004160 <ld_dword>
 8006032:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006036:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006038:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006042:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	789b      	ldrb	r3, [r3, #2]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d005      	beq.n	8006058 <find_volume+0x23c>
 800604c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604e:	789b      	ldrb	r3, [r3, #2]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d001      	beq.n	8006058 <find_volume+0x23c>
 8006054:	230d      	movs	r3, #13
 8006056:	e15a      	b.n	800630e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605a:	789b      	ldrb	r3, [r3, #2]
 800605c:	461a      	mov	r2, r3
 800605e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006060:	fb02 f303 	mul.w	r3, r2, r3
 8006064:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800606c:	b29a      	uxth	r2, r3
 800606e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006070:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	895b      	ldrh	r3, [r3, #10]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d008      	beq.n	800608c <find_volume+0x270>
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	895b      	ldrh	r3, [r3, #10]
 800607e:	461a      	mov	r2, r3
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	895b      	ldrh	r3, [r3, #10]
 8006084:	3b01      	subs	r3, #1
 8006086:	4013      	ands	r3, r2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <find_volume+0x274>
 800608c:	230d      	movs	r3, #13
 800608e:	e13e      	b.n	800630e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	3338      	adds	r3, #56	; 0x38
 8006094:	3311      	adds	r3, #17
 8006096:	4618      	mov	r0, r3
 8006098:	f7fe f84a 	bl	8004130 <ld_word>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80060a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a6:	891b      	ldrh	r3, [r3, #8]
 80060a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060aa:	8992      	ldrh	r2, [r2, #12]
 80060ac:	0952      	lsrs	r2, r2, #5
 80060ae:	b292      	uxth	r2, r2
 80060b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80060b4:	fb02 f201 	mul.w	r2, r2, r1
 80060b8:	1a9b      	subs	r3, r3, r2
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <find_volume+0x2a8>
 80060c0:	230d      	movs	r3, #13
 80060c2:	e124      	b.n	800630e <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80060c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c6:	3338      	adds	r3, #56	; 0x38
 80060c8:	3313      	adds	r3, #19
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fe f830 	bl	8004130 <ld_word>
 80060d0:	4603      	mov	r3, r0
 80060d2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80060d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <find_volume+0x2cc>
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	3338      	adds	r3, #56	; 0x38
 80060de:	3320      	adds	r3, #32
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fe f83d 	bl	8004160 <ld_dword>
 80060e6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	3338      	adds	r3, #56	; 0x38
 80060ec:	330e      	adds	r3, #14
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe f81e 	bl	8004130 <ld_word>
 80060f4:	4603      	mov	r3, r0
 80060f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80060f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d104      	bne.n	8006108 <find_volume+0x2ec>
 80060fe:	230d      	movs	r3, #13
 8006100:	e105      	b.n	800630e <find_volume+0x4f2>
 8006102:	bf00      	nop
 8006104:	200029ac 	.word	0x200029ac

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006108:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800610a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610c:	4413      	add	r3, r2
 800610e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006110:	8911      	ldrh	r1, [r2, #8]
 8006112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006114:	8992      	ldrh	r2, [r2, #12]
 8006116:	0952      	lsrs	r2, r2, #5
 8006118:	b292      	uxth	r2, r2
 800611a:	fbb1 f2f2 	udiv	r2, r1, r2
 800611e:	b292      	uxth	r2, r2
 8006120:	4413      	add	r3, r2
 8006122:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006128:	429a      	cmp	r2, r3
 800612a:	d201      	bcs.n	8006130 <find_volume+0x314>
 800612c:	230d      	movs	r3, #13
 800612e:	e0ee      	b.n	800630e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006138:	8952      	ldrh	r2, [r2, #10]
 800613a:	fbb3 f3f2 	udiv	r3, r3, r2
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <find_volume+0x32e>
 8006146:	230d      	movs	r3, #13
 8006148:	e0e1      	b.n	800630e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800614a:	2303      	movs	r3, #3
 800614c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006156:	4293      	cmp	r3, r2
 8006158:	d802      	bhi.n	8006160 <find_volume+0x344>
 800615a:	2302      	movs	r3, #2
 800615c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006166:	4293      	cmp	r3, r2
 8006168:	d802      	bhi.n	8006170 <find_volume+0x354>
 800616a:	2301      	movs	r3, #1
 800616c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	1c9a      	adds	r2, r3, #2
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800617c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800617e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006182:	441a      	add	r2, r3
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006188:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	441a      	add	r2, r3
 800618e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006192:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006196:	2b03      	cmp	r3, #3
 8006198:	d11e      	bne.n	80061d8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619c:	3338      	adds	r3, #56	; 0x38
 800619e:	332a      	adds	r3, #42	; 0x2a
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fd ffc5 	bl	8004130 <ld_word>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <find_volume+0x394>
 80061ac:	230d      	movs	r3, #13
 80061ae:	e0ae      	b.n	800630e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	891b      	ldrh	r3, [r3, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <find_volume+0x3a0>
 80061b8:	230d      	movs	r3, #13
 80061ba:	e0a8      	b.n	800630e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80061bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061be:	3338      	adds	r3, #56	; 0x38
 80061c0:	332c      	adds	r3, #44	; 0x2c
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fd ffcc 	bl	8004160 <ld_dword>
 80061c8:	4602      	mov	r2, r0
 80061ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061cc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	647b      	str	r3, [r7, #68]	; 0x44
 80061d6:	e01f      	b.n	8006218 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	891b      	ldrh	r3, [r3, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <find_volume+0x3c8>
 80061e0:	230d      	movs	r3, #13
 80061e2:	e094      	b.n	800630e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ea:	441a      	add	r2, r3
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80061f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d103      	bne.n	8006200 <find_volume+0x3e4>
 80061f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	e00a      	b.n	8006216 <find_volume+0x3fa>
 8006200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	4613      	mov	r3, r2
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	4413      	add	r3, r2
 800620a:	085a      	lsrs	r2, r3, #1
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006216:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621a:	6a1a      	ldr	r2, [r3, #32]
 800621c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621e:	899b      	ldrh	r3, [r3, #12]
 8006220:	4619      	mov	r1, r3
 8006222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006224:	440b      	add	r3, r1
 8006226:	3b01      	subs	r3, #1
 8006228:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800622a:	8989      	ldrh	r1, [r1, #12]
 800622c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006230:	429a      	cmp	r2, r3
 8006232:	d201      	bcs.n	8006238 <find_volume+0x41c>
 8006234:	230d      	movs	r3, #13
 8006236:	e06a      	b.n	800630e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623a:	f04f 32ff 	mov.w	r2, #4294967295
 800623e:	619a      	str	r2, [r3, #24]
 8006240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006242:	699a      	ldr	r2, [r3, #24]
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	2280      	movs	r2, #128	; 0x80
 800624c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800624e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006252:	2b03      	cmp	r3, #3
 8006254:	d149      	bne.n	80062ea <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006258:	3338      	adds	r3, #56	; 0x38
 800625a:	3330      	adds	r3, #48	; 0x30
 800625c:	4618      	mov	r0, r3
 800625e:	f7fd ff67 	bl	8004130 <ld_word>
 8006262:	4603      	mov	r3, r0
 8006264:	2b01      	cmp	r3, #1
 8006266:	d140      	bne.n	80062ea <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800626a:	3301      	adds	r3, #1
 800626c:	4619      	mov	r1, r3
 800626e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006270:	f7fe fa0e 	bl	8004690 <move_window>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d137      	bne.n	80062ea <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	2200      	movs	r2, #0
 800627e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006282:	3338      	adds	r3, #56	; 0x38
 8006284:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006288:	4618      	mov	r0, r3
 800628a:	f7fd ff51 	bl	8004130 <ld_word>
 800628e:	4603      	mov	r3, r0
 8006290:	461a      	mov	r2, r3
 8006292:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006296:	429a      	cmp	r2, r3
 8006298:	d127      	bne.n	80062ea <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	3338      	adds	r3, #56	; 0x38
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fd ff5e 	bl	8004160 <ld_dword>
 80062a4:	4602      	mov	r2, r0
 80062a6:	4b1c      	ldr	r3, [pc, #112]	; (8006318 <find_volume+0x4fc>)
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d11e      	bne.n	80062ea <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80062ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ae:	3338      	adds	r3, #56	; 0x38
 80062b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fd ff53 	bl	8004160 <ld_dword>
 80062ba:	4602      	mov	r2, r0
 80062bc:	4b17      	ldr	r3, [pc, #92]	; (800631c <find_volume+0x500>)
 80062be:	429a      	cmp	r2, r3
 80062c0:	d113      	bne.n	80062ea <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80062c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c4:	3338      	adds	r3, #56	; 0x38
 80062c6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fd ff48 	bl	8004160 <ld_dword>
 80062d0:	4602      	mov	r2, r0
 80062d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d4:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80062d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d8:	3338      	adds	r3, #56	; 0x38
 80062da:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fd ff3e 	bl	8004160 <ld_dword>
 80062e4:	4602      	mov	r2, r0
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80062f0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80062f2:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <find_volume+0x504>)
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	3301      	adds	r3, #1
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	4b09      	ldr	r3, [pc, #36]	; (8006320 <find_volume+0x504>)
 80062fc:	801a      	strh	r2, [r3, #0]
 80062fe:	4b08      	ldr	r3, [pc, #32]	; (8006320 <find_volume+0x504>)
 8006300:	881a      	ldrh	r2, [r3, #0]
 8006302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006304:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006306:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006308:	f7fe f95a 	bl	80045c0 <clear_lock>
#endif
	return FR_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3758      	adds	r7, #88	; 0x58
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	41615252 	.word	0x41615252
 800631c:	61417272 	.word	0x61417272
 8006320:	200029b0 	.word	0x200029b0

08006324 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800632e:	2309      	movs	r3, #9
 8006330:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d01c      	beq.n	8006372 <validate+0x4e>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d018      	beq.n	8006372 <validate+0x4e>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d013      	beq.n	8006372 <validate+0x4e>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	889a      	ldrh	r2, [r3, #4]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	88db      	ldrh	r3, [r3, #6]
 8006354:	429a      	cmp	r2, r3
 8006356:	d10c      	bne.n	8006372 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	785b      	ldrb	r3, [r3, #1]
 800635e:	4618      	mov	r0, r3
 8006360:	f7fd fe48 	bl	8003ff4 <disk_status>
 8006364:	4603      	mov	r3, r0
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <validate+0x4e>
			res = FR_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d102      	bne.n	800637e <validate+0x5a>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	e000      	b.n	8006380 <validate+0x5c>
 800637e:	2300      	movs	r3, #0
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	6013      	str	r3, [r2, #0]
	return res;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	4613      	mov	r3, r2
 800639c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80063a2:	f107 0310 	add.w	r3, r7, #16
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff fc9e 	bl	8005ce8 <get_ldnumber>
 80063ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	da01      	bge.n	80063b8 <f_mount+0x28>
 80063b4:	230b      	movs	r3, #11
 80063b6:	e02b      	b.n	8006410 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80063b8:	4a17      	ldr	r2, [pc, #92]	; (8006418 <f_mount+0x88>)
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80063c8:	69b8      	ldr	r0, [r7, #24]
 80063ca:	f7fe f8f9 	bl	80045c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	2200      	movs	r2, #0
 80063d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	490d      	ldr	r1, [pc, #52]	; (8006418 <f_mount+0x88>)
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <f_mount+0x66>
 80063f0:	79fb      	ldrb	r3, [r7, #7]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d001      	beq.n	80063fa <f_mount+0x6a>
 80063f6:	2300      	movs	r3, #0
 80063f8:	e00a      	b.n	8006410 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80063fa:	f107 010c 	add.w	r1, r7, #12
 80063fe:	f107 0308 	add.w	r3, r7, #8
 8006402:	2200      	movs	r2, #0
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fd09 	bl	8005e1c <find_volume>
 800640a:	4603      	mov	r3, r0
 800640c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800640e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3720      	adds	r7, #32
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	200029ac 	.word	0x200029ac

0800641c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8006422:	af00      	add	r7, sp, #0
 8006424:	f107 030c 	add.w	r3, r7, #12
 8006428:	6018      	str	r0, [r3, #0]
 800642a:	f107 0308 	add.w	r3, r7, #8
 800642e:	6019      	str	r1, [r3, #0]
 8006430:	1dfb      	adds	r3, r7, #7
 8006432:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006434:	f107 030c 	add.w	r3, r7, #12
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <f_open+0x26>
 800643e:	2309      	movs	r3, #9
 8006440:	e242      	b.n	80068c8 <f_open+0x4ac>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006442:	1dfb      	adds	r3, r7, #7
 8006444:	1dfa      	adds	r2, r7, #7
 8006446:	7812      	ldrb	r2, [r2, #0]
 8006448:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800644c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800644e:	1dfb      	adds	r3, r7, #7
 8006450:	781a      	ldrb	r2, [r3, #0]
 8006452:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8006456:	f107 0308 	add.w	r3, r7, #8
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff fcde 	bl	8005e1c <find_volume>
 8006460:	4603      	mov	r3, r0
 8006462:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8006466:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800646a:	2b00      	cmp	r3, #0
 800646c:	f040 8221 	bne.w	80068b2 <f_open+0x496>
		dj.obj.fs = fs;
 8006470:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006474:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8006478:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800647c:	f107 0214 	add.w	r2, r7, #20
 8006480:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006482:	f107 0308 	add.w	r3, r7, #8
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800648c:	4611      	mov	r1, r2
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff fbb4 	bl	8005bfc <follow_path>
 8006494:	4603      	mov	r3, r0
 8006496:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800649a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d11b      	bne.n	80064da <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80064a2:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80064a6:	b25b      	sxtb	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	da03      	bge.n	80064b4 <f_open+0x98>
				res = FR_INVALID_NAME;
 80064ac:	2306      	movs	r3, #6
 80064ae:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80064b2:	e012      	b.n	80064da <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80064b4:	1dfb      	adds	r3, r7, #7
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	f023 0301 	bic.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bf14      	ite	ne
 80064c0:	2301      	movne	r3, #1
 80064c2:	2300      	moveq	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	461a      	mov	r2, r3
 80064c8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80064cc:	4611      	mov	r1, r2
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fd ff2e 	bl	8004330 <chk_lock>
 80064d4:	4603      	mov	r3, r0
 80064d6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80064da:	1dfb      	adds	r3, r7, #7
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	f003 031c 	and.w	r3, r3, #28
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 809b 	beq.w	800661e <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 80064e8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d019      	beq.n	8006524 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80064f0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	d10e      	bne.n	8006516 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80064f8:	f7fd ff76 	bl	80043e8 <enq_lock>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d006      	beq.n	8006510 <f_open+0xf4>
 8006502:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff f8c8 	bl	800569c <dir_register>
 800650c:	4603      	mov	r3, r0
 800650e:	e000      	b.n	8006512 <f_open+0xf6>
 8006510:	2312      	movs	r3, #18
 8006512:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006516:	1dfb      	adds	r3, r7, #7
 8006518:	1dfa      	adds	r2, r7, #7
 800651a:	7812      	ldrb	r2, [r2, #0]
 800651c:	f042 0208 	orr.w	r2, r2, #8
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	e012      	b.n	800654a <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006524:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8006528:	f003 0311 	and.w	r3, r3, #17
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <f_open+0x11c>
					res = FR_DENIED;
 8006530:	2307      	movs	r3, #7
 8006532:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8006536:	e008      	b.n	800654a <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006538:	1dfb      	adds	r3, r7, #7
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <f_open+0x12e>
 8006544:	2308      	movs	r3, #8
 8006546:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800654a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800654e:	2b00      	cmp	r3, #0
 8006550:	f040 8082 	bne.w	8006658 <f_open+0x23c>
 8006554:	1dfb      	adds	r3, r7, #7
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b00      	cmp	r3, #0
 800655e:	d07b      	beq.n	8006658 <f_open+0x23c>
				dw = GET_FATTIME();
 8006560:	f7fd fcea 	bl	8003f38 <get_fattime>
 8006564:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006568:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800656c:	330e      	adds	r3, #14
 800656e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8006572:	4618      	mov	r0, r3
 8006574:	f7fd fe32 	bl	80041dc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006578:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800657c:	3316      	adds	r3, #22
 800657e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8006582:	4618      	mov	r0, r3
 8006584:	f7fd fe2a 	bl	80041dc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006588:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800658c:	330b      	adds	r3, #11
 800658e:	2220      	movs	r2, #32
 8006590:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006592:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006596:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800659a:	4611      	mov	r1, r2
 800659c:	4618      	mov	r0, r3
 800659e:	f7fe fdf6 	bl	800518e <ld_clust>
 80065a2:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80065a6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80065aa:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80065ae:	2200      	movs	r2, #0
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fe fe0b 	bl	80051cc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80065b6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80065ba:	331c      	adds	r3, #28
 80065bc:	2100      	movs	r1, #0
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fd fe0c 	bl	80041dc <st_dword>
					fs->wflag = 1;
 80065c4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80065c8:	2201      	movs	r2, #1
 80065ca:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80065cc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d041      	beq.n	8006658 <f_open+0x23c>
						dw = fs->winsect;
 80065d4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80065d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065da:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80065de:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fe faf5 	bl	8004bd8 <remove_chain>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 80065f4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d12d      	bne.n	8006658 <f_open+0x23c>
							res = move_window(fs, dw);
 80065fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006600:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8006604:	4618      	mov	r0, r3
 8006606:	f7fe f843 	bl	8004690 <move_window>
 800660a:	4603      	mov	r3, r0
 800660c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006610:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006614:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8006618:	3a01      	subs	r2, #1
 800661a:	615a      	str	r2, [r3, #20]
 800661c:	e01c      	b.n	8006658 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800661e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006622:	2b00      	cmp	r3, #0
 8006624:	d118      	bne.n	8006658 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006626:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800662a:	f003 0310 	and.w	r3, r3, #16
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <f_open+0x21e>
					res = FR_NO_FILE;
 8006632:	2304      	movs	r3, #4
 8006634:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8006638:	e00e      	b.n	8006658 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800663a:	1dfb      	adds	r3, r7, #7
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d008      	beq.n	8006658 <f_open+0x23c>
 8006646:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <f_open+0x23c>
						res = FR_DENIED;
 8006652:	2307      	movs	r3, #7
 8006654:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8006658:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800665c:	2b00      	cmp	r3, #0
 800665e:	d136      	bne.n	80066ce <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006660:	1dfb      	adds	r3, r7, #7
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	f003 0308 	and.w	r3, r3, #8
 8006668:	2b00      	cmp	r3, #0
 800666a:	d005      	beq.n	8006678 <f_open+0x25c>
				mode |= FA_MODIFIED;
 800666c:	1dfb      	adds	r3, r7, #7
 800666e:	1dfa      	adds	r2, r7, #7
 8006670:	7812      	ldrb	r2, [r2, #0]
 8006672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006676:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006678:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800667c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800667e:	f107 030c 	add.w	r3, r7, #12
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006686:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800668a:	f107 030c 	add.w	r3, r7, #12
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006692:	1dfb      	adds	r3, r7, #7
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	f023 0301 	bic.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	bf14      	ite	ne
 800669e:	2301      	movne	r3, #1
 80066a0:	2300      	moveq	r3, #0
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80066aa:	4611      	mov	r1, r2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fd febd 	bl	800442c <inc_lock>
 80066b2:	4602      	mov	r2, r0
 80066b4:	f107 030c 	add.w	r3, r7, #12
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80066bc:	f107 030c 	add.w	r3, r7, #12
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d102      	bne.n	80066ce <f_open+0x2b2>
 80066c8:	2302      	movs	r3, #2
 80066ca:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80066ce:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f040 80ed 	bne.w	80068b2 <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80066d8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80066dc:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80066e0:	4611      	mov	r1, r2
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fe fd53 	bl	800518e <ld_clust>
 80066e8:	4602      	mov	r2, r0
 80066ea:	f107 030c 	add.w	r3, r7, #12
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80066f2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80066f6:	331c      	adds	r3, #28
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fd fd31 	bl	8004160 <ld_dword>
 80066fe:	4602      	mov	r2, r0
 8006700:	f107 030c 	add.w	r3, r7, #12
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006708:	f107 030c 	add.w	r3, r7, #12
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2200      	movs	r2, #0
 8006710:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006712:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8006716:	f107 030c 	add.w	r3, r7, #12
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800671e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006722:	88da      	ldrh	r2, [r3, #6]
 8006724:	f107 030c 	add.w	r3, r7, #12
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800672c:	f107 030c 	add.w	r3, r7, #12
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	1dfa      	adds	r2, r7, #7
 8006734:	7812      	ldrb	r2, [r2, #0]
 8006736:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006738:	f107 030c 	add.w	r3, r7, #12
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2200      	movs	r2, #0
 8006740:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006742:	f107 030c 	add.w	r3, r7, #12
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2200      	movs	r2, #0
 800674a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800674c:	f107 030c 	add.w	r3, r7, #12
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2200      	movs	r2, #0
 8006754:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006756:	f107 030c 	add.w	r3, r7, #12
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3330      	adds	r3, #48	; 0x30
 800675e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006762:	2100      	movs	r1, #0
 8006764:	4618      	mov	r0, r3
 8006766:	f7fd fd86 	bl	8004276 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800676a:	1dfb      	adds	r3, r7, #7
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	f003 0320 	and.w	r3, r3, #32
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 809d 	beq.w	80068b2 <f_open+0x496>
 8006778:	f107 030c 	add.w	r3, r7, #12
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 8096 	beq.w	80068b2 <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006786:	f107 030c 	add.w	r3, r7, #12
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	f107 030c 	add.w	r3, r7, #12
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006796:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800679a:	895b      	ldrh	r3, [r3, #10]
 800679c:	461a      	mov	r2, r3
 800679e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80067a2:	899b      	ldrh	r3, [r3, #12]
 80067a4:	fb03 f302 	mul.w	r3, r3, r2
 80067a8:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80067ac:	f107 030c 	add.w	r3, r7, #12
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80067b8:	f107 030c 	add.w	r3, r7, #12
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80067c4:	e01f      	b.n	8006806 <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 80067c6:	f107 030c 	add.w	r3, r7, #12
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fe f81a 	bl	800480a <get_fat>
 80067d6:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 80067da:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d802      	bhi.n	80067e8 <f_open+0x3cc>
 80067e2:	2302      	movs	r3, #2
 80067e4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80067e8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f0:	d102      	bne.n	80067f8 <f_open+0x3dc>
 80067f2:	2301      	movs	r3, #1
 80067f4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80067f8:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80067fc:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8006806:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800680a:	2b00      	cmp	r3, #0
 800680c:	d105      	bne.n	800681a <f_open+0x3fe>
 800680e:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8006812:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8006816:	429a      	cmp	r2, r3
 8006818:	d8d5      	bhi.n	80067c6 <f_open+0x3aa>
				}
				fp->clust = clst;
 800681a:	f107 030c 	add.w	r3, r7, #12
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8006824:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006826:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800682a:	2b00      	cmp	r3, #0
 800682c:	d141      	bne.n	80068b2 <f_open+0x496>
 800682e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006832:	899b      	ldrh	r3, [r3, #12]
 8006834:	461a      	mov	r2, r3
 8006836:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800683a:	fbb3 f1f2 	udiv	r1, r3, r2
 800683e:	fb02 f201 	mul.w	r2, r2, r1
 8006842:	1a9b      	subs	r3, r3, r2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d034      	beq.n	80068b2 <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006848:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800684c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8006850:	4618      	mov	r0, r3
 8006852:	f7fd ffbb 	bl	80047cc <clust2sect>
 8006856:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800685a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800685e:	2b00      	cmp	r3, #0
 8006860:	d103      	bne.n	800686a <f_open+0x44e>
						res = FR_INT_ERR;
 8006862:	2302      	movs	r3, #2
 8006864:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8006868:	e023      	b.n	80068b2 <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800686a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800686e:	899b      	ldrh	r3, [r3, #12]
 8006870:	461a      	mov	r2, r3
 8006872:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8006876:	fbb3 f2f2 	udiv	r2, r3, r2
 800687a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800687e:	441a      	add	r2, r3
 8006880:	f107 030c 	add.w	r3, r7, #12
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006888:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800688c:	7858      	ldrb	r0, [r3, #1]
 800688e:	f107 030c 	add.w	r3, r7, #12
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006898:	f107 030c 	add.w	r3, r7, #12
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6a1a      	ldr	r2, [r3, #32]
 80068a0:	2301      	movs	r3, #1
 80068a2:	f7fd fbe7 	bl	8004074 <disk_read>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <f_open+0x496>
 80068ac:	2301      	movs	r3, #1
 80068ae:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80068b2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <f_open+0x4a8>
 80068ba:	f107 030c 	add.w	r3, r7, #12
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80068c4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b08e      	sub	sp, #56	; 0x38
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	60f8      	str	r0, [r7, #12]
 80068da:	60b9      	str	r1, [r7, #8]
 80068dc:	607a      	str	r2, [r7, #4]
 80068de:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2200      	movs	r2, #0
 80068e8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f107 0214 	add.w	r2, r7, #20
 80068f0:	4611      	mov	r1, r2
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff fd16 	bl	8006324 <validate>
 80068f8:	4603      	mov	r3, r0
 80068fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80068fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006902:	2b00      	cmp	r3, #0
 8006904:	d107      	bne.n	8006916 <f_read+0x44>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	7d5b      	ldrb	r3, [r3, #21]
 800690a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800690e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <f_read+0x4a>
 8006916:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800691a:	e135      	b.n	8006b88 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	7d1b      	ldrb	r3, [r3, #20]
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <f_read+0x5a>
 8006928:	2307      	movs	r3, #7
 800692a:	e12d      	b.n	8006b88 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	429a      	cmp	r2, r3
 800693e:	f240 811e 	bls.w	8006b7e <f_read+0x2ac>
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006946:	e11a      	b.n	8006b7e <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	8992      	ldrh	r2, [r2, #12]
 8006950:	fbb3 f1f2 	udiv	r1, r3, r2
 8006954:	fb02 f201 	mul.w	r2, r2, r1
 8006958:	1a9b      	subs	r3, r3, r2
 800695a:	2b00      	cmp	r3, #0
 800695c:	f040 80d5 	bne.w	8006b0a <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	8992      	ldrh	r2, [r2, #12]
 8006968:	fbb3 f3f2 	udiv	r3, r3, r2
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	8952      	ldrh	r2, [r2, #10]
 8006970:	3a01      	subs	r2, #1
 8006972:	4013      	ands	r3, r2
 8006974:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d12f      	bne.n	80069dc <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d103      	bne.n	800698c <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	633b      	str	r3, [r7, #48]	; 0x30
 800698a:	e013      	b.n	80069b4 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	2b00      	cmp	r3, #0
 8006992:	d007      	beq.n	80069a4 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	4619      	mov	r1, r3
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f7fe fa19 	bl	8004dd2 <clmt_clust>
 80069a0:	6338      	str	r0, [r7, #48]	; 0x30
 80069a2:	e007      	b.n	80069b4 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	4619      	mov	r1, r3
 80069ac:	4610      	mov	r0, r2
 80069ae:	f7fd ff2c 	bl	800480a <get_fat>
 80069b2:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80069b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d804      	bhi.n	80069c4 <f_read+0xf2>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2202      	movs	r2, #2
 80069be:	755a      	strb	r2, [r3, #21]
 80069c0:	2302      	movs	r3, #2
 80069c2:	e0e1      	b.n	8006b88 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ca:	d104      	bne.n	80069d6 <f_read+0x104>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2201      	movs	r2, #1
 80069d0:	755a      	strb	r2, [r3, #21]
 80069d2:	2301      	movs	r3, #1
 80069d4:	e0d8      	b.n	8006b88 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069da:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	4619      	mov	r1, r3
 80069e4:	4610      	mov	r0, r2
 80069e6:	f7fd fef1 	bl	80047cc <clust2sect>
 80069ea:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d104      	bne.n	80069fc <f_read+0x12a>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2202      	movs	r2, #2
 80069f6:	755a      	strb	r2, [r3, #21]
 80069f8:	2302      	movs	r3, #2
 80069fa:	e0c5      	b.n	8006b88 <f_read+0x2b6>
			sect += csect;
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	4413      	add	r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	899b      	ldrh	r3, [r3, #12]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a10:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d041      	beq.n	8006a9c <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006a18:	69fa      	ldr	r2, [r7, #28]
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	4413      	add	r3, r2
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	8952      	ldrh	r2, [r2, #10]
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d905      	bls.n	8006a32 <f_read+0x160>
					cc = fs->csize - csect;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	895b      	ldrh	r3, [r3, #10]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	7858      	ldrb	r0, [r3, #1]
 8006a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a3c:	f7fd fb1a 	bl	8004074 <disk_read>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d004      	beq.n	8006a50 <f_read+0x17e>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	755a      	strb	r2, [r3, #21]
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e09b      	b.n	8006b88 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	7d1b      	ldrb	r3, [r3, #20]
 8006a54:	b25b      	sxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	da18      	bge.n	8006a8c <f_read+0x1ba>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a1a      	ldr	r2, [r3, #32]
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d911      	bls.n	8006a8c <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a1a      	ldr	r2, [r3, #32]
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	8992      	ldrh	r2, [r2, #12]
 8006a74:	fb02 f303 	mul.w	r3, r2, r3
 8006a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a7a:	18d0      	adds	r0, r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	899b      	ldrh	r3, [r3, #12]
 8006a86:	461a      	mov	r2, r3
 8006a88:	f7fd fbd4 	bl	8004234 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	899b      	ldrh	r3, [r3, #12]
 8006a90:	461a      	mov	r2, r3
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	fb02 f303 	mul.w	r3, r2, r3
 8006a98:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006a9a:	e05c      	b.n	8006b56 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d02e      	beq.n	8006b04 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	7d1b      	ldrb	r3, [r3, #20]
 8006aaa:	b25b      	sxtb	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	da18      	bge.n	8006ae2 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	7858      	ldrb	r0, [r3, #1]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a1a      	ldr	r2, [r3, #32]
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f7fd faf8 	bl	80040b4 <disk_write>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d004      	beq.n	8006ad4 <f_read+0x202>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	755a      	strb	r2, [r3, #21]
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e059      	b.n	8006b88 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	7d1b      	ldrb	r3, [r3, #20]
 8006ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	7858      	ldrb	r0, [r3, #1]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006aec:	2301      	movs	r3, #1
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	f7fd fac0 	bl	8004074 <disk_read>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d004      	beq.n	8006b04 <f_read+0x232>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2201      	movs	r2, #1
 8006afe:	755a      	strb	r2, [r3, #21]
 8006b00:	2301      	movs	r3, #1
 8006b02:	e041      	b.n	8006b88 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	899b      	ldrh	r3, [r3, #12]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	8992      	ldrh	r2, [r2, #12]
 8006b18:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b1c:	fb02 f201 	mul.w	r2, r2, r1
 8006b20:	1a9b      	subs	r3, r3, r2
 8006b22:	1ac3      	subs	r3, r0, r3
 8006b24:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d901      	bls.n	8006b32 <f_read+0x260>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	8992      	ldrh	r2, [r2, #12]
 8006b40:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b44:	fb02 f200 	mul.w	r2, r2, r0
 8006b48:	1a9b      	subs	r3, r3, r2
 8006b4a:	440b      	add	r3, r1
 8006b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b52:	f7fd fb6f 	bl	8004234 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5a:	4413      	add	r3, r2
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	699a      	ldr	r2, [r3, #24]
 8006b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b64:	441a      	add	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	619a      	str	r2, [r3, #24]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b70:	441a      	add	r2, r3
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f47f aee1 	bne.w	8006948 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3738      	adds	r7, #56	; 0x38
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f107 0208 	add.w	r2, r7, #8
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7ff fbbf 	bl	8006324 <validate>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d168      	bne.n	8006c82 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	7d1b      	ldrb	r3, [r3, #20]
 8006bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d062      	beq.n	8006c82 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	7d1b      	ldrb	r3, [r3, #20]
 8006bc0:	b25b      	sxtb	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	da15      	bge.n	8006bf2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	7858      	ldrb	r0, [r3, #1]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a1a      	ldr	r2, [r3, #32]
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f7fd fa6d 	bl	80040b4 <disk_write>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <f_sync+0x54>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e04f      	b.n	8006c84 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	7d1b      	ldrb	r3, [r3, #20]
 8006be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006bf2:	f7fd f9a1 	bl	8003f38 <get_fattime>
 8006bf6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4610      	mov	r0, r2
 8006c02:	f7fd fd45 	bl	8004690 <move_window>
 8006c06:	4603      	mov	r3, r0
 8006c08:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006c0a:	7dfb      	ldrb	r3, [r7, #23]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d138      	bne.n	8006c82 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c14:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	330b      	adds	r3, #11
 8006c1a:	781a      	ldrb	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	330b      	adds	r3, #11
 8006c20:	f042 0220 	orr.w	r2, r2, #32
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6818      	ldr	r0, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	461a      	mov	r2, r3
 8006c32:	68f9      	ldr	r1, [r7, #12]
 8006c34:	f7fe faca 	bl	80051cc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f103 021c 	add.w	r2, r3, #28
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	4619      	mov	r1, r3
 8006c44:	4610      	mov	r0, r2
 8006c46:	f7fd fac9 	bl	80041dc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3316      	adds	r3, #22
 8006c4e:	6939      	ldr	r1, [r7, #16]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fd fac3 	bl	80041dc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3312      	adds	r3, #18
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fd faa2 	bl	80041a6 <st_word>
					fs->wflag = 1;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2201      	movs	r2, #1
 8006c66:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fd fd3e 	bl	80046ec <sync_fs>
 8006c70:	4603      	mov	r3, r0
 8006c72:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	7d1b      	ldrb	r3, [r3, #20]
 8006c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3718      	adds	r7, #24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff ff7b 	bl	8006b90 <f_sync>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d118      	bne.n	8006cd6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f107 0208 	add.w	r2, r7, #8
 8006caa:	4611      	mov	r1, r2
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff fb39 	bl	8006324 <validate>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10c      	bne.n	8006cd6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fd fc41 	bl	8004548 <dec_lock>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d102      	bne.n	8006cd6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b090      	sub	sp, #64	; 0x40
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f107 0208 	add.w	r2, r7, #8
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff fb16 	bl	8006324 <validate>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006cfe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d103      	bne.n	8006d0e <f_lseek+0x2e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	7d5b      	ldrb	r3, [r3, #21]
 8006d0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006d0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <f_lseek+0x3c>
 8006d16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d1a:	e201      	b.n	8007120 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 80d9 	beq.w	8006ed8 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2c:	d15a      	bne.n	8006de4 <f_lseek+0x104>
			tbl = fp->cltbl;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	1d1a      	adds	r2, r3, #4
 8006d38:	627a      	str	r2, [r7, #36]	; 0x24
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	2302      	movs	r3, #2
 8006d40:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d03a      	beq.n	8006dc4 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	2300      	movs	r3, #0
 8006d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	3302      	adds	r3, #2
 8006d5a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d62:	3301      	adds	r3, #1
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fd fd4d 	bl	800480a <get_fat>
 8006d70:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d804      	bhi.n	8006d82 <f_lseek+0xa2>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	755a      	strb	r2, [r3, #21]
 8006d7e:	2302      	movs	r3, #2
 8006d80:	e1ce      	b.n	8007120 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d88:	d104      	bne.n	8006d94 <f_lseek+0xb4>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	755a      	strb	r2, [r3, #21]
 8006d90:	2301      	movs	r3, #1
 8006d92:	e1c5      	b.n	8007120 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3301      	adds	r3, #1
 8006d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d0de      	beq.n	8006d5c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d809      	bhi.n	8006dba <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	1d1a      	adds	r2, r3, #4
 8006daa:	627a      	str	r2, [r7, #36]	; 0x24
 8006dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	1d1a      	adds	r2, r3, #4
 8006db4:	627a      	str	r2, [r7, #36]	; 0x24
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d3c4      	bcc.n	8006d4e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dca:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8006dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d803      	bhi.n	8006ddc <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	e19f      	b.n	800711c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006ddc:	2311      	movs	r3, #17
 8006dde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006de2:	e19b      	b.n	800711c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d902      	bls.n	8006df4 <f_lseek+0x114>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 818d 	beq.w	800711c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7fd ffe2 	bl	8004dd2 <clmt_clust>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	f7fd fcd5 	bl	80047cc <clust2sect>
 8006e22:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d104      	bne.n	8006e34 <f_lseek+0x154>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	755a      	strb	r2, [r3, #21]
 8006e30:	2302      	movs	r3, #2
 8006e32:	e175      	b.n	8007120 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	3b01      	subs	r3, #1
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	8992      	ldrh	r2, [r2, #12]
 8006e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	8952      	ldrh	r2, [r2, #10]
 8006e44:	3a01      	subs	r2, #1
 8006e46:	4013      	ands	r3, r2
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	8992      	ldrh	r2, [r2, #12]
 8006e56:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e5a:	fb02 f201 	mul.w	r2, r2, r1
 8006e5e:	1a9b      	subs	r3, r3, r2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 815b 	beq.w	800711c <f_lseek+0x43c>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	f000 8155 	beq.w	800711c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	7d1b      	ldrb	r3, [r3, #20]
 8006e76:	b25b      	sxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	da18      	bge.n	8006eae <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	7858      	ldrb	r0, [r3, #1]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1a      	ldr	r2, [r3, #32]
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f7fd f912 	bl	80040b4 <disk_write>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d004      	beq.n	8006ea0 <f_lseek+0x1c0>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	755a      	strb	r2, [r3, #21]
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e13f      	b.n	8007120 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	7d1b      	ldrb	r3, [r3, #20]
 8006ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	7858      	ldrb	r0, [r3, #1]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006eb8:	2301      	movs	r3, #1
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	f7fd f8da 	bl	8004074 <disk_read>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d004      	beq.n	8006ed0 <f_lseek+0x1f0>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	755a      	strb	r2, [r3, #21]
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e127      	b.n	8007120 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	621a      	str	r2, [r3, #32]
 8006ed6:	e121      	b.n	800711c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d908      	bls.n	8006ef4 <f_lseek+0x214>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	7d1b      	ldrb	r3, [r3, #20]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d102      	bne.n	8006ef4 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006efa:	2300      	movs	r3, #0
 8006efc:	637b      	str	r3, [r7, #52]	; 0x34
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f02:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 80b5 	beq.w	8007076 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	895b      	ldrh	r3, [r3, #10]
 8006f10:	461a      	mov	r2, r3
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	899b      	ldrh	r3, [r3, #12]
 8006f16:	fb03 f302 	mul.w	r3, r3, r2
 8006f1a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d01b      	beq.n	8006f5a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	1e5a      	subs	r2, r3, #1
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	1e59      	subs	r1, r3, #1
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d30f      	bcc.n	8006f5a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	1e5a      	subs	r2, r3, #1
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	425b      	negs	r3, r3
 8006f42:	401a      	ands	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f58:	e022      	b.n	8006fa0 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d119      	bne.n	8006f9a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2100      	movs	r1, #0
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fd fe99 	bl	8004ca2 <create_chain>
 8006f70:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d104      	bne.n	8006f82 <f_lseek+0x2a2>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	755a      	strb	r2, [r3, #21]
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e0ce      	b.n	8007120 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f88:	d104      	bne.n	8006f94 <f_lseek+0x2b4>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	755a      	strb	r2, [r3, #21]
 8006f90:	2301      	movs	r3, #1
 8006f92:	e0c5      	b.n	8007120 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f98:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f9e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d067      	beq.n	8007076 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8006fa6:	e03a      	b.n	800701e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	699a      	ldr	r2, [r3, #24]
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	441a      	add	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	7d1b      	ldrb	r3, [r3, #20]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fd fe68 	bl	8004ca2 <create_chain>
 8006fd2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d108      	bne.n	8006fec <f_lseek+0x30c>
							ofs = 0; break;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	e022      	b.n	8007026 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fd fc10 	bl	800480a <get_fat>
 8006fea:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff2:	d104      	bne.n	8006ffe <f_lseek+0x31e>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	755a      	strb	r2, [r3, #21]
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e090      	b.n	8007120 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	2b01      	cmp	r3, #1
 8007002:	d904      	bls.n	800700e <f_lseek+0x32e>
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800700a:	429a      	cmp	r2, r3
 800700c:	d304      	bcc.n	8007018 <f_lseek+0x338>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2202      	movs	r2, #2
 8007012:	755a      	strb	r2, [r3, #21]
 8007014:	2302      	movs	r3, #2
 8007016:	e083      	b.n	8007120 <f_lseek+0x440>
					fp->clust = clst;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800701c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	429a      	cmp	r2, r3
 8007024:	d8c0      	bhi.n	8006fa8 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	699a      	ldr	r2, [r3, #24]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	441a      	add	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	899b      	ldrh	r3, [r3, #12]
 8007036:	461a      	mov	r2, r3
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	fbb3 f1f2 	udiv	r1, r3, r2
 800703e:	fb02 f201 	mul.w	r2, r2, r1
 8007042:	1a9b      	subs	r3, r3, r2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d016      	beq.n	8007076 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800704c:	4618      	mov	r0, r3
 800704e:	f7fd fbbd 	bl	80047cc <clust2sect>
 8007052:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007056:	2b00      	cmp	r3, #0
 8007058:	d104      	bne.n	8007064 <f_lseek+0x384>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2202      	movs	r2, #2
 800705e:	755a      	strb	r2, [r3, #21]
 8007060:	2302      	movs	r3, #2
 8007062:	e05d      	b.n	8007120 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	899b      	ldrh	r3, [r3, #12]
 8007068:	461a      	mov	r2, r3
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007070:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007072:	4413      	add	r3, r2
 8007074:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	699a      	ldr	r2, [r3, #24]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	429a      	cmp	r2, r3
 8007080:	d90a      	bls.n	8007098 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	699a      	ldr	r2, [r3, #24]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	7d1b      	ldrb	r3, [r3, #20]
 800708e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007092:	b2da      	uxtb	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	8992      	ldrh	r2, [r2, #12]
 80070a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80070a4:	fb02 f201 	mul.w	r2, r2, r1
 80070a8:	1a9b      	subs	r3, r3, r2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d036      	beq.n	800711c <f_lseek+0x43c>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d031      	beq.n	800711c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	7d1b      	ldrb	r3, [r3, #20]
 80070bc:	b25b      	sxtb	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	da18      	bge.n	80070f4 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	7858      	ldrb	r0, [r3, #1]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a1a      	ldr	r2, [r3, #32]
 80070d0:	2301      	movs	r3, #1
 80070d2:	f7fc ffef 	bl	80040b4 <disk_write>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d004      	beq.n	80070e6 <f_lseek+0x406>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	755a      	strb	r2, [r3, #21]
 80070e2:	2301      	movs	r3, #1
 80070e4:	e01c      	b.n	8007120 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	7d1b      	ldrb	r3, [r3, #20]
 80070ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	7858      	ldrb	r0, [r3, #1]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070fe:	2301      	movs	r3, #1
 8007100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007102:	f7fc ffb7 	bl	8004074 <disk_read>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d004      	beq.n	8007116 <f_lseek+0x436>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	755a      	strb	r2, [r3, #21]
 8007112:	2301      	movs	r3, #1
 8007114:	e004      	b.n	8007120 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800711a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800711c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007120:	4618      	mov	r0, r3
 8007122:	3740      	adds	r7, #64	; 0x40
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	4613      	mov	r3, r2
 8007134:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007136:	2301      	movs	r3, #1
 8007138:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800713e:	4b1f      	ldr	r3, [pc, #124]	; (80071bc <FATFS_LinkDriverEx+0x94>)
 8007140:	7a5b      	ldrb	r3, [r3, #9]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	d131      	bne.n	80071ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007148:	4b1c      	ldr	r3, [pc, #112]	; (80071bc <FATFS_LinkDriverEx+0x94>)
 800714a:	7a5b      	ldrb	r3, [r3, #9]
 800714c:	b2db      	uxtb	r3, r3
 800714e:	461a      	mov	r2, r3
 8007150:	4b1a      	ldr	r3, [pc, #104]	; (80071bc <FATFS_LinkDriverEx+0x94>)
 8007152:	2100      	movs	r1, #0
 8007154:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007156:	4b19      	ldr	r3, [pc, #100]	; (80071bc <FATFS_LinkDriverEx+0x94>)
 8007158:	7a5b      	ldrb	r3, [r3, #9]
 800715a:	b2db      	uxtb	r3, r3
 800715c:	4a17      	ldr	r2, [pc, #92]	; (80071bc <FATFS_LinkDriverEx+0x94>)
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007166:	4b15      	ldr	r3, [pc, #84]	; (80071bc <FATFS_LinkDriverEx+0x94>)
 8007168:	7a5b      	ldrb	r3, [r3, #9]
 800716a:	b2db      	uxtb	r3, r3
 800716c:	461a      	mov	r2, r3
 800716e:	4b13      	ldr	r3, [pc, #76]	; (80071bc <FATFS_LinkDriverEx+0x94>)
 8007170:	4413      	add	r3, r2
 8007172:	79fa      	ldrb	r2, [r7, #7]
 8007174:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007176:	4b11      	ldr	r3, [pc, #68]	; (80071bc <FATFS_LinkDriverEx+0x94>)
 8007178:	7a5b      	ldrb	r3, [r3, #9]
 800717a:	b2db      	uxtb	r3, r3
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	b2d1      	uxtb	r1, r2
 8007180:	4a0e      	ldr	r2, [pc, #56]	; (80071bc <FATFS_LinkDriverEx+0x94>)
 8007182:	7251      	strb	r1, [r2, #9]
 8007184:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007186:	7dbb      	ldrb	r3, [r7, #22]
 8007188:	3330      	adds	r3, #48	; 0x30
 800718a:	b2da      	uxtb	r2, r3
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	3301      	adds	r3, #1
 8007194:	223a      	movs	r2, #58	; 0x3a
 8007196:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	3302      	adds	r3, #2
 800719c:	222f      	movs	r2, #47	; 0x2f
 800719e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	3303      	adds	r3, #3
 80071a4:	2200      	movs	r2, #0
 80071a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	200029d4 	.word	0x200029d4

080071c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80071ca:	2200      	movs	r2, #0
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7ff ffaa 	bl	8007128 <FATFS_LinkDriverEx>
 80071d4:	4603      	mov	r3, r0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
	...

080071e0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	6039      	str	r1, [r7, #0]
 80071ea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80071ec:	88fb      	ldrh	r3, [r7, #6]
 80071ee:	2b7f      	cmp	r3, #127	; 0x7f
 80071f0:	d802      	bhi.n	80071f8 <ff_convert+0x18>
		c = chr;
 80071f2:	88fb      	ldrh	r3, [r7, #6]
 80071f4:	81fb      	strh	r3, [r7, #14]
 80071f6:	e025      	b.n	8007244 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00b      	beq.n	8007216 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80071fe:	88fb      	ldrh	r3, [r7, #6]
 8007200:	2bff      	cmp	r3, #255	; 0xff
 8007202:	d805      	bhi.n	8007210 <ff_convert+0x30>
 8007204:	88fb      	ldrh	r3, [r7, #6]
 8007206:	3b80      	subs	r3, #128	; 0x80
 8007208:	4a12      	ldr	r2, [pc, #72]	; (8007254 <ff_convert+0x74>)
 800720a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800720e:	e000      	b.n	8007212 <ff_convert+0x32>
 8007210:	2300      	movs	r3, #0
 8007212:	81fb      	strh	r3, [r7, #14]
 8007214:	e016      	b.n	8007244 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007216:	2300      	movs	r3, #0
 8007218:	81fb      	strh	r3, [r7, #14]
 800721a:	e009      	b.n	8007230 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800721c:	89fb      	ldrh	r3, [r7, #14]
 800721e:	4a0d      	ldr	r2, [pc, #52]	; (8007254 <ff_convert+0x74>)
 8007220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007224:	88fa      	ldrh	r2, [r7, #6]
 8007226:	429a      	cmp	r2, r3
 8007228:	d006      	beq.n	8007238 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800722a:	89fb      	ldrh	r3, [r7, #14]
 800722c:	3301      	adds	r3, #1
 800722e:	81fb      	strh	r3, [r7, #14]
 8007230:	89fb      	ldrh	r3, [r7, #14]
 8007232:	2b7f      	cmp	r3, #127	; 0x7f
 8007234:	d9f2      	bls.n	800721c <ff_convert+0x3c>
 8007236:	e000      	b.n	800723a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007238:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800723a:	89fb      	ldrh	r3, [r7, #14]
 800723c:	3380      	adds	r3, #128	; 0x80
 800723e:	b29b      	uxth	r3, r3
 8007240:	b2db      	uxtb	r3, r3
 8007242:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007244:	89fb      	ldrh	r3, [r7, #14]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	08012db8 	.word	0x08012db8

08007258 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	4603      	mov	r3, r0
 8007260:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007262:	88fb      	ldrh	r3, [r7, #6]
 8007264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007268:	d201      	bcs.n	800726e <ff_wtoupper+0x16>
 800726a:	4b3e      	ldr	r3, [pc, #248]	; (8007364 <ff_wtoupper+0x10c>)
 800726c:	e000      	b.n	8007270 <ff_wtoupper+0x18>
 800726e:	4b3e      	ldr	r3, [pc, #248]	; (8007368 <ff_wtoupper+0x110>)
 8007270:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	1c9a      	adds	r2, r3, #2
 8007276:	617a      	str	r2, [r7, #20]
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800727c:	8a7b      	ldrh	r3, [r7, #18]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d068      	beq.n	8007354 <ff_wtoupper+0xfc>
 8007282:	88fa      	ldrh	r2, [r7, #6]
 8007284:	8a7b      	ldrh	r3, [r7, #18]
 8007286:	429a      	cmp	r2, r3
 8007288:	d364      	bcc.n	8007354 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	1c9a      	adds	r2, r3, #2
 800728e:	617a      	str	r2, [r7, #20]
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	823b      	strh	r3, [r7, #16]
 8007294:	8a3b      	ldrh	r3, [r7, #16]
 8007296:	0a1b      	lsrs	r3, r3, #8
 8007298:	81fb      	strh	r3, [r7, #14]
 800729a:	8a3b      	ldrh	r3, [r7, #16]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80072a0:	88fa      	ldrh	r2, [r7, #6]
 80072a2:	8a79      	ldrh	r1, [r7, #18]
 80072a4:	8a3b      	ldrh	r3, [r7, #16]
 80072a6:	440b      	add	r3, r1
 80072a8:	429a      	cmp	r2, r3
 80072aa:	da49      	bge.n	8007340 <ff_wtoupper+0xe8>
			switch (cmd) {
 80072ac:	89fb      	ldrh	r3, [r7, #14]
 80072ae:	2b08      	cmp	r3, #8
 80072b0:	d84f      	bhi.n	8007352 <ff_wtoupper+0xfa>
 80072b2:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <ff_wtoupper+0x60>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	080072dd 	.word	0x080072dd
 80072bc:	080072ef 	.word	0x080072ef
 80072c0:	08007305 	.word	0x08007305
 80072c4:	0800730d 	.word	0x0800730d
 80072c8:	08007315 	.word	0x08007315
 80072cc:	0800731d 	.word	0x0800731d
 80072d0:	08007325 	.word	0x08007325
 80072d4:	0800732d 	.word	0x0800732d
 80072d8:	08007335 	.word	0x08007335
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80072dc:	88fa      	ldrh	r2, [r7, #6]
 80072de:	8a7b      	ldrh	r3, [r7, #18]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	4413      	add	r3, r2
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	80fb      	strh	r3, [r7, #6]
 80072ec:	e027      	b.n	800733e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80072ee:	88fa      	ldrh	r2, [r7, #6]
 80072f0:	8a7b      	ldrh	r3, [r7, #18]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	88fa      	ldrh	r2, [r7, #6]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	80fb      	strh	r3, [r7, #6]
 8007302:	e01c      	b.n	800733e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007304:	88fb      	ldrh	r3, [r7, #6]
 8007306:	3b10      	subs	r3, #16
 8007308:	80fb      	strh	r3, [r7, #6]
 800730a:	e018      	b.n	800733e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800730c:	88fb      	ldrh	r3, [r7, #6]
 800730e:	3b20      	subs	r3, #32
 8007310:	80fb      	strh	r3, [r7, #6]
 8007312:	e014      	b.n	800733e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007314:	88fb      	ldrh	r3, [r7, #6]
 8007316:	3b30      	subs	r3, #48	; 0x30
 8007318:	80fb      	strh	r3, [r7, #6]
 800731a:	e010      	b.n	800733e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800731c:	88fb      	ldrh	r3, [r7, #6]
 800731e:	3b1a      	subs	r3, #26
 8007320:	80fb      	strh	r3, [r7, #6]
 8007322:	e00c      	b.n	800733e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007324:	88fb      	ldrh	r3, [r7, #6]
 8007326:	3308      	adds	r3, #8
 8007328:	80fb      	strh	r3, [r7, #6]
 800732a:	e008      	b.n	800733e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800732c:	88fb      	ldrh	r3, [r7, #6]
 800732e:	3b50      	subs	r3, #80	; 0x50
 8007330:	80fb      	strh	r3, [r7, #6]
 8007332:	e004      	b.n	800733e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007334:	88fb      	ldrh	r3, [r7, #6]
 8007336:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800733a:	80fb      	strh	r3, [r7, #6]
 800733c:	bf00      	nop
			}
			break;
 800733e:	e008      	b.n	8007352 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007340:	89fb      	ldrh	r3, [r7, #14]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d195      	bne.n	8007272 <ff_wtoupper+0x1a>
 8007346:	8a3b      	ldrh	r3, [r7, #16]
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	4413      	add	r3, r2
 800734e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007350:	e78f      	b.n	8007272 <ff_wtoupper+0x1a>
			break;
 8007352:	bf00      	nop
	}

	return chr;
 8007354:	88fb      	ldrh	r3, [r7, #6]
}
 8007356:	4618      	mov	r0, r3
 8007358:	371c      	adds	r7, #28
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	08012eb8 	.word	0x08012eb8
 8007368:	080130ac 	.word	0x080130ac

0800736c <TEXT_Callback>:
 800736c:	b530      	push	{r4, r5, lr}
 800736e:	6845      	ldr	r5, [r0, #4]
 8007370:	4604      	mov	r4, r0
 8007372:	b085      	sub	sp, #20
 8007374:	4628      	mov	r0, r5
 8007376:	4621      	mov	r1, r4
 8007378:	f008 f848 	bl	800f40c <WIDGET_HandleActive>
 800737c:	2800      	cmp	r0, #0
 800737e:	d056      	beq.n	800742e <TEXT_Callback+0xc2>
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	2b0f      	cmp	r3, #15
 8007384:	d01e      	beq.n	80073c4 <TEXT_Callback+0x58>
 8007386:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800738a:	d00e      	beq.n	80073aa <TEXT_Callback+0x3e>
 800738c:	2b0b      	cmp	r3, #11
 800738e:	d14b      	bne.n	8007428 <TEXT_Callback+0xbc>
 8007390:	4628      	mov	r0, r5
 8007392:	f007 fd79 	bl	800ee88 <GUI_ALLOC_LockH>
 8007396:	ad04      	add	r5, sp, #16
 8007398:	f845 0d08 	str.w	r0, [r5, #-8]!
 800739c:	3044      	adds	r0, #68	; 0x44
 800739e:	f007 ff43 	bl	800f228 <GUI_ALLOC_FreePtr>
 80073a2:	4628      	mov	r0, r5
 80073a4:	f007 fd7e 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80073a8:	e03e      	b.n	8007428 <TEXT_Callback+0xbc>
 80073aa:	68e3      	ldr	r3, [r4, #12]
 80073ac:	b12b      	cbz	r3, 80073ba <TEXT_Callback+0x4e>
 80073ae:	7a1b      	ldrb	r3, [r3, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	bf0c      	ite	eq
 80073b4:	2102      	moveq	r1, #2
 80073b6:	2101      	movne	r1, #1
 80073b8:	e000      	b.n	80073bc <TEXT_Callback+0x50>
 80073ba:	2103      	movs	r1, #3
 80073bc:	4628      	mov	r0, r5
 80073be:	f001 f964 	bl	800868a <WM_NotifyParent>
 80073c2:	e031      	b.n	8007428 <TEXT_Callback+0xbc>
 80073c4:	4628      	mov	r0, r5
 80073c6:	f007 fd5f 	bl	800ee88 <GUI_ALLOC_LockH>
 80073ca:	9000      	str	r0, [sp, #0]
 80073cc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80073ce:	f005 fa1d 	bl	800c80c <LCD_SetColor>
 80073d2:	9b00      	ldr	r3, [sp, #0]
 80073d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80073d6:	f006 fb07 	bl	800d9e8 <GUI_SetFont>
 80073da:	4628      	mov	r0, r5
 80073dc:	f000 fdf2 	bl	8007fc4 <WM_GetHasTrans>
 80073e0:	b928      	cbnz	r0, 80073ee <TEXT_Callback+0x82>
 80073e2:	9b00      	ldr	r3, [sp, #0]
 80073e4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80073e6:	f005 fa09 	bl	800c7fc <LCD_SetBkColor>
 80073ea:	f006 f95d 	bl	800d6a8 <GUI_Clear>
 80073ee:	9b00      	ldr	r3, [sp, #0]
 80073f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f2:	b1ab      	cbz	r3, 8007420 <TEXT_Callback+0xb4>
 80073f4:	2002      	movs	r0, #2
 80073f6:	f006 fb2d 	bl	800da54 <GUI_SetTextMode>
 80073fa:	a802      	add	r0, sp, #8
 80073fc:	f000 ff74 	bl	80082e8 <WM_GetClientRect>
 8007400:	9b00      	ldr	r3, [sp, #0]
 8007402:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8007404:	f007 fd40 	bl	800ee88 <GUI_ALLOC_LockH>
 8007408:	9b00      	ldr	r3, [sp, #0]
 800740a:	9001      	str	r0, [sp, #4]
 800740c:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8007410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007414:	a902      	add	r1, sp, #8
 8007416:	f005 ff5e 	bl	800d2d6 <GUI_DispStringInRectWrap>
 800741a:	a801      	add	r0, sp, #4
 800741c:	f007 fd42 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8007420:	4668      	mov	r0, sp
 8007422:	f007 fd3f 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8007426:	e002      	b.n	800742e <TEXT_Callback+0xc2>
 8007428:	4620      	mov	r0, r4
 800742a:	f002 fb75 	bl	8009b18 <WM_DefaultProc>
 800742e:	b005      	add	sp, #20
 8007430:	bd30      	pop	{r4, r5, pc}
	...

08007434 <TEXT_CreateUser>:
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800743a:	9500      	str	r5, [sp, #0]
 800743c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800743e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007440:	f045 0501 	orr.w	r5, r5, #1
 8007444:	9501      	str	r5, [sp, #4]
 8007446:	4d1a      	ldr	r5, [pc, #104]	; (80074b0 <TEXT_CreateUser+0x7c>)
 8007448:	9502      	str	r5, [sp, #8]
 800744a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800744c:	3520      	adds	r5, #32
 800744e:	9503      	str	r5, [sp, #12]
 8007450:	f001 ff70 	bl	8009334 <WM_CreateWindowAsChild>
 8007454:	4605      	mov	r5, r0
 8007456:	b340      	cbz	r0, 80074aa <TEXT_CreateUser+0x76>
 8007458:	b18c      	cbz	r4, 800747e <TEXT_CreateUser+0x4a>
 800745a:	4620      	mov	r0, r4
 800745c:	f7f8 feb8 	bl	80001d0 <strlen>
 8007460:	3001      	adds	r0, #1
 8007462:	f007 fee9 	bl	800f238 <GUI_ALLOC_AllocZero>
 8007466:	4606      	mov	r6, r0
 8007468:	b150      	cbz	r0, 8007480 <TEXT_CreateUser+0x4c>
 800746a:	f007 fd0d 	bl	800ee88 <GUI_ALLOC_LockH>
 800746e:	4621      	mov	r1, r4
 8007470:	9005      	str	r0, [sp, #20]
 8007472:	f00a fef6 	bl	8012262 <strcpy>
 8007476:	a805      	add	r0, sp, #20
 8007478:	f007 fd14 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800747c:	e000      	b.n	8007480 <TEXT_CreateUser+0x4c>
 800747e:	4626      	mov	r6, r4
 8007480:	4628      	mov	r0, r5
 8007482:	f007 fd01 	bl	800ee88 <GUI_ALLOC_LockH>
 8007486:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007488:	9005      	str	r0, [sp, #20]
 800748a:	2200      	movs	r2, #0
 800748c:	f007 ff8e 	bl	800f3ac <WIDGET__Init>
 8007490:	9c05      	ldr	r4, [sp, #20]
 8007492:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007494:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8007498:	4b06      	ldr	r3, [pc, #24]	; (80074b4 <TEXT_CreateUser+0x80>)
 800749a:	6466      	str	r6, [r4, #68]	; 0x44
 800749c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800749e:	3434      	adds	r4, #52	; 0x34
 80074a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80074a4:	a805      	add	r0, sp, #20
 80074a6:	f007 fcfd 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80074aa:	4628      	mov	r0, r5
 80074ac:	b006      	add	sp, #24
 80074ae:	bd70      	pop	{r4, r5, r6, pc}
 80074b0:	0800736d 	.word	0x0800736d
 80074b4:	20000024 	.word	0x20000024

080074b8 <TEXT_CreateIndirect>:
 80074b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ba:	b087      	sub	sp, #28
 80074bc:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 80074c0:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 80074c4:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 80074c8:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 80074cc:	9100      	str	r1, [sp, #0]
 80074ce:	2102      	movs	r1, #2
 80074d0:	9101      	str	r1, [sp, #4]
 80074d2:	8a41      	ldrh	r1, [r0, #18]
 80074d4:	9102      	str	r1, [sp, #8]
 80074d6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80074da:	9103      	str	r1, [sp, #12]
 80074dc:	6844      	ldr	r4, [r0, #4]
 80074de:	9404      	str	r4, [sp, #16]
 80074e0:	6984      	ldr	r4, [r0, #24]
 80074e2:	9405      	str	r4, [sp, #20]
 80074e4:	eb0e 0002 	add.w	r0, lr, r2
 80074e8:	18f9      	adds	r1, r7, r3
 80074ea:	4632      	mov	r2, r6
 80074ec:	462b      	mov	r3, r5
 80074ee:	f7ff ffa1 	bl	8007434 <TEXT_CreateUser>
 80074f2:	b007      	add	sp, #28
 80074f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074f6 <TEXT_SetText>:
 80074f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074f8:	460c      	mov	r4, r1
 80074fa:	4605      	mov	r5, r0
 80074fc:	b300      	cbz	r0, 8007540 <TEXT_SetText+0x4a>
 80074fe:	f007 fcc3 	bl	800ee88 <GUI_ALLOC_LockH>
 8007502:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007504:	9000      	str	r0, [sp, #0]
 8007506:	4668      	mov	r0, sp
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	f007 fccb 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800750e:	4621      	mov	r1, r4
 8007510:	a801      	add	r0, sp, #4
 8007512:	f005 fa81 	bl	800ca18 <GUI__SetText>
 8007516:	f1d0 0401 	rsbs	r4, r0, #1
 800751a:	bf38      	it	cc
 800751c:	2400      	movcc	r4, #0
 800751e:	b984      	cbnz	r4, 8007542 <TEXT_SetText+0x4c>
 8007520:	4628      	mov	r0, r5
 8007522:	f007 fcb1 	bl	800ee88 <GUI_ALLOC_LockH>
 8007526:	9a01      	ldr	r2, [sp, #4]
 8007528:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800752a:	9000      	str	r0, [sp, #0]
 800752c:	4291      	cmp	r1, r2
 800752e:	bf18      	it	ne
 8007530:	6442      	strne	r2, [r0, #68]	; 0x44
 8007532:	4668      	mov	r0, sp
 8007534:	f007 fcb6 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8007538:	4628      	mov	r0, r5
 800753a:	f001 fecd 	bl	80092d8 <WM_InvalidateWindow>
 800753e:	e000      	b.n	8007542 <TEXT_SetText+0x4c>
 8007540:	2401      	movs	r4, #1
 8007542:	4620      	mov	r0, r4
 8007544:	b003      	add	sp, #12
 8007546:	bd30      	pop	{r4, r5, pc}

08007548 <FRAMEWIN__GetBorderSize>:
 8007548:	b570      	push	{r4, r5, r6, lr}
 800754a:	b08a      	sub	sp, #40	; 0x28
 800754c:	4605      	mov	r5, r0
 800754e:	460c      	mov	r4, r1
 8007550:	f007 fc9a 	bl	800ee88 <GUI_ALLOC_LockH>
 8007554:	ab0a      	add	r3, sp, #40	; 0x28
 8007556:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8007558:	f843 0d28 	str.w	r0, [r3, #-40]!
 800755c:	4668      	mov	r0, sp
 800755e:	6896      	ldr	r6, [r2, #8]
 8007560:	f007 fca0 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8007564:	9501      	str	r5, [sp, #4]
 8007566:	2c03      	cmp	r4, #3
 8007568:	d80b      	bhi.n	8007582 <FRAMEWIN__GetBorderSize+0x3a>
 800756a:	e8df f004 	tbb	[pc, r4]
 800756e:	0402      	.short	0x0402
 8007570:	0806      	.short	0x0806
 8007572:	2318      	movs	r3, #24
 8007574:	e004      	b.n	8007580 <FRAMEWIN__GetBorderSize+0x38>
 8007576:	2316      	movs	r3, #22
 8007578:	e002      	b.n	8007580 <FRAMEWIN__GetBorderSize+0x38>
 800757a:	2315      	movs	r3, #21
 800757c:	e000      	b.n	8007580 <FRAMEWIN__GetBorderSize+0x38>
 800757e:	2317      	movs	r3, #23
 8007580:	9302      	str	r3, [sp, #8]
 8007582:	6873      	ldr	r3, [r6, #4]
 8007584:	a801      	add	r0, sp, #4
 8007586:	4798      	blx	r3
 8007588:	b00a      	add	sp, #40	; 0x28
 800758a:	bd70      	pop	{r4, r5, r6, pc}

0800758c <_SetActive>:
 800758c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800758e:	4604      	mov	r4, r0
 8007590:	460d      	mov	r5, r1
 8007592:	f007 fc79 	bl	800ee88 <GUI_ALLOC_LockH>
 8007596:	9001      	str	r0, [sp, #4]
 8007598:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 800759c:	b125      	cbz	r5, 80075a8 <_SetActive+0x1c>
 800759e:	0711      	lsls	r1, r2, #28
 80075a0:	d40b      	bmi.n	80075ba <_SetActive+0x2e>
 80075a2:	f042 0208 	orr.w	r2, r2, #8
 80075a6:	e003      	b.n	80075b0 <_SetActive+0x24>
 80075a8:	0713      	lsls	r3, r2, #28
 80075aa:	d506      	bpl.n	80075ba <_SetActive+0x2e>
 80075ac:	f022 0208 	bic.w	r2, r2, #8
 80075b0:	f8a0 207c 	strh.w	r2, [r0, #124]	; 0x7c
 80075b4:	4620      	mov	r0, r4
 80075b6:	f001 fe8f 	bl	80092d8 <WM_InvalidateWindow>
 80075ba:	a801      	add	r0, sp, #4
 80075bc:	f007 fc72 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80075c0:	b003      	add	sp, #12
 80075c2:	bd30      	pop	{r4, r5, pc}

080075c4 <FRAMEWIN__cbClient>:
 80075c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075c8:	6845      	ldr	r5, [r0, #4]
 80075ca:	b087      	sub	sp, #28
 80075cc:	4604      	mov	r4, r0
 80075ce:	4628      	mov	r0, r5
 80075d0:	f000 ff27 	bl	8008422 <WM_GetParent>
 80075d4:	4681      	mov	r9, r0
 80075d6:	f007 fc57 	bl	800ee88 <GUI_ALLOC_LockH>
 80075da:	4603      	mov	r3, r0
 80075dc:	a806      	add	r0, sp, #24
 80075de:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 80075e0:	f840 3d14 	str.w	r3, [r0, #-20]!
 80075e4:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 80075e6:	f8d3 8080 	ldr.w	r8, [r3, #128]	; 0x80
 80075ea:	f007 fc5b 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	2b17      	cmp	r3, #23
 80075f2:	d053      	beq.n	800769c <FRAMEWIN__cbClient+0xd8>
 80075f4:	dc09      	bgt.n	800760a <FRAMEWIN__cbClient+0x46>
 80075f6:	2b0f      	cmp	r3, #15
 80075f8:	d014      	beq.n	8007624 <FRAMEWIN__cbClient+0x60>
 80075fa:	dc02      	bgt.n	8007602 <FRAMEWIN__cbClient+0x3e>
 80075fc:	2b0e      	cmp	r3, #14
 80075fe:	d034      	beq.n	800766a <FRAMEWIN__cbClient+0xa6>
 8007600:	e046      	b.n	8007690 <FRAMEWIN__cbClient+0xcc>
 8007602:	3b14      	subs	r3, #20
 8007604:	2b01      	cmp	r3, #1
 8007606:	d949      	bls.n	800769c <FRAMEWIN__cbClient+0xd8>
 8007608:	e042      	b.n	8007690 <FRAMEWIN__cbClient+0xcc>
 800760a:	2b1f      	cmp	r3, #31
 800760c:	d028      	beq.n	8007660 <FRAMEWIN__cbClient+0x9c>
 800760e:	dc02      	bgt.n	8007616 <FRAMEWIN__cbClient+0x52>
 8007610:	2b1e      	cmp	r3, #30
 8007612:	d01a      	beq.n	800764a <FRAMEWIN__cbClient+0x86>
 8007614:	e03c      	b.n	8007690 <FRAMEWIN__cbClient+0xcc>
 8007616:	2b22      	cmp	r3, #34	; 0x22
 8007618:	d038      	beq.n	800768c <FRAMEWIN__cbClient+0xc8>
 800761a:	2b31      	cmp	r3, #49	; 0x31
 800761c:	d138      	bne.n	8007690 <FRAMEWIN__cbClient+0xcc>
 800761e:	2300      	movs	r3, #0
 8007620:	60e3      	str	r3, [r4, #12]
 8007622:	e03e      	b.n	80076a2 <FRAMEWIN__cbClient+0xde>
 8007624:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8007628:	429e      	cmp	r6, r3
 800762a:	d004      	beq.n	8007636 <FRAMEWIN__cbClient+0x72>
 800762c:	4630      	mov	r0, r6
 800762e:	f005 f8e5 	bl	800c7fc <LCD_SetBkColor>
 8007632:	f006 f839 	bl	800d6a8 <GUI_Clear>
 8007636:	2f00      	cmp	r7, #0
 8007638:	d033      	beq.n	80076a2 <FRAMEWIN__cbClient+0xde>
 800763a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800763e:	ae02      	add	r6, sp, #8
 8007640:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8007644:	9503      	str	r5, [sp, #12]
 8007646:	4630      	mov	r0, r6
 8007648:	e026      	b.n	8007698 <FRAMEWIN__cbClient+0xd4>
 800764a:	68e3      	ldr	r3, [r4, #12]
 800764c:	b34b      	cbz	r3, 80076a2 <FRAMEWIN__cbClient+0xde>
 800764e:	f1b8 0f00 	cmp.w	r8, #0
 8007652:	d017      	beq.n	8007684 <FRAMEWIN__cbClient+0xc0>
 8007654:	45a8      	cmp	r8, r5
 8007656:	d015      	beq.n	8007684 <FRAMEWIN__cbClient+0xc0>
 8007658:	4640      	mov	r0, r8
 800765a:	f001 f821 	bl	80086a0 <WM_SetFocus>
 800765e:	e020      	b.n	80076a2 <FRAMEWIN__cbClient+0xde>
 8007660:	4648      	mov	r0, r9
 8007662:	4621      	mov	r1, r4
 8007664:	f007 fed2 	bl	800f40c <WIDGET_HandleActive>
 8007668:	e01b      	b.n	80076a2 <FRAMEWIN__cbClient+0xde>
 800766a:	68e3      	ldr	r3, [r4, #12]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	2a00      	cmp	r2, #0
 8007670:	dd0e      	ble.n	8007690 <FRAMEWIN__cbClient+0xcc>
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b09      	cmp	r3, #9
 8007676:	d005      	beq.n	8007684 <FRAMEWIN__cbClient+0xc0>
 8007678:	2b0a      	cmp	r3, #10
 800767a:	d109      	bne.n	8007690 <FRAMEWIN__cbClient+0xcc>
 800767c:	4628      	mov	r0, r5
 800767e:	f000 fcb9 	bl	8007ff4 <WM_SetFocusOnPrevChild>
 8007682:	e00e      	b.n	80076a2 <FRAMEWIN__cbClient+0xde>
 8007684:	4628      	mov	r0, r5
 8007686:	f000 fce5 	bl	8008054 <WM_SetFocusOnNextChild>
 800768a:	e00a      	b.n	80076a2 <FRAMEWIN__cbClient+0xde>
 800768c:	60e6      	str	r6, [r4, #12]
 800768e:	e008      	b.n	80076a2 <FRAMEWIN__cbClient+0xde>
 8007690:	b127      	cbz	r7, 800769c <FRAMEWIN__cbClient+0xd8>
 8007692:	f8c4 9004 	str.w	r9, [r4, #4]
 8007696:	4620      	mov	r0, r4
 8007698:	47b8      	blx	r7
 800769a:	e002      	b.n	80076a2 <FRAMEWIN__cbClient+0xde>
 800769c:	4620      	mov	r0, r4
 800769e:	f002 fa3b 	bl	8009b18 <WM_DefaultProc>
 80076a2:	b007      	add	sp, #28
 80076a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080076a8 <FRAMEWIN__CalcTitleHeight>:
 80076a8:	b508      	push	{r3, lr}
 80076aa:	4603      	mov	r3, r0
 80076ac:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 80076ae:	f000 0020 	and.w	r0, r0, #32
 80076b2:	b280      	uxth	r0, r0
 80076b4:	b130      	cbz	r0, 80076c4 <FRAMEWIN__CalcTitleHeight+0x1c>
 80076b6:	f9b3 0054 	ldrsh.w	r0, [r3, #84]	; 0x54
 80076ba:	b918      	cbnz	r0, 80076c4 <FRAMEWIN__CalcTitleHeight+0x1c>
 80076bc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80076be:	f006 f8d7 	bl	800d870 <GUI_GetYSizeOfFont>
 80076c2:	3002      	adds	r0, #2
 80076c4:	bd08      	pop	{r3, pc}

080076c6 <FRAMEWIN__GetTitleLimits>:
 80076c6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80076ca:	4607      	mov	r7, r0
 80076cc:	460d      	mov	r5, r1
 80076ce:	4616      	mov	r6, r2
 80076d0:	f007 fbda 	bl	800ee88 <GUI_ALLOC_LockH>
 80076d4:	4603      	mov	r3, r0
 80076d6:	a802      	add	r0, sp, #8
 80076d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80076da:	f840 3d08 	str.w	r3, [r0, #-8]!
 80076de:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80076e2:	f8b3 8000 	ldrh.w	r8, [r3]
 80076e6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80076ea:	4668      	mov	r0, sp
 80076ec:	f007 fbda 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80076f0:	f8da 3000 	ldr.w	r3, [sl]
 80076f4:	4638      	mov	r0, r7
 80076f6:	2100      	movs	r1, #0
 80076f8:	4798      	blx	r3
 80076fa:	4682      	mov	sl, r0
 80076fc:	4638      	mov	r0, r7
 80076fe:	f000 fe1b 	bl	8008338 <WM_GetFirstChild>
 8007702:	4604      	mov	r4, r0
 8007704:	b340      	cbz	r0, 8007758 <FRAMEWIN__GetTitleLimits+0x92>
 8007706:	4620      	mov	r0, r4
 8007708:	f007 fbbe 	bl	800ee88 <GUI_ALLOC_LockH>
 800770c:	4603      	mov	r3, r0
 800770e:	fa0f f289 	sxth.w	r2, r9
 8007712:	f9b3 7002 	ldrsh.w	r7, [r3, #2]
 8007716:	9001      	str	r0, [sp, #4]
 8007718:	1aba      	subs	r2, r7, r2
 800771a:	4552      	cmp	r2, sl
 800771c:	8800      	ldrh	r0, [r0, #0]
 800771e:	8899      	ldrh	r1, [r3, #4]
 8007720:	d113      	bne.n	800774a <FRAMEWIN__GetTitleLimits+0x84>
 8007722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007724:	061b      	lsls	r3, r3, #24
 8007726:	fa0f f288 	sxth.w	r2, r8
 800772a:	d507      	bpl.n	800773c <FRAMEWIN__GetTitleLimits+0x76>
 800772c:	b203      	sxth	r3, r0
 800772e:	1a9a      	subs	r2, r3, r2
 8007730:	6833      	ldr	r3, [r6, #0]
 8007732:	429a      	cmp	r2, r3
 8007734:	dc09      	bgt.n	800774a <FRAMEWIN__GetTitleLimits+0x84>
 8007736:	3a01      	subs	r2, #1
 8007738:	6032      	str	r2, [r6, #0]
 800773a:	e006      	b.n	800774a <FRAMEWIN__GetTitleLimits+0x84>
 800773c:	b20b      	sxth	r3, r1
 800773e:	1a9b      	subs	r3, r3, r2
 8007740:	682a      	ldr	r2, [r5, #0]
 8007742:	4293      	cmp	r3, r2
 8007744:	bfa4      	itt	ge
 8007746:	3301      	addge	r3, #1
 8007748:	602b      	strge	r3, [r5, #0]
 800774a:	a801      	add	r0, sp, #4
 800774c:	f007 fbaa 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8007750:	4620      	mov	r0, r4
 8007752:	f000 fe56 	bl	8008402 <WM_GetNextSibling>
 8007756:	e7d4      	b.n	8007702 <FRAMEWIN__GetTitleLimits+0x3c>
 8007758:	b002      	add	sp, #8
 800775a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800775e <FRAMEWIN__CalcPositions>:
 800775e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007762:	b087      	sub	sp, #28
 8007764:	4604      	mov	r4, r0
 8007766:	460f      	mov	r7, r1
 8007768:	f007 fb8e 	bl	800ee88 <GUI_ALLOC_LockH>
 800776c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800776e:	9003      	str	r0, [sp, #12]
 8007770:	6895      	ldr	r5, [r2, #8]
 8007772:	2101      	movs	r1, #1
 8007774:	682a      	ldr	r2, [r5, #0]
 8007776:	4620      	mov	r0, r4
 8007778:	4790      	blx	r2
 800777a:	682a      	ldr	r2, [r5, #0]
 800777c:	2103      	movs	r1, #3
 800777e:	4683      	mov	fp, r0
 8007780:	4620      	mov	r0, r4
 8007782:	4790      	blx	r2
 8007784:	682a      	ldr	r2, [r5, #0]
 8007786:	2102      	movs	r1, #2
 8007788:	4681      	mov	r9, r0
 800778a:	4620      	mov	r0, r4
 800778c:	4790      	blx	r2
 800778e:	682a      	ldr	r2, [r5, #0]
 8007790:	9001      	str	r0, [sp, #4]
 8007792:	2100      	movs	r1, #0
 8007794:	4620      	mov	r0, r4
 8007796:	4790      	blx	r2
 8007798:	4605      	mov	r5, r0
 800779a:	9803      	ldr	r0, [sp, #12]
 800779c:	f001 f83e 	bl	800881c <WM__GetWindowSizeX>
 80077a0:	4682      	mov	sl, r0
 80077a2:	9803      	ldr	r0, [sp, #12]
 80077a4:	f001 f841 	bl	800882a <WM__GetWindowSizeY>
 80077a8:	4680      	mov	r8, r0
 80077aa:	9803      	ldr	r0, [sp, #12]
 80077ac:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 80077ae:	f006 0620 	and.w	r6, r6, #32
 80077b2:	b2b6      	uxth	r6, r6
 80077b4:	b10e      	cbz	r6, 80077ba <FRAMEWIN__CalcPositions+0x5c>
 80077b6:	f9b0 6058 	ldrsh.w	r6, [r0, #88]	; 0x58
 80077ba:	f7ff ff75 	bl	80076a8 <FRAMEWIN__CalcTitleHeight>
 80077be:	9903      	ldr	r1, [sp, #12]
 80077c0:	4602      	mov	r2, r0
 80077c2:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
 80077c4:	b118      	cbz	r0, 80077ce <FRAMEWIN__CalcPositions+0x70>
 80077c6:	9200      	str	r2, [sp, #0]
 80077c8:	f001 f84b 	bl	8008862 <WM_GetWindowSizeY>
 80077cc:	9a00      	ldr	r2, [sp, #0]
 80077ce:	803a      	strh	r2, [r7, #0]
 80077d0:	b292      	uxth	r2, r2
 80077d2:	b2a9      	uxth	r1, r5
 80077d4:	4416      	add	r6, r2
 80077d6:	440e      	add	r6, r1
 80077d8:	8078      	strh	r0, [r7, #2]
 80077da:	4430      	add	r0, r6
 80077dc:	80f8      	strh	r0, [r7, #6]
 80077de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077e2:	9801      	ldr	r0, [sp, #4]
 80077e4:	81fd      	strh	r5, [r7, #14]
 80077e6:	3901      	subs	r1, #1
 80077e8:	ebc9 090a 	rsb	r9, r9, sl
 80077ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80077f0:	ebc0 0308 	rsb	r3, r0, r8
 80077f4:	440a      	add	r2, r1
 80077f6:	fa1f fb8b 	uxth.w	fp, fp
 80077fa:	fa1f f989 	uxth.w	r9, r9
 80077fe:	817b      	strh	r3, [r7, #10]
 8007800:	827a      	strh	r2, [r7, #18]
 8007802:	f8a7 b004 	strh.w	fp, [r7, #4]
 8007806:	f8a7 9008 	strh.w	r9, [r7, #8]
 800780a:	f8a7 b00c 	strh.w	fp, [r7, #12]
 800780e:	f8a7 9010 	strh.w	r9, [r7, #16]
 8007812:	a803      	add	r0, sp, #12
 8007814:	f007 fb46 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8007818:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800781c:	9204      	str	r2, [sp, #16]
 800781e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007822:	9205      	str	r2, [sp, #20]
 8007824:	4620      	mov	r0, r4
 8007826:	aa05      	add	r2, sp, #20
 8007828:	a904      	add	r1, sp, #16
 800782a:	f7ff ff4c 	bl	80076c6 <FRAMEWIN__GetTitleLimits>
 800782e:	9a04      	ldr	r2, [sp, #16]
 8007830:	81ba      	strh	r2, [r7, #12]
 8007832:	9a05      	ldr	r2, [sp, #20]
 8007834:	823a      	strh	r2, [r7, #16]
 8007836:	b007      	add	sp, #28
 8007838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800783c <FRAMEWIN_SetText>:
 800783c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800783e:	460d      	mov	r5, r1
 8007840:	4604      	mov	r4, r0
 8007842:	b1c0      	cbz	r0, 8007876 <FRAMEWIN_SetText+0x3a>
 8007844:	f007 fb20 	bl	800ee88 <GUI_ALLOC_LockH>
 8007848:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800784a:	9000      	str	r0, [sp, #0]
 800784c:	4668      	mov	r0, sp
 800784e:	9301      	str	r3, [sp, #4]
 8007850:	f007 fb28 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8007854:	a801      	add	r0, sp, #4
 8007856:	4629      	mov	r1, r5
 8007858:	f005 f8de 	bl	800ca18 <GUI__SetText>
 800785c:	b158      	cbz	r0, 8007876 <FRAMEWIN_SetText+0x3a>
 800785e:	4620      	mov	r0, r4
 8007860:	f007 fb12 	bl	800ee88 <GUI_ALLOC_LockH>
 8007864:	9b01      	ldr	r3, [sp, #4]
 8007866:	9000      	str	r0, [sp, #0]
 8007868:	6703      	str	r3, [r0, #112]	; 0x70
 800786a:	4668      	mov	r0, sp
 800786c:	f007 fb1a 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8007870:	4620      	mov	r0, r4
 8007872:	f001 fd31 	bl	80092d8 <WM_InvalidateWindow>
 8007876:	b003      	add	sp, #12
 8007878:	bd30      	pop	{r4, r5, pc}
	...

0800787c <FRAMEWIN_CreateUser>:
 800787c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007880:	b08b      	sub	sp, #44	; 0x2c
 8007882:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8007886:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8007888:	9400      	str	r4, [sp, #0]
 800788a:	f449 5480 	orr.w	r4, r9, #4096	; 0x1000
 800788e:	9401      	str	r4, [sp, #4]
 8007890:	4c33      	ldr	r4, [pc, #204]	; (8007960 <FRAMEWIN_CreateUser+0xe4>)
 8007892:	9402      	str	r4, [sp, #8]
 8007894:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8007896:	3460      	adds	r4, #96	; 0x60
 8007898:	9403      	str	r4, [sp, #12]
 800789a:	f001 fd4b 	bl	8009334 <WM_CreateWindowAsChild>
 800789e:	4606      	mov	r6, r0
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d058      	beq.n	8007956 <FRAMEWIN_CreateUser+0xda>
 80078a4:	f007 faf0 	bl	800ee88 <GUI_ALLOC_LockH>
 80078a8:	4d2e      	ldr	r5, [pc, #184]	; (8007964 <FRAMEWIN_CreateUser+0xe8>)
 80078aa:	9915      	ldr	r1, [sp, #84]	; 0x54
 80078ac:	9004      	str	r0, [sp, #16]
 80078ae:	2230      	movs	r2, #48	; 0x30
 80078b0:	f007 fd7c 	bl	800f3ac <WIDGET__Init>
 80078b4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80078b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078ba:	f858 7d18 	ldr.w	r7, [r8, #-24]!
 80078be:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80078c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80078cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078ce:	4d26      	ldr	r5, [pc, #152]	; (8007968 <FRAMEWIN_CreateUser+0xec>)
 80078d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80078d4:	667b      	str	r3, [r7, #100]	; 0x64
 80078d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078d8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80078dc:	2400      	movs	r4, #0
 80078de:	682b      	ldr	r3, [r5, #0]
 80078e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078e2:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 80078e6:	66fc      	str	r4, [r7, #108]	; 0x6c
 80078e8:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80078ec:	4640      	mov	r0, r8
 80078ee:	f007 fad9 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80078f2:	4630      	mov	r0, r6
 80078f4:	a905      	add	r1, sp, #20
 80078f6:	f7ff ff32 	bl	800775e <FRAMEWIN__CalcPositions>
 80078fa:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 80078fe:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8007902:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8007906:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800790a:	9403      	str	r4, [sp, #12]
 800790c:	f241 7782 	movw	r7, #6018	; 0x1782
 8007910:	1a5b      	subs	r3, r3, r1
 8007912:	1a12      	subs	r2, r2, r0
 8007914:	9701      	str	r7, [sp, #4]
 8007916:	4f15      	ldr	r7, [pc, #84]	; (800796c <FRAMEWIN_CreateUser+0xf0>)
 8007918:	9600      	str	r6, [sp, #0]
 800791a:	3201      	adds	r2, #1
 800791c:	3301      	adds	r3, #1
 800791e:	9702      	str	r7, [sp, #8]
 8007920:	f001 fd08 	bl	8009334 <WM_CreateWindowAsChild>
 8007924:	682b      	ldr	r3, [r5, #0]
 8007926:	4604      	mov	r4, r0
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	4630      	mov	r0, r6
 800792c:	4798      	blx	r3
 800792e:	4630      	mov	r0, r6
 8007930:	f007 faaa 	bl	800ee88 <GUI_ALLOC_LockH>
 8007934:	9004      	str	r0, [sp, #16]
 8007936:	6684      	str	r4, [r0, #104]	; 0x68
 8007938:	4640      	mov	r0, r8
 800793a:	f007 fab3 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800793e:	f242 0304 	movw	r3, #8196	; 0x2004
 8007942:	ea09 0303 	and.w	r3, r9, r3
 8007946:	b913      	cbnz	r3, 800794e <FRAMEWIN_CreateUser+0xd2>
 8007948:	4630      	mov	r0, r6
 800794a:	f000 fcbf 	bl	80082cc <WM_DisableMemdev>
 800794e:	4630      	mov	r0, r6
 8007950:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007952:	f7ff ff73 	bl	800783c <FRAMEWIN_SetText>
 8007956:	4630      	mov	r0, r6
 8007958:	b00b      	add	sp, #44	; 0x2c
 800795a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800795e:	bf00      	nop
 8007960:	080079bb 	.word	0x080079bb
 8007964:	20000034 	.word	0x20000034
 8007968:	2000005c 	.word	0x2000005c
 800796c:	080075c5 	.word	0x080075c5

08007970 <FRAMEWIN_CreateIndirect>:
 8007970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007972:	b089      	sub	sp, #36	; 0x24
 8007974:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8007978:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 800797c:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8007980:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8007984:	9100      	str	r1, [sp, #0]
 8007986:	2100      	movs	r1, #0
 8007988:	9101      	str	r1, [sp, #4]
 800798a:	8a41      	ldrh	r1, [r0, #18]
 800798c:	9102      	str	r1, [sp, #8]
 800798e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8007992:	9103      	str	r1, [sp, #12]
 8007994:	6844      	ldr	r4, [r0, #4]
 8007996:	9404      	str	r4, [sp, #16]
 8007998:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800799a:	9405      	str	r4, [sp, #20]
 800799c:	6984      	ldr	r4, [r0, #24]
 800799e:	9406      	str	r4, [sp, #24]
 80079a0:	eb0e 0002 	add.w	r0, lr, r2
 80079a4:	18f9      	adds	r1, r7, r3
 80079a6:	4632      	mov	r2, r6
 80079a8:	462b      	mov	r3, r5
 80079aa:	f7ff ff67 	bl	800787c <FRAMEWIN_CreateUser>
 80079ae:	b009      	add	sp, #36	; 0x24
 80079b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079b2 <FRAMEWIN_SetActive>:
 80079b2:	b108      	cbz	r0, 80079b8 <FRAMEWIN_SetActive+0x6>
 80079b4:	f7ff bdea 	b.w	800758c <_SetActive>
 80079b8:	4770      	bx	lr

080079ba <FRAMEWIN_Callback>:
 80079ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079be:	6844      	ldr	r4, [r0, #4]
 80079c0:	b086      	sub	sp, #24
 80079c2:	4605      	mov	r5, r0
 80079c4:	4620      	mov	r0, r4
 80079c6:	f007 fa5f 	bl	800ee88 <GUI_ALLOC_LockH>
 80079ca:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80079cc:	9000      	str	r0, [sp, #0]
 80079ce:	f8d0 7088 	ldr.w	r7, [r0, #136]	; 0x88
 80079d2:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 80079d6:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
 80079da:	f8b0 907c 	ldrh.w	r9, [r0, #124]	; 0x7c
 80079de:	b113      	cbz	r3, 80079e6 <FRAMEWIN_Callback+0x2c>
 80079e0:	f8d3 a000 	ldr.w	sl, [r3]
 80079e4:	e000      	b.n	80079e8 <FRAMEWIN_Callback+0x2e>
 80079e6:	469a      	mov	sl, r3
 80079e8:	4668      	mov	r0, sp
 80079ea:	f007 fa5b 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80079ee:	b13f      	cbz	r7, 8007a00 <FRAMEWIN_Callback+0x46>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4628      	mov	r0, r5
 80079f4:	4798      	blx	r3
 80079f6:	2800      	cmp	r0, #0
 80079f8:	f040 811d 	bne.w	8007c36 <FRAMEWIN_Callback+0x27c>
 80079fc:	683f      	ldr	r7, [r7, #0]
 80079fe:	e7f6      	b.n	80079ee <FRAMEWIN_Callback+0x34>
 8007a00:	682b      	ldr	r3, [r5, #0]
 8007a02:	2b17      	cmp	r3, #23
 8007a04:	f000 808a 	beq.w	8007b1c <FRAMEWIN_Callback+0x162>
 8007a08:	dc18      	bgt.n	8007a3c <FRAMEWIN_Callback+0x82>
 8007a0a:	2b0f      	cmp	r3, #15
 8007a0c:	d043      	beq.n	8007a96 <FRAMEWIN_Callback+0xdc>
 8007a0e:	dc06      	bgt.n	8007a1e <FRAMEWIN_Callback+0x64>
 8007a10:	2b0b      	cmp	r3, #11
 8007a12:	f000 80fe 	beq.w	8007c12 <FRAMEWIN_Callback+0x258>
 8007a16:	2b0d      	cmp	r3, #13
 8007a18:	f000 80c0 	beq.w	8007b9c <FRAMEWIN_Callback+0x1e2>
 8007a1c:	e103      	b.n	8007c26 <FRAMEWIN_Callback+0x26c>
 8007a1e:	2b11      	cmp	r3, #17
 8007a20:	d01b      	beq.n	8007a5a <FRAMEWIN_Callback+0xa0>
 8007a22:	2b14      	cmp	r3, #20
 8007a24:	f040 80ff 	bne.w	8007c26 <FRAMEWIN_Callback+0x26c>
 8007a28:	4620      	mov	r0, r4
 8007a2a:	a901      	add	r1, sp, #4
 8007a2c:	f7ff fe97 	bl	800775e <FRAMEWIN__CalcPositions>
 8007a30:	ab02      	add	r3, sp, #8
 8007a32:	cb03      	ldmia	r3!, {r0, r1}
 8007a34:	68ea      	ldr	r2, [r5, #12]
 8007a36:	6010      	str	r0, [r2, #0]
 8007a38:	6051      	str	r1, [r2, #4]
 8007a3a:	e0fc      	b.n	8007c36 <FRAMEWIN_Callback+0x27c>
 8007a3c:	2b26      	cmp	r3, #38	; 0x26
 8007a3e:	d070      	beq.n	8007b22 <FRAMEWIN_Callback+0x168>
 8007a40:	dc05      	bgt.n	8007a4e <FRAMEWIN_Callback+0x94>
 8007a42:	2b1e      	cmp	r3, #30
 8007a44:	d07b      	beq.n	8007b3e <FRAMEWIN_Callback+0x184>
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	f000 80b6 	beq.w	8007bb8 <FRAMEWIN_Callback+0x1fe>
 8007a4c:	e0eb      	b.n	8007c26 <FRAMEWIN_Callback+0x26c>
 8007a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a50:	d013      	beq.n	8007a7a <FRAMEWIN_Callback+0xc0>
 8007a52:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8007a56:	d025      	beq.n	8007aa4 <FRAMEWIN_Callback+0xea>
 8007a58:	e0e5      	b.n	8007c26 <FRAMEWIN_Callback+0x26c>
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	68ee      	ldr	r6, [r5, #12]
 8007a5e:	f007 fa13 	bl	800ee88 <GUI_ALLOC_LockH>
 8007a62:	9001      	str	r0, [sp, #4]
 8007a64:	8933      	ldrh	r3, [r6, #8]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d105      	bne.n	8007a76 <FRAMEWIN_Callback+0xbc>
 8007a6a:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8007a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a72:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
 8007a76:	a801      	add	r0, sp, #4
 8007a78:	e0d3      	b.n	8007c22 <FRAMEWIN_Callback+0x268>
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f007 fa04 	bl	800ee88 <GUI_ALLOC_LockH>
 8007a80:	68eb      	ldr	r3, [r5, #12]
 8007a82:	9000      	str	r0, [sp, #0]
 8007a84:	b113      	cbz	r3, 8007a8c <FRAMEWIN_Callback+0xd2>
 8007a86:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 8007a8a:	e002      	b.n	8007a92 <FRAMEWIN_Callback+0xd8>
 8007a8c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8007a90:	60eb      	str	r3, [r5, #12]
 8007a92:	4668      	mov	r0, sp
 8007a94:	e03f      	b.n	8007b16 <FRAMEWIN_Callback+0x15c>
 8007a96:	f1ba 0f00 	cmp.w	sl, #0
 8007a9a:	f000 80c4 	beq.w	8007c26 <FRAMEWIN_Callback+0x26c>
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	47d0      	blx	sl
 8007aa2:	e0c0      	b.n	8007c26 <FRAMEWIN_Callback+0x26c>
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8007aaa:	f007 f9ed 	bl	800ee88 <GUI_ALLOC_LockH>
 8007aae:	ae06      	add	r6, sp, #24
 8007ab0:	f8b0 707c 	ldrh.w	r7, [r0, #124]	; 0x7c
 8007ab4:	f846 0d14 	str.w	r0, [r6, #-20]!
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f007 f9f3 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8007abe:	68eb      	ldr	r3, [r5, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 80b8 	beq.w	8007c36 <FRAMEWIN_Callback+0x27c>
 8007ac6:	f898 3008 	ldrb.w	r3, [r8, #8]
 8007aca:	b1cb      	cbz	r3, 8007b00 <FRAMEWIN_Callback+0x146>
 8007acc:	073b      	lsls	r3, r7, #28
 8007ace:	d402      	bmi.n	8007ad6 <FRAMEWIN_Callback+0x11c>
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f000 fde5 	bl	80086a0 <WM_SetFocus>
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f000 feda 	bl	8008890 <WM_BringToTop>
 8007adc:	f407 7388 	and.w	r3, r7, #272	; 0x110
 8007ae0:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8007ae4:	f040 80a7 	bne.w	8007c36 <FRAMEWIN_Callback+0x27c>
 8007ae8:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8007aec:	b2bb      	uxth	r3, r7
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f040 80a1 	bne.w	8007c36 <FRAMEWIN_Callback+0x27c>
 8007af4:	4620      	mov	r0, r4
 8007af6:	4641      	mov	r1, r8
 8007af8:	2205      	movs	r2, #5
 8007afa:	f000 fad9 	bl	80080b0 <WM_SetCaptureMove>
 8007afe:	e09a      	b.n	8007c36 <FRAMEWIN_Callback+0x27c>
 8007b00:	4620      	mov	r0, r4
 8007b02:	f007 f9c1 	bl	800ee88 <GUI_ALLOC_LockH>
 8007b06:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8007b0a:	9001      	str	r0, [sp, #4]
 8007b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b10:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
 8007b14:	4630      	mov	r0, r6
 8007b16:	f007 f9c5 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8007b1a:	e08c      	b.n	8007c36 <FRAMEWIN_Callback+0x27c>
 8007b1c:	f8c5 800c 	str.w	r8, [r5, #12]
 8007b20:	e089      	b.n	8007c36 <FRAMEWIN_Callback+0x27c>
 8007b22:	68eb      	ldr	r3, [r5, #12]
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	f040 8086 	bne.w	8007c36 <FRAMEWIN_Callback+0x27c>
 8007b2a:	a906      	add	r1, sp, #24
 8007b2c:	9304      	str	r3, [sp, #16]
 8007b2e:	2327      	movs	r3, #39	; 0x27
 8007b30:	f841 3d14 	str.w	r3, [r1, #-20]!
 8007b34:	68a8      	ldr	r0, [r5, #8]
 8007b36:	9403      	str	r4, [sp, #12]
 8007b38:	f000 f95e 	bl	8007df8 <WM__SendMessage>
 8007b3c:	e07b      	b.n	8007c36 <FRAMEWIN_Callback+0x27c>
 8007b3e:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8007b42:	f1b9 0f01 	cmp.w	r9, #1
 8007b46:	d124      	bne.n	8007b92 <FRAMEWIN_Callback+0x1d8>
 8007b48:	4630      	mov	r0, r6
 8007b4a:	f000 fcf6 	bl	800853a <WM_IsWindow>
 8007b4e:	b158      	cbz	r0, 8007b68 <FRAMEWIN_Callback+0x1ae>
 8007b50:	4630      	mov	r0, r6
 8007b52:	f000 fda5 	bl	80086a0 <WM_SetFocus>
 8007b56:	4630      	mov	r0, r6
 8007b58:	f000 fcc8 	bl	80084ec <WM_HasFocus>
 8007b5c:	b188      	cbz	r0, 8007b82 <FRAMEWIN_Callback+0x1c8>
 8007b5e:	4630      	mov	r0, r6
 8007b60:	4649      	mov	r1, r9
 8007b62:	f007 fc3d 	bl	800f3e0 <WIDGET_OrState>
 8007b66:	e00c      	b.n	8007b82 <FRAMEWIN_Callback+0x1c8>
 8007b68:	4640      	mov	r0, r8
 8007b6a:	f000 fa73 	bl	8008054 <WM_SetFocusOnNextChild>
 8007b6e:	4606      	mov	r6, r0
 8007b70:	4620      	mov	r0, r4
 8007b72:	f007 f989 	bl	800ee88 <GUI_ALLOC_LockH>
 8007b76:	9000      	str	r0, [sp, #0]
 8007b78:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
 8007b7c:	4668      	mov	r0, sp
 8007b7e:	f007 f991 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8007b82:	4620      	mov	r0, r4
 8007b84:	2101      	movs	r1, #1
 8007b86:	f7ff ff14 	bl	80079b2 <FRAMEWIN_SetActive>
 8007b8a:	2e00      	cmp	r6, #0
 8007b8c:	d153      	bne.n	8007c36 <FRAMEWIN_Callback+0x27c>
 8007b8e:	60ee      	str	r6, [r5, #12]
 8007b90:	e051      	b.n	8007c36 <FRAMEWIN_Callback+0x27c>
 8007b92:	4620      	mov	r0, r4
 8007b94:	4639      	mov	r1, r7
 8007b96:	f7ff ff0c 	bl	80079b2 <FRAMEWIN_SetActive>
 8007b9a:	e04c      	b.n	8007c36 <FRAMEWIN_Callback+0x27c>
 8007b9c:	f019 0f08 	tst.w	r9, #8
 8007ba0:	d141      	bne.n	8007c26 <FRAMEWIN_Callback+0x26c>
 8007ba2:	68eb      	ldr	r3, [r5, #12]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d03d      	beq.n	8007c26 <FRAMEWIN_Callback+0x26c>
 8007baa:	7a1b      	ldrb	r3, [r3, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d03a      	beq.n	8007c26 <FRAMEWIN_Callback+0x26c>
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f000 fd75 	bl	80086a0 <WM_SetFocus>
 8007bb6:	e036      	b.n	8007c26 <FRAMEWIN_Callback+0x26c>
 8007bb8:	68ee      	ldr	r6, [r5, #12]
 8007bba:	2e00      	cmp	r6, #0
 8007bbc:	d033      	beq.n	8007c26 <FRAMEWIN_Callback+0x26c>
 8007bbe:	6870      	ldr	r0, [r6, #4]
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	f000 f8ed 	bl	8007da0 <WM__IsAncestorOrSelf>
 8007bc6:	b180      	cbz	r0, 8007bea <FRAMEWIN_Callback+0x230>
 8007bc8:	4620      	mov	r0, r4
 8007bca:	2101      	movs	r1, #1
 8007bcc:	f7ff fcde 	bl	800758c <_SetActive>
 8007bd0:	6870      	ldr	r0, [r6, #4]
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	f000 f8d3 	bl	8007d7e <WM__IsAncestor>
 8007bd8:	b328      	cbz	r0, 8007c26 <FRAMEWIN_Callback+0x26c>
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f007 f954 	bl	800ee88 <GUI_ALLOC_LockH>
 8007be0:	ab06      	add	r3, sp, #24
 8007be2:	6872      	ldr	r2, [r6, #4]
 8007be4:	f843 0d14 	str.w	r0, [r3, #-20]!
 8007be8:	e00f      	b.n	8007c0a <FRAMEWIN_Callback+0x250>
 8007bea:	4620      	mov	r0, r4
 8007bec:	4639      	mov	r1, r7
 8007bee:	f7ff fccd 	bl	800758c <_SetActive>
 8007bf2:	6830      	ldr	r0, [r6, #0]
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	f000 f8c2 	bl	8007d7e <WM__IsAncestor>
 8007bfa:	b1a0      	cbz	r0, 8007c26 <FRAMEWIN_Callback+0x26c>
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f007 f943 	bl	800ee88 <GUI_ALLOC_LockH>
 8007c02:	ab06      	add	r3, sp, #24
 8007c04:	6832      	ldr	r2, [r6, #0]
 8007c06:	f843 0d14 	str.w	r0, [r3, #-20]!
 8007c0a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8007c0e:	4618      	mov	r0, r3
 8007c10:	e007      	b.n	8007c22 <FRAMEWIN_Callback+0x268>
 8007c12:	4620      	mov	r0, r4
 8007c14:	f007 f938 	bl	800ee88 <GUI_ALLOC_LockH>
 8007c18:	9000      	str	r0, [sp, #0]
 8007c1a:	3070      	adds	r0, #112	; 0x70
 8007c1c:	f007 fb04 	bl	800f228 <GUI_ALLOC_FreePtr>
 8007c20:	4668      	mov	r0, sp
 8007c22:	f007 f93f 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8007c26:	4620      	mov	r0, r4
 8007c28:	4629      	mov	r1, r5
 8007c2a:	f007 fbef 	bl	800f40c <WIDGET_HandleActive>
 8007c2e:	b110      	cbz	r0, 8007c36 <FRAMEWIN_Callback+0x27c>
 8007c30:	4628      	mov	r0, r5
 8007c32:	f001 ff71 	bl	8009b18 <WM_DefaultProc>
 8007c36:	b006      	add	sp, #24
 8007c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007c3c <FRAMEWIN_GetActive>:
 8007c3c:	b513      	push	{r0, r1, r4, lr}
 8007c3e:	4604      	mov	r4, r0
 8007c40:	b158      	cbz	r0, 8007c5a <FRAMEWIN_GetActive+0x1e>
 8007c42:	f007 f921 	bl	800ee88 <GUI_ALLOC_LockH>
 8007c46:	ab02      	add	r3, sp, #8
 8007c48:	f8b0 407c 	ldrh.w	r4, [r0, #124]	; 0x7c
 8007c4c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8007c50:	4618      	mov	r0, r3
 8007c52:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8007c56:	f007 f925 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	b002      	add	sp, #8
 8007c5e:	bd10      	pop	{r4, pc}

08007c60 <GUI_CreateDialogBox>:
 8007c60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c64:	4606      	mov	r6, r0
 8007c66:	4688      	mov	r8, r1
 8007c68:	4614      	mov	r4, r2
 8007c6a:	461d      	mov	r5, r3
 8007c6c:	b913      	cbnz	r3, 8007c74 <GUI_CreateDialogBox+0x14>
 8007c6e:	f000 fb57 	bl	8008320 <WM_GetDesktopWindow>
 8007c72:	4605      	mov	r5, r0
 8007c74:	9400      	str	r4, [sp, #0]
 8007c76:	4630      	mov	r0, r6
 8007c78:	6834      	ldr	r4, [r6, #0]
 8007c7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c7e:	4629      	mov	r1, r5
 8007c80:	47a0      	blx	r4
 8007c82:	4604      	mov	r4, r0
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d039      	beq.n	8007cfc <GUI_CreateDialogBox+0x9c>
 8007c88:	f000 fb3c 	bl	8008304 <WM_GetClientWindow>
 8007c8c:	8a71      	ldrh	r1, [r6, #18]
 8007c8e:	4607      	mov	r7, r0
 8007c90:	4620      	mov	r0, r4
 8007c92:	f007 fba5 	bl	800f3e0 <WIDGET_OrState>
 8007c96:	4620      	mov	r0, r4
 8007c98:	f000 fd93 	bl	80087c2 <WM_ShowWindow>
 8007c9c:	4638      	mov	r0, r7
 8007c9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ca2:	f000 fd8e 	bl	80087c2 <WM_ShowWindow>
 8007ca6:	f1b8 0f00 	cmp.w	r8, #0
 8007caa:	dd0f      	ble.n	8007ccc <GUI_CreateDialogBox+0x6c>
 8007cac:	f856 cf1c 	ldr.w	ip, [r6, #28]!
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	9200      	str	r2, [sp, #0]
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	4639      	mov	r1, r7
 8007cb8:	4613      	mov	r3, r2
 8007cba:	47e0      	blx	ip
 8007cbc:	4681      	mov	r9, r0
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d1ed      	bne.n	8007c9e <GUI_CreateDialogBox+0x3e>
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f001 fbe0 	bl	8009488 <WM_DeleteWindow>
 8007cc8:	4648      	mov	r0, r9
 8007cca:	e018      	b.n	8007cfe <GUI_CreateDialogBox+0x9e>
 8007ccc:	4638      	mov	r0, r7
 8007cce:	211d      	movs	r1, #29
 8007cd0:	f000 fccb 	bl	800866a <WM_SendMessageNoPara>
 8007cd4:	1c6b      	adds	r3, r5, #1
 8007cd6:	d011      	beq.n	8007cfc <GUI_CreateDialogBox+0x9c>
 8007cd8:	f000 fb36 	bl	8008348 <WM_GetFocusedWindow>
 8007cdc:	b150      	cbz	r0, 8007cf4 <GUI_CreateDialogBox+0x94>
 8007cde:	f007 f8c9 	bl	800ee74 <GUI_ALLOC_h2p>
 8007ce2:	6980      	ldr	r0, [r0, #24]
 8007ce4:	42a0      	cmp	r0, r4
 8007ce6:	d00a      	beq.n	8007cfe <GUI_CreateDialogBox+0x9e>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d1f8      	bne.n	8007cde <GUI_CreateDialogBox+0x7e>
 8007cec:	4620      	mov	r0, r4
 8007cee:	f000 f9b1 	bl	8008054 <WM_SetFocusOnNextChild>
 8007cf2:	e003      	b.n	8007cfc <GUI_CreateDialogBox+0x9c>
 8007cf4:	42a5      	cmp	r5, r4
 8007cf6:	d1f9      	bne.n	8007cec <GUI_CreateDialogBox+0x8c>
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	e000      	b.n	8007cfe <GUI_CreateDialogBox+0x9e>
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	b003      	add	sp, #12
 8007d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007d04 <WM__ForEachDesc>:
 8007d04:	b570      	push	{r4, r5, r6, lr}
 8007d06:	460d      	mov	r5, r1
 8007d08:	4616      	mov	r6, r2
 8007d0a:	f007 f8b3 	bl	800ee74 <GUI_ALLOC_h2p>
 8007d0e:	69c4      	ldr	r4, [r0, #28]
 8007d10:	b164      	cbz	r4, 8007d2c <WM__ForEachDesc+0x28>
 8007d12:	4620      	mov	r0, r4
 8007d14:	4631      	mov	r1, r6
 8007d16:	47a8      	blx	r5
 8007d18:	4620      	mov	r0, r4
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	4632      	mov	r2, r6
 8007d1e:	f7ff fff1 	bl	8007d04 <WM__ForEachDesc>
 8007d22:	4620      	mov	r0, r4
 8007d24:	f007 f8a6 	bl	800ee74 <GUI_ALLOC_h2p>
 8007d28:	6a04      	ldr	r4, [r0, #32]
 8007d2a:	e7f1      	b.n	8007d10 <WM__ForEachDesc+0xc>
 8007d2c:	bd70      	pop	{r4, r5, r6, pc}

08007d2e <WM__GetFirstSibling>:
 8007d2e:	b508      	push	{r3, lr}
 8007d30:	f000 fb77 	bl	8008422 <WM_GetParent>
 8007d34:	b118      	cbz	r0, 8007d3e <WM__GetFirstSibling+0x10>
 8007d36:	f007 f89d 	bl	800ee74 <GUI_ALLOC_h2p>
 8007d3a:	69c0      	ldr	r0, [r0, #28]
 8007d3c:	bd08      	pop	{r3, pc}
 8007d3e:	bd08      	pop	{r3, pc}

08007d40 <WM__GetLastSibling>:
 8007d40:	b510      	push	{r4, lr}
 8007d42:	4604      	mov	r4, r0
 8007d44:	b130      	cbz	r0, 8007d54 <WM__GetLastSibling+0x14>
 8007d46:	4620      	mov	r0, r4
 8007d48:	f007 f894 	bl	800ee74 <GUI_ALLOC_h2p>
 8007d4c:	6a03      	ldr	r3, [r0, #32]
 8007d4e:	b10b      	cbz	r3, 8007d54 <WM__GetLastSibling+0x14>
 8007d50:	461c      	mov	r4, r3
 8007d52:	e7f8      	b.n	8007d46 <WM__GetLastSibling+0x6>
 8007d54:	4620      	mov	r0, r4
 8007d56:	bd10      	pop	{r4, pc}

08007d58 <WM__GetPrevSibling>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	f7ff ffe7 	bl	8007d2e <WM__GetFirstSibling>
 8007d60:	4604      	mov	r4, r0
 8007d62:	b154      	cbz	r4, 8007d7a <WM__GetPrevSibling+0x22>
 8007d64:	42ac      	cmp	r4, r5
 8007d66:	d007      	beq.n	8007d78 <WM__GetPrevSibling+0x20>
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f007 f883 	bl	800ee74 <GUI_ALLOC_h2p>
 8007d6e:	6a03      	ldr	r3, [r0, #32]
 8007d70:	42ab      	cmp	r3, r5
 8007d72:	d002      	beq.n	8007d7a <WM__GetPrevSibling+0x22>
 8007d74:	461c      	mov	r4, r3
 8007d76:	e7f4      	b.n	8007d62 <WM__GetPrevSibling+0xa>
 8007d78:	2400      	movs	r4, #0
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	bd38      	pop	{r3, r4, r5, pc}

08007d7e <WM__IsAncestor>:
 8007d7e:	b510      	push	{r4, lr}
 8007d80:	460c      	mov	r4, r1
 8007d82:	b908      	cbnz	r0, 8007d88 <WM__IsAncestor+0xa>
 8007d84:	2000      	movs	r0, #0
 8007d86:	bd10      	pop	{r4, pc}
 8007d88:	2900      	cmp	r1, #0
 8007d8a:	d0fb      	beq.n	8007d84 <WM__IsAncestor+0x6>
 8007d8c:	f007 f872 	bl	800ee74 <GUI_ALLOC_h2p>
 8007d90:	6980      	ldr	r0, [r0, #24]
 8007d92:	42a0      	cmp	r0, r4
 8007d94:	d002      	beq.n	8007d9c <WM__IsAncestor+0x1e>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d1f8      	bne.n	8007d8c <WM__IsAncestor+0xe>
 8007d9a:	e7f3      	b.n	8007d84 <WM__IsAncestor+0x6>
 8007d9c:	2001      	movs	r0, #1
 8007d9e:	bd10      	pop	{r4, pc}

08007da0 <WM__IsAncestorOrSelf>:
 8007da0:	4288      	cmp	r0, r1
 8007da2:	d001      	beq.n	8007da8 <WM__IsAncestorOrSelf+0x8>
 8007da4:	f7ff bfeb 	b.w	8007d7e <WM__IsAncestor>
 8007da8:	2001      	movs	r0, #1
 8007daa:	4770      	bx	lr

08007dac <WM__IsChild>:
 8007dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dae:	460d      	mov	r5, r1
 8007db0:	4604      	mov	r4, r0
 8007db2:	b160      	cbz	r0, 8007dce <WM__IsChild+0x22>
 8007db4:	f007 f868 	bl	800ee88 <GUI_ALLOC_LockH>
 8007db8:	9001      	str	r0, [sp, #4]
 8007dba:	b120      	cbz	r0, 8007dc6 <WM__IsChild+0x1a>
 8007dbc:	6984      	ldr	r4, [r0, #24]
 8007dbe:	1b63      	subs	r3, r4, r5
 8007dc0:	425c      	negs	r4, r3
 8007dc2:	415c      	adcs	r4, r3
 8007dc4:	e000      	b.n	8007dc8 <WM__IsChild+0x1c>
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	a801      	add	r0, sp, #4
 8007dca:	f007 f86b 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8007dce:	4620      	mov	r0, r4
 8007dd0:	b003      	add	sp, #12
 8007dd2:	bd30      	pop	{r4, r5, pc}

08007dd4 <WM__GetFocusedChild>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4d06      	ldr	r5, [pc, #24]	; (8007df0 <WM__GetFocusedChild+0x1c>)
 8007dd8:	4c06      	ldr	r4, [pc, #24]	; (8007df4 <WM__GetFocusedChild+0x20>)
 8007dda:	682b      	ldr	r3, [r5, #0]
 8007ddc:	4601      	mov	r1, r0
 8007dde:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8007de2:	f7ff ffe3 	bl	8007dac <WM__IsChild>
 8007de6:	b110      	cbz	r0, 8007dee <WM__GetFocusedChild+0x1a>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	200076b0 	.word	0x200076b0
 8007df4:	200076a0 	.word	0x200076a0

08007df8 <WM__SendMessage>:
 8007df8:	b570      	push	{r4, r5, r6, lr}
 8007dfa:	4c0d      	ldr	r4, [pc, #52]	; (8007e30 <WM__SendMessage+0x38>)
 8007dfc:	6823      	ldr	r3, [r4, #0]
 8007dfe:	2b13      	cmp	r3, #19
 8007e00:	4606      	mov	r6, r0
 8007e02:	460d      	mov	r5, r1
 8007e04:	dc12      	bgt.n	8007e2c <WM__SendMessage+0x34>
 8007e06:	f007 f835 	bl	800ee74 <GUI_ALLOC_h2p>
 8007e0a:	6903      	ldr	r3, [r0, #16]
 8007e0c:	606e      	str	r6, [r5, #4]
 8007e0e:	b143      	cbz	r3, 8007e22 <WM__SendMessage+0x2a>
 8007e10:	6822      	ldr	r2, [r4, #0]
 8007e12:	4628      	mov	r0, r5
 8007e14:	3201      	adds	r2, #1
 8007e16:	6022      	str	r2, [r4, #0]
 8007e18:	4798      	blx	r3
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	6023      	str	r3, [r4, #0]
 8007e20:	bd70      	pop	{r4, r5, r6, pc}
 8007e22:	4628      	mov	r0, r5
 8007e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e28:	f001 be76 	b.w	8009b18 <WM_DefaultProc>
 8007e2c:	bd70      	pop	{r4, r5, r6, pc}
 8007e2e:	bf00      	nop
 8007e30:	200029e0 	.word	0x200029e0

08007e34 <WM__SendMessageNoPara>:
 8007e34:	b530      	push	{r4, r5, lr}
 8007e36:	b085      	sub	sp, #20
 8007e38:	4604      	mov	r4, r0
 8007e3a:	2210      	movs	r2, #16
 8007e3c:	460d      	mov	r5, r1
 8007e3e:	4668      	mov	r0, sp
 8007e40:	2100      	movs	r1, #0
 8007e42:	f00a f9d9 	bl	80121f8 <memset>
 8007e46:	4620      	mov	r0, r4
 8007e48:	f007 f814 	bl	800ee74 <GUI_ALLOC_h2p>
 8007e4c:	6903      	ldr	r3, [r0, #16]
 8007e4e:	b11b      	cbz	r3, 8007e58 <WM__SendMessageNoPara+0x24>
 8007e50:	9401      	str	r4, [sp, #4]
 8007e52:	9500      	str	r5, [sp, #0]
 8007e54:	4668      	mov	r0, sp
 8007e56:	4798      	blx	r3
 8007e58:	b005      	add	sp, #20
 8007e5a:	bd30      	pop	{r4, r5, pc}

08007e5c <WM__UpdateChildPositions>:
 8007e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e60:	b087      	sub	sp, #28
 8007e62:	69c4      	ldr	r4, [r0, #28]
 8007e64:	9303      	str	r3, [sp, #12]
 8007e66:	468a      	mov	sl, r1
 8007e68:	4693      	mov	fp, r2
 8007e6a:	2c00      	cmp	r4, #0
 8007e6c:	d06d      	beq.n	8007f4a <WM__UpdateChildPositions+0xee>
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f007 f80a 	bl	800ee88 <GUI_ALLOC_LockH>
 8007e74:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007e76:	9005      	str	r0, [sp, #20]
 8007e78:	f401 7320 	and.w	r3, r1, #640	; 0x280
 8007e7c:	2b80      	cmp	r3, #128	; 0x80
 8007e7e:	f8b0 8000 	ldrh.w	r8, [r0]
 8007e82:	8842      	ldrh	r2, [r0, #2]
 8007e84:	8886      	ldrh	r6, [r0, #4]
 8007e86:	88c5      	ldrh	r5, [r0, #6]
 8007e88:	d008      	beq.n	8007e9c <WM__UpdateChildPositions+0x40>
 8007e8a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007e8e:	d108      	bne.n	8007ea2 <WM__UpdateChildPositions+0x46>
 8007e90:	eb08 090a 	add.w	r9, r8, sl
 8007e94:	fa1f f989 	uxth.w	r9, r9
 8007e98:	9b03      	ldr	r3, [sp, #12]
 8007e9a:	e008      	b.n	8007eae <WM__UpdateChildPositions+0x52>
 8007e9c:	9803      	ldr	r0, [sp, #12]
 8007e9e:	b283      	uxth	r3, r0
 8007ea0:	e001      	b.n	8007ea6 <WM__UpdateChildPositions+0x4a>
 8007ea2:	fa1f f38a 	uxth.w	r3, sl
 8007ea6:	eb03 0908 	add.w	r9, r3, r8
 8007eaa:	fa1f f989 	uxth.w	r9, r9
 8007eae:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 8007eb2:	4433      	add	r3, r6
 8007eb4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	d008      	beq.n	8007ece <WM__UpdateChildPositions+0x72>
 8007ebc:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8007ec0:	d108      	bne.n	8007ed4 <WM__UpdateChildPositions+0x78>
 8007ec2:	eb02 0c0b 	add.w	ip, r2, fp
 8007ec6:	fa1f fc8c 	uxth.w	ip, ip
 8007eca:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8007ecc:	e008      	b.n	8007ee0 <WM__UpdateChildPositions+0x84>
 8007ece:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007ed0:	b28f      	uxth	r7, r1
 8007ed2:	e001      	b.n	8007ed8 <WM__UpdateChildPositions+0x7c>
 8007ed4:	fa1f f78b 	uxth.w	r7, fp
 8007ed8:	eb07 0c02 	add.w	ip, r7, r2
 8007edc:	fa1f fc8c 	uxth.w	ip, ip
 8007ee0:	fa0f f989 	sxth.w	r9, r9
 8007ee4:	fa0f f888 	sxth.w	r8, r8
 8007ee8:	b212      	sxth	r2, r2
 8007eea:	442f      	add	r7, r5
 8007eec:	fa0f fc8c 	sxth.w	ip, ip
 8007ef0:	ebb9 0108 	subs.w	r1, r9, r8
 8007ef4:	9202      	str	r2, [sp, #8]
 8007ef6:	b2bf      	uxth	r7, r7
 8007ef8:	ebc2 020c 	rsb	r2, r2, ip
 8007efc:	d100      	bne.n	8007f00 <WM__UpdateChildPositions+0xa4>
 8007efe:	b142      	cbz	r2, 8007f12 <WM__UpdateChildPositions+0xb6>
 8007f00:	4620      	mov	r0, r4
 8007f02:	9301      	str	r3, [sp, #4]
 8007f04:	f8cd c000 	str.w	ip, [sp]
 8007f08:	f000 f9de 	bl	80082c8 <WM_MoveWindow>
 8007f0c:	f8dd c000 	ldr.w	ip, [sp]
 8007f10:	9b01      	ldr	r3, [sp, #4]
 8007f12:	b21b      	sxth	r3, r3
 8007f14:	ebc9 0903 	rsb	r9, r9, r3
 8007f18:	b236      	sxth	r6, r6
 8007f1a:	9b02      	ldr	r3, [sp, #8]
 8007f1c:	ebc6 0808 	rsb	r8, r6, r8
 8007f20:	b23f      	sxth	r7, r7
 8007f22:	b22d      	sxth	r5, r5
 8007f24:	ebcc 0c07 	rsb	ip, ip, r7
 8007f28:	1b5d      	subs	r5, r3, r5
 8007f2a:	eb19 0108 	adds.w	r1, r9, r8
 8007f2e:	eb0c 0205 	add.w	r2, ip, r5
 8007f32:	d100      	bne.n	8007f36 <WM__UpdateChildPositions+0xda>
 8007f34:	b112      	cbz	r2, 8007f3c <WM__UpdateChildPositions+0xe0>
 8007f36:	4620      	mov	r0, r4
 8007f38:	f000 fb1c 	bl	8008574 <WM_ResizeWindow>
 8007f3c:	a806      	add	r0, sp, #24
 8007f3e:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8007f42:	6a1c      	ldr	r4, [r3, #32]
 8007f44:	f006 ffae 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8007f48:	e78f      	b.n	8007e6a <WM__UpdateChildPositions+0xe>
 8007f4a:	b007      	add	sp, #28
 8007f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f50 <WM__AddCriticalHandle>:
 8007f50:	4b02      	ldr	r3, [pc, #8]	; (8007f5c <WM__AddCriticalHandle+0xc>)
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	6002      	str	r2, [r0, #0]
 8007f56:	6018      	str	r0, [r3, #0]
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	200076cc 	.word	0x200076cc

08007f60 <WM__GetClientRectEx>:
 8007f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f62:	460d      	mov	r5, r1
 8007f64:	b158      	cbz	r0, 8007f7e <WM__GetClientRectEx+0x1e>
 8007f66:	b151      	cbz	r1, 8007f7e <WM__GetClientRectEx+0x1e>
 8007f68:	f006 ff8e 	bl	800ee88 <GUI_ALLOC_LockH>
 8007f6c:	ac02      	add	r4, sp, #8
 8007f6e:	4629      	mov	r1, r5
 8007f70:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007f74:	f001 f866 	bl	8009044 <WM__GetClientRectWin>
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f006 ff93 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8007f7e:	b003      	add	sp, #12
 8007f80:	bd30      	pop	{r4, r5, pc}
	...

08007f84 <WM_SetHasTrans>:
 8007f84:	b513      	push	{r0, r1, r4, lr}
 8007f86:	4604      	mov	r4, r0
 8007f88:	b1b8      	cbz	r0, 8007fba <WM_SetHasTrans+0x36>
 8007f8a:	f006 ff7d 	bl	800ee88 <GUI_ALLOC_LockH>
 8007f8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007f90:	9001      	str	r0, [sp, #4]
 8007f92:	07db      	lsls	r3, r3, #31
 8007f94:	d40e      	bmi.n	8007fb4 <WM_SetHasTrans+0x30>
 8007f96:	4620      	mov	r0, r4
 8007f98:	f000 fc28 	bl	80087ec <WM_ValidateWindow>
 8007f9c:	9b01      	ldr	r3, [sp, #4]
 8007f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fa0:	f042 0201 	orr.w	r2, r2, #1
 8007fa4:	629a      	str	r2, [r3, #40]	; 0x28
 8007fa6:	4b06      	ldr	r3, [pc, #24]	; (8007fc0 <WM_SetHasTrans+0x3c>)
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	4620      	mov	r0, r4
 8007fac:	3201      	adds	r2, #1
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	f001 f992 	bl	80092d8 <WM_InvalidateWindow>
 8007fb4:	a801      	add	r0, sp, #4
 8007fb6:	f006 ff75 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8007fba:	b002      	add	sp, #8
 8007fbc:	bd10      	pop	{r4, pc}
 8007fbe:	bf00      	nop
 8007fc0:	200076e0 	.word	0x200076e0

08007fc4 <WM_GetHasTrans>:
 8007fc4:	b508      	push	{r3, lr}
 8007fc6:	b128      	cbz	r0, 8007fd4 <WM_GetHasTrans+0x10>
 8007fc8:	f006 ff54 	bl	800ee74 <GUI_ALLOC_h2p>
 8007fcc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007fce:	f000 0001 	and.w	r0, r0, #1
 8007fd2:	bd08      	pop	{r3, pc}
 8007fd4:	bd08      	pop	{r3, pc}

08007fd6 <_GetPrevChild>:
 8007fd6:	b510      	push	{r4, lr}
 8007fd8:	4604      	mov	r4, r0
 8007fda:	b918      	cbnz	r0, 8007fe4 <_GetPrevChild+0xe>
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f7ff feaf 	bl	8007d40 <WM__GetLastSibling>
 8007fe2:	e003      	b.n	8007fec <_GetPrevChild+0x16>
 8007fe4:	f7ff feb8 	bl	8007d58 <WM__GetPrevSibling>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d0f7      	beq.n	8007fdc <_GetPrevChild+0x6>
 8007fec:	42a0      	cmp	r0, r4
 8007fee:	bf08      	it	eq
 8007ff0:	2000      	moveq	r0, #0
 8007ff2:	bd10      	pop	{r4, pc}

08007ff4 <WM_SetFocusOnPrevChild>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	b1b0      	cbz	r0, 8008028 <WM_SetFocusOnPrevChild+0x34>
 8007ffa:	f7ff feeb 	bl	8007dd4 <WM__GetFocusedChild>
 8007ffe:	f7ff ffea 	bl	8007fd6 <_GetPrevChild>
 8008002:	4605      	mov	r5, r0
 8008004:	4604      	mov	r4, r0
 8008006:	4620      	mov	r0, r4
 8008008:	f000 fa7e 	bl	8008508 <WM_IsFocusable>
 800800c:	b930      	cbnz	r0, 800801c <WM_SetFocusOnPrevChild+0x28>
 800800e:	b12c      	cbz	r4, 800801c <WM_SetFocusOnPrevChild+0x28>
 8008010:	4620      	mov	r0, r4
 8008012:	f7ff ffe0 	bl	8007fd6 <_GetPrevChild>
 8008016:	42a8      	cmp	r0, r5
 8008018:	4604      	mov	r4, r0
 800801a:	d1f4      	bne.n	8008006 <WM_SetFocusOnPrevChild+0x12>
 800801c:	4620      	mov	r0, r4
 800801e:	f000 fb3f 	bl	80086a0 <WM_SetFocus>
 8008022:	2800      	cmp	r0, #0
 8008024:	bf18      	it	ne
 8008026:	2400      	movne	r4, #0
 8008028:	4620      	mov	r0, r4
 800802a:	bd38      	pop	{r3, r4, r5, pc}

0800802c <_GetNextChild>:
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	4605      	mov	r5, r0
 8008030:	460c      	mov	r4, r1
 8008032:	b921      	cbnz	r1, 800803e <_GetNextChild+0x12>
 8008034:	4628      	mov	r0, r5
 8008036:	f006 ff1d 	bl	800ee74 <GUI_ALLOC_h2p>
 800803a:	69c0      	ldr	r0, [r0, #28]
 800803c:	e005      	b.n	800804a <_GetNextChild+0x1e>
 800803e:	4608      	mov	r0, r1
 8008040:	f006 ff18 	bl	800ee74 <GUI_ALLOC_h2p>
 8008044:	6a00      	ldr	r0, [r0, #32]
 8008046:	2800      	cmp	r0, #0
 8008048:	d0f4      	beq.n	8008034 <_GetNextChild+0x8>
 800804a:	42a0      	cmp	r0, r4
 800804c:	bf08      	it	eq
 800804e:	2000      	moveq	r0, #0
 8008050:	bd38      	pop	{r3, r4, r5, pc}
	...

08008054 <WM_SetFocusOnNextChild>:
 8008054:	b570      	push	{r4, r5, r6, lr}
 8008056:	4605      	mov	r5, r0
 8008058:	b328      	cbz	r0, 80080a6 <WM_SetFocusOnNextChild+0x52>
 800805a:	f7ff febb 	bl	8007dd4 <WM__GetFocusedChild>
 800805e:	4601      	mov	r1, r0
 8008060:	4628      	mov	r0, r5
 8008062:	f7ff ffe3 	bl	800802c <_GetNextChild>
 8008066:	4606      	mov	r6, r0
 8008068:	4604      	mov	r4, r0
 800806a:	4620      	mov	r0, r4
 800806c:	f000 fa4c 	bl	8008508 <WM_IsFocusable>
 8008070:	b938      	cbnz	r0, 8008082 <WM_SetFocusOnNextChild+0x2e>
 8008072:	b13c      	cbz	r4, 8008084 <WM_SetFocusOnNextChild+0x30>
 8008074:	4621      	mov	r1, r4
 8008076:	4628      	mov	r0, r5
 8008078:	f7ff ffd8 	bl	800802c <_GetNextChild>
 800807c:	42b0      	cmp	r0, r6
 800807e:	4604      	mov	r4, r0
 8008080:	d1f3      	bne.n	800806a <WM_SetFocusOnNextChild+0x16>
 8008082:	b90c      	cbnz	r4, 8008088 <WM_SetFocusOnNextChild+0x34>
 8008084:	2400      	movs	r4, #0
 8008086:	e00f      	b.n	80080a8 <WM_SetFocusOnNextChild+0x54>
 8008088:	4d08      	ldr	r5, [pc, #32]	; (80080ac <WM_SetFocusOnNextChild+0x58>)
 800808a:	4620      	mov	r0, r4
 800808c:	682e      	ldr	r6, [r5, #0]
 800808e:	f000 ffe5 	bl	800905c <WM__GetTopLevelLayer>
 8008092:	1c43      	adds	r3, r0, #1
 8008094:	d008      	beq.n	80080a8 <WM_SetFocusOnNextChild+0x54>
 8008096:	6028      	str	r0, [r5, #0]
 8008098:	4620      	mov	r0, r4
 800809a:	f000 fb01 	bl	80086a0 <WM_SetFocus>
 800809e:	602e      	str	r6, [r5, #0]
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d1ef      	bne.n	8008084 <WM_SetFocusOnNextChild+0x30>
 80080a4:	e000      	b.n	80080a8 <WM_SetFocusOnNextChild+0x54>
 80080a6:	4604      	mov	r4, r0
 80080a8:	4620      	mov	r0, r4
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
 80080ac:	200076b0 	.word	0x200076b0

080080b0 <WM_SetCaptureMove>:
 80080b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080b4:	b085      	sub	sp, #20
 80080b6:	4604      	mov	r4, r0
 80080b8:	460d      	mov	r5, r1
 80080ba:	4691      	mov	r9, r2
 80080bc:	4698      	mov	r8, r3
 80080be:	f000 fa07 	bl	80084d0 <WM_HasCaptured>
 80080c2:	4e21      	ldr	r6, [pc, #132]	; (8008148 <WM_SetCaptureMove+0x98>)
 80080c4:	b940      	cbnz	r0, 80080d8 <WM_SetCaptureMove+0x28>
 80080c6:	4620      	mov	r0, r4
 80080c8:	2101      	movs	r1, #1
 80080ca:	f000 f859 	bl	8008180 <WM_SetCapture>
 80080ce:	682b      	ldr	r3, [r5, #0]
 80080d0:	8033      	strh	r3, [r6, #0]
 80080d2:	686b      	ldr	r3, [r5, #4]
 80080d4:	8073      	strh	r3, [r6, #2]
 80080d6:	e034      	b.n	8008142 <WM_SetCaptureMove+0x92>
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	f9b6 7000 	ldrsh.w	r7, [r6]
 80080de:	686d      	ldr	r5, [r5, #4]
 80080e0:	1bdf      	subs	r7, r3, r7
 80080e2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80080e6:	4620      	mov	r0, r4
 80080e8:	1aed      	subs	r5, r5, r3
 80080ea:	f1b9 0f00 	cmp.w	r9, #0
 80080ee:	d102      	bne.n	80080f6 <WM_SetCaptureMove+0x46>
 80080f0:	f1b8 0f00 	cmp.w	r8, #0
 80080f4:	d021      	beq.n	800813a <WM_SetCaptureMove+0x8a>
 80080f6:	4669      	mov	r1, sp
 80080f8:	f000 f9de 	bl	80084b8 <WM_GetWindowRectEx>
 80080fc:	f1b8 0f00 	cmp.w	r8, #0
 8008100:	d005      	beq.n	800810e <WM_SetCaptureMove+0x5e>
 8008102:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8008106:	3b01      	subs	r3, #1
 8008108:	4498      	add	r8, r3
 800810a:	f8ad 8006 	strh.w	r8, [sp, #6]
 800810e:	4620      	mov	r0, r4
 8008110:	f000 f987 	bl	8008422 <WM_GetParent>
 8008114:	a902      	add	r1, sp, #8
 8008116:	f000 f9cf 	bl	80084b8 <WM_GetWindowRectEx>
 800811a:	4668      	mov	r0, sp
 800811c:	4639      	mov	r1, r7
 800811e:	462a      	mov	r2, r5
 8008120:	f005 fbd5 	bl	800d8ce <GUI_MoveRect>
 8008124:	a802      	add	r0, sp, #8
 8008126:	4601      	mov	r1, r0
 8008128:	464a      	mov	r2, r9
 800812a:	f004 fc20 	bl	800c96e <GUI__ReduceRect>
 800812e:	4668      	mov	r0, sp
 8008130:	a902      	add	r1, sp, #8
 8008132:	f005 fc17 	bl	800d964 <GUI_RectsIntersect>
 8008136:	b120      	cbz	r0, 8008142 <WM_SetCaptureMove+0x92>
 8008138:	4620      	mov	r0, r4
 800813a:	4639      	mov	r1, r7
 800813c:	462a      	mov	r2, r5
 800813e:	f000 f8c3 	bl	80082c8 <WM_MoveWindow>
 8008142:	b005      	add	sp, #20
 8008144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008148:	200029e4 	.word	0x200029e4

0800814c <WM__ReleaseCapture>:
 800814c:	b530      	push	{r4, r5, lr}
 800814e:	4d0a      	ldr	r5, [pc, #40]	; (8008178 <WM__ReleaseCapture+0x2c>)
 8008150:	4c0a      	ldr	r4, [pc, #40]	; (800817c <WM__ReleaseCapture+0x30>)
 8008152:	682b      	ldr	r3, [r5, #0]
 8008154:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8008158:	b085      	sub	sp, #20
 800815a:	b150      	cbz	r0, 8008172 <WM__ReleaseCapture+0x26>
 800815c:	a904      	add	r1, sp, #16
 800815e:	2318      	movs	r3, #24
 8008160:	f841 3d10 	str.w	r3, [r1, #-16]!
 8008164:	4669      	mov	r1, sp
 8008166:	f7ff fe47 	bl	8007df8 <WM__SendMessage>
 800816a:	682b      	ldr	r3, [r5, #0]
 800816c:	2200      	movs	r2, #0
 800816e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8008172:	b005      	add	sp, #20
 8008174:	bd30      	pop	{r4, r5, pc}
 8008176:	bf00      	nop
 8008178:	200076b0 	.word	0x200076b0
 800817c:	200076d4 	.word	0x200076d4

08008180 <WM_SetCapture>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <WM_SetCapture+0x28>)
 8008184:	4a09      	ldr	r2, [pc, #36]	; (80081ac <WM_SetCapture+0x2c>)
 8008186:	4604      	mov	r4, r0
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	460f      	mov	r7, r1
 800818c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 8008190:	42a1      	cmp	r1, r4
 8008192:	4615      	mov	r5, r2
 8008194:	461e      	mov	r6, r3
 8008196:	d001      	beq.n	800819c <WM_SetCapture+0x1c>
 8008198:	f7ff ffd8 	bl	800814c <WM__ReleaseCapture>
 800819c:	6833      	ldr	r3, [r6, #0]
 800819e:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
 80081a2:	4b03      	ldr	r3, [pc, #12]	; (80081b0 <WM_SetCapture+0x30>)
 80081a4:	701f      	strb	r7, [r3, #0]
 80081a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a8:	200076b0 	.word	0x200076b0
 80081ac:	200076d4 	.word	0x200076d4
 80081b0:	200076b4 	.word	0x200076b4

080081b4 <_MoveDescendents>:
 80081b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b8:	b088      	sub	sp, #32
 80081ba:	4606      	mov	r6, r0
 80081bc:	460c      	mov	r4, r1
 80081be:	4615      	mov	r5, r2
 80081c0:	a804      	add	r0, sp, #16
 80081c2:	2100      	movs	r1, #0
 80081c4:	2210      	movs	r2, #16
 80081c6:	f00a f817 	bl	80121f8 <memset>
 80081ca:	b336      	cbz	r6, 800821a <_MoveDescendents+0x66>
 80081cc:	4630      	mov	r0, r6
 80081ce:	f006 fe5b 	bl	800ee88 <GUI_ALLOC_LockH>
 80081d2:	4621      	mov	r1, r4
 80081d4:	462a      	mov	r2, r5
 80081d6:	9001      	str	r0, [sp, #4]
 80081d8:	f005 fb79 	bl	800d8ce <GUI_MoveRect>
 80081dc:	9801      	ldr	r0, [sp, #4]
 80081de:	4621      	mov	r1, r4
 80081e0:	3008      	adds	r0, #8
 80081e2:	462a      	mov	r2, r5
 80081e4:	f005 fb73 	bl	800d8ce <GUI_MoveRect>
 80081e8:	a808      	add	r0, sp, #32
 80081ea:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 80081ee:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80081f2:	6a17      	ldr	r7, [r2, #32]
 80081f4:	f006 fe56 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80081f8:	4640      	mov	r0, r8
 80081fa:	4621      	mov	r1, r4
 80081fc:	462a      	mov	r2, r5
 80081fe:	f7ff ffd9 	bl	80081b4 <_MoveDescendents>
 8008202:	2303      	movs	r3, #3
 8008204:	9304      	str	r3, [sp, #16]
 8008206:	4630      	mov	r0, r6
 8008208:	ab02      	add	r3, sp, #8
 800820a:	a904      	add	r1, sp, #16
 800820c:	9307      	str	r3, [sp, #28]
 800820e:	9402      	str	r4, [sp, #8]
 8008210:	9503      	str	r5, [sp, #12]
 8008212:	463e      	mov	r6, r7
 8008214:	f7ff fdf0 	bl	8007df8 <WM__SendMessage>
 8008218:	e7d7      	b.n	80081ca <_MoveDescendents+0x16>
 800821a:	b008      	add	sp, #32
 800821c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008220 <WM__MoveWindow>:
 8008220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008224:	b08b      	sub	sp, #44	; 0x2c
 8008226:	4606      	mov	r6, r0
 8008228:	460d      	mov	r5, r1
 800822a:	4614      	mov	r4, r2
 800822c:	a806      	add	r0, sp, #24
 800822e:	2100      	movs	r1, #0
 8008230:	2210      	movs	r2, #16
 8008232:	f009 ffe1 	bl	80121f8 <memset>
 8008236:	2e00      	cmp	r6, #0
 8008238:	d043      	beq.n	80082c2 <WM__MoveWindow+0xa2>
 800823a:	b90d      	cbnz	r5, 8008240 <WM__MoveWindow+0x20>
 800823c:	2c00      	cmp	r4, #0
 800823e:	d040      	beq.n	80082c2 <WM__MoveWindow+0xa2>
 8008240:	4630      	mov	r0, r6
 8008242:	f006 fe21 	bl	800ee88 <GUI_ALLOC_LockH>
 8008246:	4603      	mov	r3, r0
 8008248:	9001      	str	r0, [sp, #4]
 800824a:	c803      	ldmia	r0, {r0, r1}
 800824c:	f10d 0808 	add.w	r8, sp, #8
 8008250:	e888 0003 	stmia.w	r8, {r0, r1}
 8008254:	4622      	mov	r2, r4
 8008256:	4618      	mov	r0, r3
 8008258:	4629      	mov	r1, r5
 800825a:	f005 fb38 	bl	800d8ce <GUI_MoveRect>
 800825e:	9801      	ldr	r0, [sp, #4]
 8008260:	af0a      	add	r7, sp, #40	; 0x28
 8008262:	4629      	mov	r1, r5
 8008264:	4622      	mov	r2, r4
 8008266:	3008      	adds	r0, #8
 8008268:	f005 fb31 	bl	800d8ce <GUI_MoveRect>
 800826c:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 8008270:	f8d3 901c 	ldr.w	r9, [r3, #28]
 8008274:	4638      	mov	r0, r7
 8008276:	f006 fe15 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800827a:	4622      	mov	r2, r4
 800827c:	4648      	mov	r0, r9
 800827e:	4629      	mov	r1, r5
 8008280:	f7ff ff98 	bl	80081b4 <_MoveDescendents>
 8008284:	4630      	mov	r0, r6
 8008286:	f006 fdff 	bl	800ee88 <GUI_ALLOC_LockH>
 800828a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800828c:	9001      	str	r0, [sp, #4]
 800828e:	0792      	lsls	r2, r2, #30
 8008290:	d50a      	bpl.n	80082a8 <WM__MoveWindow+0x88>
 8008292:	6981      	ldr	r1, [r0, #24]
 8008294:	b141      	cbz	r1, 80082a8 <WM__MoveWindow+0x88>
 8008296:	6a02      	ldr	r2, [r0, #32]
 8008298:	f000 ffb5 	bl	8009206 <WM__InvalidateParent>
 800829c:	9b01      	ldr	r3, [sp, #4]
 800829e:	4640      	mov	r0, r8
 80082a0:	6999      	ldr	r1, [r3, #24]
 80082a2:	6a1a      	ldr	r2, [r3, #32]
 80082a4:	f000 ffaf 	bl	8009206 <WM__InvalidateParent>
 80082a8:	4638      	mov	r0, r7
 80082aa:	f006 fdfb 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80082ae:	2303      	movs	r3, #3
 80082b0:	9306      	str	r3, [sp, #24]
 80082b2:	4630      	mov	r0, r6
 80082b4:	ab04      	add	r3, sp, #16
 80082b6:	a906      	add	r1, sp, #24
 80082b8:	9309      	str	r3, [sp, #36]	; 0x24
 80082ba:	9504      	str	r5, [sp, #16]
 80082bc:	9405      	str	r4, [sp, #20]
 80082be:	f7ff fd9b 	bl	8007df8 <WM__SendMessage>
 80082c2:	b00b      	add	sp, #44	; 0x2c
 80082c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080082c8 <WM_MoveWindow>:
 80082c8:	f7ff bfaa 	b.w	8008220 <WM__MoveWindow>

080082cc <WM_DisableMemdev>:
 80082cc:	b508      	push	{r3, lr}
 80082ce:	b138      	cbz	r0, 80082e0 <WM_DisableMemdev+0x14>
 80082d0:	f006 fdd0 	bl	800ee74 <GUI_ALLOC_h2p>
 80082d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80082d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082da:	f023 0304 	bic.w	r3, r3, #4
 80082de:	6283      	str	r3, [r0, #40]	; 0x28
 80082e0:	bd08      	pop	{r3, pc}

080082e2 <WM_ForEachDesc>:
 80082e2:	f7ff bd0f 	b.w	8007d04 <WM__ForEachDesc>
	...

080082e8 <WM_GetClientRect>:
 80082e8:	4b04      	ldr	r3, [pc, #16]	; (80082fc <WM_GetClientRect+0x14>)
 80082ea:	4601      	mov	r1, r0
 80082ec:	6818      	ldr	r0, [r3, #0]
 80082ee:	b910      	cbnz	r0, 80082f6 <WM_GetClientRect+0xe>
 80082f0:	4b03      	ldr	r3, [pc, #12]	; (8008300 <WM_GetClientRect+0x18>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80082f6:	f7ff be33 	b.w	8007f60 <WM__GetClientRectEx>
 80082fa:	bf00      	nop
 80082fc:	2000768c 	.word	0x2000768c
 8008300:	20000084 	.word	0x20000084

08008304 <WM_GetClientWindow>:
 8008304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008306:	2300      	movs	r3, #0
 8008308:	a904      	add	r1, sp, #16
 800830a:	9303      	str	r3, [sp, #12]
 800830c:	2317      	movs	r3, #23
 800830e:	f841 3d10 	str.w	r3, [r1, #-16]!
 8008312:	4669      	mov	r1, sp
 8008314:	f000 fe87 	bl	8009026 <WM_SendMessage>
 8008318:	9803      	ldr	r0, [sp, #12]
 800831a:	b005      	add	sp, #20
 800831c:	f85d fb04 	ldr.w	pc, [sp], #4

08008320 <WM_GetDesktopWindow>:
 8008320:	4b03      	ldr	r3, [pc, #12]	; (8008330 <WM_GetDesktopWindow+0x10>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	7c5a      	ldrb	r2, [r3, #17]
 8008326:	4b03      	ldr	r3, [pc, #12]	; (8008334 <WM_GetDesktopWindow+0x14>)
 8008328:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	20000084 	.word	0x20000084
 8008334:	20007690 	.word	0x20007690

08008338 <WM_GetFirstChild>:
 8008338:	b508      	push	{r3, lr}
 800833a:	4603      	mov	r3, r0
 800833c:	b110      	cbz	r0, 8008344 <WM_GetFirstChild+0xc>
 800833e:	f006 fd99 	bl	800ee74 <GUI_ALLOC_h2p>
 8008342:	69c3      	ldr	r3, [r0, #28]
 8008344:	4618      	mov	r0, r3
 8008346:	bd08      	pop	{r3, pc}

08008348 <WM_GetFocusedWindow>:
 8008348:	4b02      	ldr	r3, [pc, #8]	; (8008354 <WM_GetFocusedWindow+0xc>)
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	4b02      	ldr	r3, [pc, #8]	; (8008358 <WM_GetFocusedWindow+0x10>)
 800834e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008352:	4770      	bx	lr
 8008354:	200076b0 	.word	0x200076b0
 8008358:	200076a0 	.word	0x200076a0

0800835c <WM_GetId>:
 800835c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800835e:	4604      	mov	r4, r0
 8008360:	2210      	movs	r2, #16
 8008362:	4668      	mov	r0, sp
 8008364:	2100      	movs	r1, #0
 8008366:	f009 ff47 	bl	80121f8 <memset>
 800836a:	2315      	movs	r3, #21
 800836c:	4620      	mov	r0, r4
 800836e:	4669      	mov	r1, sp
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	f000 fe58 	bl	8009026 <WM_SendMessage>
 8008376:	9803      	ldr	r0, [sp, #12]
 8008378:	b004      	add	sp, #16
 800837a:	bd10      	pop	{r4, pc}

0800837c <_GetDialogItem>:
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	4606      	mov	r6, r0
 8008380:	460d      	mov	r5, r1
 8008382:	f006 fd77 	bl	800ee74 <GUI_ALLOC_h2p>
 8008386:	69c4      	ldr	r4, [r0, #28]
 8008388:	b14c      	cbz	r4, 800839e <_GetDialogItem+0x22>
 800838a:	4620      	mov	r0, r4
 800838c:	f7ff ffe6 	bl	800835c <WM_GetId>
 8008390:	42a8      	cmp	r0, r5
 8008392:	4620      	mov	r0, r4
 8008394:	d013      	beq.n	80083be <_GetDialogItem+0x42>
 8008396:	f006 fd6d 	bl	800ee74 <GUI_ALLOC_h2p>
 800839a:	6a04      	ldr	r4, [r0, #32]
 800839c:	e7f4      	b.n	8008388 <_GetDialogItem+0xc>
 800839e:	4630      	mov	r0, r6
 80083a0:	f006 fd68 	bl	800ee74 <GUI_ALLOC_h2p>
 80083a4:	69c4      	ldr	r4, [r0, #28]
 80083a6:	4620      	mov	r0, r4
 80083a8:	b144      	cbz	r4, 80083bc <_GetDialogItem+0x40>
 80083aa:	4629      	mov	r1, r5
 80083ac:	f7ff ffe6 	bl	800837c <_GetDialogItem>
 80083b0:	b928      	cbnz	r0, 80083be <_GetDialogItem+0x42>
 80083b2:	4620      	mov	r0, r4
 80083b4:	f006 fd5e 	bl	800ee74 <GUI_ALLOC_h2p>
 80083b8:	6a04      	ldr	r4, [r0, #32]
 80083ba:	e7f4      	b.n	80083a6 <_GetDialogItem+0x2a>
 80083bc:	bd70      	pop	{r4, r5, r6, pc}
 80083be:	bd70      	pop	{r4, r5, r6, pc}

080083c0 <WM_GetDialogItem>:
 80083c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083c2:	460d      	mov	r5, r1
 80083c4:	4604      	mov	r4, r0
 80083c6:	b1c8      	cbz	r0, 80083fc <WM_GetDialogItem+0x3c>
 80083c8:	f006 fd5e 	bl	800ee88 <GUI_ALLOC_LockH>
 80083cc:	ab02      	add	r3, sp, #8
 80083ce:	69c4      	ldr	r4, [r0, #28]
 80083d0:	f843 0d04 	str.w	r0, [r3, #-4]!
 80083d4:	4618      	mov	r0, r3
 80083d6:	f006 fd65 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80083da:	b17c      	cbz	r4, 80083fc <WM_GetDialogItem+0x3c>
 80083dc:	4620      	mov	r0, r4
 80083de:	f7ff ffbd 	bl	800835c <WM_GetId>
 80083e2:	42a8      	cmp	r0, r5
 80083e4:	d00a      	beq.n	80083fc <WM_GetDialogItem+0x3c>
 80083e6:	4620      	mov	r0, r4
 80083e8:	4629      	mov	r1, r5
 80083ea:	f7ff ffc7 	bl	800837c <_GetDialogItem>
 80083ee:	b920      	cbnz	r0, 80083fa <WM_GetDialogItem+0x3a>
 80083f0:	4620      	mov	r0, r4
 80083f2:	f006 fd3f 	bl	800ee74 <GUI_ALLOC_h2p>
 80083f6:	6a04      	ldr	r4, [r0, #32]
 80083f8:	e7ef      	b.n	80083da <WM_GetDialogItem+0x1a>
 80083fa:	4604      	mov	r4, r0
 80083fc:	4620      	mov	r0, r4
 80083fe:	b003      	add	sp, #12
 8008400:	bd30      	pop	{r4, r5, pc}

08008402 <WM_GetNextSibling>:
 8008402:	b508      	push	{r3, lr}
 8008404:	4603      	mov	r3, r0
 8008406:	b110      	cbz	r0, 800840e <WM_GetNextSibling+0xc>
 8008408:	f006 fd34 	bl	800ee74 <GUI_ALLOC_h2p>
 800840c:	6a03      	ldr	r3, [r0, #32]
 800840e:	4618      	mov	r0, r3
 8008410:	bd08      	pop	{r3, pc}

08008412 <WM_GetWindowOrgX>:
 8008412:	b508      	push	{r3, lr}
 8008414:	b120      	cbz	r0, 8008420 <WM_GetWindowOrgX+0xe>
 8008416:	f006 fd2d 	bl	800ee74 <GUI_ALLOC_h2p>
 800841a:	f9b0 0000 	ldrsh.w	r0, [r0]
 800841e:	bd08      	pop	{r3, pc}
 8008420:	bd08      	pop	{r3, pc}

08008422 <WM_GetParent>:
 8008422:	b508      	push	{r3, lr}
 8008424:	4603      	mov	r3, r0
 8008426:	b110      	cbz	r0, 800842e <WM_GetParent+0xc>
 8008428:	f006 fd24 	bl	800ee74 <GUI_ALLOC_h2p>
 800842c:	6983      	ldr	r3, [r0, #24]
 800842e:	4618      	mov	r0, r3
 8008430:	bd08      	pop	{r3, pc}

08008432 <WM_BringToBottom>:
 8008432:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008436:	4604      	mov	r4, r0
 8008438:	b087      	sub	sp, #28
 800843a:	2800      	cmp	r0, #0
 800843c:	d039      	beq.n	80084b2 <WM_BringToBottom+0x80>
 800843e:	f006 fd23 	bl	800ee88 <GUI_ALLOC_LockH>
 8008442:	4603      	mov	r3, r0
 8008444:	9001      	str	r0, [sp, #4]
 8008446:	c803      	ldmia	r0, {r0, r1}
 8008448:	ad04      	add	r5, sp, #16
 800844a:	e885 0003 	stmia.w	r5, {r0, r1}
 800844e:	a801      	add	r0, sp, #4
 8008450:	6a1e      	ldr	r6, [r3, #32]
 8008452:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8008456:	f006 fd25 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800845a:	4620      	mov	r0, r4
 800845c:	f7ff fc7c 	bl	8007d58 <WM__GetPrevSibling>
 8008460:	4607      	mov	r7, r0
 8008462:	b330      	cbz	r0, 80084b2 <WM_BringToBottom+0x80>
 8008464:	4620      	mov	r0, r4
 8008466:	f7ff ffdc 	bl	8008422 <WM_GetParent>
 800846a:	f019 0f02 	tst.w	r9, #2
 800846e:	4680      	mov	r8, r0
 8008470:	d004      	beq.n	800847c <WM_BringToBottom+0x4a>
 8008472:	4628      	mov	r0, r5
 8008474:	4641      	mov	r1, r8
 8008476:	4632      	mov	r2, r6
 8008478:	f000 feda 	bl	8009230 <WM__InvalidateRectEx>
 800847c:	4620      	mov	r0, r4
 800847e:	f006 fd03 	bl	800ee88 <GUI_ALLOC_LockH>
 8008482:	9001      	str	r0, [sp, #4]
 8008484:	4640      	mov	r0, r8
 8008486:	f006 fcff 	bl	800ee88 <GUI_ALLOC_LockH>
 800848a:	9003      	str	r0, [sp, #12]
 800848c:	4638      	mov	r0, r7
 800848e:	f006 fcfb 	bl	800ee88 <GUI_ALLOC_LockH>
 8008492:	9b03      	ldr	r3, [sp, #12]
 8008494:	9a01      	ldr	r2, [sp, #4]
 8008496:	69d9      	ldr	r1, [r3, #28]
 8008498:	6206      	str	r6, [r0, #32]
 800849a:	9002      	str	r0, [sp, #8]
 800849c:	6211      	str	r1, [r2, #32]
 800849e:	a801      	add	r0, sp, #4
 80084a0:	61dc      	str	r4, [r3, #28]
 80084a2:	f006 fcff 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80084a6:	a803      	add	r0, sp, #12
 80084a8:	f006 fcfc 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80084ac:	a802      	add	r0, sp, #8
 80084ae:	f006 fcf9 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80084b2:	b007      	add	sp, #28
 80084b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080084b8 <WM_GetWindowRectEx>:
 80084b8:	b510      	push	{r4, lr}
 80084ba:	460c      	mov	r4, r1
 80084bc:	b130      	cbz	r0, 80084cc <WM_GetWindowRectEx+0x14>
 80084be:	b129      	cbz	r1, 80084cc <WM_GetWindowRectEx+0x14>
 80084c0:	f006 fcd8 	bl	800ee74 <GUI_ALLOC_h2p>
 80084c4:	4603      	mov	r3, r0
 80084c6:	cb03      	ldmia	r3!, {r0, r1}
 80084c8:	6020      	str	r0, [r4, #0]
 80084ca:	6061      	str	r1, [r4, #4]
 80084cc:	bd10      	pop	{r4, pc}
	...

080084d0 <WM_HasCaptured>:
 80084d0:	4b04      	ldr	r3, [pc, #16]	; (80084e4 <WM_HasCaptured+0x14>)
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	4b04      	ldr	r3, [pc, #16]	; (80084e8 <WM_HasCaptured+0x18>)
 80084d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084da:	1ac3      	subs	r3, r0, r3
 80084dc:	4258      	negs	r0, r3
 80084de:	4158      	adcs	r0, r3
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	200076b0 	.word	0x200076b0
 80084e8:	200076d4 	.word	0x200076d4

080084ec <WM_HasFocus>:
 80084ec:	4b04      	ldr	r3, [pc, #16]	; (8008500 <WM_HasFocus+0x14>)
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	4b04      	ldr	r3, [pc, #16]	; (8008504 <WM_HasFocus+0x18>)
 80084f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f6:	1ac3      	subs	r3, r0, r3
 80084f8:	4258      	negs	r0, r3
 80084fa:	4158      	adcs	r0, r3
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	200076b0 	.word	0x200076b0
 8008504:	200076a0 	.word	0x200076a0

08008508 <WM_IsFocusable>:
 8008508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800850a:	4604      	mov	r4, r0
 800850c:	b908      	cbnz	r0, 8008512 <WM_IsFocusable+0xa>
 800850e:	2000      	movs	r0, #0
 8008510:	e011      	b.n	8008536 <WM_IsFocusable+0x2e>
 8008512:	f006 fcaf 	bl	800ee74 <GUI_ALLOC_h2p>
 8008516:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008518:	079a      	lsls	r2, r3, #30
 800851a:	d5f8      	bpl.n	800850e <WM_IsFocusable+0x6>
 800851c:	f013 0310 	ands.w	r3, r3, #16
 8008520:	d1f5      	bne.n	800850e <WM_IsFocusable+0x6>
 8008522:	a904      	add	r1, sp, #16
 8008524:	9303      	str	r3, [sp, #12]
 8008526:	231f      	movs	r3, #31
 8008528:	f841 3d10 	str.w	r3, [r1, #-16]!
 800852c:	4620      	mov	r0, r4
 800852e:	4669      	mov	r1, sp
 8008530:	f000 fd79 	bl	8009026 <WM_SendMessage>
 8008534:	9803      	ldr	r0, [sp, #12]
 8008536:	b004      	add	sp, #16
 8008538:	bd10      	pop	{r4, pc}

0800853a <WM_IsWindow>:
 800853a:	f000 bd2b 	b.w	8008f94 <WM__IsWindow>
	...

08008540 <WM_OnKey>:
 8008540:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008542:	4a0a      	ldr	r2, [pc, #40]	; (800856c <WM_OnKey+0x2c>)
 8008544:	4603      	mov	r3, r0
 8008546:	6810      	ldr	r0, [r2, #0]
 8008548:	4a09      	ldr	r2, [pc, #36]	; (8008570 <WM_OnKey+0x30>)
 800854a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800854e:	b148      	cbz	r0, 8008564 <WM_OnKey+0x24>
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	230e      	movs	r3, #14
 8008554:	9101      	str	r1, [sp, #4]
 8008556:	9302      	str	r3, [sp, #8]
 8008558:	a902      	add	r1, sp, #8
 800855a:	ab00      	add	r3, sp, #0
 800855c:	9305      	str	r3, [sp, #20]
 800855e:	f7ff fc4b 	bl	8007df8 <WM__SendMessage>
 8008562:	2001      	movs	r0, #1
 8008564:	b007      	add	sp, #28
 8008566:	f85d fb04 	ldr.w	pc, [sp], #4
 800856a:	bf00      	nop
 800856c:	200076b0 	.word	0x200076b0
 8008570:	200076a0 	.word	0x200076a0

08008574 <WM_ResizeWindow>:
 8008574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008578:	ea51 0302 	orrs.w	r3, r1, r2
 800857c:	b08a      	sub	sp, #40	; 0x28
 800857e:	4680      	mov	r8, r0
 8008580:	460e      	mov	r6, r1
 8008582:	4617      	mov	r7, r2
 8008584:	d06e      	beq.n	8008664 <WM_ResizeWindow+0xf0>
 8008586:	2800      	cmp	r0, #0
 8008588:	d06c      	beq.n	8008664 <WM_ResizeWindow+0xf0>
 800858a:	f006 fc7d 	bl	800ee88 <GUI_ALLOC_LockH>
 800858e:	4603      	mov	r3, r0
 8008590:	9003      	str	r0, [sp, #12]
 8008592:	c803      	ldmia	r0, {r0, r1}
 8008594:	ad04      	add	r5, sp, #16
 8008596:	ac06      	add	r4, sp, #24
 8008598:	e885 0003 	stmia.w	r5, {r0, r1}
 800859c:	e884 0003 	stmia.w	r4, {r0, r1}
 80085a0:	b17e      	cbz	r6, 80085c2 <WM_ResizeWindow+0x4e>
 80085a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085a4:	f402 7220 	and.w	r2, r2, #640	; 0x280
 80085a8:	2a80      	cmp	r2, #128	; 0x80
 80085aa:	d105      	bne.n	80085b8 <WM_ResizeWindow+0x44>
 80085ac:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80085b0:	1b96      	subs	r6, r2, r6
 80085b2:	f8ad 6018 	strh.w	r6, [sp, #24]
 80085b6:	e004      	b.n	80085c2 <WM_ResizeWindow+0x4e>
 80085b8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80085bc:	4416      	add	r6, r2
 80085be:	f8ad 601c 	strh.w	r6, [sp, #28]
 80085c2:	b187      	cbz	r7, 80085e6 <WM_ResizeWindow+0x72>
 80085c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085c6:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 80085ca:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80085ce:	d105      	bne.n	80085dc <WM_ResizeWindow+0x68>
 80085d0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80085d4:	1bd7      	subs	r7, r2, r7
 80085d6:	f8ad 701a 	strh.w	r7, [sp, #26]
 80085da:	e004      	b.n	80085e6 <WM_ResizeWindow+0x72>
 80085dc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80085e0:	4417      	add	r7, r2
 80085e2:	f8ad 701e 	strh.w	r7, [sp, #30]
 80085e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e8:	03da      	lsls	r2, r3, #15
 80085ea:	d502      	bpl.n	80085f2 <WM_ResizeWindow+0x7e>
 80085ec:	4640      	mov	r0, r8
 80085ee:	f000 fce1 	bl	8008fb4 <WM__InvalidateDrawAndDescs>
 80085f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80085f6:	9b03      	ldr	r3, [sp, #12]
 80085f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80085fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fe:	079b      	lsls	r3, r3, #30
 8008600:	d50a      	bpl.n	8008618 <WM_ResizeWindow+0xa4>
 8008602:	a808      	add	r0, sp, #32
 8008604:	4629      	mov	r1, r5
 8008606:	4622      	mov	r2, r4
 8008608:	f005 f936 	bl	800d878 <GUI_MergeRect>
 800860c:	9b03      	ldr	r3, [sp, #12]
 800860e:	a808      	add	r0, sp, #32
 8008610:	6999      	ldr	r1, [r3, #24]
 8008612:	6a1a      	ldr	r2, [r3, #32]
 8008614:	f000 fe0c 	bl	8009230 <WM__InvalidateRectEx>
 8008618:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 800861c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8008620:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 8008624:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8008628:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 800862c:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8008630:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 8008634:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8008638:	1ae3      	subs	r3, r4, r3
 800863a:	1a38      	subs	r0, r7, r0
 800863c:	ac0a      	add	r4, sp, #40	; 0x28
 800863e:	1aaa      	subs	r2, r5, r2
 8008640:	9000      	str	r0, [sp, #0]
 8008642:	1a71      	subs	r1, r6, r1
 8008644:	9803      	ldr	r0, [sp, #12]
 8008646:	f7ff fc09 	bl	8007e5c <WM__UpdateChildPositions>
 800864a:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 800864e:	f101 0008 	add.w	r0, r1, #8
 8008652:	f004 f8f7 	bl	800c844 <GUI__IntersectRect>
 8008656:	4640      	mov	r0, r8
 8008658:	2105      	movs	r1, #5
 800865a:	f000 fce8 	bl	800902e <WM__SendMsgNoData>
 800865e:	4620      	mov	r0, r4
 8008660:	f006 fc20 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008664:	b00a      	add	sp, #40	; 0x28
 8008666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800866a <WM_SendMessageNoPara>:
 800866a:	f7ff bbe3 	b.w	8007e34 <WM__SendMessageNoPara>

0800866e <WM_SendToParent>:
 800866e:	b538      	push	{r3, r4, r5, lr}
 8008670:	4605      	mov	r5, r0
 8008672:	460c      	mov	r4, r1
 8008674:	b141      	cbz	r1, 8008688 <WM_SendToParent+0x1a>
 8008676:	f7ff fed4 	bl	8008422 <WM_GetParent>
 800867a:	b128      	cbz	r0, 8008688 <WM_SendToParent+0x1a>
 800867c:	60a5      	str	r5, [r4, #8]
 800867e:	4621      	mov	r1, r4
 8008680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008684:	f7ff bbb8 	b.w	8007df8 <WM__SendMessage>
 8008688:	bd38      	pop	{r3, r4, r5, pc}

0800868a <WM_NotifyParent>:
 800868a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800868c:	2326      	movs	r3, #38	; 0x26
 800868e:	9103      	str	r1, [sp, #12]
 8008690:	4669      	mov	r1, sp
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	f7ff ffeb 	bl	800866e <WM_SendToParent>
 8008698:	b005      	add	sp, #20
 800869a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080086a0 <WM_SetFocus>:
 80086a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086a2:	b087      	sub	sp, #28
 80086a4:	4604      	mov	r4, r0
 80086a6:	2100      	movs	r1, #0
 80086a8:	a802      	add	r0, sp, #8
 80086aa:	2210      	movs	r2, #16
 80086ac:	f009 fda4 	bl	80121f8 <memset>
 80086b0:	2c00      	cmp	r4, #0
 80086b2:	d03a      	beq.n	800872a <WM_SetFocus+0x8a>
 80086b4:	4b1f      	ldr	r3, [pc, #124]	; (8008734 <WM_SetFocus+0x94>)
 80086b6:	4a20      	ldr	r2, [pc, #128]	; (8008738 <WM_SetFocus+0x98>)
 80086b8:	6819      	ldr	r1, [r3, #0]
 80086ba:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80086be:	4284      	cmp	r4, r0
 80086c0:	4616      	mov	r6, r2
 80086c2:	461f      	mov	r7, r3
 80086c4:	d031      	beq.n	800872a <WM_SetFocus+0x8a>
 80086c6:	231e      	movs	r3, #30
 80086c8:	e88d 0011 	stmia.w	sp, {r0, r4}
 80086cc:	9302      	str	r3, [sp, #8]
 80086ce:	b110      	cbz	r0, 80086d6 <WM_SetFocus+0x36>
 80086d0:	a902      	add	r1, sp, #8
 80086d2:	f7ff fb91 	bl	8007df8 <WM__SendMessage>
 80086d6:	2301      	movs	r3, #1
 80086d8:	4620      	mov	r0, r4
 80086da:	a902      	add	r1, sp, #8
 80086dc:	9305      	str	r3, [sp, #20]
 80086de:	f7ff fb8b 	bl	8007df8 <WM__SendMessage>
 80086e2:	9d05      	ldr	r5, [sp, #20]
 80086e4:	bb15      	cbnz	r5, 800872c <WM_SetFocus+0x8c>
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
 80086ec:	4620      	mov	r0, r4
 80086ee:	f7ff fe98 	bl	8008422 <WM_GetParent>
 80086f2:	4604      	mov	r4, r0
 80086f4:	b138      	cbz	r0, 8008706 <WM_SetFocus+0x66>
 80086f6:	2320      	movs	r3, #32
 80086f8:	9302      	str	r3, [sp, #8]
 80086fa:	a902      	add	r1, sp, #8
 80086fc:	ab00      	add	r3, sp, #0
 80086fe:	9305      	str	r3, [sp, #20]
 8008700:	f7ff fb7a 	bl	8007df8 <WM__SendMessage>
 8008704:	e7f2      	b.n	80086ec <WM_SetFocus+0x4c>
 8008706:	9c00      	ldr	r4, [sp, #0]
 8008708:	4620      	mov	r0, r4
 800870a:	f000 fc43 	bl	8008f94 <WM__IsWindow>
 800870e:	b168      	cbz	r0, 800872c <WM_SetFocus+0x8c>
 8008710:	4620      	mov	r0, r4
 8008712:	f7ff fe86 	bl	8008422 <WM_GetParent>
 8008716:	4604      	mov	r4, r0
 8008718:	b140      	cbz	r0, 800872c <WM_SetFocus+0x8c>
 800871a:	2320      	movs	r3, #32
 800871c:	9302      	str	r3, [sp, #8]
 800871e:	a902      	add	r1, sp, #8
 8008720:	ab00      	add	r3, sp, #0
 8008722:	9305      	str	r3, [sp, #20]
 8008724:	f7ff fb68 	bl	8007df8 <WM__SendMessage>
 8008728:	e7f2      	b.n	8008710 <WM_SetFocus+0x70>
 800872a:	2501      	movs	r5, #1
 800872c:	4628      	mov	r0, r5
 800872e:	b007      	add	sp, #28
 8008730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008732:	bf00      	nop
 8008734:	200076b0 	.word	0x200076b0
 8008738:	200076a0 	.word	0x200076a0

0800873c <WM_SetSize>:
 800873c:	e92d 41e7 	stmdb	sp!, {r0, r1, r2, r5, r6, r7, r8, lr}
 8008740:	460e      	mov	r6, r1
 8008742:	4690      	mov	r8, r2
 8008744:	4607      	mov	r7, r0
 8008746:	b1d0      	cbz	r0, 800877e <WM_SetSize+0x42>
 8008748:	f006 fb9e 	bl	800ee88 <GUI_ALLOC_LockH>
 800874c:	4603      	mov	r3, r0
 800874e:	a802      	add	r0, sp, #8
 8008750:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8008754:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008758:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800875c:	f840 3d04 	str.w	r3, [r0, #-4]!
 8008760:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008764:	1a8a      	subs	r2, r1, r2
 8008766:	1aed      	subs	r5, r5, r3
 8008768:	43d2      	mvns	r2, r2
 800876a:	43ed      	mvns	r5, r5
 800876c:	4416      	add	r6, r2
 800876e:	4445      	add	r5, r8
 8008770:	f006 fb98 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008774:	4638      	mov	r0, r7
 8008776:	4631      	mov	r1, r6
 8008778:	462a      	mov	r2, r5
 800877a:	f7ff fefb 	bl	8008574 <WM_ResizeWindow>
 800877e:	b003      	add	sp, #12
 8008780:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}

08008784 <WM_SetUserClipRect>:
 8008784:	4b04      	ldr	r3, [pc, #16]	; (8008798 <WM_SetUserClipRect+0x14>)
 8008786:	b510      	push	{r4, lr}
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800878c:	6458      	str	r0, [r3, #68]	; 0x44
 800878e:	f000 fbdd 	bl	8008f4c <WM__ActivateClipRect>
 8008792:	4620      	mov	r0, r4
 8008794:	bd10      	pop	{r4, pc}
 8008796:	bf00      	nop
 8008798:	20000084 	.word	0x20000084

0800879c <WM_InvalidateWindowAndDescs>:
 800879c:	b510      	push	{r4, lr}
 800879e:	4604      	mov	r4, r0
 80087a0:	b170      	cbz	r0, 80087c0 <WM_InvalidateWindowAndDescs+0x24>
 80087a2:	f000 fd99 	bl	80092d8 <WM_InvalidateWindow>
 80087a6:	4620      	mov	r0, r4
 80087a8:	f7ff fdc6 	bl	8008338 <WM_GetFirstChild>
 80087ac:	4604      	mov	r4, r0
 80087ae:	b13c      	cbz	r4, 80087c0 <WM_InvalidateWindowAndDescs+0x24>
 80087b0:	4620      	mov	r0, r4
 80087b2:	f7ff fff3 	bl	800879c <WM_InvalidateWindowAndDescs>
 80087b6:	4620      	mov	r0, r4
 80087b8:	f006 fb5c 	bl	800ee74 <GUI_ALLOC_h2p>
 80087bc:	6a04      	ldr	r4, [r0, #32]
 80087be:	e7f6      	b.n	80087ae <WM_InvalidateWindowAndDescs+0x12>
 80087c0:	bd10      	pop	{r4, pc}

080087c2 <WM_ShowWindow>:
 80087c2:	b513      	push	{r0, r1, r4, lr}
 80087c4:	4604      	mov	r4, r0
 80087c6:	b170      	cbz	r0, 80087e6 <WM_ShowWindow+0x24>
 80087c8:	f006 fb5e 	bl	800ee88 <GUI_ALLOC_LockH>
 80087cc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80087ce:	9001      	str	r0, [sp, #4]
 80087d0:	0793      	lsls	r3, r2, #30
 80087d2:	d405      	bmi.n	80087e0 <WM_ShowWindow+0x1e>
 80087d4:	f042 0202 	orr.w	r2, r2, #2
 80087d8:	6282      	str	r2, [r0, #40]	; 0x28
 80087da:	4620      	mov	r0, r4
 80087dc:	f7ff ffde 	bl	800879c <WM_InvalidateWindowAndDescs>
 80087e0:	a801      	add	r0, sp, #4
 80087e2:	f006 fb5f 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80087e6:	b002      	add	sp, #8
 80087e8:	bd10      	pop	{r4, pc}
	...

080087ec <WM_ValidateWindow>:
 80087ec:	b507      	push	{r0, r1, r2, lr}
 80087ee:	b178      	cbz	r0, 8008810 <WM_ValidateWindow+0x24>
 80087f0:	f006 fb4a 	bl	800ee88 <GUI_ALLOC_LockH>
 80087f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80087f6:	9001      	str	r0, [sp, #4]
 80087f8:	069a      	lsls	r2, r3, #26
 80087fa:	d506      	bpl.n	800880a <WM_ValidateWindow+0x1e>
 80087fc:	f023 0320 	bic.w	r3, r3, #32
 8008800:	6283      	str	r3, [r0, #40]	; 0x28
 8008802:	4b05      	ldr	r3, [pc, #20]	; (8008818 <WM_ValidateWindow+0x2c>)
 8008804:	881a      	ldrh	r2, [r3, #0]
 8008806:	3a01      	subs	r2, #1
 8008808:	801a      	strh	r2, [r3, #0]
 800880a:	a801      	add	r0, sp, #4
 800880c:	f006 fb4a 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008810:	b003      	add	sp, #12
 8008812:	f85d fb04 	ldr.w	pc, [sp], #4
 8008816:	bf00      	nop
 8008818:	200076a8 	.word	0x200076a8

0800881c <WM__GetWindowSizeX>:
 800881c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8008820:	f9b0 3000 	ldrsh.w	r3, [r0]
 8008824:	1ad0      	subs	r0, r2, r3
 8008826:	3001      	adds	r0, #1
 8008828:	4770      	bx	lr

0800882a <WM__GetWindowSizeY>:
 800882a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800882e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8008832:	1ad0      	subs	r0, r2, r3
 8008834:	3001      	adds	r0, #1
 8008836:	4770      	bx	lr

08008838 <WM_GetWindowSizeX>:
 8008838:	b513      	push	{r0, r1, r4, lr}
 800883a:	b908      	cbnz	r0, 8008840 <WM_GetWindowSizeX+0x8>
 800883c:	f000 fef0 	bl	8009620 <WM_GetActiveWindow>
 8008840:	f006 fb22 	bl	800ee88 <GUI_ALLOC_LockH>
 8008844:	ab02      	add	r3, sp, #8
 8008846:	f9b0 2000 	ldrsh.w	r2, [r0]
 800884a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800884e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8008852:	4618      	mov	r0, r3
 8008854:	1aa4      	subs	r4, r4, r2
 8008856:	f006 fb25 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800885a:	3401      	adds	r4, #1
 800885c:	4620      	mov	r0, r4
 800885e:	b002      	add	sp, #8
 8008860:	bd10      	pop	{r4, pc}

08008862 <WM_GetWindowSizeY>:
 8008862:	b513      	push	{r0, r1, r4, lr}
 8008864:	b908      	cbnz	r0, 800886a <WM_GetWindowSizeY+0x8>
 8008866:	f000 fedb 	bl	8009620 <WM_GetActiveWindow>
 800886a:	f006 fb0d 	bl	800ee88 <GUI_ALLOC_LockH>
 800886e:	ab02      	add	r3, sp, #8
 8008870:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8008874:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008878:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800887c:	4618      	mov	r0, r3
 800887e:	1aa4      	subs	r4, r4, r2
 8008880:	f006 fb10 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008884:	3401      	adds	r4, #1
 8008886:	4620      	mov	r0, r4
 8008888:	b002      	add	sp, #8
 800888a:	bd10      	pop	{r4, pc}

0800888c <_cbInvalidateOne>:
 800888c:	f000 bd24 	b.w	80092d8 <WM_InvalidateWindow>

08008890 <WM_BringToTop>:
 8008890:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008892:	4605      	mov	r5, r0
 8008894:	2800      	cmp	r0, #0
 8008896:	d032      	beq.n	80088fe <WM_BringToTop+0x6e>
 8008898:	f006 faf6 	bl	800ee88 <GUI_ALLOC_LockH>
 800889c:	ac02      	add	r4, sp, #8
 800889e:	4603      	mov	r3, r0
 80088a0:	f844 0d08 	str.w	r0, [r4, #-8]!
 80088a4:	6a00      	ldr	r0, [r0, #32]
 80088a6:	b908      	cbnz	r0, 80088ac <WM_BringToTop+0x1c>
 80088a8:	4668      	mov	r0, sp
 80088aa:	e00e      	b.n	80088ca <WM_BringToTop+0x3a>
 80088ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ae:	071a      	lsls	r2, r3, #28
 80088b0:	d411      	bmi.n	80088d6 <WM_BringToTop+0x46>
 80088b2:	f006 fae9 	bl	800ee88 <GUI_ALLOC_LockH>
 80088b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80088b8:	ae02      	add	r6, sp, #8
 80088ba:	071b      	lsls	r3, r3, #28
 80088bc:	f846 0d04 	str.w	r0, [r6, #-4]!
 80088c0:	d506      	bpl.n	80088d0 <WM_BringToTop+0x40>
 80088c2:	4668      	mov	r0, sp
 80088c4:	f006 faee 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80088c8:	4630      	mov	r0, r6
 80088ca:	f006 faeb 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80088ce:	e016      	b.n	80088fe <WM_BringToTop+0x6e>
 80088d0:	4630      	mov	r0, r6
 80088d2:	f006 fae7 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80088d6:	9b00      	ldr	r3, [sp, #0]
 80088d8:	4668      	mov	r0, sp
 80088da:	699e      	ldr	r6, [r3, #24]
 80088dc:	f006 fae2 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80088e0:	4628      	mov	r0, r5
 80088e2:	f000 fae5 	bl	8008eb0 <WM__RemoveWindowFromList>
 80088e6:	4631      	mov	r1, r6
 80088e8:	4628      	mov	r0, r5
 80088ea:	f000 fa8f 	bl	8008e0c <WM__InsertWindowIntoList>
 80088ee:	4628      	mov	r0, r5
 80088f0:	f000 fcf2 	bl	80092d8 <WM_InvalidateWindow>
 80088f4:	4628      	mov	r0, r5
 80088f6:	4903      	ldr	r1, [pc, #12]	; (8008904 <WM_BringToTop+0x74>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	f7ff fcf2 	bl	80082e2 <WM_ForEachDesc>
 80088fe:	b002      	add	sp, #8
 8008900:	bd70      	pop	{r4, r5, r6, pc}
 8008902:	bf00      	nop
 8008904:	0800888d 	.word	0x0800888d

08008908 <_OnExit>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	4b19      	ldr	r3, [pc, #100]	; (8008970 <_OnExit+0x68>)
 800890c:	4d19      	ldr	r5, [pc, #100]	; (8008974 <_OnExit+0x6c>)
 800890e:	4a1a      	ldr	r2, [pc, #104]	; (8008978 <_OnExit+0x70>)
 8008910:	481a      	ldr	r0, [pc, #104]	; (800897c <_OnExit+0x74>)
 8008912:	2400      	movs	r4, #0
 8008914:	701c      	strb	r4, [r3, #0]
 8008916:	4b1a      	ldr	r3, [pc, #104]	; (8008980 <_OnExit+0x78>)
 8008918:	6014      	str	r4, [r2, #0]
 800891a:	601c      	str	r4, [r3, #0]
 800891c:	4b19      	ldr	r3, [pc, #100]	; (8008984 <_OnExit+0x7c>)
 800891e:	6054      	str	r4, [r2, #4]
 8008920:	601c      	str	r4, [r3, #0]
 8008922:	4b19      	ldr	r3, [pc, #100]	; (8008988 <_OnExit+0x80>)
 8008924:	601c      	str	r4, [r3, #0]
 8008926:	605c      	str	r4, [r3, #4]
 8008928:	4b18      	ldr	r3, [pc, #96]	; (800898c <_OnExit+0x84>)
 800892a:	601c      	str	r4, [r3, #0]
 800892c:	4b18      	ldr	r3, [pc, #96]	; (8008990 <_OnExit+0x88>)
 800892e:	601c      	str	r4, [r3, #0]
 8008930:	4b18      	ldr	r3, [pc, #96]	; (8008994 <_OnExit+0x8c>)
 8008932:	601c      	str	r4, [r3, #0]
 8008934:	4b18      	ldr	r3, [pc, #96]	; (8008998 <_OnExit+0x90>)
 8008936:	601c      	str	r4, [r3, #0]
 8008938:	4b18      	ldr	r3, [pc, #96]	; (800899c <_OnExit+0x94>)
 800893a:	4621      	mov	r1, r4
 800893c:	601c      	str	r4, [r3, #0]
 800893e:	2218      	movs	r2, #24
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	4798      	blx	r3
 8008944:	4b16      	ldr	r3, [pc, #88]	; (80089a0 <_OnExit+0x98>)
 8008946:	4817      	ldr	r0, [pc, #92]	; (80089a4 <_OnExit+0x9c>)
 8008948:	601c      	str	r4, [r3, #0]
 800894a:	4b17      	ldr	r3, [pc, #92]	; (80089a8 <_OnExit+0xa0>)
 800894c:	4621      	mov	r1, r4
 800894e:	601c      	str	r4, [r3, #0]
 8008950:	605c      	str	r4, [r3, #4]
 8008952:	2210      	movs	r2, #16
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	4798      	blx	r3
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	4814      	ldr	r0, [pc, #80]	; (80089ac <_OnExit+0xa4>)
 800895c:	4621      	mov	r1, r4
 800895e:	2210      	movs	r2, #16
 8008960:	4798      	blx	r3
 8008962:	682b      	ldr	r3, [r5, #0]
 8008964:	4812      	ldr	r0, [pc, #72]	; (80089b0 <_OnExit+0xa8>)
 8008966:	4621      	mov	r1, r4
 8008968:	2210      	movs	r2, #16
 800896a:	4798      	blx	r3
 800896c:	bd38      	pop	{r3, r4, r5, pc}
 800896e:	bf00      	nop
 8008970:	20002a10 	.word	0x20002a10
 8008974:	20000070 	.word	0x20000070
 8008978:	200076a0 	.word	0x200076a0
 800897c:	200029f4 	.word	0x200029f4
 8008980:	200029f0 	.word	0x200029f0
 8008984:	200076cc 	.word	0x200076cc
 8008988:	200076d4 	.word	0x200076d4
 800898c:	200076e0 	.word	0x200076e0
 8008990:	2000768c 	.word	0x2000768c
 8008994:	200076c0 	.word	0x200076c0
 8008998:	200076d0 	.word	0x200076d0
 800899c:	20002a0c 	.word	0x20002a0c
 80089a0:	2000769c 	.word	0x2000769c
 80089a4:	20007828 	.word	0x20007828
 80089a8:	20007690 	.word	0x20007690
 80089ac:	20007818 	.word	0x20007818
 80089b0:	20007808 	.word	0x20007808

080089b4 <_Paint1>:
 80089b4:	b510      	push	{r4, lr}
 80089b6:	4604      	mov	r4, r0
 80089b8:	f006 fa5c 	bl	800ee74 <GUI_ALLOC_h2p>
 80089bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80089be:	4a04      	ldr	r2, [pc, #16]	; (80089d0 <_Paint1+0x1c>)
 80089c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80089c4:	4b03      	ldr	r3, [pc, #12]	; (80089d4 <_Paint1+0x20>)
 80089c6:	4620      	mov	r0, r4
 80089c8:	bf08      	it	eq
 80089ca:	4613      	moveq	r3, r2
 80089cc:	4798      	blx	r3
 80089ce:	bd10      	pop	{r4, pc}
 80089d0:	080098c1 	.word	0x080098c1
 80089d4:	08009e31 	.word	0x08009e31

080089d8 <_Findy1>:
 80089d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089da:	4605      	mov	r5, r0
 80089dc:	b085      	sub	sp, #20
 80089de:	460c      	mov	r4, r1
 80089e0:	4616      	mov	r6, r2
 80089e2:	2d00      	cmp	r5, #0
 80089e4:	d04c      	beq.n	8008a80 <_Findy1+0xa8>
 80089e6:	4628      	mov	r0, r5
 80089e8:	f006 fa4e 	bl	800ee88 <GUI_ALLOC_LockH>
 80089ec:	6a87      	ldr	r7, [r0, #40]	; 0x28
 80089ee:	9001      	str	r0, [sp, #4]
 80089f0:	07bb      	lsls	r3, r7, #30
 80089f2:	4601      	mov	r1, r0
 80089f4:	d53d      	bpl.n	8008a72 <_Findy1+0x9a>
 80089f6:	ad02      	add	r5, sp, #8
 80089f8:	b126      	cbz	r6, 8008a04 <_Findy1+0x2c>
 80089fa:	4628      	mov	r0, r5
 80089fc:	4632      	mov	r2, r6
 80089fe:	f003 ff3f 	bl	800c880 <GUI__IntersectRects>
 8008a02:	e002      	b.n	8008a0a <_Findy1+0x32>
 8008a04:	c803      	ldmia	r0, {r0, r1}
 8008a06:	e885 0003 	stmia.w	r5, {r0, r1}
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	f004 ffa9 	bl	800d964 <GUI_RectsIntersect>
 8008a12:	b370      	cbz	r0, 8008a72 <_Findy1+0x9a>
 8008a14:	f017 0f01 	tst.w	r7, #1
 8008a18:	9b01      	ldr	r3, [sp, #4]
 8008a1a:	d11e      	bne.n	8008a5a <_Findy1+0x82>
 8008a1c:	b13e      	cbz	r6, 8008a2e <_Findy1+0x56>
 8008a1e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008a22:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	bfa8      	it	ge
 8008a2a:	4613      	movge	r3, r2
 8008a2c:	e001      	b.n	8008a32 <_Findy1+0x5a>
 8008a2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008a32:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8008a36:	4293      	cmp	r3, r2
 8008a38:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8008a3c:	dd06      	ble.n	8008a4c <_Findy1+0x74>
 8008a3e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8008a42:	b219      	sxth	r1, r3
 8008a44:	428a      	cmp	r2, r1
 8008a46:	db14      	blt.n	8008a72 <_Findy1+0x9a>
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	e004      	b.n	8008a56 <_Findy1+0x7e>
 8008a4c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8008a50:	b219      	sxth	r1, r3
 8008a52:	428a      	cmp	r2, r1
 8008a54:	dd0d      	ble.n	8008a72 <_Findy1+0x9a>
 8008a56:	80e3      	strh	r3, [r4, #6]
 8008a58:	e00b      	b.n	8008a72 <_Findy1+0x9a>
 8008a5a:	69df      	ldr	r7, [r3, #28]
 8008a5c:	b14f      	cbz	r7, 8008a72 <_Findy1+0x9a>
 8008a5e:	4638      	mov	r0, r7
 8008a60:	4621      	mov	r1, r4
 8008a62:	462a      	mov	r2, r5
 8008a64:	f7ff ffb8 	bl	80089d8 <_Findy1>
 8008a68:	4638      	mov	r0, r7
 8008a6a:	f006 fa03 	bl	800ee74 <GUI_ALLOC_h2p>
 8008a6e:	6a07      	ldr	r7, [r0, #32]
 8008a70:	e7f4      	b.n	8008a5c <_Findy1+0x84>
 8008a72:	a804      	add	r0, sp, #16
 8008a74:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8008a78:	6a1d      	ldr	r5, [r3, #32]
 8008a7a:	f006 fa13 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008a7e:	e7b0      	b.n	80089e2 <_Findy1+0xa>
 8008a80:	b005      	add	sp, #20
 8008a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a84 <_Findx0>:
 8008a84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008a88:	4604      	mov	r4, r0
 8008a8a:	460f      	mov	r7, r1
 8008a8c:	4690      	mov	r8, r2
 8008a8e:	2500      	movs	r5, #0
 8008a90:	2c00      	cmp	r4, #0
 8008a92:	d037      	beq.n	8008b04 <_Findx0+0x80>
 8008a94:	4620      	mov	r0, r4
 8008a96:	f006 f9f7 	bl	800ee88 <GUI_ALLOC_LockH>
 8008a9a:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008a9c:	9001      	str	r0, [sp, #4]
 8008a9e:	07b2      	lsls	r2, r6, #30
 8008aa0:	4601      	mov	r1, r0
 8008aa2:	d528      	bpl.n	8008af6 <_Findx0+0x72>
 8008aa4:	ac02      	add	r4, sp, #8
 8008aa6:	f1b8 0f00 	cmp.w	r8, #0
 8008aaa:	d004      	beq.n	8008ab6 <_Findx0+0x32>
 8008aac:	4620      	mov	r0, r4
 8008aae:	4642      	mov	r2, r8
 8008ab0:	f003 fee6 	bl	800c880 <GUI__IntersectRects>
 8008ab4:	e002      	b.n	8008abc <_Findx0+0x38>
 8008ab6:	c803      	ldmia	r0, {r0, r1}
 8008ab8:	e884 0003 	stmia.w	r4, {r0, r1}
 8008abc:	4638      	mov	r0, r7
 8008abe:	4621      	mov	r1, r4
 8008ac0:	f004 ff50 	bl	800d964 <GUI_RectsIntersect>
 8008ac4:	b1b8      	cbz	r0, 8008af6 <_Findx0+0x72>
 8008ac6:	07f3      	lsls	r3, r6, #31
 8008ac8:	d405      	bmi.n	8008ad6 <_Findx0+0x52>
 8008aca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	803b      	strh	r3, [r7, #0]
 8008ad2:	2501      	movs	r5, #1
 8008ad4:	e00f      	b.n	8008af6 <_Findx0+0x72>
 8008ad6:	9b01      	ldr	r3, [sp, #4]
 8008ad8:	69de      	ldr	r6, [r3, #28]
 8008ada:	b166      	cbz	r6, 8008af6 <_Findx0+0x72>
 8008adc:	4630      	mov	r0, r6
 8008ade:	4639      	mov	r1, r7
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	f7ff ffcf 	bl	8008a84 <_Findx0>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	4630      	mov	r0, r6
 8008aea:	bf18      	it	ne
 8008aec:	2501      	movne	r5, #1
 8008aee:	f006 f9c1 	bl	800ee74 <GUI_ALLOC_h2p>
 8008af2:	6a06      	ldr	r6, [r0, #32]
 8008af4:	e7f1      	b.n	8008ada <_Findx0+0x56>
 8008af6:	a804      	add	r0, sp, #16
 8008af8:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8008afc:	6a1c      	ldr	r4, [r3, #32]
 8008afe:	f006 f9d1 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008b02:	e7c5      	b.n	8008a90 <_Findx0+0xc>
 8008b04:	4628      	mov	r0, r5
 8008b06:	b004      	add	sp, #16
 8008b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008b0c <_Findx1>:
 8008b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b0e:	4604      	mov	r4, r0
 8008b10:	b085      	sub	sp, #20
 8008b12:	460e      	mov	r6, r1
 8008b14:	4617      	mov	r7, r2
 8008b16:	2c00      	cmp	r4, #0
 8008b18:	d031      	beq.n	8008b7e <_Findx1+0x72>
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f006 f9b4 	bl	800ee88 <GUI_ALLOC_LockH>
 8008b20:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8008b22:	9001      	str	r0, [sp, #4]
 8008b24:	07aa      	lsls	r2, r5, #30
 8008b26:	4601      	mov	r1, r0
 8008b28:	d522      	bpl.n	8008b70 <_Findx1+0x64>
 8008b2a:	ac02      	add	r4, sp, #8
 8008b2c:	b127      	cbz	r7, 8008b38 <_Findx1+0x2c>
 8008b2e:	4620      	mov	r0, r4
 8008b30:	463a      	mov	r2, r7
 8008b32:	f003 fea5 	bl	800c880 <GUI__IntersectRects>
 8008b36:	e002      	b.n	8008b3e <_Findx1+0x32>
 8008b38:	c803      	ldmia	r0, {r0, r1}
 8008b3a:	e884 0003 	stmia.w	r4, {r0, r1}
 8008b3e:	4630      	mov	r0, r6
 8008b40:	4621      	mov	r1, r4
 8008b42:	f004 ff0f 	bl	800d964 <GUI_RectsIntersect>
 8008b46:	b198      	cbz	r0, 8008b70 <_Findx1+0x64>
 8008b48:	07eb      	lsls	r3, r5, #31
 8008b4a:	d404      	bmi.n	8008b56 <_Findx1+0x4a>
 8008b4c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8008b50:	3b01      	subs	r3, #1
 8008b52:	80b3      	strh	r3, [r6, #4]
 8008b54:	e00c      	b.n	8008b70 <_Findx1+0x64>
 8008b56:	9b01      	ldr	r3, [sp, #4]
 8008b58:	69dd      	ldr	r5, [r3, #28]
 8008b5a:	b14d      	cbz	r5, 8008b70 <_Findx1+0x64>
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	4631      	mov	r1, r6
 8008b60:	4622      	mov	r2, r4
 8008b62:	f7ff ffd3 	bl	8008b0c <_Findx1>
 8008b66:	4628      	mov	r0, r5
 8008b68:	f006 f984 	bl	800ee74 <GUI_ALLOC_h2p>
 8008b6c:	6a05      	ldr	r5, [r0, #32]
 8008b6e:	e7f4      	b.n	8008b5a <_Findx1+0x4e>
 8008b70:	a804      	add	r0, sp, #16
 8008b72:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8008b76:	6a1c      	ldr	r4, [r3, #32]
 8008b78:	f006 f994 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008b7c:	e7cb      	b.n	8008b16 <_Findx1+0xa>
 8008b7e:	b005      	add	sp, #20
 8008b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008b84 <_Paint1Trans>:
 8008b84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008b88:	4d21      	ldr	r5, [pc, #132]	; (8008c10 <_Paint1Trans+0x8c>)
 8008b8a:	682b      	ldr	r3, [r5, #0]
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008b90:	f006 f97a 	bl	800ee88 <GUI_ALLOC_LockH>
 8008b94:	9000      	str	r0, [sp, #0]
 8008b96:	4630      	mov	r0, r6
 8008b98:	f006 f976 	bl	800ee88 <GUI_ALLOC_LockH>
 8008b9c:	ac02      	add	r4, sp, #8
 8008b9e:	4601      	mov	r1, r0
 8008ba0:	9001      	str	r0, [sp, #4]
 8008ba2:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 8008ba6:	3008      	adds	r0, #8
 8008ba8:	f004 fedc 	bl	800d964 <GUI_RectsIntersect>
 8008bac:	4607      	mov	r7, r0
 8008bae:	b328      	cbz	r0, 8008bfc <_Paint1Trans+0x78>
 8008bb0:	9901      	ldr	r1, [sp, #4]
 8008bb2:	9a00      	ldr	r2, [sp, #0]
 8008bb4:	682b      	ldr	r3, [r5, #0]
 8008bb6:	4c17      	ldr	r4, [pc, #92]	; (8008c14 <_Paint1Trans+0x90>)
 8008bb8:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8008bba:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 8008bbe:	f101 0008 	add.w	r0, r1, #8
 8008bc2:	3208      	adds	r2, #8
 8008bc4:	f003 fe5c 	bl	800c880 <GUI__IntersectRects>
 8008bc8:	4668      	mov	r0, sp
 8008bca:	f006 f96b 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008bce:	9a01      	ldr	r2, [sp, #4]
 8008bd0:	682b      	ldr	r3, [r5, #0]
 8008bd2:	f9b2 1000 	ldrsh.w	r1, [r2]
 8008bd6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8008bda:	64d9      	str	r1, [r3, #76]	; 0x4c
 8008bdc:	651a      	str	r2, [r3, #80]	; 0x50
 8008bde:	a801      	add	r0, sp, #4
 8008be0:	6026      	str	r6, [r4, #0]
 8008be2:	f006 f95f 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008be6:	4630      	mov	r0, r6
 8008be8:	f7ff fee4 	bl	80089b4 <_Paint1>
 8008bec:	2300      	movs	r3, #0
 8008bee:	6023      	str	r3, [r4, #0]
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	651f      	str	r7, [r3, #80]	; 0x50
 8008bf4:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 8008bf8:	2701      	movs	r7, #1
 8008bfa:	e005      	b.n	8008c08 <_Paint1Trans+0x84>
 8008bfc:	4668      	mov	r0, sp
 8008bfe:	f006 f951 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008c02:	a801      	add	r0, sp, #4
 8008c04:	f006 f94e 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008c08:	4638      	mov	r0, r7
 8008c0a:	b002      	add	sp, #8
 8008c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c10:	20000084 	.word	0x20000084
 8008c14:	2000768c 	.word	0x2000768c

08008c18 <_PaintTransChildren>:
 8008c18:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c1c:	4606      	mov	r6, r0
 8008c1e:	f006 f933 	bl	800ee88 <GUI_ALLOC_LockH>
 8008c22:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008c24:	9001      	str	r0, [sp, #4]
 8008c26:	079b      	lsls	r3, r3, #30
 8008c28:	d405      	bmi.n	8008c36 <_PaintTransChildren+0x1e>
 8008c2a:	a801      	add	r0, sp, #4
 8008c2c:	f006 f93a 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008c30:	b002      	add	sp, #8
 8008c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c36:	69c4      	ldr	r4, [r0, #28]
 8008c38:	2c00      	cmp	r4, #0
 8008c3a:	d0f6      	beq.n	8008c2a <_PaintTransChildren+0x12>
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f006 f923 	bl	800ee88 <GUI_ALLOC_LockH>
 8008c42:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008c44:	ad02      	add	r5, sp, #8
 8008c46:	f003 0303 	and.w	r3, r3, #3
 8008c4a:	2b03      	cmp	r3, #3
 8008c4c:	f845 0d08 	str.w	r0, [r5, #-8]!
 8008c50:	d137      	bne.n	8008cc2 <_PaintTransChildren+0xaa>
 8008c52:	9901      	ldr	r1, [sp, #4]
 8008c54:	3108      	adds	r1, #8
 8008c56:	f004 fe85 	bl	800d964 <GUI_RectsIntersect>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d031      	beq.n	8008cc2 <_PaintTransChildren+0xaa>
 8008c5e:	a802      	add	r0, sp, #8
 8008c60:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8008c64:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 8008c68:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8008c6c:	899f      	ldrh	r7, [r3, #12]
 8008c6e:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 8008c72:	f006 f917 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008c76:	4668      	mov	r0, sp
 8008c78:	f006 f914 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f7ff ff81 	bl	8008b84 <_Paint1Trans>
 8008c82:	b170      	cbz	r0, 8008ca2 <_PaintTransChildren+0x8a>
 8008c84:	4620      	mov	r0, r4
 8008c86:	f006 f8f5 	bl	800ee74 <GUI_ALLOC_h2p>
 8008c8a:	9000      	str	r0, [sp, #0]
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f7ff ffc3 	bl	8008c18 <_PaintTransChildren>
 8008c92:	4620      	mov	r0, r4
 8008c94:	f006 f8ee 	bl	800ee74 <GUI_ALLOC_h2p>
 8008c98:	9000      	str	r0, [sp, #0]
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f006 f8ea 	bl	800ee74 <GUI_ALLOC_h2p>
 8008ca0:	9001      	str	r0, [sp, #4]
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f006 f8f0 	bl	800ee88 <GUI_ALLOC_LockH>
 8008ca8:	9001      	str	r0, [sp, #4]
 8008caa:	4620      	mov	r0, r4
 8008cac:	f006 f8ec 	bl	800ee88 <GUI_ALLOC_LockH>
 8008cb0:	9b01      	ldr	r3, [sp, #4]
 8008cb2:	9000      	str	r0, [sp, #0]
 8008cb4:	f8a3 9008 	strh.w	r9, [r3, #8]
 8008cb8:	f8a3 800a 	strh.w	r8, [r3, #10]
 8008cbc:	819f      	strh	r7, [r3, #12]
 8008cbe:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8008cc2:	9b00      	ldr	r3, [sp, #0]
 8008cc4:	4668      	mov	r0, sp
 8008cc6:	6a1c      	ldr	r4, [r3, #32]
 8008cc8:	f006 f8ec 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008ccc:	e7b4      	b.n	8008c38 <_PaintTransChildren+0x20>
	...

08008cd0 <WM__PaintWinAndOverlays>:
 8008cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	f006 f8d8 	bl	800ee88 <GUI_ALLOC_LockH>
 8008cd8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008cda:	9001      	str	r0, [sp, #4]
 8008cdc:	f640 0301 	movw	r3, #2049	; 0x801
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d005      	beq.n	8008cf2 <WM__PaintWinAndOverlays+0x22>
 8008ce6:	a801      	add	r0, sp, #4
 8008ce8:	f006 f8dc 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008cec:	4620      	mov	r0, r4
 8008cee:	f7ff fe61 	bl	80089b4 <_Paint1>
 8008cf2:	4b14      	ldr	r3, [pc, #80]	; (8008d44 <WM__PaintWinAndOverlays+0x74>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	b313      	cbz	r3, 8008d3e <WM__PaintWinAndOverlays+0x6e>
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f7ff ff8d 	bl	8008c18 <_PaintTransChildren>
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f006 f8b8 	bl	800ee74 <GUI_ALLOC_h2p>
 8008d04:	6985      	ldr	r5, [r0, #24]
 8008d06:	6a04      	ldr	r4, [r0, #32]
 8008d08:	b1cd      	cbz	r5, 8008d3e <WM__PaintWinAndOverlays+0x6e>
 8008d0a:	b194      	cbz	r4, 8008d32 <WM__PaintWinAndOverlays+0x62>
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f006 f8b1 	bl	800ee74 <GUI_ALLOC_h2p>
 8008d12:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008d14:	f003 0303 	and.w	r3, r3, #3
 8008d18:	2b03      	cmp	r3, #3
 8008d1a:	d102      	bne.n	8008d22 <WM__PaintWinAndOverlays+0x52>
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f7ff ff31 	bl	8008b84 <_Paint1Trans>
 8008d22:	4620      	mov	r0, r4
 8008d24:	f7ff ff78 	bl	8008c18 <_PaintTransChildren>
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f006 f8a3 	bl	800ee74 <GUI_ALLOC_h2p>
 8008d2e:	6a04      	ldr	r4, [r0, #32]
 8008d30:	e7eb      	b.n	8008d0a <WM__PaintWinAndOverlays+0x3a>
 8008d32:	4628      	mov	r0, r5
 8008d34:	f006 f89e 	bl	800ee74 <GUI_ALLOC_h2p>
 8008d38:	6a04      	ldr	r4, [r0, #32]
 8008d3a:	6985      	ldr	r5, [r0, #24]
 8008d3c:	e7e4      	b.n	8008d08 <WM__PaintWinAndOverlays+0x38>
 8008d3e:	b003      	add	sp, #12
 8008d40:	bd30      	pop	{r4, r5, pc}
 8008d42:	bf00      	nop
 8008d44:	200076e0 	.word	0x200076e0

08008d48 <_cbPaintMemDev>:
 8008d48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d4c:	4d17      	ldr	r5, [pc, #92]	; (8008dac <_cbPaintMemDev+0x64>)
 8008d4e:	682b      	ldr	r3, [r5, #0]
 8008d50:	4606      	mov	r6, r0
 8008d52:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008d54:	f006 f898 	bl	800ee88 <GUI_ALLOC_LockH>
 8008d58:	682a      	ldr	r2, [r5, #0]
 8008d5a:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 8008d5e:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 8008d62:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 8008d66:	89c7      	ldrh	r7, [r0, #14]
 8008d68:	ac02      	add	r4, sp, #8
 8008d6a:	3208      	adds	r2, #8
 8008d6c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008d70:	f100 0308 	add.w	r3, r0, #8
 8008d74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d78:	e883 0003 	stmia.w	r3, {r0, r1}
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f006 f891 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008d82:	6830      	ldr	r0, [r6, #0]
 8008d84:	f7ff ffa4 	bl	8008cd0 <WM__PaintWinAndOverlays>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008d8c:	f006 f87c 	bl	800ee88 <GUI_ALLOC_LockH>
 8008d90:	9001      	str	r0, [sp, #4]
 8008d92:	f8a0 a008 	strh.w	sl, [r0, #8]
 8008d96:	f8a0 900a 	strh.w	r9, [r0, #10]
 8008d9a:	f8a0 800c 	strh.w	r8, [r0, #12]
 8008d9e:	81c7      	strh	r7, [r0, #14]
 8008da0:	4620      	mov	r0, r4
 8008da2:	f006 f87f 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008da6:	b002      	add	sp, #8
 8008da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dac:	20000084 	.word	0x20000084

08008db0 <WM__ClipAtParentBorders>:
 8008db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008db2:	4607      	mov	r7, r0
 8008db4:	460d      	mov	r5, r1
 8008db6:	4628      	mov	r0, r5
 8008db8:	f006 f866 	bl	800ee88 <GUI_ALLOC_LockH>
 8008dbc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008dbe:	ac02      	add	r4, sp, #8
 8008dc0:	f013 0602 	ands.w	r6, r3, #2
 8008dc4:	4601      	mov	r1, r0
 8008dc6:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008dca:	d104      	bne.n	8008dd6 <WM__ClipAtParentBorders+0x26>
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f006 f869 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	e016      	b.n	8008e04 <WM__ClipAtParentBorders+0x54>
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	f003 fd34 	bl	800c844 <GUI__IntersectRect>
 8008ddc:	9b01      	ldr	r3, [sp, #4]
 8008dde:	699e      	ldr	r6, [r3, #24]
 8008de0:	4620      	mov	r0, r4
 8008de2:	b956      	cbnz	r6, 8008dfa <WM__ClipAtParentBorders+0x4a>
 8008de4:	f006 f85e 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008de8:	4b07      	ldr	r3, [pc, #28]	; (8008e08 <WM__ClipAtParentBorders+0x58>)
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	4295      	cmp	r5, r2
 8008dee:	d008      	beq.n	8008e02 <WM__ClipAtParentBorders+0x52>
 8008df0:	6858      	ldr	r0, [r3, #4]
 8008df2:	1a2b      	subs	r3, r5, r0
 8008df4:	4258      	negs	r0, r3
 8008df6:	4158      	adcs	r0, r3
 8008df8:	e004      	b.n	8008e04 <WM__ClipAtParentBorders+0x54>
 8008dfa:	f006 f853 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008dfe:	4635      	mov	r5, r6
 8008e00:	e7d9      	b.n	8008db6 <WM__ClipAtParentBorders+0x6>
 8008e02:	2001      	movs	r0, #1
 8008e04:	b003      	add	sp, #12
 8008e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e08:	20007690 	.word	0x20007690

08008e0c <WM__InsertWindowIntoList>:
 8008e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e0e:	4604      	mov	r4, r0
 8008e10:	b085      	sub	sp, #20
 8008e12:	460d      	mov	r5, r1
 8008e14:	2900      	cmp	r1, #0
 8008e16:	d049      	beq.n	8008eac <WM__InsertWindowIntoList+0xa0>
 8008e18:	f006 f836 	bl	800ee88 <GUI_ALLOC_LockH>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	6203      	str	r3, [r0, #32]
 8008e20:	6185      	str	r5, [r0, #24]
 8008e22:	9001      	str	r0, [sp, #4]
 8008e24:	4628      	mov	r0, r5
 8008e26:	f006 f82f 	bl	800ee88 <GUI_ALLOC_LockH>
 8008e2a:	9b01      	ldr	r3, [sp, #4]
 8008e2c:	69c5      	ldr	r5, [r0, #28]
 8008e2e:	9002      	str	r0, [sp, #8]
 8008e30:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8008e32:	b92d      	cbnz	r5, 8008e40 <WM__InsertWindowIntoList+0x34>
 8008e34:	61c4      	str	r4, [r0, #28]
 8008e36:	a801      	add	r0, sp, #4
 8008e38:	f006 f834 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008e3c:	a802      	add	r0, sp, #8
 8008e3e:	e033      	b.n	8008ea8 <WM__InsertWindowIntoList+0x9c>
 8008e40:	4628      	mov	r0, r5
 8008e42:	f006 f821 	bl	800ee88 <GUI_ALLOC_LockH>
 8008e46:	ae04      	add	r6, sp, #16
 8008e48:	f007 0708 	and.w	r7, r7, #8
 8008e4c:	f846 0d04 	str.w	r0, [r6, #-4]!
 8008e50:	b977      	cbnz	r7, 8008e70 <WM__InsertWindowIntoList+0x64>
 8008e52:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008e54:	071a      	lsls	r2, r3, #28
 8008e56:	d50b      	bpl.n	8008e70 <WM__InsertWindowIntoList+0x64>
 8008e58:	9b01      	ldr	r3, [sp, #4]
 8008e5a:	621d      	str	r5, [r3, #32]
 8008e5c:	9b02      	ldr	r3, [sp, #8]
 8008e5e:	a801      	add	r0, sp, #4
 8008e60:	61dc      	str	r4, [r3, #28]
 8008e62:	f006 f81f 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008e66:	a802      	add	r0, sp, #8
 8008e68:	f006 f81c 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	e01b      	b.n	8008ea8 <WM__InsertWindowIntoList+0x9c>
 8008e70:	a802      	add	r0, sp, #8
 8008e72:	f006 f817 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008e76:	4630      	mov	r0, r6
 8008e78:	f006 f814 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f005 fff9 	bl	800ee74 <GUI_ALLOC_h2p>
 8008e82:	9003      	str	r0, [sp, #12]
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	6a1d      	ldr	r5, [r3, #32]
 8008e88:	b90d      	cbnz	r5, 8008e8e <WM__InsertWindowIntoList+0x82>
 8008e8a:	621c      	str	r4, [r3, #32]
 8008e8c:	e00b      	b.n	8008ea6 <WM__InsertWindowIntoList+0x9a>
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f005 fff0 	bl	800ee74 <GUI_ALLOC_h2p>
 8008e94:	2f00      	cmp	r7, #0
 8008e96:	d1f4      	bne.n	8008e82 <WM__InsertWindowIntoList+0x76>
 8008e98:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008e9a:	071b      	lsls	r3, r3, #28
 8008e9c:	d5f1      	bpl.n	8008e82 <WM__InsertWindowIntoList+0x76>
 8008e9e:	9b03      	ldr	r3, [sp, #12]
 8008ea0:	621c      	str	r4, [r3, #32]
 8008ea2:	9b01      	ldr	r3, [sp, #4]
 8008ea4:	621d      	str	r5, [r3, #32]
 8008ea6:	a801      	add	r0, sp, #4
 8008ea8:	f005 fffc 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008eac:	b005      	add	sp, #20
 8008eae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008eb0 <WM__RemoveWindowFromList>:
 8008eb0:	b570      	push	{r4, r5, r6, lr}
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	f005 ffde 	bl	800ee74 <GUI_ALLOC_h2p>
 8008eb8:	4605      	mov	r5, r0
 8008eba:	6980      	ldr	r0, [r0, #24]
 8008ebc:	b1a8      	cbz	r0, 8008eea <WM__RemoveWindowFromList+0x3a>
 8008ebe:	f005 ffd9 	bl	800ee74 <GUI_ALLOC_h2p>
 8008ec2:	69c3      	ldr	r3, [r0, #28]
 8008ec4:	42a3      	cmp	r3, r4
 8008ec6:	4606      	mov	r6, r0
 8008ec8:	d105      	bne.n	8008ed6 <WM__RemoveWindowFromList+0x26>
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f005 ffd2 	bl	800ee74 <GUI_ALLOC_h2p>
 8008ed0:	6a03      	ldr	r3, [r0, #32]
 8008ed2:	61f3      	str	r3, [r6, #28]
 8008ed4:	bd70      	pop	{r4, r5, r6, pc}
 8008ed6:	b143      	cbz	r3, 8008eea <WM__RemoveWindowFromList+0x3a>
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f005 ffcb 	bl	800ee74 <GUI_ALLOC_h2p>
 8008ede:	6a03      	ldr	r3, [r0, #32]
 8008ee0:	42a3      	cmp	r3, r4
 8008ee2:	d1f8      	bne.n	8008ed6 <WM__RemoveWindowFromList+0x26>
 8008ee4:	6a2b      	ldr	r3, [r5, #32]
 8008ee6:	6203      	str	r3, [r0, #32]
 8008ee8:	bd70      	pop	{r4, r5, r6, pc}
 8008eea:	bd70      	pop	{r4, r5, r6, pc}

08008eec <WM__Client2Screen>:
 8008eec:	4603      	mov	r3, r0
 8008eee:	4608      	mov	r0, r1
 8008ef0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008ef4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008ef8:	f004 bce9 	b.w	800d8ce <GUI_MoveRect>

08008efc <_SetClipRectUserIntersect>:
 8008efc:	4b11      	ldr	r3, [pc, #68]	; (8008f44 <_SetClipRectUserIntersect+0x48>)
 8008efe:	b530      	push	{r4, r5, lr}
 8008f00:	681c      	ldr	r4, [r3, #0]
 8008f02:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008f04:	b085      	sub	sp, #20
 8008f06:	4605      	mov	r5, r0
 8008f08:	b1ba      	cbz	r2, 8008f3a <_SetClipRectUserIntersect+0x3e>
 8008f0a:	6810      	ldr	r0, [r2, #0]
 8008f0c:	6851      	ldr	r1, [r2, #4]
 8008f0e:	ab02      	add	r3, sp, #8
 8008f10:	c303      	stmia	r3!, {r0, r1}
 8008f12:	4b0d      	ldr	r3, [pc, #52]	; (8008f48 <_SetClipRectUserIntersect+0x4c>)
 8008f14:	6818      	ldr	r0, [r3, #0]
 8008f16:	b900      	cbnz	r0, 8008f1a <_SetClipRectUserIntersect+0x1e>
 8008f18:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008f1a:	f005 ffb5 	bl	800ee88 <GUI_ALLOC_LockH>
 8008f1e:	ac04      	add	r4, sp, #16
 8008f20:	a902      	add	r1, sp, #8
 8008f22:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8008f26:	f7ff ffe1 	bl	8008eec <WM__Client2Screen>
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f005 ffba 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008f30:	a802      	add	r0, sp, #8
 8008f32:	4629      	mov	r1, r5
 8008f34:	f003 fc86 	bl	800c844 <GUI__IntersectRect>
 8008f38:	a802      	add	r0, sp, #8
 8008f3a:	f002 ffa3 	bl	800be84 <LCD_SetClipRectEx>
 8008f3e:	b005      	add	sp, #20
 8008f40:	bd30      	pop	{r4, r5, pc}
 8008f42:	bf00      	nop
 8008f44:	20000084 	.word	0x20000084
 8008f48:	2000768c 	.word	0x2000768c

08008f4c <WM__ActivateClipRect>:
 8008f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f4e:	4b0e      	ldr	r3, [pc, #56]	; (8008f88 <WM__ActivateClipRect+0x3c>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8008f56:	b10a      	cbz	r2, 8008f5c <WM__ActivateClipRect+0x10>
 8008f58:	480c      	ldr	r0, [pc, #48]	; (8008f8c <WM__ActivateClipRect+0x40>)
 8008f5a:	e011      	b.n	8008f80 <WM__ActivateClipRect+0x34>
 8008f5c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008f5e:	f005 ff93 	bl	800ee88 <GUI_ALLOC_LockH>
 8008f62:	9001      	str	r0, [sp, #4]
 8008f64:	c803      	ldmia	r0, {r0, r1}
 8008f66:	ac02      	add	r4, sp, #8
 8008f68:	e884 0003 	stmia.w	r4, {r0, r1}
 8008f6c:	a801      	add	r0, sp, #4
 8008f6e:	f005 ff99 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008f72:	4b07      	ldr	r3, [pc, #28]	; (8008f90 <WM__ActivateClipRect+0x44>)
 8008f74:	6819      	ldr	r1, [r3, #0]
 8008f76:	b111      	cbz	r1, 8008f7e <WM__ActivateClipRect+0x32>
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f7ff ff19 	bl	8008db0 <WM__ClipAtParentBorders>
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f7ff ffbc 	bl	8008efc <_SetClipRectUserIntersect>
 8008f84:	b004      	add	sp, #16
 8008f86:	bd10      	pop	{r4, pc}
 8008f88:	20000084 	.word	0x20000084
 8008f8c:	200029fc 	.word	0x200029fc
 8008f90:	2000768c 	.word	0x2000768c

08008f94 <WM__IsWindow>:
 8008f94:	4b06      	ldr	r3, [pc, #24]	; (8008fb0 <WM__IsWindow+0x1c>)
 8008f96:	b510      	push	{r4, lr}
 8008f98:	4604      	mov	r4, r0
 8008f9a:	6818      	ldr	r0, [r3, #0]
 8008f9c:	b128      	cbz	r0, 8008faa <WM__IsWindow+0x16>
 8008f9e:	42a0      	cmp	r0, r4
 8008fa0:	d004      	beq.n	8008fac <WM__IsWindow+0x18>
 8008fa2:	f005 ff67 	bl	800ee74 <GUI_ALLOC_h2p>
 8008fa6:	6940      	ldr	r0, [r0, #20]
 8008fa8:	e7f8      	b.n	8008f9c <WM__IsWindow+0x8>
 8008faa:	bd10      	pop	{r4, pc}
 8008fac:	2001      	movs	r0, #1
 8008fae:	bd10      	pop	{r4, pc}
 8008fb0:	200076ac 	.word	0x200076ac

08008fb4 <WM__InvalidateDrawAndDescs>:
 8008fb4:	b513      	push	{r0, r1, r4, lr}
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	b300      	cbz	r0, 8008ffc <WM__InvalidateDrawAndDescs+0x48>
 8008fba:	f005 ff65 	bl	800ee88 <GUI_ALLOC_LockH>
 8008fbe:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008fc0:	9001      	str	r0, [sp, #4]
 8008fc2:	0793      	lsls	r3, r2, #30
 8008fc4:	d517      	bpl.n	8008ff6 <WM__InvalidateDrawAndDescs+0x42>
 8008fc6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008fc8:	b140      	cbz	r0, 8008fdc <WM__InvalidateDrawAndDescs+0x28>
 8008fca:	4b0d      	ldr	r3, [pc, #52]	; (8009000 <WM__InvalidateDrawAndDescs+0x4c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	42a3      	cmp	r3, r4
 8008fd0:	d004      	beq.n	8008fdc <WM__InvalidateDrawAndDescs+0x28>
 8008fd2:	f001 fdf9 	bl	800abc8 <GUI_MEMDEV_Delete>
 8008fd6:	9b01      	ldr	r3, [sp, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	625a      	str	r2, [r3, #36]	; 0x24
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f7ff f9ab 	bl	8008338 <WM_GetFirstChild>
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	b13c      	cbz	r4, 8008ff6 <WM__InvalidateDrawAndDescs+0x42>
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f7ff ffe4 	bl	8008fb4 <WM__InvalidateDrawAndDescs>
 8008fec:	4620      	mov	r0, r4
 8008fee:	f005 ff41 	bl	800ee74 <GUI_ALLOC_h2p>
 8008ff2:	6a04      	ldr	r4, [r0, #32]
 8008ff4:	e7f6      	b.n	8008fe4 <WM__InvalidateDrawAndDescs+0x30>
 8008ff6:	a801      	add	r0, sp, #4
 8008ff8:	f005 ff54 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8008ffc:	b002      	add	sp, #8
 8008ffe:	bd10      	pop	{r4, pc}
 8009000:	200076dc 	.word	0x200076dc

08009004 <WM__RectIsNZ>:
 8009004:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009008:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800900c:	429a      	cmp	r2, r3
 800900e:	dc08      	bgt.n	8009022 <WM__RectIsNZ+0x1e>
 8009010:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009014:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8009018:	429a      	cmp	r2, r3
 800901a:	bfcc      	ite	gt
 800901c:	2000      	movgt	r0, #0
 800901e:	2001      	movle	r0, #1
 8009020:	4770      	bx	lr
 8009022:	2000      	movs	r0, #0
 8009024:	4770      	bx	lr

08009026 <WM_SendMessage>:
 8009026:	b108      	cbz	r0, 800902c <WM_SendMessage+0x6>
 8009028:	f7fe bee6 	b.w	8007df8 <WM__SendMessage>
 800902c:	4770      	bx	lr

0800902e <WM__SendMsgNoData>:
 800902e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009030:	ab04      	add	r3, sp, #16
 8009032:	9001      	str	r0, [sp, #4]
 8009034:	f843 1d10 	str.w	r1, [r3, #-16]!
 8009038:	4669      	mov	r1, sp
 800903a:	f7fe fedd 	bl	8007df8 <WM__SendMessage>
 800903e:	b005      	add	sp, #20
 8009040:	f85d fb04 	ldr.w	pc, [sp], #4

08009044 <WM__GetClientRectWin>:
 8009044:	2300      	movs	r3, #0
 8009046:	800b      	strh	r3, [r1, #0]
 8009048:	8882      	ldrh	r2, [r0, #4]
 800904a:	804b      	strh	r3, [r1, #2]
 800904c:	8803      	ldrh	r3, [r0, #0]
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	808b      	strh	r3, [r1, #4]
 8009052:	88c2      	ldrh	r2, [r0, #6]
 8009054:	8843      	ldrh	r3, [r0, #2]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	80cb      	strh	r3, [r1, #6]
 800905a:	4770      	bx	lr

0800905c <WM__GetTopLevelLayer>:
 800905c:	b510      	push	{r4, lr}
 800905e:	4604      	mov	r4, r0
 8009060:	f005 ff08 	bl	800ee74 <GUI_ALLOC_h2p>
 8009064:	6980      	ldr	r0, [r0, #24]
 8009066:	2800      	cmp	r0, #0
 8009068:	d1f9      	bne.n	800905e <WM__GetTopLevelLayer+0x2>
 800906a:	4b05      	ldr	r3, [pc, #20]	; (8009080 <WM__GetTopLevelLayer+0x24>)
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	4294      	cmp	r4, r2
 8009070:	d005      	beq.n	800907e <WM__GetTopLevelLayer+0x22>
 8009072:	6858      	ldr	r0, [r3, #4]
 8009074:	4284      	cmp	r4, r0
 8009076:	bf14      	ite	ne
 8009078:	f04f 30ff 	movne.w	r0, #4294967295
 800907c:	2001      	moveq	r0, #1
 800907e:	bd10      	pop	{r4, pc}
 8009080:	20007690 	.word	0x20007690

08009084 <_Invalidate1Abs>:
 8009084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009086:	b085      	sub	sp, #20
 8009088:	4606      	mov	r6, r0
 800908a:	460d      	mov	r5, r1
 800908c:	4617      	mov	r7, r2
 800908e:	f005 fef1 	bl	800ee74 <GUI_ALLOC_h2p>
 8009092:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8009094:	9001      	str	r0, [sp, #4]
 8009096:	07a3      	lsls	r3, r4, #30
 8009098:	d53e      	bpl.n	8009118 <_Invalidate1Abs+0x94>
 800909a:	4628      	mov	r0, r5
 800909c:	f7ff ffb2 	bl	8009004 <WM__RectIsNZ>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d039      	beq.n	8009118 <_Invalidate1Abs+0x94>
 80090a4:	f640 0301 	movw	r3, #2049	; 0x801
 80090a8:	4023      	ands	r3, r4
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d034      	beq.n	8009118 <_Invalidate1Abs+0x94>
 80090ae:	4630      	mov	r0, r6
 80090b0:	f005 feea 	bl	800ee88 <GUI_ALLOC_LockH>
 80090b4:	ac02      	add	r4, sp, #8
 80090b6:	4602      	mov	r2, r0
 80090b8:	9001      	str	r0, [sp, #4]
 80090ba:	4629      	mov	r1, r5
 80090bc:	4620      	mov	r0, r4
 80090be:	f003 fbdf 	bl	800c880 <GUI__IntersectRects>
 80090c2:	4620      	mov	r0, r4
 80090c4:	f7ff ff9e 	bl	8009004 <WM__RectIsNZ>
 80090c8:	b318      	cbz	r0, 8009112 <_Invalidate1Abs+0x8e>
 80090ca:	9b01      	ldr	r3, [sp, #4]
 80090cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090ce:	f244 0120 	movw	r1, #16416	; 0x4020
 80090d2:	4011      	ands	r1, r2
 80090d4:	f103 0508 	add.w	r5, r3, #8
 80090d8:	b129      	cbz	r1, 80090e6 <_Invalidate1Abs+0x62>
 80090da:	4628      	mov	r0, r5
 80090dc:	4629      	mov	r1, r5
 80090de:	4622      	mov	r2, r4
 80090e0:	f004 fbca 	bl	800d878 <GUI_MergeRect>
 80090e4:	e015      	b.n	8009112 <_Invalidate1Abs+0x8e>
 80090e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80090ea:	4317      	orrs	r7, r2
 80090ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80090f0:	629f      	str	r7, [r3, #40]	; 0x28
 80090f2:	4b0a      	ldr	r3, [pc, #40]	; (800911c <_Invalidate1Abs+0x98>)
 80090f4:	881a      	ldrh	r2, [r3, #0]
 80090f6:	4630      	mov	r0, r6
 80090f8:	3201      	adds	r2, #1
 80090fa:	801a      	strh	r2, [r3, #0]
 80090fc:	f7ff ffae 	bl	800905c <WM__GetTopLevelLayer>
 8009100:	4b07      	ldr	r3, [pc, #28]	; (8009120 <_Invalidate1Abs+0x9c>)
 8009102:	2201      	movs	r2, #1
 8009104:	fa02 f000 	lsl.w	r0, r2, r0
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	4302      	orrs	r2, r0
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	f003 fee7 	bl	800cee0 <GUI_SignalEvent>
 8009112:	a801      	add	r0, sp, #4
 8009114:	f005 fec6 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009118:	b005      	add	sp, #20
 800911a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800911c:	200076a8 	.word	0x200076a8
 8009120:	200076b8 	.word	0x200076b8

08009124 <WM__Invalidate1Abs>:
 8009124:	2220      	movs	r2, #32
 8009126:	f7ff bfad 	b.w	8009084 <_Invalidate1Abs>

0800912a <WM_InvalidateWindowAndDescsEx>:
 800912a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800912c:	460f      	mov	r7, r1
 800912e:	b085      	sub	sp, #20
 8009130:	4615      	mov	r5, r2
 8009132:	4606      	mov	r6, r0
 8009134:	b348      	cbz	r0, 800918a <WM_InvalidateWindowAndDescsEx+0x60>
 8009136:	f005 fea7 	bl	800ee88 <GUI_ALLOC_LockH>
 800913a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800913c:	ac04      	add	r4, sp, #16
 800913e:	079b      	lsls	r3, r3, #30
 8009140:	4602      	mov	r2, r0
 8009142:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8009146:	d403      	bmi.n	8009150 <WM_InvalidateWindowAndDescsEx+0x26>
 8009148:	4620      	mov	r0, r4
 800914a:	f005 feab 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800914e:	e01c      	b.n	800918a <WM_InvalidateWindowAndDescsEx+0x60>
 8009150:	a802      	add	r0, sp, #8
 8009152:	4639      	mov	r1, r7
 8009154:	f003 fb94 	bl	800c880 <GUI__IntersectRects>
 8009158:	2800      	cmp	r0, #0
 800915a:	d0f5      	beq.n	8009148 <WM_InvalidateWindowAndDescsEx+0x1e>
 800915c:	4620      	mov	r0, r4
 800915e:	f005 fea1 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009162:	4630      	mov	r0, r6
 8009164:	a902      	add	r1, sp, #8
 8009166:	462a      	mov	r2, r5
 8009168:	f7ff ff8c 	bl	8009084 <_Invalidate1Abs>
 800916c:	4630      	mov	r0, r6
 800916e:	f7ff f8e3 	bl	8008338 <WM_GetFirstChild>
 8009172:	4604      	mov	r4, r0
 8009174:	b14c      	cbz	r4, 800918a <WM_InvalidateWindowAndDescsEx+0x60>
 8009176:	4620      	mov	r0, r4
 8009178:	a902      	add	r1, sp, #8
 800917a:	462a      	mov	r2, r5
 800917c:	f7ff ffd5 	bl	800912a <WM_InvalidateWindowAndDescsEx>
 8009180:	4620      	mov	r0, r4
 8009182:	f005 fe77 	bl	800ee74 <GUI_ALLOC_h2p>
 8009186:	6a04      	ldr	r4, [r0, #32]
 8009188:	e7f4      	b.n	8009174 <WM_InvalidateWindowAndDescsEx+0x4a>
 800918a:	b005      	add	sp, #20
 800918c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800918e <WM__InvalidateRect>:
 800918e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009192:	4680      	mov	r8, r0
 8009194:	4617      	mov	r7, r2
 8009196:	461d      	mov	r5, r3
 8009198:	460c      	mov	r4, r1
 800919a:	2900      	cmp	r1, #0
 800919c:	d030      	beq.n	8009200 <WM__InvalidateRect+0x72>
 800919e:	4608      	mov	r0, r1
 80091a0:	f005 fe72 	bl	800ee88 <GUI_ALLOC_LockH>
 80091a4:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80091a6:	9001      	str	r0, [sp, #4]
 80091a8:	07b3      	lsls	r3, r6, #30
 80091aa:	4602      	mov	r2, r0
 80091ac:	d525      	bpl.n	80091fa <WM__InvalidateRect+0x6c>
 80091ae:	a802      	add	r0, sp, #8
 80091b0:	4641      	mov	r1, r8
 80091b2:	f003 fb65 	bl	800c880 <GUI__IntersectRects>
 80091b6:	b300      	cbz	r0, 80091fa <WM__InvalidateRect+0x6c>
 80091b8:	f640 0301 	movw	r3, #2049	; 0x801
 80091bc:	4033      	ands	r3, r6
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d107      	bne.n	80091d2 <WM__InvalidateRect+0x44>
 80091c2:	9b01      	ldr	r3, [sp, #4]
 80091c4:	a802      	add	r0, sp, #8
 80091c6:	6999      	ldr	r1, [r3, #24]
 80091c8:	6a1a      	ldr	r2, [r3, #32]
 80091ca:	462b      	mov	r3, r5
 80091cc:	f7ff ffdf 	bl	800918e <WM__InvalidateRect>
 80091d0:	e004      	b.n	80091dc <WM__InvalidateRect+0x4e>
 80091d2:	4620      	mov	r0, r4
 80091d4:	a902      	add	r1, sp, #8
 80091d6:	462a      	mov	r2, r5
 80091d8:	f7ff ff54 	bl	8009084 <_Invalidate1Abs>
 80091dc:	9b01      	ldr	r3, [sp, #4]
 80091de:	69dc      	ldr	r4, [r3, #28]
 80091e0:	b15c      	cbz	r4, 80091fa <WM__InvalidateRect+0x6c>
 80091e2:	42bc      	cmp	r4, r7
 80091e4:	d009      	beq.n	80091fa <WM__InvalidateRect+0x6c>
 80091e6:	4620      	mov	r0, r4
 80091e8:	a902      	add	r1, sp, #8
 80091ea:	462a      	mov	r2, r5
 80091ec:	f7ff ff9d 	bl	800912a <WM_InvalidateWindowAndDescsEx>
 80091f0:	4620      	mov	r0, r4
 80091f2:	f005 fe3f 	bl	800ee74 <GUI_ALLOC_h2p>
 80091f6:	6a04      	ldr	r4, [r0, #32]
 80091f8:	e7f2      	b.n	80091e0 <WM__InvalidateRect+0x52>
 80091fa:	a801      	add	r0, sp, #4
 80091fc:	f005 fe52 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009200:	b004      	add	sp, #16
 8009202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009206 <WM__InvalidateParent>:
 8009206:	b570      	push	{r4, r5, r6, lr}
 8009208:	4605      	mov	r5, r0
 800920a:	4608      	mov	r0, r1
 800920c:	460c      	mov	r4, r1
 800920e:	4616      	mov	r6, r2
 8009210:	f005 fe30 	bl	800ee74 <GUI_ALLOC_h2p>
 8009214:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009216:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800921a:	4628      	mov	r0, r5
 800921c:	4621      	mov	r1, r4
 800921e:	4632      	mov	r2, r6
 8009220:	bf0c      	ite	eq
 8009222:	2320      	moveq	r3, #32
 8009224:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 8009228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800922c:	f7ff bfaf 	b.w	800918e <WM__InvalidateRect>

08009230 <WM__InvalidateRectEx>:
 8009230:	2320      	movs	r3, #32
 8009232:	f7ff bfac 	b.w	800918e <WM__InvalidateRect>

08009236 <WM__DetachWindow>:
 8009236:	b513      	push	{r0, r1, r4, lr}
 8009238:	4604      	mov	r4, r0
 800923a:	f005 fe25 	bl	800ee88 <GUI_ALLOC_LockH>
 800923e:	6981      	ldr	r1, [r0, #24]
 8009240:	9001      	str	r0, [sp, #4]
 8009242:	b141      	cbz	r1, 8009256 <WM__DetachWindow+0x20>
 8009244:	6a02      	ldr	r2, [r0, #32]
 8009246:	f7ff fff3 	bl	8009230 <WM__InvalidateRectEx>
 800924a:	4620      	mov	r0, r4
 800924c:	f7ff fe30 	bl	8008eb0 <WM__RemoveWindowFromList>
 8009250:	9b01      	ldr	r3, [sp, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	619a      	str	r2, [r3, #24]
 8009256:	a801      	add	r0, sp, #4
 8009258:	f005 fe24 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800925c:	b002      	add	sp, #8
 800925e:	bd10      	pop	{r4, pc}

08009260 <WM_InvalidateRect>:
 8009260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009262:	460f      	mov	r7, r1
 8009264:	b087      	sub	sp, #28
 8009266:	4605      	mov	r5, r0
 8009268:	2800      	cmp	r0, #0
 800926a:	d033      	beq.n	80092d4 <WM_InvalidateRect+0x74>
 800926c:	f005 fe0c 	bl	800ee88 <GUI_ALLOC_LockH>
 8009270:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8009272:	9001      	str	r0, [sp, #4]
 8009274:	07b2      	lsls	r2, r6, #30
 8009276:	d52a      	bpl.n	80092ce <WM_InvalidateRect+0x6e>
 8009278:	c803      	ldmia	r0, {r0, r1}
 800927a:	ac04      	add	r4, sp, #16
 800927c:	03f3      	lsls	r3, r6, #15
 800927e:	e884 0003 	stmia.w	r4, {r0, r1}
 8009282:	d502      	bpl.n	800928a <WM_InvalidateRect+0x2a>
 8009284:	4628      	mov	r0, r5
 8009286:	f7ff fe95 	bl	8008fb4 <WM__InvalidateDrawAndDescs>
 800928a:	b15f      	cbz	r7, 80092a4 <WM_InvalidateRect+0x44>
 800928c:	6838      	ldr	r0, [r7, #0]
 800928e:	6879      	ldr	r1, [r7, #4]
 8009290:	ab02      	add	r3, sp, #8
 8009292:	c303      	stmia	r3!, {r0, r1}
 8009294:	9801      	ldr	r0, [sp, #4]
 8009296:	a902      	add	r1, sp, #8
 8009298:	f7ff fe28 	bl	8008eec <WM__Client2Screen>
 800929c:	4620      	mov	r0, r4
 800929e:	a902      	add	r1, sp, #8
 80092a0:	f003 fad0 	bl	800c844 <GUI__IntersectRect>
 80092a4:	4620      	mov	r0, r4
 80092a6:	4629      	mov	r1, r5
 80092a8:	f7ff fd82 	bl	8008db0 <WM__ClipAtParentBorders>
 80092ac:	b178      	cbz	r0, 80092ce <WM_InvalidateRect+0x6e>
 80092ae:	f640 0301 	movw	r3, #2049	; 0x801
 80092b2:	4033      	ands	r3, r6
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d106      	bne.n	80092c6 <WM_InvalidateRect+0x66>
 80092b8:	9b01      	ldr	r3, [sp, #4]
 80092ba:	4620      	mov	r0, r4
 80092bc:	6999      	ldr	r1, [r3, #24]
 80092be:	6a1a      	ldr	r2, [r3, #32]
 80092c0:	f7ff ffb6 	bl	8009230 <WM__InvalidateRectEx>
 80092c4:	e003      	b.n	80092ce <WM_InvalidateRect+0x6e>
 80092c6:	4628      	mov	r0, r5
 80092c8:	4621      	mov	r1, r4
 80092ca:	f7ff ff2b 	bl	8009124 <WM__Invalidate1Abs>
 80092ce:	a801      	add	r0, sp, #4
 80092d0:	f005 fde8 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80092d4:	b007      	add	sp, #28
 80092d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092d8 <WM_InvalidateWindow>:
 80092d8:	2100      	movs	r1, #0
 80092da:	f7ff bfc1 	b.w	8009260 <WM_InvalidateRect>

080092de <WM__SelectTopLevelLayer>:
 80092de:	b508      	push	{r3, lr}
 80092e0:	f7ff febc 	bl	800905c <WM__GetTopLevelLayer>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	db03      	blt.n	80092f0 <WM__SelectTopLevelLayer+0x12>
 80092e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80092ec:	f003 bedc 	b.w	800d0a8 <GUI_SelectLayer>
 80092f0:	bd08      	pop	{r3, pc}
	...

080092f4 <WM_SelectWindow>:
 80092f4:	4a0d      	ldr	r2, [pc, #52]	; (800932c <WM_SelectWindow+0x38>)
 80092f6:	6813      	ldr	r3, [r2, #0]
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 80092fc:	4604      	mov	r4, r0
 80092fe:	4616      	mov	r6, r2
 8009300:	b908      	cbnz	r0, 8009306 <WM_SelectWindow+0x12>
 8009302:	4a0b      	ldr	r2, [pc, #44]	; (8009330 <WM_SelectWindow+0x3c>)
 8009304:	6814      	ldr	r4, [r2, #0]
 8009306:	649c      	str	r4, [r3, #72]	; 0x48
 8009308:	4620      	mov	r0, r4
 800930a:	f7ff ffe8 	bl	80092de <WM__SelectTopLevelLayer>
 800930e:	f003 f9b9 	bl	800c684 <LCD_SetClipRectMax>
 8009312:	4620      	mov	r0, r4
 8009314:	f005 fdae 	bl	800ee74 <GUI_ALLOC_h2p>
 8009318:	6833      	ldr	r3, [r6, #0]
 800931a:	f9b0 1000 	ldrsh.w	r1, [r0]
 800931e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009322:	64d9      	str	r1, [r3, #76]	; 0x4c
 8009324:	651a      	str	r2, [r3, #80]	; 0x50
 8009326:	4628      	mov	r0, r5
 8009328:	bd70      	pop	{r4, r5, r6, pc}
 800932a:	bf00      	nop
 800932c:	20000084 	.word	0x20000084
 8009330:	200076ac 	.word	0x200076ac

08009334 <WM_CreateWindowAsChild>:
 8009334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009338:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800933a:	469b      	mov	fp, r3
 800933c:	4b4b      	ldr	r3, [pc, #300]	; (800946c <WM_CreateWindowAsChild+0x138>)
 800933e:	4607      	mov	r7, r0
 8009340:	4688      	mov	r8, r1
 8009342:	4692      	mov	sl, r2
 8009344:	681e      	ldr	r6, [r3, #0]
 8009346:	bb65      	cbnz	r5, 80093a2 <WM_CreateWindowAsChild+0x6e>
 8009348:	4b49      	ldr	r3, [pc, #292]	; (8009470 <WM_CreateWindowAsChild+0x13c>)
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	b363      	cbz	r3, 80093a8 <WM_CreateWindowAsChild+0x74>
 800934e:	4b49      	ldr	r3, [pc, #292]	; (8009474 <WM_CreateWindowAsChild+0x140>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	7c5a      	ldrb	r2, [r3, #17]
 8009354:	4b48      	ldr	r3, [pc, #288]	; (8009478 <WM_CreateWindowAsChild+0x144>)
 8009356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800935a:	1c5a      	adds	r2, r3, #1
 800935c:	d024      	beq.n	80093a8 <WM_CreateWindowAsChild+0x74>
 800935e:	b31b      	cbz	r3, 80093a8 <WM_CreateWindowAsChild+0x74>
 8009360:	461d      	mov	r5, r3
 8009362:	4628      	mov	r0, r5
 8009364:	f005 fd90 	bl	800ee88 <GUI_ALLOC_LockH>
 8009368:	f9b0 2000 	ldrsh.w	r2, [r0]
 800936c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8009370:	9001      	str	r0, [sp, #4]
 8009372:	4417      	add	r7, r2
 8009374:	4498      	add	r8, r3
 8009376:	f1ba 0f00 	cmp.w	sl, #0
 800937a:	d105      	bne.n	8009388 <WM_CreateWindowAsChild+0x54>
 800937c:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 8009380:	ebc2 0a0a 	rsb	sl, r2, sl
 8009384:	f10a 0a01 	add.w	sl, sl, #1
 8009388:	f1bb 0f00 	cmp.w	fp, #0
 800938c:	d105      	bne.n	800939a <WM_CreateWindowAsChild+0x66>
 800938e:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 8009392:	ebc3 0b0b 	rsb	fp, r3, fp
 8009396:	f10b 0b01 	add.w	fp, fp, #1
 800939a:	a801      	add	r0, sp, #4
 800939c:	f005 fd82 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80093a0:	e002      	b.n	80093a8 <WM_CreateWindowAsChild+0x74>
 80093a2:	1c6b      	adds	r3, r5, #1
 80093a4:	d1dd      	bne.n	8009362 <WM_CreateWindowAsChild+0x2e>
 80093a6:	2500      	movs	r5, #0
 80093a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80093aa:	302c      	adds	r0, #44	; 0x2c
 80093ac:	f005 ff44 	bl	800f238 <GUI_ALLOC_AllocZero>
 80093b0:	4604      	mov	r4, r0
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d056      	beq.n	8009464 <WM_CreateWindowAsChild+0x130>
 80093b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093b8:	431e      	orrs	r6, r3
 80093ba:	4b2d      	ldr	r3, [pc, #180]	; (8009470 <WM_CreateWindowAsChild+0x13c>)
 80093bc:	881a      	ldrh	r2, [r3, #0]
 80093be:	3201      	adds	r2, #1
 80093c0:	801a      	strh	r2, [r3, #0]
 80093c2:	f005 fd61 	bl	800ee88 <GUI_ALLOC_LockH>
 80093c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093c8:	6103      	str	r3, [r0, #16]
 80093ca:	f10d 0908 	add.w	r9, sp, #8
 80093ce:	4b2b      	ldr	r3, [pc, #172]	; (800947c <WM_CreateWindowAsChild+0x148>)
 80093d0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80093d2:	f849 0d08 	str.w	r0, [r9, #-8]!
 80093d6:	4033      	ands	r3, r6
 80093d8:	8007      	strh	r7, [r0, #0]
 80093da:	f8a0 8002 	strh.w	r8, [r0, #2]
 80093de:	4457      	add	r7, sl
 80093e0:	44d8      	add	r8, fp
 80093e2:	4313      	orrs	r3, r2
 80093e4:	3f01      	subs	r7, #1
 80093e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80093ea:	6283      	str	r3, [r0, #40]	; 0x28
 80093ec:	8087      	strh	r7, [r0, #4]
 80093ee:	f8a0 8006 	strh.w	r8, [r0, #6]
 80093f2:	4668      	mov	r0, sp
 80093f4:	f005 fd56 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80093f8:	4b21      	ldr	r3, [pc, #132]	; (8009480 <WM_CreateWindowAsChild+0x14c>)
 80093fa:	6818      	ldr	r0, [r3, #0]
 80093fc:	b148      	cbz	r0, 8009412 <WM_CreateWindowAsChild+0xde>
 80093fe:	f005 fd39 	bl	800ee74 <GUI_ALLOC_h2p>
 8009402:	4607      	mov	r7, r0
 8009404:	4620      	mov	r0, r4
 8009406:	f005 fd35 	bl	800ee74 <GUI_ALLOC_h2p>
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	6143      	str	r3, [r0, #20]
 800940e:	617c      	str	r4, [r7, #20]
 8009410:	e000      	b.n	8009414 <WM_CreateWindowAsChild+0xe0>
 8009412:	601c      	str	r4, [r3, #0]
 8009414:	4629      	mov	r1, r5
 8009416:	4620      	mov	r0, r4
 8009418:	f7ff fcf8 	bl	8008e0c <WM__InsertWindowIntoList>
 800941c:	06b5      	lsls	r5, r6, #26
 800941e:	d502      	bpl.n	8009426 <WM_CreateWindowAsChild+0xf2>
 8009420:	4620      	mov	r0, r4
 8009422:	f7ff ff67 	bl	80092f4 <WM_SelectWindow>
 8009426:	07f0      	lsls	r0, r6, #31
 8009428:	d503      	bpl.n	8009432 <WM_CreateWindowAsChild+0xfe>
 800942a:	4b16      	ldr	r3, [pc, #88]	; (8009484 <WM_CreateWindowAsChild+0x150>)
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	3201      	adds	r2, #1
 8009430:	601a      	str	r2, [r3, #0]
 8009432:	0671      	lsls	r1, r6, #25
 8009434:	d502      	bpl.n	800943c <WM_CreateWindowAsChild+0x108>
 8009436:	4620      	mov	r0, r4
 8009438:	f7fe fffb 	bl	8008432 <WM_BringToBottom>
 800943c:	07b2      	lsls	r2, r6, #30
 800943e:	d50d      	bpl.n	800945c <WM_CreateWindowAsChild+0x128>
 8009440:	4620      	mov	r0, r4
 8009442:	f005 fd21 	bl	800ee88 <GUI_ALLOC_LockH>
 8009446:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009448:	9000      	str	r0, [sp, #0]
 800944a:	f043 0302 	orr.w	r3, r3, #2
 800944e:	6283      	str	r3, [r0, #40]	; 0x28
 8009450:	4668      	mov	r0, sp
 8009452:	f005 fd27 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009456:	4620      	mov	r0, r4
 8009458:	f7ff ff3e 	bl	80092d8 <WM_InvalidateWindow>
 800945c:	4620      	mov	r0, r4
 800945e:	2101      	movs	r1, #1
 8009460:	f7ff fde5 	bl	800902e <WM__SendMsgNoData>
 8009464:	4620      	mov	r0, r4
 8009466:	b003      	add	sp, #12
 8009468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946c:	200076c0 	.word	0x200076c0
 8009470:	20007688 	.word	0x20007688
 8009474:	20000084 	.word	0x20000084
 8009478:	20007690 	.word	0x20007690
 800947c:	003f3f9f 	.word	0x003f3f9f
 8009480:	200076ac 	.word	0x200076ac
 8009484:	200076e0 	.word	0x200076e0

08009488 <WM_DeleteWindow>:
 8009488:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800948a:	4604      	mov	r4, r0
 800948c:	2800      	cmp	r0, #0
 800948e:	d06e      	beq.n	800956e <WM_DeleteWindow+0xe6>
 8009490:	f7ff fd80 	bl	8008f94 <WM__IsWindow>
 8009494:	2800      	cmp	r0, #0
 8009496:	d06a      	beq.n	800956e <WM_DeleteWindow+0xe6>
 8009498:	4620      	mov	r0, r4
 800949a:	f7ff fddf 	bl	800905c <WM__GetTopLevelLayer>
 800949e:	210b      	movs	r1, #11
 80094a0:	4605      	mov	r5, r0
 80094a2:	4620      	mov	r0, r4
 80094a4:	f7ff fdc3 	bl	800902e <WM__SendMsgNoData>
 80094a8:	4620      	mov	r0, r4
 80094aa:	f006 fad9 	bl	800fa60 <WM__DeleteAssocTimer>
 80094ae:	4620      	mov	r0, r4
 80094b0:	f005 fcea 	bl	800ee88 <GUI_ALLOC_LockH>
 80094b4:	9001      	str	r0, [sp, #4]
 80094b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80094b8:	b108      	cbz	r0, 80094be <WM_DeleteWindow+0x36>
 80094ba:	f001 fb85 	bl	800abc8 <GUI_MEMDEV_Delete>
 80094be:	4b2d      	ldr	r3, [pc, #180]	; (8009574 <WM_DeleteWindow+0xec>)
 80094c0:	4a2d      	ldr	r2, [pc, #180]	; (8009578 <WM_DeleteWindow+0xf0>)
 80094c2:	2100      	movs	r1, #0
 80094c4:	6019      	str	r1, [r3, #0]
 80094c6:	4b2d      	ldr	r3, [pc, #180]	; (800957c <WM_DeleteWindow+0xf4>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80094ce:	42a0      	cmp	r0, r4
 80094d0:	bf08      	it	eq
 80094d2:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 80094d6:	4a2a      	ldr	r2, [pc, #168]	; (8009580 <WM_DeleteWindow+0xf8>)
 80094d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80094dc:	42a1      	cmp	r1, r4
 80094de:	bf04      	itt	eq
 80094e0:	2100      	moveq	r1, #0
 80094e2:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 80094e6:	4b27      	ldr	r3, [pc, #156]	; (8009584 <WM_DeleteWindow+0xfc>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	b12b      	cbz	r3, 80094f8 <WM_DeleteWindow+0x70>
 80094ec:	685a      	ldr	r2, [r3, #4]
 80094ee:	42a2      	cmp	r2, r4
 80094f0:	bf04      	itt	eq
 80094f2:	2200      	moveq	r2, #0
 80094f4:	605a      	streq	r2, [r3, #4]
 80094f6:	e7f7      	b.n	80094e8 <WM_DeleteWindow+0x60>
 80094f8:	4620      	mov	r0, r4
 80094fa:	2107      	movs	r1, #7
 80094fc:	f7ff f8c5 	bl	800868a <WM_NotifyParent>
 8009500:	9e01      	ldr	r6, [sp, #4]
 8009502:	69f0      	ldr	r0, [r6, #28]
 8009504:	f7ff ffc0 	bl	8009488 <WM_DeleteWindow>
 8009508:	69f3      	ldr	r3, [r6, #28]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1f9      	bne.n	8009502 <WM_DeleteWindow+0x7a>
 800950e:	4620      	mov	r0, r4
 8009510:	f7ff fe91 	bl	8009236 <WM__DetachWindow>
 8009514:	4b1c      	ldr	r3, [pc, #112]	; (8009588 <WM_DeleteWindow+0x100>)
 8009516:	6818      	ldr	r0, [r3, #0]
 8009518:	b150      	cbz	r0, 8009530 <WM_DeleteWindow+0xa8>
 800951a:	f005 fcab 	bl	800ee74 <GUI_ALLOC_h2p>
 800951e:	4606      	mov	r6, r0
 8009520:	6940      	ldr	r0, [r0, #20]
 8009522:	42a0      	cmp	r0, r4
 8009524:	d1f8      	bne.n	8009518 <WM_DeleteWindow+0x90>
 8009526:	4620      	mov	r0, r4
 8009528:	f005 fca4 	bl	800ee74 <GUI_ALLOC_h2p>
 800952c:	6943      	ldr	r3, [r0, #20]
 800952e:	6173      	str	r3, [r6, #20]
 8009530:	9b01      	ldr	r3, [sp, #4]
 8009532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009534:	07da      	lsls	r2, r3, #31
 8009536:	d503      	bpl.n	8009540 <WM_DeleteWindow+0xb8>
 8009538:	4a14      	ldr	r2, [pc, #80]	; (800958c <WM_DeleteWindow+0x104>)
 800953a:	6811      	ldr	r1, [r2, #0]
 800953c:	3901      	subs	r1, #1
 800953e:	6011      	str	r1, [r2, #0]
 8009540:	069b      	lsls	r3, r3, #26
 8009542:	d503      	bpl.n	800954c <WM_DeleteWindow+0xc4>
 8009544:	4b12      	ldr	r3, [pc, #72]	; (8009590 <WM_DeleteWindow+0x108>)
 8009546:	881a      	ldrh	r2, [r3, #0]
 8009548:	3a01      	subs	r2, #1
 800954a:	801a      	strh	r2, [r3, #0]
 800954c:	a801      	add	r0, sp, #4
 800954e:	f005 fca9 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009552:	4b10      	ldr	r3, [pc, #64]	; (8009594 <WM_DeleteWindow+0x10c>)
 8009554:	881a      	ldrh	r2, [r3, #0]
 8009556:	4620      	mov	r0, r4
 8009558:	3a01      	subs	r2, #1
 800955a:	801a      	strh	r2, [r3, #0]
 800955c:	f005 fcce 	bl	800eefc <GUI_ALLOC_Free>
 8009560:	2d00      	cmp	r5, #0
 8009562:	db04      	blt.n	800956e <WM_DeleteWindow+0xe6>
 8009564:	4b0c      	ldr	r3, [pc, #48]	; (8009598 <WM_DeleteWindow+0x110>)
 8009566:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800956a:	f7ff fec3 	bl	80092f4 <WM_SelectWindow>
 800956e:	b002      	add	sp, #8
 8009570:	bd70      	pop	{r4, r5, r6, pc}
 8009572:	bf00      	nop
 8009574:	20002a0c 	.word	0x20002a0c
 8009578:	200076a0 	.word	0x200076a0
 800957c:	200076b0 	.word	0x200076b0
 8009580:	200076d4 	.word	0x200076d4
 8009584:	200076cc 	.word	0x200076cc
 8009588:	200076ac 	.word	0x200076ac
 800958c:	200076e0 	.word	0x200076e0
 8009590:	200076a8 	.word	0x200076a8
 8009594:	20007688 	.word	0x20007688
 8009598:	20007690 	.word	0x20007690

0800959c <_Exec1Input>:
 800959c:	4b1b      	ldr	r3, [pc, #108]	; (800960c <_Exec1Input+0x70>)
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095a2:	461e      	mov	r6, r3
 80095a4:	b1d2      	cbz	r2, 80095dc <_Exec1Input+0x40>
 80095a6:	4b1a      	ldr	r3, [pc, #104]	; (8009610 <_Exec1Input+0x74>)
 80095a8:	681c      	ldr	r4, [r3, #0]
 80095aa:	b1b4      	cbz	r4, 80095da <_Exec1Input+0x3e>
 80095ac:	4620      	mov	r0, r4
 80095ae:	f005 fc6b 	bl	800ee88 <GUI_ALLOC_LockH>
 80095b2:	4603      	mov	r3, r0
 80095b4:	a802      	add	r0, sp, #8
 80095b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095b8:	f840 3d04 	str.w	r3, [r0, #-4]!
 80095bc:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80095c0:	695d      	ldr	r5, [r3, #20]
 80095c2:	d006      	beq.n	80095d2 <_Exec1Input+0x36>
 80095c4:	f005 fc6e 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80095c8:	4620      	mov	r0, r4
 80095ca:	f7ff ff5d 	bl	8009488 <WM_DeleteWindow>
 80095ce:	462c      	mov	r4, r5
 80095d0:	e7eb      	b.n	80095aa <_Exec1Input+0xe>
 80095d2:	462c      	mov	r4, r5
 80095d4:	f005 fc66 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80095d8:	e7e7      	b.n	80095aa <_Exec1Input+0xe>
 80095da:	6034      	str	r4, [r6, #0]
 80095dc:	4b0d      	ldr	r3, [pc, #52]	; (8009614 <_Exec1Input+0x78>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	b103      	cbz	r3, 80095e4 <_Exec1Input+0x48>
 80095e2:	4798      	blx	r3
 80095e4:	4b0c      	ldr	r3, [pc, #48]	; (8009618 <_Exec1Input+0x7c>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	b953      	cbnz	r3, 8009600 <_Exec1Input+0x64>
 80095ea:	4b0c      	ldr	r3, [pc, #48]	; (800961c <_Exec1Input+0x80>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 80095f2:	b148      	cbz	r0, 8009608 <_Exec1Input+0x6c>
 80095f4:	f003 fd76 	bl	800d0e4 <GUI_PollKeyMsg>
 80095f8:	3000      	adds	r0, #0
 80095fa:	bf18      	it	ne
 80095fc:	2001      	movne	r0, #1
 80095fe:	e003      	b.n	8009608 <_Exec1Input+0x6c>
 8009600:	4798      	blx	r3
 8009602:	2800      	cmp	r0, #0
 8009604:	d0f1      	beq.n	80095ea <_Exec1Input+0x4e>
 8009606:	2001      	movs	r0, #1
 8009608:	b002      	add	sp, #8
 800960a:	bd70      	pop	{r4, r5, r6, pc}
 800960c:	200029f0 	.word	0x200029f0
 8009610:	200076ac 	.word	0x200076ac
 8009614:	20007698 	.word	0x20007698
 8009618:	20007744 	.word	0x20007744
 800961c:	20000084 	.word	0x20000084

08009620 <WM_GetActiveWindow>:
 8009620:	4b01      	ldr	r3, [pc, #4]	; (8009628 <WM_GetActiveWindow+0x8>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009626:	4770      	bx	lr
 8009628:	20000084 	.word	0x20000084

0800962c <WM__GetNextIVR>:
 800962c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009630:	4f5d      	ldr	r7, [pc, #372]	; (80097a8 <WM__GetNextIVR+0x17c>)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8009638:	2800      	cmp	r0, #0
 800963a:	f000 80b2 	beq.w	80097a2 <WM__GetNextIVR+0x176>
 800963e:	4b5b      	ldr	r3, [pc, #364]	; (80097ac <WM__GetNextIVR+0x180>)
 8009640:	695a      	ldr	r2, [r3, #20]
 8009642:	2a01      	cmp	r2, #1
 8009644:	461c      	mov	r4, r3
 8009646:	dd03      	ble.n	8009650 <WM__GetNextIVR+0x24>
 8009648:	3a01      	subs	r2, #1
 800964a:	615a      	str	r2, [r3, #20]
 800964c:	2000      	movs	r0, #0
 800964e:	e0a8      	b.n	80097a2 <WM__GetNextIVR+0x176>
 8009650:	f104 0608 	add.w	r6, r4, #8
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	e896 0003 	ldmia.w	r6, {r0, r1}
 800965a:	3301      	adds	r3, #1
 800965c:	ad02      	add	r5, sp, #8
 800965e:	6123      	str	r3, [r4, #16]
 8009660:	e885 0003 	stmia.w	r5, {r0, r1}
 8009664:	b923      	cbnz	r3, 8009670 <WM__GetNextIVR+0x44>
 8009666:	8823      	ldrh	r3, [r4, #0]
 8009668:	f8ad 3008 	strh.w	r3, [sp, #8]
 800966c:	8863      	ldrh	r3, [r4, #2]
 800966e:	e011      	b.n	8009694 <WM__GetNextIVR+0x68>
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	8962      	ldrh	r2, [r4, #10]
 8009674:	f8ad 200a 	strh.w	r2, [sp, #10]
 8009678:	3301      	adds	r3, #1
 800967a:	b29b      	uxth	r3, r3
 800967c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8009680:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009684:	b21b      	sxth	r3, r3
 8009686:	429a      	cmp	r2, r3
 8009688:	da06      	bge.n	8009698 <WM__GetNextIVR+0x6c>
 800968a:	8823      	ldrh	r3, [r4, #0]
 800968c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009690:	89e3      	ldrh	r3, [r4, #14]
 8009692:	3301      	adds	r3, #1
 8009694:	f8ad 300a 	strh.w	r3, [sp, #10]
 8009698:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800969c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80096a0:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80097ac <WM__GetNextIVR+0x180>
 80096a4:	429a      	cmp	r2, r3
 80096a6:	dd04      	ble.n	80096b2 <WM__GetNextIVR+0x86>
 80096a8:	6963      	ldr	r3, [r4, #20]
 80096aa:	3b01      	subs	r3, #1
 80096ac:	2000      	movs	r0, #0
 80096ae:	6163      	str	r3, [r4, #20]
 80096b0:	e077      	b.n	80097a2 <WM__GetNextIVR+0x176>
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80096b6:	f005 fbe7 	bl	800ee88 <GUI_ALLOC_LockH>
 80096ba:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80096be:	f9b8 3000 	ldrsh.w	r3, [r8]
 80096c2:	9001      	str	r0, [sp, #4]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d11c      	bne.n	8009702 <WM__GetNextIVR+0xd6>
 80096c8:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80096cc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80096d0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80096d4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80096d8:	4b33      	ldr	r3, [pc, #204]	; (80097a8 <WM__GetNextIVR+0x17c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096de:	b15a      	cbz	r2, 80096f8 <WM__GetNextIVR+0xcc>
 80096e0:	4610      	mov	r0, r2
 80096e2:	f005 fbc7 	bl	800ee74 <GUI_ALLOC_h2p>
 80096e6:	4680      	mov	r8, r0
 80096e8:	2200      	movs	r2, #0
 80096ea:	6a00      	ldr	r0, [r0, #32]
 80096ec:	4629      	mov	r1, r5
 80096ee:	f7ff f973 	bl	80089d8 <_Findy1>
 80096f2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80096f6:	e7f2      	b.n	80096de <WM__GetNextIVR+0xb2>
 80096f8:	9b01      	ldr	r3, [sp, #4]
 80096fa:	4629      	mov	r1, r5
 80096fc:	69d8      	ldr	r0, [r3, #28]
 80096fe:	f7ff f96b 	bl	80089d8 <_Findy1>
 8009702:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8009706:	f8ad 300c 	strh.w	r3, [sp, #12]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800970e:	b16a      	cbz	r2, 800972c <WM__GetNextIVR+0x100>
 8009710:	4610      	mov	r0, r2
 8009712:	f005 fbaf 	bl	800ee74 <GUI_ALLOC_h2p>
 8009716:	4629      	mov	r1, r5
 8009718:	4680      	mov	r8, r0
 800971a:	2200      	movs	r2, #0
 800971c:	6a00      	ldr	r0, [r0, #32]
 800971e:	f7ff f9b1 	bl	8008a84 <_Findx0>
 8009722:	2800      	cmp	r0, #0
 8009724:	d1ed      	bne.n	8009702 <WM__GetNextIVR+0xd6>
 8009726:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800972a:	e7f0      	b.n	800970e <WM__GetNextIVR+0xe2>
 800972c:	9b01      	ldr	r3, [sp, #4]
 800972e:	4629      	mov	r1, r5
 8009730:	69d8      	ldr	r0, [r3, #28]
 8009732:	f7ff f9a7 	bl	8008a84 <_Findx0>
 8009736:	2800      	cmp	r0, #0
 8009738:	d1e3      	bne.n	8009702 <WM__GetNextIVR+0xd6>
 800973a:	88a3      	ldrh	r3, [r4, #4]
 800973c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8009740:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009744:	b21b      	sxth	r3, r3
 8009746:	429a      	cmp	r2, r3
 8009748:	dd07      	ble.n	800975a <WM__GetNextIVR+0x12e>
 800974a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800974e:	e886 0003 	stmia.w	r6, {r0, r1}
 8009752:	a801      	add	r0, sp, #4
 8009754:	f005 fba6 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009758:	e797      	b.n	800968a <WM__GetNextIVR+0x5e>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800975e:	b152      	cbz	r2, 8009776 <WM__GetNextIVR+0x14a>
 8009760:	4610      	mov	r0, r2
 8009762:	f005 fb87 	bl	800ee74 <GUI_ALLOC_h2p>
 8009766:	4607      	mov	r7, r0
 8009768:	2200      	movs	r2, #0
 800976a:	6a00      	ldr	r0, [r0, #32]
 800976c:	4629      	mov	r1, r5
 800976e:	f7ff f9cd 	bl	8008b0c <_Findx1>
 8009772:	69ba      	ldr	r2, [r7, #24]
 8009774:	e7f3      	b.n	800975e <WM__GetNextIVR+0x132>
 8009776:	af04      	add	r7, sp, #16
 8009778:	4629      	mov	r1, r5
 800977a:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 800977e:	69d8      	ldr	r0, [r3, #28]
 8009780:	f7ff f9c4 	bl	8008b0c <_Findx1>
 8009784:	4638      	mov	r0, r7
 8009786:	f005 fb8d 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800978a:	6923      	ldr	r3, [r4, #16]
 800978c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8009790:	4293      	cmp	r3, r2
 8009792:	dc89      	bgt.n	80096a8 <WM__GetNextIVR+0x7c>
 8009794:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009798:	e886 0003 	stmia.w	r6, {r0, r1}
 800979c:	f7ff fbd6 	bl	8008f4c <WM__ActivateClipRect>
 80097a0:	2001      	movs	r0, #1
 80097a2:	b004      	add	sp, #16
 80097a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097a8:	20000084 	.word	0x20000084
 80097ac:	200029f4 	.word	0x200029f4

080097b0 <WM__InitIVRSearch>:
 80097b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b4:	4f39      	ldr	r7, [pc, #228]	; (800989c <WM__InitIVRSearch+0xec>)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80097bc:	b086      	sub	sp, #24
 80097be:	4606      	mov	r6, r0
 80097c0:	b912      	cbnz	r2, 80097c8 <WM__InitIVRSearch+0x18>
 80097c2:	f7ff fbc3 	bl	8008f4c <WM__ActivateClipRect>
 80097c6:	e064      	b.n	8009892 <WM__InitIVRSearch+0xe2>
 80097c8:	4d35      	ldr	r5, [pc, #212]	; (80098a0 <WM__InitIVRSearch+0xf0>)
 80097ca:	696a      	ldr	r2, [r5, #20]
 80097cc:	3201      	adds	r2, #1
 80097ce:	2a01      	cmp	r2, #1
 80097d0:	616a      	str	r2, [r5, #20]
 80097d2:	462c      	mov	r4, r5
 80097d4:	dc5d      	bgt.n	8009892 <WM__InitIVRSearch+0xe2>
 80097d6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80097d8:	f005 fb56 	bl	800ee88 <GUI_ALLOC_LockH>
 80097dc:	f04f 32ff 	mov.w	r2, #4294967295
 80097e0:	612a      	str	r2, [r5, #16]
 80097e2:	4a30      	ldr	r2, [pc, #192]	; (80098a4 <WM__InitIVRSearch+0xf4>)
 80097e4:	9000      	str	r0, [sp, #0]
 80097e6:	7812      	ldrb	r2, [r2, #0]
 80097e8:	b12a      	cbz	r2, 80097f6 <WM__InitIVRSearch+0x46>
 80097ea:	f100 0308 	add.w	r3, r0, #8
 80097ee:	aa02      	add	r2, sp, #8
 80097f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80097f4:	e005      	b.n	8009802 <WM__InitIVRSearch+0x52>
 80097f6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80097f8:	f012 0802 	ands.w	r8, r2, #2
 80097fc:	d00a      	beq.n	8009814 <WM__InitIVRSearch+0x64>
 80097fe:	c803      	ldmia	r0, {r0, r1}
 8009800:	aa02      	add	r2, sp, #8
 8009802:	e882 0003 	stmia.w	r2, {r0, r1}
 8009806:	ad02      	add	r5, sp, #8
 8009808:	b166      	cbz	r6, 8009824 <WM__InitIVRSearch+0x74>
 800980a:	4628      	mov	r0, r5
 800980c:	4631      	mov	r1, r6
 800980e:	f003 f819 	bl	800c844 <GUI__IntersectRect>
 8009812:	e007      	b.n	8009824 <WM__InitIVRSearch+0x74>
 8009814:	696b      	ldr	r3, [r5, #20]
 8009816:	4668      	mov	r0, sp
 8009818:	3b01      	subs	r3, #1
 800981a:	616b      	str	r3, [r5, #20]
 800981c:	f005 fb42 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009820:	4640      	mov	r0, r8
 8009822:	e037      	b.n	8009894 <WM__InitIVRSearch+0xe4>
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	4e20      	ldr	r6, [pc, #128]	; (80098a8 <WM__InitIVRSearch+0xf8>)
 8009828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800982a:	b1c2      	cbz	r2, 800985e <WM__InitIVRSearch+0xae>
 800982c:	9b00      	ldr	r3, [sp, #0]
 800982e:	6810      	ldr	r0, [r2, #0]
 8009830:	6851      	ldr	r1, [r2, #4]
 8009832:	9301      	str	r3, [sp, #4]
 8009834:	ab04      	add	r3, sp, #16
 8009836:	c303      	stmia	r3!, {r0, r1}
 8009838:	6833      	ldr	r3, [r6, #0]
 800983a:	b133      	cbz	r3, 800984a <WM__InitIVRSearch+0x9a>
 800983c:	a801      	add	r0, sp, #4
 800983e:	f005 fb31 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009842:	6830      	ldr	r0, [r6, #0]
 8009844:	f005 fb20 	bl	800ee88 <GUI_ALLOC_LockH>
 8009848:	9001      	str	r0, [sp, #4]
 800984a:	9801      	ldr	r0, [sp, #4]
 800984c:	a904      	add	r1, sp, #16
 800984e:	f7ff fb4d 	bl	8008eec <WM__Client2Screen>
 8009852:	4628      	mov	r0, r5
 8009854:	a904      	add	r1, sp, #16
 8009856:	f002 fff5 	bl	800c844 <GUI__IntersectRect>
 800985a:	a801      	add	r0, sp, #4
 800985c:	e000      	b.n	8009860 <WM__InitIVRSearch+0xb0>
 800985e:	4668      	mov	r0, sp
 8009860:	f005 fb20 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009864:	6831      	ldr	r1, [r6, #0]
 8009866:	b119      	cbz	r1, 8009870 <WM__InitIVRSearch+0xc0>
 8009868:	4628      	mov	r0, r5
 800986a:	f7ff faa1 	bl	8008db0 <WM__ClipAtParentBorders>
 800986e:	b128      	cbz	r0, 800987c <WM__InitIVRSearch+0xcc>
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	4628      	mov	r0, r5
 8009874:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8009876:	f7ff fa9b 	bl	8008db0 <WM__ClipAtParentBorders>
 800987a:	b918      	cbnz	r0, 8009884 <WM__InitIVRSearch+0xd4>
 800987c:	6963      	ldr	r3, [r4, #20]
 800987e:	3b01      	subs	r3, #1
 8009880:	6163      	str	r3, [r4, #20]
 8009882:	e007      	b.n	8009894 <WM__InitIVRSearch+0xe4>
 8009884:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009888:	e884 0003 	stmia.w	r4, {r0, r1}
 800988c:	f7ff fece 	bl	800962c <WM__GetNextIVR>
 8009890:	e000      	b.n	8009894 <WM__InitIVRSearch+0xe4>
 8009892:	2001      	movs	r0, #1
 8009894:	b006      	add	sp, #24
 8009896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800989a:	bf00      	nop
 800989c:	20000084 	.word	0x20000084
 80098a0:	200029f4 	.word	0x200029f4
 80098a4:	200076bc 	.word	0x200076bc
 80098a8:	2000768c 	.word	0x2000768c

080098ac <WM_SetDefault>:
 80098ac:	b508      	push	{r3, lr}
 80098ae:	f004 f8db 	bl	800da68 <GL_SetDefault>
 80098b2:	4b02      	ldr	r3, [pc, #8]	; (80098bc <WM_SetDefault+0x10>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2200      	movs	r2, #0
 80098b8:	645a      	str	r2, [r3, #68]	; 0x44
 80098ba:	bd08      	pop	{r3, pc}
 80098bc:	20000084 	.word	0x20000084

080098c0 <WM__Paint1>:
 80098c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098c2:	b089      	sub	sp, #36	; 0x24
 80098c4:	4604      	mov	r4, r0
 80098c6:	f005 fadf 	bl	800ee88 <GUI_ALLOC_LockH>
 80098ca:	6907      	ldr	r7, [r0, #16]
 80098cc:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80098ce:	9001      	str	r0, [sp, #4]
 80098d0:	3008      	adds	r0, #8
 80098d2:	c803      	ldmia	r0, {r0, r1}
 80098d4:	ad02      	add	r5, sp, #8
 80098d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80098da:	a801      	add	r0, sp, #4
 80098dc:	f005 fae2 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80098e0:	2f00      	cmp	r7, #0
 80098e2:	d031      	beq.n	8009948 <WM__Paint1+0x88>
 80098e4:	07b3      	lsls	r3, r6, #30
 80098e6:	d52f      	bpl.n	8009948 <WM__Paint1+0x88>
 80098e8:	4620      	mov	r0, r4
 80098ea:	212e      	movs	r1, #46	; 0x2e
 80098ec:	f7fe febd 	bl	800866a <WM_SendMessageNoPara>
 80098f0:	4b16      	ldr	r3, [pc, #88]	; (800994c <WM__Paint1+0x8c>)
 80098f2:	781a      	ldrb	r2, [r3, #0]
 80098f4:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 80098f8:	f102 0201 	add.w	r2, r2, #1
 80098fc:	701a      	strb	r2, [r3, #0]
 80098fe:	461e      	mov	r6, r3
 8009900:	d00a      	beq.n	8009918 <WM__Paint1+0x58>
 8009902:	230f      	movs	r3, #15
 8009904:	9405      	str	r4, [sp, #20]
 8009906:	9304      	str	r3, [sp, #16]
 8009908:	9507      	str	r5, [sp, #28]
 800990a:	f7ff ffcf 	bl	80098ac <WM_SetDefault>
 800990e:	4620      	mov	r0, r4
 8009910:	a904      	add	r1, sp, #16
 8009912:	f7fe fa71 	bl	8007df8 <WM__SendMessage>
 8009916:	e010      	b.n	800993a <WM__Paint1+0x7a>
 8009918:	4628      	mov	r0, r5
 800991a:	f7ff ff49 	bl	80097b0 <WM__InitIVRSearch>
 800991e:	b160      	cbz	r0, 800993a <WM__Paint1+0x7a>
 8009920:	230f      	movs	r3, #15
 8009922:	9304      	str	r3, [sp, #16]
 8009924:	9405      	str	r4, [sp, #20]
 8009926:	9507      	str	r5, [sp, #28]
 8009928:	f7ff ffc0 	bl	80098ac <WM_SetDefault>
 800992c:	4620      	mov	r0, r4
 800992e:	a904      	add	r1, sp, #16
 8009930:	f7fe fa62 	bl	8007df8 <WM__SendMessage>
 8009934:	f7ff fe7a 	bl	800962c <WM__GetNextIVR>
 8009938:	e7f1      	b.n	800991e <WM__Paint1+0x5e>
 800993a:	7833      	ldrb	r3, [r6, #0]
 800993c:	4620      	mov	r0, r4
 800993e:	3b01      	subs	r3, #1
 8009940:	212f      	movs	r1, #47	; 0x2f
 8009942:	7033      	strb	r3, [r6, #0]
 8009944:	f7fe fe91 	bl	800866a <WM_SendMessageNoPara>
 8009948:	b009      	add	sp, #36	; 0x24
 800994a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800994c:	200076bc 	.word	0x200076bc

08009950 <WM__Paint>:
 8009950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009952:	b089      	sub	sp, #36	; 0x24
 8009954:	ac06      	add	r4, sp, #24
 8009956:	9003      	str	r0, [sp, #12]
 8009958:	f005 fa96 	bl	800ee88 <GUI_ALLOC_LockH>
 800995c:	f100 0208 	add.w	r2, r0, #8
 8009960:	4603      	mov	r3, r0
 8009962:	9005      	str	r0, [sp, #20]
 8009964:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009968:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800996a:	699e      	ldr	r6, [r3, #24]
 800996c:	691f      	ldr	r7, [r3, #16]
 800996e:	e884 0003 	stmia.w	r4, {r0, r1}
 8009972:	a805      	add	r0, sp, #20
 8009974:	f005 fa96 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009978:	f244 0320 	movw	r3, #16416	; 0x4020
 800997c:	402b      	ands	r3, r5
 800997e:	2b00      	cmp	r3, #0
 8009980:	d034      	beq.n	80099ec <WM__Paint+0x9c>
 8009982:	b1bf      	cbz	r7, 80099b4 <WM__Paint+0x64>
 8009984:	4620      	mov	r0, r4
 8009986:	9903      	ldr	r1, [sp, #12]
 8009988:	f7ff fa12 	bl	8008db0 <WM__ClipAtParentBorders>
 800998c:	b190      	cbz	r0, 80099b4 <WM__Paint+0x64>
 800998e:	9803      	ldr	r0, [sp, #12]
 8009990:	f7ff fcb0 	bl	80092f4 <WM_SelectWindow>
 8009994:	0769      	lsls	r1, r5, #29
 8009996:	d50f      	bpl.n	80099b8 <WM__Paint+0x68>
 8009998:	b126      	cbz	r6, 80099a4 <WM__Paint+0x54>
 800999a:	f005 0501 	and.w	r5, r5, #1
 800999e:	f085 0501 	eor.w	r5, r5, #1
 80099a2:	e000      	b.n	80099a6 <WM__Paint+0x56>
 80099a4:	2501      	movs	r5, #1
 80099a6:	9500      	str	r5, [sp, #0]
 80099a8:	4620      	mov	r0, r4
 80099aa:	4912      	ldr	r1, [pc, #72]	; (80099f4 <WM__Paint+0xa4>)
 80099ac:	aa03      	add	r2, sp, #12
 80099ae:	2300      	movs	r3, #0
 80099b0:	f000 fa9c 	bl	8009eec <GUI_MEMDEV_Draw>
 80099b4:	2400      	movs	r4, #0
 80099b6:	e003      	b.n	80099c0 <WM__Paint+0x70>
 80099b8:	9803      	ldr	r0, [sp, #12]
 80099ba:	f7ff f989 	bl	8008cd0 <WM__PaintWinAndOverlays>
 80099be:	2401      	movs	r4, #1
 80099c0:	9803      	ldr	r0, [sp, #12]
 80099c2:	f005 fa61 	bl	800ee88 <GUI_ALLOC_LockH>
 80099c6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80099c8:	9005      	str	r0, [sp, #20]
 80099ca:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 80099ce:	f023 0320 	bic.w	r3, r3, #32
 80099d2:	0492      	lsls	r2, r2, #18
 80099d4:	bf48      	it	mi
 80099d6:	f043 0304 	orrmi.w	r3, r3, #4
 80099da:	6283      	str	r3, [r0, #40]	; 0x28
 80099dc:	a805      	add	r0, sp, #20
 80099de:	f005 fa61 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80099e2:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <WM__Paint+0xa8>)
 80099e4:	881a      	ldrh	r2, [r3, #0]
 80099e6:	3a01      	subs	r2, #1
 80099e8:	801a      	strh	r2, [r3, #0]
 80099ea:	e000      	b.n	80099ee <WM__Paint+0x9e>
 80099ec:	461c      	mov	r4, r3
 80099ee:	4620      	mov	r0, r4
 80099f0:	b009      	add	sp, #36	; 0x24
 80099f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099f4:	08008d49 	.word	0x08008d49
 80099f8:	200076a8 	.word	0x200076a8

080099fc <_Exec1Draw>:
 80099fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a00:	4b1a      	ldr	r3, [pc, #104]	; (8009a6c <_Exec1Draw+0x70>)
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
 8009a08:	b09c      	sub	sp, #112	; 0x70
 8009a0a:	461d      	mov	r5, r3
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d02a      	beq.n	8009a66 <_Exec1Draw+0x6a>
 8009a10:	4b17      	ldr	r3, [pc, #92]	; (8009a70 <_Exec1Draw+0x74>)
 8009a12:	8818      	ldrh	r0, [r3, #0]
 8009a14:	b338      	cbz	r0, 8009a66 <_Exec1Draw+0x6a>
 8009a16:	4a17      	ldr	r2, [pc, #92]	; (8009a74 <_Exec1Draw+0x78>)
 8009a18:	6814      	ldr	r4, [r2, #0]
 8009a1a:	4616      	mov	r6, r2
 8009a1c:	b90c      	cbnz	r4, 8009a22 <_Exec1Draw+0x26>
 8009a1e:	4b16      	ldr	r3, [pc, #88]	; (8009a78 <_Exec1Draw+0x7c>)
 8009a20:	681c      	ldr	r4, [r3, #0]
 8009a22:	4668      	mov	r0, sp
 8009a24:	f003 ffbc 	bl	800d9a0 <GUI_SaveContext_W>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8009a2c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009a2e:	b924      	cbnz	r4, 8009a3a <_Exec1Draw+0x3e>
 8009a30:	2400      	movs	r4, #0
 8009a32:	e00d      	b.n	8009a50 <_Exec1Draw+0x54>
 8009a34:	f1b8 0f00 	cmp.w	r8, #0
 8009a38:	d10a      	bne.n	8009a50 <_Exec1Draw+0x54>
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f7ff ff88 	bl	8009950 <WM__Paint>
 8009a40:	4680      	mov	r8, r0
 8009a42:	4620      	mov	r0, r4
 8009a44:	f005 fa16 	bl	800ee74 <GUI_ALLOC_h2p>
 8009a48:	6944      	ldr	r4, [r0, #20]
 8009a4a:	2c00      	cmp	r4, #0
 8009a4c:	d1f2      	bne.n	8009a34 <_Exec1Draw+0x38>
 8009a4e:	e7ef      	b.n	8009a30 <_Exec1Draw+0x34>
 8009a50:	4638      	mov	r0, r7
 8009a52:	6034      	str	r4, [r6, #0]
 8009a54:	f003 ffc3 	bl	800d9de <GUI_SetColor>
 8009a58:	4628      	mov	r0, r5
 8009a5a:	f003 ffbe 	bl	800d9da <GUI_SetBkColor>
 8009a5e:	4668      	mov	r0, sp
 8009a60:	f003 ffa8 	bl	800d9b4 <GUI_RestoreContext>
 8009a64:	2001      	movs	r0, #1
 8009a66:	b01c      	add	sp, #112	; 0x70
 8009a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a6c:	20000084 	.word	0x20000084
 8009a70:	200076a8 	.word	0x200076a8
 8009a74:	20002a0c 	.word	0x20002a0c
 8009a78:	200076ac 	.word	0x200076ac

08009a7c <WM_Exec>:
 8009a7c:	4b18      	ldr	r3, [pc, #96]	; (8009ae0 <WM_Exec+0x64>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	b570      	push	{r4, r5, r6, lr}
 8009a82:	b103      	cbz	r3, 8009a86 <WM_Exec+0xa>
 8009a84:	4798      	blx	r3
 8009a86:	2500      	movs	r5, #0
 8009a88:	f7ff fd88 	bl	800959c <_Exec1Input>
 8009a8c:	b108      	cbz	r0, 8009a92 <WM_Exec+0x16>
 8009a8e:	2501      	movs	r5, #1
 8009a90:	e7fa      	b.n	8009a88 <WM_Exec+0xc>
 8009a92:	4b14      	ldr	r3, [pc, #80]	; (8009ae4 <WM_Exec+0x68>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 8009a9a:	b144      	cbz	r4, 8009aae <WM_Exec+0x32>
 8009a9c:	4b12      	ldr	r3, [pc, #72]	; (8009ae8 <WM_Exec+0x6c>)
 8009a9e:	881c      	ldrh	r4, [r3, #0]
 8009aa0:	b12c      	cbz	r4, 8009aae <WM_Exec+0x32>
 8009aa2:	4b12      	ldr	r3, [pc, #72]	; (8009aec <WM_Exec+0x70>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	b1a3      	cbz	r3, 8009ad2 <WM_Exec+0x56>
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4798      	blx	r3
 8009aac:	2401      	movs	r4, #1
 8009aae:	f7ff ffa5 	bl	80099fc <_Exec1Draw>
 8009ab2:	4606      	mov	r6, r0
 8009ab4:	b108      	cbz	r0, 8009aba <WM_Exec+0x3e>
 8009ab6:	2501      	movs	r5, #1
 8009ab8:	e7f9      	b.n	8009aae <WM_Exec+0x32>
 8009aba:	b174      	cbz	r4, 8009ada <WM_Exec+0x5e>
 8009abc:	4b0b      	ldr	r3, [pc, #44]	; (8009aec <WM_Exec+0x70>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	b123      	cbz	r3, 8009acc <WM_Exec+0x50>
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	4798      	blx	r3
 8009ac6:	4b0a      	ldr	r3, [pc, #40]	; (8009af0 <WM_Exec+0x74>)
 8009ac8:	601e      	str	r6, [r3, #0]
 8009aca:	e006      	b.n	8009ada <WM_Exec+0x5e>
 8009acc:	f003 f856 	bl	800cb7c <GUI__ManageCache>
 8009ad0:	e003      	b.n	8009ada <WM_Exec+0x5e>
 8009ad2:	2001      	movs	r0, #1
 8009ad4:	f003 f852 	bl	800cb7c <GUI__ManageCache>
 8009ad8:	e7e8      	b.n	8009aac <WM_Exec+0x30>
 8009ada:	4628      	mov	r0, r5
 8009adc:	bd70      	pop	{r4, r5, r6, pc}
 8009ade:	bf00      	nop
 8009ae0:	2000769c 	.word	0x2000769c
 8009ae4:	20000084 	.word	0x20000084
 8009ae8:	200076a8 	.word	0x200076a8
 8009aec:	200076d0 	.word	0x200076d0
 8009af0:	200076b8 	.word	0x200076b8

08009af4 <WM_Activate>:
 8009af4:	4b02      	ldr	r3, [pc, #8]	; (8009b00 <WM_Activate+0xc>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009afe:	4770      	bx	lr
 8009b00:	20000084 	.word	0x20000084

08009b04 <WM_Deactivate>:
 8009b04:	4b03      	ldr	r3, [pc, #12]	; (8009b14 <WM_Deactivate+0x10>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009b0e:	f002 bdb9 	b.w	800c684 <LCD_SetClipRectMax>
 8009b12:	bf00      	nop
 8009b14:	20000084 	.word	0x20000084

08009b18 <WM_DefaultProc>:
 8009b18:	b510      	push	{r4, lr}
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	6840      	ldr	r0, [r0, #4]
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	68e1      	ldr	r1, [r4, #12]
 8009b22:	2b17      	cmp	r3, #23
 8009b24:	d00f      	beq.n	8009b46 <WM_DefaultProc+0x2e>
 8009b26:	dc06      	bgt.n	8009b36 <WM_DefaultProc+0x1e>
 8009b28:	2b0e      	cmp	r3, #14
 8009b2a:	d00e      	beq.n	8009b4a <WM_DefaultProc+0x32>
 8009b2c:	2b14      	cmp	r3, #20
 8009b2e:	d114      	bne.n	8009b5a <WM_DefaultProc+0x42>
 8009b30:	f7fe fa16 	bl	8007f60 <WM__GetClientRectEx>
 8009b34:	e011      	b.n	8009b5a <WM_DefaultProc+0x42>
 8009b36:	2b22      	cmp	r3, #34	; 0x22
 8009b38:	d00c      	beq.n	8009b54 <WM_DefaultProc+0x3c>
 8009b3a:	2b28      	cmp	r3, #40	; 0x28
 8009b3c:	d10d      	bne.n	8009b5a <WM_DefaultProc+0x42>
 8009b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b42:	f7ff bbc9 	b.w	80092d8 <WM_InvalidateWindow>
 8009b46:	60e0      	str	r0, [r4, #12]
 8009b48:	bd10      	pop	{r4, pc}
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b50:	f7fe bd8d 	b.w	800866e <WM_SendToParent>
 8009b54:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009b58:	e000      	b.n	8009b5c <WM_DefaultProc+0x44>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	60e3      	str	r3, [r4, #12]
 8009b5e:	bd10      	pop	{r4, pc}

08009b60 <_cbBackWin>:
 8009b60:	6803      	ldr	r3, [r0, #0]
 8009b62:	2b0e      	cmp	r3, #14
 8009b64:	b510      	push	{r4, lr}
 8009b66:	4604      	mov	r4, r0
 8009b68:	d002      	beq.n	8009b70 <_cbBackWin+0x10>
 8009b6a:	2b0f      	cmp	r3, #15
 8009b6c:	d009      	beq.n	8009b82 <_cbBackWin+0x22>
 8009b6e:	e020      	b.n	8009bb2 <_cbBackWin+0x52>
 8009b70:	68c3      	ldr	r3, [r0, #12]
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	2a01      	cmp	r2, #1
 8009b76:	d121      	bne.n	8009bbc <_cbBackWin+0x5c>
 8009b78:	6818      	ldr	r0, [r3, #0]
 8009b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b7e:	f003 baa9 	b.w	800d0d4 <GUI_StoreKey>
 8009b82:	4a0f      	ldr	r2, [pc, #60]	; (8009bc0 <_cbBackWin+0x60>)
 8009b84:	6843      	ldr	r3, [r0, #4]
 8009b86:	6811      	ldr	r1, [r2, #0]
 8009b88:	428b      	cmp	r3, r1
 8009b8a:	d006      	beq.n	8009b9a <_cbBackWin+0x3a>
 8009b8c:	6852      	ldr	r2, [r2, #4]
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	bf14      	ite	ne
 8009b92:	f04f 33ff 	movne.w	r3, #4294967295
 8009b96:	2301      	moveq	r3, #1
 8009b98:	e000      	b.n	8009b9c <_cbBackWin+0x3c>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	4a09      	ldr	r2, [pc, #36]	; (8009bc4 <_cbBackWin+0x64>)
 8009b9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009ba2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009ba6:	4298      	cmp	r0, r3
 8009ba8:	d003      	beq.n	8009bb2 <_cbBackWin+0x52>
 8009baa:	f003 ff16 	bl	800d9da <GUI_SetBkColor>
 8009bae:	f003 fd7b 	bl	800d6a8 <GUI_Clear>
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb8:	f7ff bfae 	b.w	8009b18 <WM_DefaultProc>
 8009bbc:	bd10      	pop	{r4, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20007690 	.word	0x20007690
 8009bc4:	200076c4 	.word	0x200076c4

08009bc8 <WM_Init>:
 8009bc8:	b530      	push	{r4, r5, lr}
 8009bca:	4b2b      	ldr	r3, [pc, #172]	; (8009c78 <WM_Init+0xb0>)
 8009bcc:	7818      	ldrb	r0, [r3, #0]
 8009bce:	b085      	sub	sp, #20
 8009bd0:	461d      	mov	r5, r3
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d14d      	bne.n	8009c72 <WM_Init+0xaa>
 8009bd6:	4b29      	ldr	r3, [pc, #164]	; (8009c7c <WM_Init+0xb4>)
 8009bd8:	6018      	str	r0, [r3, #0]
 8009bda:	4b29      	ldr	r3, [pc, #164]	; (8009c80 <WM_Init+0xb8>)
 8009bdc:	6018      	str	r0, [r3, #0]
 8009bde:	4b29      	ldr	r3, [pc, #164]	; (8009c84 <WM_Init+0xbc>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	6458      	str	r0, [r3, #68]	; 0x44
 8009be4:	4b28      	ldr	r3, [pc, #160]	; (8009c88 <WM_Init+0xc0>)
 8009be6:	8018      	strh	r0, [r3, #0]
 8009be8:	4b28      	ldr	r3, [pc, #160]	; (8009c8c <WM_Init+0xc4>)
 8009bea:	4604      	mov	r4, r0
 8009bec:	8018      	strh	r0, [r3, #0]
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f003 fc10 	bl	800d414 <GUI_DEVICE__GetpDriver>
 8009bf4:	b1c0      	cbz	r0, 8009c28 <WM_Init+0x60>
 8009bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfa:	2302      	movs	r3, #2
 8009bfc:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009c00:	2000      	movs	r0, #0
 8009c02:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8009c06:	4b22      	ldr	r3, [pc, #136]	; (8009c90 <WM_Init+0xc8>)
 8009c08:	9302      	str	r3, [sp, #8]
 8009c0a:	9003      	str	r0, [sp, #12]
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	4601      	mov	r1, r0
 8009c10:	f7ff fb90 	bl	8009334 <WM_CreateWindowAsChild>
 8009c14:	4b1f      	ldr	r3, [pc, #124]	; (8009c94 <WM_Init+0xcc>)
 8009c16:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009c1a:	4b1f      	ldr	r3, [pc, #124]	; (8009c98 <WM_Init+0xd0>)
 8009c1c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8009c20:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8009c24:	f7ff fb58 	bl	80092d8 <WM_InvalidateWindow>
 8009c28:	3401      	adds	r4, #1
 8009c2a:	2c02      	cmp	r4, #2
 8009c2c:	d1df      	bne.n	8009bee <WM_Init+0x26>
 8009c2e:	481b      	ldr	r0, [pc, #108]	; (8009c9c <WM_Init+0xd4>)
 8009c30:	f7fe f98e 	bl	8007f50 <WM__AddCriticalHandle>
 8009c34:	481a      	ldr	r0, [pc, #104]	; (8009ca0 <WM_Init+0xd8>)
 8009c36:	f7fe f98b 	bl	8007f50 <WM__AddCriticalHandle>
 8009c3a:	481a      	ldr	r0, [pc, #104]	; (8009ca4 <WM_Init+0xdc>)
 8009c3c:	f7fe f988 	bl	8007f50 <WM__AddCriticalHandle>
 8009c40:	4819      	ldr	r0, [pc, #100]	; (8009ca8 <WM_Init+0xe0>)
 8009c42:	f7fe f985 	bl	8007f50 <WM__AddCriticalHandle>
 8009c46:	4819      	ldr	r0, [pc, #100]	; (8009cac <WM_Init+0xe4>)
 8009c48:	f7fe f982 	bl	8007f50 <WM__AddCriticalHandle>
 8009c4c:	4818      	ldr	r0, [pc, #96]	; (8009cb0 <WM_Init+0xe8>)
 8009c4e:	f7fe f97f 	bl	8007f50 <WM__AddCriticalHandle>
 8009c52:	4b10      	ldr	r3, [pc, #64]	; (8009c94 <WM_Init+0xcc>)
 8009c54:	6818      	ldr	r0, [r3, #0]
 8009c56:	f7ff fb4d 	bl	80092f4 <WM_SelectWindow>
 8009c5a:	f7ff ff4b 	bl	8009af4 <WM_Activate>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	702b      	strb	r3, [r5, #0]
 8009c62:	4814      	ldr	r0, [pc, #80]	; (8009cb4 <WM_Init+0xec>)
 8009c64:	4b14      	ldr	r3, [pc, #80]	; (8009cb8 <WM_Init+0xf0>)
 8009c66:	6003      	str	r3, [r0, #0]
 8009c68:	b005      	add	sp, #20
 8009c6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c6e:	f003 bd2b 	b.w	800d6c8 <GUI__RegisterExit>
 8009c72:	b005      	add	sp, #20
 8009c74:	bd30      	pop	{r4, r5, pc}
 8009c76:	bf00      	nop
 8009c78:	20002a10 	.word	0x20002a10
 8009c7c:	200076ac 	.word	0x200076ac
 8009c80:	20002a0c 	.word	0x20002a0c
 8009c84:	20000084 	.word	0x20000084
 8009c88:	200076a8 	.word	0x200076a8
 8009c8c:	20007688 	.word	0x20007688
 8009c90:	08009b61 	.word	0x08009b61
 8009c94:	20007690 	.word	0x20007690
 8009c98:	200076c4 	.word	0x200076c4
 8009c9c:	20007828 	.word	0x20007828
 8009ca0:	20007818 	.word	0x20007818
 8009ca4:	20007808 	.word	0x20007808
 8009ca8:	20007830 	.word	0x20007830
 8009cac:	20007820 	.word	0x20007820
 8009cb0:	20007810 	.word	0x20007810
 8009cb4:	200029e8 	.word	0x200029e8
 8009cb8:	08008909 	.word	0x08008909

08009cbc <_CreateStaticDevice>:
 8009cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	b087      	sub	sp, #28
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	f005 f8e0 	bl	800ee88 <GUI_ALLOC_LockH>
 8009cc8:	af06      	add	r7, sp, #24
 8009cca:	f8b0 8000 	ldrh.w	r8, [r0]
 8009cce:	8886      	ldrh	r6, [r0, #4]
 8009cd0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 8009cd4:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 8009cd8:	f847 0d04 	str.w	r0, [r7, #-4]!
 8009cdc:	fa0f f888 	sxth.w	r8, r8
 8009ce0:	b236      	sxth	r6, r6
 8009ce2:	ebc8 0606 	rsb	r6, r8, r6
 8009ce6:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8009cea:	3601      	adds	r6, #1
 8009cec:	4638      	mov	r0, r7
 8009cee:	fa0f f989 	sxth.w	r9, r9
 8009cf2:	fa0f f58b 	sxth.w	r5, fp
 8009cf6:	f005 f8d5 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009cfa:	ebc9 0505 	rsb	r5, r9, r5
 8009cfe:	2e00      	cmp	r6, #0
 8009d00:	f105 0501 	add.w	r5, r5, #1
 8009d04:	dd4d      	ble.n	8009da2 <_CreateStaticDevice+0xe6>
 8009d06:	2d00      	cmp	r5, #0
 8009d08:	dd4b      	ble.n	8009da2 <_CreateStaticDevice+0xe6>
 8009d0a:	f1ba 0f00 	cmp.w	sl, #0
 8009d0e:	d04a      	beq.n	8009da6 <_CreateStaticDevice+0xea>
 8009d10:	4650      	mov	r0, sl
 8009d12:	f005 f8b9 	bl	800ee88 <GUI_ALLOC_LockH>
 8009d16:	ab06      	add	r3, sp, #24
 8009d18:	8886      	ldrh	r6, [r0, #4]
 8009d1a:	f843 0d08 	str.w	r0, [r3, #-8]!
 8009d1e:	88c5      	ldrh	r5, [r0, #6]
 8009d20:	b236      	sxth	r6, r6
 8009d22:	4618      	mov	r0, r3
 8009d24:	f005 f8be 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009d28:	4546      	cmp	r6, r8
 8009d2a:	d102      	bne.n	8009d32 <_CreateStaticDevice+0x76>
 8009d2c:	b22d      	sxth	r5, r5
 8009d2e:	454d      	cmp	r5, r9
 8009d30:	d032      	beq.n	8009d98 <_CreateStaticDevice+0xdc>
 8009d32:	4650      	mov	r0, sl
 8009d34:	4641      	mov	r1, r8
 8009d36:	464a      	mov	r2, r9
 8009d38:	f000 f888 	bl	8009e4c <GUI_MEMDEV_SetOrg>
 8009d3c:	e02c      	b.n	8009d98 <_CreateStaticDevice+0xdc>
 8009d3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d44:	6283      	str	r3, [r0, #40]	; 0x28
 8009d46:	4638      	mov	r0, r7
 8009d48:	f005 f8ac 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009d4c:	4640      	mov	r0, r8
 8009d4e:	f000 ff99 	bl	800ac84 <GUI_MEMDEV_Select>
 8009d52:	4607      	mov	r7, r0
 8009d54:	4650      	mov	r0, sl
 8009d56:	f003 f995 	bl	800d084 <GUI__AlphaPreserveTrans>
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	f000 f8b6 	bl	8009ecc <GUI_MEMDEV_GetDataPtr>
 8009d60:	4a2d      	ldr	r2, [pc, #180]	; (8009e18 <_CreateStaticDevice+0x15c>)
 8009d62:	4b2e      	ldr	r3, [pc, #184]	; (8009e1c <_CreateStaticDevice+0x160>)
 8009d64:	7811      	ldrb	r1, [r2, #0]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4375      	muls	r5, r6
 8009d6a:	00aa      	lsls	r2, r5, #2
 8009d6c:	4e2c      	ldr	r6, [pc, #176]	; (8009e20 <_CreateStaticDevice+0x164>)
 8009d6e:	4d2d      	ldr	r5, [pc, #180]	; (8009e24 <_CreateStaticDevice+0x168>)
 8009d70:	4798      	blx	r3
 8009d72:	4620      	mov	r0, r4
 8009d74:	f8d5 8000 	ldr.w	r8, [r5]
 8009d78:	6034      	str	r4, [r6, #0]
 8009d7a:	f7fe fb4a 	bl	8008412 <WM_GetWindowOrgX>
 8009d7e:	6028      	str	r0, [r5, #0]
 8009d80:	4620      	mov	r0, r4
 8009d82:	f7ff fd9d 	bl	80098c0 <WM__Paint1>
 8009d86:	2000      	movs	r0, #0
 8009d88:	f8c5 8000 	str.w	r8, [r5]
 8009d8c:	6030      	str	r0, [r6, #0]
 8009d8e:	f003 f979 	bl	800d084 <GUI__AlphaPreserveTrans>
 8009d92:	4638      	mov	r0, r7
 8009d94:	f000 ff76 	bl	800ac84 <GUI_MEMDEV_Select>
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f005 f86b 	bl	800ee74 <GUI_ALLOC_h2p>
 8009d9e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009da0:	e037      	b.n	8009e12 <_CreateStaticDevice+0x156>
 8009da2:	2000      	movs	r0, #0
 8009da4:	e035      	b.n	8009e12 <_CreateStaticDevice+0x156>
 8009da6:	f7fe fabb 	bl	8008320 <WM_GetDesktopWindow>
 8009daa:	4284      	cmp	r4, r0
 8009dac:	d112      	bne.n	8009dd4 <_CreateStaticDevice+0x118>
 8009dae:	f002 f8fb 	bl	800bfa8 <LCD_GetXSize>
 8009db2:	4682      	mov	sl, r0
 8009db4:	f002 f900 	bl	800bfb8 <LCD_GetYSize>
 8009db8:	4556      	cmp	r6, sl
 8009dba:	dc02      	bgt.n	8009dc2 <_CreateStaticDevice+0x106>
 8009dbc:	4285      	cmp	r5, r0
 8009dbe:	dd09      	ble.n	8009dd4 <_CreateStaticDevice+0x118>
 8009dc0:	e000      	b.n	8009dc4 <_CreateStaticDevice+0x108>
 8009dc2:	4656      	mov	r6, sl
 8009dc4:	4285      	cmp	r5, r0
 8009dc6:	bfa8      	it	ge
 8009dc8:	4605      	movge	r5, r0
 8009dca:	4631      	mov	r1, r6
 8009dcc:	4620      	mov	r0, r4
 8009dce:	462a      	mov	r2, r5
 8009dd0:	f7fe fcb4 	bl	800873c <WM_SetSize>
 8009dd4:	4b14      	ldr	r3, [pc, #80]	; (8009e28 <_CreateStaticDevice+0x16c>)
 8009dd6:	9301      	str	r3, [sp, #4]
 8009dd8:	f04f 0a01 	mov.w	sl, #1
 8009ddc:	4b13      	ldr	r3, [pc, #76]	; (8009e2c <_CreateStaticDevice+0x170>)
 8009dde:	9302      	str	r3, [sp, #8]
 8009de0:	4640      	mov	r0, r8
 8009de2:	4649      	mov	r1, r9
 8009de4:	4632      	mov	r2, r6
 8009de6:	462b      	mov	r3, r5
 8009de8:	f8cd a000 	str.w	sl, [sp]
 8009dec:	f000 fe54 	bl	800aa98 <GUI_MEMDEV__CreateFixed>
 8009df0:	4680      	mov	r8, r0
 8009df2:	4620      	mov	r0, r4
 8009df4:	f005 f848 	bl	800ee88 <GUI_ALLOC_LockH>
 8009df8:	9005      	str	r0, [sp, #20]
 8009dfa:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 8009dfe:	f1b8 0f00 	cmp.w	r8, #0
 8009e02:	d19c      	bne.n	8009d3e <_CreateStaticDevice+0x82>
 8009e04:	4638      	mov	r0, r7
 8009e06:	f005 f84d 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f7ff fd58 	bl	80098c0 <WM__Paint1>
 8009e10:	4640      	mov	r0, r8
 8009e12:	b007      	add	sp, #28
 8009e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e18:	20000060 	.word	0x20000060
 8009e1c:	20000070 	.word	0x20000070
 8009e20:	200076dc 	.word	0x200076dc
 8009e24:	200076f4 	.word	0x200076f4
 8009e28:	080131a8 	.word	0x080131a8
 8009e2c:	080142ac 	.word	0x080142ac

08009e30 <GUI_MEMDEV_Paint1Static>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	4605      	mov	r5, r0
 8009e34:	2405      	movs	r4, #5
 8009e36:	4628      	mov	r0, r5
 8009e38:	f7ff ff40 	bl	8009cbc <_CreateStaticDevice>
 8009e3c:	b910      	cbnz	r0, 8009e44 <GUI_MEMDEV_Paint1Static+0x14>
 8009e3e:	3c01      	subs	r4, #1
 8009e40:	d1f9      	bne.n	8009e36 <GUI_MEMDEV_Paint1Static+0x6>
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e48:	f006 bafa 	b.w	8010440 <GUI_MEMDEV_Write>

08009e4c <GUI_MEMDEV_SetOrg>:
 8009e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e4e:	460d      	mov	r5, r1
 8009e50:	4614      	mov	r4, r2
 8009e52:	b918      	cbnz	r0, 8009e5c <GUI_MEMDEV_SetOrg+0x10>
 8009e54:	4b11      	ldr	r3, [pc, #68]	; (8009e9c <GUI_MEMDEV_SetOrg+0x50>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009e5a:	b1e8      	cbz	r0, 8009e98 <GUI_MEMDEV_SetOrg+0x4c>
 8009e5c:	f005 f814 	bl	800ee88 <GUI_ALLOC_LockH>
 8009e60:	b2a4      	uxth	r4, r4
 8009e62:	b2ad      	uxth	r5, r5
 8009e64:	80c4      	strh	r4, [r0, #6]
 8009e66:	8085      	strh	r5, [r0, #4]
 8009e68:	9000      	str	r0, [sp, #0]
 8009e6a:	f002 fc0b 	bl	800c684 <LCD_SetClipRectMax>
 8009e6e:	9b00      	ldr	r3, [sp, #0]
 8009e70:	6958      	ldr	r0, [r3, #20]
 8009e72:	b170      	cbz	r0, 8009e92 <GUI_MEMDEV_SetOrg+0x46>
 8009e74:	f005 f808 	bl	800ee88 <GUI_ALLOC_LockH>
 8009e78:	9b00      	ldr	r3, [sp, #0]
 8009e7a:	9001      	str	r0, [sp, #4]
 8009e7c:	891a      	ldrh	r2, [r3, #8]
 8009e7e:	895b      	ldrh	r3, [r3, #10]
 8009e80:	8082      	strh	r2, [r0, #4]
 8009e82:	80c3      	strh	r3, [r0, #6]
 8009e84:	b112      	cbz	r2, 8009e8c <GUI_MEMDEV_SetOrg+0x40>
 8009e86:	b10b      	cbz	r3, 8009e8c <GUI_MEMDEV_SetOrg+0x40>
 8009e88:	8005      	strh	r5, [r0, #0]
 8009e8a:	8044      	strh	r4, [r0, #2]
 8009e8c:	a801      	add	r0, sp, #4
 8009e8e:	f005 f809 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009e92:	4668      	mov	r0, sp
 8009e94:	f005 f806 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009e98:	b003      	add	sp, #12
 8009e9a:	bd30      	pop	{r4, r5, pc}
 8009e9c:	20000084 	.word	0x20000084

08009ea0 <GUI_MEMDEV_GetYSize>:
 8009ea0:	b513      	push	{r0, r1, r4, lr}
 8009ea2:	b920      	cbnz	r0, 8009eae <GUI_MEMDEV_GetYSize+0xe>
 8009ea4:	4b08      	ldr	r3, [pc, #32]	; (8009ec8 <GUI_MEMDEV_GetYSize+0x28>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009eaa:	4604      	mov	r4, r0
 8009eac:	b148      	cbz	r0, 8009ec2 <GUI_MEMDEV_GetYSize+0x22>
 8009eae:	f004 ffeb 	bl	800ee88 <GUI_ALLOC_LockH>
 8009eb2:	ab02      	add	r3, sp, #8
 8009eb4:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 8009eb8:	f843 0d04 	str.w	r0, [r3, #-4]!
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f004 fff1 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	b002      	add	sp, #8
 8009ec6:	bd10      	pop	{r4, pc}
 8009ec8:	20000084 	.word	0x20000084

08009ecc <GUI_MEMDEV_GetDataPtr>:
 8009ecc:	b513      	push	{r0, r1, r4, lr}
 8009ece:	b150      	cbz	r0, 8009ee6 <GUI_MEMDEV_GetDataPtr+0x1a>
 8009ed0:	f004 ffda 	bl	800ee88 <GUI_ALLOC_LockH>
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	a802      	add	r0, sp, #8
 8009ed8:	f840 4d04 	str.w	r4, [r0, #-4]!
 8009edc:	f004 ffe2 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8009ee0:	f104 0018 	add.w	r0, r4, #24
 8009ee4:	e7ff      	b.n	8009ee6 <GUI_MEMDEV_GetDataPtr+0x1a>
 8009ee6:	b002      	add	sp, #8
 8009ee8:	bd10      	pop	{r4, pc}
	...

08009eec <GUI_MEMDEV_Draw>:
 8009eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef0:	461e      	mov	r6, r3
 8009ef2:	b089      	sub	sp, #36	; 0x24
 8009ef4:	4b4e      	ldr	r3, [pc, #312]	; (800a030 <GUI_MEMDEV_Draw+0x144>)
 8009ef6:	9204      	str	r2, [sp, #16]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	9103      	str	r1, [sp, #12]
 8009efc:	7c54      	ldrb	r4, [r2, #17]
 8009efe:	4a4d      	ldr	r2, [pc, #308]	; (800a034 <GUI_MEMDEV_Draw+0x148>)
 8009f00:	5712      	ldrsb	r2, [r2, r4]
 8009f02:	2a01      	cmp	r2, #1
 8009f04:	4605      	mov	r5, r0
 8009f06:	469b      	mov	fp, r3
 8009f08:	4620      	mov	r0, r4
 8009f0a:	dd06      	ble.n	8009f1a <GUI_MEMDEV_Draw+0x2e>
 8009f0c:	f002 f83a 	bl	800bf84 <LCD_GetXSizeEx>
 8009f10:	4607      	mov	r7, r0
 8009f12:	4620      	mov	r0, r4
 8009f14:	f002 f839 	bl	800bf8a <LCD_GetYSizeEx>
 8009f18:	e005      	b.n	8009f26 <GUI_MEMDEV_Draw+0x3a>
 8009f1a:	f002 f839 	bl	800bf90 <LCD_GetVXSizeEx>
 8009f1e:	4607      	mov	r7, r0
 8009f20:	4620      	mov	r0, r4
 8009f22:	f002 f838 	bl	800bf96 <LCD_GetVYSizeEx>
 8009f26:	4604      	mov	r4, r0
 8009f28:	b325      	cbz	r5, 8009f74 <GUI_MEMDEV_Draw+0x88>
 8009f2a:	a806      	add	r0, sp, #24
 8009f2c:	a907      	add	r1, sp, #28
 8009f2e:	f003 fc91 	bl	800d854 <GUI_GetOrg>
 8009f32:	9b06      	ldr	r3, [sp, #24]
 8009f34:	f9b5 a000 	ldrsh.w	sl, [r5]
 8009f38:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8009f3c:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 8009f40:	441f      	add	r7, r3
 8009f42:	9b07      	ldr	r3, [sp, #28]
 8009f44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f48:	3f01      	subs	r7, #1
 8009f4a:	4297      	cmp	r7, r2
 8009f4c:	bfd4      	ite	le
 8009f4e:	ebca 0707 	rsble	r7, sl, r7
 8009f52:	ebca 0702 	rsbgt	r7, sl, r2
 8009f56:	441c      	add	r4, r3
 8009f58:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8009f5c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8009f60:	3c01      	subs	r4, #1
 8009f62:	4294      	cmp	r4, r2
 8009f64:	bfd4      	ite	le
 8009f66:	ebc8 0404 	rsble	r4, r8, r4
 8009f6a:	ebc8 0402 	rsbgt	r4, r8, r2
 8009f6e:	3701      	adds	r7, #1
 8009f70:	3401      	adds	r4, #1
 8009f72:	e001      	b.n	8009f78 <GUI_MEMDEV_Draw+0x8c>
 8009f74:	46a8      	mov	r8, r5
 8009f76:	46aa      	mov	sl, r5
 8009f78:	b906      	cbnz	r6, 8009f7c <GUI_MEMDEV_Draw+0x90>
 8009f7a:	4266      	negs	r6, r4
 8009f7c:	2f00      	cmp	r7, #0
 8009f7e:	dd52      	ble.n	800a026 <GUI_MEMDEV_Draw+0x13a>
 8009f80:	2c00      	cmp	r4, #0
 8009f82:	dd50      	ble.n	800a026 <GUI_MEMDEV_Draw+0x13a>
 8009f84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	4650      	mov	r0, sl
 8009f8a:	4641      	mov	r1, r8
 8009f8c:	463a      	mov	r2, r7
 8009f8e:	4633      	mov	r3, r6
 8009f90:	f000 fe3c 	bl	800ac0c <GUI_MEMDEV_CreateEx>
 8009f94:	4605      	mov	r5, r0
 8009f96:	b920      	cbnz	r0, 8009fa2 <GUI_MEMDEV_Draw+0xb6>
 8009f98:	9804      	ldr	r0, [sp, #16]
 8009f9a:	9b03      	ldr	r3, [sp, #12]
 8009f9c:	4798      	blx	r3
 8009f9e:	2001      	movs	r0, #1
 8009fa0:	e042      	b.n	800a028 <GUI_MEMDEV_Draw+0x13c>
 8009fa2:	f7ff ff7d 	bl	8009ea0 <GUI_MEMDEV_GetYSize>
 8009fa6:	42a0      	cmp	r0, r4
 8009fa8:	4606      	mov	r6, r0
 8009faa:	d006      	beq.n	8009fba <GUI_MEMDEV_Draw+0xce>
 8009fac:	f8db 3000 	ldr.w	r3, [fp]
 8009fb0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009fb2:	b110      	cbz	r0, 8009fba <GUI_MEMDEV_Draw+0xce>
 8009fb4:	2132      	movs	r1, #50	; 0x32
 8009fb6:	f7fd ff3d 	bl	8007e34 <WM__SendMessageNoPara>
 8009fba:	4628      	mov	r0, r5
 8009fbc:	f000 fe62 	bl	800ac84 <GUI_MEMDEV_Select>
 8009fc0:	4273      	negs	r3, r6
 8009fc2:	9305      	str	r3, [sp, #20]
 8009fc4:	46a1      	mov	r9, r4
 8009fc6:	2700      	movs	r7, #0
 8009fc8:	45b1      	cmp	r9, r6
 8009fca:	da03      	bge.n	8009fd4 <GUI_MEMDEV_Draw+0xe8>
 8009fcc:	4628      	mov	r0, r5
 8009fce:	4649      	mov	r1, r9
 8009fd0:	f006 fb36 	bl	8010640 <GUI_MEMDEV_ReduceYSize>
 8009fd4:	b147      	cbz	r7, 8009fe8 <GUI_MEMDEV_Draw+0xfc>
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	4651      	mov	r1, sl
 8009fda:	eb07 0208 	add.w	r2, r7, r8
 8009fde:	f7ff ff35 	bl	8009e4c <GUI_MEMDEV_SetOrg>
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	f006 fb42 	bl	801066c <GUI_MEMDEV_Clear>
 8009fe8:	9b03      	ldr	r3, [sp, #12]
 8009fea:	9804      	ldr	r0, [sp, #16]
 8009fec:	4798      	blx	r3
 8009fee:	4b12      	ldr	r3, [pc, #72]	; (800a038 <GUI_MEMDEV_Draw+0x14c>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	b10b      	cbz	r3, 8009ff8 <GUI_MEMDEV_Draw+0x10c>
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	4798      	blx	r3
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	f000 febb 	bl	800ad74 <GUI_MEMDEV_CopyToLCD>
 8009ffe:	4437      	add	r7, r6
 800a000:	9b05      	ldr	r3, [sp, #20]
 800a002:	42a7      	cmp	r7, r4
 800a004:	4499      	add	r9, r3
 800a006:	dbdf      	blt.n	8009fc8 <GUI_MEMDEV_Draw+0xdc>
 800a008:	4628      	mov	r0, r5
 800a00a:	f000 fddd 	bl	800abc8 <GUI_MEMDEV_Delete>
 800a00e:	2000      	movs	r0, #0
 800a010:	f000 fe38 	bl	800ac84 <GUI_MEMDEV_Select>
 800a014:	42a6      	cmp	r6, r4
 800a016:	d006      	beq.n	800a026 <GUI_MEMDEV_Draw+0x13a>
 800a018:	f8db 3000 	ldr.w	r3, [fp]
 800a01c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a01e:	b110      	cbz	r0, 800a026 <GUI_MEMDEV_Draw+0x13a>
 800a020:	2133      	movs	r1, #51	; 0x33
 800a022:	f7fd ff07 	bl	8007e34 <WM__SendMessageNoPara>
 800a026:	2000      	movs	r0, #0
 800a028:	b009      	add	sp, #36	; 0x24
 800a02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02e:	bf00      	nop
 800a030:	20000084 	.word	0x20000084
 800a034:	200076e4 	.word	0x200076e4
 800a038:	20002a14 	.word	0x20002a14

0800a03c <_GetDevData>:
 800a03c:	4802      	ldr	r0, [pc, #8]	; (800a048 <_GetDevData+0xc>)
 800a03e:	2901      	cmp	r1, #1
 800a040:	bf18      	it	ne
 800a042:	2000      	movne	r0, #0
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	080131a8 	.word	0x080131a8

0800a04c <_GetDevFunc>:
 800a04c:	4802      	ldr	r0, [pc, #8]	; (800a058 <_GetDevFunc+0xc>)
 800a04e:	2916      	cmp	r1, #22
 800a050:	bf18      	it	ne
 800a052:	2000      	movne	r0, #0
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	08010251 	.word	0x08010251

0800a05c <_GetDevProp>:
 800a05c:	2908      	cmp	r1, #8
 800a05e:	bf0c      	ite	eq
 800a060:	2020      	moveq	r0, #32
 800a062:	2000      	movne	r0, #0
 800a064:	4770      	bx	lr

0800a066 <_SetOrg>:
 800a066:	b508      	push	{r3, lr}
 800a068:	6800      	ldr	r0, [r0, #0]
 800a06a:	68c3      	ldr	r3, [r0, #12]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	4798      	blx	r3
 800a070:	bd08      	pop	{r3, pc}

0800a072 <_GetRect>:
 800a072:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a074:	6880      	ldr	r0, [r0, #8]
 800a076:	460c      	mov	r4, r1
 800a078:	f004 ff06 	bl	800ee88 <GUI_ALLOC_LockH>
 800a07c:	4603      	mov	r3, r0
 800a07e:	a802      	add	r0, sp, #8
 800a080:	8899      	ldrh	r1, [r3, #4]
 800a082:	88da      	ldrh	r2, [r3, #6]
 800a084:	891d      	ldrh	r5, [r3, #8]
 800a086:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a08a:	895b      	ldrh	r3, [r3, #10]
 800a08c:	8021      	strh	r1, [r4, #0]
 800a08e:	8062      	strh	r2, [r4, #2]
 800a090:	4429      	add	r1, r5
 800a092:	441a      	add	r2, r3
 800a094:	3901      	subs	r1, #1
 800a096:	3a01      	subs	r2, #1
 800a098:	80a1      	strh	r1, [r4, #4]
 800a09a:	80e2      	strh	r2, [r4, #6]
 800a09c:	f004 ff02 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800a0a0:	b003      	add	sp, #12
 800a0a2:	bd30      	pop	{r4, r5, pc}

0800a0a4 <_XY2PTR>:
 800a0a4:	4b0e      	ldr	r3, [pc, #56]	; (800a0e0 <_XY2PTR+0x3c>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0aa:	4605      	mov	r5, r0
 800a0ac:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a0ae:	460e      	mov	r6, r1
 800a0b0:	f004 feea 	bl	800ee88 <GUI_ALLOC_LockH>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	a802      	add	r0, sp, #8
 800a0b8:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800a0bc:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a0c0:	f103 0118 	add.w	r1, r3, #24
 800a0c4:	1b36      	subs	r6, r6, r4
 800a0c6:	68dc      	ldr	r4, [r3, #12]
 800a0c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a0cc:	fb04 1406 	mla	r4, r4, r6, r1
 800a0d0:	1aed      	subs	r5, r5, r3
 800a0d2:	f004 fee7 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800a0d6:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800a0da:	4620      	mov	r0, r4
 800a0dc:	b002      	add	sp, #8
 800a0de:	bd70      	pop	{r4, r5, r6, pc}
 800a0e0:	20000084 	.word	0x20000084

0800a0e4 <_GetPixelIndex>:
 800a0e4:	b508      	push	{r3, lr}
 800a0e6:	4608      	mov	r0, r1
 800a0e8:	4611      	mov	r1, r2
 800a0ea:	f7ff ffdb 	bl	800a0a4 <_XY2PTR>
 800a0ee:	6800      	ldr	r0, [r0, #0]
 800a0f0:	bd08      	pop	{r3, pc}
	...

0800a0f4 <_XorPixel>:
 800a0f4:	4b15      	ldr	r3, [pc, #84]	; (800a14c <_XorPixel+0x58>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0fa:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a0fc:	4615      	mov	r5, r2
 800a0fe:	460e      	mov	r6, r1
 800a100:	f004 fec2 	bl	800ee88 <GUI_ALLOC_LockH>
 800a104:	4629      	mov	r1, r5
 800a106:	9000      	str	r0, [sp, #0]
 800a108:	4630      	mov	r0, r6
 800a10a:	f7ff ffcb 	bl	800a0a4 <_XY2PTR>
 800a10e:	9b00      	ldr	r3, [sp, #0]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	4604      	mov	r4, r0
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	4798      	blx	r3
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	4058      	eors	r0, r3
 800a11e:	9b00      	ldr	r3, [sp, #0]
 800a120:	6020      	str	r0, [r4, #0]
 800a122:	6958      	ldr	r0, [r3, #20]
 800a124:	b160      	cbz	r0, 800a140 <_XorPixel+0x4c>
 800a126:	f004 feaf 	bl	800ee88 <GUI_ALLOC_LockH>
 800a12a:	ac02      	add	r4, sp, #8
 800a12c:	6883      	ldr	r3, [r0, #8]
 800a12e:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4631      	mov	r1, r6
 800a136:	462a      	mov	r2, r5
 800a138:	4798      	blx	r3
 800a13a:	4620      	mov	r0, r4
 800a13c:	f004 feb2 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800a140:	4668      	mov	r0, sp
 800a142:	f004 feaf 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800a146:	b002      	add	sp, #8
 800a148:	bd70      	pop	{r4, r5, r6, pc}
 800a14a:	bf00      	nop
 800a14c:	20000084 	.word	0x20000084

0800a150 <_SetPixelIndex>:
 800a150:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a152:	461c      	mov	r4, r3
 800a154:	4b10      	ldr	r3, [pc, #64]	; (800a198 <_SetPixelIndex+0x48>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a15a:	460e      	mov	r6, r1
 800a15c:	4615      	mov	r5, r2
 800a15e:	f004 fe93 	bl	800ee88 <GUI_ALLOC_LockH>
 800a162:	4629      	mov	r1, r5
 800a164:	9000      	str	r0, [sp, #0]
 800a166:	4630      	mov	r0, r6
 800a168:	f7ff ff9c 	bl	800a0a4 <_XY2PTR>
 800a16c:	9b00      	ldr	r3, [sp, #0]
 800a16e:	6004      	str	r4, [r0, #0]
 800a170:	6958      	ldr	r0, [r3, #20]
 800a172:	b160      	cbz	r0, 800a18e <_SetPixelIndex+0x3e>
 800a174:	f004 fe88 	bl	800ee88 <GUI_ALLOC_LockH>
 800a178:	ac02      	add	r4, sp, #8
 800a17a:	6883      	ldr	r3, [r0, #8]
 800a17c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4631      	mov	r1, r6
 800a184:	462a      	mov	r2, r5
 800a186:	4798      	blx	r3
 800a188:	4620      	mov	r0, r4
 800a18a:	f004 fe8b 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800a18e:	4668      	mov	r0, sp
 800a190:	f004 fe88 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800a194:	b002      	add	sp, #8
 800a196:	bd70      	pop	{r4, r5, r6, pc}
 800a198:	20000084 	.word	0x20000084

0800a19c <_DrawVLine>:
 800a19c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a1a0:	4d2c      	ldr	r5, [pc, #176]	; (800a254 <_DrawVLine+0xb8>)
 800a1a2:	461e      	mov	r6, r3
 800a1a4:	682b      	ldr	r3, [r5, #0]
 800a1a6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a1a8:	460f      	mov	r7, r1
 800a1aa:	4614      	mov	r4, r2
 800a1ac:	f004 fe6c 	bl	800ee88 <GUI_ALLOC_LockH>
 800a1b0:	9000      	str	r0, [sp, #0]
 800a1b2:	6940      	ldr	r0, [r0, #20]
 800a1b4:	46a9      	mov	r9, r5
 800a1b6:	b108      	cbz	r0, 800a1bc <_DrawVLine+0x20>
 800a1b8:	f004 fe66 	bl	800ee88 <GUI_ALLOC_LockH>
 800a1bc:	9001      	str	r0, [sp, #4]
 800a1be:	4621      	mov	r1, r4
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	f7ff ff6f 	bl	800a0a4 <_XY2PTR>
 800a1c6:	f8d9 2000 	ldr.w	r2, [r9]
 800a1ca:	9b00      	ldr	r3, [sp, #0]
 800a1cc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800a1ce:	7c12      	ldrb	r2, [r2, #16]
 800a1d0:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800a1d4:	f8d1 9000 	ldr.w	r9, [r1]
 800a1d8:	07d2      	lsls	r2, r2, #31
 800a1da:	4605      	mov	r5, r0
 800a1dc:	d51f      	bpl.n	800a21e <_DrawVLine+0x82>
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	4798      	blx	r3
 800a1e6:	4680      	mov	r8, r0
 800a1e8:	9801      	ldr	r0, [sp, #4]
 800a1ea:	b128      	cbz	r0, 800a1f8 <_DrawVLine+0x5c>
 800a1ec:	6882      	ldr	r2, [r0, #8]
 800a1ee:	4639      	mov	r1, r7
 800a1f0:	f8d2 c000 	ldr.w	ip, [r2]
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	47e0      	blx	ip
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	ea83 0308 	eor.w	r3, r3, r8
 800a1fe:	602b      	str	r3, [r5, #0]
 800a200:	9b00      	ldr	r3, [sp, #0]
 800a202:	3401      	adds	r4, #1
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	42b4      	cmp	r4, r6
 800a208:	441d      	add	r5, r3
 800a20a:	dded      	ble.n	800a1e8 <_DrawVLine+0x4c>
 800a20c:	4668      	mov	r0, sp
 800a20e:	f004 fe49 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800a212:	9b01      	ldr	r3, [sp, #4]
 800a214:	b1d3      	cbz	r3, 800a24c <_DrawVLine+0xb0>
 800a216:	a801      	add	r0, sp, #4
 800a218:	f004 fe44 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800a21c:	e016      	b.n	800a24c <_DrawVLine+0xb0>
 800a21e:	9b01      	ldr	r3, [sp, #4]
 800a220:	b163      	cbz	r3, 800a23c <_DrawVLine+0xa0>
 800a222:	9801      	ldr	r0, [sp, #4]
 800a224:	6883      	ldr	r3, [r0, #8]
 800a226:	4622      	mov	r2, r4
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4639      	mov	r1, r7
 800a22c:	3401      	adds	r4, #1
 800a22e:	4798      	blx	r3
 800a230:	42b4      	cmp	r4, r6
 800a232:	f8c5 9000 	str.w	r9, [r5]
 800a236:	4445      	add	r5, r8
 800a238:	ddf3      	ble.n	800a222 <_DrawVLine+0x86>
 800a23a:	e7e7      	b.n	800a20c <_DrawVLine+0x70>
 800a23c:	1b34      	subs	r4, r6, r4
 800a23e:	3401      	adds	r4, #1
 800a240:	3c01      	subs	r4, #1
 800a242:	f8c5 9000 	str.w	r9, [r5]
 800a246:	4445      	add	r5, r8
 800a248:	d1fa      	bne.n	800a240 <_DrawVLine+0xa4>
 800a24a:	e7df      	b.n	800a20c <_DrawVLine+0x70>
 800a24c:	b003      	add	sp, #12
 800a24e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a252:	bf00      	nop
 800a254:	20000084 	.word	0x20000084

0800a258 <_FillRect>:
 800a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25c:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a30c <_FillRect+0xb4>
 800a260:	4614      	mov	r4, r2
 800a262:	f8db 2000 	ldr.w	r2, [fp]
 800a266:	b085      	sub	sp, #20
 800a268:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800a26a:	460f      	mov	r7, r1
 800a26c:	461d      	mov	r5, r3
 800a26e:	f004 fe0b 	bl	800ee88 <GUI_ALLOC_LockH>
 800a272:	4621      	mov	r1, r4
 800a274:	9002      	str	r0, [sp, #8]
 800a276:	4638      	mov	r0, r7
 800a278:	f7ff ff14 	bl	800a0a4 <_XY2PTR>
 800a27c:	9a02      	ldr	r2, [sp, #8]
 800a27e:	f8db 3000 	ldr.w	r3, [fp]
 800a282:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800a286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a288:	4606      	mov	r6, r0
 800a28a:	6950      	ldr	r0, [r2, #20]
 800a28c:	f8d3 a000 	ldr.w	sl, [r3]
 800a290:	1bed      	subs	r5, r5, r7
 800a292:	3501      	adds	r5, #1
 800a294:	b338      	cbz	r0, 800a2e6 <_FillRect+0x8e>
 800a296:	f004 fdf7 	bl	800ee88 <GUI_ALLOC_LockH>
 800a29a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a29c:	f10d 0810 	add.w	r8, sp, #16
 800a2a0:	1b13      	subs	r3, r2, r4
 800a2a2:	f848 0d04 	str.w	r0, [r8, #-4]!
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	4639      	mov	r1, r7
 800a2ac:	4622      	mov	r2, r4
 800a2ae:	462b      	mov	r3, r5
 800a2b0:	f006 f9b0 	bl	8010614 <GUI_USAGE_AddRect>
 800a2b4:	4640      	mov	r0, r8
 800a2b6:	f004 fdf5 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800a2ba:	e014      	b.n	800a2e6 <_FillRect+0x8e>
 800a2bc:	f8db 3000 	ldr.w	r3, [fp]
 800a2c0:	7c1b      	ldrb	r3, [r3, #16]
 800a2c2:	07db      	lsls	r3, r3, #31
 800a2c4:	d513      	bpl.n	800a2ee <_FillRect+0x96>
 800a2c6:	9b02      	ldr	r3, [sp, #8]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	4798      	blx	r3
 800a2d0:	4632      	mov	r2, r6
 800a2d2:	462b      	mov	r3, r5
 800a2d4:	6811      	ldr	r1, [r2, #0]
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	ea81 0100 	eor.w	r1, r1, r0
 800a2dc:	f842 1b04 	str.w	r1, [r2], #4
 800a2e0:	d1f8      	bne.n	800a2d4 <_FillRect+0x7c>
 800a2e2:	444e      	add	r6, r9
 800a2e4:	3401      	adds	r4, #1
 800a2e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2e8:	429c      	cmp	r4, r3
 800a2ea:	dde7      	ble.n	800a2bc <_FillRect+0x64>
 800a2ec:	e008      	b.n	800a300 <_FillRect+0xa8>
 800a2ee:	2d00      	cmp	r5, #0
 800a2f0:	ddf7      	ble.n	800a2e2 <_FillRect+0x8a>
 800a2f2:	462b      	mov	r3, r5
 800a2f4:	4632      	mov	r2, r6
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	f842 ab04 	str.w	sl, [r2], #4
 800a2fc:	d1fb      	bne.n	800a2f6 <_FillRect+0x9e>
 800a2fe:	e7f0      	b.n	800a2e2 <_FillRect+0x8a>
 800a300:	a802      	add	r0, sp, #8
 800a302:	f004 fdcf 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800a306:	b005      	add	sp, #20
 800a308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30c:	20000084 	.word	0x20000084

0800a310 <_DrawHLine>:
 800a310:	b507      	push	{r0, r1, r2, lr}
 800a312:	9200      	str	r2, [sp, #0]
 800a314:	f7ff ffa0 	bl	800a258 <_FillRect>
 800a318:	b003      	add	sp, #12
 800a31a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a320 <_DrawBitmap>:
 800a320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a324:	4c90      	ldr	r4, [pc, #576]	; (800a568 <_DrawBitmap+0x248>)
 800a326:	b091      	sub	sp, #68	; 0x44
 800a328:	469b      	mov	fp, r3
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	9008      	str	r0, [sp, #32]
 800a32e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a330:	9207      	str	r2, [sp, #28]
 800a332:	460e      	mov	r6, r1
 800a334:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 800a338:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800a33a:	2800      	cmp	r0, #0
 800a33c:	f000 838b 	beq.w	800aa56 <_DrawBitmap+0x736>
 800a340:	f004 fda2 	bl	800ee88 <GUI_ALLOC_LockH>
 800a344:	900e      	str	r0, [sp, #56]	; 0x38
 800a346:	6940      	ldr	r0, [r0, #20]
 800a348:	b108      	cbz	r0, 800a34e <_DrawBitmap+0x2e>
 800a34a:	f004 fd9d 	bl	800ee88 <GUI_ALLOC_LockH>
 800a34e:	900f      	str	r0, [sp, #60]	; 0x3c
 800a350:	a810      	add	r0, sp, #64	; 0x40
 800a352:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	930a      	str	r3, [sp, #40]	; 0x28
 800a35a:	f004 fda3 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800a35e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a360:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a362:	4437      	add	r7, r6
 800a364:	9704      	str	r7, [sp, #16]
 800a366:	b150      	cbz	r0, 800a37e <_DrawBitmap+0x5e>
 800a368:	6823      	ldr	r3, [r4, #0]
 800a36a:	7c1b      	ldrb	r3, [r3, #16]
 800a36c:	079c      	lsls	r4, r3, #30
 800a36e:	d406      	bmi.n	800a37e <_DrawBitmap+0x5e>
 800a370:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a372:	9700      	str	r7, [sp, #0]
 800a374:	9904      	ldr	r1, [sp, #16]
 800a376:	9a07      	ldr	r2, [sp, #28]
 800a378:	465b      	mov	r3, fp
 800a37a:	f006 f94b 	bl	8010614 <GUI_USAGE_AddRect>
 800a37e:	9804      	ldr	r0, [sp, #16]
 800a380:	9907      	ldr	r1, [sp, #28]
 800a382:	f7ff fe8f 	bl	800a0a4 <_XY2PTR>
 800a386:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a388:	2f17      	cmp	r7, #23
 800a38a:	4606      	mov	r6, r0
 800a38c:	dd64      	ble.n	800a458 <_DrawBitmap+0x138>
 800a38e:	ea4f 078b 	mov.w	r7, fp, lsl #2
 800a392:	9706      	str	r7, [sp, #24]
 800a394:	f04f 0900 	mov.w	r9, #0
 800a398:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a39a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a39c:	45b9      	cmp	r9, r7
 800a39e:	da57      	bge.n	800a450 <_DrawBitmap+0x130>
 800a3a0:	b130      	cbz	r0, 800a3b0 <_DrawBitmap+0x90>
 800a3a2:	6883      	ldr	r3, [r0, #8]
 800a3a4:	9a07      	ldr	r2, [sp, #28]
 800a3a6:	685c      	ldr	r4, [r3, #4]
 800a3a8:	9904      	ldr	r1, [sp, #16]
 800a3aa:	444a      	add	r2, r9
 800a3ac:	465b      	mov	r3, fp
 800a3ae:	47a0      	blx	r4
 800a3b0:	9f08      	ldr	r7, [sp, #32]
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	68d8      	ldr	r0, [r3, #12]
 800a3b6:	b130      	cbz	r0, 800a3c6 <_DrawBitmap+0xa6>
 800a3b8:	4b6c      	ldr	r3, [pc, #432]	; (800a56c <_DrawBitmap+0x24c>)
 800a3ba:	9a06      	ldr	r2, [sp, #24]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4630      	mov	r0, r6
 800a3c0:	4651      	mov	r1, sl
 800a3c2:	4798      	blx	r3
 800a3c4:	e03d      	b.n	800a442 <_DrawBitmap+0x122>
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	4798      	blx	r3
 800a3ca:	0e00      	lsrs	r0, r0, #24
 800a3cc:	9005      	str	r0, [sp, #20]
 800a3ce:	4635      	mov	r5, r6
 800a3d0:	465f      	mov	r7, fp
 800a3d2:	4654      	mov	r4, sl
 800a3d4:	463b      	mov	r3, r7
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	f04f 0800 	mov.w	r8, #0
 800a3dc:	f852 1b04 	ldr.w	r1, [r2], #4
 800a3e0:	9805      	ldr	r0, [sp, #20]
 800a3e2:	0e09      	lsrs	r1, r1, #24
 800a3e4:	4281      	cmp	r1, r0
 800a3e6:	9805      	ldr	r0, [sp, #20]
 800a3e8:	bf08      	it	eq
 800a3ea:	f108 0801 	addeq.w	r8, r8, #1
 800a3ee:	4281      	cmp	r1, r0
 800a3f0:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3f4:	d012      	beq.n	800a41c <_DrawBitmap+0xfc>
 800a3f6:	f1b8 0f00 	cmp.w	r8, #0
 800a3fa:	d012      	beq.n	800a422 <_DrawBitmap+0x102>
 800a3fc:	4a5b      	ldr	r2, [pc, #364]	; (800a56c <_DrawBitmap+0x24c>)
 800a3fe:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800a402:	f8d2 c000 	ldr.w	ip, [r2]
 800a406:	9303      	str	r3, [sp, #12]
 800a408:	4628      	mov	r0, r5
 800a40a:	4621      	mov	r1, r4
 800a40c:	461a      	mov	r2, r3
 800a40e:	47e0      	blx	ip
 800a410:	9b03      	ldr	r3, [sp, #12]
 800a412:	ebc8 0707 	rsb	r7, r8, r7
 800a416:	441d      	add	r5, r3
 800a418:	441c      	add	r4, r3
 800a41a:	e010      	b.n	800a43e <_DrawBitmap+0x11e>
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1dd      	bne.n	800a3dc <_DrawBitmap+0xbc>
 800a420:	e7e9      	b.n	800a3f6 <_DrawBitmap+0xd6>
 800a422:	6820      	ldr	r0, [r4, #0]
 800a424:	0e02      	lsrs	r2, r0, #24
 800a426:	2aff      	cmp	r2, #255	; 0xff
 800a428:	d006      	beq.n	800a438 <_DrawBitmap+0x118>
 800a42a:	4b51      	ldr	r3, [pc, #324]	; (800a570 <_DrawBitmap+0x250>)
 800a42c:	6829      	ldr	r1, [r5, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	43d2      	mvns	r2, r2
 800a432:	b2d2      	uxtb	r2, r2
 800a434:	4798      	blx	r3
 800a436:	6028      	str	r0, [r5, #0]
 800a438:	3504      	adds	r5, #4
 800a43a:	3404      	adds	r4, #4
 800a43c:	3f01      	subs	r7, #1
 800a43e:	2f00      	cmp	r7, #0
 800a440:	d1c8      	bne.n	800a3d4 <_DrawBitmap+0xb4>
 800a442:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a444:	44ba      	add	sl, r7
 800a446:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a448:	f109 0901 	add.w	r9, r9, #1
 800a44c:	443e      	add	r6, r7
 800a44e:	e7a3      	b.n	800a398 <_DrawBitmap+0x78>
 800a450:	2800      	cmp	r0, #0
 800a452:	f040 82fd 	bne.w	800aa50 <_DrawBitmap+0x730>
 800a456:	e2fe      	b.n	800aa56 <_DrawBitmap+0x736>
 800a458:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a45a:	2f10      	cmp	r7, #16
 800a45c:	d134      	bne.n	800a4c8 <_DrawBitmap+0x1a8>
 800a45e:	1f06      	subs	r6, r0, #4
 800a460:	2500      	movs	r5, #0
 800a462:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a464:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a466:	42bd      	cmp	r5, r7
 800a468:	f280 80a3 	bge.w	800a5b2 <_DrawBitmap+0x292>
 800a46c:	9f07      	ldr	r7, [sp, #28]
 800a46e:	442f      	add	r7, r5
 800a470:	b13c      	cbz	r4, 800a482 <_DrawBitmap+0x162>
 800a472:	68a3      	ldr	r3, [r4, #8]
 800a474:	9904      	ldr	r1, [sp, #16]
 800a476:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800a47a:	4620      	mov	r0, r4
 800a47c:	463a      	mov	r2, r7
 800a47e:	465b      	mov	r3, fp
 800a480:	47e0      	blx	ip
 800a482:	f1aa 0902 	sub.w	r9, sl, #2
 800a486:	9605      	str	r6, [sp, #20]
 800a488:	46d8      	mov	r8, fp
 800a48a:	9808      	ldr	r0, [sp, #32]
 800a48c:	9904      	ldr	r1, [sp, #16]
 800a48e:	6903      	ldr	r3, [r0, #16]
 800a490:	f839 0f02 	ldrh.w	r0, [r9, #2]!
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	4459      	add	r1, fp
 800a498:	ebc8 0101 	rsb	r1, r8, r1
 800a49c:	9103      	str	r1, [sp, #12]
 800a49e:	4798      	blx	r3
 800a4a0:	9b05      	ldr	r3, [sp, #20]
 800a4a2:	9903      	ldr	r1, [sp, #12]
 800a4a4:	f843 0f04 	str.w	r0, [r3, #4]!
 800a4a8:	9305      	str	r3, [sp, #20]
 800a4aa:	b124      	cbz	r4, 800a4b6 <_DrawBitmap+0x196>
 800a4ac:	68a3      	ldr	r3, [r4, #8]
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	463a      	mov	r2, r7
 800a4b4:	4798      	blx	r3
 800a4b6:	f1b8 0801 	subs.w	r8, r8, #1
 800a4ba:	d1e6      	bne.n	800a48a <_DrawBitmap+0x16a>
 800a4bc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a4be:	44ba      	add	sl, r7
 800a4c0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a4c2:	3501      	adds	r5, #1
 800a4c4:	443e      	add	r6, r7
 800a4c6:	e7cc      	b.n	800a462 <_DrawBitmap+0x142>
 800a4c8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a4ca:	2f08      	cmp	r7, #8
 800a4cc:	f100 0604 	add.w	r6, r0, #4
 800a4d0:	d173      	bne.n	800a5ba <_DrawBitmap+0x29a>
 800a4d2:	9f07      	ldr	r7, [sp, #28]
 800a4d4:	9907      	ldr	r1, [sp, #28]
 800a4d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a4d8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a4da:	1a7b      	subs	r3, r7, r1
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	f1a6 0004 	sub.w	r0, r6, #4
 800a4e2:	da66      	bge.n	800a5b2 <_DrawBitmap+0x292>
 800a4e4:	4b20      	ldr	r3, [pc, #128]	; (800a568 <_DrawBitmap+0x248>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	7c1b      	ldrb	r3, [r3, #16]
 800a4ea:	b36d      	cbz	r5, 800a548 <_DrawBitmap+0x228>
 800a4ec:	f013 0303 	ands.w	r3, r3, #3
 800a4f0:	d005      	beq.n	800a4fe <_DrawBitmap+0x1de>
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d157      	bne.n	800a5a6 <_DrawBitmap+0x286>
 800a4f6:	46b1      	mov	r9, r6
 800a4f8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a4fc:	e01c      	b.n	800a538 <_DrawBitmap+0x218>
 800a4fe:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800a502:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a506:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800a50a:	3301      	adds	r3, #1
 800a50c:	455b      	cmp	r3, fp
 800a50e:	d1f6      	bne.n	800a4fe <_DrawBitmap+0x1de>
 800a510:	e049      	b.n	800a5a6 <_DrawBitmap+0x286>
 800a512:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800a516:	f849 3c04 	str.w	r3, [r9, #-4]
 800a51a:	b12c      	cbz	r4, 800a528 <_DrawBitmap+0x208>
 800a51c:	68a3      	ldr	r3, [r4, #8]
 800a51e:	4620      	mov	r0, r4
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4641      	mov	r1, r8
 800a524:	463a      	mov	r2, r7
 800a526:	4798      	blx	r3
 800a528:	9b04      	ldr	r3, [sp, #16]
 800a52a:	f108 0801 	add.w	r8, r8, #1
 800a52e:	445b      	add	r3, fp
 800a530:	4543      	cmp	r3, r8
 800a532:	f109 0904 	add.w	r9, r9, #4
 800a536:	d036      	beq.n	800a5a6 <_DrawBitmap+0x286>
 800a538:	9804      	ldr	r0, [sp, #16]
 800a53a:	ebc0 030a 	rsb	r3, r0, sl
 800a53e:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d0f0      	beq.n	800a528 <_DrawBitmap+0x208>
 800a546:	e7e4      	b.n	800a512 <_DrawBitmap+0x1f2>
 800a548:	f013 0303 	ands.w	r3, r3, #3
 800a54c:	d005      	beq.n	800a55a <_DrawBitmap+0x23a>
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d129      	bne.n	800a5a6 <_DrawBitmap+0x286>
 800a552:	46b1      	mov	r9, r6
 800a554:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a558:	e01d      	b.n	800a596 <_DrawBitmap+0x276>
 800a55a:	4b04      	ldr	r3, [pc, #16]	; (800a56c <_DrawBitmap+0x24c>)
 800a55c:	4651      	mov	r1, sl
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	465a      	mov	r2, fp
 800a562:	4798      	blx	r3
 800a564:	e01f      	b.n	800a5a6 <_DrawBitmap+0x286>
 800a566:	bf00      	nop
 800a568:	20000084 	.word	0x20000084
 800a56c:	20000074 	.word	0x20000074
 800a570:	20000078 	.word	0x20000078
 800a574:	f849 3c04 	str.w	r3, [r9, #-4]
 800a578:	b12c      	cbz	r4, 800a586 <_DrawBitmap+0x266>
 800a57a:	68a3      	ldr	r3, [r4, #8]
 800a57c:	4620      	mov	r0, r4
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4641      	mov	r1, r8
 800a582:	463a      	mov	r2, r7
 800a584:	4798      	blx	r3
 800a586:	9b04      	ldr	r3, [sp, #16]
 800a588:	f108 0801 	add.w	r8, r8, #1
 800a58c:	445b      	add	r3, fp
 800a58e:	4543      	cmp	r3, r8
 800a590:	f109 0904 	add.w	r9, r9, #4
 800a594:	d007      	beq.n	800a5a6 <_DrawBitmap+0x286>
 800a596:	9904      	ldr	r1, [sp, #16]
 800a598:	ebc1 030a 	rsb	r3, r1, sl
 800a59c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d0f0      	beq.n	800a586 <_DrawBitmap+0x266>
 800a5a4:	e7e6      	b.n	800a574 <_DrawBitmap+0x254>
 800a5a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a5a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5aa:	4492      	add	sl, r2
 800a5ac:	3701      	adds	r7, #1
 800a5ae:	441e      	add	r6, r3
 800a5b0:	e790      	b.n	800a4d4 <_DrawBitmap+0x1b4>
 800a5b2:	2c00      	cmp	r4, #0
 800a5b4:	f040 824c 	bne.w	800aa50 <_DrawBitmap+0x730>
 800a5b8:	e24d      	b.n	800aa56 <_DrawBitmap+0x736>
 800a5ba:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a5bc:	4bb2      	ldr	r3, [pc, #712]	; (800a888 <_DrawBitmap+0x568>)
 800a5be:	9608      	str	r6, [sp, #32]
 800a5c0:	007f      	lsls	r7, r7, #1
 800a5c2:	970c      	str	r7, [sp, #48]	; 0x30
 800a5c4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a5c6:	00bf      	lsls	r7, r7, #2
 800a5c8:	970d      	str	r7, [sp, #52]	; 0x34
 800a5ca:	9f07      	ldr	r7, [sp, #28]
 800a5cc:	9705      	str	r7, [sp, #20]
 800a5ce:	2d00      	cmp	r5, #0
 800a5d0:	bf08      	it	eq
 800a5d2:	461d      	moveq	r5, r3
 800a5d4:	9f08      	ldr	r7, [sp, #32]
 800a5d6:	9807      	ldr	r0, [sp, #28]
 800a5d8:	1f3c      	subs	r4, r7, #4
 800a5da:	9f05      	ldr	r7, [sp, #20]
 800a5dc:	1a3b      	subs	r3, r7, r0
 800a5de:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a5e0:	42bb      	cmp	r3, r7
 800a5e2:	f280 8233 	bge.w	800aa4c <_DrawBitmap+0x72c>
 800a5e6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a5e8:	2f02      	cmp	r7, #2
 800a5ea:	f000 80ad 	beq.w	800a748 <_DrawBitmap+0x428>
 800a5ee:	2f04      	cmp	r7, #4
 800a5f0:	f000 8150 	beq.w	800a894 <_DrawBitmap+0x574>
 800a5f4:	2f01      	cmp	r7, #1
 800a5f6:	f040 821f 	bne.w	800aa38 <_DrawBitmap+0x718>
 800a5fa:	f8df 9294 	ldr.w	r9, [pc, #660]	; 800a890 <_DrawBitmap+0x570>
 800a5fe:	f8d9 3000 	ldr.w	r3, [r9]
 800a602:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a604:	f004 fc40 	bl	800ee88 <GUI_ALLOC_LockH>
 800a608:	f89a 3000 	ldrb.w	r3, [sl]
 800a60c:	4a9f      	ldr	r2, [pc, #636]	; (800a88c <_DrawBitmap+0x56c>)
 800a60e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a610:	5cd6      	ldrb	r6, [r2, r3]
 800a612:	f8d9 3000 	ldr.w	r3, [r9]
 800a616:	900e      	str	r0, [sp, #56]	; 0x38
 800a618:	7c1b      	ldrb	r3, [r3, #16]
 800a61a:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800a61e:	f003 0303 	and.w	r3, r3, #3
 800a622:	2b02      	cmp	r3, #2
 800a624:	465f      	mov	r7, fp
 800a626:	f1c1 0808 	rsb	r8, r1, #8
 800a62a:	fa46 f601 	asr.w	r6, r6, r1
 800a62e:	d020      	beq.n	800a672 <_DrawBitmap+0x352>
 800a630:	2b03      	cmp	r3, #3
 800a632:	d061      	beq.n	800a6f8 <_DrawBitmap+0x3d8>
 800a634:	2b01      	cmp	r3, #1
 800a636:	d05f      	beq.n	800a6f8 <_DrawBitmap+0x3d8>
 800a638:	4652      	mov	r2, sl
 800a63a:	4547      	cmp	r7, r8
 800a63c:	bf38      	it	cc
 800a63e:	46b8      	movcc	r8, r7
 800a640:	ebc8 0707 	rsb	r7, r8, r7
 800a644:	4643      	mov	r3, r8
 800a646:	4621      	mov	r1, r4
 800a648:	f006 0001 	and.w	r0, r6, #1
 800a64c:	3b01      	subs	r3, #1
 800a64e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800a652:	f841 0b04 	str.w	r0, [r1], #4
 800a656:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a65a:	d1f5      	bne.n	800a648 <_DrawBitmap+0x328>
 800a65c:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800a660:	2f00      	cmp	r7, #0
 800a662:	d06d      	beq.n	800a740 <_DrawBitmap+0x420>
 800a664:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a668:	4988      	ldr	r1, [pc, #544]	; (800a88c <_DrawBitmap+0x56c>)
 800a66a:	f04f 0808 	mov.w	r8, #8
 800a66e:	5cce      	ldrb	r6, [r1, r3]
 800a670:	e7e3      	b.n	800a63a <_DrawBitmap+0x31a>
 800a672:	686b      	ldr	r3, [r5, #4]
 800a674:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800a678:	930b      	str	r3, [sp, #44]	; 0x2c
 800a67a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a67e:	4547      	cmp	r7, r8
 800a680:	bf38      	it	cc
 800a682:	46b8      	movcc	r8, r7
 800a684:	ebc8 0707 	rsb	r7, r8, r7
 800a688:	f1bc 0f00 	cmp.w	ip, #0
 800a68c:	d026      	beq.n	800a6dc <_DrawBitmap+0x3bc>
 800a68e:	b91e      	cbnz	r6, 800a698 <_DrawBitmap+0x378>
 800a690:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800a694:	44c1      	add	r9, r8
 800a696:	e025      	b.n	800a6e4 <_DrawBitmap+0x3c4>
 800a698:	07f0      	lsls	r0, r6, #31
 800a69a:	d50c      	bpl.n	800a6b6 <_DrawBitmap+0x396>
 800a69c:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800a6a0:	9a05      	ldr	r2, [sp, #20]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f8cd c00c 	str.w	ip, [sp, #12]
 800a6a8:	4660      	mov	r0, ip
 800a6aa:	4649      	mov	r1, r9
 800a6ac:	4798      	blx	r3
 800a6ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6b0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a6b4:	6023      	str	r3, [r4, #0]
 800a6b6:	f1b8 0801 	subs.w	r8, r8, #1
 800a6ba:	f109 0901 	add.w	r9, r9, #1
 800a6be:	f104 0404 	add.w	r4, r4, #4
 800a6c2:	d00f      	beq.n	800a6e4 <_DrawBitmap+0x3c4>
 800a6c4:	0876      	lsrs	r6, r6, #1
 800a6c6:	e7e2      	b.n	800a68e <_DrawBitmap+0x36e>
 800a6c8:	07f1      	lsls	r1, r6, #31
 800a6ca:	bf44      	itt	mi
 800a6cc:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 800a6ce:	6023      	strmi	r3, [r4, #0]
 800a6d0:	f1b8 0801 	subs.w	r8, r8, #1
 800a6d4:	f104 0404 	add.w	r4, r4, #4
 800a6d8:	d004      	beq.n	800a6e4 <_DrawBitmap+0x3c4>
 800a6da:	0876      	lsrs	r6, r6, #1
 800a6dc:	2e00      	cmp	r6, #0
 800a6de:	d1f3      	bne.n	800a6c8 <_DrawBitmap+0x3a8>
 800a6e0:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800a6e4:	b367      	cbz	r7, 800a740 <_DrawBitmap+0x420>
 800a6e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6e8:	4a68      	ldr	r2, [pc, #416]	; (800a88c <_DrawBitmap+0x56c>)
 800a6ea:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800a6ee:	9009      	str	r0, [sp, #36]	; 0x24
 800a6f0:	5cd6      	ldrb	r6, [r2, r3]
 800a6f2:	f04f 0808 	mov.w	r8, #8
 800a6f6:	e7c2      	b.n	800a67e <_DrawBitmap+0x35e>
 800a6f8:	6803      	ldr	r3, [r0, #0]
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	4798      	blx	r3
 800a700:	4651      	mov	r1, sl
 800a702:	4547      	cmp	r7, r8
 800a704:	bf38      	it	cc
 800a706:	46b8      	movcc	r8, r7
 800a708:	ebc8 0707 	rsb	r7, r8, r7
 800a70c:	1d23      	adds	r3, r4, #4
 800a70e:	46c6      	mov	lr, r8
 800a710:	07f2      	lsls	r2, r6, #31
 800a712:	d504      	bpl.n	800a71e <_DrawBitmap+0x3fe>
 800a714:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800a718:	4042      	eors	r2, r0
 800a71a:	f843 2c04 	str.w	r2, [r3, #-4]
 800a71e:	f1be 0e01 	subs.w	lr, lr, #1
 800a722:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a726:	f103 0304 	add.w	r3, r3, #4
 800a72a:	d1f1      	bne.n	800a710 <_DrawBitmap+0x3f0>
 800a72c:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800a730:	b137      	cbz	r7, 800a740 <_DrawBitmap+0x420>
 800a732:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a736:	4a55      	ldr	r2, [pc, #340]	; (800a88c <_DrawBitmap+0x56c>)
 800a738:	f04f 0808 	mov.w	r8, #8
 800a73c:	5cd6      	ldrb	r6, [r2, r3]
 800a73e:	e7e0      	b.n	800a702 <_DrawBitmap+0x3e2>
 800a740:	a80e      	add	r0, sp, #56	; 0x38
 800a742:	f004 fbaf 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800a746:	e177      	b.n	800aa38 <_DrawBitmap+0x718>
 800a748:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a74a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a74c:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800a750:	f1c7 0604 	rsb	r6, r7, #4
 800a754:	f89a 7000 	ldrb.w	r7, [sl]
 800a758:	409f      	lsls	r7, r3
 800a75a:	4b4d      	ldr	r3, [pc, #308]	; (800a890 <_DrawBitmap+0x570>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	7c1b      	ldrb	r3, [r3, #16]
 800a760:	f003 0303 	and.w	r3, r3, #3
 800a764:	2b01      	cmp	r3, #1
 800a766:	b2f6      	uxtb	r6, r6
 800a768:	b2ff      	uxtb	r7, r7
 800a76a:	d066      	beq.n	800a83a <_DrawBitmap+0x51a>
 800a76c:	d308      	bcc.n	800a780 <_DrawBitmap+0x460>
 800a76e:	2b02      	cmp	r3, #2
 800a770:	f040 8162 	bne.w	800aa38 <_DrawBitmap+0x718>
 800a774:	9804      	ldr	r0, [sp, #16]
 800a776:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a77a:	46d8      	mov	r8, fp
 800a77c:	9006      	str	r0, [sp, #24]
 800a77e:	e03e      	b.n	800a7fe <_DrawBitmap+0x4de>
 800a780:	4652      	mov	r2, sl
 800a782:	465b      	mov	r3, fp
 800a784:	429e      	cmp	r6, r3
 800a786:	bfc8      	it	gt
 800a788:	b2de      	uxtbgt	r6, r3
 800a78a:	1b9b      	subs	r3, r3, r6
 800a78c:	4631      	mov	r1, r6
 800a78e:	4620      	mov	r0, r4
 800a790:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 800a794:	3901      	subs	r1, #1
 800a796:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800a79a:	f840 cb04 	str.w	ip, [r0], #4
 800a79e:	00bf      	lsls	r7, r7, #2
 800a7a0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800a7a4:	b2ff      	uxtb	r7, r7
 800a7a6:	d1f3      	bne.n	800a790 <_DrawBitmap+0x470>
 800a7a8:	3e01      	subs	r6, #1
 800a7aa:	b2f6      	uxtb	r6, r6
 800a7ac:	3601      	adds	r6, #1
 800a7ae:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f000 8140 	beq.w	800aa38 <_DrawBitmap+0x718>
 800a7b8:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800a7bc:	2604      	movs	r6, #4
 800a7be:	e7e1      	b.n	800a784 <_DrawBitmap+0x464>
 800a7c0:	9906      	ldr	r1, [sp, #24]
 800a7c2:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800a7c6:	4449      	add	r1, r9
 800a7c8:	d122      	bne.n	800a810 <_DrawBitmap+0x4f0>
 800a7ca:	f109 0901 	add.w	r9, r9, #1
 800a7ce:	fa5f f289 	uxtb.w	r2, r9
 800a7d2:	00bf      	lsls	r7, r7, #2
 800a7d4:	4296      	cmp	r6, r2
 800a7d6:	b2ff      	uxtb	r7, r7
 800a7d8:	d1f2      	bne.n	800a7c0 <_DrawBitmap+0x4a0>
 800a7da:	9f06      	ldr	r7, [sp, #24]
 800a7dc:	3e01      	subs	r6, #1
 800a7de:	b2f6      	uxtb	r6, r6
 800a7e0:	1c7b      	adds	r3, r7, #1
 800a7e2:	1c72      	adds	r2, r6, #1
 800a7e4:	199e      	adds	r6, r3, r6
 800a7e6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800a7ea:	9606      	str	r6, [sp, #24]
 800a7ec:	f1b8 0f00 	cmp.w	r8, #0
 800a7f0:	f000 8122 	beq.w	800aa38 <_DrawBitmap+0x718>
 800a7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a7fc:	2604      	movs	r6, #4
 800a7fe:	4546      	cmp	r6, r8
 800a800:	bfc8      	it	gt
 800a802:	fa5f f688 	uxtbgt.w	r6, r8
 800a806:	ebc6 0808 	rsb	r8, r6, r8
 800a80a:	f04f 0900 	mov.w	r9, #0
 800a80e:	e7d7      	b.n	800a7c0 <_DrawBitmap+0x4a0>
 800a810:	09ba      	lsrs	r2, r7, #6
 800a812:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a816:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 800a81a:	f1bc 0f00 	cmp.w	ip, #0
 800a81e:	d0d4      	beq.n	800a7ca <_DrawBitmap+0x4aa>
 800a820:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800a824:	6812      	ldr	r2, [r2, #0]
 800a826:	920b      	str	r2, [sp, #44]	; 0x2c
 800a828:	4660      	mov	r0, ip
 800a82a:	f8cd c00c 	str.w	ip, [sp, #12]
 800a82e:	9a05      	ldr	r2, [sp, #20]
 800a830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a832:	4798      	blx	r3
 800a834:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a838:	e7c7      	b.n	800a7ca <_DrawBitmap+0x4aa>
 800a83a:	4650      	mov	r0, sl
 800a83c:	465b      	mov	r3, fp
 800a83e:	429e      	cmp	r6, r3
 800a840:	bfc8      	it	gt
 800a842:	b2de      	uxtbgt	r6, r3
 800a844:	1b9b      	subs	r3, r3, r6
 800a846:	1d22      	adds	r2, r4, #4
 800a848:	46b4      	mov	ip, r6
 800a84a:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800a84e:	d005      	beq.n	800a85c <_DrawBitmap+0x53c>
 800a850:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800a854:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800a858:	f842 1c04 	str.w	r1, [r2, #-4]
 800a85c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a860:	00bf      	lsls	r7, r7, #2
 800a862:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800a866:	b2ff      	uxtb	r7, r7
 800a868:	f102 0204 	add.w	r2, r2, #4
 800a86c:	d1ed      	bne.n	800a84a <_DrawBitmap+0x52a>
 800a86e:	3e01      	subs	r6, #1
 800a870:	b2f6      	uxtb	r6, r6
 800a872:	3601      	adds	r6, #1
 800a874:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f000 80dd 	beq.w	800aa38 <_DrawBitmap+0x718>
 800a87e:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800a882:	2604      	movs	r6, #4
 800a884:	e7db      	b.n	800a83e <_DrawBitmap+0x51e>
 800a886:	bf00      	nop
 800a888:	08013168 	.word	0x08013168
 800a88c:	08014198 	.word	0x08014198
 800a890:	20000084 	.word	0x20000084
 800a894:	4a71      	ldr	r2, [pc, #452]	; (800aa5c <_DrawBitmap+0x73c>)
 800a896:	f89a 3000 	ldrb.w	r3, [sl]
 800a89a:	6812      	ldr	r2, [r2, #0]
 800a89c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a89e:	7c12      	ldrb	r2, [r2, #16]
 800a8a0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a8a2:	f002 0203 	and.w	r2, r2, #3
 800a8a6:	4083      	lsls	r3, r0
 800a8a8:	2a01      	cmp	r2, #1
 800a8aa:	b2de      	uxtb	r6, r3
 800a8ac:	f000 809c 	beq.w	800a9e8 <_DrawBitmap+0x6c8>
 800a8b0:	d302      	bcc.n	800a8b8 <_DrawBitmap+0x598>
 800a8b2:	2a02      	cmp	r2, #2
 800a8b4:	d035      	beq.n	800a922 <_DrawBitmap+0x602>
 800a8b6:	e0bf      	b.n	800aa38 <_DrawBitmap+0x718>
 800a8b8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a8ba:	b15f      	cbz	r7, 800a8d4 <_DrawBitmap+0x5b4>
 800a8bc:	0936      	lsrs	r6, r6, #4
 800a8be:	f10a 0201 	add.w	r2, sl, #1
 800a8c2:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800a8c6:	6023      	str	r3, [r4, #0]
 800a8c8:	f89a 6001 	ldrb.w	r6, [sl, #1]
 800a8cc:	9c08      	ldr	r4, [sp, #32]
 800a8ce:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a8d2:	e001      	b.n	800a8d8 <_DrawBitmap+0x5b8>
 800a8d4:	465b      	mov	r3, fp
 800a8d6:	4652      	mov	r2, sl
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	dd1a      	ble.n	800a912 <_DrawBitmap+0x5f2>
 800a8dc:	1058      	asrs	r0, r3, #1
 800a8de:	f104 0108 	add.w	r1, r4, #8
 800a8e2:	f003 0301 	and.w	r3, r3, #1
 800a8e6:	eb02 0800 	add.w	r8, r2, r0
 800a8ea:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 800a8ee:	f006 060f 	and.w	r6, r6, #15
 800a8f2:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 800a8f6:	f841 7c08 	str.w	r7, [r1, #-8]
 800a8fa:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a8fe:	f841 6c04 	str.w	r6, [r1, #-4]
 800a902:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800a906:	4542      	cmp	r2, r8
 800a908:	f101 0108 	add.w	r1, r1, #8
 800a90c:	d1ed      	bne.n	800a8ea <_DrawBitmap+0x5ca>
 800a90e:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 8090 	beq.w	800aa38 <_DrawBitmap+0x718>
 800a918:	0936      	lsrs	r6, r6, #4
 800a91a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800a91e:	6023      	str	r3, [r4, #0]
 800a920:	e08a      	b.n	800aa38 <_DrawBitmap+0x718>
 800a922:	981e      	ldr	r0, [sp, #120]	; 0x78
 800a924:	b1c0      	cbz	r0, 800a958 <_DrawBitmap+0x638>
 800a926:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800a92a:	d00a      	beq.n	800a942 <_DrawBitmap+0x622>
 800a92c:	0936      	lsrs	r6, r6, #4
 800a92e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800a932:	6023      	str	r3, [r4, #0]
 800a934:	b12f      	cbz	r7, 800a942 <_DrawBitmap+0x622>
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	9904      	ldr	r1, [sp, #16]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	9a05      	ldr	r2, [sp, #20]
 800a93e:	4638      	mov	r0, r7
 800a940:	4798      	blx	r3
 800a942:	9904      	ldr	r1, [sp, #16]
 800a944:	9c08      	ldr	r4, [sp, #32]
 800a946:	f89a 6001 	ldrb.w	r6, [sl, #1]
 800a94a:	f101 0801 	add.w	r8, r1, #1
 800a94e:	f10b 3cff 	add.w	ip, fp, #4294967295
 800a952:	f10a 0901 	add.w	r9, sl, #1
 800a956:	e011      	b.n	800a97c <_DrawBitmap+0x65c>
 800a958:	46dc      	mov	ip, fp
 800a95a:	46d1      	mov	r9, sl
 800a95c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a960:	e00c      	b.n	800a97c <_DrawBitmap+0x65c>
 800a962:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 800a966:	d10d      	bne.n	800a984 <_DrawBitmap+0x664>
 800a968:	f016 060f 	ands.w	r6, r6, #15
 800a96c:	d11b      	bne.n	800a9a6 <_DrawBitmap+0x686>
 800a96e:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 800a972:	3408      	adds	r4, #8
 800a974:	f108 0802 	add.w	r8, r8, #2
 800a978:	f1ac 0c02 	sub.w	ip, ip, #2
 800a97c:	f1bc 0f01 	cmp.w	ip, #1
 800a980:	dcef      	bgt.n	800a962 <_DrawBitmap+0x642>
 800a982:	e021      	b.n	800a9c8 <_DrawBitmap+0x6a8>
 800a984:	0933      	lsrs	r3, r6, #4
 800a986:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800a98a:	6023      	str	r3, [r4, #0]
 800a98c:	2f00      	cmp	r7, #0
 800a98e:	d0eb      	beq.n	800a968 <_DrawBitmap+0x648>
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	9a05      	ldr	r2, [sp, #20]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f8cd c00c 	str.w	ip, [sp, #12]
 800a99a:	4638      	mov	r0, r7
 800a99c:	4641      	mov	r1, r8
 800a99e:	4798      	blx	r3
 800a9a0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a9a4:	e7e0      	b.n	800a968 <_DrawBitmap+0x648>
 800a9a6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800a9aa:	6063      	str	r3, [r4, #4]
 800a9ac:	2f00      	cmp	r7, #0
 800a9ae:	d0de      	beq.n	800a96e <_DrawBitmap+0x64e>
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	9a05      	ldr	r2, [sp, #20]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f8cd c00c 	str.w	ip, [sp, #12]
 800a9ba:	4638      	mov	r0, r7
 800a9bc:	f108 0101 	add.w	r1, r8, #1
 800a9c0:	4798      	blx	r3
 800a9c2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a9c6:	e7d2      	b.n	800a96e <_DrawBitmap+0x64e>
 800a9c8:	f1bc 0f00 	cmp.w	ip, #0
 800a9cc:	d034      	beq.n	800aa38 <_DrawBitmap+0x718>
 800a9ce:	0936      	lsrs	r6, r6, #4
 800a9d0:	d032      	beq.n	800aa38 <_DrawBitmap+0x718>
 800a9d2:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800a9d6:	6023      	str	r3, [r4, #0]
 800a9d8:	b377      	cbz	r7, 800aa38 <_DrawBitmap+0x718>
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	9a05      	ldr	r2, [sp, #20]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	4641      	mov	r1, r8
 800a9e4:	4798      	blx	r3
 800a9e6:	e027      	b.n	800aa38 <_DrawBitmap+0x718>
 800a9e8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a9ea:	f1c7 0302 	rsb	r3, r7, #2
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	4657      	mov	r7, sl
 800a9f2:	465a      	mov	r2, fp
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	bfc8      	it	gt
 800a9f8:	b2d3      	uxtbgt	r3, r2
 800a9fa:	1ad2      	subs	r2, r2, r3
 800a9fc:	1d20      	adds	r0, r4, #4
 800a9fe:	469c      	mov	ip, r3
 800aa00:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800aa04:	d005      	beq.n	800aa12 <_DrawBitmap+0x6f2>
 800aa06:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800aa0a:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800aa0e:	f840 1c04 	str.w	r1, [r0, #-4]
 800aa12:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aa16:	0136      	lsls	r6, r6, #4
 800aa18:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800aa1c:	b2f6      	uxtb	r6, r6
 800aa1e:	f100 0004 	add.w	r0, r0, #4
 800aa22:	d1ed      	bne.n	800aa00 <_DrawBitmap+0x6e0>
 800aa24:	3b01      	subs	r3, #1
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	3301      	adds	r3, #1
 800aa2a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800aa2e:	b11a      	cbz	r2, 800aa38 <_DrawBitmap+0x718>
 800aa30:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800aa34:	2302      	movs	r3, #2
 800aa36:	e7dd      	b.n	800a9f4 <_DrawBitmap+0x6d4>
 800aa38:	9b05      	ldr	r3, [sp, #20]
 800aa3a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	44ba      	add	sl, r7
 800aa40:	9305      	str	r3, [sp, #20]
 800aa42:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800aa44:	9b08      	ldr	r3, [sp, #32]
 800aa46:	443b      	add	r3, r7
 800aa48:	9308      	str	r3, [sp, #32]
 800aa4a:	e5c3      	b.n	800a5d4 <_DrawBitmap+0x2b4>
 800aa4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa4e:	b113      	cbz	r3, 800aa56 <_DrawBitmap+0x736>
 800aa50:	a80f      	add	r0, sp, #60	; 0x3c
 800aa52:	f004 fa27 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800aa56:	b011      	add	sp, #68	; 0x44
 800aa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5c:	20000084 	.word	0x20000084

0800aa60 <GUI_MEMDEV__WriteToActiveAt>:
 800aa60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aa64:	460e      	mov	r6, r1
 800aa66:	4690      	mov	r8, r2
 800aa68:	4607      	mov	r7, r0
 800aa6a:	f004 fa0d 	bl	800ee88 <GUI_ALLOC_LockH>
 800aa6e:	6803      	ldr	r3, [r0, #0]
 800aa70:	ac02      	add	r4, sp, #8
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	f844 0d04 	str.w	r0, [r4, #-4]!
 800aa78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	2116      	movs	r1, #22
 800aa7e:	4798      	blx	r3
 800aa80:	4605      	mov	r5, r0
 800aa82:	4620      	mov	r0, r4
 800aa84:	f004 fa0e 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800aa88:	b11d      	cbz	r5, 800aa92 <GUI_MEMDEV__WriteToActiveAt+0x32>
 800aa8a:	4638      	mov	r0, r7
 800aa8c:	4631      	mov	r1, r6
 800aa8e:	4642      	mov	r2, r8
 800aa90:	47a8      	blx	r5
 800aa92:	b002      	add	sp, #8
 800aa94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aa98 <GUI_MEMDEV__CreateFixed>:
 800aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9c:	4e3e      	ldr	r6, [pc, #248]	; (800ab98 <GUI_MEMDEV__CreateFixed+0x100>)
 800aa9e:	b087      	sub	sp, #28
 800aaa0:	461d      	mov	r5, r3
 800aaa2:	6833      	ldr	r3, [r6, #0]
 800aaa4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800aaa6:	7c5b      	ldrb	r3, [r3, #17]
 800aaa8:	4683      	mov	fp, r0
 800aaaa:	468a      	mov	sl, r1
 800aaac:	4690      	mov	r8, r2
 800aaae:	9811      	ldr	r0, [sp, #68]	; 0x44
 800aab0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800aab2:	2200      	movs	r2, #0
 800aab4:	f002 fcc0 	bl	800d438 <GUI_DEVICE_Create>
 800aab8:	4604      	mov	r4, r0
 800aaba:	2800      	cmp	r0, #0
 800aabc:	d033      	beq.n	800ab26 <GUI_MEMDEV__CreateFixed+0x8e>
 800aabe:	6903      	ldr	r3, [r0, #16]
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	4798      	blx	r3
 800aac4:	f001 fb1d 	bl	800c102 <LCD__GetBPPDevice>
 800aac8:	fb08 f600 	mul.w	r6, r8, r0
 800aacc:	9003      	str	r0, [sp, #12]
 800aace:	3607      	adds	r6, #7
 800aad0:	f004 fb1a 	bl	800f108 <GUI_ALLOC_RequestSize>
 800aad4:	f017 0901 	ands.w	r9, r7, #1
 800aad8:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 800aadc:	d104      	bne.n	800aae8 <GUI_MEMDEV__CreateFixed+0x50>
 800aade:	2304      	movs	r3, #4
 800aae0:	fb90 f0f3 	sdiv	r0, r0, r3
 800aae4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800aae8:	2d00      	cmp	r5, #0
 800aaea:	dc09      	bgt.n	800ab00 <GUI_MEMDEV__CreateFixed+0x68>
 800aaec:	b11e      	cbz	r6, 800aaf6 <GUI_MEMDEV__CreateFixed+0x5e>
 800aaee:	3818      	subs	r0, #24
 800aaf0:	fbb0 f0f6 	udiv	r0, r0, r6
 800aaf4:	e000      	b.n	800aaf8 <GUI_MEMDEV__CreateFixed+0x60>
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	426d      	negs	r5, r5
 800aafa:	42a8      	cmp	r0, r5
 800aafc:	bfb8      	it	lt
 800aafe:	4605      	movlt	r5, r0
 800ab00:	f1b9 0f00 	cmp.w	r9, #0
 800ab04:	d109      	bne.n	800ab1a <GUI_MEMDEV__CreateFixed+0x82>
 800ab06:	f8cd 9000 	str.w	r9, [sp]
 800ab0a:	4658      	mov	r0, fp
 800ab0c:	4651      	mov	r1, sl
 800ab0e:	4642      	mov	r2, r8
 800ab10:	462b      	mov	r3, r5
 800ab12:	f005 fd3f 	bl	8010594 <GUI_USAGE_BM_Create>
 800ab16:	4607      	mov	r7, r0
 800ab18:	e000      	b.n	800ab1c <GUI_MEMDEV__CreateFixed+0x84>
 800ab1a:	2700      	movs	r7, #0
 800ab1c:	2d00      	cmp	r5, #0
 800ab1e:	dc04      	bgt.n	800ab2a <GUI_MEMDEV__CreateFixed+0x92>
 800ab20:	4620      	mov	r0, r4
 800ab22:	f002 fc87 	bl	800d434 <GUI_DEVICE_Delete>
 800ab26:	2000      	movs	r0, #0
 800ab28:	e032      	b.n	800ab90 <GUI_MEMDEV__CreateFixed+0xf8>
 800ab2a:	fb06 f005 	mul.w	r0, r6, r5
 800ab2e:	3018      	adds	r0, #24
 800ab30:	f1b9 0f00 	cmp.w	r9, #0
 800ab34:	d002      	beq.n	800ab3c <GUI_MEMDEV__CreateFixed+0xa4>
 800ab36:	f004 fb73 	bl	800f220 <GUI_ALLOC_AllocNoInit>
 800ab3a:	e001      	b.n	800ab40 <GUI_MEMDEV__CreateFixed+0xa8>
 800ab3c:	f004 fb7c 	bl	800f238 <GUI_ALLOC_AllocZero>
 800ab40:	4681      	mov	r9, r0
 800ab42:	b940      	cbnz	r0, 800ab56 <GUI_MEMDEV__CreateFixed+0xbe>
 800ab44:	4620      	mov	r0, r4
 800ab46:	f002 fc75 	bl	800d434 <GUI_DEVICE_Delete>
 800ab4a:	2f00      	cmp	r7, #0
 800ab4c:	d0eb      	beq.n	800ab26 <GUI_MEMDEV__CreateFixed+0x8e>
 800ab4e:	4638      	mov	r0, r7
 800ab50:	f004 f9d4 	bl	800eefc <GUI_ALLOC_Free>
 800ab54:	e01b      	b.n	800ab8e <GUI_MEMDEV__CreateFixed+0xf6>
 800ab56:	f004 f997 	bl	800ee88 <GUI_ALLOC_LockH>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	a806      	add	r0, sp, #24
 800ab5e:	9a03      	ldr	r2, [sp, #12]
 800ab60:	f840 3d04 	str.w	r3, [r0, #-4]!
 800ab64:	611a      	str	r2, [r3, #16]
 800ab66:	601c      	str	r4, [r3, #0]
 800ab68:	f8a3 b004 	strh.w	fp, [r3, #4]
 800ab6c:	f8a3 a006 	strh.w	sl, [r3, #6]
 800ab70:	f8a3 8008 	strh.w	r8, [r3, #8]
 800ab74:	815d      	strh	r5, [r3, #10]
 800ab76:	60de      	str	r6, [r3, #12]
 800ab78:	615f      	str	r7, [r3, #20]
 800ab7a:	f004 f993 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800ab7e:	4a06      	ldr	r2, [pc, #24]	; (800ab98 <GUI_MEMDEV__CreateFixed+0x100>)
 800ab80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab82:	6123      	str	r3, [r4, #16]
 800ab84:	6813      	ldr	r3, [r2, #0]
 800ab86:	f8c4 9008 	str.w	r9, [r4, #8]
 800ab8a:	7c5b      	ldrb	r3, [r3, #17]
 800ab8c:	61a3      	str	r3, [r4, #24]
 800ab8e:	4648      	mov	r0, r9
 800ab90:	b007      	add	sp, #28
 800ab92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab96:	bf00      	nop
 800ab98:	20000084 	.word	0x20000084

0800ab9c <GUI_MEMDEV_GetBitsPerPixel>:
 800ab9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab9e:	4605      	mov	r5, r0
 800aba0:	b170      	cbz	r0, 800abc0 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800aba2:	f004 f971 	bl	800ee88 <GUI_ALLOC_LockH>
 800aba6:	6803      	ldr	r3, [r0, #0]
 800aba8:	ac02      	add	r4, sp, #8
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	f844 0d04 	str.w	r0, [r4, #-4]!
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	4798      	blx	r3
 800abb4:	f001 faa5 	bl	800c102 <LCD__GetBPPDevice>
 800abb8:	4605      	mov	r5, r0
 800abba:	4620      	mov	r0, r4
 800abbc:	f004 f972 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800abc0:	4628      	mov	r0, r5
 800abc2:	b003      	add	sp, #12
 800abc4:	bd30      	pop	{r4, r5, pc}
	...

0800abc8 <GUI_MEMDEV_Delete>:
 800abc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abca:	4604      	mov	r4, r0
 800abcc:	b1d0      	cbz	r0, 800ac04 <GUI_MEMDEV_Delete+0x3c>
 800abce:	4b0e      	ldr	r3, [pc, #56]	; (800ac08 <GUI_MEMDEV_Delete+0x40>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abd4:	4283      	cmp	r3, r0
 800abd6:	d101      	bne.n	800abdc <GUI_MEMDEV_Delete+0x14>
 800abd8:	f002 fef6 	bl	800d9c8 <GUI_SelectLCD>
 800abdc:	4620      	mov	r0, r4
 800abde:	f004 f953 	bl	800ee88 <GUI_ALLOC_LockH>
 800abe2:	9001      	str	r0, [sp, #4]
 800abe4:	6940      	ldr	r0, [r0, #20]
 800abe6:	b108      	cbz	r0, 800abec <GUI_MEMDEV_Delete+0x24>
 800abe8:	f005 fd00 	bl	80105ec <GUI_USAGE_DecUseCnt>
 800abec:	ad02      	add	r5, sp, #8
 800abee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800abf2:	6818      	ldr	r0, [r3, #0]
 800abf4:	f002 fc1e 	bl	800d434 <GUI_DEVICE_Delete>
 800abf8:	4628      	mov	r0, r5
 800abfa:	f004 f953 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800abfe:	4620      	mov	r0, r4
 800ac00:	f004 f97c 	bl	800eefc <GUI_ALLOC_Free>
 800ac04:	b003      	add	sp, #12
 800ac06:	bd30      	pop	{r4, r5, pc}
 800ac08:	20000084 	.word	0x20000084

0800ac0c <GUI_MEMDEV_CreateEx>:
 800ac0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac10:	469a      	mov	sl, r3
 800ac12:	4b19      	ldr	r3, [pc, #100]	; (800ac78 <GUI_MEMDEV_CreateEx+0x6c>)
 800ac14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4607      	mov	r7, r0
 800ac1a:	7c58      	ldrb	r0, [r3, #17]
 800ac1c:	4b17      	ldr	r3, [pc, #92]	; (800ac7c <GUI_MEMDEV_CreateEx+0x70>)
 800ac1e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800ac22:	4688      	mov	r8, r1
 800ac24:	4691      	mov	r9, r2
 800ac26:	68e3      	ldr	r3, [r4, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b04      	cmp	r3, #4
 800ac2c:	d006      	beq.n	800ac3c <GUI_MEMDEV_CreateEx+0x30>
 800ac2e:	6824      	ldr	r4, [r4, #0]
 800ac30:	2c00      	cmp	r4, #0
 800ac32:	d1f8      	bne.n	800ac26 <GUI_MEMDEV_CreateEx+0x1a>
 800ac34:	f002 fbee 	bl	800d414 <GUI_DEVICE__GetpDriver>
 800ac38:	4604      	mov	r4, r0
 800ac3a:	b130      	cbz	r0, 800ac4a <GUI_MEMDEV_CreateEx+0x3e>
 800ac3c:	68e3      	ldr	r3, [r4, #12]
 800ac3e:	4620      	mov	r0, r4
 800ac40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac42:	2101      	movs	r1, #1
 800ac44:	4798      	blx	r3
 800ac46:	4606      	mov	r6, r0
 800ac48:	b908      	cbnz	r0, 800ac4e <GUI_MEMDEV_CreateEx+0x42>
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	e010      	b.n	800ac70 <GUI_MEMDEV_CreateEx+0x64>
 800ac4e:	6924      	ldr	r4, [r4, #16]
 800ac50:	68a3      	ldr	r3, [r4, #8]
 800ac52:	4798      	blx	r3
 800ac54:	3001      	adds	r0, #1
 800ac56:	bf04      	itt	eq
 800ac58:	f045 0501 	orreq.w	r5, r5, #1
 800ac5c:	4c08      	ldreq	r4, [pc, #32]	; (800ac80 <GUI_MEMDEV_CreateEx+0x74>)
 800ac5e:	9402      	str	r4, [sp, #8]
 800ac60:	e88d 0060 	stmia.w	sp, {r5, r6}
 800ac64:	4638      	mov	r0, r7
 800ac66:	4641      	mov	r1, r8
 800ac68:	464a      	mov	r2, r9
 800ac6a:	4653      	mov	r3, sl
 800ac6c:	f7ff ff14 	bl	800aa98 <GUI_MEMDEV__CreateFixed>
 800ac70:	b004      	add	sp, #16
 800ac72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac76:	bf00      	nop
 800ac78:	20000084 	.word	0x20000084
 800ac7c:	20007738 	.word	0x20007738
 800ac80:	080142ac 	.word	0x080142ac

0800ac84 <GUI_MEMDEV_Select>:
 800ac84:	4b11      	ldr	r3, [pc, #68]	; (800accc <GUI_MEMDEV_Select+0x48>)
 800ac86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800ac8e:	461f      	mov	r7, r3
 800ac90:	b910      	cbnz	r0, 800ac98 <GUI_MEMDEV_Select+0x14>
 800ac92:	f002 fe99 	bl	800d9c8 <GUI_SelectLCD>
 800ac96:	e016      	b.n	800acc6 <GUI_MEMDEV_Select+0x42>
 800ac98:	b10e      	cbz	r6, 800ac9e <GUI_MEMDEV_Select+0x1a>
 800ac9a:	f002 fe95 	bl	800d9c8 <GUI_SelectLCD>
 800ac9e:	f7fe ff31 	bl	8009b04 <WM_Deactivate>
 800aca2:	4620      	mov	r0, r4
 800aca4:	f004 f8f0 	bl	800ee88 <GUI_ALLOC_LockH>
 800aca8:	ad02      	add	r5, sp, #8
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	f845 0d04 	str.w	r0, [r5, #-4]!
 800acb0:	661c      	str	r4, [r3, #96]	; 0x60
 800acb2:	6800      	ldr	r0, [r0, #0]
 800acb4:	f002 fc00 	bl	800d4b8 <GUI_DEVICE_Link>
 800acb8:	4628      	mov	r0, r5
 800acba:	f004 f8f3 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800acbe:	f001 f8cf 	bl	800be60 <LCD_UpdateColorIndices>
 800acc2:	f001 fcdf 	bl	800c684 <LCD_SetClipRectMax>
 800acc6:	4630      	mov	r0, r6
 800acc8:	b003      	add	sp, #12
 800acca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800accc:	20000084 	.word	0x20000084

0800acd0 <GUI_MEMDEV_CopyToLCDAt>:
 800acd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acd4:	460c      	mov	r4, r1
 800acd6:	b085      	sub	sp, #20
 800acd8:	4615      	mov	r5, r2
 800acda:	4606      	mov	r6, r0
 800acdc:	2800      	cmp	r0, #0
 800acde:	d041      	beq.n	800ad64 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800ace0:	2000      	movs	r0, #0
 800ace2:	f002 fe7e 	bl	800d9e2 <GUI_SetDrawMode>
 800ace6:	4b21      	ldr	r3, [pc, #132]	; (800ad6c <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4607      	mov	r7, r0
 800acec:	4630      	mov	r0, r6
 800acee:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 800acf2:	f004 f8c9 	bl	800ee88 <GUI_ALLOC_LockH>
 800acf6:	6803      	ldr	r3, [r0, #0]
 800acf8:	9001      	str	r0, [sp, #4]
 800acfa:	6998      	ldr	r0, [r3, #24]
 800acfc:	f002 f9d4 	bl	800d0a8 <GUI_SelectLayer>
 800ad00:	4b1b      	ldr	r3, [pc, #108]	; (800ad70 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 800ad02:	429c      	cmp	r4, r3
 800ad04:	9b01      	ldr	r3, [sp, #4]
 800ad06:	bf04      	itt	eq
 800ad08:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 800ad0c:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 800ad10:	891a      	ldrh	r2, [r3, #8]
 800ad12:	895b      	ldrh	r3, [r3, #10]
 800ad14:	f8ad 4008 	strh.w	r4, [sp, #8]
 800ad18:	3a01      	subs	r2, #1
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	4422      	add	r2, r4
 800ad1e:	442b      	add	r3, r5
 800ad20:	4681      	mov	r9, r0
 800ad22:	f8ad 200c 	strh.w	r2, [sp, #12]
 800ad26:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ad2a:	f8ad 500a 	strh.w	r5, [sp, #10]
 800ad2e:	f7fe fee1 	bl	8009af4 <WM_Activate>
 800ad32:	a801      	add	r0, sp, #4
 800ad34:	f004 f8b6 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800ad38:	a802      	add	r0, sp, #8
 800ad3a:	f7fe fd39 	bl	80097b0 <WM__InitIVRSearch>
 800ad3e:	b948      	cbnz	r0, 800ad54 <GUI_MEMDEV_CopyToLCDAt+0x84>
 800ad40:	4648      	mov	r0, r9
 800ad42:	f002 f9b1 	bl	800d0a8 <GUI_SelectLayer>
 800ad46:	4640      	mov	r0, r8
 800ad48:	f7ff ff9c 	bl	800ac84 <GUI_MEMDEV_Select>
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	f002 fe48 	bl	800d9e2 <GUI_SetDrawMode>
 800ad52:	e007      	b.n	800ad64 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800ad54:	4630      	mov	r0, r6
 800ad56:	4621      	mov	r1, r4
 800ad58:	462a      	mov	r2, r5
 800ad5a:	f004 fee7 	bl	800fb2c <GUI_MEMDEV__WriteToActiveOpaque>
 800ad5e:	f7fe fc65 	bl	800962c <WM__GetNextIVR>
 800ad62:	e7ec      	b.n	800ad3e <GUI_MEMDEV_CopyToLCDAt+0x6e>
 800ad64:	b005      	add	sp, #20
 800ad66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20000084 	.word	0x20000084
 800ad70:	fffff001 	.word	0xfffff001

0800ad74 <GUI_MEMDEV_CopyToLCD>:
 800ad74:	4901      	ldr	r1, [pc, #4]	; (800ad7c <GUI_MEMDEV_CopyToLCD+0x8>)
 800ad76:	460a      	mov	r2, r1
 800ad78:	f7ff bfaa 	b.w	800acd0 <GUI_MEMDEV_CopyToLCDAt>
 800ad7c:	fffff001 	.word	0xfffff001

0800ad80 <_SetPhysRAMAddr>:
 800ad80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad82:	4604      	mov	r4, r0
 800ad84:	460e      	mov	r6, r1
 800ad86:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800ad8a:	212a      	movs	r1, #42	; 0x2a
 800ad8c:	4615      	mov	r5, r2
 800ad8e:	4798      	blx	r3
 800ad90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ad92:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ad96:	4431      	add	r1, r6
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800ad9e:	4798      	blx	r3
 800ada0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ada2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ada6:	b2b7      	uxth	r7, r6
 800ada8:	4439      	add	r1, r7
 800adaa:	4620      	mov	r0, r4
 800adac:	b2c9      	uxtb	r1, r1
 800adae:	4798      	blx	r3
 800adb0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800adb2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800adb6:	4431      	add	r1, r6
 800adb8:	4620      	mov	r0, r4
 800adba:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800adbe:	4798      	blx	r3
 800adc0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800adc2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800adc6:	4439      	add	r1, r7
 800adc8:	4620      	mov	r0, r4
 800adca:	b2c9      	uxtb	r1, r1
 800adcc:	4798      	blx	r3
 800adce:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800add2:	4620      	mov	r0, r4
 800add4:	212b      	movs	r1, #43	; 0x2b
 800add6:	4798      	blx	r3
 800add8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800adda:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800adde:	4429      	add	r1, r5
 800ade0:	4620      	mov	r0, r4
 800ade2:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800ade6:	4798      	blx	r3
 800ade8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800adea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800adee:	b2ae      	uxth	r6, r5
 800adf0:	4431      	add	r1, r6
 800adf2:	4620      	mov	r0, r4
 800adf4:	b2c9      	uxtb	r1, r1
 800adf6:	4798      	blx	r3
 800adf8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800adfa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800adfe:	4429      	add	r1, r5
 800ae00:	4620      	mov	r0, r4
 800ae02:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800ae06:	4798      	blx	r3
 800ae08:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ae0a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ae0e:	4431      	add	r1, r6
 800ae10:	4620      	mov	r0, r4
 800ae12:	b2c9      	uxtb	r1, r1
 800ae14:	4798      	blx	r3
 800ae16:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	212c      	movs	r1, #44	; 0x2c
 800ae1e:	4798      	blx	r3
 800ae20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae22 <_SetRect>:
 800ae22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae26:	4604      	mov	r4, r0
 800ae28:	4688      	mov	r8, r1
 800ae2a:	461f      	mov	r7, r3
 800ae2c:	212a      	movs	r1, #42	; 0x2a
 800ae2e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800ae32:	9d06      	ldr	r5, [sp, #24]
 800ae34:	4616      	mov	r6, r2
 800ae36:	4798      	blx	r3
 800ae38:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ae3a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ae3e:	4441      	add	r1, r8
 800ae40:	4620      	mov	r0, r4
 800ae42:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800ae46:	4798      	blx	r3
 800ae48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ae4a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ae4e:	4441      	add	r1, r8
 800ae50:	4620      	mov	r0, r4
 800ae52:	b2c9      	uxtb	r1, r1
 800ae54:	4798      	blx	r3
 800ae56:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ae58:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ae5c:	4439      	add	r1, r7
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800ae64:	4798      	blx	r3
 800ae66:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ae68:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ae6c:	4439      	add	r1, r7
 800ae6e:	4620      	mov	r0, r4
 800ae70:	b2c9      	uxtb	r1, r1
 800ae72:	4798      	blx	r3
 800ae74:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800ae78:	4620      	mov	r0, r4
 800ae7a:	212b      	movs	r1, #43	; 0x2b
 800ae7c:	4798      	blx	r3
 800ae7e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ae80:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ae84:	4431      	add	r1, r6
 800ae86:	4620      	mov	r0, r4
 800ae88:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800ae8c:	4798      	blx	r3
 800ae8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ae90:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ae94:	4431      	add	r1, r6
 800ae96:	4620      	mov	r0, r4
 800ae98:	b2c9      	uxtb	r1, r1
 800ae9a:	4798      	blx	r3
 800ae9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ae9e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800aea2:	4429      	add	r1, r5
 800aea4:	4620      	mov	r0, r4
 800aea6:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800aeaa:	4798      	blx	r3
 800aeac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aeae:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800aeb2:	4429      	add	r1, r5
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	b2c9      	uxtb	r1, r1
 800aeb8:	4798      	blx	r3
 800aeba:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800aebe:	4620      	mov	r0, r4
 800aec0:	212c      	movs	r1, #44	; 0x2c
 800aec2:	4798      	blx	r3
 800aec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aec8 <_SetOrientation>:
 800aec8:	b513      	push	{r0, r1, r4, lr}
 800aeca:	4a0d      	ldr	r2, [pc, #52]	; (800af00 <_SetOrientation+0x38>)
 800aecc:	4604      	mov	r4, r0
 800aece:	6851      	ldr	r1, [r2, #4]
 800aed0:	6810      	ldr	r0, [r2, #0]
 800aed2:	466b      	mov	r3, sp
 800aed4:	c303      	stmia	r3!, {r0, r1}
 800aed6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800aeda:	4620      	mov	r0, r4
 800aedc:	2136      	movs	r1, #54	; 0x36
 800aede:	4798      	blx	r3
 800aee0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aee2:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800aee4:	aa02      	add	r2, sp, #8
 800aee6:	4413      	add	r3, r2
 800aee8:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 800aeec:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800aef0:	4319      	orrs	r1, r3
 800aef2:	4620      	mov	r0, r4
 800aef4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800aef8:	b289      	uxth	r1, r1
 800aefa:	4798      	blx	r3
 800aefc:	b002      	add	sp, #8
 800aefe:	bd10      	pop	{r4, pc}
 800af00:	08012bcc 	.word	0x08012bcc

0800af04 <_ReadPixel_16bpp_B8>:
 800af04:	b513      	push	{r0, r1, r4, lr}
 800af06:	4604      	mov	r4, r0
 800af08:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800af0c:	202e      	movs	r0, #46	; 0x2e
 800af0e:	4798      	blx	r3
 800af10:	6a21      	ldr	r1, [r4, #32]
 800af12:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800af16:	4668      	mov	r0, sp
 800af18:	3103      	adds	r1, #3
 800af1a:	4798      	blx	r3
 800af1c:	6a22      	ldr	r2, [r4, #32]
 800af1e:	ab00      	add	r3, sp, #0
 800af20:	4413      	add	r3, r2
 800af22:	f81d 2002 	ldrb.w	r2, [sp, r2]
 800af26:	7859      	ldrb	r1, [r3, #1]
 800af28:	7898      	ldrb	r0, [r3, #2]
 800af2a:	08d2      	lsrs	r2, r2, #3
 800af2c:	0889      	lsrs	r1, r1, #2
 800af2e:	02d2      	lsls	r2, r2, #11
 800af30:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 800af34:	ea42 00d0 	orr.w	r0, r2, r0, lsr #3
 800af38:	b002      	add	sp, #8
 800af3a:	bd10      	pop	{r4, pc}

0800af3c <_ReadPixel_16bpp_B16_I>:
 800af3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af3e:	4604      	mov	r4, r0
 800af40:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800af44:	202e      	movs	r0, #46	; 0x2e
 800af46:	4798      	blx	r3
 800af48:	6a21      	ldr	r1, [r4, #32]
 800af4a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800af4e:	4668      	mov	r0, sp
 800af50:	3102      	adds	r1, #2
 800af52:	4798      	blx	r3
 800af54:	6a23      	ldr	r3, [r4, #32]
 800af56:	a900      	add	r1, sp, #0
 800af58:	eb01 0243 	add.w	r2, r1, r3, lsl #1
 800af5c:	f83d 0013 	ldrh.w	r0, [sp, r3, lsl #1]
 800af60:	8852      	ldrh	r2, [r2, #2]
 800af62:	f402 417c 	and.w	r1, r2, #64512	; 0xfc00
 800af66:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800af6a:	ea42 1251 	orr.w	r2, r2, r1, lsr #5
 800af6e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800af72:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800af76:	b004      	add	sp, #16
 800af78:	bd10      	pop	{r4, pc}

0800af7a <_SetReg_B8>:
 800af7a:	b538      	push	{r3, r4, r5, lr}
 800af7c:	4604      	mov	r4, r0
 800af7e:	460d      	mov	r5, r1
 800af80:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800af84:	0a08      	lsrs	r0, r1, #8
 800af86:	4798      	blx	r3
 800af88:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800af8c:	b2e8      	uxtb	r0, r5
 800af8e:	4798      	blx	r3
 800af90:	bd38      	pop	{r3, r4, r5, pc}

0800af92 <_SetReg_B16>:
 800af92:	b508      	push	{r3, lr}
 800af94:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800af98:	4608      	mov	r0, r1
 800af9a:	4798      	blx	r3
 800af9c:	bd08      	pop	{r3, pc}

0800af9e <_WritePara_B8>:
 800af9e:	b508      	push	{r3, lr}
 800afa0:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 800afa4:	b2c8      	uxtb	r0, r1
 800afa6:	4798      	blx	r3
 800afa8:	bd08      	pop	{r3, pc}

0800afaa <_WritePara_B16>:
 800afaa:	b508      	push	{r3, lr}
 800afac:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 800afb0:	4608      	mov	r0, r1
 800afb2:	4798      	blx	r3
 800afb4:	bd08      	pop	{r3, pc}
	...

0800afb8 <_SetInterface>:
 800afb8:	2908      	cmp	r1, #8
 800afba:	d002      	beq.n	800afc2 <_SetInterface+0xa>
 800afbc:	2910      	cmp	r1, #16
 800afbe:	d005      	beq.n	800afcc <_SetInterface+0x14>
 800afc0:	4770      	bx	lr
 800afc2:	4b06      	ldr	r3, [pc, #24]	; (800afdc <_SetInterface+0x24>)
 800afc4:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800afc8:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <_SetInterface+0x28>)
 800afca:	e003      	b.n	800afd4 <_SetInterface+0x1c>
 800afcc:	4b05      	ldr	r3, [pc, #20]	; (800afe4 <_SetInterface+0x2c>)
 800afce:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800afd2:	4b05      	ldr	r3, [pc, #20]	; (800afe8 <_SetInterface+0x30>)
 800afd4:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	0800af7b 	.word	0x0800af7b
 800afe0:	0800af9f 	.word	0x0800af9f
 800afe4:	0800af93 	.word	0x0800af93
 800afe8:	0800afab 	.word	0x0800afab

0800afec <_ReadRect_16bpp_B8>:
 800afec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afee:	b085      	sub	sp, #20
 800aff0:	6884      	ldr	r4, [r0, #8]
 800aff2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800aff4:	9700      	str	r7, [sp, #0]
 800aff6:	1abd      	subs	r5, r7, r2
 800aff8:	1a58      	subs	r0, r3, r1
 800affa:	3501      	adds	r5, #1
 800affc:	fb00 5505 	mla	r5, r0, r5, r5
 800b000:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b004:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b006:	4620      	mov	r0, r4
 800b008:	47b8      	blx	r7
 800b00a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800b00e:	202e      	movs	r0, #46	; 0x2e
 800b010:	4798      	blx	r3
 800b012:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800b016:	6a21      	ldr	r1, [r4, #32]
 800b018:	a802      	add	r0, sp, #8
 800b01a:	4798      	blx	r3
 800b01c:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800b020:	a802      	add	r0, sp, #8
 800b022:	2103      	movs	r1, #3
 800b024:	4798      	blx	r3
 800b026:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b02a:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800b02e:	08db      	lsrs	r3, r3, #3
 800b030:	0892      	lsrs	r2, r2, #2
 800b032:	02db      	lsls	r3, r3, #11
 800b034:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800b038:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800b03c:	3d01      	subs	r5, #1
 800b03e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 800b042:	f826 3b02 	strh.w	r3, [r6], #2
 800b046:	d1e9      	bne.n	800b01c <_ReadRect_16bpp_B8+0x30>
 800b048:	b005      	add	sp, #20
 800b04a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b04c <_ReadRect_16bpp_B16_I>:
 800b04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b04e:	b087      	sub	sp, #28
 800b050:	6884      	ldr	r4, [r0, #8]
 800b052:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800b054:	9700      	str	r7, [sp, #0]
 800b056:	1abd      	subs	r5, r7, r2
 800b058:	1a58      	subs	r0, r3, r1
 800b05a:	3501      	adds	r5, #1
 800b05c:	fb00 5505 	mla	r5, r0, r5, r5
 800b060:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b064:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800b066:	4620      	mov	r0, r4
 800b068:	47b8      	blx	r7
 800b06a:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 800b06e:	202e      	movs	r0, #46	; 0x2e
 800b070:	4798      	blx	r3
 800b072:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800b076:	6a21      	ldr	r1, [r4, #32]
 800b078:	a802      	add	r0, sp, #8
 800b07a:	4798      	blx	r3
 800b07c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800b080:	a802      	add	r0, sp, #8
 800b082:	2102      	movs	r1, #2
 800b084:	4798      	blx	r3
 800b086:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800b08a:	f403 427c 	and.w	r2, r3, #64512	; 0xfc00
 800b08e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800b092:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 800b096:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800b09a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 800b09e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b0a2:	3d01      	subs	r5, #1
 800b0a4:	f826 3b02 	strh.w	r3, [r6], #2
 800b0a8:	d1e8      	bne.n	800b07c <_ReadRect_16bpp_B16_I+0x30>
 800b0aa:	b007      	add	sp, #28
 800b0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b0b0 <GUIDRV_FlexColor_SetFunc66709>:
 800b0b0:	b510      	push	{r4, lr}
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	f000 fde2 	bl	800bc7c <GUIDRV_FlexColor__InitOnce>
 800b0b8:	68a3      	ldr	r3, [r4, #8]
 800b0ba:	4a12      	ldr	r2, [pc, #72]	; (800b104 <GUIDRV_FlexColor_SetFunc66709+0x54>)
 800b0bc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800b0c0:	4a11      	ldr	r2, [pc, #68]	; (800b108 <GUIDRV_FlexColor_SetFunc66709+0x58>)
 800b0c2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800b0c6:	4a11      	ldr	r2, [pc, #68]	; (800b10c <GUIDRV_FlexColor_SetFunc66709+0x5c>)
 800b0c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800b0cc:	4a10      	ldr	r2, [pc, #64]	; (800b110 <GUIDRV_FlexColor_SetFunc66709+0x60>)
 800b0ce:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800b0d8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800b0dc:	4a0d      	ldr	r2, [pc, #52]	; (800b114 <GUIDRV_FlexColor_SetFunc66709+0x64>)
 800b0de:	490e      	ldr	r1, [pc, #56]	; (800b118 <GUIDRV_FlexColor_SetFunc66709+0x68>)
 800b0e0:	6812      	ldr	r2, [r2, #0]
 800b0e2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800b0e6:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800b0e8:	6809      	ldr	r1, [r1, #0]
 800b0ea:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 800b0ee:	f022 0203 	bic.w	r2, r2, #3
 800b0f2:	490a      	ldr	r1, [pc, #40]	; (800b11c <GUIDRV_FlexColor_SetFunc66709+0x6c>)
 800b0f4:	84da      	strh	r2, [r3, #38]	; 0x26
 800b0f6:	4a0a      	ldr	r2, [pc, #40]	; (800b120 <GUIDRV_FlexColor_SetFunc66709+0x70>)
 800b0f8:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 800b0fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800b100:	bd10      	pop	{r4, pc}
 800b102:	bf00      	nop
 800b104:	0800ad81 	.word	0x0800ad81
 800b108:	0800ae23 	.word	0x0800ae23
 800b10c:	0800aec9 	.word	0x0800aec9
 800b110:	0800af05 	.word	0x0800af05
 800b114:	20000068 	.word	0x20000068
 800b118:	20000064 	.word	0x20000064
 800b11c:	0800afed 	.word	0x0800afed
 800b120:	0800afb9 	.word	0x0800afb9

0800b124 <_WriteU16_A1>:
 800b124:	b508      	push	{r3, lr}
 800b126:	0a0b      	lsrs	r3, r1, #8
 800b128:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 800b12c:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
 800b130:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 800b134:	2102      	movs	r1, #2
 800b136:	3071      	adds	r0, #113	; 0x71
 800b138:	4798      	blx	r3
 800b13a:	bd08      	pop	{r3, pc}

0800b13c <_WriteDataMP>:
 800b13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13e:	6e86      	ldr	r6, [r0, #104]	; 0x68
 800b140:	4604      	mov	r4, r0
 800b142:	460f      	mov	r7, r1
 800b144:	4615      	mov	r5, r2
 800b146:	2300      	movs	r3, #0
 800b148:	b1a5      	cbz	r5, 800b174 <_WriteDataMP+0x38>
 800b14a:	f837 2b02 	ldrh.w	r2, [r7], #2
 800b14e:	4630      	mov	r0, r6
 800b150:	3301      	adds	r3, #1
 800b152:	0a11      	lsrs	r1, r2, #8
 800b154:	2bfa      	cmp	r3, #250	; 0xfa
 800b156:	f800 1b02 	strb.w	r1, [r0], #2
 800b15a:	7072      	strb	r2, [r6, #1]
 800b15c:	d107      	bne.n	800b16e <_WriteDataMP+0x32>
 800b15e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800b162:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800b164:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b168:	4798      	blx	r3
 800b16a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800b16c:	2300      	movs	r3, #0
 800b16e:	3d01      	subs	r5, #1
 800b170:	4606      	mov	r6, r0
 800b172:	e7e9      	b.n	800b148 <_WriteDataMP+0xc>
 800b174:	b123      	cbz	r3, 800b180 <_WriteDataMP+0x44>
 800b176:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800b17a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800b17c:	0059      	lsls	r1, r3, #1
 800b17e:	4790      	blx	r2
 800b180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b182 <_ReadData>:
 800b182:	b508      	push	{r3, lr}
 800b184:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 800b188:	4798      	blx	r3
 800b18a:	bd08      	pop	{r3, pc}

0800b18c <_WriteData>:
 800b18c:	b289      	uxth	r1, r1
 800b18e:	f7ff bfc9 	b.w	800b124 <_WriteU16_A1>
	...

0800b194 <_FillRect>:
 800b194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b198:	4f40      	ldr	r7, [pc, #256]	; (800b29c <_FillRect+0x108>)
 800b19a:	6884      	ldr	r4, [r0, #8]
 800b19c:	4682      	mov	sl, r0
 800b19e:	6838      	ldr	r0, [r7, #0]
 800b1a0:	7c00      	ldrb	r0, [r0, #16]
 800b1a2:	f010 0f01 	tst.w	r0, #1
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	460e      	mov	r6, r1
 800b1aa:	4615      	mov	r5, r2
 800b1ac:	4698      	mov	r8, r3
 800b1ae:	ebc1 0903 	rsb	r9, r1, r3
 800b1b2:	d045      	beq.n	800b240 <_FillRect+0xac>
 800b1b4:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 800b1b8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b1ba:	4285      	cmp	r5, r0
 800b1bc:	dc6b      	bgt.n	800b296 <_FillRect+0x102>
 800b1be:	f8d4 c0cc 	ldr.w	ip, [r4, #204]	; 0xcc
 800b1c2:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b1c4:	f1bc 0f00 	cmp.w	ip, #0
 800b1c8:	d101      	bne.n	800b1ce <_FillRect+0x3a>
 800b1ca:	46b4      	mov	ip, r6
 800b1cc:	e007      	b.n	800b1de <_FillRect+0x4a>
 800b1ce:	e88d 00a0 	stmia.w	sp, {r5, r7}
 800b1d2:	4650      	mov	r0, sl
 800b1d4:	4631      	mov	r1, r6
 800b1d6:	462a      	mov	r2, r5
 800b1d8:	4643      	mov	r3, r8
 800b1da:	47e0      	blx	ip
 800b1dc:	e011      	b.n	800b202 <_FillRect+0x6e>
 800b1de:	45c4      	cmp	ip, r8
 800b1e0:	dc0e      	bgt.n	800b200 <_FillRect+0x6c>
 800b1e2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800b1e6:	f8cd c00c 	str.w	ip, [sp, #12]
 800b1ea:	4661      	mov	r1, ip
 800b1ec:	4650      	mov	r0, sl
 800b1ee:	462a      	mov	r2, r5
 800b1f0:	4798      	blx	r3
 800b1f2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800b1f6:	f827 0b02 	strh.w	r0, [r7], #2
 800b1fa:	f10c 0c01 	add.w	ip, ip, #1
 800b1fe:	e7ee      	b.n	800b1de <_FillRect+0x4a>
 800b200:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b202:	1ebb      	subs	r3, r7, #2
 800b204:	f109 0c01 	add.w	ip, r9, #1
 800b208:	445f      	add	r7, fp
 800b20a:	42bb      	cmp	r3, r7
 800b20c:	d005      	beq.n	800b21a <_FillRect+0x86>
 800b20e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b210:	8859      	ldrh	r1, [r3, #2]
 800b212:	404a      	eors	r2, r1
 800b214:	f823 2f02 	strh.w	r2, [r3, #2]!
 800b218:	e7f7      	b.n	800b20a <_FillRect+0x76>
 800b21a:	9500      	str	r5, [sp, #0]
 800b21c:	462a      	mov	r2, r5
 800b21e:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b222:	f8cd c00c 	str.w	ip, [sp, #12]
 800b226:	4620      	mov	r0, r4
 800b228:	4631      	mov	r1, r6
 800b22a:	4643      	mov	r3, r8
 800b22c:	47b8      	blx	r7
 800b22e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800b232:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b234:	4620      	mov	r0, r4
 800b236:	4662      	mov	r2, ip
 800b238:	f7ff ff80 	bl	800b13c <_WriteDataMP>
 800b23c:	3501      	adds	r5, #1
 800b23e:	e7bb      	b.n	800b1b8 <_FillRect+0x24>
 800b240:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b242:	9000      	str	r0, [sp, #0]
 800b244:	1a85      	subs	r5, r0, r2
 800b246:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800b24a:	4620      	mov	r0, r4
 800b24c:	47b0      	blx	r6
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 800b252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f109 0901 	add.w	r9, r9, #1
 800b25a:	fb05 9509 	mla	r5, r5, r9, r9
 800b25e:	f3c3 2807 	ubfx	r8, r3, #8, #8
 800b262:	fa5f f983 	uxtb.w	r9, r3
 800b266:	2301      	movs	r3, #1
 800b268:	b1ad      	cbz	r5, 800b296 <_FillRect+0x102>
 800b26a:	2df9      	cmp	r5, #249	; 0xf9
 800b26c:	bf34      	ite	cc
 800b26e:	462f      	movcc	r7, r5
 800b270:	27f9      	movcs	r7, #249	; 0xf9
 800b272:	0079      	lsls	r1, r7, #1
 800b274:	b143      	cbz	r3, 800b288 <_FillRect+0xf4>
 800b276:	4633      	mov	r3, r6
 800b278:	1872      	adds	r2, r6, r1
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d004      	beq.n	800b288 <_FillRect+0xf4>
 800b27e:	f883 8001 	strb.w	r8, [r3, #1]
 800b282:	f803 9f02 	strb.w	r9, [r3, #2]!
 800b286:	e7f8      	b.n	800b27a <_FillRect+0xe6>
 800b288:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800b28c:	1c70      	adds	r0, r6, #1
 800b28e:	4790      	blx	r2
 800b290:	1bed      	subs	r5, r5, r7
 800b292:	2300      	movs	r3, #0
 800b294:	e7e8      	b.n	800b268 <_FillRect+0xd4>
 800b296:	b005      	add	sp, #20
 800b298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b29c:	20000084 	.word	0x20000084

0800b2a0 <_DrawBitmap>:
 800b2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a4:	b08d      	sub	sp, #52	; 0x34
 800b2a6:	6885      	ldr	r5, [r0, #8]
 800b2a8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800b2aa:	9305      	str	r3, [sp, #20]
 800b2ac:	1e7b      	subs	r3, r7, #1
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	9009      	str	r0, [sp, #36]	; 0x24
 800b2b2:	9108      	str	r1, [sp, #32]
 800b2b4:	920a      	str	r2, [sp, #40]	; 0x28
 800b2b6:	950b      	str	r5, [sp, #44]	; 0x2c
 800b2b8:	d903      	bls.n	800b2c2 <_DrawBitmap+0x22>
 800b2ba:	2f04      	cmp	r7, #4
 800b2bc:	d001      	beq.n	800b2c2 <_DrawBitmap+0x22>
 800b2be:	2f08      	cmp	r7, #8
 800b2c0:	d106      	bne.n	800b2d0 <_DrawBitmap+0x30>
 800b2c2:	4b91      	ldr	r3, [pc, #580]	; (800b508 <_DrawBitmap+0x268>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	7c1b      	ldrb	r3, [r3, #16]
 800b2c8:	f003 0303 	and.w	r3, r3, #3
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	d010      	beq.n	800b2f2 <_DrawBitmap+0x52>
 800b2d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2d2:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800b2d4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b2d6:	9908      	ldr	r1, [sp, #32]
 800b2d8:	9b05      	ldr	r3, [sp, #20]
 800b2da:	443a      	add	r2, r7
 800b2dc:	4429      	add	r1, r5
 800b2de:	3a01      	subs	r2, #1
 800b2e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b2e2:	9200      	str	r2, [sp, #0]
 800b2e4:	440b      	add	r3, r1
 800b2e6:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 800b2ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	47a0      	blx	r4
 800b2f2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b2f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b2f8:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800b2fa:	ebc5 030b 	rsb	r3, r5, fp
 800b2fe:	42bb      	cmp	r3, r7
 800b300:	f280 8253 	bge.w	800b7aa <_DrawBitmap+0x50a>
 800b304:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800b306:	1e7b      	subs	r3, r7, #1
 800b308:	2b0f      	cmp	r3, #15
 800b30a:	f200 8247 	bhi.w	800b79c <_DrawBitmap+0x4fc>
 800b30e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b312:	0010      	.short	0x0010
 800b314:	024500bb 	.word	0x024500bb
 800b318:	02450144 	.word	0x02450144
 800b31c:	02450245 	.word	0x02450245
 800b320:	024501db 	.word	0x024501db
 800b324:	02450245 	.word	0x02450245
 800b328:	02450245 	.word	0x02450245
 800b32c:	02450245 	.word	0x02450245
 800b330:	0240      	.short	0x0240
 800b332:	4b75      	ldr	r3, [pc, #468]	; (800b508 <_DrawBitmap+0x268>)
 800b334:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b336:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68ac      	ldr	r4, [r5, #8]
 800b33c:	7c1b      	ldrb	r3, [r3, #16]
 800b33e:	687d      	ldr	r5, [r7, #4]
 800b340:	683e      	ldr	r6, [r7, #0]
 800b342:	9507      	str	r5, [sp, #28]
 800b344:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b346:	9d08      	ldr	r5, [sp, #32]
 800b348:	f003 0303 	and.w	r3, r3, #3
 800b34c:	443d      	add	r5, r7
 800b34e:	2b02      	cmp	r3, #2
 800b350:	9503      	str	r5, [sp, #12]
 800b352:	d01c      	beq.n	800b38e <_DrawBitmap+0xee>
 800b354:	2b03      	cmp	r3, #3
 800b356:	d071      	beq.n	800b43c <_DrawBitmap+0x19c>
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d06f      	beq.n	800b43c <_DrawBitmap+0x19c>
 800b35c:	9f05      	ldr	r7, [sp, #20]
 800b35e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b360:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 800b364:	f898 2000 	ldrb.w	r2, [r8]
 800b368:	2380      	movs	r3, #128	; 0x80
 800b36a:	412b      	asrs	r3, r5
 800b36c:	421a      	tst	r2, r3
 800b36e:	bf16      	itet	ne
 800b370:	9807      	ldrne	r0, [sp, #28]
 800b372:	b2b1      	uxtheq	r1, r6
 800b374:	b281      	uxthne	r1, r0
 800b376:	3501      	adds	r5, #1
 800b378:	4620      	mov	r0, r4
 800b37a:	f7ff fed3 	bl	800b124 <_WriteU16_A1>
 800b37e:	2d08      	cmp	r5, #8
 800b380:	bf04      	itt	eq
 800b382:	f108 0801 	addeq.w	r8, r8, #1
 800b386:	2500      	moveq	r5, #0
 800b388:	3f01      	subs	r7, #1
 800b38a:	d1eb      	bne.n	800b364 <_DrawBitmap+0xc4>
 800b38c:	e206      	b.n	800b79c <_DrawBitmap+0x4fc>
 800b38e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b390:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800b394:	9506      	str	r5, [sp, #24]
 800b396:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800b39a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b39e:	2500      	movs	r5, #0
 800b3a0:	4656      	mov	r6, sl
 800b3a2:	462b      	mov	r3, r5
 800b3a4:	9f06      	ldr	r7, [sp, #24]
 800b3a6:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800b3aa:	783a      	ldrb	r2, [r7, #0]
 800b3ac:	fa4c fc08 	asr.w	ip, ip, r8
 800b3b0:	ea12 0c0c 	ands.w	ip, r2, ip
 800b3b4:	d00b      	beq.n	800b3ce <_DrawBitmap+0x12e>
 800b3b6:	b913      	cbnz	r3, 800b3be <_DrawBitmap+0x11e>
 800b3b8:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800b3bc:	46b2      	mov	sl, r6
 800b3be:	9f07      	ldr	r7, [sp, #28]
 800b3c0:	f8a9 7000 	strh.w	r7, [r9]
 800b3c4:	3501      	adds	r5, #1
 800b3c6:	f109 0902 	add.w	r9, r9, #2
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e017      	b.n	800b3fe <_DrawBitmap+0x15e>
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d114      	bne.n	800b3fc <_DrawBitmap+0x15c>
 800b3d2:	f8cd b000 	str.w	fp, [sp]
 800b3d6:	1e73      	subs	r3, r6, #1
 800b3d8:	f8cd c010 	str.w	ip, [sp, #16]
 800b3dc:	4620      	mov	r0, r4
 800b3de:	4651      	mov	r1, sl
 800b3e0:	465a      	mov	r2, fp
 800b3e2:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b3e6:	47b8      	blx	r7
 800b3e8:	462a      	mov	r2, r5
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b3ee:	f7ff fea5 	bl	800b13c <_WriteDataMP>
 800b3f2:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b3f6:	4665      	mov	r5, ip
 800b3f8:	4663      	mov	r3, ip
 800b3fa:	e000      	b.n	800b3fe <_DrawBitmap+0x15e>
 800b3fc:	4663      	mov	r3, ip
 800b3fe:	f108 0801 	add.w	r8, r8, #1
 800b402:	f1b8 0f08 	cmp.w	r8, #8
 800b406:	f106 0601 	add.w	r6, r6, #1
 800b40a:	d104      	bne.n	800b416 <_DrawBitmap+0x176>
 800b40c:	9f06      	ldr	r7, [sp, #24]
 800b40e:	3701      	adds	r7, #1
 800b410:	9706      	str	r7, [sp, #24]
 800b412:	f04f 0800 	mov.w	r8, #0
 800b416:	9a05      	ldr	r2, [sp, #20]
 800b418:	9f03      	ldr	r7, [sp, #12]
 800b41a:	443a      	add	r2, r7
 800b41c:	42b2      	cmp	r2, r6
 800b41e:	d1c1      	bne.n	800b3a4 <_DrawBitmap+0x104>
 800b420:	9f05      	ldr	r7, [sp, #20]
 800b422:	1e7b      	subs	r3, r7, #1
 800b424:	9f03      	ldr	r7, [sp, #12]
 800b426:	443b      	add	r3, r7
 800b428:	2d00      	cmp	r5, #0
 800b42a:	f000 81b7 	beq.w	800b79c <_DrawBitmap+0x4fc>
 800b42e:	f8cd b000 	str.w	fp, [sp]
 800b432:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800b436:	4620      	mov	r0, r4
 800b438:	4651      	mov	r1, sl
 800b43a:	e13f      	b.n	800b6bc <_DrawBitmap+0x41c>
 800b43c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b440:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800b442:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b444:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b448:	9f03      	ldr	r7, [sp, #12]
 800b44a:	782a      	ldrb	r2, [r5, #0]
 800b44c:	2380      	movs	r3, #128	; 0x80
 800b44e:	4133      	asrs	r3, r6
 800b450:	44b9      	add	r9, r7
 800b452:	421a      	tst	r2, r3
 800b454:	ebc8 0909 	rsb	r9, r8, r9
 800b458:	d00d      	beq.n	800b476 <_DrawBitmap+0x1d6>
 800b45a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800b45e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b460:	4649      	mov	r1, r9
 800b462:	465a      	mov	r2, fp
 800b464:	4798      	blx	r3
 800b466:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b468:	f8d4 70f8 	ldr.w	r7, [r4, #248]	; 0xf8
 800b46c:	4043      	eors	r3, r0
 800b46e:	4649      	mov	r1, r9
 800b470:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b472:	465a      	mov	r2, fp
 800b474:	47b8      	blx	r7
 800b476:	3601      	adds	r6, #1
 800b478:	2e08      	cmp	r6, #8
 800b47a:	bf04      	itt	eq
 800b47c:	3501      	addeq	r5, #1
 800b47e:	2600      	moveq	r6, #0
 800b480:	f1b8 0801 	subs.w	r8, r8, #1
 800b484:	d1de      	bne.n	800b444 <_DrawBitmap+0x1a4>
 800b486:	e189      	b.n	800b79c <_DrawBitmap+0x4fc>
 800b488:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b48a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b48c:	68ac      	ldr	r4, [r5, #8]
 800b48e:	2f00      	cmp	r7, #0
 800b490:	f000 8184 	beq.w	800b79c <_DrawBitmap+0x4fc>
 800b494:	4b1c      	ldr	r3, [pc, #112]	; (800b508 <_DrawBitmap+0x268>)
 800b496:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f895 a000 	ldrb.w	sl, [r5]
 800b49e:	7c1b      	ldrb	r3, [r3, #16]
 800b4a0:	f013 0303 	ands.w	r3, r3, #3
 800b4a4:	d011      	beq.n	800b4ca <_DrawBitmap+0x22a>
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	f040 8178 	bne.w	800b79c <_DrawBitmap+0x4fc>
 800b4ac:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b4ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b4b2:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b4b4:	9703      	str	r7, [sp, #12]
 800b4b6:	44a9      	add	r9, r5
 800b4b8:	46a8      	mov	r8, r5
 800b4ba:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b4bc:	9507      	str	r5, [sp, #28]
 800b4be:	2500      	movs	r5, #0
 800b4c0:	f8cd 9018 	str.w	r9, [sp, #24]
 800b4c4:	464e      	mov	r6, r9
 800b4c6:	462b      	mov	r3, r5
 800b4c8:	e040      	b.n	800b54c <_DrawBitmap+0x2ac>
 800b4ca:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b4cc:	9e05      	ldr	r6, [sp, #20]
 800b4ce:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800b4d0:	f1c5 0303 	rsb	r3, r5, #3
 800b4d4:	005b      	lsls	r3, r3, #1
 800b4d6:	f1c3 0206 	rsb	r2, r3, #6
 800b4da:	21c0      	movs	r1, #192	; 0xc0
 800b4dc:	fa41 f202 	asr.w	r2, r1, r2
 800b4e0:	ea02 020a 	and.w	r2, r2, sl
 800b4e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b4e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800b4f0:	3501      	adds	r5, #1
 800b4f2:	f7ff fe17 	bl	800b124 <_WriteU16_A1>
 800b4f6:	2d04      	cmp	r5, #4
 800b4f8:	d103      	bne.n	800b502 <_DrawBitmap+0x262>
 800b4fa:	f897 a001 	ldrb.w	sl, [r7, #1]
 800b4fe:	2500      	movs	r5, #0
 800b500:	3701      	adds	r7, #1
 800b502:	3e01      	subs	r6, #1
 800b504:	d1e4      	bne.n	800b4d0 <_DrawBitmap+0x230>
 800b506:	e149      	b.n	800b79c <_DrawBitmap+0x4fc>
 800b508:	20000084 	.word	0x20000084
 800b50c:	b913      	cbnz	r3, 800b514 <_DrawBitmap+0x274>
 800b50e:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b510:	9703      	str	r7, [sp, #12]
 800b512:	9606      	str	r6, [sp, #24]
 800b514:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b516:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800b51a:	9f03      	ldr	r7, [sp, #12]
 800b51c:	803b      	strh	r3, [r7, #0]
 800b51e:	3702      	adds	r7, #2
 800b520:	3501      	adds	r5, #1
 800b522:	9703      	str	r7, [sp, #12]
 800b524:	2301      	movs	r3, #1
 800b526:	f108 0801 	add.w	r8, r8, #1
 800b52a:	f1b8 0f04 	cmp.w	r8, #4
 800b52e:	f106 0601 	add.w	r6, r6, #1
 800b532:	d106      	bne.n	800b542 <_DrawBitmap+0x2a2>
 800b534:	9f07      	ldr	r7, [sp, #28]
 800b536:	f897 a001 	ldrb.w	sl, [r7, #1]
 800b53a:	3701      	adds	r7, #1
 800b53c:	9707      	str	r7, [sp, #28]
 800b53e:	f04f 0800 	mov.w	r8, #0
 800b542:	9a05      	ldr	r2, [sp, #20]
 800b544:	444a      	add	r2, r9
 800b546:	42b2      	cmp	r2, r6
 800b548:	f000 80ad 	beq.w	800b6a6 <_DrawBitmap+0x406>
 800b54c:	f1c8 0203 	rsb	r2, r8, #3
 800b550:	0052      	lsls	r2, r2, #1
 800b552:	f1c2 0106 	rsb	r1, r2, #6
 800b556:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 800b55a:	fa4c fc01 	asr.w	ip, ip, r1
 800b55e:	ea0c 0c0a 	and.w	ip, ip, sl
 800b562:	fa3c fc02 	lsrs.w	ip, ip, r2
 800b566:	d1d1      	bne.n	800b50c <_DrawBitmap+0x26c>
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d114      	bne.n	800b596 <_DrawBitmap+0x2f6>
 800b56c:	f8cd b000 	str.w	fp, [sp]
 800b570:	1e73      	subs	r3, r6, #1
 800b572:	f8cd c010 	str.w	ip, [sp, #16]
 800b576:	4620      	mov	r0, r4
 800b578:	9906      	ldr	r1, [sp, #24]
 800b57a:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b57e:	465a      	mov	r2, fp
 800b580:	47b8      	blx	r7
 800b582:	462a      	mov	r2, r5
 800b584:	4620      	mov	r0, r4
 800b586:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b588:	f7ff fdd8 	bl	800b13c <_WriteDataMP>
 800b58c:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b590:	4665      	mov	r5, ip
 800b592:	4663      	mov	r3, ip
 800b594:	e7c7      	b.n	800b526 <_DrawBitmap+0x286>
 800b596:	4663      	mov	r3, ip
 800b598:	e7c5      	b.n	800b526 <_DrawBitmap+0x286>
 800b59a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b59c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b59e:	68ac      	ldr	r4, [r5, #8]
 800b5a0:	2f00      	cmp	r7, #0
 800b5a2:	f000 80fb 	beq.w	800b79c <_DrawBitmap+0x4fc>
 800b5a6:	4b82      	ldr	r3, [pc, #520]	; (800b7b0 <_DrawBitmap+0x510>)
 800b5a8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f895 a000 	ldrb.w	sl, [r5]
 800b5b0:	7c1b      	ldrb	r3, [r3, #16]
 800b5b2:	f013 0303 	ands.w	r3, r3, #3
 800b5b6:	d011      	beq.n	800b5dc <_DrawBitmap+0x33c>
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	f040 80ef 	bne.w	800b79c <_DrawBitmap+0x4fc>
 800b5be:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b5c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b5c4:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b5c6:	9703      	str	r7, [sp, #12]
 800b5c8:	44a9      	add	r9, r5
 800b5ca:	46a8      	mov	r8, r5
 800b5cc:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b5ce:	9507      	str	r5, [sp, #28]
 800b5d0:	2500      	movs	r5, #0
 800b5d2:	f8cd 9018 	str.w	r9, [sp, #24]
 800b5d6:	464e      	mov	r6, r9
 800b5d8:	462b      	mov	r3, r5
 800b5da:	e03d      	b.n	800b658 <_DrawBitmap+0x3b8>
 800b5dc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b5de:	9e05      	ldr	r6, [sp, #20]
 800b5e0:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800b5e2:	f1c5 0301 	rsb	r3, r5, #1
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	f1c3 0204 	rsb	r2, r3, #4
 800b5ec:	21f0      	movs	r1, #240	; 0xf0
 800b5ee:	fa41 f202 	asr.w	r2, r1, r2
 800b5f2:	ea02 020a 	and.w	r2, r2, sl
 800b5f6:	fa22 f303 	lsr.w	r3, r2, r3
 800b5fa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800b602:	3501      	adds	r5, #1
 800b604:	f7ff fd8e 	bl	800b124 <_WriteU16_A1>
 800b608:	2d02      	cmp	r5, #2
 800b60a:	d103      	bne.n	800b614 <_DrawBitmap+0x374>
 800b60c:	f897 a001 	ldrb.w	sl, [r7, #1]
 800b610:	2500      	movs	r5, #0
 800b612:	3701      	adds	r7, #1
 800b614:	3e01      	subs	r6, #1
 800b616:	d1e4      	bne.n	800b5e2 <_DrawBitmap+0x342>
 800b618:	e0c0      	b.n	800b79c <_DrawBitmap+0x4fc>
 800b61a:	b913      	cbnz	r3, 800b622 <_DrawBitmap+0x382>
 800b61c:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b61e:	9703      	str	r7, [sp, #12]
 800b620:	9606      	str	r6, [sp, #24]
 800b622:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b624:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800b628:	9f03      	ldr	r7, [sp, #12]
 800b62a:	803b      	strh	r3, [r7, #0]
 800b62c:	3702      	adds	r7, #2
 800b62e:	3501      	adds	r5, #1
 800b630:	9703      	str	r7, [sp, #12]
 800b632:	2301      	movs	r3, #1
 800b634:	f108 0801 	add.w	r8, r8, #1
 800b638:	f1b8 0f02 	cmp.w	r8, #2
 800b63c:	f106 0601 	add.w	r6, r6, #1
 800b640:	d106      	bne.n	800b650 <_DrawBitmap+0x3b0>
 800b642:	9f07      	ldr	r7, [sp, #28]
 800b644:	f897 a001 	ldrb.w	sl, [r7, #1]
 800b648:	3701      	adds	r7, #1
 800b64a:	9707      	str	r7, [sp, #28]
 800b64c:	f04f 0800 	mov.w	r8, #0
 800b650:	9a05      	ldr	r2, [sp, #20]
 800b652:	444a      	add	r2, r9
 800b654:	42b2      	cmp	r2, r6
 800b656:	d026      	beq.n	800b6a6 <_DrawBitmap+0x406>
 800b658:	f1c8 0201 	rsb	r2, r8, #1
 800b65c:	0092      	lsls	r2, r2, #2
 800b65e:	f1c2 0104 	rsb	r1, r2, #4
 800b662:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800b666:	fa4c fc01 	asr.w	ip, ip, r1
 800b66a:	ea0c 0c0a 	and.w	ip, ip, sl
 800b66e:	fa3c fc02 	lsrs.w	ip, ip, r2
 800b672:	d1d2      	bne.n	800b61a <_DrawBitmap+0x37a>
 800b674:	2b01      	cmp	r3, #1
 800b676:	d114      	bne.n	800b6a2 <_DrawBitmap+0x402>
 800b678:	f8cd b000 	str.w	fp, [sp]
 800b67c:	1e73      	subs	r3, r6, #1
 800b67e:	f8cd c010 	str.w	ip, [sp, #16]
 800b682:	4620      	mov	r0, r4
 800b684:	9906      	ldr	r1, [sp, #24]
 800b686:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b68a:	465a      	mov	r2, fp
 800b68c:	47b8      	blx	r7
 800b68e:	462a      	mov	r2, r5
 800b690:	4620      	mov	r0, r4
 800b692:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b694:	f7ff fd52 	bl	800b13c <_WriteDataMP>
 800b698:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b69c:	4665      	mov	r5, ip
 800b69e:	4663      	mov	r3, ip
 800b6a0:	e7c8      	b.n	800b634 <_DrawBitmap+0x394>
 800b6a2:	4663      	mov	r3, ip
 800b6a4:	e7c6      	b.n	800b634 <_DrawBitmap+0x394>
 800b6a6:	9f05      	ldr	r7, [sp, #20]
 800b6a8:	1e7b      	subs	r3, r7, #1
 800b6aa:	444b      	add	r3, r9
 800b6ac:	2d00      	cmp	r5, #0
 800b6ae:	d075      	beq.n	800b79c <_DrawBitmap+0x4fc>
 800b6b0:	f8cd b000 	str.w	fp, [sp]
 800b6b4:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800b6b8:	9906      	ldr	r1, [sp, #24]
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	465a      	mov	r2, fp
 800b6be:	47b0      	blx	r6
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b6c4:	462a      	mov	r2, r5
 800b6c6:	e067      	b.n	800b798 <_DrawBitmap+0x4f8>
 800b6c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b6ca:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b6cc:	68ac      	ldr	r4, [r5, #8]
 800b6ce:	2f00      	cmp	r7, #0
 800b6d0:	d064      	beq.n	800b79c <_DrawBitmap+0x4fc>
 800b6d2:	4b37      	ldr	r3, [pc, #220]	; (800b7b0 <_DrawBitmap+0x510>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	7c1b      	ldrb	r3, [r3, #16]
 800b6d8:	f013 0303 	ands.w	r3, r3, #3
 800b6dc:	d009      	beq.n	800b6f2 <_DrawBitmap+0x452>
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d15c      	bne.n	800b79c <_DrawBitmap+0x4fc>
 800b6e2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b6e6:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800b6ea:	2600      	movs	r6, #0
 800b6ec:	464f      	mov	r7, r9
 800b6ee:	4633      	mov	r3, r6
 800b6f0:	e022      	b.n	800b738 <_DrawBitmap+0x498>
 800b6f2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b6f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b6f6:	9f05      	ldr	r7, [sp, #20]
 800b6f8:	443b      	add	r3, r7
 800b6fa:	1b5b      	subs	r3, r3, r5
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	dd4d      	ble.n	800b79c <_DrawBitmap+0x4fc>
 800b700:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b704:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b706:	4620      	mov	r0, r4
 800b708:	f837 1023 	ldrh.w	r1, [r7, r3, lsl #2]
 800b70c:	f7ff fd0a 	bl	800b124 <_WriteU16_A1>
 800b710:	e7f0      	b.n	800b6f4 <_DrawBitmap+0x454>
 800b712:	b913      	cbnz	r3, 800b71a <_DrawBitmap+0x47a>
 800b714:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800b718:	46b9      	mov	r9, r7
 800b71a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b71c:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 800b720:	f8a8 3000 	strh.w	r3, [r8]
 800b724:	3601      	adds	r6, #1
 800b726:	f108 0802 	add.w	r8, r8, #2
 800b72a:	2301      	movs	r3, #1
 800b72c:	9a08      	ldr	r2, [sp, #32]
 800b72e:	9d05      	ldr	r5, [sp, #20]
 800b730:	3701      	adds	r7, #1
 800b732:	442a      	add	r2, r5
 800b734:	42ba      	cmp	r2, r7
 800b736:	d01c      	beq.n	800b772 <_DrawBitmap+0x4d2>
 800b738:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b73a:	9808      	ldr	r0, [sp, #32]
 800b73c:	1a2a      	subs	r2, r5, r0
 800b73e:	f812 a007 	ldrb.w	sl, [r2, r7]
 800b742:	f1ba 0f00 	cmp.w	sl, #0
 800b746:	d1e4      	bne.n	800b712 <_DrawBitmap+0x472>
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d110      	bne.n	800b76e <_DrawBitmap+0x4ce>
 800b74c:	f8cd b000 	str.w	fp, [sp]
 800b750:	1e7b      	subs	r3, r7, #1
 800b752:	4620      	mov	r0, r4
 800b754:	4649      	mov	r1, r9
 800b756:	465a      	mov	r2, fp
 800b758:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800b75c:	47a8      	blx	r5
 800b75e:	4632      	mov	r2, r6
 800b760:	4620      	mov	r0, r4
 800b762:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b764:	f7ff fcea 	bl	800b13c <_WriteDataMP>
 800b768:	4656      	mov	r6, sl
 800b76a:	4653      	mov	r3, sl
 800b76c:	e7de      	b.n	800b72c <_DrawBitmap+0x48c>
 800b76e:	4653      	mov	r3, sl
 800b770:	e7dc      	b.n	800b72c <_DrawBitmap+0x48c>
 800b772:	9f08      	ldr	r7, [sp, #32]
 800b774:	1e6b      	subs	r3, r5, #1
 800b776:	443b      	add	r3, r7
 800b778:	b186      	cbz	r6, 800b79c <_DrawBitmap+0x4fc>
 800b77a:	f8cd b000 	str.w	fp, [sp]
 800b77e:	4620      	mov	r0, r4
 800b780:	4649      	mov	r1, r9
 800b782:	465a      	mov	r2, fp
 800b784:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800b788:	47a8      	blx	r5
 800b78a:	4620      	mov	r0, r4
 800b78c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b78e:	4632      	mov	r2, r6
 800b790:	e002      	b.n	800b798 <_DrawBitmap+0x4f8>
 800b792:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b794:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b796:	9a05      	ldr	r2, [sp, #20]
 800b798:	f7ff fcd0 	bl	800b13c <_WriteDataMP>
 800b79c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b79e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800b7a0:	443d      	add	r5, r7
 800b7a2:	9519      	str	r5, [sp, #100]	; 0x64
 800b7a4:	f10b 0b01 	add.w	fp, fp, #1
 800b7a8:	e5a5      	b.n	800b2f6 <_DrawBitmap+0x56>
 800b7aa:	b00d      	add	sp, #52	; 0x34
 800b7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b0:	20000084 	.word	0x20000084

0800b7b4 <GUIDRV_FlexColor_SetMode16bppC0B8>:
 800b7b4:	b510      	push	{r4, lr}
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	f000 fa60 	bl	800bc7c <GUIDRV_FlexColor__InitOnce>
 800b7bc:	68a4      	ldr	r4, [r4, #8]
 800b7be:	4b10      	ldr	r3, [pc, #64]	; (800b800 <GUIDRV_FlexColor_SetMode16bppC0B8+0x4c>)
 800b7c0:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 800b7c4:	4b0f      	ldr	r3, [pc, #60]	; (800b804 <GUIDRV_FlexColor_SetMode16bppC0B8+0x50>)
 800b7c6:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800b7ca:	4b0f      	ldr	r3, [pc, #60]	; (800b808 <GUIDRV_FlexColor_SetMode16bppC0B8+0x54>)
 800b7cc:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800b7d0:	4b0e      	ldr	r3, [pc, #56]	; (800b80c <GUIDRV_FlexColor_SetMode16bppC0B8+0x58>)
 800b7d2:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
 800b7d6:	4b0e      	ldr	r3, [pc, #56]	; (800b810 <GUIDRV_FlexColor_SetMode16bppC0B8+0x5c>)
 800b7d8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800b7dc:	4b0d      	ldr	r3, [pc, #52]	; (800b814 <GUIDRV_FlexColor_SetMode16bppC0B8+0x60>)
 800b7de:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 800b7e2:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800b7e6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b7f0:	2108      	movs	r1, #8
 800b7f2:	4798      	blx	r3
 800b7f4:	2310      	movs	r3, #16
 800b7f6:	63a3      	str	r3, [r4, #56]	; 0x38
 800b7f8:	4b07      	ldr	r3, [pc, #28]	; (800b818 <GUIDRV_FlexColor_SetMode16bppC0B8+0x64>)
 800b7fa:	6463      	str	r3, [r4, #68]	; 0x44
 800b7fc:	bd10      	pop	{r4, pc}
 800b7fe:	bf00      	nop
 800b800:	0800b2a1 	.word	0x0800b2a1
 800b804:	0800b195 	.word	0x0800b195
 800b808:	0800bbcb 	.word	0x0800bbcb
 800b80c:	0800bb3b 	.word	0x0800bb3b
 800b810:	0800b183 	.word	0x0800b183
 800b814:	0800b18d 	.word	0x0800b18d
 800b818:	08014334 	.word	0x08014334

0800b81c <_Log2PhysX_X0Y0S0>:
 800b81c:	4608      	mov	r0, r1
 800b81e:	4770      	bx	lr

0800b820 <_Log2PhysX_X1Y0S0>:
 800b820:	6800      	ldr	r0, [r0, #0]
 800b822:	1a40      	subs	r0, r0, r1
 800b824:	3801      	subs	r0, #1
 800b826:	4770      	bx	lr

0800b828 <_Log2PhysX_X0Y1S0>:
 800b828:	4608      	mov	r0, r1
 800b82a:	4770      	bx	lr

0800b82c <_Log2PhysX_X1Y1S0>:
 800b82c:	6800      	ldr	r0, [r0, #0]
 800b82e:	1a40      	subs	r0, r0, r1
 800b830:	3801      	subs	r0, #1
 800b832:	4770      	bx	lr

0800b834 <_Log2PhysX_X0Y0S1>:
 800b834:	4610      	mov	r0, r2
 800b836:	4770      	bx	lr

0800b838 <_Log2PhysX_X1Y0S1>:
 800b838:	6840      	ldr	r0, [r0, #4]
 800b83a:	1a80      	subs	r0, r0, r2
 800b83c:	3801      	subs	r0, #1
 800b83e:	4770      	bx	lr

0800b840 <_Log2PhysX_X0Y1S1>:
 800b840:	4610      	mov	r0, r2
 800b842:	4770      	bx	lr

0800b844 <_Log2PhysX_X1Y1S1>:
 800b844:	6840      	ldr	r0, [r0, #4]
 800b846:	1a80      	subs	r0, r0, r2
 800b848:	3801      	subs	r0, #1
 800b84a:	4770      	bx	lr

0800b84c <_Log2PhysY_X0Y0S0>:
 800b84c:	4610      	mov	r0, r2
 800b84e:	4770      	bx	lr

0800b850 <_Log2PhysY_X1Y0S0>:
 800b850:	4610      	mov	r0, r2
 800b852:	4770      	bx	lr

0800b854 <_Log2PhysY_X0Y1S0>:
 800b854:	6840      	ldr	r0, [r0, #4]
 800b856:	1a80      	subs	r0, r0, r2
 800b858:	3801      	subs	r0, #1
 800b85a:	4770      	bx	lr

0800b85c <_Log2PhysY_X1Y1S0>:
 800b85c:	6840      	ldr	r0, [r0, #4]
 800b85e:	1a80      	subs	r0, r0, r2
 800b860:	3801      	subs	r0, #1
 800b862:	4770      	bx	lr

0800b864 <_Log2PhysY_X0Y0S1>:
 800b864:	4608      	mov	r0, r1
 800b866:	4770      	bx	lr

0800b868 <_Log2PhysY_X1Y0S1>:
 800b868:	4608      	mov	r0, r1
 800b86a:	4770      	bx	lr

0800b86c <_Log2PhysY_X0Y1S1>:
 800b86c:	6800      	ldr	r0, [r0, #0]
 800b86e:	1a40      	subs	r0, r0, r1
 800b870:	3801      	subs	r0, #1
 800b872:	4770      	bx	lr

0800b874 <_Log2PhysY_X1Y1S1>:
 800b874:	6800      	ldr	r0, [r0, #0]
 800b876:	1a40      	subs	r0, r0, r1
 800b878:	3801      	subs	r0, #1
 800b87a:	4770      	bx	lr

0800b87c <_SetPixelIndex>:
 800b87c:	b510      	push	{r4, lr}
 800b87e:	6884      	ldr	r4, [r0, #8]
 800b880:	f8d4 40f8 	ldr.w	r4, [r4, #248]	; 0xf8
 800b884:	47a0      	blx	r4
 800b886:	bd10      	pop	{r4, pc}

0800b888 <_GetPixelIndex>:
 800b888:	b508      	push	{r3, lr}
 800b88a:	6883      	ldr	r3, [r0, #8]
 800b88c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b890:	4798      	blx	r3
 800b892:	bd08      	pop	{r3, pc}

0800b894 <_XorPixel>:
 800b894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b896:	4604      	mov	r4, r0
 800b898:	460f      	mov	r7, r1
 800b89a:	4616      	mov	r6, r2
 800b89c:	6885      	ldr	r5, [r0, #8]
 800b89e:	f7ff fff3 	bl	800b888 <_GetPixelIndex>
 800b8a2:	9001      	str	r0, [sp, #4]
 800b8a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b8a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	4639      	mov	r1, r7
 800b8ae:	4632      	mov	r2, r6
 800b8b0:	ea8e 0303 	eor.w	r3, lr, r3
 800b8b4:	f7ff ffe2 	bl	800b87c <_SetPixelIndex>
 800b8b8:	b003      	add	sp, #12
 800b8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b8bc <_DrawHLine>:
 800b8bc:	b513      	push	{r0, r1, r4, lr}
 800b8be:	6884      	ldr	r4, [r0, #8]
 800b8c0:	9200      	str	r2, [sp, #0]
 800b8c2:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800b8c6:	47a0      	blx	r4
 800b8c8:	b002      	add	sp, #8
 800b8ca:	bd10      	pop	{r4, pc}

0800b8cc <_DrawVLine>:
 800b8cc:	b513      	push	{r0, r1, r4, lr}
 800b8ce:	6884      	ldr	r4, [r0, #8]
 800b8d0:	9300      	str	r3, [sp, #0]
 800b8d2:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	47a0      	blx	r4
 800b8da:	b002      	add	sp, #8
 800b8dc:	bd10      	pop	{r4, pc}

0800b8de <_FillRect>:
 800b8de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8e0:	9c06      	ldr	r4, [sp, #24]
 800b8e2:	6885      	ldr	r5, [r0, #8]
 800b8e4:	9400      	str	r4, [sp, #0]
 800b8e6:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
 800b8ea:	47a0      	blx	r4
 800b8ec:	b003      	add	sp, #12
 800b8ee:	bd30      	pop	{r4, r5, pc}

0800b8f0 <_DrawBitmap>:
 800b8f0:	b530      	push	{r4, r5, lr}
 800b8f2:	b087      	sub	sp, #28
 800b8f4:	6885      	ldr	r5, [r0, #8]
 800b8f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b8f8:	9400      	str	r4, [sp, #0]
 800b8fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b8fc:	9401      	str	r4, [sp, #4]
 800b8fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b900:	9402      	str	r4, [sp, #8]
 800b902:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b904:	9403      	str	r4, [sp, #12]
 800b906:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800b908:	9404      	str	r4, [sp, #16]
 800b90a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800b90c:	9405      	str	r4, [sp, #20]
 800b90e:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
 800b912:	47a0      	blx	r4
 800b914:	b007      	add	sp, #28
 800b916:	bd30      	pop	{r4, r5, pc}

0800b918 <_GetDevFunc_SetRect>:
 800b918:	4770      	bx	lr
	...

0800b91c <_GetDevFunc_SetRectOutside>:
 800b91c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b91e:	9e07      	ldr	r6, [sp, #28]
 800b920:	6884      	ldr	r4, [r0, #8]
 800b922:	4d0c      	ldr	r5, [pc, #48]	; (800b954 <_GetDevFunc_SetRectOutside+0x38>)
 800b924:	b176      	cbz	r6, 800b944 <_GetDevFunc_SetRectOutside+0x28>
 800b926:	6828      	ldr	r0, [r5, #0]
 800b928:	b988      	cbnz	r0, 800b94e <_GetDevFunc_SetRectOutside+0x32>
 800b92a:	9806      	ldr	r0, [sp, #24]
 800b92c:	9000      	str	r0, [sp, #0]
 800b92e:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800b932:	4620      	mov	r0, r4
 800b934:	47b0      	blx	r6
 800b936:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800b93a:	602b      	str	r3, [r5, #0]
 800b93c:	4b06      	ldr	r3, [pc, #24]	; (800b958 <_GetDevFunc_SetRectOutside+0x3c>)
 800b93e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800b942:	e004      	b.n	800b94e <_GetDevFunc_SetRectOutside+0x32>
 800b944:	682b      	ldr	r3, [r5, #0]
 800b946:	b113      	cbz	r3, 800b94e <_GetDevFunc_SetRectOutside+0x32>
 800b948:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800b94c:	602e      	str	r6, [r5, #0]
 800b94e:	b002      	add	sp, #8
 800b950:	bd70      	pop	{r4, r5, r6, pc}
 800b952:	bf00      	nop
 800b954:	20002a18 	.word	0x20002a18
 800b958:	0800b919 	.word	0x0800b919

0800b95c <_ReadPixelCust_16bpp>:
 800b95c:	b508      	push	{r3, lr}
 800b95e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b960:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 800b964:	6990      	ldr	r0, [r2, #24]
 800b966:	4798      	blx	r3
 800b968:	bd08      	pop	{r3, pc}

0800b96a <_ReadPixelCust_18bpp>:
 800b96a:	b508      	push	{r3, lr}
 800b96c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b96e:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800b972:	6990      	ldr	r0, [r2, #24]
 800b974:	4798      	blx	r3
 800b976:	bd08      	pop	{r3, pc}

0800b978 <_ReadRectCust_16bpp>:
 800b978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b97c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b97e:	6884      	ldr	r4, [r0, #8]
 800b980:	9500      	str	r5, [sp, #0]
 800b982:	4617      	mov	r7, r2
 800b984:	4620      	mov	r0, r4
 800b986:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800b98a:	4699      	mov	r9, r3
 800b98c:	4688      	mov	r8, r1
 800b98e:	1bed      	subs	r5, r5, r7
 800b990:	47b0      	blx	r6
 800b992:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b994:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 800b998:	6988      	ldr	r0, [r1, #24]
 800b99a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b99c:	ebc8 0809 	rsb	r8, r8, r9
 800b9a0:	1c6a      	adds	r2, r5, #1
 800b9a2:	fb08 2202 	mla	r2, r8, r2, r2
 800b9a6:	4798      	blx	r3
 800b9a8:	b003      	add	sp, #12
 800b9aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b9ae <_ReadRectCust_18bpp>:
 800b9ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b9b4:	6884      	ldr	r4, [r0, #8]
 800b9b6:	9500      	str	r5, [sp, #0]
 800b9b8:	4617      	mov	r7, r2
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800b9c0:	4699      	mov	r9, r3
 800b9c2:	4688      	mov	r8, r1
 800b9c4:	1bed      	subs	r5, r5, r7
 800b9c6:	47b0      	blx	r6
 800b9c8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b9ca:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800b9ce:	6988      	ldr	r0, [r1, #24]
 800b9d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b9d2:	ebc8 0809 	rsb	r8, r8, r9
 800b9d6:	1c6a      	adds	r2, r5, #1
 800b9d8:	fb08 2202 	mla	r2, r8, r2, r2
 800b9dc:	4798      	blx	r3
 800b9de:	b003      	add	sp, #12
 800b9e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b9e4 <_GetDevFunc>:
 800b9e4:	3901      	subs	r1, #1
 800b9e6:	2917      	cmp	r1, #23
 800b9e8:	d828      	bhi.n	800ba3c <_GetDevFunc+0x58>
 800b9ea:	e8df f001 	tbb	[pc, r1]
 800b9ee:	2714      	.short	0x2714
 800b9f0:	27272727 	.word	0x27272727
 800b9f4:	0e272727 	.word	0x0e272727
 800b9f8:	0c191210 	.word	0x0c191210
 800b9fc:	27272729 	.word	0x27272729
 800ba00:	23272727 	.word	0x23272727
 800ba04:	251e      	.short	0x251e
 800ba06:	480f      	ldr	r0, [pc, #60]	; (800ba44 <_GetDevFunc+0x60>)
 800ba08:	4770      	bx	lr
 800ba0a:	480f      	ldr	r0, [pc, #60]	; (800ba48 <_GetDevFunc+0x64>)
 800ba0c:	4770      	bx	lr
 800ba0e:	480f      	ldr	r0, [pc, #60]	; (800ba4c <_GetDevFunc+0x68>)
 800ba10:	4770      	bx	lr
 800ba12:	480f      	ldr	r0, [pc, #60]	; (800ba50 <_GetDevFunc+0x6c>)
 800ba14:	4770      	bx	lr
 800ba16:	6803      	ldr	r3, [r0, #0]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 800ba1e:	4770      	bx	lr
 800ba20:	6803      	ldr	r3, [r0, #0]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 800ba28:	4770      	bx	lr
 800ba2a:	6803      	ldr	r3, [r0, #0]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 800ba32:	4770      	bx	lr
 800ba34:	4807      	ldr	r0, [pc, #28]	; (800ba54 <_GetDevFunc+0x70>)
 800ba36:	4770      	bx	lr
 800ba38:	4807      	ldr	r0, [pc, #28]	; (800ba58 <_GetDevFunc+0x74>)
 800ba3a:	4770      	bx	lr
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	4770      	bx	lr
 800ba40:	4806      	ldr	r0, [pc, #24]	; (800ba5c <_GetDevFunc+0x78>)
 800ba42:	4770      	bx	lr
 800ba44:	0800bddd 	.word	0x0800bddd
 800ba48:	0800bdb3 	.word	0x0800bdb3
 800ba4c:	0800bd9f 	.word	0x0800bd9f
 800ba50:	0800bd55 	.word	0x0800bd55
 800ba54:	0800bcb9 	.word	0x0800bcb9
 800ba58:	0800b91d 	.word	0x0800b91d
 800ba5c:	0800bdc7 	.word	0x0800bdc7

0800ba60 <_GetDevProp>:
 800ba60:	3901      	subs	r1, #1
 800ba62:	6880      	ldr	r0, [r0, #8]
 800ba64:	290d      	cmp	r1, #13
 800ba66:	d823      	bhi.n	800bab0 <_GetDevProp+0x50>
 800ba68:	e8df f001 	tbb	[pc, r1]
 800ba6c:	0f0d0b09 	.word	0x0f0d0b09
 800ba70:	11222222 	.word	0x11222222
 800ba74:	13252507 	.word	0x13252507
 800ba78:	1d18      	.short	0x1d18
 800ba7a:	2000      	movs	r0, #0
 800ba7c:	4770      	bx	lr
 800ba7e:	6800      	ldr	r0, [r0, #0]
 800ba80:	4770      	bx	lr
 800ba82:	6840      	ldr	r0, [r0, #4]
 800ba84:	4770      	bx	lr
 800ba86:	6880      	ldr	r0, [r0, #8]
 800ba88:	4770      	bx	lr
 800ba8a:	68c0      	ldr	r0, [r0, #12]
 800ba8c:	4770      	bx	lr
 800ba8e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800ba90:	4770      	bx	lr
 800ba92:	b188      	cbz	r0, 800bab8 <_GetDevProp+0x58>
 800ba94:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ba96:	f000 0001 	and.w	r0, r0, #1
 800ba9a:	4770      	bx	lr
 800ba9c:	b160      	cbz	r0, 800bab8 <_GetDevProp+0x58>
 800ba9e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800baa0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800baa4:	4770      	bx	lr
 800baa6:	b138      	cbz	r0, 800bab8 <_GetDevProp+0x58>
 800baa8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800baaa:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800baae:	4770      	bx	lr
 800bab0:	f04f 30ff 	mov.w	r0, #4294967295
 800bab4:	4770      	bx	lr
 800bab6:	2001      	movs	r0, #1
 800bab8:	4770      	bx	lr

0800baba <_GetDevData>:
 800baba:	6883      	ldr	r3, [r0, #8]
 800babc:	2901      	cmp	r1, #1
 800babe:	bf0c      	ite	eq
 800bac0:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 800bac2:	2000      	movne	r0, #0
 800bac4:	4770      	bx	lr

0800bac6 <_GetRect>:
 800bac6:	6883      	ldr	r3, [r0, #8]
 800bac8:	2200      	movs	r2, #0
 800baca:	800a      	strh	r2, [r1, #0]
 800bacc:	804a      	strh	r2, [r1, #2]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	3a01      	subs	r2, #1
 800bad4:	3b01      	subs	r3, #1
 800bad6:	808a      	strh	r2, [r1, #4]
 800bad8:	80cb      	strh	r3, [r1, #6]
 800bada:	4770      	bx	lr

0800badc <GUIDRV_FlexColor__SetLog2Phys>:
 800badc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bade:	4d10      	ldr	r5, [pc, #64]	; (800bb20 <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 800bae0:	462e      	mov	r6, r5
 800bae2:	4607      	mov	r7, r0
 800bae4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bae6:	b091      	sub	sp, #68	; 0x44
 800bae8:	466c      	mov	r4, sp
 800baea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800baec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800baf0:	3520      	adds	r5, #32
 800baf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800baf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800baf8:	ac08      	add	r4, sp, #32
 800bafa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bafc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800bb00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb06:	aa10      	add	r2, sp, #64	; 0x40
 800bb08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb0c:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800bb10:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800bb14:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800bb18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800bb1c:	b011      	add	sp, #68	; 0x44
 800bb1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb20:	08012bd4 	.word	0x08012bd4

0800bb24 <_SetOrg>:
 800bb24:	b507      	push	{r0, r1, r2, lr}
 800bb26:	6980      	ldr	r0, [r0, #24]
 800bb28:	e88d 0006 	stmia.w	sp, {r1, r2}
 800bb2c:	2103      	movs	r1, #3
 800bb2e:	466a      	mov	r2, sp
 800bb30:	f7f4 ff50 	bl	80009d4 <LCD_X_DisplayDriver>
 800bb34:	b003      	add	sp, #12
 800bb36:	f85d fb04 	ldr.w	pc, [sp], #4

0800bb3a <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 800bb3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb3e:	6884      	ldr	r4, [r0, #8]
 800bb40:	4698      	mov	r8, r3
 800bb42:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800bb44:	079b      	lsls	r3, r3, #30
 800bb46:	4689      	mov	r9, r1
 800bb48:	4617      	mov	r7, r2
 800bb4a:	d532      	bpl.n	800bbb2 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x78>
 800bb4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800bb50:	4620      	mov	r0, r4
 800bb52:	4798      	blx	r3
 800bb54:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 800bb58:	4606      	mov	r6, r0
 800bb5a:	463a      	mov	r2, r7
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	4649      	mov	r1, r9
 800bb60:	47a8      	blx	r5
 800bb62:	6923      	ldr	r3, [r4, #16]
 800bb64:	69a2      	ldr	r2, [r4, #24]
 800bb66:	429e      	cmp	r6, r3
 800bb68:	bfac      	ite	ge
 800bb6a:	2300      	movge	r3, #0
 800bb6c:	2301      	movlt	r3, #1
 800bb6e:	4296      	cmp	r6, r2
 800bb70:	bfd4      	ite	le
 800bb72:	461a      	movle	r2, r3
 800bb74:	f043 0201 	orrgt.w	r2, r3, #1
 800bb78:	6963      	ldr	r3, [r4, #20]
 800bb7a:	4298      	cmp	r0, r3
 800bb7c:	bfac      	ite	ge
 800bb7e:	4613      	movge	r3, r2
 800bb80:	f042 0301 	orrlt.w	r3, r2, #1
 800bb84:	4605      	mov	r5, r0
 800bb86:	b913      	cbnz	r3, 800bb8e <GUIDRV_FlexColor__SetPixelIndexNoCache+0x54>
 800bb88:	69e3      	ldr	r3, [r4, #28]
 800bb8a:	4298      	cmp	r0, r3
 800bb8c:	dd0a      	ble.n	800bba4 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x6a>
 800bb8e:	6862      	ldr	r2, [r4, #4]
 800bb90:	6823      	ldr	r3, [r4, #0]
 800bb92:	3a01      	subs	r2, #1
 800bb94:	9200      	str	r2, [sp, #0]
 800bb96:	2100      	movs	r1, #0
 800bb98:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	460a      	mov	r2, r1
 800bba0:	3b01      	subs	r3, #1
 800bba2:	47b8      	blx	r7
 800bba4:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 800bba8:	4620      	mov	r0, r4
 800bbaa:	4631      	mov	r1, r6
 800bbac:	462a      	mov	r2, r5
 800bbae:	47b8      	blx	r7
 800bbb0:	e003      	b.n	800bbba <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 800bbb2:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	47a8      	blx	r5
 800bbba:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	4641      	mov	r1, r8
 800bbc2:	4798      	blx	r3
 800bbc4:	b003      	add	sp, #12
 800bbc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bbca <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 800bbca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbcc:	6884      	ldr	r4, [r0, #8]
 800bbce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800bbd0:	079b      	lsls	r3, r3, #30
 800bbd2:	460f      	mov	r7, r1
 800bbd4:	4616      	mov	r6, r2
 800bbd6:	d545      	bpl.n	800bc64 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x9a>
 800bbd8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800bbdc:	4620      	mov	r0, r4
 800bbde:	4798      	blx	r3
 800bbe0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800bbe4:	4632      	mov	r2, r6
 800bbe6:	4605      	mov	r5, r0
 800bbe8:	4639      	mov	r1, r7
 800bbea:	4620      	mov	r0, r4
 800bbec:	4798      	blx	r3
 800bbee:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bbf2:	4606      	mov	r6, r0
 800bbf4:	b11b      	cbz	r3, 800bbfe <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	2101      	movs	r1, #1
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	4798      	blx	r3
 800bbfe:	6923      	ldr	r3, [r4, #16]
 800bc00:	69a2      	ldr	r2, [r4, #24]
 800bc02:	429d      	cmp	r5, r3
 800bc04:	bfac      	ite	ge
 800bc06:	2300      	movge	r3, #0
 800bc08:	2301      	movlt	r3, #1
 800bc0a:	4295      	cmp	r5, r2
 800bc0c:	bfd4      	ite	le
 800bc0e:	461a      	movle	r2, r3
 800bc10:	f043 0201 	orrgt.w	r2, r3, #1
 800bc14:	6963      	ldr	r3, [r4, #20]
 800bc16:	429e      	cmp	r6, r3
 800bc18:	bfac      	ite	ge
 800bc1a:	4613      	movge	r3, r2
 800bc1c:	f042 0301 	orrlt.w	r3, r2, #1
 800bc20:	b913      	cbnz	r3, 800bc28 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5e>
 800bc22:	69e3      	ldr	r3, [r4, #28]
 800bc24:	429e      	cmp	r6, r3
 800bc26:	dd0a      	ble.n	800bc3e <GUIDRV_FlexColor__GetPixelIndexNoCache+0x74>
 800bc28:	6862      	ldr	r2, [r4, #4]
 800bc2a:	6823      	ldr	r3, [r4, #0]
 800bc2c:	3a01      	subs	r2, #1
 800bc2e:	9200      	str	r2, [sp, #0]
 800bc30:	2100      	movs	r1, #0
 800bc32:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800bc36:	4620      	mov	r0, r4
 800bc38:	460a      	mov	r2, r1
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	47b8      	blx	r7
 800bc3e:	4629      	mov	r1, r5
 800bc40:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800bc44:	4620      	mov	r0, r4
 800bc46:	4632      	mov	r2, r6
 800bc48:	4798      	blx	r3
 800bc4a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800bc4e:	4620      	mov	r0, r4
 800bc50:	4798      	blx	r3
 800bc52:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bc56:	4605      	mov	r5, r0
 800bc58:	b16b      	cbz	r3, 800bc76 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	2201      	movs	r2, #1
 800bc60:	4798      	blx	r3
 800bc62:	e008      	b.n	800bc76 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800bc64:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800bc68:	4620      	mov	r0, r4
 800bc6a:	4798      	blx	r3
 800bc6c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800bc70:	4620      	mov	r0, r4
 800bc72:	4798      	blx	r3
 800bc74:	4605      	mov	r5, r0
 800bc76:	4628      	mov	r0, r5
 800bc78:	b003      	add	sp, #12
 800bc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc7c <GUIDRV_FlexColor__InitOnce>:
 800bc7c:	b538      	push	{r3, r4, r5, lr}
 800bc7e:	6885      	ldr	r5, [r0, #8]
 800bc80:	4604      	mov	r4, r0
 800bc82:	b99d      	cbnz	r5, 800bcac <GUIDRV_FlexColor__InitOnce+0x30>
 800bc84:	f44f 70be 	mov.w	r0, #380	; 0x17c
 800bc88:	f003 f9ce 	bl	800f028 <GUI_ALLOC_GetFixedBlock>
 800bc8c:	4b08      	ldr	r3, [pc, #32]	; (800bcb0 <GUIDRV_FlexColor__InitOnce+0x34>)
 800bc8e:	60a0      	str	r0, [r4, #8]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800bc96:	4629      	mov	r1, r5
 800bc98:	4798      	blx	r3
 800bc9a:	68a3      	ldr	r3, [r4, #8]
 800bc9c:	2202      	movs	r2, #2
 800bc9e:	84da      	strh	r2, [r3, #38]	; 0x26
 800bca0:	2201      	movs	r2, #1
 800bca2:	621a      	str	r2, [r3, #32]
 800bca4:	4a03      	ldr	r2, [pc, #12]	; (800bcb4 <GUIDRV_FlexColor__InitOnce+0x38>)
 800bca6:	641c      	str	r4, [r3, #64]	; 0x40
 800bca8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800bcac:	bd38      	pop	{r3, r4, r5, pc}
 800bcae:	bf00      	nop
 800bcb0:	20000070 	.word	0x20000070
 800bcb4:	0800badd 	.word	0x0800badd

0800bcb8 <_SetDevFunc>:
 800bcb8:	b570      	push	{r4, r5, r6, lr}
 800bcba:	4606      	mov	r6, r0
 800bcbc:	460d      	mov	r5, r1
 800bcbe:	4614      	mov	r4, r2
 800bcc0:	f7ff ffdc 	bl	800bc7c <GUIDRV_FlexColor__InitOnce>
 800bcc4:	68b3      	ldr	r3, [r6, #8]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d03b      	beq.n	800bd42 <_SetDevFunc+0x8a>
 800bcca:	2d26      	cmp	r5, #38	; 0x26
 800bccc:	d002      	beq.n	800bcd4 <_SetDevFunc+0x1c>
 800bcce:	2d27      	cmp	r5, #39	; 0x27
 800bcd0:	d016      	beq.n	800bd00 <_SetDevFunc+0x48>
 800bcd2:	bd70      	pop	{r4, r5, r6, pc}
 800bcd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcd6:	2a10      	cmp	r2, #16
 800bcd8:	d002      	beq.n	800bce0 <_SetDevFunc+0x28>
 800bcda:	2a12      	cmp	r2, #18
 800bcdc:	d008      	beq.n	800bcf0 <_SetDevFunc+0x38>
 800bcde:	bd70      	pop	{r4, r5, r6, pc}
 800bce0:	4a18      	ldr	r2, [pc, #96]	; (800bd44 <_SetDevFunc+0x8c>)
 800bce2:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 800bce6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800bcea:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800bcee:	bd70      	pop	{r4, r5, r6, pc}
 800bcf0:	4a15      	ldr	r2, [pc, #84]	; (800bd48 <_SetDevFunc+0x90>)
 800bcf2:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 800bcf6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800bcfa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800bcfe:	bd70      	pop	{r4, r5, r6, pc}
 800bd00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd02:	2a10      	cmp	r2, #16
 800bd04:	d002      	beq.n	800bd0c <_SetDevFunc+0x54>
 800bd06:	2a12      	cmp	r2, #18
 800bd08:	d00e      	beq.n	800bd28 <_SetDevFunc+0x70>
 800bd0a:	bd70      	pop	{r4, r5, r6, pc}
 800bd0c:	b13c      	cbz	r4, 800bd1e <_SetDevFunc+0x66>
 800bd0e:	4a0f      	ldr	r2, [pc, #60]	; (800bd4c <_SetDevFunc+0x94>)
 800bd10:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 800bd14:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800bd18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800bd1c:	bd70      	pop	{r4, r5, r6, pc}
 800bd1e:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 800bd22:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 800bd26:	bd70      	pop	{r4, r5, r6, pc}
 800bd28:	b13c      	cbz	r4, 800bd3a <_SetDevFunc+0x82>
 800bd2a:	4a09      	ldr	r2, [pc, #36]	; (800bd50 <_SetDevFunc+0x98>)
 800bd2c:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 800bd30:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800bd34:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800bd38:	bd70      	pop	{r4, r5, r6, pc}
 800bd3a:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 800bd3e:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 800bd42:	bd70      	pop	{r4, r5, r6, pc}
 800bd44:	0800b95d 	.word	0x0800b95d
 800bd48:	0800b96b 	.word	0x0800b96b
 800bd4c:	0800b979 	.word	0x0800b979
 800bd50:	0800b9af 	.word	0x0800b9af

0800bd54 <_GetDevFunc_Init>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4605      	mov	r5, r0
 800bd58:	f7ff ff90 	bl	800bc7c <GUIDRV_FlexColor__InitOnce>
 800bd5c:	68ac      	ldr	r4, [r5, #8]
 800bd5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bd62:	f003 f961 	bl	800f028 <GUI_ALLOC_GetFixedBlock>
 800bd66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd68:	66a0      	str	r0, [r4, #104]	; 0x68
 800bd6a:	3307      	adds	r3, #7
 800bd6c:	10d8      	asrs	r0, r3, #3
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	4358      	muls	r0, r3
 800bd72:	f003 f959 	bl	800f028 <GUI_ALLOC_GetFixedBlock>
 800bd76:	2101      	movs	r1, #1
 800bd78:	2200      	movs	r2, #0
 800bd7a:	66e0      	str	r0, [r4, #108]	; 0x6c
 800bd7c:	69a8      	ldr	r0, [r5, #24]
 800bd7e:	f7f4 fe29 	bl	80009d4 <LCD_X_DisplayDriver>
 800bd82:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800bd86:	4605      	mov	r5, r0
 800bd88:	4620      	mov	r0, r4
 800bd8a:	4798      	blx	r3
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800bd92:	4798      	blx	r3
 800bd94:	2d00      	cmp	r5, #0
 800bd96:	bfd4      	ite	le
 800bd98:	2000      	movle	r0, #0
 800bd9a:	2001      	movgt	r0, #1
 800bd9c:	bd38      	pop	{r3, r4, r5, pc}

0800bd9e <_GetDevFunc_SetSize>:
 800bd9e:	b570      	push	{r4, r5, r6, lr}
 800bda0:	4604      	mov	r4, r0
 800bda2:	460d      	mov	r5, r1
 800bda4:	4616      	mov	r6, r2
 800bda6:	f7ff ff69 	bl	800bc7c <GUIDRV_FlexColor__InitOnce>
 800bdaa:	68a3      	ldr	r3, [r4, #8]
 800bdac:	e883 0060 	stmia.w	r3, {r5, r6}
 800bdb0:	bd70      	pop	{r4, r5, r6, pc}

0800bdb2 <_GetDevFunc_SetVSize>:
 800bdb2:	b570      	push	{r4, r5, r6, lr}
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	460d      	mov	r5, r1
 800bdb8:	4616      	mov	r6, r2
 800bdba:	f7ff ff5f 	bl	800bc7c <GUIDRV_FlexColor__InitOnce>
 800bdbe:	68a3      	ldr	r3, [r4, #8]
 800bdc0:	609d      	str	r5, [r3, #8]
 800bdc2:	60de      	str	r6, [r3, #12]
 800bdc4:	bd70      	pop	{r4, r5, r6, pc}

0800bdc6 <_GetDevFunc_Off>:
 800bdc6:	b510      	push	{r4, lr}
 800bdc8:	4604      	mov	r4, r0
 800bdca:	f7ff ff57 	bl	800bc7c <GUIDRV_FlexColor__InitOnce>
 800bdce:	69a0      	ldr	r0, [r4, #24]
 800bdd0:	2106      	movs	r1, #6
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdd8:	f7f4 bdfc 	b.w	80009d4 <LCD_X_DisplayDriver>

0800bddc <_GetDevFunc_On>:
 800bddc:	b510      	push	{r4, lr}
 800bdde:	4604      	mov	r4, r0
 800bde0:	f7ff ff4c 	bl	800bc7c <GUIDRV_FlexColor__InitOnce>
 800bde4:	69a0      	ldr	r0, [r4, #24]
 800bde6:	2105      	movs	r1, #5
 800bde8:	2200      	movs	r2, #0
 800bdea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdee:	f7f4 bdf1 	b.w	80009d4 <LCD_X_DisplayDriver>

0800bdf2 <GUIDRV_FlexColor_Config>:
 800bdf2:	b538      	push	{r3, r4, r5, lr}
 800bdf4:	4605      	mov	r5, r0
 800bdf6:	460c      	mov	r4, r1
 800bdf8:	f7ff ff40 	bl	800bc7c <GUIDRV_FlexColor__InitOnce>
 800bdfc:	68ab      	ldr	r3, [r5, #8]
 800bdfe:	6822      	ldr	r2, [r4, #0]
 800be00:	62da      	str	r2, [r3, #44]	; 0x2c
 800be02:	6862      	ldr	r2, [r4, #4]
 800be04:	631a      	str	r2, [r3, #48]	; 0x30
 800be06:	68a2      	ldr	r2, [r4, #8]
 800be08:	635a      	str	r2, [r3, #52]	; 0x34
 800be0a:	0752      	lsls	r2, r2, #29
 800be0c:	d507      	bpl.n	800be1e <GUIDRV_FlexColor_Config+0x2c>
 800be0e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800be12:	601a      	str	r2, [r3, #0]
 800be14:	6059      	str	r1, [r3, #4]
 800be16:	68da      	ldr	r2, [r3, #12]
 800be18:	6899      	ldr	r1, [r3, #8]
 800be1a:	60d9      	str	r1, [r3, #12]
 800be1c:	609a      	str	r2, [r3, #8]
 800be1e:	89a2      	ldrh	r2, [r4, #12]
 800be20:	849a      	strh	r2, [r3, #36]	; 0x24
 800be22:	6922      	ldr	r2, [r4, #16]
 800be24:	b112      	cbz	r2, 800be2c <GUIDRV_FlexColor_Config+0x3a>
 800be26:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800be2a:	621a      	str	r2, [r3, #32]
 800be2c:	bd38      	pop	{r3, r4, r5, pc}

0800be2e <GUIDRV_FlexColor_SetFunc>:
 800be2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be32:	4604      	mov	r4, r0
 800be34:	461f      	mov	r7, r3
 800be36:	4616      	mov	r6, r2
 800be38:	4688      	mov	r8, r1
 800be3a:	f7ff ff1f 	bl	800bc7c <GUIDRV_FlexColor__InitOnce>
 800be3e:	68a5      	ldr	r5, [r4, #8]
 800be40:	4641      	mov	r1, r8
 800be42:	2268      	movs	r2, #104	; 0x68
 800be44:	f505 708a 	add.w	r0, r5, #276	; 0x114
 800be48:	f006 f9b2 	bl	80121b0 <memcpy>
 800be4c:	4620      	mov	r0, r4
 800be4e:	47b0      	blx	r6
 800be50:	4620      	mov	r0, r4
 800be52:	47b8      	blx	r7
 800be54:	6923      	ldr	r3, [r4, #16]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	4798      	blx	r3
 800be5a:	62a8      	str	r0, [r5, #40]	; 0x28
 800be5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800be60 <LCD_UpdateColorIndices>:
 800be60:	b510      	push	{r4, lr}
 800be62:	4c07      	ldr	r4, [pc, #28]	; (800be80 <LCD_UpdateColorIndices+0x20>)
 800be64:	6823      	ldr	r3, [r4, #0]
 800be66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800be68:	f000 fc70 	bl	800c74c <LCD_Color2Index>
 800be6c:	f000 fc8e 	bl	800c78c <LCD_SetColorIndex>
 800be70:	6823      	ldr	r3, [r4, #0]
 800be72:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800be74:	f000 fc6a 	bl	800c74c <LCD_Color2Index>
 800be78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be7c:	f000 bca2 	b.w	800c7c4 <LCD_SetBkColorIndex>
 800be80:	20000084 	.word	0x20000084

0800be84 <LCD_SetClipRectEx>:
 800be84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be86:	4c09      	ldr	r4, [pc, #36]	; (800beac <LCD_SetClipRectEx+0x28>)
 800be88:	6823      	ldr	r3, [r4, #0]
 800be8a:	7c5a      	ldrb	r2, [r3, #17]
 800be8c:	4b08      	ldr	r3, [pc, #32]	; (800beb0 <LCD_SetClipRectEx+0x2c>)
 800be8e:	4605      	mov	r5, r0
 800be90:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800be94:	68c2      	ldr	r2, [r0, #12]
 800be96:	4669      	mov	r1, sp
 800be98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800be9a:	4790      	blx	r2
 800be9c:	6820      	ldr	r0, [r4, #0]
 800be9e:	4629      	mov	r1, r5
 800bea0:	466a      	mov	r2, sp
 800bea2:	3008      	adds	r0, #8
 800bea4:	f000 fcec 	bl	800c880 <GUI__IntersectRects>
 800bea8:	b003      	add	sp, #12
 800beaa:	bd30      	pop	{r4, r5, pc}
 800beac:	20000084 	.word	0x20000084
 800beb0:	20007738 	.word	0x20007738

0800beb4 <LCD_SetVSizeEx>:
 800beb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800beb6:	460d      	mov	r5, r1
 800beb8:	4614      	mov	r4, r2
 800beba:	f001 faab 	bl	800d414 <GUI_DEVICE__GetpDriver>
 800bebe:	9001      	str	r0, [sp, #4]
 800bec0:	b908      	cbnz	r0, 800bec6 <LCD_SetVSizeEx+0x12>
 800bec2:	2001      	movs	r0, #1
 800bec4:	e00c      	b.n	800bee0 <LCD_SetVSizeEx+0x2c>
 800bec6:	68c3      	ldr	r3, [r0, #12]
 800bec8:	210a      	movs	r1, #10
 800beca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800becc:	a801      	add	r0, sp, #4
 800bece:	4798      	blx	r3
 800bed0:	4603      	mov	r3, r0
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d0f5      	beq.n	800bec2 <LCD_SetVSizeEx+0xe>
 800bed6:	9801      	ldr	r0, [sp, #4]
 800bed8:	4629      	mov	r1, r5
 800beda:	4622      	mov	r2, r4
 800bedc:	4798      	blx	r3
 800bede:	2000      	movs	r0, #0
 800bee0:	b003      	add	sp, #12
 800bee2:	bd30      	pop	{r4, r5, pc}

0800bee4 <LCD_SetSizeEx>:
 800bee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bee6:	460d      	mov	r5, r1
 800bee8:	4614      	mov	r4, r2
 800beea:	f001 fa93 	bl	800d414 <GUI_DEVICE__GetpDriver>
 800beee:	9001      	str	r0, [sp, #4]
 800bef0:	b908      	cbnz	r0, 800bef6 <LCD_SetSizeEx+0x12>
 800bef2:	2001      	movs	r0, #1
 800bef4:	e00c      	b.n	800bf10 <LCD_SetSizeEx+0x2c>
 800bef6:	68c3      	ldr	r3, [r0, #12]
 800bef8:	210b      	movs	r1, #11
 800befa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befc:	a801      	add	r0, sp, #4
 800befe:	4798      	blx	r3
 800bf00:	4603      	mov	r3, r0
 800bf02:	2800      	cmp	r0, #0
 800bf04:	d0f5      	beq.n	800bef2 <LCD_SetSizeEx+0xe>
 800bf06:	9801      	ldr	r0, [sp, #4]
 800bf08:	4629      	mov	r1, r5
 800bf0a:	4622      	mov	r2, r4
 800bf0c:	4798      	blx	r3
 800bf0e:	2000      	movs	r0, #0
 800bf10:	b003      	add	sp, #12
 800bf12:	bd30      	pop	{r4, r5, pc}

0800bf14 <LCD_SetLUTEntryEx>:
 800bf14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf16:	460d      	mov	r5, r1
 800bf18:	4614      	mov	r4, r2
 800bf1a:	f001 fa7b 	bl	800d414 <GUI_DEVICE__GetpDriver>
 800bf1e:	9001      	str	r0, [sp, #4]
 800bf20:	b908      	cbnz	r0, 800bf26 <LCD_SetLUTEntryEx+0x12>
 800bf22:	2001      	movs	r0, #1
 800bf24:	e00c      	b.n	800bf40 <LCD_SetLUTEntryEx+0x2c>
 800bf26:	68c3      	ldr	r3, [r0, #12]
 800bf28:	2110      	movs	r1, #16
 800bf2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2c:	a801      	add	r0, sp, #4
 800bf2e:	4798      	blx	r3
 800bf30:	4603      	mov	r3, r0
 800bf32:	2800      	cmp	r0, #0
 800bf34:	d0f5      	beq.n	800bf22 <LCD_SetLUTEntryEx+0xe>
 800bf36:	9801      	ldr	r0, [sp, #4]
 800bf38:	4629      	mov	r1, r5
 800bf3a:	4622      	mov	r2, r4
 800bf3c:	4798      	blx	r3
 800bf3e:	2000      	movs	r0, #0
 800bf40:	b003      	add	sp, #12
 800bf42:	bd30      	pop	{r4, r5, pc}

0800bf44 <_GetDevProp>:
 800bf44:	2801      	cmp	r0, #1
 800bf46:	b510      	push	{r4, lr}
 800bf48:	460c      	mov	r4, r1
 800bf4a:	dc08      	bgt.n	800bf5e <_GetDevProp+0x1a>
 800bf4c:	f001 fa62 	bl	800d414 <GUI_DEVICE__GetpDriver>
 800bf50:	b120      	cbz	r0, 800bf5c <_GetDevProp+0x18>
 800bf52:	68c3      	ldr	r3, [r0, #12]
 800bf54:	4621      	mov	r1, r4
 800bf56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf58:	4798      	blx	r3
 800bf5a:	bd10      	pop	{r4, pc}
 800bf5c:	bd10      	pop	{r4, pc}
 800bf5e:	2000      	movs	r0, #0
 800bf60:	bd10      	pop	{r4, pc}

0800bf62 <_GetMaxValue>:
 800bf62:	b538      	push	{r3, r4, r5, lr}
 800bf64:	4604      	mov	r4, r0
 800bf66:	4621      	mov	r1, r4
 800bf68:	2001      	movs	r0, #1
 800bf6a:	f7ff ffeb 	bl	800bf44 <_GetDevProp>
 800bf6e:	4621      	mov	r1, r4
 800bf70:	4605      	mov	r5, r0
 800bf72:	2000      	movs	r0, #0
 800bf74:	f7ff ffe6 	bl	800bf44 <_GetDevProp>
 800bf78:	42a8      	cmp	r0, r5
 800bf7a:	bfb8      	it	lt
 800bf7c:	4628      	movlt	r0, r5
 800bf7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800bf82:	bd38      	pop	{r3, r4, r5, pc}

0800bf84 <LCD_GetXSizeEx>:
 800bf84:	2101      	movs	r1, #1
 800bf86:	f7ff bfdd 	b.w	800bf44 <_GetDevProp>

0800bf8a <LCD_GetYSizeEx>:
 800bf8a:	2102      	movs	r1, #2
 800bf8c:	f7ff bfda 	b.w	800bf44 <_GetDevProp>

0800bf90 <LCD_GetVXSizeEx>:
 800bf90:	2103      	movs	r1, #3
 800bf92:	f7ff bfd7 	b.w	800bf44 <_GetDevProp>

0800bf96 <LCD_GetVYSizeEx>:
 800bf96:	2104      	movs	r1, #4
 800bf98:	f7ff bfd4 	b.w	800bf44 <_GetDevProp>

0800bf9c <LCD_GetBitsPerPixelEx>:
 800bf9c:	2108      	movs	r1, #8
 800bf9e:	f7ff bfd1 	b.w	800bf44 <_GetDevProp>

0800bfa2 <LCD_GetNumColorsEx>:
 800bfa2:	2109      	movs	r1, #9
 800bfa4:	f7ff bfce 	b.w	800bf44 <_GetDevProp>

0800bfa8 <LCD_GetXSize>:
 800bfa8:	4b02      	ldr	r3, [pc, #8]	; (800bfb4 <LCD_GetXSize+0xc>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	7c58      	ldrb	r0, [r3, #17]
 800bfae:	f7ff bfe9 	b.w	800bf84 <LCD_GetXSizeEx>
 800bfb2:	bf00      	nop
 800bfb4:	20000084 	.word	0x20000084

0800bfb8 <LCD_GetYSize>:
 800bfb8:	4b02      	ldr	r3, [pc, #8]	; (800bfc4 <LCD_GetYSize+0xc>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	7c58      	ldrb	r0, [r3, #17]
 800bfbe:	f7ff bfe4 	b.w	800bf8a <LCD_GetYSizeEx>
 800bfc2:	bf00      	nop
 800bfc4:	20000084 	.word	0x20000084

0800bfc8 <LCD_GetNumColors>:
 800bfc8:	4b02      	ldr	r3, [pc, #8]	; (800bfd4 <LCD_GetNumColors+0xc>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	7c58      	ldrb	r0, [r3, #17]
 800bfce:	f7ff bfe8 	b.w	800bfa2 <LCD_GetNumColorsEx>
 800bfd2:	bf00      	nop
 800bfd4:	20000084 	.word	0x20000084

0800bfd8 <GUI_GetBitsPerPixelEx>:
 800bfd8:	b508      	push	{r3, lr}
 800bfda:	4b04      	ldr	r3, [pc, #16]	; (800bfec <GUI_GetBitsPerPixelEx+0x14>)
 800bfdc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800bfe0:	68c3      	ldr	r3, [r0, #12]
 800bfe2:	2108      	movs	r1, #8
 800bfe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfe6:	4798      	blx	r3
 800bfe8:	bd08      	pop	{r3, pc}
 800bfea:	bf00      	nop
 800bfec:	20007738 	.word	0x20007738

0800bff0 <LCD_GetPaletteEx>:
 800bff0:	b508      	push	{r3, lr}
 800bff2:	f001 fa0f 	bl	800d414 <GUI_DEVICE__GetpDriver>
 800bff6:	b120      	cbz	r0, 800c002 <LCD_GetPaletteEx+0x12>
 800bff8:	68c3      	ldr	r3, [r0, #12]
 800bffa:	2102      	movs	r1, #2
 800bffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bffe:	4798      	blx	r3
 800c000:	bd08      	pop	{r3, pc}
 800c002:	bd08      	pop	{r3, pc}

0800c004 <LCD_GetPalette>:
 800c004:	4b02      	ldr	r3, [pc, #8]	; (800c010 <LCD_GetPalette+0xc>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	7c58      	ldrb	r0, [r3, #17]
 800c00a:	f7ff bff1 	b.w	800bff0 <LCD_GetPaletteEx>
 800c00e:	bf00      	nop
 800c010:	20000084 	.word	0x20000084

0800c014 <GUI_GetpfIndex2ColorEx>:
 800c014:	4b02      	ldr	r3, [pc, #8]	; (800c020 <GUI_GetpfIndex2ColorEx+0xc>)
 800c016:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c01a:	691b      	ldr	r3, [r3, #16]
 800c01c:	6858      	ldr	r0, [r3, #4]
 800c01e:	4770      	bx	lr
 800c020:	20007738 	.word	0x20007738

0800c024 <LCD_GetpfColor2IndexEx>:
 800c024:	b508      	push	{r3, lr}
 800c026:	f001 f9f5 	bl	800d414 <GUI_DEVICE__GetpDriver>
 800c02a:	b108      	cbz	r0, 800c030 <LCD_GetpfColor2IndexEx+0xc>
 800c02c:	6903      	ldr	r3, [r0, #16]
 800c02e:	6818      	ldr	r0, [r3, #0]
 800c030:	bd08      	pop	{r3, pc}
	...

0800c034 <GUI_GetpfColor2IndexEx>:
 800c034:	4b02      	ldr	r3, [pc, #8]	; (800c040 <GUI_GetpfColor2IndexEx+0xc>)
 800c036:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	6818      	ldr	r0, [r3, #0]
 800c03e:	4770      	bx	lr
 800c040:	20007738 	.word	0x20007738

0800c044 <LCD_GetXSizeMax>:
 800c044:	2001      	movs	r0, #1
 800c046:	f7ff bf8c 	b.w	800bf62 <_GetMaxValue>

0800c04a <LCD_GetYSizeMax>:
 800c04a:	2002      	movs	r0, #2
 800c04c:	f7ff bf89 	b.w	800bf62 <_GetMaxValue>

0800c050 <LCD_GetVXSizeMax>:
 800c050:	2003      	movs	r0, #3
 800c052:	f7ff bf86 	b.w	800bf62 <_GetMaxValue>
	...

0800c058 <LCD_SetDisplaySize>:
 800c058:	4b02      	ldr	r3, [pc, #8]	; (800c064 <LCD_SetDisplaySize+0xc>)
 800c05a:	6018      	str	r0, [r3, #0]
 800c05c:	4b02      	ldr	r3, [pc, #8]	; (800c068 <LCD_SetDisplaySize+0x10>)
 800c05e:	6019      	str	r1, [r3, #0]
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	20002a20 	.word	0x20002a20
 800c068:	20002a1c 	.word	0x20002a1c

0800c06c <LCD_GetXSizeDisplay>:
 800c06c:	4b01      	ldr	r3, [pc, #4]	; (800c074 <LCD_GetXSizeDisplay+0x8>)
 800c06e:	6818      	ldr	r0, [r3, #0]
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	20002a20 	.word	0x20002a20

0800c078 <LCD_GetYSizeDisplay>:
 800c078:	4b01      	ldr	r3, [pc, #4]	; (800c080 <LCD_GetYSizeDisplay+0x8>)
 800c07a:	6818      	ldr	r0, [r3, #0]
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	20002a1c 	.word	0x20002a1c

0800c084 <LCD__GetBPP>:
 800c084:	2800      	cmp	r0, #0
 800c086:	d03b      	beq.n	800c100 <LCD__GetBPP+0x7c>
 800c088:	f030 0301 	bics.w	r3, r0, #1
 800c08c:	d029      	beq.n	800c0e2 <LCD__GetBPP+0x5e>
 800c08e:	f030 0303 	bics.w	r3, r0, #3
 800c092:	d028      	beq.n	800c0e6 <LCD__GetBPP+0x62>
 800c094:	f030 0307 	bics.w	r3, r0, #7
 800c098:	d027      	beq.n	800c0ea <LCD__GetBPP+0x66>
 800c09a:	f030 030f 	bics.w	r3, r0, #15
 800c09e:	d026      	beq.n	800c0ee <LCD__GetBPP+0x6a>
 800c0a0:	f030 031f 	bics.w	r3, r0, #31
 800c0a4:	d025      	beq.n	800c0f2 <LCD__GetBPP+0x6e>
 800c0a6:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800c0aa:	d024      	beq.n	800c0f6 <LCD__GetBPP+0x72>
 800c0ac:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800c0b0:	f023 0301 	bic.w	r3, r3, #1
 800c0b4:	b30b      	cbz	r3, 800c0fa <LCD__GetBPP+0x76>
 800c0b6:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800c0ba:	f023 030f 	bic.w	r3, r3, #15
 800c0be:	b1e3      	cbz	r3, 800c0fa <LCD__GetBPP+0x76>
 800c0c0:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800c0c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c0c8:	b1bb      	cbz	r3, 800c0fa <LCD__GetBPP+0x76>
 800c0ca:	0c03      	lsrs	r3, r0, #16
 800c0cc:	041b      	lsls	r3, r3, #16
 800c0ce:	b1a3      	cbz	r3, 800c0fa <LCD__GetBPP+0x76>
 800c0d0:	0c83      	lsrs	r3, r0, #18
 800c0d2:	049b      	lsls	r3, r3, #18
 800c0d4:	b19b      	cbz	r3, 800c0fe <LCD__GetBPP+0x7a>
 800c0d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c0da:	bf0c      	ite	eq
 800c0dc:	2018      	moveq	r0, #24
 800c0de:	2020      	movne	r0, #32
 800c0e0:	4770      	bx	lr
 800c0e2:	2001      	movs	r0, #1
 800c0e4:	4770      	bx	lr
 800c0e6:	2002      	movs	r0, #2
 800c0e8:	4770      	bx	lr
 800c0ea:	2003      	movs	r0, #3
 800c0ec:	4770      	bx	lr
 800c0ee:	2004      	movs	r0, #4
 800c0f0:	4770      	bx	lr
 800c0f2:	2005      	movs	r0, #5
 800c0f4:	4770      	bx	lr
 800c0f6:	2008      	movs	r0, #8
 800c0f8:	4770      	bx	lr
 800c0fa:	2010      	movs	r0, #16
 800c0fc:	4770      	bx	lr
 800c0fe:	2012      	movs	r0, #18
 800c100:	4770      	bx	lr

0800c102 <LCD__GetBPPDevice>:
 800c102:	b508      	push	{r3, lr}
 800c104:	f7ff ffbe 	bl	800c084 <LCD__GetBPP>
 800c108:	2801      	cmp	r0, #1
 800c10a:	d00f      	beq.n	800c12c <LCD__GetBPPDevice+0x2a>
 800c10c:	1e83      	subs	r3, r0, #2
 800c10e:	2b06      	cmp	r3, #6
 800c110:	d909      	bls.n	800c126 <LCD__GetBPPDevice+0x24>
 800c112:	f1a0 0309 	sub.w	r3, r0, #9
 800c116:	2b07      	cmp	r3, #7
 800c118:	d907      	bls.n	800c12a <LCD__GetBPPDevice+0x28>
 800c11a:	3811      	subs	r0, #17
 800c11c:	2810      	cmp	r0, #16
 800c11e:	bf34      	ite	cc
 800c120:	2020      	movcc	r0, #32
 800c122:	2000      	movcs	r0, #0
 800c124:	bd08      	pop	{r3, pc}
 800c126:	2008      	movs	r0, #8
 800c128:	bd08      	pop	{r3, pc}
 800c12a:	2010      	movs	r0, #16
 800c12c:	bd08      	pop	{r3, pc}
	...

0800c130 <_SetDrawMode>:
 800c130:	b570      	push	{r4, r5, r6, lr}
 800c132:	4b08      	ldr	r3, [pc, #32]	; (800c154 <_SetDrawMode+0x24>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	7c1a      	ldrb	r2, [r3, #16]
 800c138:	ea80 0102 	eor.w	r1, r0, r2
 800c13c:	0749      	lsls	r1, r1, #29
 800c13e:	d505      	bpl.n	800c14c <_SetDrawMode+0x1c>
 800c140:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800c142:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c144:	6826      	ldr	r6, [r4, #0]
 800c146:	680d      	ldr	r5, [r1, #0]
 800c148:	6025      	str	r5, [r4, #0]
 800c14a:	600e      	str	r6, [r1, #0]
 800c14c:	7418      	strb	r0, [r3, #16]
 800c14e:	4610      	mov	r0, r2
 800c150:	bd70      	pop	{r4, r5, r6, pc}
 800c152:	bf00      	nop
 800c154:	20000084 	.word	0x20000084

0800c158 <LCD_SetDrawMode>:
 800c158:	b508      	push	{r3, lr}
 800c15a:	4b02      	ldr	r3, [pc, #8]	; (800c164 <LCD_SetDrawMode+0xc>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	4798      	blx	r3
 800c162:	bd08      	pop	{r3, pc}
 800c164:	2000006c 	.word	0x2000006c

0800c168 <LCD_DrawPixel>:
 800c168:	b538      	push	{r3, r4, r5, lr}
 800c16a:	4b14      	ldr	r3, [pc, #80]	; (800c1bc <LCD_DrawPixel+0x54>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	460a      	mov	r2, r1
 800c170:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800c174:	428a      	cmp	r2, r1
 800c176:	4604      	mov	r4, r0
 800c178:	db1e      	blt.n	800c1b8 <LCD_DrawPixel+0x50>
 800c17a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800c17e:	428a      	cmp	r2, r1
 800c180:	dc1a      	bgt.n	800c1b8 <LCD_DrawPixel+0x50>
 800c182:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800c186:	4288      	cmp	r0, r1
 800c188:	db16      	blt.n	800c1b8 <LCD_DrawPixel+0x50>
 800c18a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800c18e:	4288      	cmp	r0, r1
 800c190:	dc12      	bgt.n	800c1b8 <LCD_DrawPixel+0x50>
 800c192:	7c19      	ldrb	r1, [r3, #16]
 800c194:	7c58      	ldrb	r0, [r3, #17]
 800c196:	f011 0f01 	tst.w	r1, #1
 800c19a:	4909      	ldr	r1, [pc, #36]	; (800c1c0 <LCD_DrawPixel+0x58>)
 800c19c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800c1a0:	d004      	beq.n	800c1ac <LCD_DrawPixel+0x44>
 800c1a2:	68c3      	ldr	r3, [r0, #12]
 800c1a4:	4621      	mov	r1, r4
 800c1a6:	69db      	ldr	r3, [r3, #28]
 800c1a8:	4798      	blx	r3
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}
 800c1ac:	68c1      	ldr	r1, [r0, #12]
 800c1ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b0:	698d      	ldr	r5, [r1, #24]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4621      	mov	r1, r4
 800c1b6:	47a8      	blx	r5
 800c1b8:	bd38      	pop	{r3, r4, r5, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20000084 	.word	0x20000084
 800c1c0:	20007738 	.word	0x20007738

0800c1c4 <LCD_DrawHLine>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4b10      	ldr	r3, [pc, #64]	; (800c208 <LCD_DrawHLine+0x44>)
 800c1c8:	681c      	ldr	r4, [r3, #0]
 800c1ca:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800c1ce:	4299      	cmp	r1, r3
 800c1d0:	460d      	mov	r5, r1
 800c1d2:	db17      	blt.n	800c204 <LCD_DrawHLine+0x40>
 800c1d4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800c1d8:	4299      	cmp	r1, r3
 800c1da:	dc13      	bgt.n	800c204 <LCD_DrawHLine+0x40>
 800c1dc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800c1e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1e4:	4288      	cmp	r0, r1
 800c1e6:	bfa8      	it	ge
 800c1e8:	4601      	movge	r1, r0
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	bfb8      	it	lt
 800c1ee:	4613      	movlt	r3, r2
 800c1f0:	428b      	cmp	r3, r1
 800c1f2:	db07      	blt.n	800c204 <LCD_DrawHLine+0x40>
 800c1f4:	7c60      	ldrb	r0, [r4, #17]
 800c1f6:	4a05      	ldr	r2, [pc, #20]	; (800c20c <LCD_DrawHLine+0x48>)
 800c1f8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800c1fc:	68c2      	ldr	r2, [r0, #12]
 800c1fe:	6894      	ldr	r4, [r2, #8]
 800c200:	462a      	mov	r2, r5
 800c202:	47a0      	blx	r4
 800c204:	bd38      	pop	{r3, r4, r5, pc}
 800c206:	bf00      	nop
 800c208:	20000084 	.word	0x20000084
 800c20c:	20007738 	.word	0x20007738

0800c210 <LCD_DrawVLine>:
 800c210:	b538      	push	{r3, r4, r5, lr}
 800c212:	4b10      	ldr	r3, [pc, #64]	; (800c254 <LCD_DrawVLine+0x44>)
 800c214:	681c      	ldr	r4, [r3, #0]
 800c216:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800c21a:	4605      	mov	r5, r0
 800c21c:	429d      	cmp	r5, r3
 800c21e:	4610      	mov	r0, r2
 800c220:	db17      	blt.n	800c252 <LCD_DrawVLine+0x42>
 800c222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c226:	429d      	cmp	r5, r3
 800c228:	dc13      	bgt.n	800c252 <LCD_DrawVLine+0x42>
 800c22a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800c22e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800c232:	4291      	cmp	r1, r2
 800c234:	bfa8      	it	ge
 800c236:	460a      	movge	r2, r1
 800c238:	4298      	cmp	r0, r3
 800c23a:	bfb8      	it	lt
 800c23c:	4603      	movlt	r3, r0
 800c23e:	4293      	cmp	r3, r2
 800c240:	db07      	blt.n	800c252 <LCD_DrawVLine+0x42>
 800c242:	7c60      	ldrb	r0, [r4, #17]
 800c244:	4904      	ldr	r1, [pc, #16]	; (800c258 <LCD_DrawVLine+0x48>)
 800c246:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800c24a:	68c1      	ldr	r1, [r0, #12]
 800c24c:	68cc      	ldr	r4, [r1, #12]
 800c24e:	4629      	mov	r1, r5
 800c250:	47a0      	blx	r4
 800c252:	bd38      	pop	{r3, r4, r5, pc}
 800c254:	20000084 	.word	0x20000084
 800c258:	20007738 	.word	0x20007738

0800c25c <LCD_FillRect>:
 800c25c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c25e:	460e      	mov	r6, r1
 800c260:	4912      	ldr	r1, [pc, #72]	; (800c2ac <LCD_FillRect+0x50>)
 800c262:	680c      	ldr	r4, [r1, #0]
 800c264:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800c268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c26c:	4288      	cmp	r0, r1
 800c26e:	bfa8      	it	ge
 800c270:	4601      	movge	r1, r0
 800c272:	42aa      	cmp	r2, r5
 800c274:	bfb8      	it	lt
 800c276:	4615      	movlt	r5, r2
 800c278:	428d      	cmp	r5, r1
 800c27a:	db14      	blt.n	800c2a6 <LCD_FillRect+0x4a>
 800c27c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800c280:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800c284:	4296      	cmp	r6, r2
 800c286:	bfa8      	it	ge
 800c288:	4632      	movge	r2, r6
 800c28a:	4283      	cmp	r3, r0
 800c28c:	bfa8      	it	ge
 800c28e:	4603      	movge	r3, r0
 800c290:	4293      	cmp	r3, r2
 800c292:	db08      	blt.n	800c2a6 <LCD_FillRect+0x4a>
 800c294:	7c64      	ldrb	r4, [r4, #17]
 800c296:	4806      	ldr	r0, [pc, #24]	; (800c2b0 <LCD_FillRect+0x54>)
 800c298:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c29c:	68c4      	ldr	r4, [r0, #12]
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	6924      	ldr	r4, [r4, #16]
 800c2a2:	462b      	mov	r3, r5
 800c2a4:	47a0      	blx	r4
 800c2a6:	b002      	add	sp, #8
 800c2a8:	bd70      	pop	{r4, r5, r6, pc}
 800c2aa:	bf00      	nop
 800c2ac:	20000084 	.word	0x20000084
 800c2b0:	20007738 	.word	0x20007738

0800c2b4 <LCD__DrawBitmap_1bpp>:
 800c2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b8:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800c468 <LCD__DrawBitmap_1bpp+0x1b4>
 800c2bc:	b08f      	sub	sp, #60	; 0x3c
 800c2be:	f8dc c000 	ldr.w	ip, [ip]
 800c2c2:	9009      	str	r0, [sp, #36]	; 0x24
 800c2c4:	460e      	mov	r6, r1
 800c2c6:	4615      	mov	r5, r2
 800c2c8:	469b      	mov	fp, r3
 800c2ca:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c2cc:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800c2d0:	f1bc 0f00 	cmp.w	ip, #0
 800c2d4:	d00d      	beq.n	800c2f2 <LCD__DrawBitmap_1bpp+0x3e>
 800c2d6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800c2d8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c2da:	9500      	str	r5, [sp, #0]
 800c2dc:	9601      	str	r6, [sp, #4]
 800c2de:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c2e0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c2e2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c2e4:	9702      	str	r7, [sp, #8]
 800c2e6:	9503      	str	r5, [sp, #12]
 800c2e8:	9404      	str	r4, [sp, #16]
 800c2ea:	9605      	str	r6, [sp, #20]
 800c2ec:	f8dc 4000 	ldr.w	r4, [ip]
 800c2f0:	e053      	b.n	800c39a <LCD__DrawBitmap_1bpp+0xe6>
 800c2f2:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800c2f4:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c2f6:	ea47 0300 	orr.w	r3, r7, r0
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d14f      	bne.n	800c39e <LCD__DrawBitmap_1bpp+0xea>
 800c2fe:	4b58      	ldr	r3, [pc, #352]	; (800c460 <LCD__DrawBitmap_1bpp+0x1ac>)
 800c300:	6818      	ldr	r0, [r3, #0]
 800c302:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800c306:	1a51      	subs	r1, r2, r1
 800c308:	2900      	cmp	r1, #0
 800c30a:	dd08      	ble.n	800c31e <LCD__DrawBitmap_1bpp+0x6a>
 800c30c:	ebc1 030b 	rsb	r3, r1, fp
 800c310:	2b00      	cmp	r3, #0
 800c312:	f340 80a2 	ble.w	800c45a <LCD__DrawBitmap_1bpp+0x1a6>
 800c316:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c318:	fb07 4401 	mla	r4, r7, r1, r4
 800c31c:	e001      	b.n	800c322 <LCD__DrawBitmap_1bpp+0x6e>
 800c31e:	465b      	mov	r3, fp
 800c320:	4632      	mov	r2, r6
 800c322:	445e      	add	r6, fp
 800c324:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800c328:	3e01      	subs	r6, #1
 800c32a:	1a76      	subs	r6, r6, r1
 800c32c:	2e00      	cmp	r6, #0
 800c32e:	dd03      	ble.n	800c338 <LCD__DrawBitmap_1bpp+0x84>
 800c330:	1b9b      	subs	r3, r3, r6
 800c332:	2b00      	cmp	r3, #0
 800c334:	f340 8091 	ble.w	800c45a <LCD__DrawBitmap_1bpp+0x1a6>
 800c338:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c33a:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800c33e:	4429      	add	r1, r5
 800c340:	3901      	subs	r1, #1
 800c342:	1b89      	subs	r1, r1, r6
 800c344:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c346:	2900      	cmp	r1, #0
 800c348:	bfc8      	it	gt
 800c34a:	ebc1 0505 	rsbgt	r5, r1, r5
 800c34e:	ebc8 0106 	rsb	r1, r8, r6
 800c352:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800c356:	42b1      	cmp	r1, r6
 800c358:	da0c      	bge.n	800c374 <LCD__DrawBitmap_1bpp+0xc0>
 800c35a:	ebc1 0c06 	rsb	ip, r1, r6
 800c35e:	eb08 070c 	add.w	r7, r8, ip
 800c362:	1b8e      	subs	r6, r1, r6
 800c364:	f02c 0c07 	bic.w	ip, ip, #7
 800c368:	4435      	add	r5, r6
 800c36a:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 800c36e:	4461      	add	r1, ip
 800c370:	f007 0807 	and.w	r8, r7, #7
 800c374:	2d00      	cmp	r5, #0
 800c376:	dd70      	ble.n	800c45a <LCD__DrawBitmap_1bpp+0x1a6>
 800c378:	7c46      	ldrb	r6, [r0, #17]
 800c37a:	483a      	ldr	r0, [pc, #232]	; (800c464 <LCD__DrawBitmap_1bpp+0x1b0>)
 800c37c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c37e:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800c382:	68c6      	ldr	r6, [r0, #12]
 800c384:	9701      	str	r7, [sp, #4]
 800c386:	9403      	str	r4, [sp, #12]
 800c388:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c38a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800c38c:	9300      	str	r3, [sp, #0]
 800c38e:	9702      	str	r7, [sp, #8]
 800c390:	f8cd 8010 	str.w	r8, [sp, #16]
 800c394:	9405      	str	r4, [sp, #20]
 800c396:	6874      	ldr	r4, [r6, #4]
 800c398:	462b      	mov	r3, r5
 800c39a:	47a0      	blx	r4
 800c39c:	e05d      	b.n	800c45a <LCD__DrawBitmap_1bpp+0x1a6>
 800c39e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c3a0:	f1c7 0708 	rsb	r7, r7, #8
 800c3a4:	970c      	str	r7, [sp, #48]	; 0x30
 800c3a6:	4667      	mov	r7, ip
 800c3a8:	45dc      	cmp	ip, fp
 800c3aa:	da56      	bge.n	800c45a <LCD__DrawBitmap_1bpp+0x1a6>
 800c3ac:	4b2c      	ldr	r3, [pc, #176]	; (800c460 <LCD__DrawBitmap_1bpp+0x1ac>)
 800c3ae:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4430      	add	r0, r6
 800c3b4:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800c3b8:	900a      	str	r0, [sp, #40]	; 0x28
 800c3ba:	1e41      	subs	r1, r0, #1
 800c3bc:	4291      	cmp	r1, r2
 800c3be:	910b      	str	r1, [sp, #44]	; 0x2c
 800c3c0:	db45      	blt.n	800c44e <LCD__DrawBitmap_1bpp+0x19a>
 800c3c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c3c6:	429e      	cmp	r6, r3
 800c3c8:	dc41      	bgt.n	800c44e <LCD__DrawBitmap_1bpp+0x19a>
 800c3ca:	f04f 0800 	mov.w	r8, #0
 800c3ce:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c3d2:	9408      	str	r4, [sp, #32]
 800c3d4:	46c2      	mov	sl, r8
 800c3d6:	45aa      	cmp	sl, r5
 800c3d8:	da39      	bge.n	800c44e <LCD__DrawBitmap_1bpp+0x19a>
 800c3da:	f1b8 0f00 	cmp.w	r8, #0
 800c3de:	d105      	bne.n	800c3ec <LCD__DrawBitmap_1bpp+0x138>
 800c3e0:	9a08      	ldr	r2, [sp, #32]
 800c3e2:	7817      	ldrb	r7, [r2, #0]
 800c3e4:	3201      	adds	r2, #1
 800c3e6:	9208      	str	r2, [sp, #32]
 800c3e8:	f04f 0808 	mov.w	r8, #8
 800c3ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c3ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c3f0:	4a1b      	ldr	r2, [pc, #108]	; (800c460 <LCD__DrawBitmap_1bpp+0x1ac>)
 800c3f2:	fa47 f300 	asr.w	r3, r7, r0
 800c3f6:	ebc1 0808 	rsb	r8, r1, r8
 800c3fa:	408f      	lsls	r7, r1
 800c3fc:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800c400:	b2ff      	uxtb	r7, r7
 800c402:	d103      	bne.n	800c40c <LCD__DrawBitmap_1bpp+0x158>
 800c404:	6810      	ldr	r0, [r2, #0]
 800c406:	7c00      	ldrb	r0, [r0, #16]
 800c408:	0780      	lsls	r0, r0, #30
 800c40a:	d41b      	bmi.n	800c444 <LCD__DrawBitmap_1bpp+0x190>
 800c40c:	6812      	ldr	r2, [r2, #0]
 800c40e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c410:	6810      	ldr	r0, [r2, #0]
 800c412:	900d      	str	r0, [sp, #52]	; 0x34
 800c414:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c416:	b110      	cbz	r0, 800c41e <LCD__DrawBitmap_1bpp+0x16a>
 800c418:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c41c:	e000      	b.n	800c420 <LCD__DrawBitmap_1bpp+0x16c>
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c422:	6013      	str	r3, [r2, #0]
 800c424:	1e4a      	subs	r2, r1, #1
 800c426:	444a      	add	r2, r9
 800c428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c42a:	f8cd c01c 	str.w	ip, [sp, #28]
 800c42e:	4648      	mov	r0, r9
 800c430:	4631      	mov	r1, r6
 800c432:	f7ff ff13 	bl	800c25c <LCD_FillRect>
 800c436:	4b0a      	ldr	r3, [pc, #40]	; (800c460 <LCD__DrawBitmap_1bpp+0x1ac>)
 800c438:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c442:	601a      	str	r2, [r3, #0]
 800c444:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c446:	f10a 0a01 	add.w	sl, sl, #1
 800c44a:	4499      	add	r9, r3
 800c44c:	e7c3      	b.n	800c3d6 <LCD__DrawBitmap_1bpp+0x122>
 800c44e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c450:	f10c 0c01 	add.w	ip, ip, #1
 800c454:	4434      	add	r4, r6
 800c456:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c458:	e7a6      	b.n	800c3a8 <LCD__DrawBitmap_1bpp+0xf4>
 800c45a:	b00f      	add	sp, #60	; 0x3c
 800c45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c460:	20000084 	.word	0x20000084
 800c464:	20007738 	.word	0x20007738
 800c468:	200076f0 	.word	0x200076f0

0800c46c <LCD_DrawBitmap>:
 800c46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c470:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800c680 <LCD_DrawBitmap+0x214>
 800c474:	b091      	sub	sp, #68	; 0x44
 800c476:	f8dc 9000 	ldr.w	r9, [ip]
 800c47a:	9207      	str	r2, [sp, #28]
 800c47c:	4605      	mov	r5, r0
 800c47e:	4688      	mov	r8, r1
 800c480:	469b      	mov	fp, r3
 800c482:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800c484:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800c486:	f1b9 0f00 	cmp.w	r9, #0
 800c48a:	d00c      	beq.n	800c4a6 <LCD_DrawBitmap+0x3a>
 800c48c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c48e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c490:	9500      	str	r5, [sp, #0]
 800c492:	9701      	str	r7, [sp, #4]
 800c494:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c496:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c498:	9602      	str	r6, [sp, #8]
 800c49a:	9503      	str	r5, [sp, #12]
 800c49c:	9404      	str	r4, [sp, #16]
 800c49e:	9705      	str	r7, [sp, #20]
 800c4a0:	f8d9 4000 	ldr.w	r4, [r9]
 800c4a4:	e081      	b.n	800c5aa <LCD_DrawBitmap+0x13e>
 800c4a6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c4a8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c4aa:	ea47 0300 	orr.w	r3, r7, r0
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d17d      	bne.n	800c5ae <LCD_DrawBitmap+0x142>
 800c4b2:	4b71      	ldr	r3, [pc, #452]	; (800c678 <LCD_DrawBitmap+0x20c>)
 800c4b4:	6818      	ldr	r0, [r3, #0]
 800c4b6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800c4ba:	1a53      	subs	r3, r2, r1
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	dd08      	ble.n	800c4d2 <LCD_DrawBitmap+0x66>
 800c4c0:	ebc3 010b 	rsb	r1, r3, fp
 800c4c4:	2900      	cmp	r1, #0
 800c4c6:	f340 80d4 	ble.w	800c672 <LCD_DrawBitmap+0x206>
 800c4ca:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c4cc:	fb07 4403 	mla	r4, r7, r3, r4
 800c4d0:	e001      	b.n	800c4d6 <LCD_DrawBitmap+0x6a>
 800c4d2:	4659      	mov	r1, fp
 800c4d4:	4642      	mov	r2, r8
 800c4d6:	44d8      	add	r8, fp
 800c4d8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800c4dc:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4e0:	ebc3 0808 	rsb	r8, r3, r8
 800c4e4:	f1b8 0f00 	cmp.w	r8, #0
 800c4e8:	dd04      	ble.n	800c4f4 <LCD_DrawBitmap+0x88>
 800c4ea:	ebc8 0101 	rsb	r1, r8, r1
 800c4ee:	2900      	cmp	r1, #0
 800c4f0:	f340 80bf 	ble.w	800c672 <LCD_DrawBitmap+0x206>
 800c4f4:	9b07      	ldr	r3, [sp, #28]
 800c4f6:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800c4fa:	442b      	add	r3, r5
 800c4fc:	3b01      	subs	r3, #1
 800c4fe:	ebcc 0303 	rsb	r3, ip, r3
 800c502:	2b00      	cmp	r3, #0
 800c504:	dd02      	ble.n	800c50c <LCD_DrawBitmap+0xa0>
 800c506:	9f07      	ldr	r7, [sp, #28]
 800c508:	1aff      	subs	r7, r7, r3
 800c50a:	9707      	str	r7, [sp, #28]
 800c50c:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800c510:	4565      	cmp	r5, ip
 800c512:	da33      	bge.n	800c57c <LCD_DrawBitmap+0x110>
 800c514:	9f07      	ldr	r7, [sp, #28]
 800c516:	ebc5 030c 	rsb	r3, r5, ip
 800c51a:	1aff      	subs	r7, r7, r3
 800c51c:	2e08      	cmp	r6, #8
 800c51e:	9707      	str	r7, [sp, #28]
 800c520:	d027      	beq.n	800c572 <LCD_DrawBitmap+0x106>
 800c522:	dc0d      	bgt.n	800c540 <LCD_DrawBitmap+0xd4>
 800c524:	2e02      	cmp	r6, #2
 800c526:	d014      	beq.n	800c552 <LCD_DrawBitmap+0xe6>
 800c528:	2e04      	cmp	r6, #4
 800c52a:	d01a      	beq.n	800c562 <LCD_DrawBitmap+0xf6>
 800c52c:	2e01      	cmp	r6, #1
 800c52e:	d126      	bne.n	800c57e <LCD_DrawBitmap+0x112>
 800c530:	f023 0c07 	bic.w	ip, r3, #7
 800c534:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800c538:	4465      	add	r5, ip
 800c53a:	f003 0307 	and.w	r3, r3, #7
 800c53e:	e01e      	b.n	800c57e <LCD_DrawBitmap+0x112>
 800c540:	2e18      	cmp	r6, #24
 800c542:	d018      	beq.n	800c576 <LCD_DrawBitmap+0x10a>
 800c544:	2e20      	cmp	r6, #32
 800c546:	d016      	beq.n	800c576 <LCD_DrawBitmap+0x10a>
 800c548:	2e10      	cmp	r6, #16
 800c54a:	d118      	bne.n	800c57e <LCD_DrawBitmap+0x112>
 800c54c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800c550:	e013      	b.n	800c57a <LCD_DrawBitmap+0x10e>
 800c552:	f023 0c03 	bic.w	ip, r3, #3
 800c556:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800c55a:	4465      	add	r5, ip
 800c55c:	f003 0303 	and.w	r3, r3, #3
 800c560:	e00d      	b.n	800c57e <LCD_DrawBitmap+0x112>
 800c562:	f023 0c01 	bic.w	ip, r3, #1
 800c566:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800c56a:	4465      	add	r5, ip
 800c56c:	f003 0301 	and.w	r3, r3, #1
 800c570:	e005      	b.n	800c57e <LCD_DrawBitmap+0x112>
 800c572:	441c      	add	r4, r3
 800c574:	e001      	b.n	800c57a <LCD_DrawBitmap+0x10e>
 800c576:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c57a:	4665      	mov	r5, ip
 800c57c:	2300      	movs	r3, #0
 800c57e:	9f07      	ldr	r7, [sp, #28]
 800c580:	2f00      	cmp	r7, #0
 800c582:	dd76      	ble.n	800c672 <LCD_DrawBitmap+0x206>
 800c584:	f890 e011 	ldrb.w	lr, [r0, #17]
 800c588:	483c      	ldr	r0, [pc, #240]	; (800c67c <LCD_DrawBitmap+0x210>)
 800c58a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c58c:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 800c590:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800c594:	9403      	str	r4, [sp, #12]
 800c596:	e88d 0042 	stmia.w	sp, {r1, r6}
 800c59a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800c59c:	9304      	str	r3, [sp, #16]
 800c59e:	9702      	str	r7, [sp, #8]
 800c5a0:	9405      	str	r4, [sp, #20]
 800c5a2:	f8de 4004 	ldr.w	r4, [lr, #4]
 800c5a6:	9b07      	ldr	r3, [sp, #28]
 800c5a8:	4629      	mov	r1, r5
 800c5aa:	47a0      	blx	r4
 800c5ac:	e061      	b.n	800c672 <LCD_DrawBitmap+0x206>
 800c5ae:	f1c6 0708 	rsb	r7, r6, #8
 800c5b2:	970e      	str	r7, [sp, #56]	; 0x38
 800c5b4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800c5b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c5ba:	455f      	cmp	r7, fp
 800c5bc:	da59      	bge.n	800c672 <LCD_DrawBitmap+0x206>
 800c5be:	4b2e      	ldr	r3, [pc, #184]	; (800c678 <LCD_DrawBitmap+0x20c>)
 800c5c0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4447      	add	r7, r8
 800c5c6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800c5ca:	970c      	str	r7, [sp, #48]	; 0x30
 800c5cc:	3f01      	subs	r7, #1
 800c5ce:	4297      	cmp	r7, r2
 800c5d0:	970d      	str	r7, [sp, #52]	; 0x34
 800c5d2:	db46      	blt.n	800c662 <LCD_DrawBitmap+0x1f6>
 800c5d4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c5d8:	4598      	cmp	r8, r3
 800c5da:	dc42      	bgt.n	800c662 <LCD_DrawBitmap+0x1f6>
 800c5dc:	f04f 0a00 	mov.w	sl, #0
 800c5e0:	940b      	str	r4, [sp, #44]	; 0x2c
 800c5e2:	46ac      	mov	ip, r5
 800c5e4:	4657      	mov	r7, sl
 800c5e6:	9807      	ldr	r0, [sp, #28]
 800c5e8:	4287      	cmp	r7, r0
 800c5ea:	da3a      	bge.n	800c662 <LCD_DrawBitmap+0x1f6>
 800c5ec:	f1ba 0f00 	cmp.w	sl, #0
 800c5f0:	d106      	bne.n	800c600 <LCD_DrawBitmap+0x194>
 800c5f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c5f4:	f890 9000 	ldrb.w	r9, [r0]
 800c5f8:	3001      	adds	r0, #1
 800c5fa:	900b      	str	r0, [sp, #44]	; 0x2c
 800c5fc:	f04f 0a08 	mov.w	sl, #8
 800c600:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c602:	4a1d      	ldr	r2, [pc, #116]	; (800c678 <LCD_DrawBitmap+0x20c>)
 800c604:	fa49 f301 	asr.w	r3, r9, r1
 800c608:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800c60c:	fa09 f906 	lsl.w	r9, r9, r6
 800c610:	fa5f f989 	uxtb.w	r9, r9
 800c614:	ebc6 0a0a 	rsb	sl, r6, sl
 800c618:	d103      	bne.n	800c622 <LCD_DrawBitmap+0x1b6>
 800c61a:	6810      	ldr	r0, [r2, #0]
 800c61c:	7c00      	ldrb	r0, [r0, #16]
 800c61e:	0780      	lsls	r0, r0, #30
 800c620:	d41b      	bmi.n	800c65a <LCD_DrawBitmap+0x1ee>
 800c622:	6812      	ldr	r2, [r2, #0]
 800c624:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c626:	6810      	ldr	r0, [r2, #0]
 800c628:	900f      	str	r0, [sp, #60]	; 0x3c
 800c62a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800c62c:	b110      	cbz	r0, 800c634 <LCD_DrawBitmap+0x1c8>
 800c62e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c632:	e000      	b.n	800c636 <LCD_DrawBitmap+0x1ca>
 800c634:	b2db      	uxtb	r3, r3
 800c636:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c638:	6013      	str	r3, [r2, #0]
 800c63a:	1e4a      	subs	r2, r1, #1
 800c63c:	4462      	add	r2, ip
 800c63e:	4660      	mov	r0, ip
 800c640:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c642:	f8cd c020 	str.w	ip, [sp, #32]
 800c646:	4641      	mov	r1, r8
 800c648:	f7ff fe08 	bl	800c25c <LCD_FillRect>
 800c64c:	4b0a      	ldr	r3, [pc, #40]	; (800c678 <LCD_DrawBitmap+0x20c>)
 800c64e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c658:	601a      	str	r2, [r3, #0]
 800c65a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c65c:	3701      	adds	r7, #1
 800c65e:	449c      	add	ip, r3
 800c660:	e7c1      	b.n	800c5e6 <LCD_DrawBitmap+0x17a>
 800c662:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c664:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800c668:	3701      	adds	r7, #1
 800c66a:	970a      	str	r7, [sp, #40]	; 0x28
 800c66c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c66e:	443c      	add	r4, r7
 800c670:	e7a2      	b.n	800c5b8 <LCD_DrawBitmap+0x14c>
 800c672:	b011      	add	sp, #68	; 0x44
 800c674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c678:	20000084 	.word	0x20000084
 800c67c:	20007738 	.word	0x20007738
 800c680:	200076f0 	.word	0x200076f0

0800c684 <LCD_SetClipRectMax>:
 800c684:	b508      	push	{r3, lr}
 800c686:	4b05      	ldr	r3, [pc, #20]	; (800c69c <LCD_SetClipRectMax+0x18>)
 800c688:	6819      	ldr	r1, [r3, #0]
 800c68a:	4b05      	ldr	r3, [pc, #20]	; (800c6a0 <LCD_SetClipRectMax+0x1c>)
 800c68c:	7c4a      	ldrb	r2, [r1, #17]
 800c68e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c692:	68c3      	ldr	r3, [r0, #12]
 800c694:	3108      	adds	r1, #8
 800c696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c698:	4798      	blx	r3
 800c69a:	bd08      	pop	{r3, pc}
 800c69c:	20000084 	.word	0x20000084
 800c6a0:	20007738 	.word	0x20007738

0800c6a4 <emWin_LCD_Init>:
 800c6a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6a6:	f7ff ffed 	bl	800c684 <LCD_SetClipRectMax>
 800c6aa:	f004 fe6f 	bl	801138c <LCD_InitColors>
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d145      	bne.n	800c740 <emWin_LCD_Init+0x9c>
 800c6b4:	4605      	mov	r5, r0
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	f000 feac 	bl	800d414 <GUI_DEVICE__GetpDriver>
 800c6bc:	9001      	str	r0, [sp, #4]
 800c6be:	b150      	cbz	r0, 800c6d6 <emWin_LCD_Init+0x32>
 800c6c0:	68c3      	ldr	r3, [r0, #12]
 800c6c2:	210c      	movs	r1, #12
 800c6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c6:	a801      	add	r0, sp, #4
 800c6c8:	4798      	blx	r3
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	d035      	beq.n	800c73c <emWin_LCD_Init+0x98>
 800c6d0:	9801      	ldr	r0, [sp, #4]
 800c6d2:	4798      	blx	r3
 800c6d4:	4304      	orrs	r4, r0
 800c6d6:	3501      	adds	r5, #1
 800c6d8:	2d02      	cmp	r5, #2
 800c6da:	d1ec      	bne.n	800c6b6 <emWin_LCD_Init+0x12>
 800c6dc:	bb84      	cbnz	r4, 800c740 <emWin_LCD_Init+0x9c>
 800c6de:	f004 fe71 	bl	80113c4 <LCD_InitLUT>
 800c6e2:	4b19      	ldr	r3, [pc, #100]	; (800c748 <emWin_LCD_Init+0xa4>)
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d101      	bne.n	800c6f2 <emWin_LCD_Init+0x4e>
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	e027      	b.n	800c742 <emWin_LCD_Init+0x9e>
 800c6f2:	2401      	movs	r4, #1
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f000 fe8d 	bl	800d414 <GUI_DEVICE__GetpDriver>
 800c6fa:	9001      	str	r0, [sp, #4]
 800c6fc:	b1d0      	cbz	r0, 800c734 <emWin_LCD_Init+0x90>
 800c6fe:	4620      	mov	r0, r4
 800c700:	f000 fcd2 	bl	800d0a8 <GUI_SelectLayer>
 800c704:	2004      	movs	r0, #4
 800c706:	f7ff fd27 	bl	800c158 <LCD_SetDrawMode>
 800c70a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800c70e:	2000      	movs	r0, #0
 800c710:	4601      	mov	r1, r0
 800c712:	4613      	mov	r3, r2
 800c714:	f7ff fda2 	bl	800c25c <LCD_FillRect>
 800c718:	2000      	movs	r0, #0
 800c71a:	f7ff fd1d 	bl	800c158 <LCD_SetDrawMode>
 800c71e:	a802      	add	r0, sp, #8
 800c720:	210e      	movs	r1, #14
 800c722:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c72a:	4798      	blx	r3
 800c72c:	4603      	mov	r3, r0
 800c72e:	b108      	cbz	r0, 800c734 <emWin_LCD_Init+0x90>
 800c730:	9801      	ldr	r0, [sp, #4]
 800c732:	4798      	blx	r3
 800c734:	f114 34ff 	adds.w	r4, r4, #4294967295
 800c738:	d2dc      	bcs.n	800c6f4 <emWin_LCD_Init+0x50>
 800c73a:	e7d8      	b.n	800c6ee <emWin_LCD_Init+0x4a>
 800c73c:	2001      	movs	r0, #1
 800c73e:	e000      	b.n	800c742 <emWin_LCD_Init+0x9e>
 800c740:	4620      	mov	r0, r4
 800c742:	b003      	add	sp, #12
 800c744:	bd30      	pop	{r4, r5, pc}
 800c746:	bf00      	nop
 800c748:	20002ac8 	.word	0x20002ac8

0800c74c <LCD_Color2Index>:
 800c74c:	b508      	push	{r3, lr}
 800c74e:	4b05      	ldr	r3, [pc, #20]	; (800c764 <LCD_Color2Index+0x18>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	7c5a      	ldrb	r2, [r3, #17]
 800c754:	4b04      	ldr	r3, [pc, #16]	; (800c768 <LCD_Color2Index+0x1c>)
 800c756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c75a:	691b      	ldr	r3, [r3, #16]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4798      	blx	r3
 800c760:	bd08      	pop	{r3, pc}
 800c762:	bf00      	nop
 800c764:	20000084 	.word	0x20000084
 800c768:	20007738 	.word	0x20007738

0800c76c <LCD_Index2Color>:
 800c76c:	b508      	push	{r3, lr}
 800c76e:	4b05      	ldr	r3, [pc, #20]	; (800c784 <LCD_Index2Color+0x18>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	7c5a      	ldrb	r2, [r3, #17]
 800c774:	4b04      	ldr	r3, [pc, #16]	; (800c788 <LCD_Index2Color+0x1c>)
 800c776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c77a:	691b      	ldr	r3, [r3, #16]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	4798      	blx	r3
 800c780:	bd08      	pop	{r3, pc}
 800c782:	bf00      	nop
 800c784:	20000084 	.word	0x20000084
 800c788:	20007738 	.word	0x20007738

0800c78c <LCD_SetColorIndex>:
 800c78c:	4b04      	ldr	r3, [pc, #16]	; (800c7a0 <LCD_SetColorIndex+0x14>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	7c1a      	ldrb	r2, [r3, #16]
 800c792:	0752      	lsls	r2, r2, #29
 800c794:	bf4c      	ite	mi
 800c796:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800c798:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800c79a:	6018      	str	r0, [r3, #0]
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	20000084 	.word	0x20000084

0800c7a4 <_SetColor>:
 800c7a4:	b508      	push	{r3, lr}
 800c7a6:	4b06      	ldr	r3, [pc, #24]	; (800c7c0 <_SetColor+0x1c>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c7ac:	4281      	cmp	r1, r0
 800c7ae:	d006      	beq.n	800c7be <_SetColor+0x1a>
 800c7b0:	6318      	str	r0, [r3, #48]	; 0x30
 800c7b2:	f7ff ffcb 	bl	800c74c <LCD_Color2Index>
 800c7b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c7ba:	f7ff bfe7 	b.w	800c78c <LCD_SetColorIndex>
 800c7be:	bd08      	pop	{r3, pc}
 800c7c0:	20000084 	.word	0x20000084

0800c7c4 <LCD_SetBkColorIndex>:
 800c7c4:	4b04      	ldr	r3, [pc, #16]	; (800c7d8 <LCD_SetBkColorIndex+0x14>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	7c1a      	ldrb	r2, [r3, #16]
 800c7ca:	0752      	lsls	r2, r2, #29
 800c7cc:	bf4c      	ite	mi
 800c7ce:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800c7d0:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800c7d2:	6018      	str	r0, [r3, #0]
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop
 800c7d8:	20000084 	.word	0x20000084

0800c7dc <_SetBkColor>:
 800c7dc:	b508      	push	{r3, lr}
 800c7de:	4b06      	ldr	r3, [pc, #24]	; (800c7f8 <_SetBkColor+0x1c>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c7e4:	4281      	cmp	r1, r0
 800c7e6:	d006      	beq.n	800c7f6 <_SetBkColor+0x1a>
 800c7e8:	6358      	str	r0, [r3, #52]	; 0x34
 800c7ea:	f7ff ffaf 	bl	800c74c <LCD_Color2Index>
 800c7ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c7f2:	f7ff bfe7 	b.w	800c7c4 <LCD_SetBkColorIndex>
 800c7f6:	bd08      	pop	{r3, pc}
 800c7f8:	20000084 	.word	0x20000084

0800c7fc <LCD_SetBkColor>:
 800c7fc:	b508      	push	{r3, lr}
 800c7fe:	4b02      	ldr	r3, [pc, #8]	; (800c808 <LCD_SetBkColor+0xc>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	4798      	blx	r3
 800c806:	bd08      	pop	{r3, pc}
 800c808:	2000006c 	.word	0x2000006c

0800c80c <LCD_SetColor>:
 800c80c:	b508      	push	{r3, lr}
 800c80e:	4b02      	ldr	r3, [pc, #8]	; (800c818 <LCD_SetColor+0xc>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4798      	blx	r3
 800c816:	bd08      	pop	{r3, pc}
 800c818:	2000006c 	.word	0x2000006c

0800c81c <GUI__HandleEOLine>:
 800c81c:	b513      	push	{r0, r1, r4, lr}
 800c81e:	6802      	ldr	r2, [r0, #0]
 800c820:	4604      	mov	r4, r0
 800c822:	a802      	add	r0, sp, #8
 800c824:	f840 2d04 	str.w	r2, [r0, #-4]!
 800c828:	f000 fb62 	bl	800cef0 <GUI_UC__GetCharCodeInc>
 800c82c:	b2c0      	uxtb	r0, r0
 800c82e:	b120      	cbz	r0, 800c83a <GUI__HandleEOLine+0x1e>
 800c830:	280a      	cmp	r0, #10
 800c832:	d104      	bne.n	800c83e <GUI__HandleEOLine+0x22>
 800c834:	9b01      	ldr	r3, [sp, #4]
 800c836:	6023      	str	r3, [r4, #0]
 800c838:	e001      	b.n	800c83e <GUI__HandleEOLine+0x22>
 800c83a:	2001      	movs	r0, #1
 800c83c:	e000      	b.n	800c840 <GUI__HandleEOLine+0x24>
 800c83e:	2000      	movs	r0, #0
 800c840:	b002      	add	sp, #8
 800c842:	bd10      	pop	{r4, pc}

0800c844 <GUI__IntersectRect>:
 800c844:	880b      	ldrh	r3, [r1, #0]
 800c846:	b510      	push	{r4, lr}
 800c848:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c84c:	b21a      	sxth	r2, r3
 800c84e:	4294      	cmp	r4, r2
 800c850:	bfb8      	it	lt
 800c852:	8003      	strhlt	r3, [r0, #0]
 800c854:	884b      	ldrh	r3, [r1, #2]
 800c856:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800c85a:	b21a      	sxth	r2, r3
 800c85c:	4294      	cmp	r4, r2
 800c85e:	bfb8      	it	lt
 800c860:	8043      	strhlt	r3, [r0, #2]
 800c862:	888b      	ldrh	r3, [r1, #4]
 800c864:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800c868:	b21a      	sxth	r2, r3
 800c86a:	4294      	cmp	r4, r2
 800c86c:	bfc8      	it	gt
 800c86e:	8083      	strhgt	r3, [r0, #4]
 800c870:	88cb      	ldrh	r3, [r1, #6]
 800c872:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800c876:	b21a      	sxth	r2, r3
 800c878:	4291      	cmp	r1, r2
 800c87a:	bfc8      	it	gt
 800c87c:	80c3      	strhgt	r3, [r0, #6]
 800c87e:	bd10      	pop	{r4, pc}

0800c880 <GUI__IntersectRects>:
 800c880:	b570      	push	{r4, r5, r6, lr}
 800c882:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c886:	f9b1 4000 	ldrsh.w	r4, [r1]
 800c88a:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800c88e:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 800c892:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800c896:	429c      	cmp	r4, r3
 800c898:	bfb8      	it	lt
 800c89a:	461c      	movlt	r4, r3
 800c89c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800c8a0:	429d      	cmp	r5, r3
 800c8a2:	bfa8      	it	ge
 800c8a4:	462b      	movge	r3, r5
 800c8a6:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800c8aa:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c8ae:	42ae      	cmp	r6, r5
 800c8b0:	bfb8      	it	lt
 800c8b2:	4635      	movlt	r5, r6
 800c8b4:	b2a4      	uxth	r4, r4
 800c8b6:	b2ad      	uxth	r5, r5
 800c8b8:	4291      	cmp	r1, r2
 800c8ba:	bfb8      	it	lt
 800c8bc:	460a      	movlt	r2, r1
 800c8be:	8004      	strh	r4, [r0, #0]
 800c8c0:	8085      	strh	r5, [r0, #4]
 800c8c2:	b224      	sxth	r4, r4
 800c8c4:	b22d      	sxth	r5, r5
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	b292      	uxth	r2, r2
 800c8ca:	42a5      	cmp	r5, r4
 800c8cc:	8043      	strh	r3, [r0, #2]
 800c8ce:	80c2      	strh	r2, [r0, #6]
 800c8d0:	db06      	blt.n	800c8e0 <GUI__IntersectRects+0x60>
 800c8d2:	b210      	sxth	r0, r2
 800c8d4:	b21b      	sxth	r3, r3
 800c8d6:	4298      	cmp	r0, r3
 800c8d8:	bfb4      	ite	lt
 800c8da:	2000      	movlt	r0, #0
 800c8dc:	2001      	movge	r0, #1
 800c8de:	bd70      	pop	{r4, r5, r6, pc}
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	bd70      	pop	{r4, r5, r6, pc}

0800c8e4 <GUI__memset16>:
 800c8e4:	b570      	push	{r4, r5, r6, lr}
 800c8e6:	0784      	lsls	r4, r0, #30
 800c8e8:	d502      	bpl.n	800c8f0 <GUI__memset16+0xc>
 800c8ea:	8001      	strh	r1, [r0, #0]
 800c8ec:	3a01      	subs	r2, #1
 800c8ee:	3002      	adds	r0, #2
 800c8f0:	0855      	lsrs	r5, r2, #1
 800c8f2:	462b      	mov	r3, r5
 800c8f4:	b305      	cbz	r5, 800c938 <GUI__memset16+0x54>
 800c8f6:	2d03      	cmp	r5, #3
 800c8f8:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 800c8fc:	dc02      	bgt.n	800c904 <GUI__memset16+0x20>
 800c8fe:	4606      	mov	r6, r0
 800c900:	461d      	mov	r5, r3
 800c902:	e012      	b.n	800c92a <GUI__memset16+0x46>
 800c904:	4603      	mov	r3, r0
 800c906:	462e      	mov	r6, r5
 800c908:	3e04      	subs	r6, #4
 800c90a:	2e03      	cmp	r6, #3
 800c90c:	601c      	str	r4, [r3, #0]
 800c90e:	605c      	str	r4, [r3, #4]
 800c910:	609c      	str	r4, [r3, #8]
 800c912:	60dc      	str	r4, [r3, #12]
 800c914:	f103 0310 	add.w	r3, r3, #16
 800c918:	dcf6      	bgt.n	800c908 <GUI__memset16+0x24>
 800c91a:	3d04      	subs	r5, #4
 800c91c:	08ab      	lsrs	r3, r5, #2
 800c91e:	1c5e      	adds	r6, r3, #1
 800c920:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800c924:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 800c928:	e7e9      	b.n	800c8fe <GUI__memset16+0x1a>
 800c92a:	b11d      	cbz	r5, 800c934 <GUI__memset16+0x50>
 800c92c:	f846 4b04 	str.w	r4, [r6], #4
 800c930:	3d01      	subs	r5, #1
 800c932:	e7fa      	b.n	800c92a <GUI__memset16+0x46>
 800c934:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800c938:	07d3      	lsls	r3, r2, #31
 800c93a:	bf48      	it	mi
 800c93c:	8001      	strhmi	r1, [r0, #0]
 800c93e:	bd70      	pop	{r4, r5, r6, pc}

0800c940 <GUI__Read16>:
 800c940:	6803      	ldr	r3, [r0, #0]
 800c942:	781a      	ldrb	r2, [r3, #0]
 800c944:	7859      	ldrb	r1, [r3, #1]
 800c946:	3302      	adds	r3, #2
 800c948:	6003      	str	r3, [r0, #0]
 800c94a:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
 800c94e:	4770      	bx	lr

0800c950 <GUI__Read32>:
 800c950:	b510      	push	{r4, lr}
 800c952:	6803      	ldr	r3, [r0, #0]
 800c954:	789a      	ldrb	r2, [r3, #2]
 800c956:	785c      	ldrb	r4, [r3, #1]
 800c958:	7819      	ldrb	r1, [r3, #0]
 800c95a:	0412      	lsls	r2, r2, #16
 800c95c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800c960:	430a      	orrs	r2, r1
 800c962:	78d9      	ldrb	r1, [r3, #3]
 800c964:	3304      	adds	r3, #4
 800c966:	6003      	str	r3, [r0, #0]
 800c968:	ea42 6001 	orr.w	r0, r2, r1, lsl #24
 800c96c:	bd10      	pop	{r4, pc}

0800c96e <GUI__ReduceRect>:
 800c96e:	880b      	ldrh	r3, [r1, #0]
 800c970:	b292      	uxth	r2, r2
 800c972:	4413      	add	r3, r2
 800c974:	8003      	strh	r3, [r0, #0]
 800c976:	888b      	ldrh	r3, [r1, #4]
 800c978:	1a9b      	subs	r3, r3, r2
 800c97a:	8083      	strh	r3, [r0, #4]
 800c97c:	884b      	ldrh	r3, [r1, #2]
 800c97e:	4413      	add	r3, r2
 800c980:	8043      	strh	r3, [r0, #2]
 800c982:	88cb      	ldrh	r3, [r1, #6]
 800c984:	1a9a      	subs	r2, r3, r2
 800c986:	80c2      	strh	r2, [r0, #6]
 800c988:	4770      	bx	lr

0800c98a <GUI__sqrt32>:
 800c98a:	b510      	push	{r4, lr}
 800c98c:	2110      	movs	r1, #16
 800c98e:	2300      	movs	r3, #0
 800c990:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c994:	189c      	adds	r4, r3, r2
 800c996:	4284      	cmp	r4, r0
 800c998:	bf9c      	itt	ls
 800c99a:	18a3      	addls	r3, r4, r2
 800c99c:	ebc4 0000 	rsbls	r0, r4, r0
 800c9a0:	3901      	subs	r1, #1
 800c9a2:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800c9a6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800c9aa:	d1f3      	bne.n	800c994 <GUI__sqrt32+0xa>
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	bd10      	pop	{r4, pc}

0800c9b0 <GUI__strcmp>:
 800c9b0:	b510      	push	{r4, lr}
 800c9b2:	4b09      	ldr	r3, [pc, #36]	; (800c9d8 <GUI__strcmp+0x28>)
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	bf08      	it	eq
 800c9b8:	4618      	moveq	r0, r3
 800c9ba:	2900      	cmp	r1, #0
 800c9bc:	bf08      	it	eq
 800c9be:	4619      	moveq	r1, r3
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	5cc4      	ldrb	r4, [r0, r3]
 800c9c4:	5cca      	ldrb	r2, [r1, r3]
 800c9c6:	42a2      	cmp	r2, r4
 800c9c8:	d104      	bne.n	800c9d4 <GUI__strcmp+0x24>
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	2a00      	cmp	r2, #0
 800c9ce:	d1f8      	bne.n	800c9c2 <GUI__strcmp+0x12>
 800c9d0:	4610      	mov	r0, r2
 800c9d2:	bd10      	pop	{r4, pc}
 800c9d4:	2001      	movs	r0, #1
 800c9d6:	bd10      	pop	{r4, pc}
 800c9d8:	08014e15 	.word	0x08014e15

0800c9dc <GUI__strcmp_hp>:
 800c9dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9de:	460d      	mov	r5, r1
 800c9e0:	b160      	cbz	r0, 800c9fc <GUI__strcmp_hp+0x20>
 800c9e2:	f002 fa51 	bl	800ee88 <GUI_ALLOC_LockH>
 800c9e6:	ac02      	add	r4, sp, #8
 800c9e8:	4629      	mov	r1, r5
 800c9ea:	f844 0d04 	str.w	r0, [r4, #-4]!
 800c9ee:	f7ff ffdf 	bl	800c9b0 <GUI__strcmp>
 800c9f2:	4605      	mov	r5, r0
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f002 fa55 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800c9fa:	e000      	b.n	800c9fe <GUI__strcmp_hp+0x22>
 800c9fc:	2501      	movs	r5, #1
 800c9fe:	4628      	mov	r0, r5
 800ca00:	b003      	add	sp, #12
 800ca02:	bd30      	pop	{r4, r5, pc}

0800ca04 <GUI__strlen>:
 800ca04:	f04f 33ff 	mov.w	r3, #4294967295
 800ca08:	b118      	cbz	r0, 800ca12 <GUI__strlen+0xe>
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	5cc2      	ldrb	r2, [r0, r3]
 800ca0e:	2a00      	cmp	r2, #0
 800ca10:	d1fb      	bne.n	800ca0a <GUI__strlen+0x6>
 800ca12:	4618      	mov	r0, r3
 800ca14:	4770      	bx	lr
	...

0800ca18 <GUI__SetText>:
 800ca18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca1a:	6807      	ldr	r7, [r0, #0]
 800ca1c:	4605      	mov	r5, r0
 800ca1e:	4638      	mov	r0, r7
 800ca20:	460e      	mov	r6, r1
 800ca22:	f7ff ffdb 	bl	800c9dc <GUI__strcmp_hp>
 800ca26:	b908      	cbnz	r0, 800ca2c <GUI__SetText+0x14>
 800ca28:	2000      	movs	r0, #0
 800ca2a:	e02f      	b.n	800ca8c <GUI__SetText+0x74>
 800ca2c:	4630      	mov	r0, r6
 800ca2e:	f7ff ffe9 	bl	800ca04 <GUI__strlen>
 800ca32:	1c44      	adds	r4, r0, #1
 800ca34:	4638      	mov	r0, r7
 800ca36:	f002 fa55 	bl	800eee4 <GUI_ALLOC_GetSize>
 800ca3a:	4284      	cmp	r4, r0
 800ca3c:	d110      	bne.n	800ca60 <GUI__SetText+0x48>
 800ca3e:	2c00      	cmp	r4, #0
 800ca40:	d0f2      	beq.n	800ca28 <GUI__SetText+0x10>
 800ca42:	4638      	mov	r0, r7
 800ca44:	f002 fa20 	bl	800ee88 <GUI_ALLOC_LockH>
 800ca48:	ad02      	add	r5, sp, #8
 800ca4a:	4b11      	ldr	r3, [pc, #68]	; (800ca90 <GUI__SetText+0x78>)
 800ca4c:	f845 0d04 	str.w	r0, [r5, #-4]!
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4631      	mov	r1, r6
 800ca54:	4622      	mov	r2, r4
 800ca56:	4798      	blx	r3
 800ca58:	4628      	mov	r0, r5
 800ca5a:	f002 fa23 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800ca5e:	e014      	b.n	800ca8a <GUI__SetText+0x72>
 800ca60:	4620      	mov	r0, r4
 800ca62:	f002 fbdd 	bl	800f220 <GUI_ALLOC_AllocNoInit>
 800ca66:	4607      	mov	r7, r0
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d0dd      	beq.n	800ca28 <GUI__SetText+0x10>
 800ca6c:	f002 fa0c 	bl	800ee88 <GUI_ALLOC_LockH>
 800ca70:	ac02      	add	r4, sp, #8
 800ca72:	4631      	mov	r1, r6
 800ca74:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ca78:	f005 fbf3 	bl	8012262 <strcpy>
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f002 fa11 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800ca82:	4628      	mov	r0, r5
 800ca84:	f002 fbd0 	bl	800f228 <GUI_ALLOC_FreePtr>
 800ca88:	602f      	str	r7, [r5, #0]
 800ca8a:	2001      	movs	r0, #1
 800ca8c:	b003      	add	sp, #12
 800ca8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca90:	20000074 	.word	0x20000074

0800ca94 <GUI__ManageCacheEx>:
 800ca94:	2801      	cmp	r0, #1
 800ca96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca98:	4604      	mov	r4, r0
 800ca9a:	460d      	mov	r5, r1
 800ca9c:	dc65      	bgt.n	800cb6a <GUI__ManageCacheEx+0xd6>
 800ca9e:	4b34      	ldr	r3, [pc, #208]	; (800cb70 <GUI__ManageCacheEx+0xdc>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	b103      	cbz	r3, 800caa6 <GUI__ManageCacheEx+0x12>
 800caa4:	4798      	blx	r3
 800caa6:	2d01      	cmp	r5, #1
 800caa8:	d004      	beq.n	800cab4 <GUI__ManageCacheEx+0x20>
 800caaa:	2d02      	cmp	r5, #2
 800caac:	d021      	beq.n	800caf2 <GUI__ManageCacheEx+0x5e>
 800caae:	2d00      	cmp	r5, #0
 800cab0:	d15b      	bne.n	800cb6a <GUI__ManageCacheEx+0xd6>
 800cab2:	e035      	b.n	800cb20 <GUI__ManageCacheEx+0x8c>
 800cab4:	4e2f      	ldr	r6, [pc, #188]	; (800cb74 <GUI__ManageCacheEx+0xe0>)
 800cab6:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 800caba:	b9b7      	cbnz	r7, 800caea <GUI__ManageCacheEx+0x56>
 800cabc:	4620      	mov	r0, r4
 800cabe:	f000 fca9 	bl	800d414 <GUI_DEVICE__GetpDriver>
 800cac2:	9001      	str	r0, [sp, #4]
 800cac4:	2800      	cmp	r0, #0
 800cac6:	d050      	beq.n	800cb6a <GUI__ManageCacheEx+0xd6>
 800cac8:	68c3      	ldr	r3, [r0, #12]
 800caca:	210d      	movs	r1, #13
 800cacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cace:	a801      	add	r0, sp, #4
 800cad0:	4798      	blx	r3
 800cad2:	4603      	mov	r3, r0
 800cad4:	2800      	cmp	r0, #0
 800cad6:	d048      	beq.n	800cb6a <GUI__ManageCacheEx+0xd6>
 800cad8:	9801      	ldr	r0, [sp, #4]
 800cada:	4629      	mov	r1, r5
 800cadc:	4798      	blx	r3
 800cade:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800cae2:	3301      	adds	r3, #1
 800cae4:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 800cae8:	e018      	b.n	800cb1c <GUI__ManageCacheEx+0x88>
 800caea:	3701      	adds	r7, #1
 800caec:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 800caf0:	e03b      	b.n	800cb6a <GUI__ManageCacheEx+0xd6>
 800caf2:	4620      	mov	r0, r4
 800caf4:	f000 fc8e 	bl	800d414 <GUI_DEVICE__GetpDriver>
 800caf8:	9001      	str	r0, [sp, #4]
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d035      	beq.n	800cb6a <GUI__ManageCacheEx+0xd6>
 800cafe:	68c3      	ldr	r3, [r0, #12]
 800cb00:	210d      	movs	r1, #13
 800cb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb04:	a801      	add	r0, sp, #4
 800cb06:	4798      	blx	r3
 800cb08:	4604      	mov	r4, r0
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	d02d      	beq.n	800cb6a <GUI__ManageCacheEx+0xd6>
 800cb0e:	4b1a      	ldr	r3, [pc, #104]	; (800cb78 <GUI__ManageCacheEx+0xe4>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	b103      	cbz	r3, 800cb16 <GUI__ManageCacheEx+0x82>
 800cb14:	4798      	blx	r3
 800cb16:	9801      	ldr	r0, [sp, #4]
 800cb18:	2102      	movs	r1, #2
 800cb1a:	47a0      	blx	r4
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	e025      	b.n	800cb6c <GUI__ManageCacheEx+0xd8>
 800cb20:	4d14      	ldr	r5, [pc, #80]	; (800cb74 <GUI__ManageCacheEx+0xe0>)
 800cb22:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	d001      	beq.n	800cb2e <GUI__ManageCacheEx+0x9a>
 800cb2a:	2001      	movs	r0, #1
 800cb2c:	e015      	b.n	800cb5a <GUI__ManageCacheEx+0xc6>
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f000 fc70 	bl	800d414 <GUI_DEVICE__GetpDriver>
 800cb34:	9001      	str	r0, [sp, #4]
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d0f7      	beq.n	800cb2a <GUI__ManageCacheEx+0x96>
 800cb3a:	68c3      	ldr	r3, [r0, #12]
 800cb3c:	210d      	movs	r1, #13
 800cb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb40:	a801      	add	r0, sp, #4
 800cb42:	4798      	blx	r3
 800cb44:	4606      	mov	r6, r0
 800cb46:	2800      	cmp	r0, #0
 800cb48:	d0ef      	beq.n	800cb2a <GUI__ManageCacheEx+0x96>
 800cb4a:	4b0b      	ldr	r3, [pc, #44]	; (800cb78 <GUI__ManageCacheEx+0xe4>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	b103      	cbz	r3, 800cb52 <GUI__ManageCacheEx+0xbe>
 800cb50:	4798      	blx	r3
 800cb52:	9801      	ldr	r0, [sp, #4]
 800cb54:	2100      	movs	r1, #0
 800cb56:	47b0      	blx	r6
 800cb58:	2000      	movs	r0, #0
 800cb5a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	bf18      	it	ne
 800cb62:	3b01      	subne	r3, #1
 800cb64:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800cb68:	e000      	b.n	800cb6c <GUI__ManageCacheEx+0xd8>
 800cb6a:	2001      	movs	r0, #1
 800cb6c:	b003      	add	sp, #12
 800cb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb70:	20002a30 	.word	0x20002a30
 800cb74:	20002a28 	.word	0x20002a28
 800cb78:	20002a24 	.word	0x20002a24

0800cb7c <GUI__ManageCache>:
 800cb7c:	4b02      	ldr	r3, [pc, #8]	; (800cb88 <GUI__ManageCache+0xc>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4601      	mov	r1, r0
 800cb82:	7c58      	ldrb	r0, [r3, #17]
 800cb84:	f7ff bf86 	b.w	800ca94 <GUI__ManageCacheEx>
 800cb88:	20000084 	.word	0x20000084

0800cb8c <GUI__MixColors>:
 800cb8c:	f081 417f 	eor.w	r1, r1, #4278190080	; 0xff000000
 800cb90:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 800cb94:	0e0b      	lsrs	r3, r1, #24
 800cb96:	ea4f 6310 	mov.w	r3, r0, lsr #24
 800cb9a:	b530      	push	{r4, r5, lr}
 800cb9c:	fb02 f303 	mul.w	r3, r2, r3
 800cba0:	f04f 04ff 	mov.w	r4, #255	; 0xff
 800cba4:	fbb3 f3f4 	udiv	r3, r3, r4
 800cba8:	bf08      	it	eq
 800cbaa:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 800cbae:	1ae2      	subs	r2, r4, r3
 800cbb0:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800cbb4:	f001 25ff 	and.w	r5, r1, #4278255360	; 0xff00ff00
 800cbb8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800cbbc:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 800cbc0:	0a2d      	lsrs	r5, r5, #8
 800cbc2:	435c      	muls	r4, r3
 800cbc4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800cbc8:	4343      	muls	r3, r0
 800cbca:	fb02 4405 	mla	r4, r2, r5, r4
 800cbce:	fb02 3201 	mla	r2, r2, r1, r3
 800cbd2:	0a12      	lsrs	r2, r2, #8
 800cbd4:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 800cbd8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800cbdc:	ea44 0002 	orr.w	r0, r4, r2
 800cbe0:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 800cbe4:	bd30      	pop	{r4, r5, pc}
	...

0800cbe8 <_OnExit>:
 800cbe8:	b570      	push	{r4, r5, r6, lr}
 800cbea:	4c0a      	ldr	r4, [pc, #40]	; (800cc14 <_OnExit+0x2c>)
 800cbec:	4d0a      	ldr	r5, [pc, #40]	; (800cc18 <_OnExit+0x30>)
 800cbee:	6820      	ldr	r0, [r4, #0]
 800cbf0:	4e0a      	ldr	r6, [pc, #40]	; (800cc1c <_OnExit+0x34>)
 800cbf2:	f002 f935 	bl	800ee60 <GUI_ALLOC_FreeFixedBlock>
 800cbf6:	6828      	ldr	r0, [r5, #0]
 800cbf8:	f002 f932 	bl	800ee60 <GUI_ALLOC_FreeFixedBlock>
 800cbfc:	6830      	ldr	r0, [r6, #0]
 800cbfe:	f002 f92f 	bl	800ee60 <GUI_ALLOC_FreeFixedBlock>
 800cc02:	4a07      	ldr	r2, [pc, #28]	; (800cc20 <_OnExit+0x38>)
 800cc04:	2300      	movs	r3, #0
 800cc06:	6013      	str	r3, [r2, #0]
 800cc08:	4a06      	ldr	r2, [pc, #24]	; (800cc24 <_OnExit+0x3c>)
 800cc0a:	6033      	str	r3, [r6, #0]
 800cc0c:	602b      	str	r3, [r5, #0]
 800cc0e:	6023      	str	r3, [r4, #0]
 800cc10:	6013      	str	r3, [r2, #0]
 800cc12:	bd70      	pop	{r4, r5, r6, pc}
 800cc14:	20002a38 	.word	0x20002a38
 800cc18:	20002a34 	.word	0x20002a34
 800cc1c:	20002a3c 	.word	0x20002a3c
 800cc20:	20002a40 	.word	0x20002a40
 800cc24:	20002a50 	.word	0x20002a50

0800cc28 <GUI__GetAlphaBuffer>:
 800cc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc2c:	461c      	mov	r4, r3
 800cc2e:	4b28      	ldr	r3, [pc, #160]	; (800ccd0 <GUI__GetAlphaBuffer+0xa8>)
 800cc30:	4617      	mov	r7, r2
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	4606      	mov	r6, r0
 800cc36:	4688      	mov	r8, r1
 800cc38:	b932      	cbnz	r2, 800cc48 <GUI__GetAlphaBuffer+0x20>
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	4825      	ldr	r0, [pc, #148]	; (800ccd4 <GUI__GetAlphaBuffer+0xac>)
 800cc3e:	601a      	str	r2, [r3, #0]
 800cc40:	4b25      	ldr	r3, [pc, #148]	; (800ccd8 <GUI__GetAlphaBuffer+0xb0>)
 800cc42:	6003      	str	r3, [r0, #0]
 800cc44:	f000 fd40 	bl	800d6c8 <GUI__RegisterExit>
 800cc48:	4d24      	ldr	r5, [pc, #144]	; (800ccdc <GUI__GetAlphaBuffer+0xb4>)
 800cc4a:	682b      	ldr	r3, [r5, #0]
 800cc4c:	b933      	cbnz	r3, 800cc5c <GUI__GetAlphaBuffer+0x34>
 800cc4e:	4b24      	ldr	r3, [pc, #144]	; (800cce0 <GUI__GetAlphaBuffer+0xb8>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	602b      	str	r3, [r5, #0]
 800cc54:	b913      	cbnz	r3, 800cc5c <GUI__GetAlphaBuffer+0x34>
 800cc56:	f7ff f9fb 	bl	800c050 <LCD_GetVXSizeMax>
 800cc5a:	6028      	str	r0, [r5, #0]
 800cc5c:	b10c      	cbz	r4, 800cc62 <GUI__GetAlphaBuffer+0x3a>
 800cc5e:	682b      	ldr	r3, [r5, #0]
 800cc60:	6023      	str	r3, [r4, #0]
 800cc62:	b196      	cbz	r6, 800cc8a <GUI__GetAlphaBuffer+0x62>
 800cc64:	4b1f      	ldr	r3, [pc, #124]	; (800cce4 <GUI__GetAlphaBuffer+0xbc>)
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	4699      	mov	r9, r3
 800cc6a:	2400      	movs	r4, #0
 800cc6c:	b94a      	cbnz	r2, 800cc82 <GUI__GetAlphaBuffer+0x5a>
 800cc6e:	6828      	ldr	r0, [r5, #0]
 800cc70:	0080      	lsls	r0, r0, #2
 800cc72:	f002 f9d9 	bl	800f028 <GUI_ALLOC_GetFixedBlock>
 800cc76:	f1d0 0401 	rsbs	r4, r0, #1
 800cc7a:	f8c9 0000 	str.w	r0, [r9]
 800cc7e:	bf38      	it	cc
 800cc80:	2400      	movcc	r4, #0
 800cc82:	f8d9 3000 	ldr.w	r3, [r9]
 800cc86:	6033      	str	r3, [r6, #0]
 800cc88:	e000      	b.n	800cc8c <GUI__GetAlphaBuffer+0x64>
 800cc8a:	4634      	mov	r4, r6
 800cc8c:	f1b8 0f00 	cmp.w	r8, #0
 800cc90:	d00d      	beq.n	800ccae <GUI__GetAlphaBuffer+0x86>
 800cc92:	4e15      	ldr	r6, [pc, #84]	; (800cce8 <GUI__GetAlphaBuffer+0xc0>)
 800cc94:	6833      	ldr	r3, [r6, #0]
 800cc96:	b93b      	cbnz	r3, 800cca8 <GUI__GetAlphaBuffer+0x80>
 800cc98:	6828      	ldr	r0, [r5, #0]
 800cc9a:	0080      	lsls	r0, r0, #2
 800cc9c:	f002 f9c4 	bl	800f028 <GUI_ALLOC_GetFixedBlock>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	6030      	str	r0, [r6, #0]
 800cca4:	bf08      	it	eq
 800cca6:	2401      	moveq	r4, #1
 800cca8:	6833      	ldr	r3, [r6, #0]
 800ccaa:	f8c8 3000 	str.w	r3, [r8]
 800ccae:	b167      	cbz	r7, 800ccca <GUI__GetAlphaBuffer+0xa2>
 800ccb0:	4e0e      	ldr	r6, [pc, #56]	; (800ccec <GUI__GetAlphaBuffer+0xc4>)
 800ccb2:	6833      	ldr	r3, [r6, #0]
 800ccb4:	b93b      	cbnz	r3, 800ccc6 <GUI__GetAlphaBuffer+0x9e>
 800ccb6:	6828      	ldr	r0, [r5, #0]
 800ccb8:	0080      	lsls	r0, r0, #2
 800ccba:	f002 f9b5 	bl	800f028 <GUI_ALLOC_GetFixedBlock>
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	6030      	str	r0, [r6, #0]
 800ccc2:	bf08      	it	eq
 800ccc4:	2401      	moveq	r4, #1
 800ccc6:	6833      	ldr	r3, [r6, #0]
 800ccc8:	603b      	str	r3, [r7, #0]
 800ccca:	4620      	mov	r0, r4
 800cccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccd0:	20002a50 	.word	0x20002a50
 800ccd4:	20002a44 	.word	0x20002a44
 800ccd8:	0800cbe9 	.word	0x0800cbe9
 800ccdc:	20002a40 	.word	0x20002a40
 800cce0:	20007740 	.word	0x20007740
 800cce4:	20002a38 	.word	0x20002a38
 800cce8:	20002a34 	.word	0x20002a34
 800ccec:	20002a3c 	.word	0x20002a3c

0800ccf0 <GUI__DoAlphaBlending>:
 800ccf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf4:	b093      	sub	sp, #76	; 0x4c
 800ccf6:	2400      	movs	r4, #0
 800ccf8:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ccfa:	900b      	str	r0, [sp, #44]	; 0x2c
 800ccfc:	910c      	str	r1, [sp, #48]	; 0x30
 800ccfe:	4690      	mov	r8, r2
 800cd00:	461f      	mov	r7, r3
 800cd02:	6034      	str	r4, [r6, #0]
 800cd04:	a80f      	add	r0, sp, #60	; 0x3c
 800cd06:	a910      	add	r1, sp, #64	; 0x40
 800cd08:	4622      	mov	r2, r4
 800cd0a:	ab11      	add	r3, sp, #68	; 0x44
 800cd0c:	f7ff ff8c 	bl	800cc28 <GUI__GetAlphaBuffer>
 800cd10:	4605      	mov	r5, r0
 800cd12:	2800      	cmp	r0, #0
 800cd14:	f040 80c5 	bne.w	800cea2 <GUI__DoAlphaBlending+0x1b2>
 800cd18:	4c64      	ldr	r4, [pc, #400]	; (800ceac <GUI__DoAlphaBlending+0x1bc>)
 800cd1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cd1c:	6823      	ldr	r3, [r4, #0]
 800cd1e:	7c58      	ldrb	r0, [r3, #17]
 800cd20:	4b63      	ldr	r3, [pc, #396]	; (800ceb0 <GUI__DoAlphaBlending+0x1c0>)
 800cd22:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cd26:	9307      	str	r3, [sp, #28]
 800cd28:	4297      	cmp	r7, r2
 800cd2a:	bfa8      	it	ge
 800cd2c:	4617      	movge	r7, r2
 800cd2e:	691a      	ldr	r2, [r3, #16]
 800cd30:	920d      	str	r2, [sp, #52]	; 0x34
 800cd32:	970a      	str	r7, [sp, #40]	; 0x28
 800cd34:	f7ff f950 	bl	800bfd8 <GUI_GetBitsPerPixelEx>
 800cd38:	6823      	ldr	r3, [r4, #0]
 800cd3a:	9008      	str	r0, [sp, #32]
 800cd3c:	7c58      	ldrb	r0, [r3, #17]
 800cd3e:	f7ff f969 	bl	800c014 <GUI_GetpfIndex2ColorEx>
 800cd42:	4b5c      	ldr	r3, [pc, #368]	; (800ceb4 <GUI__DoAlphaBlending+0x1c4>)
 800cd44:	9004      	str	r0, [sp, #16]
 800cd46:	4298      	cmp	r0, r3
 800cd48:	d005      	beq.n	800cd56 <GUI__DoAlphaBlending+0x66>
 800cd4a:	4b5b      	ldr	r3, [pc, #364]	; (800ceb8 <GUI__DoAlphaBlending+0x1c8>)
 800cd4c:	1ac3      	subs	r3, r0, r3
 800cd4e:	bf18      	it	ne
 800cd50:	2301      	movne	r3, #1
 800cd52:	9306      	str	r3, [sp, #24]
 800cd54:	e000      	b.n	800cd58 <GUI__DoAlphaBlending+0x68>
 800cd56:	9506      	str	r5, [sp, #24]
 800cd58:	2500      	movs	r5, #0
 800cd5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cd5c:	46ab      	mov	fp, r5
 800cd5e:	4643      	mov	r3, r8
 800cd60:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cd62:	f853 0b04 	ldr.w	r0, [r3], #4
 800cd66:	9305      	str	r3, [sp, #20]
 800cd68:	4790      	blx	r2
 800cd6a:	0e03      	lsrs	r3, r0, #24
 800cd6c:	4681      	mov	r9, r0
 800cd6e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd70:	f000 8087 	beq.w	800ce82 <GUI__DoAlphaBlending+0x192>
 800cd74:	f1bb 0f00 	cmp.w	fp, #0
 800cd78:	d13f      	bne.n	800cdfa <GUI__DoAlphaBlending+0x10a>
 800cd7a:	4b4c      	ldr	r3, [pc, #304]	; (800ceac <GUI__DoAlphaBlending+0x1bc>)
 800cd7c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cd86:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800cd8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cd8c:	442f      	add	r7, r5
 800cd8e:	42bb      	cmp	r3, r7
 800cd90:	bfc8      	it	gt
 800cd92:	ebc7 0b03 	rsbgt	fp, r7, r3
 800cd96:	eb0b 0a05 	add.w	sl, fp, r5
 800cd9a:	bfc8      	it	gt
 800cd9c:	461f      	movgt	r7, r3
 800cd9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cda0:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800cda4:	4453      	add	r3, sl
 800cda6:	4494      	add	ip, r2
 800cda8:	9300      	str	r3, [sp, #0]
 800cdaa:	9b07      	ldr	r3, [sp, #28]
 800cdac:	9301      	str	r3, [sp, #4]
 800cdae:	f10c 32ff 	add.w	r2, ip, #4294967295
 800cdb2:	4638      	mov	r0, r7
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	f8cd c00c 	str.w	ip, [sp, #12]
 800cdba:	f004 fa99 	bl	80112f0 <GUI_ReadRectEx>
 800cdbe:	9a08      	ldr	r2, [sp, #32]
 800cdc0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cdc2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800cdc6:	2a17      	cmp	r2, #23
 800cdc8:	dc06      	bgt.n	800cdd8 <GUI__DoAlphaBlending+0xe8>
 800cdca:	4450      	add	r0, sl
 800cdcc:	ebcb 0104 	rsb	r1, fp, r4
 800cdd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdd2:	f004 fbf1 	bl	80115b8 <GUI__ExpandPixelIndicesEx>
 800cdd6:	e001      	b.n	800cddc <GUI__DoAlphaBlending+0xec>
 800cdd8:	9b06      	ldr	r3, [sp, #24]
 800cdda:	b913      	cbnz	r3, 800cde2 <GUI__DoAlphaBlending+0xf2>
 800cddc:	f04f 0b01 	mov.w	fp, #1
 800cde0:	e00b      	b.n	800cdfa <GUI__DoAlphaBlending+0x10a>
 800cde2:	ebc7 070c 	rsb	r7, r7, ip
 800cde6:	4482      	add	sl, r0
 800cde8:	f8da 0000 	ldr.w	r0, [sl]
 800cdec:	9a04      	ldr	r2, [sp, #16]
 800cdee:	4790      	blx	r2
 800cdf0:	3f01      	subs	r7, #1
 800cdf2:	f84a 0b04 	str.w	r0, [sl], #4
 800cdf6:	d1f7      	bne.n	800cde8 <GUI__DoAlphaBlending+0xf8>
 800cdf8:	e7f0      	b.n	800cddc <GUI__DoAlphaBlending+0xec>
 800cdfa:	4b30      	ldr	r3, [pc, #192]	; (800cebc <GUI__DoAlphaBlending+0x1cc>)
 800cdfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cdfe:	f8d3 c000 	ldr.w	ip, [r3]
 800ce02:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ce04:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800ce08:	f1bc 0f00 	cmp.w	ip, #0
 800ce0c:	d024      	beq.n	800ce58 <GUI__DoAlphaBlending+0x168>
 800ce0e:	eb07 020a 	add.w	r2, r7, sl
 800ce12:	4451      	add	r1, sl
 800ce14:	9210      	str	r2, [sp, #64]	; 0x40
 800ce16:	4623      	mov	r3, r4
 800ce18:	910f      	str	r1, [sp, #60]	; 0x3c
 800ce1a:	4640      	mov	r0, r8
 800ce1c:	47e0      	blx	ip
 800ce1e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ce20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ce22:	2300      	movs	r3, #0
 800ce24:	f858 1003 	ldr.w	r1, [r8, r3]
 800ce28:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 800ce2c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800ce30:	58e8      	ldr	r0, [r5, r3]
 800ce32:	d101      	bne.n	800ce38 <GUI__DoAlphaBlending+0x148>
 800ce34:	50d0      	str	r0, [r2, r3]
 800ce36:	e005      	b.n	800ce44 <GUI__DoAlphaBlending+0x154>
 800ce38:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 800ce3c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800ce40:	bf08      	it	eq
 800ce42:	50d1      	streq	r1, [r2, r3]
 800ce44:	3c01      	subs	r4, #1
 800ce46:	f103 0304 	add.w	r3, r3, #4
 800ce4a:	d1eb      	bne.n	800ce24 <GUI__DoAlphaBlending+0x134>
 800ce4c:	6833      	ldr	r3, [r6, #0]
 800ce4e:	9710      	str	r7, [sp, #64]	; 0x40
 800ce50:	f043 0301 	orr.w	r3, r3, #1
 800ce54:	6033      	str	r3, [r6, #0]
 800ce56:	e022      	b.n	800ce9e <GUI__DoAlphaBlending+0x1ae>
 800ce58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce5a:	2bff      	cmp	r3, #255	; 0xff
 800ce5c:	d104      	bne.n	800ce68 <GUI__DoAlphaBlending+0x178>
 800ce5e:	f851 300a 	ldr.w	r3, [r1, sl]
 800ce62:	f847 300a 	str.w	r3, [r7, sl]
 800ce66:	e013      	b.n	800ce90 <GUI__DoAlphaBlending+0x1a0>
 800ce68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce6a:	f851 100a 	ldr.w	r1, [r1, sl]
 800ce6e:	43da      	mvns	r2, r3
 800ce70:	4b13      	ldr	r3, [pc, #76]	; (800cec0 <GUI__DoAlphaBlending+0x1d0>)
 800ce72:	f029 407f 	bic.w	r0, r9, #4278190080	; 0xff000000
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	b2d2      	uxtb	r2, r2
 800ce7a:	4798      	blx	r3
 800ce7c:	f847 000a 	str.w	r0, [r7, sl]
 800ce80:	e002      	b.n	800ce88 <GUI__DoAlphaBlending+0x198>
 800ce82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce84:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800ce88:	6833      	ldr	r3, [r6, #0]
 800ce8a:	f043 0301 	orr.w	r3, r3, #1
 800ce8e:	6033      	str	r3, [r6, #0]
 800ce90:	3c01      	subs	r4, #1
 800ce92:	f105 0501 	add.w	r5, r5, #1
 800ce96:	d002      	beq.n	800ce9e <GUI__DoAlphaBlending+0x1ae>
 800ce98:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ce9c:	e75f      	b.n	800cd5e <GUI__DoAlphaBlending+0x6e>
 800ce9e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cea0:	e000      	b.n	800cea4 <GUI__DoAlphaBlending+0x1b4>
 800cea2:	4620      	mov	r0, r4
 800cea4:	b013      	add	sp, #76	; 0x4c
 800cea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceaa:	bf00      	nop
 800ceac:	20000084 	.word	0x20000084
 800ceb0:	20007738 	.word	0x20007738
 800ceb4:	0800f28f 	.word	0x0800f28f
 800ceb8:	0800f28d 	.word	0x0800f28d
 800cebc:	20002a4c 	.word	0x20002a4c
 800cec0:	20000078 	.word	0x20000078

0800cec4 <GUI__AllocAlphaBuffer>:
 800cec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cec6:	b108      	cbz	r0, 800cecc <GUI__AllocAlphaBuffer+0x8>
 800cec8:	aa03      	add	r2, sp, #12
 800ceca:	e000      	b.n	800cece <GUI__AllocAlphaBuffer+0xa>
 800cecc:	4602      	mov	r2, r0
 800cece:	a801      	add	r0, sp, #4
 800ced0:	a902      	add	r1, sp, #8
 800ced2:	2300      	movs	r3, #0
 800ced4:	f7ff fea8 	bl	800cc28 <GUI__GetAlphaBuffer>
 800ced8:	b005      	add	sp, #20
 800ceda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800cee0 <GUI_SignalEvent>:
 800cee0:	b508      	push	{r3, lr}
 800cee2:	4b02      	ldr	r3, [pc, #8]	; (800ceec <GUI_SignalEvent+0xc>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	b103      	cbz	r3, 800ceea <GUI_SignalEvent+0xa>
 800cee8:	4798      	blx	r3
 800ceea:	bd08      	pop	{r3, pc}
 800ceec:	20002a54 	.word	0x20002a54

0800cef0 <GUI_UC__GetCharCodeInc>:
 800cef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef2:	4e08      	ldr	r6, [pc, #32]	; (800cf14 <GUI_UC__GetCharCodeInc+0x24>)
 800cef4:	6804      	ldr	r4, [r0, #0]
 800cef6:	6833      	ldr	r3, [r6, #0]
 800cef8:	4605      	mov	r5, r0
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4620      	mov	r0, r4
 800cefe:	4798      	blx	r3
 800cf00:	6833      	ldr	r3, [r6, #0]
 800cf02:	4607      	mov	r7, r0
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	4620      	mov	r0, r4
 800cf08:	4798      	blx	r3
 800cf0a:	4420      	add	r0, r4
 800cf0c:	6028      	str	r0, [r5, #0]
 800cf0e:	4638      	mov	r0, r7
 800cf10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf12:	bf00      	nop
 800cf14:	20007730 	.word	0x20007730

0800cf18 <GUI_UC__NumChars2NumBytes>:
 800cf18:	b570      	push	{r4, r5, r6, lr}
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	460e      	mov	r6, r1
 800cf1e:	2500      	movs	r5, #0
 800cf20:	b146      	cbz	r6, 800cf34 <GUI_UC__NumChars2NumBytes+0x1c>
 800cf22:	4b05      	ldr	r3, [pc, #20]	; (800cf38 <GUI_UC__NumChars2NumBytes+0x20>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	4620      	mov	r0, r4
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	4798      	blx	r3
 800cf2c:	3e01      	subs	r6, #1
 800cf2e:	4404      	add	r4, r0
 800cf30:	4405      	add	r5, r0
 800cf32:	e7f5      	b.n	800cf20 <GUI_UC__NumChars2NumBytes+0x8>
 800cf34:	4628      	mov	r0, r5
 800cf36:	bd70      	pop	{r4, r5, r6, pc}
 800cf38:	20007730 	.word	0x20007730

0800cf3c <_Unlink>:
 800cf3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf3e:	4605      	mov	r5, r0
 800cf40:	b1f0      	cbz	r0, 800cf80 <_Unlink+0x44>
 800cf42:	f001 ffa1 	bl	800ee88 <GUI_ALLOC_LockH>
 800cf46:	4b0f      	ldr	r3, [pc, #60]	; (800cf84 <_Unlink+0x48>)
 800cf48:	9000      	str	r0, [sp, #0]
 800cf4a:	681c      	ldr	r4, [r3, #0]
 800cf4c:	42ac      	cmp	r4, r5
 800cf4e:	d104      	bne.n	800cf5a <_Unlink+0x1e>
 800cf50:	6842      	ldr	r2, [r0, #4]
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	e011      	b.n	800cf7a <_Unlink+0x3e>
 800cf56:	f001 ffa5 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800cf5a:	b174      	cbz	r4, 800cf7a <_Unlink+0x3e>
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	f001 ff93 	bl	800ee88 <GUI_ALLOC_LockH>
 800cf62:	4603      	mov	r3, r0
 800cf64:	a802      	add	r0, sp, #8
 800cf66:	685c      	ldr	r4, [r3, #4]
 800cf68:	f840 3d04 	str.w	r3, [r0, #-4]!
 800cf6c:	42ac      	cmp	r4, r5
 800cf6e:	d1f2      	bne.n	800cf56 <_Unlink+0x1a>
 800cf70:	9a00      	ldr	r2, [sp, #0]
 800cf72:	6852      	ldr	r2, [r2, #4]
 800cf74:	605a      	str	r2, [r3, #4]
 800cf76:	f001 ff95 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800cf7a:	4668      	mov	r0, sp
 800cf7c:	f001 ff92 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800cf80:	b003      	add	sp, #12
 800cf82:	bd30      	pop	{r4, r5, pc}
 800cf84:	20002a5c 	.word	0x20002a5c

0800cf88 <GUI_TIMER__GetFirstTimer>:
 800cf88:	2300      	movs	r3, #0
 800cf8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf8c:	6003      	str	r3, [r0, #0]
 800cf8e:	4b09      	ldr	r3, [pc, #36]	; (800cfb4 <GUI_TIMER__GetFirstTimer+0x2c>)
 800cf90:	681c      	ldr	r4, [r3, #0]
 800cf92:	4605      	mov	r5, r0
 800cf94:	b154      	cbz	r4, 800cfac <GUI_TIMER__GetFirstTimer+0x24>
 800cf96:	4620      	mov	r0, r4
 800cf98:	f001 ff76 	bl	800ee88 <GUI_ALLOC_LockH>
 800cf9c:	ab02      	add	r3, sp, #8
 800cf9e:	6902      	ldr	r2, [r0, #16]
 800cfa0:	f843 0d04 	str.w	r0, [r3, #-4]!
 800cfa4:	602a      	str	r2, [r5, #0]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f001 ff7c 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800cfac:	4620      	mov	r0, r4
 800cfae:	b003      	add	sp, #12
 800cfb0:	bd30      	pop	{r4, r5, pc}
 800cfb2:	bf00      	nop
 800cfb4:	20002a58 	.word	0x20002a58

0800cfb8 <GUI_TIMER__GetNextTimerLin>:
 800cfb8:	2300      	movs	r3, #0
 800cfba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfbc:	600b      	str	r3, [r1, #0]
 800cfbe:	460e      	mov	r6, r1
 800cfc0:	4604      	mov	r4, r0
 800cfc2:	b190      	cbz	r0, 800cfea <GUI_TIMER__GetNextTimerLin+0x32>
 800cfc4:	f001 ff60 	bl	800ee88 <GUI_ALLOC_LockH>
 800cfc8:	ad02      	add	r5, sp, #8
 800cfca:	6884      	ldr	r4, [r0, #8]
 800cfcc:	f845 0d04 	str.w	r0, [r5, #-4]!
 800cfd0:	b144      	cbz	r4, 800cfe4 <GUI_TIMER__GetNextTimerLin+0x2c>
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	f001 ff66 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f001 ff55 	bl	800ee88 <GUI_ALLOC_LockH>
 800cfde:	6903      	ldr	r3, [r0, #16]
 800cfe0:	9001      	str	r0, [sp, #4]
 800cfe2:	6033      	str	r3, [r6, #0]
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	f001 ff5d 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800cfea:	4620      	mov	r0, r4
 800cfec:	b002      	add	sp, #8
 800cfee:	bd70      	pop	{r4, r5, r6, pc}

0800cff0 <GUI_TIMER_Delete>:
 800cff0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cff2:	4604      	mov	r4, r0
 800cff4:	b360      	cbz	r0, 800d050 <GUI_TIMER_Delete+0x60>
 800cff6:	4e17      	ldr	r6, [pc, #92]	; (800d054 <GUI_TIMER_Delete+0x64>)
 800cff8:	6835      	ldr	r5, [r6, #0]
 800cffa:	4285      	cmp	r5, r0
 800cffc:	d10b      	bne.n	800d016 <GUI_TIMER_Delete+0x26>
 800cffe:	f001 ff43 	bl	800ee88 <GUI_ALLOC_LockH>
 800d002:	ab02      	add	r3, sp, #8
 800d004:	6882      	ldr	r2, [r0, #8]
 800d006:	f843 0d04 	str.w	r0, [r3, #-4]!
 800d00a:	6032      	str	r2, [r6, #0]
 800d00c:	4618      	mov	r0, r3
 800d00e:	e017      	b.n	800d040 <GUI_TIMER_Delete+0x50>
 800d010:	4668      	mov	r0, sp
 800d012:	f001 ff47 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800d016:	b1ad      	cbz	r5, 800d044 <GUI_TIMER_Delete+0x54>
 800d018:	4628      	mov	r0, r5
 800d01a:	f001 ff35 	bl	800ee88 <GUI_ALLOC_LockH>
 800d01e:	6885      	ldr	r5, [r0, #8]
 800d020:	ae02      	add	r6, sp, #8
 800d022:	42a5      	cmp	r5, r4
 800d024:	f846 0d08 	str.w	r0, [r6, #-8]!
 800d028:	d1f2      	bne.n	800d010 <GUI_TIMER_Delete+0x20>
 800d02a:	4620      	mov	r0, r4
 800d02c:	f001 ff2c 	bl	800ee88 <GUI_ALLOC_LockH>
 800d030:	9b00      	ldr	r3, [sp, #0]
 800d032:	6882      	ldr	r2, [r0, #8]
 800d034:	9001      	str	r0, [sp, #4]
 800d036:	609a      	str	r2, [r3, #8]
 800d038:	a801      	add	r0, sp, #4
 800d03a:	f001 ff33 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800d03e:	4668      	mov	r0, sp
 800d040:	f001 ff30 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800d044:	4620      	mov	r0, r4
 800d046:	f7ff ff79 	bl	800cf3c <_Unlink>
 800d04a:	4620      	mov	r0, r4
 800d04c:	f001 ff56 	bl	800eefc <GUI_ALLOC_Free>
 800d050:	b002      	add	sp, #8
 800d052:	bd70      	pop	{r4, r5, r6, pc}
 800d054:	20002a58 	.word	0x20002a58

0800d058 <GUI_TIMER_GetFlag>:
 800d058:	b513      	push	{r0, r1, r4, lr}
 800d05a:	460c      	mov	r4, r1
 800d05c:	b168      	cbz	r0, 800d07a <GUI_TIMER_GetFlag+0x22>
 800d05e:	f001 ff13 	bl	800ee88 <GUI_ALLOC_LockH>
 800d062:	ab02      	add	r3, sp, #8
 800d064:	8982      	ldrh	r2, [r0, #12]
 800d066:	f843 0d04 	str.w	r0, [r3, #-4]!
 800d06a:	4214      	tst	r4, r2
 800d06c:	4618      	mov	r0, r3
 800d06e:	bf0c      	ite	eq
 800d070:	2400      	moveq	r4, #0
 800d072:	2401      	movne	r4, #1
 800d074:	f001 ff16 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800d078:	e000      	b.n	800d07c <GUI_TIMER_GetFlag+0x24>
 800d07a:	2401      	movs	r4, #1
 800d07c:	4620      	mov	r0, r4
 800d07e:	b002      	add	sp, #8
 800d080:	bd10      	pop	{r4, pc}
	...

0800d084 <GUI__AlphaPreserveTrans>:
 800d084:	b510      	push	{r4, lr}
 800d086:	4b07      	ldr	r3, [pc, #28]	; (800d0a4 <GUI__AlphaPreserveTrans+0x20>)
 800d088:	781c      	ldrb	r4, [r3, #0]
 800d08a:	b120      	cbz	r0, 800d096 <GUI__AlphaPreserveTrans+0x12>
 800d08c:	2201      	movs	r2, #1
 800d08e:	701a      	strb	r2, [r3, #0]
 800d090:	f04f 30ff 	mov.w	r0, #4294967295
 800d094:	e002      	b.n	800d09c <GUI__AlphaPreserveTrans+0x18>
 800d096:	7018      	strb	r0, [r3, #0]
 800d098:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800d09c:	f004 f9d0 	bl	8011440 <LCD_AA_SetAndMask>
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	bd10      	pop	{r4, pc}
 800d0a4:	20007720 	.word	0x20007720

0800d0a8 <GUI_SelectLayer>:
 800d0a8:	b570      	push	{r4, r5, r6, lr}
 800d0aa:	4d08      	ldr	r5, [pc, #32]	; (800d0cc <GUI_SelectLayer+0x24>)
 800d0ac:	682b      	ldr	r3, [r5, #0]
 800d0ae:	2801      	cmp	r0, #1
 800d0b0:	4604      	mov	r4, r0
 800d0b2:	7c5e      	ldrb	r6, [r3, #17]
 800d0b4:	d808      	bhi.n	800d0c8 <GUI_SelectLayer+0x20>
 800d0b6:	f000 f9ad 	bl	800d414 <GUI_DEVICE__GetpDriver>
 800d0ba:	b128      	cbz	r0, 800d0c8 <GUI_SelectLayer+0x20>
 800d0bc:	682b      	ldr	r3, [r5, #0]
 800d0be:	745c      	strb	r4, [r3, #17]
 800d0c0:	f000 fc82 	bl	800d9c8 <GUI_SelectLCD>
 800d0c4:	4b02      	ldr	r3, [pc, #8]	; (800d0d0 <GUI_SelectLayer+0x28>)
 800d0c6:	601c      	str	r4, [r3, #0]
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	bd70      	pop	{r4, r5, r6, pc}
 800d0cc:	20000084 	.word	0x20000084
 800d0d0:	200076b0 	.word	0x200076b0

0800d0d4 <GUI_StoreKey>:
 800d0d4:	4b02      	ldr	r3, [pc, #8]	; (800d0e0 <GUI_StoreKey+0xc>)
 800d0d6:	681a      	ldr	r2, [r3, #0]
 800d0d8:	b902      	cbnz	r2, 800d0dc <GUI_StoreKey+0x8>
 800d0da:	6018      	str	r0, [r3, #0]
 800d0dc:	f7ff bf00 	b.w	800cee0 <GUI_SignalEvent>
 800d0e0:	20002a60 	.word	0x20002a60

0800d0e4 <GUI_PollKeyMsg>:
 800d0e4:	4a0a      	ldr	r2, [pc, #40]	; (800d110 <GUI_PollKeyMsg+0x2c>)
 800d0e6:	490b      	ldr	r1, [pc, #44]	; (800d114 <GUI_PollKeyMsg+0x30>)
 800d0e8:	6813      	ldr	r3, [r2, #0]
 800d0ea:	6809      	ldr	r1, [r1, #0]
 800d0ec:	428b      	cmp	r3, r1
 800d0ee:	b510      	push	{r4, lr}
 800d0f0:	d00b      	beq.n	800d10a <GUI_PollKeyMsg+0x26>
 800d0f2:	4c09      	ldr	r4, [pc, #36]	; (800d118 <GUI_PollKeyMsg+0x34>)
 800d0f4:	42a3      	cmp	r3, r4
 800d0f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d0fa:	bf14      	ite	ne
 800d0fc:	3308      	addne	r3, #8
 800d0fe:	3b50      	subeq	r3, #80	; 0x50
 800d100:	6013      	str	r3, [r2, #0]
 800d102:	f7fb fa1d 	bl	8008540 <WM_OnKey>
 800d106:	2001      	movs	r0, #1
 800d108:	bd10      	pop	{r4, pc}
 800d10a:	2000      	movs	r0, #0
 800d10c:	bd10      	pop	{r4, pc}
 800d10e:	bf00      	nop
 800d110:	20000080 	.word	0x20000080
 800d114:	2000007c 	.word	0x2000007c
 800d118:	20002ab4 	.word	0x20002ab4

0800d11c <GUI__DispStringInRect>:
 800d11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d120:	b087      	sub	sp, #28
 800d122:	460c      	mov	r4, r1
 800d124:	9001      	str	r0, [sp, #4]
 800d126:	4691      	mov	r9, r2
 800d128:	461d      	mov	r5, r3
 800d12a:	f000 ff3f 	bl	800dfac <GUI_GetFontDistY>
 800d12e:	9f01      	ldr	r7, [sp, #4]
 800d130:	4680      	mov	r8, r0
 800d132:	b124      	cbz	r4, 800d13e <GUI__DispStringInRect+0x22>
 800d134:	6820      	ldr	r0, [r4, #0]
 800d136:	6861      	ldr	r1, [r4, #4]
 800d138:	ab04      	add	r3, sp, #16
 800d13a:	c303      	stmia	r3!, {r0, r1}
 800d13c:	e002      	b.n	800d144 <GUI__DispStringInRect+0x28>
 800d13e:	a804      	add	r0, sp, #16
 800d140:	f000 fb76 	bl	800d830 <GUI_GetClientRect>
 800d144:	f019 0a0c 	ands.w	sl, r9, #12
 800d148:	d002      	beq.n	800d150 <GUI__DispStringInRect+0x34>
 800d14a:	462c      	mov	r4, r5
 800d14c:	2600      	movs	r6, #0
 800d14e:	e016      	b.n	800d17e <GUI__DispStringInRect+0x62>
 800d150:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 800d154:	e032      	b.n	800d1bc <GUI__DispStringInRect+0xa0>
 800d156:	4621      	mov	r1, r4
 800d158:	9801      	ldr	r0, [sp, #4]
 800d15a:	f000 fe75 	bl	800de48 <GUI__GetLineNumChars>
 800d15e:	f8dd b004 	ldr.w	fp, [sp, #4]
 800d162:	4601      	mov	r1, r0
 800d164:	1a24      	subs	r4, r4, r0
 800d166:	4658      	mov	r0, fp
 800d168:	f7ff fed6 	bl	800cf18 <GUI_UC__NumChars2NumBytes>
 800d16c:	eb0b 0300 	add.w	r3, fp, r0
 800d170:	a806      	add	r0, sp, #24
 800d172:	3601      	adds	r6, #1
 800d174:	f840 3d14 	str.w	r3, [r0, #-20]!
 800d178:	f7ff fb50 	bl	800c81c <GUI__HandleEOLine>
 800d17c:	b908      	cbnz	r0, 800d182 <GUI__DispStringInRect+0x66>
 800d17e:	2c00      	cmp	r4, #0
 800d180:	d1e9      	bne.n	800d156 <GUI__DispStringInRect+0x3a>
 800d182:	f1ba 0f08 	cmp.w	sl, #8
 800d186:	d005      	beq.n	800d194 <GUI__DispStringInRect+0x78>
 800d188:	f1ba 0f0c 	cmp.w	sl, #12
 800d18c:	d008      	beq.n	800d1a0 <GUI__DispStringInRect+0x84>
 800d18e:	f1ba 0f04 	cmp.w	sl, #4
 800d192:	d112      	bne.n	800d1ba <GUI__DispStringInRect+0x9e>
 800d194:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 800d198:	fb08 4416 	mls	r4, r8, r6, r4
 800d19c:	3401      	adds	r4, #1
 800d19e:	e00d      	b.n	800d1bc <GUI__DispStringInRect+0xa0>
 800d1a0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800d1a4:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 800d1a8:	1ae4      	subs	r4, r4, r3
 800d1aa:	3401      	adds	r4, #1
 800d1ac:	fb08 4416 	mls	r4, r8, r6, r4
 800d1b0:	2202      	movs	r2, #2
 800d1b2:	fb94 f4f2 	sdiv	r4, r4, r2
 800d1b6:	441c      	add	r4, r3
 800d1b8:	e000      	b.n	800d1bc <GUI__DispStringInRect+0xa0>
 800d1ba:	2400      	movs	r4, #0
 800d1bc:	9701      	str	r7, [sp, #4]
 800d1be:	2600      	movs	r6, #0
 800d1c0:	2d00      	cmp	r5, #0
 800d1c2:	d04b      	beq.n	800d25c <GUI__DispStringInRect+0x140>
 800d1c4:	4629      	mov	r1, r5
 800d1c6:	9801      	ldr	r0, [sp, #4]
 800d1c8:	f000 fe3e 	bl	800de48 <GUI__GetLineNumChars>
 800d1cc:	4607      	mov	r7, r0
 800d1ce:	1a2d      	subs	r5, r5, r0
 800d1d0:	4639      	mov	r1, r7
 800d1d2:	9801      	ldr	r0, [sp, #4]
 800d1d4:	f000 fe66 	bl	800dea4 <GUI__GetLineDistX>
 800d1d8:	f009 0303 	and.w	r3, r9, #3
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d00f      	beq.n	800d200 <GUI__DispStringInRect+0xe4>
 800d1e0:	2b02      	cmp	r3, #2
 800d1e2:	d003      	beq.n	800d1ec <GUI__DispStringInRect+0xd0>
 800d1e4:	b983      	cbnz	r3, 800d208 <GUI__DispStringInRect+0xec>
 800d1e6:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 800d1ea:	e00d      	b.n	800d208 <GUI__DispStringInRect+0xec>
 800d1ec:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800d1f0:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800d1f4:	1ab6      	subs	r6, r6, r2
 800d1f6:	1a36      	subs	r6, r6, r0
 800d1f8:	fb96 f6f3 	sdiv	r6, r6, r3
 800d1fc:	4416      	add	r6, r2
 800d1fe:	e003      	b.n	800d208 <GUI__DispStringInRect+0xec>
 800d200:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800d204:	1a36      	subs	r6, r6, r0
 800d206:	3601      	adds	r6, #1
 800d208:	4b16      	ldr	r3, [pc, #88]	; (800d264 <GUI__DispStringInRect+0x148>)
 800d20a:	6819      	ldr	r1, [r3, #0]
 800d20c:	3801      	subs	r0, #1
 800d20e:	b2a3      	uxth	r3, r4
 800d210:	b2b2      	uxth	r2, r6
 800d212:	848b      	strh	r3, [r1, #36]	; 0x24
 800d214:	4430      	add	r0, r6
 800d216:	f8ad 300a 	strh.w	r3, [sp, #10]
 800d21a:	f108 33ff 	add.w	r3, r8, #4294967295
 800d21e:	4423      	add	r3, r4
 800d220:	844a      	strh	r2, [r1, #34]	; 0x22
 800d222:	f8ad 2008 	strh.w	r2, [sp, #8]
 800d226:	4639      	mov	r1, r7
 800d228:	aa02      	add	r2, sp, #8
 800d22a:	f8ad 000c 	strh.w	r0, [sp, #12]
 800d22e:	9801      	ldr	r0, [sp, #4]
 800d230:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d234:	f000 fe66 	bl	800df04 <GUI__DispLine>
 800d238:	f8dd a004 	ldr.w	sl, [sp, #4]
 800d23c:	4639      	mov	r1, r7
 800d23e:	4650      	mov	r0, sl
 800d240:	f7ff fe6a 	bl	800cf18 <GUI_UC__NumChars2NumBytes>
 800d244:	af06      	add	r7, sp, #24
 800d246:	4450      	add	r0, sl
 800d248:	f847 0d14 	str.w	r0, [r7, #-20]!
 800d24c:	f000 feae 	bl	800dfac <GUI_GetFontDistY>
 800d250:	4404      	add	r4, r0
 800d252:	4638      	mov	r0, r7
 800d254:	f7ff fae2 	bl	800c81c <GUI__HandleEOLine>
 800d258:	2800      	cmp	r0, #0
 800d25a:	d0b1      	beq.n	800d1c0 <GUI__DispStringInRect+0xa4>
 800d25c:	b007      	add	sp, #28
 800d25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d262:	bf00      	nop
 800d264:	20000084 	.word	0x20000084

0800d268 <GUI_DispStringInRectMax>:
 800d268:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d26c:	460c      	mov	r4, r1
 800d26e:	4690      	mov	r8, r2
 800d270:	461f      	mov	r7, r3
 800d272:	4606      	mov	r6, r0
 800d274:	b1c0      	cbz	r0, 800d2a8 <GUI_DispStringInRectMax+0x40>
 800d276:	b169      	cbz	r1, 800d294 <GUI_DispStringInRectMax+0x2c>
 800d278:	4608      	mov	r0, r1
 800d27a:	f7fb fa83 	bl	8008784 <WM_SetUserClipRect>
 800d27e:	4605      	mov	r5, r0
 800d280:	b148      	cbz	r0, 800d296 <GUI_DispStringInRectMax+0x2e>
 800d282:	4668      	mov	r0, sp
 800d284:	4621      	mov	r1, r4
 800d286:	462a      	mov	r2, r5
 800d288:	f7ff fafa 	bl	800c880 <GUI__IntersectRects>
 800d28c:	4668      	mov	r0, sp
 800d28e:	f7fb fa79 	bl	8008784 <WM_SetUserClipRect>
 800d292:	e000      	b.n	800d296 <GUI_DispStringInRectMax+0x2e>
 800d294:	460d      	mov	r5, r1
 800d296:	4630      	mov	r0, r6
 800d298:	4621      	mov	r1, r4
 800d29a:	4642      	mov	r2, r8
 800d29c:	463b      	mov	r3, r7
 800d29e:	f7ff ff3d 	bl	800d11c <GUI__DispStringInRect>
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	f7fb fa6e 	bl	8008784 <WM_SetUserClipRect>
 800d2a8:	b002      	add	sp, #8
 800d2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d2ae <GUI_DispStringInRect>:
 800d2ae:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800d2b2:	f7ff bfd9 	b.w	800d268 <GUI_DispStringInRectMax>

0800d2b6 <GUI_WrapGetNumLines>:
 800d2b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2b8:	4605      	mov	r5, r0
 800d2ba:	460e      	mov	r6, r1
 800d2bc:	4617      	mov	r7, r2
 800d2be:	2400      	movs	r4, #0
 800d2c0:	4628      	mov	r0, r5
 800d2c2:	4631      	mov	r1, r6
 800d2c4:	463a      	mov	r2, r7
 800d2c6:	f004 f96d 	bl	80115a4 <GUI__WrapGetNumBytesToNextLine>
 800d2ca:	b110      	cbz	r0, 800d2d2 <GUI_WrapGetNumLines+0x1c>
 800d2cc:	4405      	add	r5, r0
 800d2ce:	3401      	adds	r4, #1
 800d2d0:	e7f6      	b.n	800d2c0 <GUI_WrapGetNumLines+0xa>
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d2d6 <GUI_DispStringInRectWrap>:
 800d2d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2da:	b089      	sub	sp, #36	; 0x24
 800d2dc:	460c      	mov	r4, r1
 800d2de:	9202      	str	r2, [sp, #8]
 800d2e0:	9303      	str	r3, [sp, #12]
 800d2e2:	4605      	mov	r5, r0
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	f000 8092 	beq.w	800d40e <GUI_DispStringInRectWrap+0x138>
 800d2ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800d2ee:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 800d2f2:	884e      	ldrh	r6, [r1, #2]
 800d2f4:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 800d2f8:	fa0f f289 	sxth.w	r2, r9
 800d2fc:	fa0f f38a 	sxth.w	r3, sl
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	3301      	adds	r3, #1
 800d304:	9301      	str	r3, [sp, #4]
 800d306:	f000 fe51 	bl	800dfac <GUI_GetFontDistY>
 800d30a:	9902      	ldr	r1, [sp, #8]
 800d30c:	f011 070c 	ands.w	r7, r1, #12
 800d310:	4680      	mov	r8, r0
 800d312:	d01b      	beq.n	800d34c <GUI_DispStringInRectWrap+0x76>
 800d314:	4628      	mov	r0, r5
 800d316:	9901      	ldr	r1, [sp, #4]
 800d318:	9a03      	ldr	r2, [sp, #12]
 800d31a:	f7ff ffcc 	bl	800d2b6 <GUI_WrapGetNumLines>
 800d31e:	2f08      	cmp	r7, #8
 800d320:	d003      	beq.n	800d32a <GUI_DispStringInRectWrap+0x54>
 800d322:	2f0c      	cmp	r7, #12
 800d324:	d006      	beq.n	800d334 <GUI_DispStringInRectWrap+0x5e>
 800d326:	2f04      	cmp	r7, #4
 800d328:	d110      	bne.n	800d34c <GUI_DispStringInRectWrap+0x76>
 800d32a:	f10b 0601 	add.w	r6, fp, #1
 800d32e:	fb00 6618 	mls	r6, r0, r8, r6
 800d332:	e00a      	b.n	800d34a <GUI_DispStringInRectWrap+0x74>
 800d334:	b232      	sxth	r2, r6
 800d336:	fa0f f38b 	sxth.w	r3, fp
 800d33a:	1a9b      	subs	r3, r3, r2
 800d33c:	3301      	adds	r3, #1
 800d33e:	fb08 3010 	mls	r0, r8, r0, r3
 800d342:	2302      	movs	r3, #2
 800d344:	fb90 f0f3 	sdiv	r0, r0, r3
 800d348:	4406      	add	r6, r0
 800d34a:	b2b6      	uxth	r6, r6
 800d34c:	4620      	mov	r0, r4
 800d34e:	f7fb fa19 	bl	8008784 <WM_SetUserClipRect>
 800d352:	4607      	mov	r7, r0
 800d354:	b178      	cbz	r0, 800d376 <GUI_DispStringInRectWrap+0xa0>
 800d356:	a804      	add	r0, sp, #16
 800d358:	4621      	mov	r1, r4
 800d35a:	463a      	mov	r2, r7
 800d35c:	f8ad a010 	strh.w	sl, [sp, #16]
 800d360:	f8ad 6012 	strh.w	r6, [sp, #18]
 800d364:	f8ad 9014 	strh.w	r9, [sp, #20]
 800d368:	f8ad b016 	strh.w	fp, [sp, #22]
 800d36c:	f7ff fa88 	bl	800c880 <GUI__IntersectRects>
 800d370:	a804      	add	r0, sp, #16
 800d372:	f7fb fa07 	bl	8008784 <WM_SetUserClipRect>
 800d376:	9901      	ldr	r1, [sp, #4]
 800d378:	9a03      	ldr	r2, [sp, #12]
 800d37a:	4628      	mov	r0, r5
 800d37c:	f004 f8e0 	bl	8011540 <GUI__WrapGetNumCharsDisp>
 800d380:	eb06 0b08 	add.w	fp, r6, r8
 800d384:	4602      	mov	r2, r0
 800d386:	fa1f fb8b 	uxth.w	fp, fp
 800d38a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d38e:	4611      	mov	r1, r2
 800d390:	4628      	mov	r0, r5
 800d392:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d396:	9200      	str	r2, [sp, #0]
 800d398:	f8ad a018 	strh.w	sl, [sp, #24]
 800d39c:	f8ad 601a 	strh.w	r6, [sp, #26]
 800d3a0:	f8ad 901c 	strh.w	r9, [sp, #28]
 800d3a4:	f000 fd7e 	bl	800dea4 <GUI__GetLineDistX>
 800d3a8:	9902      	ldr	r1, [sp, #8]
 800d3aa:	9a00      	ldr	r2, [sp, #0]
 800d3ac:	f001 0303 	and.w	r3, r1, #3
 800d3b0:	2b01      	cmp	r3, #1
 800d3b2:	d014      	beq.n	800d3de <GUI_DispStringInRectWrap+0x108>
 800d3b4:	2b02      	cmp	r3, #2
 800d3b6:	d004      	beq.n	800d3c2 <GUI_DispStringInRectWrap+0xec>
 800d3b8:	b9b3      	cbnz	r3, 800d3e8 <GUI_DispStringInRectWrap+0x112>
 800d3ba:	8823      	ldrh	r3, [r4, #0]
 800d3bc:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d3c0:	e012      	b.n	800d3e8 <GUI_DispStringInRectWrap+0x112>
 800d3c2:	8821      	ldrh	r1, [r4, #0]
 800d3c4:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 800d3c8:	b20e      	sxth	r6, r1
 800d3ca:	ebc6 060e 	rsb	r6, r6, lr
 800d3ce:	1a30      	subs	r0, r6, r0
 800d3d0:	3001      	adds	r0, #1
 800d3d2:	fb90 f3f3 	sdiv	r3, r0, r3
 800d3d6:	4419      	add	r1, r3
 800d3d8:	f8ad 1018 	strh.w	r1, [sp, #24]
 800d3dc:	e004      	b.n	800d3e8 <GUI_DispStringInRectWrap+0x112>
 800d3de:	88a3      	ldrh	r3, [r4, #4]
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	1a18      	subs	r0, r3, r0
 800d3e4:	f8ad 0018 	strh.w	r0, [sp, #24]
 800d3e8:	4628      	mov	r0, r5
 800d3ea:	4611      	mov	r1, r2
 800d3ec:	aa06      	add	r2, sp, #24
 800d3ee:	f000 fd89 	bl	800df04 <GUI__DispLine>
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	9901      	ldr	r1, [sp, #4]
 800d3f6:	9a03      	ldr	r2, [sp, #12]
 800d3f8:	f004 f8d4 	bl	80115a4 <GUI__WrapGetNumBytesToNextLine>
 800d3fc:	4405      	add	r5, r0
 800d3fe:	fa1f f68b 	uxth.w	r6, fp
 800d402:	782b      	ldrb	r3, [r5, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d1b6      	bne.n	800d376 <GUI_DispStringInRectWrap+0xa0>
 800d408:	4638      	mov	r0, r7
 800d40a:	f7fb f9bb 	bl	8008784 <WM_SetUserClipRect>
 800d40e:	b009      	add	sp, #36	; 0x24
 800d410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d414 <GUI_DEVICE__GetpDriver>:
 800d414:	2801      	cmp	r0, #1
 800d416:	dc09      	bgt.n	800d42c <GUI_DEVICE__GetpDriver+0x18>
 800d418:	4b05      	ldr	r3, [pc, #20]	; (800d430 <GUI_DEVICE__GetpDriver+0x1c>)
 800d41a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800d41e:	b120      	cbz	r0, 800d42a <GUI_DEVICE__GetpDriver+0x16>
 800d420:	68c3      	ldr	r3, [r0, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	b11b      	cbz	r3, 800d42e <GUI_DEVICE__GetpDriver+0x1a>
 800d426:	6800      	ldr	r0, [r0, #0]
 800d428:	e7f9      	b.n	800d41e <GUI_DEVICE__GetpDriver+0xa>
 800d42a:	4770      	bx	lr
 800d42c:	2000      	movs	r0, #0
 800d42e:	4770      	bx	lr
 800d430:	20007738 	.word	0x20007738

0800d434 <GUI_DEVICE_Delete>:
 800d434:	f001 bd14 	b.w	800ee60 <GUI_ALLOC_FreeFixedBlock>

0800d438 <GUI_DEVICE_Create>:
 800d438:	2b01      	cmp	r3, #1
 800d43a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d43c:	4606      	mov	r6, r0
 800d43e:	460d      	mov	r5, r1
 800d440:	4617      	mov	r7, r2
 800d442:	461c      	mov	r4, r3
 800d444:	dd01      	ble.n	800d44a <GUI_DEVICE_Create+0x12>
 800d446:	2000      	movs	r0, #0
 800d448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d44a:	201c      	movs	r0, #28
 800d44c:	f001 fdec 	bl	800f028 <GUI_ALLOC_GetFixedBlock>
 800d450:	2800      	cmp	r0, #0
 800d452:	d0f8      	beq.n	800d446 <GUI_DEVICE_Create+0xe>
 800d454:	b10d      	cbz	r5, 800d45a <GUI_DEVICE_Create+0x22>
 800d456:	6105      	str	r5, [r0, #16]
 800d458:	e009      	b.n	800d46e <GUI_DEVICE_Create+0x36>
 800d45a:	4b09      	ldr	r3, [pc, #36]	; (800d480 <GUI_DEVICE_Create+0x48>)
 800d45c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800d460:	b129      	cbz	r1, 800d46e <GUI_DEVICE_Create+0x36>
 800d462:	680b      	ldr	r3, [r1, #0]
 800d464:	b10b      	cbz	r3, 800d46a <GUI_DEVICE_Create+0x32>
 800d466:	4619      	mov	r1, r3
 800d468:	e7fb      	b.n	800d462 <GUI_DEVICE_Create+0x2a>
 800d46a:	690b      	ldr	r3, [r1, #16]
 800d46c:	6103      	str	r3, [r0, #16]
 800d46e:	2300      	movs	r3, #0
 800d470:	6083      	str	r3, [r0, #8]
 800d472:	6184      	str	r4, [r0, #24]
 800d474:	8287      	strh	r7, [r0, #20]
 800d476:	60c6      	str	r6, [r0, #12]
 800d478:	6003      	str	r3, [r0, #0]
 800d47a:	6043      	str	r3, [r0, #4]
 800d47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d47e:	bf00      	nop
 800d480:	20007738 	.word	0x20007738

0800d484 <GUI_DEVICE_Unlink>:
 800d484:	6981      	ldr	r1, [r0, #24]
 800d486:	4a0b      	ldr	r2, [pc, #44]	; (800d4b4 <GUI_DEVICE_Unlink+0x30>)
 800d488:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d48c:	4283      	cmp	r3, r0
 800d48e:	d105      	bne.n	800d49c <GUI_DEVICE_Unlink+0x18>
 800d490:	6803      	ldr	r3, [r0, #0]
 800d492:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d496:	b10b      	cbz	r3, 800d49c <GUI_DEVICE_Unlink+0x18>
 800d498:	2200      	movs	r2, #0
 800d49a:	605a      	str	r2, [r3, #4]
 800d49c:	6843      	ldr	r3, [r0, #4]
 800d49e:	b10b      	cbz	r3, 800d4a4 <GUI_DEVICE_Unlink+0x20>
 800d4a0:	6802      	ldr	r2, [r0, #0]
 800d4a2:	601a      	str	r2, [r3, #0]
 800d4a4:	6802      	ldr	r2, [r0, #0]
 800d4a6:	b102      	cbz	r2, 800d4aa <GUI_DEVICE_Unlink+0x26>
 800d4a8:	6053      	str	r3, [r2, #4]
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	6003      	str	r3, [r0, #0]
 800d4ae:	6043      	str	r3, [r0, #4]
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	20007738 	.word	0x20007738

0800d4b8 <GUI_DEVICE_Link>:
 800d4b8:	b570      	push	{r4, r5, r6, lr}
 800d4ba:	b908      	cbnz	r0, 800d4c0 <GUI_DEVICE_Link+0x8>
 800d4bc:	2001      	movs	r0, #1
 800d4be:	bd70      	pop	{r4, r5, r6, pc}
 800d4c0:	6982      	ldr	r2, [r0, #24]
 800d4c2:	2a01      	cmp	r2, #1
 800d4c4:	dcfa      	bgt.n	800d4bc <GUI_DEVICE_Link+0x4>
 800d4c6:	4b1b      	ldr	r3, [pc, #108]	; (800d534 <GUI_DEVICE_Link+0x7c>)
 800d4c8:	7819      	ldrb	r1, [r3, #0]
 800d4ca:	428a      	cmp	r2, r1
 800d4cc:	bfa4      	itt	ge
 800d4ce:	1c51      	addge	r1, r2, #1
 800d4d0:	7019      	strbge	r1, [r3, #0]
 800d4d2:	4919      	ldr	r1, [pc, #100]	; (800d538 <GUI_DEVICE_Link+0x80>)
 800d4d4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800d4d8:	460d      	mov	r5, r1
 800d4da:	b913      	cbnz	r3, 800d4e2 <GUI_DEVICE_Link+0x2a>
 800d4dc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800d4e0:	e01a      	b.n	800d518 <GUI_DEVICE_Link+0x60>
 800d4e2:	6859      	ldr	r1, [r3, #4]
 800d4e4:	b109      	cbz	r1, 800d4ea <GUI_DEVICE_Link+0x32>
 800d4e6:	460b      	mov	r3, r1
 800d4e8:	e7fb      	b.n	800d4e2 <GUI_DEVICE_Link+0x2a>
 800d4ea:	68c1      	ldr	r1, [r0, #12]
 800d4ec:	680e      	ldr	r6, [r1, #0]
 800d4ee:	68d9      	ldr	r1, [r3, #12]
 800d4f0:	680c      	ldr	r4, [r1, #0]
 800d4f2:	42b4      	cmp	r4, r6
 800d4f4:	dd03      	ble.n	800d4fe <GUI_DEVICE_Link+0x46>
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1f8      	bne.n	800d4ee <GUI_DEVICE_Link+0x36>
 800d4fc:	e7de      	b.n	800d4bc <GUI_DEVICE_Link+0x4>
 800d4fe:	d102      	bne.n	800d506 <GUI_DEVICE_Link+0x4e>
 800d500:	8a81      	ldrh	r1, [r0, #20]
 800d502:	2901      	cmp	r1, #1
 800d504:	d00f      	beq.n	800d526 <GUI_DEVICE_Link+0x6e>
 800d506:	6859      	ldr	r1, [r3, #4]
 800d508:	b189      	cbz	r1, 800d52e <GUI_DEVICE_Link+0x76>
 800d50a:	6008      	str	r0, [r1, #0]
 800d50c:	6041      	str	r1, [r0, #4]
 800d50e:	6058      	str	r0, [r3, #4]
 800d510:	4298      	cmp	r0, r3
 800d512:	bf08      	it	eq
 800d514:	2300      	moveq	r3, #0
 800d516:	6003      	str	r3, [r0, #0]
 800d518:	2000      	movs	r0, #0
 800d51a:	bd70      	pop	{r4, r5, r6, pc}
 800d51c:	68cb      	ldr	r3, [r1, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	42a3      	cmp	r3, r4
 800d522:	460b      	mov	r3, r1
 800d524:	dbef      	blt.n	800d506 <GUI_DEVICE_Link+0x4e>
 800d526:	6819      	ldr	r1, [r3, #0]
 800d528:	2900      	cmp	r1, #0
 800d52a:	d1f7      	bne.n	800d51c <GUI_DEVICE_Link+0x64>
 800d52c:	e7eb      	b.n	800d506 <GUI_DEVICE_Link+0x4e>
 800d52e:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 800d532:	e7ec      	b.n	800d50e <GUI_DEVICE_Link+0x56>
 800d534:	200076e6 	.word	0x200076e6
 800d538:	20007738 	.word	0x20007738

0800d53c <GUI_DEVICE_CreateAndLink>:
 800d53c:	b538      	push	{r3, r4, r5, lr}
 800d53e:	461d      	mov	r5, r3
 800d540:	f7ff ff7a 	bl	800d438 <GUI_DEVICE_Create>
 800d544:	4604      	mov	r4, r0
 800d546:	b148      	cbz	r0, 800d55c <GUI_DEVICE_CreateAndLink+0x20>
 800d548:	f7ff ffb6 	bl	800d4b8 <GUI_DEVICE_Link>
 800d54c:	68e3      	ldr	r3, [r4, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	b923      	cbnz	r3, 800d55c <GUI_DEVICE_CreateAndLink+0x20>
 800d552:	4b03      	ldr	r3, [pc, #12]	; (800d560 <GUI_DEVICE_CreateAndLink+0x24>)
 800d554:	3516      	adds	r5, #22
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 800d55c:	4620      	mov	r0, r4
 800d55e:	bd38      	pop	{r3, r4, r5, pc}
 800d560:	20000084 	.word	0x20000084

0800d564 <_OnExit>:
 800d564:	b570      	push	{r4, r5, r6, lr}
 800d566:	4b0b      	ldr	r3, [pc, #44]	; (800d594 <_OnExit+0x30>)
 800d568:	4e0b      	ldr	r6, [pc, #44]	; (800d598 <_OnExit+0x34>)
 800d56a:	4d0c      	ldr	r5, [pc, #48]	; (800d59c <_OnExit+0x38>)
 800d56c:	2400      	movs	r4, #0
 800d56e:	601c      	str	r4, [r3, #0]
 800d570:	4621      	mov	r1, r4
 800d572:	6833      	ldr	r3, [r6, #0]
 800d574:	2270      	movs	r2, #112	; 0x70
 800d576:	4628      	mov	r0, r5
 800d578:	4798      	blx	r3
 800d57a:	6833      	ldr	r3, [r6, #0]
 800d57c:	4808      	ldr	r0, [pc, #32]	; (800d5a0 <_OnExit+0x3c>)
 800d57e:	4621      	mov	r1, r4
 800d580:	2208      	movs	r2, #8
 800d582:	4798      	blx	r3
 800d584:	4b07      	ldr	r3, [pc, #28]	; (800d5a4 <_OnExit+0x40>)
 800d586:	601d      	str	r5, [r3, #0]
 800d588:	4b07      	ldr	r3, [pc, #28]	; (800d5a8 <_OnExit+0x44>)
 800d58a:	701c      	strb	r4, [r3, #0]
 800d58c:	4b07      	ldr	r3, [pc, #28]	; (800d5ac <_OnExit+0x48>)
 800d58e:	601c      	str	r4, [r3, #0]
 800d590:	bd70      	pop	{r4, r5, r6, pc}
 800d592:	bf00      	nop
 800d594:	20002b3c 	.word	0x20002b3c
 800d598:	20000070 	.word	0x20000070
 800d59c:	20002acc 	.word	0x20002acc
 800d5a0:	20007738 	.word	0x20007738
 800d5a4:	20000084 	.word	0x20000084
 800d5a8:	20007720 	.word	0x20007720
 800d5ac:	200076f8 	.word	0x200076f8

0800d5b0 <_InitContext>:
 800d5b0:	b538      	push	{r3, r4, r5, lr}
 800d5b2:	4d19      	ldr	r5, [pc, #100]	; (800d618 <_InitContext+0x68>)
 800d5b4:	682b      	ldr	r3, [r5, #0]
 800d5b6:	1d1a      	adds	r2, r3, #4
 800d5b8:	63da      	str	r2, [r3, #60]	; 0x3c
 800d5ba:	f103 0208 	add.w	r2, r3, #8
 800d5be:	639b      	str	r3, [r3, #56]	; 0x38
 800d5c0:	641b      	str	r3, [r3, #64]	; 0x40
 800d5c2:	6142      	str	r2, [r0, #20]
 800d5c4:	7c5a      	ldrb	r2, [r3, #17]
 800d5c6:	4b15      	ldr	r3, [pc, #84]	; (800d61c <_InitContext+0x6c>)
 800d5c8:	4604      	mov	r4, r0
 800d5ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d5ce:	68c3      	ldr	r3, [r0, #12]
 800d5d0:	f104 0108 	add.w	r1, r4, #8
 800d5d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5d6:	4798      	blx	r3
 800d5d8:	4b11      	ldr	r3, [pc, #68]	; (800d620 <_InitContext+0x70>)
 800d5da:	6663      	str	r3, [r4, #100]	; 0x64
 800d5dc:	4b11      	ldr	r3, [pc, #68]	; (800d624 <_InitContext+0x74>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	61e3      	str	r3, [r4, #28]
 800d5e2:	682b      	ldr	r3, [r5, #0]
 800d5e4:	3308      	adds	r3, #8
 800d5e6:	6163      	str	r3, [r4, #20]
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	7623      	strb	r3, [r4, #24]
 800d5ec:	f7fa fe98 	bl	8008320 <WM_GetDesktopWindow>
 800d5f0:	2303      	movs	r3, #3
 800d5f2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800d5f6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800d5fa:	6323      	str	r3, [r4, #48]	; 0x30
 800d5fc:	6363      	str	r3, [r4, #52]	; 0x34
 800d5fe:	4b0a      	ldr	r3, [pc, #40]	; (800d628 <_InitContext+0x78>)
 800d600:	64a0      	str	r0, [r4, #72]	; 0x48
 800d602:	6818      	ldr	r0, [r3, #0]
 800d604:	f7ff f8fa 	bl	800c7fc <LCD_SetBkColor>
 800d608:	4b08      	ldr	r3, [pc, #32]	; (800d62c <_InitContext+0x7c>)
 800d60a:	6818      	ldr	r0, [r3, #0]
 800d60c:	f7ff f8fe 	bl	800c80c <LCD_SetColor>
 800d610:	4b07      	ldr	r3, [pc, #28]	; (800d630 <_InitContext+0x80>)
 800d612:	4a08      	ldr	r2, [pc, #32]	; (800d634 <_InitContext+0x84>)
 800d614:	601a      	str	r2, [r3, #0]
 800d616:	bd38      	pop	{r3, r4, r5, pc}
 800d618:	20000084 	.word	0x20000084
 800d61c:	20007738 	.word	0x20007738
 800d620:	080142a4 	.word	0x080142a4
 800d624:	20000088 	.word	0x20000088
 800d628:	20002ac8 	.word	0x20002ac8
 800d62c:	2000008c 	.word	0x2000008c
 800d630:	20007730 	.word	0x20007730
 800d634:	08014dcc 	.word	0x08014dcc

0800d638 <GUI_SetDefaultFont>:
 800d638:	4b01      	ldr	r3, [pc, #4]	; (800d640 <GUI_SetDefaultFont+0x8>)
 800d63a:	6018      	str	r0, [r3, #0]
 800d63c:	4770      	bx	lr
 800d63e:	bf00      	nop
 800d640:	20000088 	.word	0x20000088

0800d644 <GUI_ClearRect>:
 800d644:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800d648:	4607      	mov	r7, r0
 800d64a:	2004      	movs	r0, #4
 800d64c:	469a      	mov	sl, r3
 800d64e:	460e      	mov	r6, r1
 800d650:	4691      	mov	r9, r2
 800d652:	f7fe fd81 	bl	800c158 <LCD_SetDrawMode>
 800d656:	4b13      	ldr	r3, [pc, #76]	; (800d6a4 <GUI_ClearRect+0x60>)
 800d658:	681c      	ldr	r4, [r3, #0]
 800d65a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800d65c:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800d65e:	442f      	add	r7, r5
 800d660:	4426      	add	r6, r4
 800d662:	4680      	mov	r8, r0
 800d664:	444d      	add	r5, r9
 800d666:	4454      	add	r4, sl
 800d668:	4668      	mov	r0, sp
 800d66a:	f8ad 7000 	strh.w	r7, [sp]
 800d66e:	f8ad 5004 	strh.w	r5, [sp, #4]
 800d672:	f8ad 6002 	strh.w	r6, [sp, #2]
 800d676:	f8ad 4006 	strh.w	r4, [sp, #6]
 800d67a:	f7fc f899 	bl	80097b0 <WM__InitIVRSearch>
 800d67e:	b928      	cbnz	r0, 800d68c <GUI_ClearRect+0x48>
 800d680:	4640      	mov	r0, r8
 800d682:	f7fe fd69 	bl	800c158 <LCD_SetDrawMode>
 800d686:	b002      	add	sp, #8
 800d688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d68c:	4638      	mov	r0, r7
 800d68e:	4631      	mov	r1, r6
 800d690:	462a      	mov	r2, r5
 800d692:	4623      	mov	r3, r4
 800d694:	f7fe fde2 	bl	800c25c <LCD_FillRect>
 800d698:	f7fb ffc8 	bl	800962c <WM__GetNextIVR>
 800d69c:	2800      	cmp	r0, #0
 800d69e:	d1f5      	bne.n	800d68c <GUI_ClearRect+0x48>
 800d6a0:	e7ee      	b.n	800d680 <GUI_ClearRect+0x3c>
 800d6a2:	bf00      	nop
 800d6a4:	20000084 	.word	0x20000084

0800d6a8 <GUI_Clear>:
 800d6a8:	b510      	push	{r4, lr}
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	4601      	mov	r1, r0
 800d6ae:	f000 f949 	bl	800d944 <GUI_GotoXY>
 800d6b2:	4804      	ldr	r0, [pc, #16]	; (800d6c4 <GUI_Clear+0x1c>)
 800d6b4:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800d6b8:	4601      	mov	r1, r0
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6c0:	f7ff bfc0 	b.w	800d644 <GUI_ClearRect>
 800d6c4:	ffffc001 	.word	0xffffc001

0800d6c8 <GUI__RegisterExit>:
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	4b05      	ldr	r3, [pc, #20]	; (800d6e8 <GUI__RegisterExit+0x20>)
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	605a      	str	r2, [r3, #4]
 800d6d8:	4b03      	ldr	r3, [pc, #12]	; (800d6e8 <GUI__RegisterExit+0x20>)
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	601a      	str	r2, [r3, #0]
 800d6de:	370c      	adds	r7, #12
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr
 800d6e8:	20002abc 	.word	0x20002abc

0800d6ec <GUI__Config>:
 800d6ec:	b508      	push	{r3, lr}
 800d6ee:	4b08      	ldr	r3, [pc, #32]	; (800d710 <GUI__Config+0x24>)
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	b962      	cbnz	r2, 800d70e <GUI__Config+0x22>
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	601a      	str	r2, [r3, #0]
 800d6f8:	f7f2 ff42 	bl	8000580 <GUI_X_Config>
 800d6fc:	f7f3 f918 	bl	8000930 <LCD_X_Config>
 800d700:	4804      	ldr	r0, [pc, #16]	; (800d714 <GUI__Config+0x28>)
 800d702:	4b05      	ldr	r3, [pc, #20]	; (800d718 <GUI__Config+0x2c>)
 800d704:	6003      	str	r3, [r0, #0]
 800d706:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d70a:	f7ff bfdd 	b.w	800d6c8 <GUI__RegisterExit>
 800d70e:	bd08      	pop	{r3, pc}
 800d710:	20002b3c 	.word	0x20002b3c
 800d714:	20002ac0 	.word	0x20002ac0
 800d718:	0800d565 	.word	0x0800d565

0800d71c <GUI_Init>:
 800d71c:	b590      	push	{r4, r7, lr}
 800d71e:	b083      	sub	sp, #12
 800d720:	af00      	add	r7, sp, #0
 800d722:	4b26      	ldr	r3, [pc, #152]	; (800d7bc <GUI_Init+0xa0>)
 800d724:	4a25      	ldr	r2, [pc, #148]	; (800d7bc <GUI_Init+0xa0>)
 800d726:	6812      	ldr	r2, [r2, #0]
 800d728:	f022 0201 	bic.w	r2, r2, #1
 800d72c:	601a      	str	r2, [r3, #0]
 800d72e:	4b24      	ldr	r3, [pc, #144]	; (800d7c0 <GUI_Init+0xa4>)
 800d730:	2201      	movs	r2, #1
 800d732:	601a      	str	r2, [r3, #0]
 800d734:	bf00      	nop
 800d736:	4b22      	ldr	r3, [pc, #136]	; (800d7c0 <GUI_Init+0xa4>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d1fb      	bne.n	800d736 <GUI_Init+0x1a>
 800d73e:	4b21      	ldr	r3, [pc, #132]	; (800d7c4 <GUI_Init+0xa8>)
 800d740:	4a21      	ldr	r2, [pc, #132]	; (800d7c8 <GUI_Init+0xac>)
 800d742:	601a      	str	r2, [r3, #0]
 800d744:	4b1f      	ldr	r3, [pc, #124]	; (800d7c4 <GUI_Init+0xa8>)
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	4b20      	ldr	r3, [pc, #128]	; (800d7cc <GUI_Init+0xb0>)
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d000      	beq.n	800d750 <GUI_Init+0x34>
 800d74e:	e7fe      	b.n	800d74e <GUI_Init+0x32>
 800d750:	f7ff ffcc 	bl	800d6ec <GUI__Config>
 800d754:	4b1e      	ldr	r3, [pc, #120]	; (800d7d0 <GUI_Init+0xb4>)
 800d756:	222e      	movs	r2, #46	; 0x2e
 800d758:	701a      	strb	r2, [r3, #0]
 800d75a:	f7f2 ff21 	bl	80005a0 <GUI_X_Init>
 800d75e:	481d      	ldr	r0, [pc, #116]	; (800d7d4 <GUI_Init+0xb8>)
 800d760:	f7ff ff26 	bl	800d5b0 <_InitContext>
 800d764:	f7fe ff9e 	bl	800c6a4 <emWin_LCD_Init>
 800d768:	6078      	str	r0, [r7, #4]
 800d76a:	f7fe fc7f 	bl	800c06c <LCD_GetXSizeDisplay>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d004      	beq.n	800d77e <GUI_Init+0x62>
 800d774:	f7fe fc80 	bl	800c078 <LCD_GetYSizeDisplay>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d109      	bne.n	800d792 <GUI_Init+0x76>
 800d77e:	f7fe fc61 	bl	800c044 <LCD_GetXSizeMax>
 800d782:	4604      	mov	r4, r0
 800d784:	f7fe fc61 	bl	800c04a <LCD_GetYSizeMax>
 800d788:	4603      	mov	r3, r0
 800d78a:	4620      	mov	r0, r4
 800d78c:	4619      	mov	r1, r3
 800d78e:	f7fe fc63 	bl	800c058 <LCD_SetDisplaySize>
 800d792:	2000      	movs	r0, #0
 800d794:	2100      	movs	r1, #0
 800d796:	f000 f939 	bl	800da0c <GUI_SetOrg>
 800d79a:	f7fc fa15 	bl	8009bc8 <WM_Init>
 800d79e:	4b0e      	ldr	r3, [pc, #56]	; (800d7d8 <GUI_Init+0xbc>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d002      	beq.n	800d7ac <GUI_Init+0x90>
 800d7a6:	4b0c      	ldr	r3, [pc, #48]	; (800d7d8 <GUI_Init+0xbc>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4798      	blx	r3
 800d7ac:	4b0b      	ldr	r3, [pc, #44]	; (800d7dc <GUI_Init+0xc0>)
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	701a      	strb	r2, [r3, #0]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	370c      	adds	r7, #12
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd90      	pop	{r4, r7, pc}
 800d7bc:	e0002000 	.word	0xe0002000
 800d7c0:	40023008 	.word	0x40023008
 800d7c4:	40023000 	.word	0x40023000
 800d7c8:	f407a5c2 	.word	0xf407a5c2
 800d7cc:	b5e8b5cd 	.word	0xb5e8b5cd
 800d7d0:	200076ec 	.word	0x200076ec
 800d7d4:	20002acc 	.word	0x20002acc
 800d7d8:	20007710 	.word	0x20007710
 800d7dc:	20007718 	.word	0x20007718

0800d7e0 <GUI_CalcColorDist>:
 800d7e0:	b2cb      	uxtb	r3, r1
 800d7e2:	b2c2      	uxtb	r2, r0
 800d7e4:	1ad2      	subs	r2, r2, r3
 800d7e6:	b292      	uxth	r2, r2
 800d7e8:	b293      	uxth	r3, r2
 800d7ea:	b530      	push	{r4, r5, lr}
 800d7ec:	041c      	lsls	r4, r3, #16
 800d7ee:	bf48      	it	mi
 800d7f0:	4253      	negmi	r3, r2
 800d7f2:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800d7f6:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800d7fa:	ebc5 0202 	rsb	r2, r5, r2
 800d7fe:	bf48      	it	mi
 800d800:	b29b      	uxthmi	r3, r3
 800d802:	b292      	uxth	r2, r2
 800d804:	0c09      	lsrs	r1, r1, #16
 800d806:	fb13 f403 	smulbb	r4, r3, r3
 800d80a:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 800d80e:	b293      	uxth	r3, r2
 800d810:	041d      	lsls	r5, r3, #16
 800d812:	b289      	uxth	r1, r1
 800d814:	b288      	uxth	r0, r1
 800d816:	bf44      	itt	mi
 800d818:	4253      	negmi	r3, r2
 800d81a:	b29b      	uxthmi	r3, r3
 800d81c:	0402      	lsls	r2, r0, #16
 800d81e:	bf48      	it	mi
 800d820:	4248      	negmi	r0, r1
 800d822:	fb13 4303 	smlabb	r3, r3, r3, r4
 800d826:	bf48      	it	mi
 800d828:	b280      	uxthmi	r0, r0
 800d82a:	fb00 3000 	mla	r0, r0, r0, r3
 800d82e:	bd30      	pop	{r4, r5, pc}

0800d830 <GUI_GetClientRect>:
 800d830:	b108      	cbz	r0, 800d836 <GUI_GetClientRect+0x6>
 800d832:	f7fa bd59 	b.w	80082e8 <WM_GetClientRect>
 800d836:	4770      	bx	lr

0800d838 <GUI_GetBkColor>:
 800d838:	b508      	push	{r3, lr}
 800d83a:	f003 fd89 	bl	8011350 <LCD_GetBkColorIndex>
 800d83e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d842:	f7fe bf93 	b.w	800c76c <LCD_Index2Color>

0800d846 <GUI_GetColor>:
 800d846:	b508      	push	{r3, lr}
 800d848:	f003 fd8a 	bl	8011360 <LCD_GetColorIndex>
 800d84c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d850:	f7fe bf8c 	b.w	800c76c <LCD_Index2Color>

0800d854 <GUI_GetOrg>:
 800d854:	4b04      	ldr	r3, [pc, #16]	; (800d868 <GUI_GetOrg+0x14>)
 800d856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d85a:	6003      	str	r3, [r0, #0]
 800d85c:	4b03      	ldr	r3, [pc, #12]	; (800d86c <GUI_GetOrg+0x18>)
 800d85e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d862:	600b      	str	r3, [r1, #0]
 800d864:	4770      	bx	lr
 800d866:	bf00      	nop
 800d868:	2000770c 	.word	0x2000770c
 800d86c:	200076fc 	.word	0x200076fc

0800d870 <GUI_GetYSizeOfFont>:
 800d870:	7e02      	ldrb	r2, [r0, #24]
 800d872:	7ec0      	ldrb	r0, [r0, #27]
 800d874:	4350      	muls	r0, r2
 800d876:	4770      	bx	lr

0800d878 <GUI_MergeRect>:
 800d878:	b510      	push	{r4, lr}
 800d87a:	b338      	cbz	r0, 800d8cc <GUI_MergeRect+0x54>
 800d87c:	b309      	cbz	r1, 800d8c2 <GUI_MergeRect+0x4a>
 800d87e:	b30a      	cbz	r2, 800d8c4 <GUI_MergeRect+0x4c>
 800d880:	f9b1 4000 	ldrsh.w	r4, [r1]
 800d884:	f9b2 3000 	ldrsh.w	r3, [r2]
 800d888:	429c      	cmp	r4, r3
 800d88a:	bfb8      	it	lt
 800d88c:	4623      	movlt	r3, r4
 800d88e:	8003      	strh	r3, [r0, #0]
 800d890:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800d894:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800d898:	429c      	cmp	r4, r3
 800d89a:	bfb8      	it	lt
 800d89c:	4623      	movlt	r3, r4
 800d89e:	8043      	strh	r3, [r0, #2]
 800d8a0:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800d8a4:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800d8a8:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800d8ac:	429c      	cmp	r4, r3
 800d8ae:	bfa8      	it	ge
 800d8b0:	4623      	movge	r3, r4
 800d8b2:	8083      	strh	r3, [r0, #4]
 800d8b4:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800d8b8:	4299      	cmp	r1, r3
 800d8ba:	bfa8      	it	ge
 800d8bc:	460b      	movge	r3, r1
 800d8be:	80c3      	strh	r3, [r0, #6]
 800d8c0:	bd10      	pop	{r4, pc}
 800d8c2:	4611      	mov	r1, r2
 800d8c4:	680b      	ldr	r3, [r1, #0]
 800d8c6:	6003      	str	r3, [r0, #0]
 800d8c8:	684b      	ldr	r3, [r1, #4]
 800d8ca:	6043      	str	r3, [r0, #4]
 800d8cc:	bd10      	pop	{r4, pc}

0800d8ce <GUI_MoveRect>:
 800d8ce:	b168      	cbz	r0, 800d8ec <GUI_MoveRect+0x1e>
 800d8d0:	8803      	ldrh	r3, [r0, #0]
 800d8d2:	b289      	uxth	r1, r1
 800d8d4:	440b      	add	r3, r1
 800d8d6:	8003      	strh	r3, [r0, #0]
 800d8d8:	8883      	ldrh	r3, [r0, #4]
 800d8da:	4419      	add	r1, r3
 800d8dc:	8843      	ldrh	r3, [r0, #2]
 800d8de:	8081      	strh	r1, [r0, #4]
 800d8e0:	b292      	uxth	r2, r2
 800d8e2:	4413      	add	r3, r2
 800d8e4:	8043      	strh	r3, [r0, #2]
 800d8e6:	88c3      	ldrh	r3, [r0, #6]
 800d8e8:	441a      	add	r2, r3
 800d8ea:	80c2      	strh	r2, [r0, #6]
 800d8ec:	4770      	bx	lr
	...

0800d8f0 <GUI_Exec1>:
 800d8f0:	4b0c      	ldr	r3, [pc, #48]	; (800d924 <GUI_Exec1+0x34>)
 800d8f2:	b510      	push	{r4, lr}
 800d8f4:	681c      	ldr	r4, [r3, #0]
 800d8f6:	b11c      	cbz	r4, 800d900 <GUI_Exec1+0x10>
 800d8f8:	47a0      	blx	r4
 800d8fa:	1c04      	adds	r4, r0, #0
 800d8fc:	bf18      	it	ne
 800d8fe:	2401      	movne	r4, #1
 800d900:	f7fc f8bc 	bl	8009a7c <WM_Exec>
 800d904:	4b08      	ldr	r3, [pc, #32]	; (800d928 <GUI_Exec1+0x38>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2800      	cmp	r0, #0
 800d90a:	bf18      	it	ne
 800d90c:	2401      	movne	r4, #1
 800d90e:	b11b      	cbz	r3, 800d918 <GUI_Exec1+0x28>
 800d910:	4798      	blx	r3
 800d912:	2800      	cmp	r0, #0
 800d914:	bf18      	it	ne
 800d916:	2401      	movne	r4, #1
 800d918:	4b04      	ldr	r3, [pc, #16]	; (800d92c <GUI_Exec1+0x3c>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	b103      	cbz	r3, 800d920 <GUI_Exec1+0x30>
 800d91e:	4798      	blx	r3
 800d920:	4620      	mov	r0, r4
 800d922:	bd10      	pop	{r4, pc}
 800d924:	20007708 	.word	0x20007708
 800d928:	20007734 	.word	0x20007734
 800d92c:	2000772c 	.word	0x2000772c

0800d930 <GUI_Exec>:
 800d930:	b510      	push	{r4, lr}
 800d932:	2400      	movs	r4, #0
 800d934:	f7ff ffdc 	bl	800d8f0 <GUI_Exec1>
 800d938:	b108      	cbz	r0, 800d93e <GUI_Exec+0xe>
 800d93a:	2401      	movs	r4, #1
 800d93c:	e7fa      	b.n	800d934 <GUI_Exec+0x4>
 800d93e:	4620      	mov	r0, r4
 800d940:	bd10      	pop	{r4, pc}
	...

0800d944 <GUI_GotoXY>:
 800d944:	4b02      	ldr	r3, [pc, #8]	; (800d950 <GUI_GotoXY+0xc>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	8458      	strh	r0, [r3, #34]	; 0x22
 800d94a:	8499      	strh	r1, [r3, #36]	; 0x24
 800d94c:	2000      	movs	r0, #0
 800d94e:	4770      	bx	lr
 800d950:	20000084 	.word	0x20000084

0800d954 <GUI_SetPenSize>:
 800d954:	4b02      	ldr	r3, [pc, #8]	; (800d960 <GUI_SetPenSize+0xc>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	7e1a      	ldrb	r2, [r3, #24]
 800d95a:	7618      	strb	r0, [r3, #24]
 800d95c:	4610      	mov	r0, r2
 800d95e:	4770      	bx	lr
 800d960:	20000084 	.word	0x20000084

0800d964 <GUI_RectsIntersect>:
 800d964:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d968:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	dc14      	bgt.n	800d99a <GUI_RectsIntersect+0x36>
 800d970:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800d974:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800d978:	429a      	cmp	r2, r3
 800d97a:	dc0e      	bgt.n	800d99a <GUI_RectsIntersect+0x36>
 800d97c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d980:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800d984:	429a      	cmp	r2, r3
 800d986:	dc08      	bgt.n	800d99a <GUI_RectsIntersect+0x36>
 800d988:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d98c:	f9b1 2000 	ldrsh.w	r2, [r1]
 800d990:	429a      	cmp	r2, r3
 800d992:	bfcc      	ite	gt
 800d994:	2000      	movgt	r0, #0
 800d996:	2001      	movle	r0, #1
 800d998:	4770      	bx	lr
 800d99a:	2000      	movs	r0, #0
 800d99c:	4770      	bx	lr
	...

0800d9a0 <GUI_SaveContext_W>:
 800d9a0:	b508      	push	{r3, lr}
 800d9a2:	4b03      	ldr	r3, [pc, #12]	; (800d9b0 <GUI_SaveContext_W+0x10>)
 800d9a4:	2270      	movs	r2, #112	; 0x70
 800d9a6:	6819      	ldr	r1, [r3, #0]
 800d9a8:	f004 fc02 	bl	80121b0 <memcpy>
 800d9ac:	bd08      	pop	{r3, pc}
 800d9ae:	bf00      	nop
 800d9b0:	20000084 	.word	0x20000084

0800d9b4 <GUI_RestoreContext>:
 800d9b4:	b508      	push	{r3, lr}
 800d9b6:	4b03      	ldr	r3, [pc, #12]	; (800d9c4 <GUI_RestoreContext+0x10>)
 800d9b8:	4601      	mov	r1, r0
 800d9ba:	2270      	movs	r2, #112	; 0x70
 800d9bc:	6818      	ldr	r0, [r3, #0]
 800d9be:	f004 fbf7 	bl	80121b0 <memcpy>
 800d9c2:	bd08      	pop	{r3, pc}
 800d9c4:	20000084 	.word	0x20000084

0800d9c8 <GUI_SelectLCD>:
 800d9c8:	b508      	push	{r3, lr}
 800d9ca:	f003 fb7d 	bl	80110c8 <LCD_SelectLCD>
 800d9ce:	f7fe fa47 	bl	800be60 <LCD_UpdateColorIndices>
 800d9d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d9d6:	f7fc b88d 	b.w	8009af4 <WM_Activate>

0800d9da <GUI_SetBkColor>:
 800d9da:	f7fe bf0f 	b.w	800c7fc <LCD_SetBkColor>

0800d9de <GUI_SetColor>:
 800d9de:	f7fe bf15 	b.w	800c80c <LCD_SetColor>

0800d9e2 <GUI_SetDrawMode>:
 800d9e2:	f7fe bbb9 	b.w	800c158 <LCD_SetDrawMode>
	...

0800d9e8 <GUI_SetFont>:
 800d9e8:	4b03      	ldr	r3, [pc, #12]	; (800d9f8 <GUI_SetFont+0x10>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	69d9      	ldr	r1, [r3, #28]
 800d9ee:	b100      	cbz	r0, 800d9f2 <GUI_SetFont+0xa>
 800d9f0:	61d8      	str	r0, [r3, #28]
 800d9f2:	4608      	mov	r0, r1
 800d9f4:	4770      	bx	lr
 800d9f6:	bf00      	nop
 800d9f8:	20000084 	.word	0x20000084

0800d9fc <GUI_SetLineStyle>:
 800d9fc:	4b02      	ldr	r3, [pc, #8]	; (800da08 <GUI_SetLineStyle+0xc>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	7e9a      	ldrb	r2, [r3, #26]
 800da02:	7698      	strb	r0, [r3, #26]
 800da04:	4610      	mov	r0, r2
 800da06:	4770      	bx	lr
 800da08:	20000084 	.word	0x20000084

0800da0c <GUI_SetOrg>:
 800da0c:	460a      	mov	r2, r1
 800da0e:	4908      	ldr	r1, [pc, #32]	; (800da30 <GUI_SetOrg+0x24>)
 800da10:	b510      	push	{r4, lr}
 800da12:	8008      	strh	r0, [r1, #0]
 800da14:	4907      	ldr	r1, [pc, #28]	; (800da34 <GUI_SetOrg+0x28>)
 800da16:	800a      	strh	r2, [r1, #0]
 800da18:	4907      	ldr	r1, [pc, #28]	; (800da38 <GUI_SetOrg+0x2c>)
 800da1a:	6809      	ldr	r1, [r1, #0]
 800da1c:	4603      	mov	r3, r0
 800da1e:	7c48      	ldrb	r0, [r1, #17]
 800da20:	4906      	ldr	r1, [pc, #24]	; (800da3c <GUI_SetOrg+0x30>)
 800da22:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800da26:	68c1      	ldr	r1, [r0, #12]
 800da28:	6a0c      	ldr	r4, [r1, #32]
 800da2a:	4619      	mov	r1, r3
 800da2c:	47a0      	blx	r4
 800da2e:	bd10      	pop	{r4, pc}
 800da30:	2000770c 	.word	0x2000770c
 800da34:	200076fc 	.word	0x200076fc
 800da38:	20000084 	.word	0x20000084
 800da3c:	20007738 	.word	0x20007738

0800da40 <GUI_SetTextAlign>:
 800da40:	4b03      	ldr	r3, [pc, #12]	; (800da50 <GUI_SetTextAlign+0x10>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800da48:	8598      	strh	r0, [r3, #44]	; 0x2c
 800da4a:	4610      	mov	r0, r2
 800da4c:	4770      	bx	lr
 800da4e:	bf00      	nop
 800da50:	20000084 	.word	0x20000084

0800da54 <GUI_SetTextMode>:
 800da54:	4b03      	ldr	r3, [pc, #12]	; (800da64 <GUI_SetTextMode+0x10>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800da5c:	8558      	strh	r0, [r3, #42]	; 0x2a
 800da5e:	4610      	mov	r0, r2
 800da60:	4770      	bx	lr
 800da62:	bf00      	nop
 800da64:	20000084 	.word	0x20000084

0800da68 <GL_SetDefault>:
 800da68:	b508      	push	{r3, lr}
 800da6a:	4b0e      	ldr	r3, [pc, #56]	; (800daa4 <GL_SetDefault+0x3c>)
 800da6c:	6818      	ldr	r0, [r3, #0]
 800da6e:	f7fe fec5 	bl	800c7fc <LCD_SetBkColor>
 800da72:	4b0d      	ldr	r3, [pc, #52]	; (800daa8 <GL_SetDefault+0x40>)
 800da74:	6818      	ldr	r0, [r3, #0]
 800da76:	f7fe fec9 	bl	800c80c <LCD_SetColor>
 800da7a:	2001      	movs	r0, #1
 800da7c:	f7ff ff6a 	bl	800d954 <GUI_SetPenSize>
 800da80:	2000      	movs	r0, #0
 800da82:	f7ff ffdd 	bl	800da40 <GUI_SetTextAlign>
 800da86:	2000      	movs	r0, #0
 800da88:	f7ff ffe4 	bl	800da54 <GUI_SetTextMode>
 800da8c:	2000      	movs	r0, #0
 800da8e:	f7ff ffa8 	bl	800d9e2 <GUI_SetDrawMode>
 800da92:	4b06      	ldr	r3, [pc, #24]	; (800daac <GL_SetDefault+0x44>)
 800da94:	6818      	ldr	r0, [r3, #0]
 800da96:	f7ff ffa7 	bl	800d9e8 <GUI_SetFont>
 800da9a:	2000      	movs	r0, #0
 800da9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800daa0:	f7ff bfac 	b.w	800d9fc <GUI_SetLineStyle>
 800daa4:	20002ac8 	.word	0x20002ac8
 800daa8:	2000008c 	.word	0x2000008c
 800daac:	20000088 	.word	0x20000088

0800dab0 <GUIPROP__FindChar>:
 800dab0:	b138      	cbz	r0, 800dac2 <GUIPROP__FindChar+0x12>
 800dab2:	8803      	ldrh	r3, [r0, #0]
 800dab4:	428b      	cmp	r3, r1
 800dab6:	d802      	bhi.n	800dabe <GUIPROP__FindChar+0xe>
 800dab8:	8843      	ldrh	r3, [r0, #2]
 800daba:	428b      	cmp	r3, r1
 800dabc:	d201      	bcs.n	800dac2 <GUIPROP__FindChar+0x12>
 800dabe:	6880      	ldr	r0, [r0, #8]
 800dac0:	e7f6      	b.n	800dab0 <GUIPROP__FindChar>
 800dac2:	4770      	bx	lr

0800dac4 <GUIPROP_DispChar>:
 800dac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac8:	4c38      	ldr	r4, [pc, #224]	; (800dbac <GUIPROP_DispChar+0xe8>)
 800daca:	6823      	ldr	r3, [r4, #0]
 800dacc:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 800dad0:	69db      	ldr	r3, [r3, #28]
 800dad2:	4605      	mov	r5, r0
 800dad4:	b089      	sub	sp, #36	; 0x24
 800dad6:	69d8      	ldr	r0, [r3, #28]
 800dad8:	4629      	mov	r1, r5
 800dada:	f7ff ffe9 	bl	800dab0 <GUIPROP__FindChar>
 800dade:	2800      	cmp	r0, #0
 800dae0:	d061      	beq.n	800dba6 <GUIPROP_DispChar+0xe2>
 800dae2:	f8b0 8000 	ldrh.w	r8, [r0]
 800dae6:	6847      	ldr	r7, [r0, #4]
 800dae8:	ebc8 0805 	rsb	r8, r8, r5
 800daec:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 800daf0:	4648      	mov	r0, r9
 800daf2:	f896 b002 	ldrb.w	fp, [r6, #2]
 800daf6:	f7fe fb2f 	bl	800c158 <LCD_SetDrawMode>
 800dafa:	6825      	ldr	r5, [r4, #0]
 800dafc:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 800db00:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 800db04:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 800db08:	f89e c01a 	ldrb.w	ip, [lr, #26]
 800db0c:	f89e 3018 	ldrb.w	r3, [lr, #24]
 800db10:	9306      	str	r3, [sp, #24]
 800db12:	4682      	mov	sl, r0
 800db14:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 800db18:	f8cd c000 	str.w	ip, [sp]
 800db1c:	f89e e01b 	ldrb.w	lr, [lr, #27]
 800db20:	f8cd e004 	str.w	lr, [sp, #4]
 800db24:	f04f 0e01 	mov.w	lr, #1
 800db28:	f8cd b00c 	str.w	fp, [sp, #12]
 800db2c:	f8cd e008 	str.w	lr, [sp, #8]
 800db30:	6873      	ldr	r3, [r6, #4]
 800db32:	9304      	str	r3, [sp, #16]
 800db34:	6bad      	ldr	r5, [r5, #56]	; 0x38
 800db36:	9b06      	ldr	r3, [sp, #24]
 800db38:	9505      	str	r5, [sp, #20]
 800db3a:	f7fe fc97 	bl	800c46c <LCD_DrawBitmap>
 800db3e:	6823      	ldr	r3, [r4, #0]
 800db40:	69da      	ldr	r2, [r3, #28]
 800db42:	f892 b019 	ldrb.w	fp, [r2, #25]
 800db46:	7e11      	ldrb	r1, [r2, #24]
 800db48:	458b      	cmp	fp, r1
 800db4a:	d920      	bls.n	800db8e <GUIPROP_DispChar+0xca>
 800db4c:	f1b9 0f02 	cmp.w	r9, #2
 800db50:	7ed5      	ldrb	r5, [r2, #27]
 800db52:	d01c      	beq.n	800db8e <GUIPROP_DispChar+0xca>
 800db54:	9107      	str	r1, [sp, #28]
 800db56:	f7ff fe76 	bl	800d846 <GUI_GetColor>
 800db5a:	4681      	mov	r9, r0
 800db5c:	f7ff fe6c 	bl	800d838 <GUI_GetBkColor>
 800db60:	f7ff ff3d 	bl	800d9de <GUI_SetColor>
 800db64:	6824      	ldr	r4, [r4, #0]
 800db66:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 800db6a:	69e2      	ldr	r2, [r4, #28]
 800db6c:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800db70:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800db74:	7ed2      	ldrb	r2, [r2, #27]
 800db76:	9907      	ldr	r1, [sp, #28]
 800db78:	fb07 0202 	mla	r2, r7, r2, r0
 800db7c:	fb01 3105 	mla	r1, r1, r5, r3
 800db80:	fb0b 3305 	mla	r3, fp, r5, r3
 800db84:	f7fe fb6a 	bl	800c25c <LCD_FillRect>
 800db88:	4648      	mov	r0, r9
 800db8a:	f7ff ff28 	bl	800d9de <GUI_SetColor>
 800db8e:	4650      	mov	r0, sl
 800db90:	f7fe fae2 	bl	800c158 <LCD_SetDrawMode>
 800db94:	4b05      	ldr	r3, [pc, #20]	; (800dbac <GUIPROP_DispChar+0xe8>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	69da      	ldr	r2, [r3, #28]
 800db9a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800db9c:	7e90      	ldrb	r0, [r2, #26]
 800db9e:	7872      	ldrb	r2, [r6, #1]
 800dba0:	fb00 1202 	mla	r2, r0, r2, r1
 800dba4:	845a      	strh	r2, [r3, #34]	; 0x22
 800dba6:	b009      	add	sp, #36	; 0x24
 800dba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbac:	20000084 	.word	0x20000084

0800dbb0 <GUIPROP_GetCharDistX>:
 800dbb0:	4b0d      	ldr	r3, [pc, #52]	; (800dbe8 <GUIPROP_GetCharDistX+0x38>)
 800dbb2:	b570      	push	{r4, r5, r6, lr}
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	69dd      	ldr	r5, [r3, #28]
 800dbb8:	4606      	mov	r6, r0
 800dbba:	460c      	mov	r4, r1
 800dbbc:	69e8      	ldr	r0, [r5, #28]
 800dbbe:	4631      	mov	r1, r6
 800dbc0:	f7ff ff76 	bl	800dab0 <GUIPROP__FindChar>
 800dbc4:	b170      	cbz	r0, 800dbe4 <GUIPROP_GetCharDistX+0x34>
 800dbc6:	8803      	ldrh	r3, [r0, #0]
 800dbc8:	6842      	ldr	r2, [r0, #4]
 800dbca:	1af6      	subs	r6, r6, r3
 800dbcc:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 800dbd0:	7858      	ldrb	r0, [r3, #1]
 800dbd2:	7eab      	ldrb	r3, [r5, #26]
 800dbd4:	fb10 f003 	smulbb	r0, r0, r3
 800dbd8:	b124      	cbz	r4, 800dbe4 <GUIPROP_GetCharDistX+0x34>
 800dbda:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 800dbde:	fb12 f303 	smulbb	r3, r2, r3
 800dbe2:	6023      	str	r3, [r4, #0]
 800dbe4:	bd70      	pop	{r4, r5, r6, pc}
 800dbe6:	bf00      	nop
 800dbe8:	20000084 	.word	0x20000084

0800dbec <GUIPROP_GetFontInfo>:
 800dbec:	2301      	movs	r3, #1
 800dbee:	800b      	strh	r3, [r1, #0]
 800dbf0:	4770      	bx	lr

0800dbf2 <GUIPROP_IsInFont>:
 800dbf2:	b508      	push	{r3, lr}
 800dbf4:	69c0      	ldr	r0, [r0, #28]
 800dbf6:	f7ff ff5b 	bl	800dab0 <GUIPROP__FindChar>
 800dbfa:	3000      	adds	r0, #0
 800dbfc:	bf18      	it	ne
 800dbfe:	2001      	movne	r0, #1
 800dc00:	bd08      	pop	{r3, pc}
	...

0800dc04 <GUIMONO_DispChar>:
 800dc04:	4b52      	ldr	r3, [pc, #328]	; (800dd50 <GUIMONO_DispChar+0x14c>)
 800dc06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	69d9      	ldr	r1, [r3, #28]
 800dc0e:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 800dc10:	69cc      	ldr	r4, [r1, #28]
 800dc12:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 800dc14:	89a2      	ldrh	r2, [r4, #12]
 800dc16:	4290      	cmp	r0, r2
 800dc18:	b08b      	sub	sp, #44	; 0x2c
 800dc1a:	d308      	bcc.n	800dc2e <GUIMONO_DispChar+0x2a>
 800dc1c:	89e6      	ldrh	r6, [r4, #14]
 800dc1e:	4286      	cmp	r6, r0
 800dc20:	d305      	bcc.n	800dc2e <GUIMONO_DispChar+0x2a>
 800dc22:	f8d4 9000 	ldr.w	r9, [r4]
 800dc26:	1a82      	subs	r2, r0, r2
 800dc28:	f04f 3bff 	mov.w	fp, #4294967295
 800dc2c:	e015      	b.n	800dc5a <GUIMONO_DispChar+0x56>
 800dc2e:	68a2      	ldr	r2, [r4, #8]
 800dc30:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dc34:	2a00      	cmp	r2, #0
 800dc36:	f000 8081 	beq.w	800dd3c <GUIMONO_DispChar+0x138>
 800dc3a:	8816      	ldrh	r6, [r2, #0]
 800dc3c:	42b0      	cmp	r0, r6
 800dc3e:	d37d      	bcc.n	800dd3c <GUIMONO_DispChar+0x138>
 800dc40:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800dc44:	4584      	cmp	ip, r0
 800dc46:	d379      	bcc.n	800dd3c <GUIMONO_DispChar+0x138>
 800dc48:	6852      	ldr	r2, [r2, #4]
 800dc4a:	1b80      	subs	r0, r0, r6
 800dc4c:	b280      	uxth	r0, r0
 800dc4e:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800dc52:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 800dc56:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 800dc5a:	1c50      	adds	r0, r2, #1
 800dc5c:	d06e      	beq.n	800dd3c <GUIMONO_DispChar+0x138>
 800dc5e:	f891 8018 	ldrb.w	r8, [r1, #24]
 800dc62:	7ca1      	ldrb	r1, [r4, #18]
 800dc64:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 800dc68:	7c26      	ldrb	r6, [r4, #16]
 800dc6a:	9206      	str	r2, [sp, #24]
 800dc6c:	fb18 f101 	smulbb	r1, r8, r1
 800dc70:	9107      	str	r1, [sp, #28]
 800dc72:	fa0f f18a 	sxth.w	r1, sl
 800dc76:	4608      	mov	r0, r1
 800dc78:	9108      	str	r1, [sp, #32]
 800dc7a:	f7fe fa6d 	bl	800c158 <LCD_SetDrawMode>
 800dc7e:	4934      	ldr	r1, [pc, #208]	; (800dd50 <GUIMONO_DispChar+0x14c>)
 800dc80:	9009      	str	r0, [sp, #36]	; 0x24
 800dc82:	680b      	ldr	r3, [r1, #0]
 800dc84:	9a06      	ldr	r2, [sp, #24]
 800dc86:	69d9      	ldr	r1, [r3, #28]
 800dc88:	7e88      	ldrb	r0, [r1, #26]
 800dc8a:	9000      	str	r0, [sp, #0]
 800dc8c:	7ec9      	ldrb	r1, [r1, #27]
 800dc8e:	9101      	str	r1, [sp, #4]
 800dc90:	2101      	movs	r1, #1
 800dc92:	9102      	str	r1, [sp, #8]
 800dc94:	7ca1      	ldrb	r1, [r4, #18]
 800dc96:	9103      	str	r1, [sp, #12]
 800dc98:	9907      	ldr	r1, [sp, #28]
 800dc9a:	fb01 9202 	mla	r2, r1, r2, r9
 800dc9e:	9204      	str	r2, [sp, #16]
 800dca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca2:	9305      	str	r3, [sp, #20]
 800dca4:	b23f      	sxth	r7, r7
 800dca6:	b22d      	sxth	r5, r5
 800dca8:	4638      	mov	r0, r7
 800dcaa:	4629      	mov	r1, r5
 800dcac:	4632      	mov	r2, r6
 800dcae:	4643      	mov	r3, r8
 800dcb0:	f7fe fbdc 	bl	800c46c <LCD_DrawBitmap>
 800dcb4:	f1bb 3fff 	cmp.w	fp, #4294967295
 800dcb8:	d01b      	beq.n	800dcf2 <GUIMONO_DispChar+0xee>
 800dcba:	f04a 0002 	orr.w	r0, sl, #2
 800dcbe:	b200      	sxth	r0, r0
 800dcc0:	f7fe fa4a 	bl	800c158 <LCD_SetDrawMode>
 800dcc4:	4a22      	ldr	r2, [pc, #136]	; (800dd50 <GUIMONO_DispChar+0x14c>)
 800dcc6:	6813      	ldr	r3, [r2, #0]
 800dcc8:	69da      	ldr	r2, [r3, #28]
 800dcca:	7e91      	ldrb	r1, [r2, #26]
 800dccc:	9100      	str	r1, [sp, #0]
 800dcce:	7ed2      	ldrb	r2, [r2, #27]
 800dcd0:	9201      	str	r2, [sp, #4]
 800dcd2:	2101      	movs	r1, #1
 800dcd4:	9102      	str	r1, [sp, #8]
 800dcd6:	9907      	ldr	r1, [sp, #28]
 800dcd8:	7ca2      	ldrb	r2, [r4, #18]
 800dcda:	9203      	str	r2, [sp, #12]
 800dcdc:	fb01 920b 	mla	r2, r1, fp, r9
 800dce0:	9204      	str	r2, [sp, #16]
 800dce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce4:	9305      	str	r3, [sp, #20]
 800dce6:	4638      	mov	r0, r7
 800dce8:	4629      	mov	r1, r5
 800dcea:	4632      	mov	r2, r6
 800dcec:	4643      	mov	r3, r8
 800dcee:	f7fe fbbd 	bl	800c46c <LCD_DrawBitmap>
 800dcf2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800dd50 <GUIMONO_DispChar+0x14c>
 800dcf6:	f8d8 3000 	ldr.w	r3, [r8]
 800dcfa:	69db      	ldr	r3, [r3, #28]
 800dcfc:	7e5a      	ldrb	r2, [r3, #25]
 800dcfe:	7e1b      	ldrb	r3, [r3, #24]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d917      	bls.n	800dd34 <GUIMONO_DispChar+0x130>
 800dd04:	9a08      	ldr	r2, [sp, #32]
 800dd06:	2a02      	cmp	r2, #2
 800dd08:	d014      	beq.n	800dd34 <GUIMONO_DispChar+0x130>
 800dd0a:	f08a 0004 	eor.w	r0, sl, #4
 800dd0e:	b200      	sxth	r0, r0
 800dd10:	f7fe fa22 	bl	800c158 <LCD_SetDrawMode>
 800dd14:	f8d8 3000 	ldr.w	r3, [r8]
 800dd18:	69db      	ldr	r3, [r3, #28]
 800dd1a:	f893 e018 	ldrb.w	lr, [r3, #24]
 800dd1e:	7ed9      	ldrb	r1, [r3, #27]
 800dd20:	7e9a      	ldrb	r2, [r3, #26]
 800dd22:	7e5b      	ldrb	r3, [r3, #25]
 800dd24:	4638      	mov	r0, r7
 800dd26:	fb0e 5101 	mla	r1, lr, r1, r5
 800dd2a:	fb06 7202 	mla	r2, r6, r2, r7
 800dd2e:	442b      	add	r3, r5
 800dd30:	f7fe fa94 	bl	800c25c <LCD_FillRect>
 800dd34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd36:	b2d8      	uxtb	r0, r3
 800dd38:	f7fe fa0e 	bl	800c158 <LCD_SetDrawMode>
 800dd3c:	4b04      	ldr	r3, [pc, #16]	; (800dd50 <GUIMONO_DispChar+0x14c>)
 800dd3e:	7c61      	ldrb	r1, [r4, #17]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800dd44:	440a      	add	r2, r1
 800dd46:	845a      	strh	r2, [r3, #34]	; 0x22
 800dd48:	b00b      	add	sp, #44	; 0x2c
 800dd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd4e:	bf00      	nop
 800dd50:	20000084 	.word	0x20000084

0800dd54 <GUIMONO_GetCharDistX>:
 800dd54:	4b04      	ldr	r3, [pc, #16]	; (800dd68 <GUIMONO_GetCharDistX+0x14>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	69db      	ldr	r3, [r3, #28]
 800dd5a:	69db      	ldr	r3, [r3, #28]
 800dd5c:	b109      	cbz	r1, 800dd62 <GUIMONO_GetCharDistX+0xe>
 800dd5e:	7c1a      	ldrb	r2, [r3, #16]
 800dd60:	600a      	str	r2, [r1, #0]
 800dd62:	7c58      	ldrb	r0, [r3, #17]
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop
 800dd68:	20000084 	.word	0x20000084

0800dd6c <GUIMONO_GetFontInfo>:
 800dd6c:	2302      	movs	r3, #2
 800dd6e:	800b      	strh	r3, [r1, #0]
 800dd70:	4770      	bx	lr

0800dd72 <GUIMONO_IsInFont>:
 800dd72:	69c3      	ldr	r3, [r0, #28]
 800dd74:	899a      	ldrh	r2, [r3, #12]
 800dd76:	428a      	cmp	r2, r1
 800dd78:	d802      	bhi.n	800dd80 <GUIMONO_IsInFont+0xe>
 800dd7a:	89da      	ldrh	r2, [r3, #14]
 800dd7c:	428a      	cmp	r2, r1
 800dd7e:	d20f      	bcs.n	800dda0 <GUIMONO_IsInFont+0x2e>
 800dd80:	6898      	ldr	r0, [r3, #8]
 800dd82:	b180      	cbz	r0, 800dda6 <GUIMONO_IsInFont+0x34>
 800dd84:	8803      	ldrh	r3, [r0, #0]
 800dd86:	4299      	cmp	r1, r3
 800dd88:	d30c      	bcc.n	800dda4 <GUIMONO_IsInFont+0x32>
 800dd8a:	8842      	ldrh	r2, [r0, #2]
 800dd8c:	428a      	cmp	r2, r1
 800dd8e:	d309      	bcc.n	800dda4 <GUIMONO_IsInFont+0x32>
 800dd90:	1ac9      	subs	r1, r1, r3
 800dd92:	6842      	ldr	r2, [r0, #4]
 800dd94:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 800dd98:	43c0      	mvns	r0, r0
 800dd9a:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800dd9e:	4770      	bx	lr
 800dda0:	2001      	movs	r0, #1
 800dda2:	4770      	bx	lr
 800dda4:	2000      	movs	r0, #0
 800dda6:	4770      	bx	lr

0800dda8 <_Log2VisBuffered>:
 800dda8:	4770      	bx	lr
	...

0800ddac <_DispLine>:
 800ddac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddae:	4615      	mov	r5, r2
 800ddb0:	ab02      	add	r3, sp, #8
 800ddb2:	4a21      	ldr	r2, [pc, #132]	; (800de38 <_DispLine+0x8c>)
 800ddb4:	f843 1d08 	str.w	r1, [r3, #-8]!
 800ddb8:	9001      	str	r0, [sp, #4]
 800ddba:	6812      	ldr	r2, [r2, #0]
 800ddbc:	4c1f      	ldr	r4, [pc, #124]	; (800de3c <_DispLine+0x90>)
 800ddbe:	4669      	mov	r1, sp
 800ddc0:	4790      	blx	r2
 800ddc2:	6823      	ldr	r3, [r4, #0]
 800ddc4:	9001      	str	r0, [sp, #4]
 800ddc6:	6958      	ldr	r0, [r3, #20]
 800ddc8:	b938      	cbnz	r0, 800ddda <_DispLine+0x2e>
 800ddca:	2001      	movs	r0, #1
 800ddcc:	f7fe fed6 	bl	800cb7c <GUI__ManageCache>
 800ddd0:	6822      	ldr	r2, [r4, #0]
 800ddd2:	69d3      	ldr	r3, [r2, #28]
 800ddd4:	695b      	ldr	r3, [r3, #20]
 800ddd6:	b933      	cbnz	r3, 800dde6 <_DispLine+0x3a>
 800ddd8:	e023      	b.n	800de22 <_DispLine+0x76>
 800ddda:	4629      	mov	r1, r5
 800dddc:	f7ff fdc2 	bl	800d964 <GUI_RectsIntersect>
 800dde0:	2800      	cmp	r0, #0
 800dde2:	d1f2      	bne.n	800ddca <_DispLine+0x1e>
 800dde4:	e025      	b.n	800de32 <_DispLine+0x86>
 800dde6:	4c16      	ldr	r4, [pc, #88]	; (800de40 <_DispLine+0x94>)
 800dde8:	689b      	ldr	r3, [r3, #8]
 800ddea:	6821      	ldr	r1, [r4, #0]
 800ddec:	b141      	cbz	r1, 800de00 <_DispLine+0x54>
 800ddee:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 800ddf2:	9801      	ldr	r0, [sp, #4]
 800ddf4:	9900      	ldr	r1, [sp, #0]
 800ddf6:	4798      	blx	r3
 800ddf8:	6823      	ldr	r3, [r4, #0]
 800ddfa:	4628      	mov	r0, r5
 800ddfc:	4798      	blx	r3
 800ddfe:	e015      	b.n	800de2c <_DispLine+0x80>
 800de00:	9801      	ldr	r0, [sp, #4]
 800de02:	9900      	ldr	r1, [sp, #0]
 800de04:	4798      	blx	r3
 800de06:	e011      	b.n	800de2c <_DispLine+0x80>
 800de08:	a801      	add	r0, sp, #4
 800de0a:	f7ff f871 	bl	800cef0 <GUI_UC__GetCharCodeInc>
 800de0e:	6823      	ldr	r3, [r4, #0]
 800de10:	69db      	ldr	r3, [r3, #28]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4605      	mov	r5, r0
 800de16:	4798      	blx	r3
 800de18:	4b0a      	ldr	r3, [pc, #40]	; (800de44 <_DispLine+0x98>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	b10b      	cbz	r3, 800de22 <_DispLine+0x76>
 800de1e:	4628      	mov	r0, r5
 800de20:	4798      	blx	r3
 800de22:	9b00      	ldr	r3, [sp, #0]
 800de24:	3b01      	subs	r3, #1
 800de26:	2b00      	cmp	r3, #0
 800de28:	9300      	str	r3, [sp, #0]
 800de2a:	daed      	bge.n	800de08 <_DispLine+0x5c>
 800de2c:	2000      	movs	r0, #0
 800de2e:	f7fe fea5 	bl	800cb7c <GUI__ManageCache>
 800de32:	b003      	add	sp, #12
 800de34:	bd30      	pop	{r4, r5, pc}
 800de36:	bf00      	nop
 800de38:	20000090 	.word	0x20000090
 800de3c:	20000084 	.word	0x20000084
 800de40:	20007704 	.word	0x20007704
 800de44:	20007714 	.word	0x20007714

0800de48 <GUI__GetLineNumChars>:
 800de48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de4a:	460d      	mov	r5, r1
 800de4c:	9001      	str	r0, [sp, #4]
 800de4e:	4604      	mov	r4, r0
 800de50:	b198      	cbz	r0, 800de7a <GUI__GetLineNumChars+0x32>
 800de52:	4b0b      	ldr	r3, [pc, #44]	; (800de80 <GUI__GetLineNumChars+0x38>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	69db      	ldr	r3, [r3, #28]
 800de58:	695b      	ldr	r3, [r3, #20]
 800de5a:	b10b      	cbz	r3, 800de60 <GUI__GetLineNumChars+0x18>
 800de5c:	685b      	ldr	r3, [r3, #4]
 800de5e:	b90b      	cbnz	r3, 800de64 <GUI__GetLineNumChars+0x1c>
 800de60:	2400      	movs	r4, #0
 800de62:	e008      	b.n	800de76 <GUI__GetLineNumChars+0x2e>
 800de64:	4798      	blx	r3
 800de66:	e009      	b.n	800de7c <GUI__GetLineNumChars+0x34>
 800de68:	a801      	add	r0, sp, #4
 800de6a:	f7ff f841 	bl	800cef0 <GUI_UC__GetCharCodeInc>
 800de6e:	b120      	cbz	r0, 800de7a <GUI__GetLineNumChars+0x32>
 800de70:	280a      	cmp	r0, #10
 800de72:	d002      	beq.n	800de7a <GUI__GetLineNumChars+0x32>
 800de74:	3401      	adds	r4, #1
 800de76:	42ac      	cmp	r4, r5
 800de78:	dbf6      	blt.n	800de68 <GUI__GetLineNumChars+0x20>
 800de7a:	4620      	mov	r0, r4
 800de7c:	b003      	add	sp, #12
 800de7e:	bd30      	pop	{r4, r5, pc}
 800de80:	20000084 	.word	0x20000084

0800de84 <GUI__GetOverlap>:
 800de84:	b513      	push	{r0, r1, r4, lr}
 800de86:	a902      	add	r1, sp, #8
 800de88:	2400      	movs	r4, #0
 800de8a:	f841 4d04 	str.w	r4, [r1, #-4]!
 800de8e:	f000 f89f 	bl	800dfd0 <GUI_GetCharDistXEx>
 800de92:	9b01      	ldr	r3, [sp, #4]
 800de94:	4283      	cmp	r3, r0
 800de96:	bfcc      	ite	gt
 800de98:	ebc0 0003 	rsbgt	r0, r0, r3
 800de9c:	4620      	movle	r0, r4
 800de9e:	b002      	add	sp, #8
 800dea0:	bd10      	pop	{r4, pc}
	...

0800dea4 <GUI__GetLineDistX>:
 800dea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dea6:	4a15      	ldr	r2, [pc, #84]	; (800defc <GUI__GetLineDistX+0x58>)
 800dea8:	9001      	str	r0, [sp, #4]
 800deaa:	ab02      	add	r3, sp, #8
 800deac:	6812      	ldr	r2, [r2, #0]
 800deae:	f843 1d08 	str.w	r1, [r3, #-8]!
 800deb2:	4669      	mov	r1, sp
 800deb4:	4790      	blx	r2
 800deb6:	9001      	str	r0, [sp, #4]
 800deb8:	b1f0      	cbz	r0, 800def8 <GUI__GetLineDistX+0x54>
 800deba:	4b11      	ldr	r3, [pc, #68]	; (800df00 <GUI__GetLineDistX+0x5c>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	69db      	ldr	r3, [r3, #28]
 800dec0:	695b      	ldr	r3, [r3, #20]
 800dec2:	b10b      	cbz	r3, 800dec8 <GUI__GetLineDistX+0x24>
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	b913      	cbnz	r3, 800dece <GUI__GetLineDistX+0x2a>
 800dec8:	2500      	movs	r5, #0
 800deca:	462c      	mov	r4, r5
 800decc:	e002      	b.n	800ded4 <GUI__GetLineDistX+0x30>
 800dece:	9900      	ldr	r1, [sp, #0]
 800ded0:	4798      	blx	r3
 800ded2:	e011      	b.n	800def8 <GUI__GetLineDistX+0x54>
 800ded4:	9b00      	ldr	r3, [sp, #0]
 800ded6:	3b01      	subs	r3, #1
 800ded8:	2b00      	cmp	r3, #0
 800deda:	9300      	str	r3, [sp, #0]
 800dedc:	db07      	blt.n	800deee <GUI__GetLineDistX+0x4a>
 800dede:	a801      	add	r0, sp, #4
 800dee0:	f7ff f806 	bl	800cef0 <GUI_UC__GetCharCodeInc>
 800dee4:	4605      	mov	r5, r0
 800dee6:	f000 f869 	bl	800dfbc <GUI_GetCharDistX>
 800deea:	4404      	add	r4, r0
 800deec:	e7f2      	b.n	800ded4 <GUI__GetLineDistX+0x30>
 800deee:	4628      	mov	r0, r5
 800def0:	f7ff ffc8 	bl	800de84 <GUI__GetOverlap>
 800def4:	4420      	add	r0, r4
 800def6:	e7ff      	b.n	800def8 <GUI__GetLineDistX+0x54>
 800def8:	b003      	add	sp, #12
 800defa:	bd30      	pop	{r4, r5, pc}
 800defc:	20000090 	.word	0x20000090
 800df00:	20000084 	.word	0x20000084

0800df04 <GUI__DispLine>:
 800df04:	4b27      	ldr	r3, [pc, #156]	; (800dfa4 <GUI__DispLine+0xa0>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df0a:	4605      	mov	r5, r0
 800df0c:	460c      	mov	r4, r1
 800df0e:	b163      	cbz	r3, 800df2a <GUI__DispLine+0x26>
 800df10:	2000      	movs	r0, #0
 800df12:	f7fb fc4d 	bl	80097b0 <WM__InitIVRSearch>
 800df16:	2800      	cmp	r0, #0
 800df18:	d041      	beq.n	800df9e <GUI__DispLine+0x9a>
 800df1a:	4628      	mov	r0, r5
 800df1c:	4621      	mov	r1, r4
 800df1e:	466a      	mov	r2, sp
 800df20:	f7ff ff44 	bl	800ddac <_DispLine>
 800df24:	f7fb fb82 	bl	800962c <WM__GetNextIVR>
 800df28:	e7f5      	b.n	800df16 <GUI__DispLine+0x12>
 800df2a:	6810      	ldr	r0, [r2, #0]
 800df2c:	6851      	ldr	r1, [r2, #4]
 800df2e:	4e1e      	ldr	r6, [pc, #120]	; (800dfa8 <GUI__DispLine+0xa4>)
 800df30:	466b      	mov	r3, sp
 800df32:	c303      	stmia	r3!, {r0, r1}
 800df34:	6833      	ldr	r3, [r6, #0]
 800df36:	f8bd 1000 	ldrh.w	r1, [sp]
 800df3a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800df3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df42:	4411      	add	r1, r2
 800df44:	f8ad 1000 	strh.w	r1, [sp]
 800df48:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800df4c:	4419      	add	r1, r3
 800df4e:	f8ad 1002 	strh.w	r1, [sp, #2]
 800df52:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800df56:	440a      	add	r2, r1
 800df58:	f8ad 2004 	strh.w	r2, [sp, #4]
 800df5c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800df60:	4668      	mov	r0, sp
 800df62:	4413      	add	r3, r2
 800df64:	f8ad 3006 	strh.w	r3, [sp, #6]
 800df68:	f7fb fc22 	bl	80097b0 <WM__InitIVRSearch>
 800df6c:	6833      	ldr	r3, [r6, #0]
 800df6e:	b940      	cbnz	r0, 800df82 <GUI__DispLine+0x7e>
 800df70:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800df72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df74:	1a8a      	subs	r2, r1, r2
 800df76:	845a      	strh	r2, [r3, #34]	; 0x22
 800df78:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800df7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df7c:	1a8a      	subs	r2, r1, r2
 800df7e:	849a      	strh	r2, [r3, #36]	; 0x24
 800df80:	e00d      	b.n	800df9e <GUI__DispLine+0x9a>
 800df82:	f8bd 2000 	ldrh.w	r2, [sp]
 800df86:	845a      	strh	r2, [r3, #34]	; 0x22
 800df88:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800df8c:	849a      	strh	r2, [r3, #36]	; 0x24
 800df8e:	4628      	mov	r0, r5
 800df90:	4621      	mov	r1, r4
 800df92:	466a      	mov	r2, sp
 800df94:	f7ff ff0a 	bl	800ddac <_DispLine>
 800df98:	f7fb fb48 	bl	800962c <WM__GetNextIVR>
 800df9c:	e7e6      	b.n	800df6c <GUI__DispLine+0x68>
 800df9e:	b002      	add	sp, #8
 800dfa0:	bd70      	pop	{r4, r5, r6, pc}
 800dfa2:	bf00      	nop
 800dfa4:	200076f0 	.word	0x200076f0
 800dfa8:	20000084 	.word	0x20000084

0800dfac <GUI_GetFontDistY>:
 800dfac:	4b02      	ldr	r3, [pc, #8]	; (800dfb8 <GUI_GetFontDistY+0xc>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	69db      	ldr	r3, [r3, #28]
 800dfb2:	7e58      	ldrb	r0, [r3, #25]
 800dfb4:	4770      	bx	lr
 800dfb6:	bf00      	nop
 800dfb8:	20000084 	.word	0x20000084

0800dfbc <GUI_GetCharDistX>:
 800dfbc:	b508      	push	{r3, lr}
 800dfbe:	4b03      	ldr	r3, [pc, #12]	; (800dfcc <GUI_GetCharDistX+0x10>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	69db      	ldr	r3, [r3, #28]
 800dfc4:	2100      	movs	r1, #0
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	4798      	blx	r3
 800dfca:	bd08      	pop	{r3, pc}
 800dfcc:	20000084 	.word	0x20000084

0800dfd0 <GUI_GetCharDistXEx>:
 800dfd0:	b508      	push	{r3, lr}
 800dfd2:	4b03      	ldr	r3, [pc, #12]	; (800dfe0 <GUI_GetCharDistXEx+0x10>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	69db      	ldr	r3, [r3, #28]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	4798      	blx	r3
 800dfdc:	bd08      	pop	{r3, pc}
 800dfde:	bf00      	nop
 800dfe0:	20000084 	.word	0x20000084

0800dfe4 <_GetClipParam>:
 800dfe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfe6:	4f33      	ldr	r7, [pc, #204]	; (800e0b4 <_GetClipParam+0xd0>)
 800dfe8:	9c07      	ldr	r4, [sp, #28]
 800dfea:	683f      	ldr	r7, [r7, #0]
 800dfec:	9e05      	ldr	r6, [sp, #20]
 800dfee:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 800dff2:	9d06      	ldr	r5, [sp, #24]
 800dff4:	ebc0 0c0c 	rsb	ip, r0, ip
 800dff8:	f1bc 0f00 	cmp.w	ip, #0
 800dffc:	bfc8      	it	gt
 800dffe:	f8c4 c00c 	strgt.w	ip, [r4, #12]
 800e002:	f9b7 c00a 	ldrsh.w	ip, [r7, #10]
 800e006:	ebc1 0c0c 	rsb	ip, r1, ip
 800e00a:	f1bc 0f00 	cmp.w	ip, #0
 800e00e:	bfc8      	it	gt
 800e010:	f8c4 c010 	strgt.w	ip, [r4, #16]
 800e014:	4410      	add	r0, r2
 800e016:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 800e01a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e01e:	3801      	subs	r0, #1
 800e020:	4419      	add	r1, r3
 800e022:	ebcc 0000 	rsb	r0, ip, r0
 800e026:	3901      	subs	r1, #1
 800e028:	2800      	cmp	r0, #0
 800e02a:	ebc2 0101 	rsb	r1, r2, r1
 800e02e:	bfc8      	it	gt
 800e030:	60a0      	strgt	r0, [r4, #8]
 800e032:	2900      	cmp	r1, #0
 800e034:	bfc8      	it	gt
 800e036:	6161      	strgt	r1, [r4, #20]
 800e038:	2e08      	cmp	r6, #8
 800e03a:	d024      	beq.n	800e086 <_GetClipParam+0xa2>
 800e03c:	dc04      	bgt.n	800e048 <_GetClipParam+0x64>
 800e03e:	2e01      	cmp	r6, #1
 800e040:	d00f      	beq.n	800e062 <_GetClipParam+0x7e>
 800e042:	2e04      	cmp	r6, #4
 800e044:	d016      	beq.n	800e074 <_GetClipParam+0x90>
 800e046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e048:	2e18      	cmp	r6, #24
 800e04a:	d021      	beq.n	800e090 <_GetClipParam+0xac>
 800e04c:	2e20      	cmp	r6, #32
 800e04e:	d028      	beq.n	800e0a2 <_GetClipParam+0xbe>
 800e050:	2e10      	cmp	r6, #16
 800e052:	d12e      	bne.n	800e0b2 <_GetClipParam+0xce>
 800e054:	68e3      	ldr	r3, [r4, #12]
 800e056:	68a2      	ldr	r2, [r4, #8]
 800e058:	005b      	lsls	r3, r3, #1
 800e05a:	6023      	str	r3, [r4, #0]
 800e05c:	eba5 0542 	sub.w	r5, r5, r2, lsl #1
 800e060:	e025      	b.n	800e0ae <_GetClipParam+0xca>
 800e062:	68e3      	ldr	r3, [r4, #12]
 800e064:	10db      	asrs	r3, r3, #3
 800e066:	00da      	lsls	r2, r3, #3
 800e068:	60e2      	str	r2, [r4, #12]
 800e06a:	68a2      	ldr	r2, [r4, #8]
 800e06c:	6023      	str	r3, [r4, #0]
 800e06e:	eba5 05e2 	sub.w	r5, r5, r2, asr #3
 800e072:	e01c      	b.n	800e0ae <_GetClipParam+0xca>
 800e074:	68e3      	ldr	r3, [r4, #12]
 800e076:	105b      	asrs	r3, r3, #1
 800e078:	005a      	lsls	r2, r3, #1
 800e07a:	60e2      	str	r2, [r4, #12]
 800e07c:	68a2      	ldr	r2, [r4, #8]
 800e07e:	6023      	str	r3, [r4, #0]
 800e080:	eba5 0562 	sub.w	r5, r5, r2, asr #1
 800e084:	e013      	b.n	800e0ae <_GetClipParam+0xca>
 800e086:	68a2      	ldr	r2, [r4, #8]
 800e088:	68e3      	ldr	r3, [r4, #12]
 800e08a:	6023      	str	r3, [r4, #0]
 800e08c:	1aad      	subs	r5, r5, r2
 800e08e:	e00e      	b.n	800e0ae <_GetClipParam+0xca>
 800e090:	68e3      	ldr	r3, [r4, #12]
 800e092:	68a2      	ldr	r2, [r4, #8]
 800e094:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e098:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 800e09c:	6023      	str	r3, [r4, #0]
 800e09e:	4415      	add	r5, r2
 800e0a0:	e005      	b.n	800e0ae <_GetClipParam+0xca>
 800e0a2:	68e3      	ldr	r3, [r4, #12]
 800e0a4:	68a2      	ldr	r2, [r4, #8]
 800e0a6:	009b      	lsls	r3, r3, #2
 800e0a8:	6023      	str	r3, [r4, #0]
 800e0aa:	eba5 0582 	sub.w	r5, r5, r2, lsl #2
 800e0ae:	1aeb      	subs	r3, r5, r3
 800e0b0:	6063      	str	r3, [r4, #4]
 800e0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0b4:	20000084 	.word	0x20000084

0800e0b8 <_GetBitfieldsPara>:
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	600b      	str	r3, [r1, #0]
 800e0bc:	07c3      	lsls	r3, r0, #31
 800e0be:	d403      	bmi.n	800e0c8 <_GetBitfieldsPara+0x10>
 800e0c0:	680b      	ldr	r3, [r1, #0]
 800e0c2:	0840      	lsrs	r0, r0, #1
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	e7f8      	b.n	800e0ba <_GetBitfieldsPara+0x2>
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	6013      	str	r3, [r2, #0]
 800e0cc:	07c3      	lsls	r3, r0, #31
 800e0ce:	d503      	bpl.n	800e0d8 <_GetBitfieldsPara+0x20>
 800e0d0:	6813      	ldr	r3, [r2, #0]
 800e0d2:	0840      	lsrs	r0, r0, #1
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	e7f8      	b.n	800e0ca <_GetBitfieldsPara+0x12>
 800e0d8:	4770      	bx	lr

0800e0da <_DrawLine_RGB>:
 800e0da:	6983      	ldr	r3, [r0, #24]
 800e0dc:	b513      	push	{r0, r1, r4, lr}
 800e0de:	4604      	mov	r4, r0
 800e0e0:	b1c3      	cbz	r3, 800e114 <_DrawLine_RGB+0x3a>
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	6063      	str	r3, [r4, #4]
 800e0e6:	6863      	ldr	r3, [r4, #4]
 800e0e8:	68e2      	ldr	r2, [r4, #12]
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	da2b      	bge.n	800e146 <_DrawLine_RGB+0x6c>
 800e0ee:	6921      	ldr	r1, [r4, #16]
 800e0f0:	6822      	ldr	r2, [r4, #0]
 800e0f2:	a802      	add	r0, sp, #8
 800e0f4:	fb01 2303 	mla	r3, r1, r3, r2
 800e0f8:	f840 3d04 	str.w	r3, [r0, #-4]!
 800e0fc:	f7fe fc28 	bl	800c950 <GUI__Read32>
 800e100:	69a3      	ldr	r3, [r4, #24]
 800e102:	4798      	blx	r3
 800e104:	6963      	ldr	r3, [r4, #20]
 800e106:	4798      	blx	r3
 800e108:	69e3      	ldr	r3, [r4, #28]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	4798      	blx	r3
 800e10e:	6863      	ldr	r3, [r4, #4]
 800e110:	3301      	adds	r3, #1
 800e112:	e7e7      	b.n	800e0e4 <_DrawLine_RGB+0xa>
 800e114:	6063      	str	r3, [r4, #4]
 800e116:	6863      	ldr	r3, [r4, #4]
 800e118:	68e2      	ldr	r2, [r4, #12]
 800e11a:	4293      	cmp	r3, r2
 800e11c:	da13      	bge.n	800e146 <_DrawLine_RGB+0x6c>
 800e11e:	6922      	ldr	r2, [r4, #16]
 800e120:	6821      	ldr	r1, [r4, #0]
 800e122:	435a      	muls	r2, r3
 800e124:	188b      	adds	r3, r1, r2
 800e126:	9301      	str	r3, [sp, #4]
 800e128:	7858      	ldrb	r0, [r3, #1]
 800e12a:	5c8a      	ldrb	r2, [r1, r2]
 800e12c:	0200      	lsls	r0, r0, #8
 800e12e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e132:	789a      	ldrb	r2, [r3, #2]
 800e134:	6963      	ldr	r3, [r4, #20]
 800e136:	4310      	orrs	r0, r2
 800e138:	4798      	blx	r3
 800e13a:	69e3      	ldr	r3, [r4, #28]
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	4798      	blx	r3
 800e140:	6863      	ldr	r3, [r4, #4]
 800e142:	3301      	adds	r3, #1
 800e144:	e7e6      	b.n	800e114 <_DrawLine_RGB+0x3a>
 800e146:	68a3      	ldr	r3, [r4, #8]
 800e148:	b113      	cbz	r3, 800e150 <_DrawLine_RGB+0x76>
 800e14a:	69e3      	ldr	r3, [r4, #28]
 800e14c:	689b      	ldr	r3, [r3, #8]
 800e14e:	4798      	blx	r3
 800e150:	b002      	add	sp, #8
 800e152:	bd10      	pop	{r4, pc}

0800e154 <_NextPixel_FlushBuffer>:
 800e154:	b530      	push	{r4, r5, lr}
 800e156:	4c10      	ldr	r4, [pc, #64]	; (800e198 <_NextPixel_FlushBuffer+0x44>)
 800e158:	6a22      	ldr	r2, [r4, #32]
 800e15a:	b089      	sub	sp, #36	; 0x24
 800e15c:	2101      	movs	r1, #1
 800e15e:	428a      	cmp	r2, r1
 800e160:	f04f 0300 	mov.w	r3, #0
 800e164:	9306      	str	r3, [sp, #24]
 800e166:	9202      	str	r2, [sp, #8]
 800e168:	bf08      	it	eq
 800e16a:	ab06      	addeq	r3, sp, #24
 800e16c:	6962      	ldr	r2, [r4, #20]
 800e16e:	9305      	str	r3, [sp, #20]
 800e170:	2500      	movs	r5, #0
 800e172:	9100      	str	r1, [sp, #0]
 800e174:	9101      	str	r1, [sp, #4]
 800e176:	9503      	str	r5, [sp, #12]
 800e178:	9204      	str	r2, [sp, #16]
 800e17a:	1d20      	adds	r0, r4, #4
 800e17c:	9107      	str	r1, [sp, #28]
 800e17e:	2301      	movs	r3, #1
 800e180:	c807      	ldmia	r0, {r0, r1, r2}
 800e182:	f7fe f973 	bl	800c46c <LCD_DrawBitmap>
 800e186:	6862      	ldr	r2, [r4, #4]
 800e188:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e18a:	62a5      	str	r5, [r4, #40]	; 0x28
 800e18c:	4413      	add	r3, r2
 800e18e:	6063      	str	r3, [r4, #4]
 800e190:	6963      	ldr	r3, [r4, #20]
 800e192:	61a3      	str	r3, [r4, #24]
 800e194:	b009      	add	sp, #36	; 0x24
 800e196:	bd30      	pop	{r4, r5, pc}
 800e198:	20002b40 	.word	0x20002b40

0800e19c <_NextPixel_NextLine>:
 800e19c:	b510      	push	{r4, lr}
 800e19e:	4c06      	ldr	r4, [pc, #24]	; (800e1b8 <_NextPixel_NextLine+0x1c>)
 800e1a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e1a2:	b10b      	cbz	r3, 800e1a8 <_NextPixel_NextLine+0xc>
 800e1a4:	f7ff ffd6 	bl	800e154 <_NextPixel_FlushBuffer>
 800e1a8:	6823      	ldr	r3, [r4, #0]
 800e1aa:	6063      	str	r3, [r4, #4]
 800e1ac:	68a3      	ldr	r3, [r4, #8]
 800e1ae:	3b01      	subs	r3, #1
 800e1b0:	60a3      	str	r3, [r4, #8]
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e1b6:	bd10      	pop	{r4, pc}
 800e1b8:	20002b40 	.word	0x20002b40

0800e1bc <_NextPixel_SetPixel>:
 800e1bc:	4b33      	ldr	r3, [pc, #204]	; (800e28c <_NextPixel_SetPixel+0xd0>)
 800e1be:	69da      	ldr	r2, [r3, #28]
 800e1c0:	2a02      	cmp	r2, #2
 800e1c2:	b570      	push	{r4, r5, r6, lr}
 800e1c4:	d04e      	beq.n	800e264 <_NextPixel_SetPixel+0xa8>
 800e1c6:	2a04      	cmp	r2, #4
 800e1c8:	d050      	beq.n	800e26c <_NextPixel_SetPixel+0xb0>
 800e1ca:	2a01      	cmp	r2, #1
 800e1cc:	d152      	bne.n	800e274 <_NextPixel_SetPixel+0xb8>
 800e1ce:	6a19      	ldr	r1, [r3, #32]
 800e1d0:	699a      	ldr	r2, [r3, #24]
 800e1d2:	3901      	subs	r1, #1
 800e1d4:	2907      	cmp	r1, #7
 800e1d6:	d84d      	bhi.n	800e274 <_NextPixel_SetPixel+0xb8>
 800e1d8:	e8df f001 	tbb	[pc, r1]
 800e1dc:	264c1504 	.word	0x264c1504
 800e1e0:	404c4c4c 	.word	0x404c4c4c
 800e1e4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e1e6:	7816      	ldrb	r6, [r2, #0]
 800e1e8:	4928      	ldr	r1, [pc, #160]	; (800e28c <_NextPixel_SetPixel+0xd0>)
 800e1ea:	f1c4 0407 	rsb	r4, r4, #7
 800e1ee:	2501      	movs	r5, #1
 800e1f0:	40a5      	lsls	r5, r4
 800e1f2:	ea26 0505 	bic.w	r5, r6, r5
 800e1f6:	fa00 f404 	lsl.w	r4, r0, r4
 800e1fa:	ea45 0004 	orr.w	r0, r5, r4
 800e1fe:	7010      	strb	r0, [r2, #0]
 800e200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e202:	3201      	adds	r2, #1
 800e204:	e020      	b.n	800e248 <_NextPixel_SetPixel+0x8c>
 800e206:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e208:	7816      	ldrb	r6, [r2, #0]
 800e20a:	4920      	ldr	r1, [pc, #128]	; (800e28c <_NextPixel_SetPixel+0xd0>)
 800e20c:	f1c4 0406 	rsb	r4, r4, #6
 800e210:	2503      	movs	r5, #3
 800e212:	40a5      	lsls	r5, r4
 800e214:	ea26 0505 	bic.w	r5, r6, r5
 800e218:	fa00 f404 	lsl.w	r4, r0, r4
 800e21c:	ea45 0004 	orr.w	r0, r5, r4
 800e220:	7010      	strb	r0, [r2, #0]
 800e222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e224:	3202      	adds	r2, #2
 800e226:	e00f      	b.n	800e248 <_NextPixel_SetPixel+0x8c>
 800e228:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e22a:	7816      	ldrb	r6, [r2, #0]
 800e22c:	4917      	ldr	r1, [pc, #92]	; (800e28c <_NextPixel_SetPixel+0xd0>)
 800e22e:	f1c4 0404 	rsb	r4, r4, #4
 800e232:	250f      	movs	r5, #15
 800e234:	40a5      	lsls	r5, r4
 800e236:	ea26 0505 	bic.w	r5, r6, r5
 800e23a:	fa00 f404 	lsl.w	r4, r0, r4
 800e23e:	ea45 0004 	orr.w	r0, r5, r4
 800e242:	7010      	strb	r0, [r2, #0]
 800e244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e246:	3204      	adds	r2, #4
 800e248:	2a08      	cmp	r2, #8
 800e24a:	d001      	beq.n	800e250 <_NextPixel_SetPixel+0x94>
 800e24c:	62ca      	str	r2, [r1, #44]	; 0x2c
 800e24e:	e011      	b.n	800e274 <_NextPixel_SetPixel+0xb8>
 800e250:	2200      	movs	r2, #0
 800e252:	62ca      	str	r2, [r1, #44]	; 0x2c
 800e254:	698a      	ldr	r2, [r1, #24]
 800e256:	3201      	adds	r2, #1
 800e258:	618a      	str	r2, [r1, #24]
 800e25a:	e00b      	b.n	800e274 <_NextPixel_SetPixel+0xb8>
 800e25c:	7010      	strb	r0, [r2, #0]
 800e25e:	699a      	ldr	r2, [r3, #24]
 800e260:	3201      	adds	r2, #1
 800e262:	e006      	b.n	800e272 <_NextPixel_SetPixel+0xb6>
 800e264:	699a      	ldr	r2, [r3, #24]
 800e266:	f822 0b02 	strh.w	r0, [r2], #2
 800e26a:	e002      	b.n	800e272 <_NextPixel_SetPixel+0xb6>
 800e26c:	699a      	ldr	r2, [r3, #24]
 800e26e:	f842 0b04 	str.w	r0, [r2], #4
 800e272:	619a      	str	r2, [r3, #24]
 800e274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e276:	3201      	adds	r2, #1
 800e278:	629a      	str	r2, [r3, #40]	; 0x28
 800e27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d103      	bne.n	800e288 <_NextPixel_SetPixel+0xcc>
 800e280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e284:	f7ff bf66 	b.w	800e154 <_NextPixel_FlushBuffer>
 800e288:	bd70      	pop	{r4, r5, r6, pc}
 800e28a:	bf00      	nop
 800e28c:	20002b40 	.word	0x20002b40

0800e290 <_NextPixel_End>:
 800e290:	4b07      	ldr	r3, [pc, #28]	; (800e2b0 <_NextPixel_End+0x20>)
 800e292:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e294:	b510      	push	{r4, lr}
 800e296:	461c      	mov	r4, r3
 800e298:	b10a      	cbz	r2, 800e29e <_NextPixel_End+0xe>
 800e29a:	f7ff ff5b 	bl	800e154 <_NextPixel_FlushBuffer>
 800e29e:	4805      	ldr	r0, [pc, #20]	; (800e2b4 <_NextPixel_End+0x24>)
 800e2a0:	f000 fe00 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800e2a4:	6920      	ldr	r0, [r4, #16]
 800e2a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2aa:	f000 be27 	b.w	800eefc <GUI_ALLOC_Free>
 800e2ae:	bf00      	nop
 800e2b0:	20002b40 	.word	0x20002b40
 800e2b4:	20002b54 	.word	0x20002b54

0800e2b8 <_NextPixel_Start>:
 800e2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2bc:	469a      	mov	sl, r3
 800e2be:	4b1f      	ldr	r3, [pc, #124]	; (800e33c <_NextPixel_Start+0x84>)
 800e2c0:	4c1f      	ldr	r4, [pc, #124]	; (800e340 <_NextPixel_Start+0x88>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	1a12      	subs	r2, r2, r0
 800e2c6:	3201      	adds	r2, #1
 800e2c8:	4606      	mov	r6, r0
 800e2ca:	7c58      	ldrb	r0, [r3, #17]
 800e2cc:	60e2      	str	r2, [r4, #12]
 800e2ce:	f7fd fe83 	bl	800bfd8 <GUI_GetBitsPerPixelEx>
 800e2d2:	2817      	cmp	r0, #23
 800e2d4:	bfc8      	it	gt
 800e2d6:	2020      	movgt	r0, #32
 800e2d8:	2808      	cmp	r0, #8
 800e2da:	6220      	str	r0, [r4, #32]
 800e2dc:	dd04      	ble.n	800e2e8 <_NextPixel_Start+0x30>
 800e2de:	2810      	cmp	r0, #16
 800e2e0:	bfcc      	ite	gt
 800e2e2:	2504      	movgt	r5, #4
 800e2e4:	2502      	movle	r5, #2
 800e2e6:	e000      	b.n	800e2ea <_NextPixel_Start+0x32>
 800e2e8:	2501      	movs	r5, #1
 800e2ea:	68e3      	ldr	r3, [r4, #12]
 800e2ec:	f8df 9050 	ldr.w	r9, [pc, #80]	; 800e340 <_NextPixel_Start+0x88>
 800e2f0:	fb03 f805 	mul.w	r8, r3, r5
 800e2f4:	f000 feea 	bl	800f0cc <GUI_ALLOC_GetMaxSize>
 800e2f8:	4540      	cmp	r0, r8
 800e2fa:	bf3a      	itte	cc
 800e2fc:	fbb0 f0f5 	udivcc	r0, r0, r5
 800e300:	4368      	mulcc	r0, r5
 800e302:	4640      	movcs	r0, r8
 800e304:	fb90 f0f5 	sdiv	r0, r0, r5
 800e308:	6260      	str	r0, [r4, #36]	; 0x24
 800e30a:	2700      	movs	r7, #0
 800e30c:	4640      	mov	r0, r8
 800e30e:	62a7      	str	r7, [r4, #40]	; 0x28
 800e310:	6066      	str	r6, [r4, #4]
 800e312:	6026      	str	r6, [r4, #0]
 800e314:	f8c4 a008 	str.w	sl, [r4, #8]
 800e318:	61e5      	str	r5, [r4, #28]
 800e31a:	62e7      	str	r7, [r4, #44]	; 0x2c
 800e31c:	f000 ff80 	bl	800f220 <GUI_ALLOC_AllocNoInit>
 800e320:	6120      	str	r0, [r4, #16]
 800e322:	b140      	cbz	r0, 800e336 <_NextPixel_Start+0x7e>
 800e324:	f000 fdb0 	bl	800ee88 <GUI_ALLOC_LockH>
 800e328:	f8c9 0014 	str.w	r0, [r9, #20]
 800e32c:	f8c9 0018 	str.w	r0, [r9, #24]
 800e330:	4638      	mov	r0, r7
 800e332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e336:	2001      	movs	r0, #1
 800e338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e33c:	20000084 	.word	0x20000084
 800e340:	20002b40 	.word	0x20002b40

0800e344 <_GetEarlyOut.isra.0>:
 800e344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e348:	6807      	ldr	r7, [r0, #0]
 800e34a:	680e      	ldr	r6, [r1, #0]
 800e34c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800e350:	9c08      	ldr	r4, [sp, #32]
 800e352:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800e356:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e358:	eb07 0906 	add.w	r9, r7, r6
 800e35c:	681f      	ldr	r7, [r3, #0]
 800e35e:	f8c0 9000 	str.w	r9, [r0]
 800e362:	2f00      	cmp	r7, #0
 800e364:	dd04      	ble.n	800e370 <_GetEarlyOut.isra.0+0x2c>
 800e366:	3f01      	subs	r7, #1
 800e368:	6027      	str	r7, [r4, #0]
 800e36a:	f04f 37ff 	mov.w	r7, #4294967295
 800e36e:	e005      	b.n	800e37c <_GetEarlyOut.isra.0+0x38>
 800e370:	d004      	beq.n	800e37c <_GetEarlyOut.isra.0+0x38>
 800e372:	427f      	negs	r7, r7
 800e374:	2600      	movs	r6, #0
 800e376:	601f      	str	r7, [r3, #0]
 800e378:	6026      	str	r6, [r4, #0]
 800e37a:	2701      	movs	r7, #1
 800e37c:	f8c8 7000 	str.w	r7, [r8]
 800e380:	2f00      	cmp	r7, #0
 800e382:	d032      	beq.n	800e3ea <_GetEarlyOut.isra.0+0xa6>
 800e384:	690f      	ldr	r7, [r1, #16]
 800e386:	694e      	ldr	r6, [r1, #20]
 800e388:	443e      	add	r6, r7
 800e38a:	681f      	ldr	r7, [r3, #0]
 800e38c:	1bbe      	subs	r6, r7, r6
 800e38e:	2e00      	cmp	r6, #0
 800e390:	601e      	str	r6, [r3, #0]
 800e392:	dd2a      	ble.n	800e3ea <_GetEarlyOut.isra.0+0xa6>
 800e394:	f8d8 3000 	ldr.w	r3, [r8]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	da08      	bge.n	800e3ae <_GetEarlyOut.isra.0+0x6a>
 800e39c:	694b      	ldr	r3, [r1, #20]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	dd0e      	ble.n	800e3c0 <_GetEarlyOut.isra.0+0x7c>
 800e3a2:	fb03 9605 	mla	r6, r3, r5, r9
 800e3a6:	6006      	str	r6, [r0, #0]
 800e3a8:	6820      	ldr	r0, [r4, #0]
 800e3aa:	1ac3      	subs	r3, r0, r3
 800e3ac:	e007      	b.n	800e3be <_GetEarlyOut.isra.0+0x7a>
 800e3ae:	690b      	ldr	r3, [r1, #16]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	dd05      	ble.n	800e3c0 <_GetEarlyOut.isra.0+0x7c>
 800e3b4:	fb03 9605 	mla	r6, r3, r5, r9
 800e3b8:	6006      	str	r6, [r0, #0]
 800e3ba:	6820      	ldr	r0, [r4, #0]
 800e3bc:	4403      	add	r3, r0
 800e3be:	6023      	str	r3, [r4, #0]
 800e3c0:	6888      	ldr	r0, [r1, #8]
 800e3c2:	68cb      	ldr	r3, [r1, #12]
 800e3c4:	4403      	add	r3, r0
 800e3c6:	6810      	ldr	r0, [r2, #0]
 800e3c8:	1ac3      	subs	r3, r0, r3
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	6013      	str	r3, [r2, #0]
 800e3ce:	dd0c      	ble.n	800e3ea <_GetEarlyOut.isra.0+0xa6>
 800e3d0:	f8dc 2000 	ldr.w	r2, [ip]
 800e3d4:	68cb      	ldr	r3, [r1, #12]
 800e3d6:	4413      	add	r3, r2
 800e3d8:	f8cc 3000 	str.w	r3, [ip]
 800e3dc:	684b      	ldr	r3, [r1, #4]
 800e3de:	1aed      	subs	r5, r5, r3
 800e3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3e2:	2000      	movs	r0, #0
 800e3e4:	601d      	str	r5, [r3, #0]
 800e3e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3ea:	2001      	movs	r0, #1
 800e3ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e3f0 <GUI_BMP__ReadData>:
 800e3f0:	b570      	push	{r4, r5, r6, lr}
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	460d      	mov	r5, r1
 800e3f6:	b10b      	cbz	r3, 800e3fc <GUI_BMP__ReadData+0xc>
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	6043      	str	r3, [r0, #4]
 800e3fc:	4611      	mov	r1, r2
 800e3fe:	6826      	ldr	r6, [r4, #0]
 800e400:	68a0      	ldr	r0, [r4, #8]
 800e402:	6863      	ldr	r3, [r4, #4]
 800e404:	462a      	mov	r2, r5
 800e406:	47b0      	blx	r6
 800e408:	42a8      	cmp	r0, r5
 800e40a:	d104      	bne.n	800e416 <GUI_BMP__ReadData+0x26>
 800e40c:	6863      	ldr	r3, [r4, #4]
 800e40e:	441d      	add	r5, r3
 800e410:	6065      	str	r5, [r4, #4]
 800e412:	2000      	movs	r0, #0
 800e414:	bd70      	pop	{r4, r5, r6, pc}
 800e416:	2001      	movs	r0, #1
 800e418:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e41c <GUI_BMP__ReadPalette>:
 800e41c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e41e:	4606      	mov	r6, r0
 800e420:	460d      	mov	r5, r1
 800e422:	2400      	movs	r4, #0
 800e424:	42ac      	cmp	r4, r5
 800e426:	da17      	bge.n	800e458 <GUI_BMP__ReadPalette+0x3c>
 800e428:	2104      	movs	r1, #4
 800e42a:	4630      	mov	r0, r6
 800e42c:	eb0d 0201 	add.w	r2, sp, r1
 800e430:	2300      	movs	r3, #0
 800e432:	f7ff ffdd 	bl	800e3f0 <GUI_BMP__ReadData>
 800e436:	b988      	cbnz	r0, 800e45c <GUI_BMP__ReadPalette+0x40>
 800e438:	9b01      	ldr	r3, [sp, #4]
 800e43a:	4a0a      	ldr	r2, [pc, #40]	; (800e464 <GUI_BMP__ReadPalette+0x48>)
 800e43c:	7858      	ldrb	r0, [r3, #1]
 800e43e:	6817      	ldr	r7, [r2, #0]
 800e440:	781a      	ldrb	r2, [r3, #0]
 800e442:	789b      	ldrb	r3, [r3, #2]
 800e444:	0200      	lsls	r0, r0, #8
 800e446:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e44a:	4318      	orrs	r0, r3
 800e44c:	f7fe f97e 	bl	800c74c <LCD_Color2Index>
 800e450:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 800e454:	3401      	adds	r4, #1
 800e456:	e7e5      	b.n	800e424 <GUI_BMP__ReadPalette+0x8>
 800e458:	2000      	movs	r0, #0
 800e45a:	e000      	b.n	800e45e <GUI_BMP__ReadPalette+0x42>
 800e45c:	2001      	movs	r0, #1
 800e45e:	b003      	add	sp, #12
 800e460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e462:	bf00      	nop
 800e464:	20007838 	.word	0x20007838

0800e468 <_ManageBitfields.part.2>:
 800e468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e46a:	2300      	movs	r3, #0
 800e46c:	2110      	movs	r1, #16
 800e46e:	aa01      	add	r2, sp, #4
 800e470:	f7ff ffbe 	bl	800e3f0 <GUI_BMP__ReadData>
 800e474:	4605      	mov	r5, r0
 800e476:	bb10      	cbnz	r0, 800e4be <_ManageBitfields.part.2+0x56>
 800e478:	a801      	add	r0, sp, #4
 800e47a:	f7fe fa69 	bl	800c950 <GUI__Read32>
 800e47e:	4c12      	ldr	r4, [pc, #72]	; (800e4c8 <_ManageBitfields.part.2+0x60>)
 800e480:	6020      	str	r0, [r4, #0]
 800e482:	a801      	add	r0, sp, #4
 800e484:	f7fe fa64 	bl	800c950 <GUI__Read32>
 800e488:	6060      	str	r0, [r4, #4]
 800e48a:	a801      	add	r0, sp, #4
 800e48c:	f7fe fa60 	bl	800c950 <GUI__Read32>
 800e490:	4621      	mov	r1, r4
 800e492:	60a0      	str	r0, [r4, #8]
 800e494:	f104 0218 	add.w	r2, r4, #24
 800e498:	f851 0b0c 	ldr.w	r0, [r1], #12
 800e49c:	f7ff fe0c 	bl	800e0b8 <_GetBitfieldsPara>
 800e4a0:	6860      	ldr	r0, [r4, #4]
 800e4a2:	f104 0110 	add.w	r1, r4, #16
 800e4a6:	f104 021c 	add.w	r2, r4, #28
 800e4aa:	f7ff fe05 	bl	800e0b8 <_GetBitfieldsPara>
 800e4ae:	68a0      	ldr	r0, [r4, #8]
 800e4b0:	f104 0114 	add.w	r1, r4, #20
 800e4b4:	f104 0220 	add.w	r2, r4, #32
 800e4b8:	f7ff fdfe 	bl	800e0b8 <_GetBitfieldsPara>
 800e4bc:	e000      	b.n	800e4c0 <_ManageBitfields.part.2+0x58>
 800e4be:	2501      	movs	r5, #1
 800e4c0:	4628      	mov	r0, r5
 800e4c2:	b003      	add	sp, #12
 800e4c4:	bd30      	pop	{r4, r5, pc}
 800e4c6:	bf00      	nop
 800e4c8:	20002b70 	.word	0x20002b70

0800e4cc <_Index2ColorBitfields>:
 800e4cc:	4b15      	ldr	r3, [pc, #84]	; (800e524 <_Index2ColorBitfields+0x58>)
 800e4ce:	685a      	ldr	r2, [r3, #4]
 800e4d0:	6919      	ldr	r1, [r3, #16]
 800e4d2:	4002      	ands	r2, r0
 800e4d4:	40ca      	lsrs	r2, r1
 800e4d6:	69d9      	ldr	r1, [r3, #28]
 800e4d8:	b530      	push	{r4, r5, lr}
 800e4da:	ebc2 2502 	rsb	r5, r2, r2, lsl #8
 800e4de:	2201      	movs	r2, #1
 800e4e0:	fa02 f101 	lsl.w	r1, r2, r1
 800e4e4:	3901      	subs	r1, #1
 800e4e6:	fbb5 f5f1 	udiv	r5, r5, r1
 800e4ea:	6899      	ldr	r1, [r3, #8]
 800e4ec:	695c      	ldr	r4, [r3, #20]
 800e4ee:	4001      	ands	r1, r0
 800e4f0:	40e1      	lsrs	r1, r4
 800e4f2:	6a1c      	ldr	r4, [r3, #32]
 800e4f4:	fa02 f404 	lsl.w	r4, r2, r4
 800e4f8:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 800e4fc:	3c01      	subs	r4, #1
 800e4fe:	fbb1 f4f4 	udiv	r4, r1, r4
 800e502:	0424      	lsls	r4, r4, #16
 800e504:	6819      	ldr	r1, [r3, #0]
 800e506:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
 800e50a:	68dc      	ldr	r4, [r3, #12]
 800e50c:	699b      	ldr	r3, [r3, #24]
 800e50e:	4001      	ands	r1, r0
 800e510:	40e1      	lsrs	r1, r4
 800e512:	409a      	lsls	r2, r3
 800e514:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 800e518:	3a01      	subs	r2, #1
 800e51a:	fbb1 f0f2 	udiv	r0, r1, r2
 800e51e:	4328      	orrs	r0, r5
 800e520:	bd30      	pop	{r4, r5, pc}
 800e522:	bf00      	nop
 800e524:	20002b70 	.word	0x20002b70

0800e528 <_DrawBitmap_RGB>:
 800e528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e52c:	b09d      	sub	sp, #116	; 0x74
 800e52e:	af0a      	add	r7, sp, #40	; 0x28
 800e530:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
 800e534:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800e538:	9107      	str	r1, [sp, #28]
 800e53a:	4606      	mov	r6, r0
 800e53c:	468a      	mov	sl, r1
 800e53e:	4614      	mov	r4, r2
 800e540:	2100      	movs	r1, #0
 800e542:	2218      	movs	r2, #24
 800e544:	4638      	mov	r0, r7
 800e546:	469b      	mov	fp, r3
 800e548:	9306      	str	r3, [sp, #24]
 800e54a:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800e54c:	f003 fe54 	bl	80121f8 <memset>
 800e550:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800e554:	e88d 0208 	stmia.w	sp, {r3, r9}
 800e558:	4650      	mov	r0, sl
 800e55a:	4621      	mov	r1, r4
 800e55c:	465a      	mov	r2, fp
 800e55e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e560:	9702      	str	r7, [sp, #8]
 800e562:	f7ff fd3f 	bl	800dfe4 <_GetClipParam>
 800e566:	ab07      	add	r3, sp, #28
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	ab12      	add	r3, sp, #72	; 0x48
 800e56c:	9301      	str	r3, [sp, #4]
 800e56e:	ab08      	add	r3, sp, #32
 800e570:	9302      	str	r3, [sp, #8]
 800e572:	ab09      	add	r3, sp, #36	; 0x24
 800e574:	9303      	str	r3, [sp, #12]
 800e576:	f8cd 9010 	str.w	r9, [sp, #16]
 800e57a:	1d30      	adds	r0, r6, #4
 800e57c:	4639      	mov	r1, r7
 800e57e:	aa06      	add	r2, sp, #24
 800e580:	ab26      	add	r3, sp, #152	; 0x98
 800e582:	f7ff fedf 	bl	800e344 <_GetEarlyOut.isra.0>
 800e586:	b108      	cbz	r0, 800e58c <_DrawBitmap_RGB+0x64>
 800e588:	2400      	movs	r4, #0
 800e58a:	e04e      	b.n	800e62a <_DrawBitmap_RGB+0x102>
 800e58c:	4b29      	ldr	r3, [pc, #164]	; (800e634 <_DrawBitmap_RGB+0x10c>)
 800e58e:	4f2a      	ldr	r7, [pc, #168]	; (800e638 <_DrawBitmap_RGB+0x110>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	7c58      	ldrb	r0, [r3, #17]
 800e594:	f7fd fd4e 	bl	800c034 <GUI_GetpfColor2IndexEx>
 800e598:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e59a:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 800e63c <_DrawBitmap_RGB+0x114>
 800e59e:	9015      	str	r0, [sp, #84]	; 0x54
 800e5a0:	42bd      	cmp	r5, r7
 800e5a2:	9316      	str	r3, [sp, #88]	; 0x58
 800e5a4:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 800e5a8:	9807      	ldr	r0, [sp, #28]
 800e5aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e5ac:	9a06      	ldr	r2, [sp, #24]
 800e5ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e5b0:	d109      	bne.n	800e5c6 <_DrawBitmap_RGB+0x9e>
 800e5b2:	4421      	add	r1, r4
 800e5b4:	4402      	add	r2, r0
 800e5b6:	440b      	add	r3, r1
 800e5b8:	f8de 4000 	ldr.w	r4, [lr]
 800e5bc:	3a01      	subs	r2, #1
 800e5be:	3b01      	subs	r3, #1
 800e5c0:	47a0      	blx	r4
 800e5c2:	b148      	cbz	r0, 800e5d8 <_DrawBitmap_RGB+0xb0>
 800e5c4:	e01b      	b.n	800e5fe <_DrawBitmap_RGB+0xd6>
 800e5c6:	440c      	add	r4, r1
 800e5c8:	9419      	str	r4, [sp, #100]	; 0x64
 800e5ca:	4402      	add	r2, r0
 800e5cc:	441c      	add	r4, r3
 800e5ce:	3a01      	subs	r2, #1
 800e5d0:	3c01      	subs	r4, #1
 800e5d2:	9018      	str	r0, [sp, #96]	; 0x60
 800e5d4:	921a      	str	r2, [sp, #104]	; 0x68
 800e5d6:	941b      	str	r4, [sp, #108]	; 0x6c
 800e5d8:	9b06      	ldr	r3, [sp, #24]
 800e5da:	9313      	str	r3, [sp, #76]	; 0x4c
 800e5dc:	2300      	movs	r3, #0
 800e5de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e5e2:	9311      	str	r3, [sp, #68]	; 0x44
 800e5e4:	4630      	mov	r0, r6
 800e5e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5e8:	aa10      	add	r2, sp, #64	; 0x40
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	f7ff ff00 	bl	800e3f0 <GUI_BMP__ReadData>
 800e5f0:	4604      	mov	r4, r0
 800e5f2:	b130      	cbz	r0, 800e602 <_DrawBitmap_RGB+0xda>
 800e5f4:	42bd      	cmp	r5, r7
 800e5f6:	d102      	bne.n	800e5fe <_DrawBitmap_RGB+0xd6>
 800e5f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	4798      	blx	r3
 800e5fe:	2401      	movs	r4, #1
 800e600:	e013      	b.n	800e62a <_DrawBitmap_RGB+0x102>
 800e602:	a810      	add	r0, sp, #64	; 0x40
 800e604:	47a8      	blx	r5
 800e606:	6872      	ldr	r2, [r6, #4]
 800e608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e60a:	4413      	add	r3, r2
 800e60c:	6073      	str	r3, [r6, #4]
 800e60e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e610:	9b08      	ldr	r3, [sp, #32]
 800e612:	4413      	add	r3, r2
 800e614:	9312      	str	r3, [sp, #72]	; 0x48
 800e616:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e618:	3b01      	subs	r3, #1
 800e61a:	9326      	str	r3, [sp, #152]	; 0x98
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d1e1      	bne.n	800e5e4 <_DrawBitmap_RGB+0xbc>
 800e620:	42bd      	cmp	r5, r7
 800e622:	d1b1      	bne.n	800e588 <_DrawBitmap_RGB+0x60>
 800e624:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e626:	68db      	ldr	r3, [r3, #12]
 800e628:	4798      	blx	r3
 800e62a:	4620      	mov	r0, r4
 800e62c:	b01d      	add	sp, #116	; 0x74
 800e62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e632:	bf00      	nop
 800e634:	20000084 	.word	0x20000084
 800e638:	0800e0db 	.word	0x0800e0db
 800e63c:	20000098 	.word	0x20000098

0800e640 <_DrawBitmap_16bpp>:
 800e640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e644:	461f      	mov	r7, r3
 800e646:	b093      	sub	sp, #76	; 0x4c
 800e648:	ea4f 1807 	mov.w	r8, r7, lsl #4
 800e64c:	ac0c      	add	r4, sp, #48	; 0x30
 800e64e:	f108 081f 	add.w	r8, r8, #31
 800e652:	4605      	mov	r5, r0
 800e654:	4689      	mov	r9, r1
 800e656:	9107      	str	r1, [sp, #28]
 800e658:	4616      	mov	r6, r2
 800e65a:	2100      	movs	r1, #0
 800e65c:	2218      	movs	r2, #24
 800e65e:	4620      	mov	r0, r4
 800e660:	ea4f 1868 	mov.w	r8, r8, asr #5
 800e664:	9306      	str	r3, [sp, #24]
 800e666:	f003 fdc7 	bl	80121f8 <memset>
 800e66a:	463a      	mov	r2, r7
 800e66c:	2310      	movs	r3, #16
 800e66e:	ea4f 0788 	mov.w	r7, r8, lsl #2
 800e672:	e88d 0088 	stmia.w	sp, {r3, r7}
 800e676:	4648      	mov	r0, r9
 800e678:	4631      	mov	r1, r6
 800e67a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e67c:	9402      	str	r4, [sp, #8]
 800e67e:	f7ff fcb1 	bl	800dfe4 <_GetClipParam>
 800e682:	ab07      	add	r3, sp, #28
 800e684:	9300      	str	r3, [sp, #0]
 800e686:	ab09      	add	r3, sp, #36	; 0x24
 800e688:	9301      	str	r3, [sp, #4]
 800e68a:	ab0a      	add	r3, sp, #40	; 0x28
 800e68c:	9302      	str	r3, [sp, #8]
 800e68e:	ab0b      	add	r3, sp, #44	; 0x2c
 800e690:	9303      	str	r3, [sp, #12]
 800e692:	9704      	str	r7, [sp, #16]
 800e694:	1d28      	adds	r0, r5, #4
 800e696:	4621      	mov	r1, r4
 800e698:	aa06      	add	r2, sp, #24
 800e69a:	ab1a      	add	r3, sp, #104	; 0x68
 800e69c:	f7ff fe52 	bl	800e344 <_GetEarlyOut.isra.0>
 800e6a0:	2800      	cmp	r0, #0
 800e6a2:	d142      	bne.n	800e72a <_DrawBitmap_16bpp+0xea>
 800e6a4:	4b23      	ldr	r3, [pc, #140]	; (800e734 <_DrawBitmap_16bpp+0xf4>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	7c58      	ldrb	r0, [r3, #17]
 800e6aa:	f7fd fcbb 	bl	800c024 <LCD_GetpfColor2IndexEx>
 800e6ae:	4607      	mov	r7, r0
 800e6b0:	b908      	cbnz	r0, 800e6b6 <_DrawBitmap_16bpp+0x76>
 800e6b2:	2401      	movs	r4, #1
 800e6b4:	e03a      	b.n	800e72c <_DrawBitmap_16bpp+0xec>
 800e6b6:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e6b8:	9807      	ldr	r0, [sp, #28]
 800e6ba:	9a06      	ldr	r2, [sp, #24]
 800e6bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e6be:	4431      	add	r1, r6
 800e6c0:	4e1d      	ldr	r6, [pc, #116]	; (800e738 <_DrawBitmap_16bpp+0xf8>)
 800e6c2:	4402      	add	r2, r0
 800e6c4:	440b      	add	r3, r1
 800e6c6:	6834      	ldr	r4, [r6, #0]
 800e6c8:	3a01      	subs	r2, #1
 800e6ca:	3b01      	subs	r3, #1
 800e6cc:	47a0      	blx	r4
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	d1ef      	bne.n	800e6b2 <_DrawBitmap_16bpp+0x72>
 800e6d2:	4628      	mov	r0, r5
 800e6d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e6d6:	aa08      	add	r2, sp, #32
 800e6d8:	2300      	movs	r3, #0
 800e6da:	f7ff fe89 	bl	800e3f0 <GUI_BMP__ReadData>
 800e6de:	4604      	mov	r4, r0
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	d1e6      	bne.n	800e6b2 <_DrawBitmap_16bpp+0x72>
 800e6e4:	4680      	mov	r8, r0
 800e6e6:	9b06      	ldr	r3, [sp, #24]
 800e6e8:	4598      	cmp	r8, r3
 800e6ea:	da0a      	bge.n	800e702 <_DrawBitmap_16bpp+0xc2>
 800e6ec:	a808      	add	r0, sp, #32
 800e6ee:	f7fe f927 	bl	800c940 <GUI__Read16>
 800e6f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e6f4:	4798      	blx	r3
 800e6f6:	47b8      	blx	r7
 800e6f8:	6873      	ldr	r3, [r6, #4]
 800e6fa:	4798      	blx	r3
 800e6fc:	f108 0801 	add.w	r8, r8, #1
 800e700:	e7f1      	b.n	800e6e6 <_DrawBitmap_16bpp+0xa6>
 800e702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e704:	b10b      	cbz	r3, 800e70a <_DrawBitmap_16bpp+0xca>
 800e706:	68b3      	ldr	r3, [r6, #8]
 800e708:	4798      	blx	r3
 800e70a:	686a      	ldr	r2, [r5, #4]
 800e70c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e70e:	4413      	add	r3, r2
 800e710:	606b      	str	r3, [r5, #4]
 800e712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e716:	4413      	add	r3, r2
 800e718:	9309      	str	r3, [sp, #36]	; 0x24
 800e71a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e71c:	3b01      	subs	r3, #1
 800e71e:	931a      	str	r3, [sp, #104]	; 0x68
 800e720:	2b00      	cmp	r3, #0
 800e722:	d1d6      	bne.n	800e6d2 <_DrawBitmap_16bpp+0x92>
 800e724:	68f3      	ldr	r3, [r6, #12]
 800e726:	4798      	blx	r3
 800e728:	e000      	b.n	800e72c <_DrawBitmap_16bpp+0xec>
 800e72a:	2400      	movs	r4, #0
 800e72c:	4620      	mov	r0, r4
 800e72e:	b013      	add	sp, #76	; 0x4c
 800e730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e734:	20000084 	.word	0x20000084
 800e738:	20000098 	.word	0x20000098

0800e73c <GUI_BMP__Init>:
 800e73c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e740:	468b      	mov	fp, r1
 800e742:	4692      	mov	sl, r2
 800e744:	4698      	mov	r8, r3
 800e746:	2136      	movs	r1, #54	; 0x36
 800e748:	aa01      	add	r2, sp, #4
 800e74a:	2301      	movs	r3, #1
 800e74c:	4605      	mov	r5, r0
 800e74e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e750:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800e752:	f7ff fe4d 	bl	800e3f0 <GUI_BMP__ReadData>
 800e756:	2800      	cmp	r0, #0
 800e758:	d15e      	bne.n	800e818 <GUI_BMP__Init+0xdc>
 800e75a:	a801      	add	r0, sp, #4
 800e75c:	f7fe f8f0 	bl	800c940 <GUI__Read16>
 800e760:	9b01      	ldr	r3, [sp, #4]
 800e762:	4681      	mov	r9, r0
 800e764:	330c      	adds	r3, #12
 800e766:	a801      	add	r0, sp, #4
 800e768:	9301      	str	r3, [sp, #4]
 800e76a:	f7fe f8f1 	bl	800c950 <GUI__Read32>
 800e76e:	4607      	mov	r7, r0
 800e770:	a801      	add	r0, sp, #4
 800e772:	f7fe f8ed 	bl	800c950 <GUI__Read32>
 800e776:	f8cb 0000 	str.w	r0, [fp]
 800e77a:	a801      	add	r0, sp, #4
 800e77c:	f7fe f8e8 	bl	800c950 <GUI__Read32>
 800e780:	9b01      	ldr	r3, [sp, #4]
 800e782:	f8ca 0000 	str.w	r0, [sl]
 800e786:	3302      	adds	r3, #2
 800e788:	a801      	add	r0, sp, #4
 800e78a:	9301      	str	r3, [sp, #4]
 800e78c:	f7fe f8d8 	bl	800c940 <GUI__Read16>
 800e790:	f8a8 0000 	strh.w	r0, [r8]
 800e794:	a801      	add	r0, sp, #4
 800e796:	f7fe f8db 	bl	800c950 <GUI__Read32>
 800e79a:	9b01      	ldr	r3, [sp, #4]
 800e79c:	6030      	str	r0, [r6, #0]
 800e79e:	330c      	adds	r3, #12
 800e7a0:	a801      	add	r0, sp, #4
 800e7a2:	9301      	str	r3, [sp, #4]
 800e7a4:	f7fe f8d4 	bl	800c950 <GUI__Read32>
 800e7a8:	f8b8 3000 	ldrh.w	r3, [r8]
 800e7ac:	2b08      	cmp	r3, #8
 800e7ae:	d00f      	beq.n	800e7d0 <GUI_BMP__Init+0x94>
 800e7b0:	d805      	bhi.n	800e7be <GUI_BMP__Init+0x82>
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d00a      	beq.n	800e7cc <GUI_BMP__Init+0x90>
 800e7b6:	2b04      	cmp	r3, #4
 800e7b8:	d12e      	bne.n	800e818 <GUI_BMP__Init+0xdc>
 800e7ba:	2310      	movs	r3, #16
 800e7bc:	e00c      	b.n	800e7d8 <GUI_BMP__Init+0x9c>
 800e7be:	2b18      	cmp	r3, #24
 800e7c0:	d009      	beq.n	800e7d6 <GUI_BMP__Init+0x9a>
 800e7c2:	2b20      	cmp	r3, #32
 800e7c4:	d007      	beq.n	800e7d6 <GUI_BMP__Init+0x9a>
 800e7c6:	2b10      	cmp	r3, #16
 800e7c8:	d126      	bne.n	800e818 <GUI_BMP__Init+0xdc>
 800e7ca:	e004      	b.n	800e7d6 <GUI_BMP__Init+0x9a>
 800e7cc:	2302      	movs	r3, #2
 800e7ce:	e003      	b.n	800e7d8 <GUI_BMP__Init+0x9c>
 800e7d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e7d4:	e000      	b.n	800e7d8 <GUI_BMP__Init+0x9c>
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	6023      	str	r3, [r4, #0]
 800e7da:	6823      	ldr	r3, [r4, #0]
 800e7dc:	b10b      	cbz	r3, 800e7e2 <GUI_BMP__Init+0xa6>
 800e7de:	b100      	cbz	r0, 800e7e2 <GUI_BMP__Init+0xa6>
 800e7e0:	6020      	str	r0, [r4, #0]
 800e7e2:	6833      	ldr	r3, [r6, #0]
 800e7e4:	2b03      	cmp	r3, #3
 800e7e6:	d105      	bne.n	800e7f4 <GUI_BMP__Init+0xb8>
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	f7ff fe3d 	bl	800e468 <_ManageBitfields.part.2>
 800e7ee:	686b      	ldr	r3, [r5, #4]
 800e7f0:	3b38      	subs	r3, #56	; 0x38
 800e7f2:	e001      	b.n	800e7f8 <GUI_BMP__Init+0xbc>
 800e7f4:	686b      	ldr	r3, [r5, #4]
 800e7f6:	3b28      	subs	r3, #40	; 0x28
 800e7f8:	441f      	add	r7, r3
 800e7fa:	6823      	ldr	r3, [r4, #0]
 800e7fc:	606f      	str	r7, [r5, #4]
 800e7fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e802:	dc09      	bgt.n	800e818 <GUI_BMP__Init+0xdc>
 800e804:	f644 5342 	movw	r3, #19778	; 0x4d42
 800e808:	4599      	cmp	r9, r3
 800e80a:	d105      	bne.n	800e818 <GUI_BMP__Init+0xdc>
 800e80c:	6830      	ldr	r0, [r6, #0]
 800e80e:	2803      	cmp	r0, #3
 800e810:	bf94      	ite	ls
 800e812:	2000      	movls	r0, #0
 800e814:	2001      	movhi	r0, #1
 800e816:	e000      	b.n	800e81a <GUI_BMP__Init+0xde>
 800e818:	2001      	movs	r0, #1
 800e81a:	b003      	add	sp, #12
 800e81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e820 <GUI_BMP_DrawEx>:
 800e820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e824:	b0a5      	sub	sp, #148	; 0x94
 800e826:	461d      	mov	r5, r3
 800e828:	ab10      	add	r3, sp, #64	; 0x40
 800e82a:	9300      	str	r3, [sp, #0]
 800e82c:	ab11      	add	r3, sp, #68	; 0x44
 800e82e:	901b      	str	r0, [sp, #108]	; 0x6c
 800e830:	911d      	str	r1, [sp, #116]	; 0x74
 800e832:	9301      	str	r3, [sp, #4]
 800e834:	4617      	mov	r7, r2
 800e836:	a81b      	add	r0, sp, #108	; 0x6c
 800e838:	a90e      	add	r1, sp, #56	; 0x38
 800e83a:	aa0f      	add	r2, sp, #60	; 0x3c
 800e83c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800e840:	f7ff ff7c 	bl	800e73c <GUI_BMP__Init>
 800e844:	4604      	mov	r4, r0
 800e846:	2800      	cmp	r0, #0
 800e848:	f040 8229 	bne.w	800ec9e <GUI_BMP_DrawEx+0x47e>
 800e84c:	4b9e      	ldr	r3, [pc, #632]	; (800eac8 <GUI_BMP_DrawEx+0x2a8>)
 800e84e:	6819      	ldr	r1, [r3, #0]
 800e850:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800e852:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800e854:	eb05 0803 	add.w	r8, r5, r3
 800e858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e85a:	f8ad 8066 	strh.w	r8, [sp, #102]	; 0x66
 800e85e:	4407      	add	r7, r0
 800e860:	3b01      	subs	r3, #1
 800e862:	443b      	add	r3, r7
 800e864:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 800e868:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e86a:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
 800e86e:	3b01      	subs	r3, #1
 800e870:	4443      	add	r3, r8
 800e872:	a819      	add	r0, sp, #100	; 0x64
 800e874:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 800e878:	f7fa ff9a 	bl	80097b0 <WM__InitIVRSearch>
 800e87c:	2800      	cmp	r0, #0
 800e87e:	f000 8215 	beq.w	800ecac <GUI_BMP_DrawEx+0x48c>
 800e882:	9408      	str	r4, [sp, #32]
 800e884:	46a1      	mov	r9, r4
 800e886:	9a08      	ldr	r2, [sp, #32]
 800e888:	b15a      	cbz	r2, 800e8a2 <GUI_BMP_DrawEx+0x82>
 800e88a:	ab10      	add	r3, sp, #64	; 0x40
 800e88c:	9300      	str	r3, [sp, #0]
 800e88e:	ab11      	add	r3, sp, #68	; 0x44
 800e890:	9301      	str	r3, [sp, #4]
 800e892:	a81b      	add	r0, sp, #108	; 0x6c
 800e894:	a90e      	add	r1, sp, #56	; 0x38
 800e896:	aa0f      	add	r2, sp, #60	; 0x3c
 800e898:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800e89c:	f7ff ff4e 	bl	800e73c <GUI_BMP__Init>
 800e8a0:	4681      	mov	r9, r0
 800e8a2:	f1b9 0f00 	cmp.w	r9, #0
 800e8a6:	f040 81f0 	bne.w	800ec8a <GUI_BMP_DrawEx+0x46a>
 800e8aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8ac:	9307      	str	r3, [sp, #28]
 800e8ae:	2b03      	cmp	r3, #3
 800e8b0:	f200 81eb 	bhi.w	800ec8a <GUI_BMP_DrawEx+0x46a>
 800e8b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e8b8:	00a40004 	.word	0x00a40004
 800e8bc:	01cd00a4 	.word	0x01cd00a4
 800e8c0:	f8bd 4036 	ldrh.w	r4, [sp, #54]	; 0x36
 800e8c4:	2c08      	cmp	r4, #8
 800e8c6:	d012      	beq.n	800e8ee <GUI_BMP_DrawEx+0xce>
 800e8c8:	d805      	bhi.n	800e8d6 <GUI_BMP_DrawEx+0xb6>
 800e8ca:	2c01      	cmp	r4, #1
 800e8cc:	d00f      	beq.n	800e8ee <GUI_BMP_DrawEx+0xce>
 800e8ce:	2c04      	cmp	r4, #4
 800e8d0:	f040 81d9 	bne.w	800ec86 <GUI_BMP_DrawEx+0x466>
 800e8d4:	e00b      	b.n	800e8ee <GUI_BMP_DrawEx+0xce>
 800e8d6:	2c18      	cmp	r4, #24
 800e8d8:	d071      	beq.n	800e9be <GUI_BMP_DrawEx+0x19e>
 800e8da:	2c20      	cmp	r4, #32
 800e8dc:	f000 8084 	beq.w	800e9e8 <GUI_BMP_DrawEx+0x1c8>
 800e8e0:	2c10      	cmp	r4, #16
 800e8e2:	f040 81d0 	bne.w	800ec86 <GUI_BMP_DrawEx+0x466>
 800e8e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e8e8:	9300      	str	r3, [sp, #0]
 800e8ea:	4b78      	ldr	r3, [pc, #480]	; (800eacc <GUI_BMP_DrawEx+0x2ac>)
 800e8ec:	e1c3      	b.n	800ec76 <GUI_BMP_DrawEx+0x456>
 800e8ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8f0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e8f2:	9313      	str	r3, [sp, #76]	; 0x4c
 800e8f4:	ae1e      	add	r6, sp, #120	; 0x78
 800e8f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e8f8:	9712      	str	r7, [sp, #72]	; 0x48
 800e8fa:	2100      	movs	r1, #0
 800e8fc:	4630      	mov	r0, r6
 800e8fe:	2218      	movs	r2, #24
 800e900:	9314      	str	r3, [sp, #80]	; 0x50
 800e902:	f003 fc79 	bl	80121f8 <memset>
 800e906:	a81b      	add	r0, sp, #108	; 0x6c
 800e908:	4629      	mov	r1, r5
 800e90a:	f7ff fd87 	bl	800e41c <GUI_BMP__ReadPalette>
 800e90e:	2800      	cmp	r0, #0
 800e910:	f040 81b9 	bne.w	800ec86 <GUI_BMP_DrawEx+0x466>
 800e914:	2c04      	cmp	r4, #4
 800e916:	d005      	beq.n	800e924 <GUI_BMP_DrawEx+0x104>
 800e918:	2c08      	cmp	r4, #8
 800e91a:	d009      	beq.n	800e930 <GUI_BMP_DrawEx+0x110>
 800e91c:	2c01      	cmp	r4, #1
 800e91e:	d10c      	bne.n	800e93a <GUI_BMP_DrawEx+0x11a>
 800e920:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800e922:	e001      	b.n	800e928 <GUI_BMP_DrawEx+0x108>
 800e924:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800e926:	00ad      	lsls	r5, r5, #2
 800e928:	351f      	adds	r5, #31
 800e92a:	116d      	asrs	r5, r5, #5
 800e92c:	00ad      	lsls	r5, r5, #2
 800e92e:	e005      	b.n	800e93c <GUI_BMP_DrawEx+0x11c>
 800e930:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800e932:	3503      	adds	r5, #3
 800e934:	f025 0503 	bic.w	r5, r5, #3
 800e938:	e000      	b.n	800e93c <GUI_BMP_DrawEx+0x11c>
 800e93a:	4605      	mov	r5, r0
 800e93c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e93e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e940:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e942:	4641      	mov	r1, r8
 800e944:	e88d 0070 	stmia.w	sp, {r4, r5, r6}
 800e948:	f7ff fb4c 	bl	800dfe4 <_GetClipParam>
 800e94c:	ab12      	add	r3, sp, #72	; 0x48
 800e94e:	9300      	str	r3, [sp, #0]
 800e950:	ab16      	add	r3, sp, #88	; 0x58
 800e952:	9301      	str	r3, [sp, #4]
 800e954:	ab17      	add	r3, sp, #92	; 0x5c
 800e956:	9302      	str	r3, [sp, #8]
 800e958:	ab18      	add	r3, sp, #96	; 0x60
 800e95a:	9303      	str	r3, [sp, #12]
 800e95c:	9504      	str	r5, [sp, #16]
 800e95e:	a81c      	add	r0, sp, #112	; 0x70
 800e960:	4631      	mov	r1, r6
 800e962:	aa13      	add	r2, sp, #76	; 0x4c
 800e964:	ab14      	add	r3, sp, #80	; 0x50
 800e966:	f7ff fced 	bl	800e344 <_GetEarlyOut.isra.0>
 800e96a:	2800      	cmp	r0, #0
 800e96c:	f040 818d 	bne.w	800ec8a <GUI_BMP_DrawEx+0x46a>
 800e970:	a81b      	add	r0, sp, #108	; 0x6c
 800e972:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800e974:	aa15      	add	r2, sp, #84	; 0x54
 800e976:	2300      	movs	r3, #0
 800e978:	f7ff fd3a 	bl	800e3f0 <GUI_BMP__ReadData>
 800e97c:	2800      	cmp	r0, #0
 800e97e:	f040 8182 	bne.w	800ec86 <GUI_BMP_DrawEx+0x466>
 800e982:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e984:	9204      	str	r2, [sp, #16]
 800e986:	2301      	movs	r3, #1
 800e988:	4a51      	ldr	r2, [pc, #324]	; (800ead0 <GUI_BMP_DrawEx+0x2b0>)
 800e98a:	9300      	str	r3, [sp, #0]
 800e98c:	9301      	str	r3, [sp, #4]
 800e98e:	9303      	str	r3, [sp, #12]
 800e990:	9402      	str	r4, [sp, #8]
 800e992:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e994:	6812      	ldr	r2, [r2, #0]
 800e996:	9205      	str	r2, [sp, #20]
 800e998:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e99a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e99c:	4441      	add	r1, r8
 800e99e:	f7fd fd65 	bl	800c46c <LCD_DrawBitmap>
 800e9a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e9a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e9a6:	4413      	add	r3, r2
 800e9a8:	931c      	str	r3, [sp, #112]	; 0x70
 800e9aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e9ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e9ae:	4413      	add	r3, r2
 800e9b0:	9316      	str	r3, [sp, #88]	; 0x58
 800e9b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e9b4:	3b01      	subs	r3, #1
 800e9b6:	9314      	str	r3, [sp, #80]	; 0x50
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d1d9      	bne.n	800e970 <GUI_BMP_DrawEx+0x150>
 800e9bc:	e165      	b.n	800ec8a <GUI_BMP_DrawEx+0x46a>
 800e9be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e9c2:	9200      	str	r2, [sp, #0]
 800e9c4:	435c      	muls	r4, r3
 800e9c6:	341f      	adds	r4, #31
 800e9c8:	1164      	asrs	r4, r4, #5
 800e9ca:	2203      	movs	r2, #3
 800e9cc:	00a4      	lsls	r4, r4, #2
 800e9ce:	9202      	str	r2, [sp, #8]
 800e9d0:	9401      	str	r4, [sp, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	9203      	str	r2, [sp, #12]
 800e9d6:	4a3f      	ldr	r2, [pc, #252]	; (800ead4 <GUI_BMP_DrawEx+0x2b4>)
 800e9d8:	9204      	str	r2, [sp, #16]
 800e9da:	a81b      	add	r0, sp, #108	; 0x6c
 800e9dc:	4639      	mov	r1, r7
 800e9de:	4642      	mov	r2, r8
 800e9e0:	f7ff fda2 	bl	800e528 <_DrawBitmap_RGB>
 800e9e4:	4681      	mov	r9, r0
 800e9e6:	e150      	b.n	800ec8a <GUI_BMP_DrawEx+0x46a>
 800e9e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e9ec:	9200      	str	r2, [sp, #0]
 800e9ee:	009a      	lsls	r2, r3, #2
 800e9f0:	9201      	str	r2, [sp, #4]
 800e9f2:	2204      	movs	r2, #4
 800e9f4:	9202      	str	r2, [sp, #8]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	9203      	str	r2, [sp, #12]
 800e9fa:	4a37      	ldr	r2, [pc, #220]	; (800ead8 <GUI_BMP_DrawEx+0x2b8>)
 800e9fc:	6812      	ldr	r2, [r2, #0]
 800e9fe:	e7eb      	b.n	800e9d8 <GUI_BMP_DrawEx+0x1b8>
 800ea00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea02:	9309      	str	r3, [sp, #36]	; 0x24
 800ea04:	4b30      	ldr	r3, [pc, #192]	; (800eac8 <GUI_BMP_DrawEx+0x2a8>)
 800ea06:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ea0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea0e:	a81b      	add	r0, sp, #108	; 0x6c
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea14:	f7ff fd02 	bl	800e41c <GUI_BMP__ReadPalette>
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	f040 8134 	bne.w	800ec86 <GUI_BMP_DrawEx+0x466>
 800ea1e:	4445      	add	r5, r8
 800ea20:	3d01      	subs	r5, #1
 800ea22:	463c      	mov	r4, r7
 800ea24:	a81b      	add	r0, sp, #108	; 0x6c
 800ea26:	2102      	movs	r1, #2
 800ea28:	aa1e      	add	r2, sp, #120	; 0x78
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	f7ff fce0 	bl	800e3f0 <GUI_BMP__ReadData>
 800ea30:	2800      	cmp	r0, #0
 800ea32:	f040 8128 	bne.w	800ec86 <GUI_BMP_DrawEx+0x466>
 800ea36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ea38:	1c5a      	adds	r2, r3, #1
 800ea3a:	921e      	str	r2, [sp, #120]	; 0x78
 800ea3c:	f893 b000 	ldrb.w	fp, [r3]
 800ea40:	785e      	ldrb	r6, [r3, #1]
 800ea42:	f1bb 0f00 	cmp.w	fp, #0
 800ea46:	f040 80c6 	bne.w	800ebd6 <GUI_BMP_DrawEx+0x3b6>
 800ea4a:	2e01      	cmp	r6, #1
 800ea4c:	d019      	beq.n	800ea82 <GUI_BMP_DrawEx+0x262>
 800ea4e:	d302      	bcc.n	800ea56 <GUI_BMP_DrawEx+0x236>
 800ea50:	2e02      	cmp	r6, #2
 800ea52:	d043      	beq.n	800eadc <GUI_BMP_DrawEx+0x2bc>
 800ea54:	e062      	b.n	800eb1c <GUI_BMP_DrawEx+0x2fc>
 800ea56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea58:	443a      	add	r2, r7
 800ea5a:	3a01      	subs	r2, #1
 800ea5c:	4294      	cmp	r4, r2
 800ea5e:	da0a      	bge.n	800ea76 <GUI_BMP_DrawEx+0x256>
 800ea60:	4b1b      	ldr	r3, [pc, #108]	; (800ead0 <GUI_BMP_DrawEx+0x2b0>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	6819      	ldr	r1, [r3, #0]
 800ea66:	4b18      	ldr	r3, [pc, #96]	; (800eac8 <GUI_BMP_DrawEx+0x2a8>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	6019      	str	r1, [r3, #0]
 800ea70:	4629      	mov	r1, r5
 800ea72:	f7fd fba7 	bl	800c1c4 <LCD_DrawHLine>
 800ea76:	3d01      	subs	r5, #1
 800ea78:	4545      	cmp	r5, r8
 800ea7a:	f2c0 8104 	blt.w	800ec86 <GUI_BMP_DrawEx+0x466>
 800ea7e:	46ba      	mov	sl, r7
 800ea80:	e0e5      	b.n	800ec4e <GUI_BMP_DrawEx+0x42e>
 800ea82:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ea86:	4e10      	ldr	r6, [pc, #64]	; (800eac8 <GUI_BMP_DrawEx+0x2a8>)
 800ea88:	44ba      	add	sl, r7
 800ea8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea8e:	4554      	cmp	r4, sl
 800ea90:	da0a      	bge.n	800eaa8 <GUI_BMP_DrawEx+0x288>
 800ea92:	4b0f      	ldr	r3, [pc, #60]	; (800ead0 <GUI_BMP_DrawEx+0x2b0>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	6833      	ldr	r3, [r6, #0]
 800ea9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	601a      	str	r2, [r3, #0]
 800eaa0:	4629      	mov	r1, r5
 800eaa2:	4652      	mov	r2, sl
 800eaa4:	f7fd fb8e 	bl	800c1c4 <LCD_DrawHLine>
 800eaa8:	4545      	cmp	r5, r8
 800eaaa:	f340 80fa 	ble.w	800eca2 <GUI_BMP_DrawEx+0x482>
 800eaae:	4b08      	ldr	r3, [pc, #32]	; (800ead0 <GUI_BMP_DrawEx+0x2b0>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	6833      	ldr	r3, [r6, #0]
 800eab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eab8:	4638      	mov	r0, r7
 800eaba:	601a      	str	r2, [r3, #0]
 800eabc:	4641      	mov	r1, r8
 800eabe:	4652      	mov	r2, sl
 800eac0:	1e6b      	subs	r3, r5, #1
 800eac2:	f7fd fbcb 	bl	800c25c <LCD_FillRect>
 800eac6:	e0ec      	b.n	800eca2 <GUI_BMP_DrawEx+0x482>
 800eac8:	20000084 	.word	0x20000084
 800eacc:	0800f269 	.word	0x0800f269
 800ead0:	20007838 	.word	0x20007838
 800ead4:	0800e0db 	.word	0x0800e0db
 800ead8:	20000094 	.word	0x20000094
 800eadc:	a81b      	add	r0, sp, #108	; 0x6c
 800eade:	4631      	mov	r1, r6
 800eae0:	aa1e      	add	r2, sp, #120	; 0x78
 800eae2:	465b      	mov	r3, fp
 800eae4:	f7ff fc84 	bl	800e3f0 <GUI_BMP__ReadData>
 800eae8:	2800      	cmp	r0, #0
 800eaea:	f040 80cc 	bne.w	800ec86 <GUI_BMP_DrawEx+0x466>
 800eaee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800eaf0:	1c5a      	adds	r2, r3, #1
 800eaf2:	921e      	str	r2, [sp, #120]	; 0x78
 800eaf4:	f893 a000 	ldrb.w	sl, [r3]
 800eaf8:	785e      	ldrb	r6, [r3, #1]
 800eafa:	4b6e      	ldr	r3, [pc, #440]	; (800ecb4 <GUI_BMP_DrawEx+0x494>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	4b6d      	ldr	r3, [pc, #436]	; (800ecb8 <GUI_BMP_DrawEx+0x498>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb06:	1bae      	subs	r6, r5, r6
 800eb08:	44a2      	add	sl, r4
 800eb0a:	601a      	str	r2, [r3, #0]
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	462b      	mov	r3, r5
 800eb10:	4631      	mov	r1, r6
 800eb12:	4652      	mov	r2, sl
 800eb14:	f7fd fba2 	bl	800c25c <LCD_FillRect>
 800eb18:	4635      	mov	r5, r6
 800eb1a:	e098      	b.n	800ec4e <GUI_BMP_DrawEx+0x42e>
 800eb1c:	9a07      	ldr	r2, [sp, #28]
 800eb1e:	2a02      	cmp	r2, #2
 800eb20:	d12a      	bne.n	800eb78 <GUI_BMP_DrawEx+0x358>
 800eb22:	1c73      	adds	r3, r6, #1
 800eb24:	ea4f 0a63 	mov.w	sl, r3, asr #1
 800eb28:	930a      	str	r3, [sp, #40]	; 0x28
 800eb2a:	a81b      	add	r0, sp, #108	; 0x6c
 800eb2c:	4651      	mov	r1, sl
 800eb2e:	aa1e      	add	r2, sp, #120	; 0x78
 800eb30:	465b      	mov	r3, fp
 800eb32:	f7ff fc5d 	bl	800e3f0 <GUI_BMP__ReadData>
 800eb36:	4684      	mov	ip, r0
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	f040 80a4 	bne.w	800ec86 <GUI_BMP_DrawEx+0x466>
 800eb3e:	2304      	movs	r3, #4
 800eb40:	9302      	str	r3, [sp, #8]
 800eb42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800eb44:	9304      	str	r3, [sp, #16]
 800eb46:	f04f 0b01 	mov.w	fp, #1
 800eb4a:	4b5a      	ldr	r3, [pc, #360]	; (800ecb4 <GUI_BMP_DrawEx+0x494>)
 800eb4c:	f8cd a00c 	str.w	sl, [sp, #12]
 800eb50:	f8cd b000 	str.w	fp, [sp]
 800eb54:	f8cd b004 	str.w	fp, [sp, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	9305      	str	r3, [sp, #20]
 800eb5c:	4632      	mov	r2, r6
 800eb5e:	4620      	mov	r0, r4
 800eb60:	4629      	mov	r1, r5
 800eb62:	465b      	mov	r3, fp
 800eb64:	f8cd c018 	str.w	ip, [sp, #24]
 800eb68:	f7fd fc80 	bl	800c46c <LCD_DrawBitmap>
 800eb6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb6e:	eb04 0a06 	add.w	sl, r4, r6
 800eb72:	f012 0f02 	tst.w	r2, #2
 800eb76:	e022      	b.n	800ebbe <GUI_BMP_DrawEx+0x39e>
 800eb78:	a81b      	add	r0, sp, #108	; 0x6c
 800eb7a:	4631      	mov	r1, r6
 800eb7c:	aa1e      	add	r2, sp, #120	; 0x78
 800eb7e:	465b      	mov	r3, fp
 800eb80:	f7ff fc36 	bl	800e3f0 <GUI_BMP__ReadData>
 800eb84:	4684      	mov	ip, r0
 800eb86:	2800      	cmp	r0, #0
 800eb88:	d17d      	bne.n	800ec86 <GUI_BMP_DrawEx+0x466>
 800eb8a:	2308      	movs	r3, #8
 800eb8c:	9302      	str	r3, [sp, #8]
 800eb8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800eb90:	9304      	str	r3, [sp, #16]
 800eb92:	f04f 0b01 	mov.w	fp, #1
 800eb96:	4b47      	ldr	r3, [pc, #284]	; (800ecb4 <GUI_BMP_DrawEx+0x494>)
 800eb98:	f8cd b000 	str.w	fp, [sp]
 800eb9c:	f8cd b004 	str.w	fp, [sp, #4]
 800eba0:	9603      	str	r6, [sp, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	9305      	str	r3, [sp, #20]
 800eba6:	4620      	mov	r0, r4
 800eba8:	4629      	mov	r1, r5
 800ebaa:	4632      	mov	r2, r6
 800ebac:	465b      	mov	r3, fp
 800ebae:	f8cd c018 	str.w	ip, [sp, #24]
 800ebb2:	eb04 0a06 	add.w	sl, r4, r6
 800ebb6:	f7fd fc59 	bl	800c46c <LCD_DrawBitmap>
 800ebba:	f016 0f01 	tst.w	r6, #1
 800ebbe:	f8dd c018 	ldr.w	ip, [sp, #24]
 800ebc2:	d044      	beq.n	800ec4e <GUI_BMP_DrawEx+0x42e>
 800ebc4:	a81b      	add	r0, sp, #108	; 0x6c
 800ebc6:	4659      	mov	r1, fp
 800ebc8:	aa1e      	add	r2, sp, #120	; 0x78
 800ebca:	4663      	mov	r3, ip
 800ebcc:	f7ff fc10 	bl	800e3f0 <GUI_BMP__ReadData>
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	d03c      	beq.n	800ec4e <GUI_BMP_DrawEx+0x42e>
 800ebd4:	e057      	b.n	800ec86 <GUI_BMP_DrawEx+0x466>
 800ebd6:	9b07      	ldr	r3, [sp, #28]
 800ebd8:	2b02      	cmp	r3, #2
 800ebda:	d128      	bne.n	800ec2e <GUI_BMP_DrawEx+0x40e>
 800ebdc:	f006 030f 	and.w	r3, r6, #15
 800ebe0:	0936      	lsrs	r6, r6, #4
 800ebe2:	42b3      	cmp	r3, r6
 800ebe4:	b21b      	sxth	r3, r3
 800ebe6:	d003      	beq.n	800ebf0 <GUI_BMP_DrawEx+0x3d0>
 800ebe8:	00b6      	lsls	r6, r6, #2
 800ebea:	009b      	lsls	r3, r3, #2
 800ebec:	4682      	mov	sl, r0
 800ebee:	e004      	b.n	800ebfa <GUI_BMP_DrawEx+0x3da>
 800ebf0:	4a30      	ldr	r2, [pc, #192]	; (800ecb4 <GUI_BMP_DrawEx+0x494>)
 800ebf2:	6812      	ldr	r2, [r2, #0]
 800ebf4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ebf8:	e01d      	b.n	800ec36 <GUI_BMP_DrawEx+0x416>
 800ebfa:	45da      	cmp	sl, fp
 800ebfc:	eb0a 0004 	add.w	r0, sl, r4
 800ec00:	da12      	bge.n	800ec28 <GUI_BMP_DrawEx+0x408>
 800ec02:	4a2d      	ldr	r2, [pc, #180]	; (800ecb8 <GUI_BMP_DrawEx+0x498>)
 800ec04:	492b      	ldr	r1, [pc, #172]	; (800ecb4 <GUI_BMP_DrawEx+0x494>)
 800ec06:	6812      	ldr	r2, [r2, #0]
 800ec08:	6809      	ldr	r1, [r1, #0]
 800ec0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ec0c:	f01a 0f01 	tst.w	sl, #1
 800ec10:	bf14      	ite	ne
 800ec12:	58c9      	ldrne	r1, [r1, r3]
 800ec14:	5989      	ldreq	r1, [r1, r6]
 800ec16:	6011      	str	r1, [r2, #0]
 800ec18:	4629      	mov	r1, r5
 800ec1a:	9306      	str	r3, [sp, #24]
 800ec1c:	f10a 0a01 	add.w	sl, sl, #1
 800ec20:	f7fd faa2 	bl	800c168 <LCD_DrawPixel>
 800ec24:	9b06      	ldr	r3, [sp, #24]
 800ec26:	e7e8      	b.n	800ebfa <GUI_BMP_DrawEx+0x3da>
 800ec28:	eb04 0a0b 	add.w	sl, r4, fp
 800ec2c:	e00f      	b.n	800ec4e <GUI_BMP_DrawEx+0x42e>
 800ec2e:	4b21      	ldr	r3, [pc, #132]	; (800ecb4 <GUI_BMP_DrawEx+0x494>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 800ec36:	4b20      	ldr	r3, [pc, #128]	; (800ecb8 <GUI_BMP_DrawEx+0x498>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec3c:	eb04 0a0b 	add.w	sl, r4, fp
 800ec40:	601a      	str	r2, [r3, #0]
 800ec42:	4620      	mov	r0, r4
 800ec44:	4629      	mov	r1, r5
 800ec46:	f10a 32ff 	add.w	r2, sl, #4294967295
 800ec4a:	f7fd fabb 	bl	800c1c4 <LCD_DrawHLine>
 800ec4e:	4654      	mov	r4, sl
 800ec50:	e6e8      	b.n	800ea24 <GUI_BMP_DrawEx+0x204>
 800ec52:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800ec56:	2b10      	cmp	r3, #16
 800ec58:	d00a      	beq.n	800ec70 <GUI_BMP_DrawEx+0x450>
 800ec5a:	2b20      	cmp	r3, #32
 800ec5c:	d113      	bne.n	800ec86 <GUI_BMP_DrawEx+0x466>
 800ec5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ec62:	9200      	str	r2, [sp, #0]
 800ec64:	009a      	lsls	r2, r3, #2
 800ec66:	9201      	str	r2, [sp, #4]
 800ec68:	2204      	movs	r2, #4
 800ec6a:	9202      	str	r2, [sp, #8]
 800ec6c:	4a13      	ldr	r2, [pc, #76]	; (800ecbc <GUI_BMP_DrawEx+0x49c>)
 800ec6e:	e6b1      	b.n	800e9d4 <GUI_BMP_DrawEx+0x1b4>
 800ec70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec72:	9300      	str	r3, [sp, #0]
 800ec74:	4b11      	ldr	r3, [pc, #68]	; (800ecbc <GUI_BMP_DrawEx+0x49c>)
 800ec76:	9301      	str	r3, [sp, #4]
 800ec78:	a81b      	add	r0, sp, #108	; 0x6c
 800ec7a:	4639      	mov	r1, r7
 800ec7c:	4642      	mov	r2, r8
 800ec7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec80:	f7ff fcde 	bl	800e640 <_DrawBitmap_16bpp>
 800ec84:	e6ae      	b.n	800e9e4 <GUI_BMP_DrawEx+0x1c4>
 800ec86:	f04f 0901 	mov.w	r9, #1
 800ec8a:	f7fa fccf 	bl	800962c <WM__GetNextIVR>
 800ec8e:	9a08      	ldr	r2, [sp, #32]
 800ec90:	3201      	adds	r2, #1
 800ec92:	9208      	str	r2, [sp, #32]
 800ec94:	2800      	cmp	r0, #0
 800ec96:	f47f adf6 	bne.w	800e886 <GUI_BMP_DrawEx+0x66>
 800ec9a:	4648      	mov	r0, r9
 800ec9c:	e006      	b.n	800ecac <GUI_BMP_DrawEx+0x48c>
 800ec9e:	2001      	movs	r0, #1
 800eca0:	e004      	b.n	800ecac <GUI_BMP_DrawEx+0x48c>
 800eca2:	6833      	ldr	r3, [r6, #0]
 800eca4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eca8:	601a      	str	r2, [r3, #0]
 800ecaa:	e7ee      	b.n	800ec8a <GUI_BMP_DrawEx+0x46a>
 800ecac:	b025      	add	sp, #148	; 0x94
 800ecae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb2:	bf00      	nop
 800ecb4:	20007838 	.word	0x20007838
 800ecb8:	20000084 	.word	0x20000084
 800ecbc:	0800e4cd 	.word	0x0800e4cd

0800ecc0 <_PushFreeBlock>:
 800ecc0:	4b07      	ldr	r3, [pc, #28]	; (800ece0 <_PushFreeBlock+0x20>)
 800ecc2:	685a      	ldr	r2, [r3, #4]
 800ecc4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ecc6:	3201      	adds	r2, #1
 800ecc8:	b510      	push	{r4, lr}
 800ecca:	605a      	str	r2, [r3, #4]
 800eccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecce:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 800ecd2:	6061      	str	r1, [r4, #4]
 800ecd4:	2100      	movs	r1, #0
 800ecd6:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 800ecda:	6258      	str	r0, [r3, #36]	; 0x24
 800ecdc:	bd10      	pop	{r4, pc}
 800ecde:	bf00      	nop
 800ece0:	20007748 	.word	0x20007748

0800ece4 <_RemoveFreeBlock>:
 800ece4:	b510      	push	{r4, lr}
 800ece6:	6842      	ldr	r2, [r0, #4]
 800ece8:	230f      	movs	r3, #15
 800ecea:	490d      	ldr	r1, [pc, #52]	; (800ed20 <_RemoveFreeBlock+0x3c>)
 800ecec:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 800ecf0:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800ecf2:	42a2      	cmp	r2, r4
 800ecf4:	d203      	bcs.n	800ecfe <_RemoveFreeBlock+0x1a>
 800ecf6:	f113 33ff 	adds.w	r3, r3, #4294967295
 800ecfa:	d2f6      	bcs.n	800ecea <_RemoveFreeBlock+0x6>
 800ecfc:	bd10      	pop	{r4, pc}
 800ecfe:	2b0f      	cmp	r3, #15
 800ed00:	d80c      	bhi.n	800ed1c <_RemoveFreeBlock+0x38>
 800ed02:	680c      	ldr	r4, [r1, #0]
 800ed04:	1aa2      	subs	r2, r4, r2
 800ed06:	600a      	str	r2, [r1, #0]
 800ed08:	6882      	ldr	r2, [r0, #8]
 800ed0a:	68c0      	ldr	r0, [r0, #12]
 800ed0c:	b102      	cbz	r2, 800ed10 <_RemoveFreeBlock+0x2c>
 800ed0e:	6050      	str	r0, [r2, #4]
 800ed10:	b108      	cbz	r0, 800ed16 <_RemoveFreeBlock+0x32>
 800ed12:	6002      	str	r2, [r0, #0]
 800ed14:	bd10      	pop	{r4, pc}
 800ed16:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ed1a:	645a      	str	r2, [r3, #68]	; 0x44
 800ed1c:	bd10      	pop	{r4, pc}
 800ed1e:	bf00      	nop
 800ed20:	20007748 	.word	0x20007748

0800ed24 <_AddFreeMemory>:
 800ed24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed26:	4e26      	ldr	r6, [pc, #152]	; (800edc0 <_AddFreeMemory+0x9c>)
 800ed28:	68f3      	ldr	r3, [r6, #12]
 800ed2a:	1e5a      	subs	r2, r3, #1
 800ed2c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800ed2e:	4605      	mov	r5, r0
 800ed30:	4413      	add	r3, r2
 800ed32:	1808      	adds	r0, r1, r0
 800ed34:	4298      	cmp	r0, r3
 800ed36:	460c      	mov	r4, r1
 800ed38:	d805      	bhi.n	800ed46 <_AddFreeMemory+0x22>
 800ed3a:	594b      	ldr	r3, [r1, r5]
 800ed3c:	b91b      	cbnz	r3, 800ed46 <_AddFreeMemory+0x22>
 800ed3e:	6843      	ldr	r3, [r0, #4]
 800ed40:	441d      	add	r5, r3
 800ed42:	f7ff ffcf 	bl	800ece4 <_RemoveFreeBlock>
 800ed46:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800ed48:	429c      	cmp	r4, r3
 800ed4a:	d90a      	bls.n	800ed62 <_AddFreeMemory+0x3e>
 800ed4c:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800ed50:	1be7      	subs	r7, r4, r7
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	b92b      	cbnz	r3, 800ed62 <_AddFreeMemory+0x3e>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	4638      	mov	r0, r7
 800ed5a:	441d      	add	r5, r3
 800ed5c:	f7ff ffc2 	bl	800ece4 <_RemoveFreeBlock>
 800ed60:	463c      	mov	r4, r7
 800ed62:	230f      	movs	r3, #15
 800ed64:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800ed68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ed6a:	4295      	cmp	r5, r2
 800ed6c:	d203      	bcs.n	800ed76 <_AddFreeMemory+0x52>
 800ed6e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800ed72:	d2f7      	bcs.n	800ed64 <_AddFreeMemory+0x40>
 800ed74:	e022      	b.n	800edbc <_AddFreeMemory+0x98>
 800ed76:	2b0f      	cmp	r3, #15
 800ed78:	d820      	bhi.n	800edbc <_AddFreeMemory+0x98>
 800ed7a:	3308      	adds	r3, #8
 800ed7c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800ed80:	1961      	adds	r1, r4, r5
 800ed82:	6852      	ldr	r2, [r2, #4]
 800ed84:	60a2      	str	r2, [r4, #8]
 800ed86:	2000      	movs	r0, #0
 800ed88:	e884 0021 	stmia.w	r4, {r0, r5}
 800ed8c:	6124      	str	r4, [r4, #16]
 800ed8e:	f841 5c04 	str.w	r5, [r1, #-4]
 800ed92:	f104 0108 	add.w	r1, r4, #8
 800ed96:	b102      	cbz	r2, 800ed9a <_AddFreeMemory+0x76>
 800ed98:	6051      	str	r1, [r2, #4]
 800ed9a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800ed9e:	60e0      	str	r0, [r4, #12]
 800eda0:	6059      	str	r1, [r3, #4]
 800eda2:	6833      	ldr	r3, [r6, #0]
 800eda4:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 800eda8:	4a05      	ldr	r2, [pc, #20]	; (800edc0 <_AddFreeMemory+0x9c>)
 800edaa:	442b      	add	r3, r5
 800edac:	6033      	str	r3, [r6, #0]
 800edae:	b929      	cbnz	r1, 800edbc <_AddFreeMemory+0x98>
 800edb0:	68d1      	ldr	r1, [r2, #12]
 800edb2:	1acb      	subs	r3, r1, r3
 800edb4:	6891      	ldr	r1, [r2, #8]
 800edb6:	4299      	cmp	r1, r3
 800edb8:	bf38      	it	cc
 800edba:	6093      	strcc	r3, [r2, #8]
 800edbc:	4628      	mov	r0, r5
 800edbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edc0:	20007748 	.word	0x20007748

0800edc4 <_RemoveHoles>:
 800edc4:	4b25      	ldr	r3, [pc, #148]	; (800ee5c <_RemoveHoles+0x98>)
 800edc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edca:	68da      	ldr	r2, [r3, #12]
 800edcc:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800edce:	3a01      	subs	r2, #1
 800edd0:	4682      	mov	sl, r0
 800edd2:	eb02 0904 	add.w	r9, r2, r4
 800edd6:	469b      	mov	fp, r3
 800edd8:	e894 0028 	ldmia.w	r4, {r3, r5}
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d133      	bne.n	800ee48 <_RemoveHoles+0x84>
 800ede0:	eb04 0805 	add.w	r8, r4, r5
 800ede4:	45c8      	cmp	r8, r9
 800ede6:	d22f      	bcs.n	800ee48 <_RemoveHoles+0x84>
 800ede8:	f854 c005 	ldr.w	ip, [r4, r5]
 800edec:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800edf0:	f1bc 0f00 	cmp.w	ip, #0
 800edf4:	d028      	beq.n	800ee48 <_RemoveHoles+0x84>
 800edf6:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800edfa:	4f18      	ldr	r7, [pc, #96]	; (800ee5c <_RemoveHoles+0x98>)
 800edfc:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d121      	bne.n	800ee48 <_RemoveHoles+0x84>
 800ee04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee06:	4620      	mov	r0, r4
 800ee08:	e88d 1008 	stmia.w	sp, {r3, ip}
 800ee0c:	f7ff ff6a 	bl	800ece4 <_RemoveFreeBlock>
 800ee10:	f8d8 1000 	ldr.w	r1, [r8]
 800ee14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee16:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	6054      	str	r4, [r2, #4]
 800ee1e:	4641      	mov	r1, r8
 800ee20:	4632      	mov	r2, r6
 800ee22:	f003 f9d0 	bl	80121c6 <memmove>
 800ee26:	e89d 1008 	ldmia.w	sp, {r3, ip}
 800ee2a:	459c      	cmp	ip, r3
 800ee2c:	d102      	bne.n	800ee34 <_RemoveHoles+0x70>
 800ee2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee30:	1b5b      	subs	r3, r3, r5
 800ee32:	637b      	str	r3, [r7, #52]	; 0x34
 800ee34:	4628      	mov	r0, r5
 800ee36:	19a1      	adds	r1, r4, r6
 800ee38:	f7ff ff74 	bl	800ed24 <_AddFreeMemory>
 800ee3c:	f1ba 0f00 	cmp.w	sl, #0
 800ee40:	d001      	beq.n	800ee46 <_RemoveHoles+0x82>
 800ee42:	4582      	cmp	sl, r0
 800ee44:	d905      	bls.n	800ee52 <_RemoveHoles+0x8e>
 800ee46:	4635      	mov	r5, r6
 800ee48:	442c      	add	r4, r5
 800ee4a:	454c      	cmp	r4, r9
 800ee4c:	d3c4      	bcc.n	800edd8 <_RemoveHoles+0x14>
 800ee4e:	2001      	movs	r0, #1
 800ee50:	e000      	b.n	800ee54 <_RemoveHoles+0x90>
 800ee52:	2000      	movs	r0, #0
 800ee54:	b003      	add	sp, #12
 800ee56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee5a:	bf00      	nop
 800ee5c:	20007748 	.word	0x20007748

0800ee60 <GUI_ALLOC_FreeFixedBlock>:
 800ee60:	b128      	cbz	r0, 800ee6e <GUI_ALLOC_FreeFixedBlock+0xe>
 800ee62:	4a03      	ldr	r2, [pc, #12]	; (800ee70 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800ee64:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800ee66:	6003      	str	r3, [r0, #0]
 800ee68:	b103      	cbz	r3, 800ee6c <GUI_ALLOC_FreeFixedBlock+0xc>
 800ee6a:	6058      	str	r0, [r3, #4]
 800ee6c:	63d0      	str	r0, [r2, #60]	; 0x3c
 800ee6e:	4770      	bx	lr
 800ee70:	20007748 	.word	0x20007748

0800ee74 <GUI_ALLOC_h2p>:
 800ee74:	4b03      	ldr	r3, [pc, #12]	; (800ee84 <GUI_ALLOC_h2p+0x10>)
 800ee76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee78:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800ee7c:	6840      	ldr	r0, [r0, #4]
 800ee7e:	3008      	adds	r0, #8
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop
 800ee84:	20007748 	.word	0x20007748

0800ee88 <GUI_ALLOC_LockH>:
 800ee88:	4b05      	ldr	r3, [pc, #20]	; (800eea0 <GUI_ALLOC_LockH+0x18>)
 800ee8a:	69d9      	ldr	r1, [r3, #28]
 800ee8c:	3101      	adds	r1, #1
 800ee8e:	61d9      	str	r1, [r3, #28]
 800ee90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee92:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 800ee96:	3101      	adds	r1, #1
 800ee98:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 800ee9c:	f7ff bfea 	b.w	800ee74 <GUI_ALLOC_h2p>
 800eea0:	20007748 	.word	0x20007748

0800eea4 <GUI_ALLOC_UnlockH>:
 800eea4:	b530      	push	{r4, r5, lr}
 800eea6:	6802      	ldr	r2, [r0, #0]
 800eea8:	4b09      	ldr	r3, [pc, #36]	; (800eed0 <GUI_ALLOC_UnlockH+0x2c>)
 800eeaa:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800eeae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eeb0:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 800eeb4:	2c01      	cmp	r4, #1
 800eeb6:	d903      	bls.n	800eec0 <GUI_ALLOC_UnlockH+0x1c>
 800eeb8:	69dd      	ldr	r5, [r3, #28]
 800eeba:	b10d      	cbz	r5, 800eec0 <GUI_ALLOC_UnlockH+0x1c>
 800eebc:	3d01      	subs	r5, #1
 800eebe:	61dd      	str	r5, [r3, #28]
 800eec0:	3c01      	subs	r4, #1
 800eec2:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 800eec6:	2300      	movs	r3, #0
 800eec8:	6003      	str	r3, [r0, #0]
 800eeca:	4618      	mov	r0, r3
 800eecc:	bd30      	pop	{r4, r5, pc}
 800eece:	bf00      	nop
 800eed0:	20007748 	.word	0x20007748

0800eed4 <GUI_ALLOC_AssignMemory>:
 800eed4:	4b02      	ldr	r3, [pc, #8]	; (800eee0 <GUI_ALLOC_AssignMemory+0xc>)
 800eed6:	f021 0103 	bic.w	r1, r1, #3
 800eeda:	6018      	str	r0, [r3, #0]
 800eedc:	6059      	str	r1, [r3, #4]
 800eede:	4770      	bx	lr
 800eee0:	20002b94 	.word	0x20002b94

0800eee4 <GUI_ALLOC_GetSize>:
 800eee4:	b130      	cbz	r0, 800eef4 <GUI_ALLOC_GetSize+0x10>
 800eee6:	4b04      	ldr	r3, [pc, #16]	; (800eef8 <GUI_ALLOC_GetSize+0x14>)
 800eee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeea:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800eeee:	6843      	ldr	r3, [r0, #4]
 800eef0:	6858      	ldr	r0, [r3, #4]
 800eef2:	380c      	subs	r0, #12
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop
 800eef8:	20007748 	.word	0x20007748

0800eefc <GUI_ALLOC_Free>:
 800eefc:	b510      	push	{r4, lr}
 800eefe:	4604      	mov	r4, r0
 800ef00:	b160      	cbz	r0, 800ef1c <GUI_ALLOC_Free+0x20>
 800ef02:	4b07      	ldr	r3, [pc, #28]	; (800ef20 <GUI_ALLOC_Free+0x24>)
 800ef04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef06:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800ef0a:	6859      	ldr	r1, [r3, #4]
 800ef0c:	6848      	ldr	r0, [r1, #4]
 800ef0e:	f7ff ff09 	bl	800ed24 <_AddFreeMemory>
 800ef12:	4620      	mov	r0, r4
 800ef14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef18:	f7ff bed2 	b.w	800ecc0 <_PushFreeBlock>
 800ef1c:	bd10      	pop	{r4, pc}
 800ef1e:	bf00      	nop
 800ef20:	20007748 	.word	0x20007748

0800ef24 <_EnlargeBlocks>:
 800ef24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef28:	4c23      	ldr	r4, [pc, #140]	; (800efb8 <_EnlargeBlocks+0x94>)
 800ef2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ef2c:	b93b      	cbnz	r3, 800ef3e <_EnlargeBlocks+0x1a>
 800ef2e:	4b23      	ldr	r3, [pc, #140]	; (800efbc <_EnlargeBlocks+0x98>)
 800ef30:	689d      	ldr	r5, [r3, #8]
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	3508      	adds	r5, #8
 800ef36:	fbb3 f5f5 	udiv	r5, r3, r5
 800ef3a:	3502      	adds	r5, #2
 800ef3c:	e003      	b.n	800ef46 <_EnlargeBlocks+0x22>
 800ef3e:	6923      	ldr	r3, [r4, #16]
 800ef40:	1d1d      	adds	r5, r3, #4
 800ef42:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800ef46:	00e8      	lsls	r0, r5, #3
 800ef48:	f000 f8f4 	bl	800f134 <_Alloc>
 800ef4c:	4680      	mov	r8, r0
 800ef4e:	b368      	cbz	r0, 800efac <_EnlargeBlocks+0x88>
 800ef50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef52:	6922      	ldr	r2, [r4, #16]
 800ef54:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ef56:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800ef5a:	00d2      	lsls	r2, r2, #3
 800ef5c:	685e      	ldr	r6, [r3, #4]
 800ef5e:	4b18      	ldr	r3, [pc, #96]	; (800efc0 <_EnlargeBlocks+0x9c>)
 800ef60:	3608      	adds	r6, #8
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4630      	mov	r0, r6
 800ef66:	4798      	blx	r3
 800ef68:	6922      	ldr	r2, [r4, #16]
 800ef6a:	6366      	str	r6, [r4, #52]	; 0x34
 800ef6c:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 800ef70:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800ef74:	3104      	adds	r1, #4
 800ef76:	4613      	mov	r3, r2
 800ef78:	1e68      	subs	r0, r5, #1
 800ef7a:	4283      	cmp	r3, r0
 800ef7c:	f101 0108 	add.w	r1, r1, #8
 800ef80:	d203      	bcs.n	800ef8a <_EnlargeBlocks+0x66>
 800ef82:	3301      	adds	r3, #1
 800ef84:	f841 3c08 	str.w	r3, [r1, #-8]
 800ef88:	e7f6      	b.n	800ef78 <_EnlargeBlocks+0x54>
 800ef8a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800ef8e:	2600      	movs	r6, #0
 800ef90:	605e      	str	r6, [r3, #4]
 800ef92:	6863      	ldr	r3, [r4, #4]
 800ef94:	6262      	str	r2, [r4, #36]	; 0x24
 800ef96:	1a9b      	subs	r3, r3, r2
 800ef98:	442b      	add	r3, r5
 800ef9a:	6063      	str	r3, [r4, #4]
 800ef9c:	6125      	str	r5, [r4, #16]
 800ef9e:	4638      	mov	r0, r7
 800efa0:	b13f      	cbz	r7, 800efb2 <_EnlargeBlocks+0x8e>
 800efa2:	f7ff ffab 	bl	800eefc <GUI_ALLOC_Free>
 800efa6:	4630      	mov	r0, r6
 800efa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efac:	2001      	movs	r0, #1
 800efae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb6:	bf00      	nop
 800efb8:	20007748 	.word	0x20007748
 800efbc:	20002b94 	.word	0x20002b94
 800efc0:	20000074 	.word	0x20000074

0800efc4 <_InitOnce>:
 800efc4:	b538      	push	{r3, r4, r5, lr}
 800efc6:	4916      	ldr	r1, [pc, #88]	; (800f020 <_InitOnce+0x5c>)
 800efc8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800efcc:	bb3b      	cbnz	r3, 800f01e <_InitOnce+0x5a>
 800efce:	4a15      	ldr	r2, [pc, #84]	; (800f024 <_InitOnce+0x60>)
 800efd0:	2301      	movs	r3, #1
 800efd2:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
 800efd6:	6893      	ldr	r3, [r2, #8]
 800efd8:	b913      	cbnz	r3, 800efe0 <_InitOnce+0x1c>
 800efda:	6853      	ldr	r3, [r2, #4]
 800efdc:	089b      	lsrs	r3, r3, #2
 800efde:	6093      	str	r3, [r2, #8]
 800efe0:	235a      	movs	r3, #90	; 0x5a
 800efe2:	620b      	str	r3, [r1, #32]
 800efe4:	2300      	movs	r3, #0
 800efe6:	2510      	movs	r5, #16
 800efe8:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
 800efec:	409d      	lsls	r5, r3
 800efee:	3301      	adds	r3, #1
 800eff0:	2b10      	cmp	r3, #16
 800eff2:	4c0b      	ldr	r4, [pc, #44]	; (800f020 <_InitOnce+0x5c>)
 800eff4:	6405      	str	r5, [r0, #64]	; 0x40
 800eff6:	d1f6      	bne.n	800efe6 <_InitOnce+0x22>
 800eff8:	6850      	ldr	r0, [r2, #4]
 800effa:	6811      	ldr	r1, [r2, #0]
 800effc:	63a1      	str	r1, [r4, #56]	; 0x38
 800effe:	2302      	movs	r3, #2
 800f000:	6123      	str	r3, [r4, #16]
 800f002:	f1a0 0314 	sub.w	r3, r0, #20
 800f006:	440b      	add	r3, r1
 800f008:	2501      	movs	r5, #1
 800f00a:	6363      	str	r3, [r4, #52]	; 0x34
 800f00c:	60e0      	str	r0, [r4, #12]
 800f00e:	605d      	str	r5, [r3, #4]
 800f010:	6265      	str	r5, [r4, #36]	; 0x24
 800f012:	6065      	str	r5, [r4, #4]
 800f014:	f7ff fe86 	bl	800ed24 <_AddFreeMemory>
 800f018:	f7ff ff84 	bl	800ef24 <_EnlargeBlocks>
 800f01c:	6325      	str	r5, [r4, #48]	; 0x30
 800f01e:	bd38      	pop	{r3, r4, r5, pc}
 800f020:	20007748 	.word	0x20007748
 800f024:	20002b94 	.word	0x20002b94

0800f028 <GUI_ALLOC_GetFixedBlock>:
 800f028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f02c:	4605      	mov	r5, r0
 800f02e:	4e26      	ldr	r6, [pc, #152]	; (800f0c8 <GUI_ALLOC_GetFixedBlock+0xa0>)
 800f030:	3503      	adds	r5, #3
 800f032:	f7ff ffc7 	bl	800efc4 <_InitOnce>
 800f036:	f025 0503 	bic.w	r5, r5, #3
 800f03a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800f03c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800f03e:	3504      	adds	r5, #4
 800f040:	429d      	cmp	r5, r3
 800f042:	bf38      	it	cc
 800f044:	461d      	movcc	r5, r3
 800f046:	4614      	mov	r4, r2
 800f048:	b12c      	cbz	r4, 800f056 <GUI_ALLOC_GetFixedBlock+0x2e>
 800f04a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f04e:	42ab      	cmp	r3, r5
 800f050:	d02c      	beq.n	800f0ac <GUI_ALLOC_GetFixedBlock+0x84>
 800f052:	6824      	ldr	r4, [r4, #0]
 800f054:	e7f8      	b.n	800f048 <GUI_ALLOC_GetFixedBlock+0x20>
 800f056:	68f3      	ldr	r3, [r6, #12]
 800f058:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800f05a:	eb02 0803 	add.w	r8, r2, r3
 800f05e:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800f062:	ebc7 0708 	rsb	r7, r7, r8
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	b133      	cbz	r3, 800f078 <GUI_ALLOC_GetFixedBlock+0x50>
 800f06a:	4620      	mov	r0, r4
 800f06c:	f7ff feaa 	bl	800edc4 <_RemoveHoles>
 800f070:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800f074:	ebc7 0708 	rsb	r7, r7, r8
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	bb13      	cbnz	r3, 800f0c2 <GUI_ALLOC_GetFixedBlock+0x9a>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	42ab      	cmp	r3, r5
 800f080:	db1f      	blt.n	800f0c2 <GUI_ALLOC_GetFixedBlock+0x9a>
 800f082:	4638      	mov	r0, r7
 800f084:	1d1c      	adds	r4, r3, #4
 800f086:	f7ff fe2d 	bl	800ece4 <_RemoveFreeBlock>
 800f08a:	68f3      	ldr	r3, [r6, #12]
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	1b5b      	subs	r3, r3, r5
 800f090:	60f3      	str	r3, [r6, #12]
 800f092:	6973      	ldr	r3, [r6, #20]
 800f094:	1b64      	subs	r4, r4, r5
 800f096:	442b      	add	r3, r5
 800f098:	1b40      	subs	r0, r0, r5
 800f09a:	443c      	add	r4, r7
 800f09c:	6173      	str	r3, [r6, #20]
 800f09e:	d002      	beq.n	800f0a6 <GUI_ALLOC_GetFixedBlock+0x7e>
 800f0a0:	4639      	mov	r1, r7
 800f0a2:	f7ff fe3f 	bl	800ed24 <_AddFreeMemory>
 800f0a6:	f844 5c04 	str.w	r5, [r4, #-4]
 800f0aa:	e00a      	b.n	800f0c2 <GUI_ALLOC_GetFixedBlock+0x9a>
 800f0ac:	6823      	ldr	r3, [r4, #0]
 800f0ae:	b10b      	cbz	r3, 800f0b4 <GUI_ALLOC_GetFixedBlock+0x8c>
 800f0b0:	6861      	ldr	r1, [r4, #4]
 800f0b2:	6059      	str	r1, [r3, #4]
 800f0b4:	6861      	ldr	r1, [r4, #4]
 800f0b6:	b101      	cbz	r1, 800f0ba <GUI_ALLOC_GetFixedBlock+0x92>
 800f0b8:	600b      	str	r3, [r1, #0]
 800f0ba:	42a2      	cmp	r2, r4
 800f0bc:	d101      	bne.n	800f0c2 <GUI_ALLOC_GetFixedBlock+0x9a>
 800f0be:	6823      	ldr	r3, [r4, #0]
 800f0c0:	63f3      	str	r3, [r6, #60]	; 0x3c
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0c8:	20007748 	.word	0x20007748

0800f0cc <GUI_ALLOC_GetMaxSize>:
 800f0cc:	b508      	push	{r3, lr}
 800f0ce:	f7ff ff79 	bl	800efc4 <_InitOnce>
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	4b0b      	ldr	r3, [pc, #44]	; (800f104 <GUI_ALLOC_GetMaxSize+0x38>)
 800f0d6:	4413      	add	r3, r2
 800f0d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f0dc:	b113      	cbz	r3, 800f0e4 <GUI_ALLOC_GetMaxSize+0x18>
 800f0de:	689b      	ldr	r3, [r3, #8]
 800f0e0:	2000      	movs	r0, #0
 800f0e2:	e00b      	b.n	800f0fc <GUI_ALLOC_GetMaxSize+0x30>
 800f0e4:	3a08      	subs	r2, #8
 800f0e6:	f112 0f80 	cmn.w	r2, #128	; 0x80
 800f0ea:	d1f3      	bne.n	800f0d4 <GUI_ALLOC_GetMaxSize+0x8>
 800f0ec:	e7f8      	b.n	800f0e0 <GUI_ALLOC_GetMaxSize+0x14>
 800f0ee:	685a      	ldr	r2, [r3, #4]
 800f0f0:	689b      	ldr	r3, [r3, #8]
 800f0f2:	4290      	cmp	r0, r2
 800f0f4:	bf38      	it	cc
 800f0f6:	4610      	movcc	r0, r2
 800f0f8:	b113      	cbz	r3, 800f100 <GUI_ALLOC_GetMaxSize+0x34>
 800f0fa:	689b      	ldr	r3, [r3, #8]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d1f6      	bne.n	800f0ee <GUI_ALLOC_GetMaxSize+0x22>
 800f100:	380c      	subs	r0, #12
 800f102:	bd08      	pop	{r3, pc}
 800f104:	20007748 	.word	0x20007748

0800f108 <GUI_ALLOC_RequestSize>:
 800f108:	b508      	push	{r3, lr}
 800f10a:	f7ff ffdf 	bl	800f0cc <GUI_ALLOC_GetMaxSize>
 800f10e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800f112:	f04f 0364 	mov.w	r3, #100	; 0x64
 800f116:	4a06      	ldr	r2, [pc, #24]	; (800f130 <GUI_ALLOC_RequestSize+0x28>)
 800f118:	d904      	bls.n	800f124 <GUI_ALLOC_RequestSize+0x1c>
 800f11a:	fb90 f0f3 	sdiv	r0, r0, r3
 800f11e:	6a13      	ldr	r3, [r2, #32]
 800f120:	4358      	muls	r0, r3
 800f122:	bd08      	pop	{r3, pc}
 800f124:	6a12      	ldr	r2, [r2, #32]
 800f126:	4350      	muls	r0, r2
 800f128:	fbb0 f0f3 	udiv	r0, r0, r3
 800f12c:	bd08      	pop	{r3, pc}
 800f12e:	bf00      	nop
 800f130:	20007748 	.word	0x20007748

0800f134 <_Alloc>:
 800f134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f138:	4d38      	ldr	r5, [pc, #224]	; (800f21c <_Alloc+0xe8>)
 800f13a:	4604      	mov	r4, r0
 800f13c:	f7ff ff42 	bl	800efc4 <_InitOnce>
 800f140:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800f142:	682b      	ldr	r3, [r5, #0]
 800f144:	42bc      	cmp	r4, r7
 800f146:	bf24      	itt	cs
 800f148:	1ce7      	addcs	r7, r4, #3
 800f14a:	f027 0703 	biccs.w	r7, r7, #3
 800f14e:	370c      	adds	r7, #12
 800f150:	429f      	cmp	r7, r3
 800f152:	4c32      	ldr	r4, [pc, #200]	; (800f21c <_Alloc+0xe8>)
 800f154:	d83e      	bhi.n	800f1d4 <_Alloc+0xa0>
 800f156:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f158:	6862      	ldr	r2, [r4, #4]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d90f      	bls.n	800f17e <_Alloc+0x4a>
 800f15e:	686b      	ldr	r3, [r5, #4]
 800f160:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800f162:	3b01      	subs	r3, #1
 800f164:	606b      	str	r3, [r5, #4]
 800f166:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800f168:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800f16c:	eb03 0209 	add.w	r2, r3, r9
 800f170:	6852      	ldr	r2, [r2, #4]
 800f172:	626a      	str	r2, [r5, #36]	; 0x24
 800f174:	2201      	movs	r2, #1
 800f176:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 800f17a:	b956      	cbnz	r6, 800f192 <_Alloc+0x5e>
 800f17c:	e02a      	b.n	800f1d4 <_Alloc+0xa0>
 800f17e:	3b01      	subs	r3, #1
 800f180:	6323      	str	r3, [r4, #48]	; 0x30
 800f182:	f7ff fecf 	bl	800ef24 <_EnlargeBlocks>
 800f186:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f188:	3301      	adds	r3, #1
 800f18a:	6323      	str	r3, [r4, #48]	; 0x30
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d0e6      	beq.n	800f15e <_Alloc+0x2a>
 800f190:	e020      	b.n	800f1d4 <_Alloc+0xa0>
 800f192:	230f      	movs	r3, #15
 800f194:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800f198:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f19a:	4297      	cmp	r7, r2
 800f19c:	d20c      	bcs.n	800f1b8 <_Alloc+0x84>
 800f19e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800f1a2:	d2f7      	bcs.n	800f194 <_Alloc+0x60>
 800f1a4:	e008      	b.n	800f1b8 <_Alloc+0x84>
 800f1a6:	6894      	ldr	r4, [r2, #8]
 800f1a8:	b12c      	cbz	r4, 800f1b6 <_Alloc+0x82>
 800f1aa:	6862      	ldr	r2, [r4, #4]
 800f1ac:	4297      	cmp	r7, r2
 800f1ae:	d914      	bls.n	800f1da <_Alloc+0xa6>
 800f1b0:	68a2      	ldr	r2, [r4, #8]
 800f1b2:	2a00      	cmp	r2, #0
 800f1b4:	d1f7      	bne.n	800f1a6 <_Alloc+0x72>
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	2b0f      	cmp	r3, #15
 800f1ba:	d803      	bhi.n	800f1c4 <_Alloc+0x90>
 800f1bc:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800f1c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f1c2:	e7f6      	b.n	800f1b2 <_Alloc+0x7e>
 800f1c4:	4638      	mov	r0, r7
 800f1c6:	f7ff fdfd 	bl	800edc4 <_RemoveHoles>
 800f1ca:	2800      	cmp	r0, #0
 800f1cc:	d0e1      	beq.n	800f192 <_Alloc+0x5e>
 800f1ce:	4630      	mov	r0, r6
 800f1d0:	f7ff fd76 	bl	800ecc0 <_PushFreeBlock>
 800f1d4:	2000      	movs	r0, #0
 800f1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1da:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f1de:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800f1e0:	ebc7 0208 	rsb	r2, r7, r8
 800f1e4:	330c      	adds	r3, #12
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	bf38      	it	cc
 800f1ec:	4647      	movcc	r7, r8
 800f1ee:	f7ff fd79 	bl	800ece4 <_RemoveFreeBlock>
 800f1f2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800f1f4:	444b      	add	r3, r9
 800f1f6:	19e1      	adds	r1, r4, r7
 800f1f8:	605c      	str	r4, [r3, #4]
 800f1fa:	45b8      	cmp	r8, r7
 800f1fc:	f04f 0300 	mov.w	r3, #0
 800f200:	e884 00c0 	stmia.w	r4, {r6, r7}
 800f204:	60a3      	str	r3, [r4, #8]
 800f206:	6124      	str	r4, [r4, #16]
 800f208:	f841 7c04 	str.w	r7, [r1, #-4]
 800f20c:	dd03      	ble.n	800f216 <_Alloc+0xe2>
 800f20e:	ebc7 0008 	rsb	r0, r7, r8
 800f212:	f7ff fd87 	bl	800ed24 <_AddFreeMemory>
 800f216:	4630      	mov	r0, r6
 800f218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f21c:	20007748 	.word	0x20007748

0800f220 <GUI_ALLOC_AllocNoInit>:
 800f220:	b108      	cbz	r0, 800f226 <GUI_ALLOC_AllocNoInit+0x6>
 800f222:	f7ff bf87 	b.w	800f134 <_Alloc>
 800f226:	4770      	bx	lr

0800f228 <GUI_ALLOC_FreePtr>:
 800f228:	b510      	push	{r4, lr}
 800f22a:	4604      	mov	r4, r0
 800f22c:	6800      	ldr	r0, [r0, #0]
 800f22e:	f7ff fe65 	bl	800eefc <GUI_ALLOC_Free>
 800f232:	2300      	movs	r3, #0
 800f234:	6023      	str	r3, [r4, #0]
 800f236:	bd10      	pop	{r4, pc}

0800f238 <GUI_ALLOC_AllocZero>:
 800f238:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f23a:	4605      	mov	r5, r0
 800f23c:	f7ff fff0 	bl	800f220 <GUI_ALLOC_AllocNoInit>
 800f240:	4606      	mov	r6, r0
 800f242:	b160      	cbz	r0, 800f25e <GUI_ALLOC_AllocZero+0x26>
 800f244:	f7ff fe20 	bl	800ee88 <GUI_ALLOC_LockH>
 800f248:	ac02      	add	r4, sp, #8
 800f24a:	4b06      	ldr	r3, [pc, #24]	; (800f264 <GUI_ALLOC_AllocZero+0x2c>)
 800f24c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	2100      	movs	r1, #0
 800f254:	462a      	mov	r2, r5
 800f256:	4798      	blx	r3
 800f258:	4620      	mov	r0, r4
 800f25a:	f7ff fe23 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800f25e:	4630      	mov	r0, r6
 800f260:	b002      	add	sp, #8
 800f262:	bd70      	pop	{r4, r5, r6, pc}
 800f264:	20000070 	.word	0x20000070

0800f268 <LCD_Index2Color_M555>:
 800f268:	4b07      	ldr	r3, [pc, #28]	; (800f288 <LCD_Index2Color_M555+0x20>)
 800f26a:	f000 021f 	and.w	r2, r0, #31
 800f26e:	5c99      	ldrb	r1, [r3, r2]
 800f270:	f3c0 2284 	ubfx	r2, r0, #10, #5
 800f274:	f3c0 1044 	ubfx	r0, r0, #5, #5
 800f278:	5c9a      	ldrb	r2, [r3, r2]
 800f27a:	5c18      	ldrb	r0, [r3, r0]
 800f27c:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 800f280:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop
 800f288:	08014c6a 	.word	0x08014c6a

0800f28c <LCD_Index2Color_888>:
 800f28c:	4770      	bx	lr

0800f28e <LCD_Index2Color_8888>:
 800f28e:	4770      	bx	lr

0800f290 <_Color2Index_8888>:
 800f290:	4770      	bx	lr

0800f292 <_GetIndexMask_8888>:
 800f292:	f04f 30ff 	mov.w	r0, #4294967295
 800f296:	4770      	bx	lr

0800f298 <_Color2IndexBulk>:
 800f298:	b510      	push	{r4, lr}
 800f29a:	f850 4b04 	ldr.w	r4, [r0], #4
 800f29e:	600c      	str	r4, [r1, #0]
 800f2a0:	3a01      	subs	r2, #1
 800f2a2:	4419      	add	r1, r3
 800f2a4:	d1f9      	bne.n	800f29a <_Color2IndexBulk+0x2>
 800f2a6:	bd10      	pop	{r4, pc}

0800f2a8 <_Index2ColorBulk>:
 800f2a8:	b510      	push	{r4, lr}
 800f2aa:	6804      	ldr	r4, [r0, #0]
 800f2ac:	f841 4b04 	str.w	r4, [r1], #4
 800f2b0:	3a01      	subs	r2, #1
 800f2b2:	4418      	add	r0, r3
 800f2b4:	d1f9      	bne.n	800f2aa <_Index2ColorBulk+0x2>
 800f2b6:	bd10      	pop	{r4, pc}

0800f2b8 <LCD_Index2Color_565>:
 800f2b8:	f3c0 1345 	ubfx	r3, r0, #5, #6
 800f2bc:	4a06      	ldr	r2, [pc, #24]	; (800f2d8 <LCD_Index2Color_565+0x20>)
 800f2be:	5cd1      	ldrb	r1, [r2, r3]
 800f2c0:	4b06      	ldr	r3, [pc, #24]	; (800f2dc <LCD_Index2Color_565+0x24>)
 800f2c2:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 800f2c6:	f000 001f 	and.w	r0, r0, #31
 800f2ca:	5c9a      	ldrb	r2, [r3, r2]
 800f2cc:	5c18      	ldrb	r0, [r3, r0]
 800f2ce:	0412      	lsls	r2, r2, #16
 800f2d0:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800f2d4:	4410      	add	r0, r2
 800f2d6:	4770      	bx	lr
 800f2d8:	08014c8a 	.word	0x08014c8a
 800f2dc:	08014c6a 	.word	0x08014c6a

0800f2e0 <_Color2Index_565>:
 800f2e0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f2e4:	4a06      	ldr	r2, [pc, #24]	; (800f300 <_Color2Index_565+0x20>)
 800f2e6:	5cd1      	ldrb	r1, [r2, r3]
 800f2e8:	4b06      	ldr	r3, [pc, #24]	; (800f304 <_Color2Index_565+0x24>)
 800f2ea:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800f2ee:	b2c0      	uxtb	r0, r0
 800f2f0:	5c9a      	ldrb	r2, [r3, r2]
 800f2f2:	5c18      	ldrb	r0, [r3, r0]
 800f2f4:	02d2      	lsls	r2, r2, #11
 800f2f6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800f2fa:	4410      	add	r0, r2
 800f2fc:	4770      	bx	lr
 800f2fe:	bf00      	nop
 800f300:	08014cca 	.word	0x08014cca
 800f304:	08014b6a 	.word	0x08014b6a

0800f308 <_GetIndexMask_565>:
 800f308:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f30c:	4770      	bx	lr
	...

0800f310 <_Color2IndexBulk>:
 800f310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f312:	f850 4b04 	ldr.w	r4, [r0], #4
 800f316:	4e0a      	ldr	r6, [pc, #40]	; (800f340 <_Color2IndexBulk+0x30>)
 800f318:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800f31c:	3a01      	subs	r2, #1
 800f31e:	5d77      	ldrb	r7, [r6, r5]
 800f320:	4d08      	ldr	r5, [pc, #32]	; (800f344 <_Color2IndexBulk+0x34>)
 800f322:	f3c4 4607 	ubfx	r6, r4, #16, #8
 800f326:	b2e4      	uxtb	r4, r4
 800f328:	5dae      	ldrb	r6, [r5, r6]
 800f32a:	5d2c      	ldrb	r4, [r5, r4]
 800f32c:	ea4f 26c6 	mov.w	r6, r6, lsl #11
 800f330:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 800f334:	4434      	add	r4, r6
 800f336:	800c      	strh	r4, [r1, #0]
 800f338:	4419      	add	r1, r3
 800f33a:	d1ea      	bne.n	800f312 <_Color2IndexBulk+0x2>
 800f33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f33e:	bf00      	nop
 800f340:	08014cca 	.word	0x08014cca
 800f344:	08014b6a 	.word	0x08014b6a

0800f348 <_Index2ColorBulk>:
 800f348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f34a:	1e54      	subs	r4, r2, #1
 800f34c:	fb03 0004 	mla	r0, r3, r4, r0
 800f350:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 800f354:	3c01      	subs	r4, #1
 800f356:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f35a:	8805      	ldrh	r5, [r0, #0]
 800f35c:	4c0a      	ldr	r4, [pc, #40]	; (800f388 <_Index2ColorBulk+0x40>)
 800f35e:	0aee      	lsrs	r6, r5, #11
 800f360:	f005 071f 	and.w	r7, r5, #31
 800f364:	5da6      	ldrb	r6, [r4, r6]
 800f366:	5de4      	ldrb	r4, [r4, r7]
 800f368:	f3c5 1545 	ubfx	r5, r5, #5, #6
 800f36c:	eb04 4406 	add.w	r4, r4, r6, lsl #16
 800f370:	4e06      	ldr	r6, [pc, #24]	; (800f38c <_Index2ColorBulk+0x44>)
 800f372:	5d75      	ldrb	r5, [r6, r5]
 800f374:	3a01      	subs	r2, #1
 800f376:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 800f37a:	f841 4904 	str.w	r4, [r1], #-4
 800f37e:	ebc3 0000 	rsb	r0, r3, r0
 800f382:	d1ea      	bne.n	800f35a <_Index2ColorBulk+0x12>
 800f384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f386:	bf00      	nop
 800f388:	08014c6a 	.word	0x08014c6a
 800f38c:	08014c8a 	.word	0x08014c8a

0800f390 <WIDGET__GetInsideRect>:
 800f390:	b538      	push	{r3, r4, r5, lr}
 800f392:	4604      	mov	r4, r0
 800f394:	460d      	mov	r5, r1
 800f396:	f7f9 fe55 	bl	8009044 <WM__GetClientRectWin>
 800f39a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f39c:	4628      	mov	r0, r5
 800f39e:	4629      	mov	r1, r5
 800f3a0:	681a      	ldr	r2, [r3, #0]
 800f3a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3a6:	f7fd bae2 	b.w	800c96e <GUI__ReduceRect>
	...

0800f3ac <WIDGET__Init>:
 800f3ac:	4b02      	ldr	r3, [pc, #8]	; (800f3b8 <WIDGET__Init+0xc>)
 800f3ae:	8642      	strh	r2, [r0, #50]	; 0x32
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	62c3      	str	r3, [r0, #44]	; 0x2c
 800f3b4:	8601      	strh	r1, [r0, #48]	; 0x30
 800f3b6:	4770      	bx	lr
 800f3b8:	200000a8 	.word	0x200000a8

0800f3bc <WIDGET_SetState>:
 800f3bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3be:	460c      	mov	r4, r1
 800f3c0:	4605      	mov	r5, r0
 800f3c2:	f7ff fd61 	bl	800ee88 <GUI_ALLOC_LockH>
 800f3c6:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800f3c8:	9001      	str	r0, [sp, #4]
 800f3ca:	4294      	cmp	r4, r2
 800f3cc:	d003      	beq.n	800f3d6 <WIDGET_SetState+0x1a>
 800f3ce:	8644      	strh	r4, [r0, #50]	; 0x32
 800f3d0:	4628      	mov	r0, r5
 800f3d2:	f7f9 ff81 	bl	80092d8 <WM_InvalidateWindow>
 800f3d6:	a801      	add	r0, sp, #4
 800f3d8:	f7ff fd64 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800f3dc:	b003      	add	sp, #12
 800f3de:	bd30      	pop	{r4, r5, pc}

0800f3e0 <WIDGET_OrState>:
 800f3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3e2:	460c      	mov	r4, r1
 800f3e4:	4605      	mov	r5, r0
 800f3e6:	b178      	cbz	r0, 800f408 <WIDGET_OrState+0x28>
 800f3e8:	f7ff fd4e 	bl	800ee88 <GUI_ALLOC_LockH>
 800f3ec:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800f3ee:	9001      	str	r0, [sp, #4]
 800f3f0:	ea04 0102 	and.w	r1, r4, r2
 800f3f4:	428c      	cmp	r4, r1
 800f3f6:	d004      	beq.n	800f402 <WIDGET_OrState+0x22>
 800f3f8:	4314      	orrs	r4, r2
 800f3fa:	8644      	strh	r4, [r0, #50]	; 0x32
 800f3fc:	4628      	mov	r0, r5
 800f3fe:	f7f9 ff6b 	bl	80092d8 <WM_InvalidateWindow>
 800f402:	a801      	add	r0, sp, #4
 800f404:	f7ff fd4e 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800f408:	b003      	add	sp, #12
 800f40a:	bd30      	pop	{r4, r5, pc}

0800f40c <WIDGET_HandleActive>:
 800f40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f40e:	460d      	mov	r5, r1
 800f410:	b085      	sub	sp, #20
 800f412:	4606      	mov	r6, r0
 800f414:	2800      	cmp	r0, #0
 800f416:	f000 8095 	beq.w	800f544 <WIDGET_HandleActive+0x138>
 800f41a:	f7ff fd35 	bl	800ee88 <GUI_ALLOC_LockH>
 800f41e:	682b      	ldr	r3, [r5, #0]
 800f420:	9002      	str	r0, [sp, #8]
 800f422:	2b16      	cmp	r3, #22
 800f424:	d054      	beq.n	800f4d0 <WIDGET_HandleActive+0xc4>
 800f426:	dc0c      	bgt.n	800f442 <WIDGET_HandleActive+0x36>
 800f428:	2b11      	cmp	r3, #17
 800f42a:	d033      	beq.n	800f494 <WIDGET_HandleActive+0x88>
 800f42c:	dc02      	bgt.n	800f434 <WIDGET_HandleActive+0x28>
 800f42e:	2b0d      	cmp	r3, #13
 800f430:	d040      	beq.n	800f4b4 <WIDGET_HandleActive+0xa8>
 800f432:	e080      	b.n	800f536 <WIDGET_HandleActive+0x12a>
 800f434:	2b14      	cmp	r3, #20
 800f436:	d079      	beq.n	800f52c <WIDGET_HandleActive+0x120>
 800f438:	2b15      	cmp	r3, #21
 800f43a:	d17c      	bne.n	800f536 <WIDGET_HandleActive+0x12a>
 800f43c:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 800f440:	e072      	b.n	800f528 <WIDGET_HandleActive+0x11c>
 800f442:	2b1f      	cmp	r3, #31
 800f444:	d06d      	beq.n	800f522 <WIDGET_HandleActive+0x116>
 800f446:	dc02      	bgt.n	800f44e <WIDGET_HandleActive+0x42>
 800f448:	2b1e      	cmp	r3, #30
 800f44a:	d044      	beq.n	800f4d6 <WIDGET_HandleActive+0xca>
 800f44c:	e073      	b.n	800f536 <WIDGET_HandleActive+0x12a>
 800f44e:	2b31      	cmp	r3, #49	; 0x31
 800f450:	d01e      	beq.n	800f490 <WIDGET_HandleActive+0x84>
 800f452:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f456:	d16e      	bne.n	800f536 <WIDGET_HandleActive+0x12a>
 800f458:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f45a:	6819      	ldr	r1, [r3, #0]
 800f45c:	68eb      	ldr	r3, [r5, #12]
 800f45e:	62c3      	str	r3, [r0, #44]	; 0x2c
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	a802      	add	r0, sp, #8
 800f464:	1acd      	subs	r5, r1, r3
 800f466:	f7ff fd1d 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800f46a:	4630      	mov	r0, r6
 800f46c:	f7ff fd0c 	bl	800ee88 <GUI_ALLOC_LockH>
 800f470:	ac04      	add	r4, sp, #16
 800f472:	4269      	negs	r1, r5
 800f474:	f844 0d04 	str.w	r0, [r4, #-4]!
 800f478:	460a      	mov	r2, r1
 800f47a:	462b      	mov	r3, r5
 800f47c:	9500      	str	r5, [sp, #0]
 800f47e:	f7f8 fced 	bl	8007e5c <WM__UpdateChildPositions>
 800f482:	4620      	mov	r0, r4
 800f484:	f7ff fd0e 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800f488:	4630      	mov	r0, r6
 800f48a:	f7f9 ff25 	bl	80092d8 <WM_InvalidateWindow>
 800f48e:	e050      	b.n	800f532 <WIDGET_HandleActive+0x126>
 800f490:	2400      	movs	r4, #0
 800f492:	e041      	b.n	800f518 <WIDGET_HandleActive+0x10c>
 800f494:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800f496:	06d9      	lsls	r1, r3, #27
 800f498:	d54d      	bpl.n	800f536 <WIDGET_HandleActive+0x12a>
 800f49a:	68eb      	ldr	r3, [r5, #12]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d04a      	beq.n	800f536 <WIDGET_HandleActive+0x12a>
 800f4a0:	7a1b      	ldrb	r3, [r3, #8]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d047      	beq.n	800f536 <WIDGET_HandleActive+0x12a>
 800f4a6:	a802      	add	r0, sp, #8
 800f4a8:	f7ff fcfc 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800f4ac:	4630      	mov	r0, r6
 800f4ae:	f7f9 f8f7 	bl	80086a0 <WM_SetFocus>
 800f4b2:	e040      	b.n	800f536 <WIDGET_HandleActive+0x12a>
 800f4b4:	68eb      	ldr	r3, [r5, #12]
 800f4b6:	68db      	ldr	r3, [r3, #12]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d03c      	beq.n	800f536 <WIDGET_HandleActive+0x12a>
 800f4bc:	7a1b      	ldrb	r3, [r3, #8]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d039      	beq.n	800f536 <WIDGET_HandleActive+0x12a>
 800f4c2:	a802      	add	r0, sp, #8
 800f4c4:	f7ff fcee 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	f7f9 f9e1 	bl	8008890 <WM_BringToTop>
 800f4ce:	e030      	b.n	800f532 <WIDGET_HandleActive+0x126>
 800f4d0:	68eb      	ldr	r3, [r5, #12]
 800f4d2:	8603      	strh	r3, [r0, #48]	; 0x30
 800f4d4:	e02d      	b.n	800f532 <WIDGET_HandleActive+0x126>
 800f4d6:	68eb      	ldr	r3, [r5, #12]
 800f4d8:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 800f4da:	2b01      	cmp	r3, #1
 800f4dc:	d108      	bne.n	800f4f0 <WIDGET_HandleActive+0xe4>
 800f4de:	06ca      	lsls	r2, r1, #27
 800f4e0:	d50d      	bpl.n	800f4fe <WIDGET_HandleActive+0xf2>
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f041 0101 	orr.w	r1, r1, #1
 800f4e8:	f7ff ff68 	bl	800f3bc <WIDGET_SetState>
 800f4ec:	2708      	movs	r7, #8
 800f4ee:	e008      	b.n	800f502 <WIDGET_HandleActive+0xf6>
 800f4f0:	f021 0101 	bic.w	r1, r1, #1
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	f7ff ff61 	bl	800f3bc <WIDGET_SetState>
 800f4fa:	2709      	movs	r7, #9
 800f4fc:	e001      	b.n	800f502 <WIDGET_HandleActive+0xf6>
 800f4fe:	f04f 37ff 	mov.w	r7, #4294967295
 800f502:	a802      	add	r0, sp, #8
 800f504:	f7ff fcce 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800f508:	1c7b      	adds	r3, r7, #1
 800f50a:	f04f 0400 	mov.w	r4, #0
 800f50e:	d005      	beq.n	800f51c <WIDGET_HandleActive+0x110>
 800f510:	4630      	mov	r0, r6
 800f512:	4639      	mov	r1, r7
 800f514:	f7f9 f8b9 	bl	800868a <WM_NotifyParent>
 800f518:	60ec      	str	r4, [r5, #12]
 800f51a:	e00d      	b.n	800f538 <WIDGET_HandleActive+0x12c>
 800f51c:	2301      	movs	r3, #1
 800f51e:	60eb      	str	r3, [r5, #12]
 800f520:	e00a      	b.n	800f538 <WIDGET_HandleActive+0x12c>
 800f522:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800f524:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f528:	60eb      	str	r3, [r5, #12]
 800f52a:	e002      	b.n	800f532 <WIDGET_HandleActive+0x126>
 800f52c:	68e9      	ldr	r1, [r5, #12]
 800f52e:	f7ff ff2f 	bl	800f390 <WIDGET__GetInsideRect>
 800f532:	2400      	movs	r4, #0
 800f534:	e000      	b.n	800f538 <WIDGET_HandleActive+0x12c>
 800f536:	2401      	movs	r4, #1
 800f538:	9b02      	ldr	r3, [sp, #8]
 800f53a:	b123      	cbz	r3, 800f546 <WIDGET_HandleActive+0x13a>
 800f53c:	a802      	add	r0, sp, #8
 800f53e:	f7ff fcb1 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800f542:	e000      	b.n	800f546 <WIDGET_HandleActive+0x13a>
 800f544:	2401      	movs	r4, #1
 800f546:	4620      	mov	r0, r4
 800f548:	b005      	add	sp, #20
 800f54a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f54c <FRAMEWIN_DrawSkinFlex>:
 800f54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f550:	4604      	mov	r4, r0
 800f552:	b090      	sub	sp, #64	; 0x40
 800f554:	6800      	ldr	r0, [r0, #0]
 800f556:	4d9b      	ldr	r5, [pc, #620]	; (800f7c4 <FRAMEWIN_DrawSkinFlex+0x278>)
 800f558:	f7f8 fb70 	bl	8007c3c <FRAMEWIN_GetActive>
 800f55c:	4b9a      	ldr	r3, [pc, #616]	; (800f7c8 <FRAMEWIN_DrawSkinFlex+0x27c>)
 800f55e:	6866      	ldr	r6, [r4, #4]
 800f560:	2800      	cmp	r0, #0
 800f562:	bf18      	it	ne
 800f564:	461d      	movne	r5, r3
 800f566:	2e1c      	cmp	r6, #28
 800f568:	f200 81a6 	bhi.w	800f8b8 <FRAMEWIN_DrawSkinFlex+0x36c>
 800f56c:	e8df f016 	tbh	[pc, r6, lsl #1]
 800f570:	01a40191 	.word	0x01a40191
 800f574:	01a401a4 	.word	0x01a401a4
 800f578:	012e01a4 	.word	0x012e01a4
 800f57c:	01a401a4 	.word	0x01a401a4
 800f580:	01a401a4 	.word	0x01a401a4
 800f584:	002701a4 	.word	0x002701a4
 800f588:	01a401a4 	.word	0x01a401a4
 800f58c:	01a4017e 	.word	0x01a4017e
 800f590:	01a401a4 	.word	0x01a401a4
 800f594:	01a40145 	.word	0x01a40145
 800f598:	002301a4 	.word	0x002301a4
 800f59c:	001f001d 	.word	0x001f001d
 800f5a0:	01a40021 	.word	0x01a40021
 800f5a4:	01a401a4 	.word	0x01a401a4
 800f5a8:	0025      	.short	0x0025
 800f5aa:	69ee      	ldr	r6, [r5, #28]
 800f5ac:	e189      	b.n	800f8c2 <FRAMEWIN_DrawSkinFlex+0x376>
 800f5ae:	6a2e      	ldr	r6, [r5, #32]
 800f5b0:	e187      	b.n	800f8c2 <FRAMEWIN_DrawSkinFlex+0x376>
 800f5b2:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800f5b4:	e185      	b.n	800f8c2 <FRAMEWIN_DrawSkinFlex+0x376>
 800f5b6:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800f5b8:	e183      	b.n	800f8c2 <FRAMEWIN_DrawSkinFlex+0x376>
 800f5ba:	696e      	ldr	r6, [r5, #20]
 800f5bc:	e181      	b.n	800f8c2 <FRAMEWIN_DrawSkinFlex+0x376>
 800f5be:	231c      	movs	r3, #28
 800f5c0:	6820      	ldr	r0, [r4, #0]
 800f5c2:	9308      	str	r3, [sp, #32]
 800f5c4:	9007      	str	r0, [sp, #28]
 800f5c6:	f7ff fc5f 	bl	800ee88 <GUI_ALLOC_LockH>
 800f5ca:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f5cc:	9005      	str	r0, [sp, #20]
 800f5ce:	a807      	add	r0, sp, #28
 800f5d0:	4798      	blx	r3
 800f5d2:	4606      	mov	r6, r0
 800f5d4:	a805      	add	r0, sp, #20
 800f5d6:	f7ff fc65 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800f5da:	2e01      	cmp	r6, #1
 800f5dc:	dd11      	ble.n	800f602 <FRAMEWIN_DrawSkinFlex+0xb6>
 800f5de:	682b      	ldr	r3, [r5, #0]
 800f5e0:	9300      	str	r3, [sp, #0]
 800f5e2:	686b      	ldr	r3, [r5, #4]
 800f5e4:	9301      	str	r3, [sp, #4]
 800f5e6:	68ab      	ldr	r3, [r5, #8]
 800f5e8:	9302      	str	r3, [sp, #8]
 800f5ea:	6920      	ldr	r0, [r4, #16]
 800f5ec:	69a1      	ldr	r1, [r4, #24]
 800f5ee:	6962      	ldr	r2, [r4, #20]
 800f5f0:	4633      	mov	r3, r6
 800f5f2:	f002 f8c7 	bl	8011784 <GUI__DrawTwinArc2>
 800f5f6:	6923      	ldr	r3, [r4, #16]
 800f5f8:	69a7      	ldr	r7, [r4, #24]
 800f5fa:	eb06 0803 	add.w	r8, r6, r3
 800f5fe:	1bbf      	subs	r7, r7, r6
 800f600:	e02c      	b.n	800f65c <FRAMEWIN_DrawSkinFlex+0x110>
 800f602:	6828      	ldr	r0, [r5, #0]
 800f604:	f7fe f9eb 	bl	800d9de <GUI_SetColor>
 800f608:	6921      	ldr	r1, [r4, #16]
 800f60a:	69ea      	ldr	r2, [r5, #28]
 800f60c:	6960      	ldr	r0, [r4, #20]
 800f60e:	440a      	add	r2, r1
 800f610:	3a01      	subs	r2, #1
 800f612:	f002 fb05 	bl	8011c20 <GUI_DrawHLine>
 800f616:	69a2      	ldr	r2, [r4, #24]
 800f618:	69e9      	ldr	r1, [r5, #28]
 800f61a:	6960      	ldr	r0, [r4, #20]
 800f61c:	1a51      	subs	r1, r2, r1
 800f61e:	3101      	adds	r1, #1
 800f620:	f002 fafe 	bl	8011c20 <GUI_DrawHLine>
 800f624:	6967      	ldr	r7, [r4, #20]
 800f626:	6920      	ldr	r0, [r4, #16]
 800f628:	3701      	adds	r7, #1
 800f62a:	4639      	mov	r1, r7
 800f62c:	f002 fb1c 	bl	8011c68 <GUI_DrawPixel>
 800f630:	4639      	mov	r1, r7
 800f632:	69a0      	ldr	r0, [r4, #24]
 800f634:	f002 fb18 	bl	8011c68 <GUI_DrawPixel>
 800f638:	6868      	ldr	r0, [r5, #4]
 800f63a:	f7fe f9d0 	bl	800d9de <GUI_SetColor>
 800f63e:	6920      	ldr	r0, [r4, #16]
 800f640:	4639      	mov	r1, r7
 800f642:	3001      	adds	r0, #1
 800f644:	f002 fb10 	bl	8011c68 <GUI_DrawPixel>
 800f648:	69a0      	ldr	r0, [r4, #24]
 800f64a:	4639      	mov	r1, r7
 800f64c:	3801      	subs	r0, #1
 800f64e:	f002 fb0b 	bl	8011c68 <GUI_DrawPixel>
 800f652:	6923      	ldr	r3, [r4, #16]
 800f654:	69a7      	ldr	r7, [r4, #24]
 800f656:	f103 0802 	add.w	r8, r3, #2
 800f65a:	3f02      	subs	r7, #2
 800f65c:	6828      	ldr	r0, [r5, #0]
 800f65e:	f7fe f9be 	bl	800d9de <GUI_SetColor>
 800f662:	4641      	mov	r1, r8
 800f664:	463a      	mov	r2, r7
 800f666:	6960      	ldr	r0, [r4, #20]
 800f668:	f002 fada 	bl	8011c20 <GUI_DrawHLine>
 800f66c:	6868      	ldr	r0, [r5, #4]
 800f66e:	f7fe f9b6 	bl	800d9de <GUI_SetColor>
 800f672:	6960      	ldr	r0, [r4, #20]
 800f674:	4641      	mov	r1, r8
 800f676:	3001      	adds	r0, #1
 800f678:	463a      	mov	r2, r7
 800f67a:	f002 fad1 	bl	8011c20 <GUI_DrawHLine>
 800f67e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f680:	2b02      	cmp	r3, #2
 800f682:	dd0a      	ble.n	800f69a <FRAMEWIN_DrawSkinFlex+0x14e>
 800f684:	68a8      	ldr	r0, [r5, #8]
 800f686:	f7fe f9aa 	bl	800d9de <GUI_SetColor>
 800f68a:	6961      	ldr	r1, [r4, #20]
 800f68c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f68e:	440b      	add	r3, r1
 800f690:	4640      	mov	r0, r8
 800f692:	3102      	adds	r1, #2
 800f694:	463a      	mov	r2, r7
 800f696:	3b01      	subs	r3, #1
 800f698:	e01d      	b.n	800f6d6 <FRAMEWIN_DrawSkinFlex+0x18a>
 800f69a:	6a2a      	ldr	r2, [r5, #32]
 800f69c:	42b2      	cmp	r2, r6
 800f69e:	dd1c      	ble.n	800f6da <FRAMEWIN_DrawSkinFlex+0x18e>
 800f6a0:	6967      	ldr	r7, [r4, #20]
 800f6a2:	6923      	ldr	r3, [r4, #16]
 800f6a4:	2e01      	cmp	r6, #1
 800f6a6:	f107 0802 	add.w	r8, r7, #2
 800f6aa:	f340 8107 	ble.w	800f8bc <FRAMEWIN_DrawSkinFlex+0x370>
 800f6ae:	4437      	add	r7, r6
 800f6b0:	18f0      	adds	r0, r6, r3
 800f6b2:	441a      	add	r2, r3
 800f6b4:	3a01      	subs	r2, #1
 800f6b6:	4641      	mov	r1, r8
 800f6b8:	463b      	mov	r3, r7
 800f6ba:	f002 fb19 	bl	8011cf0 <GUI_FillRect>
 800f6be:	69a3      	ldr	r3, [r4, #24]
 800f6c0:	69e8      	ldr	r0, [r5, #28]
 800f6c2:	2e01      	cmp	r6, #1
 800f6c4:	ebc0 0003 	rsb	r0, r0, r3
 800f6c8:	bfcc      	ite	gt
 800f6ca:	ebc6 0203 	rsbgt	r2, r6, r3
 800f6ce:	1e9a      	suble	r2, r3, #2
 800f6d0:	3001      	adds	r0, #1
 800f6d2:	4641      	mov	r1, r8
 800f6d4:	463b      	mov	r3, r7
 800f6d6:	f002 fb0b 	bl	8011cf0 <GUI_FillRect>
 800f6da:	6963      	ldr	r3, [r4, #20]
 800f6dc:	69e7      	ldr	r7, [r4, #28]
 800f6de:	6828      	ldr	r0, [r5, #0]
 800f6e0:	2e01      	cmp	r6, #1
 800f6e2:	bfcc      	ite	gt
 800f6e4:	18f6      	addgt	r6, r6, r3
 800f6e6:	1c9e      	addle	r6, r3, #2
 800f6e8:	3f01      	subs	r7, #1
 800f6ea:	f7fe f978 	bl	800d9de <GUI_SetColor>
 800f6ee:	463a      	mov	r2, r7
 800f6f0:	6920      	ldr	r0, [r4, #16]
 800f6f2:	4631      	mov	r1, r6
 800f6f4:	f002 fada 	bl	8011cac <GUI_DrawVLine>
 800f6f8:	463a      	mov	r2, r7
 800f6fa:	4631      	mov	r1, r6
 800f6fc:	69a0      	ldr	r0, [r4, #24]
 800f6fe:	f002 fad5 	bl	8011cac <GUI_DrawVLine>
 800f702:	69e7      	ldr	r7, [r4, #28]
 800f704:	6868      	ldr	r0, [r5, #4]
 800f706:	f7fe f96a 	bl	800d9de <GUI_SetColor>
 800f70a:	6920      	ldr	r0, [r4, #16]
 800f70c:	3f02      	subs	r7, #2
 800f70e:	3001      	adds	r0, #1
 800f710:	4631      	mov	r1, r6
 800f712:	463a      	mov	r2, r7
 800f714:	f002 faca 	bl	8011cac <GUI_DrawVLine>
 800f718:	69a0      	ldr	r0, [r4, #24]
 800f71a:	4631      	mov	r1, r6
 800f71c:	3801      	subs	r0, #1
 800f71e:	463a      	mov	r2, r7
 800f720:	f002 fac4 	bl	8011cac <GUI_DrawVLine>
 800f724:	69eb      	ldr	r3, [r5, #28]
 800f726:	2b02      	cmp	r3, #2
 800f728:	dc02      	bgt.n	800f730 <FRAMEWIN_DrawSkinFlex+0x1e4>
 800f72a:	6a2b      	ldr	r3, [r5, #32]
 800f72c:	2b02      	cmp	r3, #2
 800f72e:	dd20      	ble.n	800f772 <FRAMEWIN_DrawSkinFlex+0x226>
 800f730:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f732:	69e7      	ldr	r7, [r4, #28]
 800f734:	68a8      	ldr	r0, [r5, #8]
 800f736:	2b02      	cmp	r3, #2
 800f738:	bfcc      	ite	gt
 800f73a:	ebc3 0707 	rsbgt	r7, r3, r7
 800f73e:	3f02      	suble	r7, #2
 800f740:	f7fe f94d 	bl	800d9de <GUI_SetColor>
 800f744:	69ea      	ldr	r2, [r5, #28]
 800f746:	2a02      	cmp	r2, #2
 800f748:	dd07      	ble.n	800f75a <FRAMEWIN_DrawSkinFlex+0x20e>
 800f74a:	6920      	ldr	r0, [r4, #16]
 800f74c:	4402      	add	r2, r0
 800f74e:	4631      	mov	r1, r6
 800f750:	3002      	adds	r0, #2
 800f752:	3a01      	subs	r2, #1
 800f754:	463b      	mov	r3, r7
 800f756:	f002 facb 	bl	8011cf0 <GUI_FillRect>
 800f75a:	6a2b      	ldr	r3, [r5, #32]
 800f75c:	2b02      	cmp	r3, #2
 800f75e:	dd08      	ble.n	800f772 <FRAMEWIN_DrawSkinFlex+0x226>
 800f760:	69a2      	ldr	r2, [r4, #24]
 800f762:	69e8      	ldr	r0, [r5, #28]
 800f764:	1a10      	subs	r0, r2, r0
 800f766:	3001      	adds	r0, #1
 800f768:	4631      	mov	r1, r6
 800f76a:	3a02      	subs	r2, #2
 800f76c:	463b      	mov	r3, r7
 800f76e:	f002 fabf 	bl	8011cf0 <GUI_FillRect>
 800f772:	6828      	ldr	r0, [r5, #0]
 800f774:	f7fe f933 	bl	800d9de <GUI_SetColor>
 800f778:	6921      	ldr	r1, [r4, #16]
 800f77a:	69a2      	ldr	r2, [r4, #24]
 800f77c:	69e0      	ldr	r0, [r4, #28]
 800f77e:	f002 fa4f 	bl	8011c20 <GUI_DrawHLine>
 800f782:	6868      	ldr	r0, [r5, #4]
 800f784:	f7fe f92b 	bl	800d9de <GUI_SetColor>
 800f788:	69e0      	ldr	r0, [r4, #28]
 800f78a:	6921      	ldr	r1, [r4, #16]
 800f78c:	69a2      	ldr	r2, [r4, #24]
 800f78e:	3801      	subs	r0, #1
 800f790:	3101      	adds	r1, #1
 800f792:	3a01      	subs	r2, #1
 800f794:	f002 fa44 	bl	8011c20 <GUI_DrawHLine>
 800f798:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800f79a:	2e02      	cmp	r6, #2
 800f79c:	f340 808c 	ble.w	800f8b8 <FRAMEWIN_DrawSkinFlex+0x36c>
 800f7a0:	6920      	ldr	r0, [r4, #16]
 800f7a2:	69a2      	ldr	r2, [r4, #24]
 800f7a4:	69e4      	ldr	r4, [r4, #28]
 800f7a6:	f100 0802 	add.w	r8, r0, #2
 800f7aa:	68a8      	ldr	r0, [r5, #8]
 800f7ac:	1e97      	subs	r7, r2, #2
 800f7ae:	f7fe f916 	bl	800d9de <GUI_SetColor>
 800f7b2:	1ba1      	subs	r1, r4, r6
 800f7b4:	4640      	mov	r0, r8
 800f7b6:	3101      	adds	r1, #1
 800f7b8:	463a      	mov	r2, r7
 800f7ba:	1ea3      	subs	r3, r4, #2
 800f7bc:	f002 fa98 	bl	8011cf0 <GUI_FillRect>
 800f7c0:	e07a      	b.n	800f8b8 <FRAMEWIN_DrawSkinFlex+0x36c>
 800f7c2:	bf00      	nop
 800f7c4:	200000d8 	.word	0x200000d8
 800f7c8:	200000ac 	.word	0x200000ac
 800f7cc:	8a20      	ldrh	r0, [r4, #16]
 800f7ce:	8aa1      	ldrh	r1, [r4, #20]
 800f7d0:	8b22      	ldrh	r2, [r4, #24]
 800f7d2:	8ba3      	ldrh	r3, [r4, #28]
 800f7d4:	68ec      	ldr	r4, [r5, #12]
 800f7d6:	9400      	str	r4, [sp, #0]
 800f7d8:	692c      	ldr	r4, [r5, #16]
 800f7da:	f8ad 001c 	strh.w	r0, [sp, #28]
 800f7de:	f8ad 101e 	strh.w	r1, [sp, #30]
 800f7e2:	f8ad 2020 	strh.w	r2, [sp, #32]
 800f7e6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800f7ea:	9401      	str	r4, [sp, #4]
 800f7ec:	b200      	sxth	r0, r0
 800f7ee:	b209      	sxth	r1, r1
 800f7f0:	b212      	sxth	r2, r2
 800f7f2:	b21b      	sxth	r3, r3
 800f7f4:	f002 fb80 	bl	8011ef8 <GUI_DrawGradientV>
 800f7f8:	e05e      	b.n	800f8b8 <FRAMEWIN_DrawSkinFlex+0x36c>
 800f7fa:	8b2b      	ldrh	r3, [r5, #24]
 800f7fc:	6922      	ldr	r2, [r4, #16]
 800f7fe:	6820      	ldr	r0, [r4, #0]
 800f800:	441a      	add	r2, r3
 800f802:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f806:	6962      	ldr	r2, [r4, #20]
 800f808:	f8ad 201e 	strh.w	r2, [sp, #30]
 800f80c:	69a2      	ldr	r2, [r4, #24]
 800f80e:	1ad3      	subs	r3, r2, r3
 800f810:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f814:	69e3      	ldr	r3, [r4, #28]
 800f816:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800f81a:	f7ff fb35 	bl	800ee88 <GUI_ALLOC_LockH>
 800f81e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800f820:	9005      	str	r0, [sp, #20]
 800f822:	b1fb      	cbz	r3, 800f864 <FRAMEWIN_DrawSkinFlex+0x318>
 800f824:	2002      	movs	r0, #2
 800f826:	f7fe f915 	bl	800da54 <GUI_SetTextMode>
 800f82a:	9b05      	ldr	r3, [sp, #20]
 800f82c:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 800f830:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800f834:	320e      	adds	r2, #14
 800f836:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f83a:	6898      	ldr	r0, [r3, #8]
 800f83c:	f7fe f8cf 	bl	800d9de <GUI_SetColor>
 800f840:	9b05      	ldr	r3, [sp, #20]
 800f842:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f844:	f7fe f8d0 	bl	800d9e8 <GUI_SetFont>
 800f848:	9b05      	ldr	r3, [sp, #20]
 800f84a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800f84c:	f7ff fb1c 	bl	800ee88 <GUI_ALLOC_LockH>
 800f850:	9b05      	ldr	r3, [sp, #20]
 800f852:	9006      	str	r0, [sp, #24]
 800f854:	a907      	add	r1, sp, #28
 800f856:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 800f85a:	f7fd fd28 	bl	800d2ae <GUI_DispStringInRect>
 800f85e:	a806      	add	r0, sp, #24
 800f860:	f7ff fb20 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800f864:	a805      	add	r0, sp, #20
 800f866:	f7ff fb1d 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800f86a:	e025      	b.n	800f8b8 <FRAMEWIN_DrawSkinFlex+0x36c>
 800f86c:	6923      	ldr	r3, [r4, #16]
 800f86e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f872:	6963      	ldr	r3, [r4, #20]
 800f874:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f878:	69a3      	ldr	r3, [r4, #24]
 800f87a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f87e:	68a8      	ldr	r0, [r5, #8]
 800f880:	69e3      	ldr	r3, [r4, #28]
 800f882:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800f886:	f7fe f8aa 	bl	800d9de <GUI_SetColor>
 800f88a:	a807      	add	r0, sp, #28
 800f88c:	f002 fa52 	bl	8011d34 <GUI_FillRectEx>
 800f890:	e012      	b.n	800f8b8 <FRAMEWIN_DrawSkinFlex+0x36c>
 800f892:	6820      	ldr	r0, [r4, #0]
 800f894:	f7ff faf8 	bl	800ee88 <GUI_ALLOC_LockH>
 800f898:	ab10      	add	r3, sp, #64	; 0x40
 800f89a:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 800f89e:	f843 0d2c 	str.w	r0, [r3, #-44]!
 800f8a2:	f042 020c 	orr.w	r2, r2, #12
 800f8a6:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7ff fafa 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800f8b0:	6820      	ldr	r0, [r4, #0]
 800f8b2:	f7f8 fb67 	bl	8007f84 <WM_SetHasTrans>
 800f8b6:	e004      	b.n	800f8c2 <FRAMEWIN_DrawSkinFlex+0x376>
 800f8b8:	2600      	movs	r6, #0
 800f8ba:	e002      	b.n	800f8c2 <FRAMEWIN_DrawSkinFlex+0x376>
 800f8bc:	1c98      	adds	r0, r3, #2
 800f8be:	4647      	mov	r7, r8
 800f8c0:	e6f7      	b.n	800f6b2 <FRAMEWIN_DrawSkinFlex+0x166>
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	b010      	add	sp, #64	; 0x40
 800f8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8ca:	bf00      	nop

0800f8cc <_GetBorderSize>:
 800f8cc:	b570      	push	{r4, r5, r6, lr}
 800f8ce:	b08a      	sub	sp, #40	; 0x28
 800f8d0:	4605      	mov	r5, r0
 800f8d2:	460c      	mov	r4, r1
 800f8d4:	f7ff fad8 	bl	800ee88 <GUI_ALLOC_LockH>
 800f8d8:	ab0a      	add	r3, sp, #40	; 0x28
 800f8da:	6d06      	ldr	r6, [r0, #80]	; 0x50
 800f8dc:	f843 0d28 	str.w	r0, [r3, #-40]!
 800f8e0:	4668      	mov	r0, sp
 800f8e2:	f7ff fadf 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800f8e6:	9501      	str	r5, [sp, #4]
 800f8e8:	2c03      	cmp	r4, #3
 800f8ea:	d80b      	bhi.n	800f904 <_GetBorderSize+0x38>
 800f8ec:	e8df f004 	tbb	[pc, r4]
 800f8f0:	08060402 	.word	0x08060402
 800f8f4:	2318      	movs	r3, #24
 800f8f6:	e004      	b.n	800f902 <_GetBorderSize+0x36>
 800f8f8:	2316      	movs	r3, #22
 800f8fa:	e002      	b.n	800f902 <_GetBorderSize+0x36>
 800f8fc:	2315      	movs	r3, #21
 800f8fe:	e000      	b.n	800f902 <_GetBorderSize+0x36>
 800f900:	2317      	movs	r3, #23
 800f902:	9302      	str	r3, [sp, #8]
 800f904:	a801      	add	r0, sp, #4
 800f906:	47b0      	blx	r6
 800f908:	b00a      	add	sp, #40	; 0x28
 800f90a:	bd70      	pop	{r4, r5, r6, pc}

0800f90c <_Create>:
 800f90c:	b530      	push	{r4, r5, lr}
 800f90e:	b08b      	sub	sp, #44	; 0x2c
 800f910:	4605      	mov	r5, r0
 800f912:	f7ff fab9 	bl	800ee88 <GUI_ALLOC_LockH>
 800f916:	ab0a      	add	r3, sp, #40	; 0x28
 800f918:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800f91a:	f843 0d28 	str.w	r0, [r3, #-40]!
 800f91e:	4668      	mov	r0, sp
 800f920:	6894      	ldr	r4, [r2, #8]
 800f922:	f7ff fabf 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800f926:	a80a      	add	r0, sp, #40	; 0x28
 800f928:	2300      	movs	r3, #0
 800f92a:	9302      	str	r3, [sp, #8]
 800f92c:	f840 5d24 	str.w	r5, [r0, #-36]!
 800f930:	6863      	ldr	r3, [r4, #4]
 800f932:	4798      	blx	r3
 800f934:	b00b      	add	sp, #44	; 0x2c
 800f936:	bd30      	pop	{r4, r5, pc}

0800f938 <_Paint>:
 800f938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f93c:	b091      	sub	sp, #68	; 0x44
 800f93e:	4604      	mov	r4, r0
 800f940:	f7ff faa2 	bl	800ee88 <GUI_ALLOC_LockH>
 800f944:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800f946:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800f948:	9603      	str	r6, [sp, #12]
 800f94a:	9006      	str	r0, [sp, #24]
 800f94c:	689e      	ldr	r6, [r3, #8]
 800f94e:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800f950:	f7f7 feaa 	bl	80076a8 <FRAMEWIN__CalcTitleHeight>
 800f954:	4683      	mov	fp, r0
 800f956:	a810      	add	r0, sp, #64	; 0x40
 800f958:	f850 2d28 	ldr.w	r2, [r0, #-40]!
 800f95c:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800f960:	9204      	str	r2, [sp, #16]
 800f962:	f7ff fa9f 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800f966:	4620      	mov	r0, r4
 800f968:	f7f8 ff66 	bl	8008838 <WM_GetWindowSizeX>
 800f96c:	4681      	mov	r9, r0
 800f96e:	4620      	mov	r0, r4
 800f970:	f7f8 ff77 	bl	8008862 <WM_GetWindowSizeY>
 800f974:	6832      	ldr	r2, [r6, #0]
 800f976:	2101      	movs	r1, #1
 800f978:	4680      	mov	r8, r0
 800f97a:	4620      	mov	r0, r4
 800f97c:	4790      	blx	r2
 800f97e:	6832      	ldr	r2, [r6, #0]
 800f980:	2103      	movs	r1, #3
 800f982:	4607      	mov	r7, r0
 800f984:	4620      	mov	r0, r4
 800f986:	4790      	blx	r2
 800f988:	6832      	ldr	r2, [r6, #0]
 800f98a:	2100      	movs	r1, #0
 800f98c:	4682      	mov	sl, r0
 800f98e:	4620      	mov	r0, r4
 800f990:	4790      	blx	r2
 800f992:	6833      	ldr	r3, [r6, #0]
 800f994:	9002      	str	r0, [sp, #8]
 800f996:	2102      	movs	r1, #2
 800f998:	4620      	mov	r0, r4
 800f99a:	4798      	blx	r3
 800f99c:	9005      	str	r0, [sp, #20]
 800f99e:	2000      	movs	r0, #0
 800f9a0:	9407      	str	r4, [sp, #28]
 800f9a2:	f7f9 ff05 	bl	80097b0 <WM__InitIVRSearch>
 800f9a6:	2800      	cmp	r0, #0
 800f9a8:	d044      	beq.n	800fa34 <_Paint+0xfc>
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	930c      	str	r3, [sp, #48]	; 0x30
 800f9ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800f9b0:	f109 33ff 	add.w	r3, r9, #4294967295
 800f9b4:	930d      	str	r3, [sp, #52]	; 0x34
 800f9b6:	f108 33ff 	add.w	r3, r8, #4294967295
 800f9ba:	930e      	str	r3, [sp, #56]	; 0x38
 800f9bc:	230b      	movs	r3, #11
 800f9be:	9308      	str	r3, [sp, #32]
 800f9c0:	a807      	add	r0, sp, #28
 800f9c2:	47a8      	blx	r5
 800f9c4:	9b02      	ldr	r3, [sp, #8]
 800f9c6:	9e04      	ldr	r6, [sp, #16]
 800f9c8:	970b      	str	r7, [sp, #44]	; 0x2c
 800f9ca:	445b      	add	r3, fp
 800f9cc:	fa03 f086 	sxtah	r0, r3, r6
 800f9d0:	9e05      	ldr	r6, [sp, #20]
 800f9d2:	930c      	str	r3, [sp, #48]	; 0x30
 800f9d4:	ebc6 0108 	rsb	r1, r6, r8
 800f9d8:	ebca 0209 	rsb	r2, sl, r9
 800f9dc:	3801      	subs	r0, #1
 800f9de:	3901      	subs	r1, #1
 800f9e0:	3a01      	subs	r2, #1
 800f9e2:	4288      	cmp	r0, r1
 800f9e4:	bfd4      	ite	le
 800f9e6:	900e      	strle	r0, [sp, #56]	; 0x38
 800f9e8:	910e      	strgt	r1, [sp, #56]	; 0x38
 800f9ea:	210e      	movs	r1, #14
 800f9ec:	9108      	str	r1, [sp, #32]
 800f9ee:	e88d 000c 	stmia.w	sp, {r2, r3}
 800f9f2:	920d      	str	r2, [sp, #52]	; 0x34
 800f9f4:	a807      	add	r0, sp, #28
 800f9f6:	47a8      	blx	r5
 800f9f8:	9b01      	ldr	r3, [sp, #4]
 800f9fa:	9a00      	ldr	r2, [sp, #0]
 800f9fc:	9e02      	ldr	r6, [sp, #8]
 800f9fe:	920d      	str	r2, [sp, #52]	; 0x34
 800fa00:	3b01      	subs	r3, #1
 800fa02:	930e      	str	r3, [sp, #56]	; 0x38
 800fa04:	2305      	movs	r3, #5
 800fa06:	9308      	str	r3, [sp, #32]
 800fa08:	970b      	str	r7, [sp, #44]	; 0x2c
 800fa0a:	960c      	str	r6, [sp, #48]	; 0x30
 800fa0c:	a807      	add	r0, sp, #28
 800fa0e:	47a8      	blx	r5
 800fa10:	a90b      	add	r1, sp, #44	; 0x2c
 800fa12:	aa0d      	add	r2, sp, #52	; 0x34
 800fa14:	4620      	mov	r0, r4
 800fa16:	f7f7 fe56 	bl	80076c6 <FRAMEWIN__GetTitleLimits>
 800fa1a:	2002      	movs	r0, #2
 800fa1c:	f7fe f81a 	bl	800da54 <GUI_SetTextMode>
 800fa20:	9803      	ldr	r0, [sp, #12]
 800fa22:	f7fd ffe1 	bl	800d9e8 <GUI_SetFont>
 800fa26:	2312      	movs	r3, #18
 800fa28:	9308      	str	r3, [sp, #32]
 800fa2a:	a807      	add	r0, sp, #28
 800fa2c:	47a8      	blx	r5
 800fa2e:	f7f9 fdfd 	bl	800962c <WM__GetNextIVR>
 800fa32:	e7b8      	b.n	800f9a6 <_Paint+0x6e>
 800fa34:	b011      	add	sp, #68	; 0x44
 800fa36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa3a <WM_DeleteTimer>:
 800fa3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa3c:	4605      	mov	r5, r0
 800fa3e:	b168      	cbz	r0, 800fa5c <WM_DeleteTimer+0x22>
 800fa40:	f7ff fa22 	bl	800ee88 <GUI_ALLOC_LockH>
 800fa44:	ac02      	add	r4, sp, #8
 800fa46:	f844 0d04 	str.w	r0, [r4, #-4]!
 800fa4a:	6800      	ldr	r0, [r0, #0]
 800fa4c:	f7fd fad0 	bl	800cff0 <GUI_TIMER_Delete>
 800fa50:	4620      	mov	r0, r4
 800fa52:	f7ff fa27 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800fa56:	4628      	mov	r0, r5
 800fa58:	f7ff fa50 	bl	800eefc <GUI_ALLOC_Free>
 800fa5c:	b003      	add	sp, #12
 800fa5e:	bd30      	pop	{r4, r5, pc}

0800fa60 <WM__DeleteAssocTimer>:
 800fa60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa62:	4605      	mov	r5, r0
 800fa64:	a801      	add	r0, sp, #4
 800fa66:	f7fd fa8f 	bl	800cf88 <GUI_TIMER__GetFirstTimer>
 800fa6a:	4604      	mov	r4, r0
 800fa6c:	b1dc      	cbz	r4, 800faa6 <WM__DeleteAssocTimer+0x46>
 800fa6e:	4620      	mov	r0, r4
 800fa70:	2101      	movs	r1, #1
 800fa72:	f7fd faf1 	bl	800d058 <GUI_TIMER_GetFlag>
 800fa76:	9b01      	ldr	r3, [sp, #4]
 800fa78:	b183      	cbz	r3, 800fa9c <WM__DeleteAssocTimer+0x3c>
 800fa7a:	b178      	cbz	r0, 800fa9c <WM__DeleteAssocTimer+0x3c>
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f7ff f9f9 	bl	800ee74 <GUI_ALLOC_h2p>
 800fa82:	6843      	ldr	r3, [r0, #4]
 800fa84:	42ab      	cmp	r3, r5
 800fa86:	d109      	bne.n	800fa9c <WM__DeleteAssocTimer+0x3c>
 800fa88:	4620      	mov	r0, r4
 800fa8a:	a901      	add	r1, sp, #4
 800fa8c:	9e01      	ldr	r6, [sp, #4]
 800fa8e:	f7fd fa93 	bl	800cfb8 <GUI_TIMER__GetNextTimerLin>
 800fa92:	4604      	mov	r4, r0
 800fa94:	4630      	mov	r0, r6
 800fa96:	f7ff ffd0 	bl	800fa3a <WM_DeleteTimer>
 800fa9a:	e7e7      	b.n	800fa6c <WM__DeleteAssocTimer+0xc>
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	a901      	add	r1, sp, #4
 800faa0:	f7fd fa8a 	bl	800cfb8 <GUI_TIMER__GetNextTimerLin>
 800faa4:	e7e1      	b.n	800fa6a <WM__DeleteAssocTimer+0xa>
 800faa6:	b002      	add	sp, #8
 800faa8:	bd70      	pop	{r4, r5, r6, pc}

0800faaa <_Convert16>:
 800faaa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faae:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800fab2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800fab6:	4605      	mov	r5, r0
 800fab8:	460e      	mov	r6, r1
 800faba:	4690      	mov	r8, r2
 800fabc:	461f      	mov	r7, r3
 800fabe:	4614      	mov	r4, r2
 800fac0:	4689      	mov	r9, r1
 800fac2:	f835 0b02 	ldrh.w	r0, [r5], #2
 800fac6:	47d8      	blx	fp
 800fac8:	47d0      	blx	sl
 800faca:	3c01      	subs	r4, #1
 800facc:	f849 0b04 	str.w	r0, [r9], #4
 800fad0:	d1f7      	bne.n	800fac2 <_Convert16+0x18>
 800fad2:	2f1f      	cmp	r7, #31
 800fad4:	d806      	bhi.n	800fae4 <_Convert16+0x3a>
 800fad6:	4630      	mov	r0, r6
 800fad8:	4641      	mov	r1, r8
 800fada:	463a      	mov	r2, r7
 800fadc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae0:	f001 bf04 	b.w	80118ec <GUI__CompactPixelIndices>
 800fae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fae8 <_Convert8>:
 800fae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faec:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800faf0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800faf4:	4605      	mov	r5, r0
 800faf6:	460e      	mov	r6, r1
 800faf8:	4690      	mov	r8, r2
 800fafa:	461f      	mov	r7, r3
 800fafc:	4689      	mov	r9, r1
 800fafe:	4604      	mov	r4, r0
 800fb00:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fb04:	47d8      	blx	fp
 800fb06:	47d0      	blx	sl
 800fb08:	1b2b      	subs	r3, r5, r4
 800fb0a:	4443      	add	r3, r8
 800fb0c:	f849 0b04 	str.w	r0, [r9], #4
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d1f5      	bne.n	800fb00 <_Convert8+0x18>
 800fb14:	2f1f      	cmp	r7, #31
 800fb16:	d806      	bhi.n	800fb26 <_Convert8+0x3e>
 800fb18:	4630      	mov	r0, r6
 800fb1a:	4641      	mov	r1, r8
 800fb1c:	463a      	mov	r2, r7
 800fb1e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb22:	f001 bee3 	b.w	80118ec <GUI__CompactPixelIndices>
 800fb26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800fb2c <GUI_MEMDEV__WriteToActiveOpaque>:
 800fb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb30:	b09d      	sub	sp, #116	; 0x74
 800fb32:	4606      	mov	r6, r0
 800fb34:	910f      	str	r1, [sp, #60]	; 0x3c
 800fb36:	920d      	str	r2, [sp, #52]	; 0x34
 800fb38:	2800      	cmp	r0, #0
 800fb3a:	f000 8386 	beq.w	801024a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800fb3e:	f7ff f9a3 	bl	800ee88 <GUI_ALLOC_LockH>
 800fb42:	ab1c      	add	r3, sp, #112	; 0x70
 800fb44:	6944      	ldr	r4, [r0, #20]
 800fb46:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7ff f9aa 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800fb50:	4630      	mov	r0, r6
 800fb52:	f7fb f823 	bl	800ab9c <GUI_MEMDEV_GetBitsPerPixel>
 800fb56:	2808      	cmp	r0, #8
 800fb58:	4601      	mov	r1, r0
 800fb5a:	dd02      	ble.n	800fb62 <GUI_MEMDEV__WriteToActiveOpaque+0x36>
 800fb5c:	2c00      	cmp	r4, #0
 800fb5e:	f000 81c3 	beq.w	800fee8 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 800fb62:	2201      	movs	r2, #1
 800fb64:	f04f 0800 	mov.w	r8, #0
 800fb68:	4630      	mov	r0, r6
 800fb6a:	921b      	str	r2, [sp, #108]	; 0x6c
 800fb6c:	920b      	str	r2, [sp, #44]	; 0x2c
 800fb6e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800fb72:	f7ff f989 	bl	800ee88 <GUI_ALLOC_LockH>
 800fb76:	6803      	ldr	r3, [r0, #0]
 800fb78:	f8df a60c 	ldr.w	sl, [pc, #1548]	; 8010188 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 800fb7c:	691b      	ldr	r3, [r3, #16]
 800fb7e:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	930e      	str	r3, [sp, #56]	; 0x38
 800fb86:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800fb8a:	f8da 3000 	ldr.w	r3, [sl]
 800fb8e:	f84b 0d14 	str.w	r0, [fp, #-20]!
 800fb92:	6904      	ldr	r4, [r0, #16]
 800fb94:	6945      	ldr	r5, [r0, #20]
 800fb96:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800fb9a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 800fb9e:	7c58      	ldrb	r0, [r3, #17]
 800fba0:	9112      	str	r1, [sp, #72]	; 0x48
 800fba2:	f7fc fa19 	bl	800bfd8 <GUI_GetBitsPerPixelEx>
 800fba6:	f8da 3000 	ldr.w	r3, [sl]
 800fbaa:	9010      	str	r0, [sp, #64]	; 0x40
 800fbac:	7c58      	ldrb	r0, [r3, #17]
 800fbae:	f7fc fa31 	bl	800c014 <GUI_GetpfIndex2ColorEx>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	4658      	mov	r0, fp
 800fbb6:	9309      	str	r3, [sp, #36]	; 0x24
 800fbb8:	f7ff f974 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800fbbc:	2c08      	cmp	r4, #8
 800fbbe:	4651      	mov	r1, sl
 800fbc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fbc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbc4:	d904      	bls.n	800fbd0 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 800fbc6:	2c10      	cmp	r4, #16
 800fbc8:	bf8c      	ite	hi
 800fbca:	2204      	movhi	r2, #4
 800fbcc:	2202      	movls	r2, #2
 800fbce:	e005      	b.n	800fbdc <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800fbd0:	2c01      	cmp	r4, #1
 800fbd2:	d103      	bne.n	800fbdc <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800fbd4:	9411      	str	r4, [sp, #68]	; 0x44
 800fbd6:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 800fbda:	e000      	b.n	800fbde <GUI_MEMDEV__WriteToActiveOpaque+0xb2>
 800fbdc:	9211      	str	r2, [sp, #68]	; 0x44
 800fbde:	980e      	ldr	r0, [sp, #56]	; 0x38
 800fbe0:	4298      	cmp	r0, r3
 800fbe2:	f000 80e2 	beq.w	800fdaa <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 800fbe6:	680b      	ldr	r3, [r1, #0]
 800fbe8:	7c58      	ldrb	r0, [r3, #17]
 800fbea:	f7fc fa23 	bl	800c034 <GUI_GetpfColor2IndexEx>
 800fbee:	9013      	str	r0, [sp, #76]	; 0x4c
 800fbf0:	00b8      	lsls	r0, r7, #2
 800fbf2:	f7ff fb15 	bl	800f220 <GUI_ALLOC_AllocNoInit>
 800fbf6:	900c      	str	r0, [sp, #48]	; 0x30
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	f000 8326 	beq.w	801024a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800fbfe:	4630      	mov	r0, r6
 800fc00:	f7fa f964 	bl	8009ecc <GUI_MEMDEV_GetDataPtr>
 800fc04:	4606      	mov	r6, r0
 800fc06:	2d00      	cmp	r5, #0
 800fc08:	f000 80be 	beq.w	800fd88 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>
 800fc0c:	4628      	mov	r0, r5
 800fc0e:	f7ff f93b 	bl	800ee88 <GUI_ALLOC_LockH>
 800fc12:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800fc16:	9018      	str	r0, [sp, #96]	; 0x60
 800fc18:	f04f 0a00 	mov.w	sl, #0
 800fc1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fc1e:	4592      	cmp	sl, r2
 800fc20:	f280 80ae 	bge.w	800fd80 <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 800fc24:	9818      	ldr	r0, [sp, #96]	; 0x60
 800fc26:	2300      	movs	r3, #0
 800fc28:	9319      	str	r3, [sp, #100]	; 0x64
 800fc2a:	6883      	ldr	r3, [r0, #8]
 800fc2c:	a919      	add	r1, sp, #100	; 0x64
 800fc2e:	695b      	ldr	r3, [r3, #20]
 800fc30:	4652      	mov	r2, sl
 800fc32:	4798      	blx	r3
 800fc34:	42b8      	cmp	r0, r7
 800fc36:	4605      	mov	r5, r0
 800fc38:	d12f      	bne.n	800fc9a <GUI_MEMDEV__WriteToActiveOpaque+0x16e>
 800fc3a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fc3c:	f7ff f924 	bl	800ee88 <GUI_ALLOC_LockH>
 800fc40:	2c08      	cmp	r4, #8
 800fc42:	4601      	mov	r1, r0
 800fc44:	9016      	str	r0, [sp, #88]	; 0x58
 800fc46:	d909      	bls.n	800fc5c <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 800fc48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fc4c:	9200      	str	r2, [sp, #0]
 800fc4e:	9301      	str	r3, [sp, #4]
 800fc50:	4630      	mov	r0, r6
 800fc52:	463a      	mov	r2, r7
 800fc54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fc56:	f7ff ff28 	bl	800faaa <_Convert16>
 800fc5a:	e008      	b.n	800fc6e <GUI_MEMDEV__WriteToActiveOpaque+0x142>
 800fc5c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800fc5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fc60:	9000      	str	r0, [sp, #0]
 800fc62:	9201      	str	r2, [sp, #4]
 800fc64:	4630      	mov	r0, r6
 800fc66:	463a      	mov	r2, r7
 800fc68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fc6a:	f7ff ff3d 	bl	800fae8 <_Convert8>
 800fc6e:	2301      	movs	r3, #1
 800fc70:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fc72:	9002      	str	r0, [sp, #8]
 800fc74:	ad1c      	add	r5, sp, #112	; 0x70
 800fc76:	2200      	movs	r2, #0
 800fc78:	9300      	str	r3, [sp, #0]
 800fc7a:	9301      	str	r3, [sp, #4]
 800fc7c:	9203      	str	r2, [sp, #12]
 800fc7e:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 800fc82:	9204      	str	r2, [sp, #16]
 800fc84:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800fc86:	f8cd 8014 	str.w	r8, [sp, #20]
 800fc8a:	4659      	mov	r1, fp
 800fc8c:	463a      	mov	r2, r7
 800fc8e:	f7fc fbed 	bl	800c46c <LCD_DrawBitmap>
 800fc92:	4628      	mov	r0, r5
 800fc94:	f7ff f906 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800fc98:	e060      	b.n	800fd5c <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800fc9a:	2c01      	cmp	r4, #1
 800fc9c:	d15c      	bne.n	800fd58 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 800fc9e:	2d00      	cmp	r5, #0
 800fca0:	d05c      	beq.n	800fd5c <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800fca2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800fca4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fca6:	f8cd 900c 	str.w	r9, [sp, #12]
 800fcaa:	2208      	movs	r2, #8
 800fcac:	fb90 f2f2 	sdiv	r2, r0, r2
 800fcb0:	4432      	add	r2, r6
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	9204      	str	r2, [sp, #16]
 800fcb6:	f000 0207 	and.w	r2, r0, #7
 800fcba:	9300      	str	r3, [sp, #0]
 800fcbc:	4408      	add	r0, r1
 800fcbe:	9301      	str	r3, [sp, #4]
 800fcc0:	9302      	str	r3, [sp, #8]
 800fcc2:	9206      	str	r2, [sp, #24]
 800fcc4:	4659      	mov	r1, fp
 800fcc6:	462a      	mov	r2, r5
 800fcc8:	f8cd 8014 	str.w	r8, [sp, #20]
 800fccc:	f7fc faf2 	bl	800c2b4 <LCD__DrawBitmap_1bpp>
 800fcd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fcd2:	9818      	ldr	r0, [sp, #96]	; 0x60
 800fcd4:	441d      	add	r5, r3
 800fcd6:	6883      	ldr	r3, [r0, #8]
 800fcd8:	9519      	str	r5, [sp, #100]	; 0x64
 800fcda:	695b      	ldr	r3, [r3, #20]
 800fcdc:	a919      	add	r1, sp, #100	; 0x64
 800fcde:	4652      	mov	r2, sl
 800fce0:	4798      	blx	r3
 800fce2:	4605      	mov	r5, r0
 800fce4:	e7db      	b.n	800fc9e <GUI_MEMDEV__WriteToActiveOpaque+0x172>
 800fce6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fce8:	f7ff f8ce 	bl	800ee88 <GUI_ALLOC_LockH>
 800fcec:	2c08      	cmp	r4, #8
 800fcee:	4601      	mov	r1, r0
 800fcf0:	9016      	str	r0, [sp, #88]	; 0x58
 800fcf2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800fcf4:	d938      	bls.n	800fd68 <GUI_MEMDEV__WriteToActiveOpaque+0x23c>
 800fcf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fcf8:	9200      	str	r2, [sp, #0]
 800fcfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fcfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fcfe:	9301      	str	r3, [sp, #4]
 800fd00:	fb00 6002 	mla	r0, r0, r2, r6
 800fd04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd06:	462a      	mov	r2, r5
 800fd08:	f7ff fecf 	bl	800faaa <_Convert16>
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 800fd12:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fd14:	9300      	str	r3, [sp, #0]
 800fd16:	2200      	movs	r2, #0
 800fd18:	9301      	str	r3, [sp, #4]
 800fd1a:	9002      	str	r0, [sp, #8]
 800fd1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fd1e:	9203      	str	r2, [sp, #12]
 800fd20:	9819      	ldr	r0, [sp, #100]	; 0x64
 800fd22:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 800fd26:	9204      	str	r2, [sp, #16]
 800fd28:	4408      	add	r0, r1
 800fd2a:	462a      	mov	r2, r5
 800fd2c:	4659      	mov	r1, fp
 800fd2e:	f8cd 8014 	str.w	r8, [sp, #20]
 800fd32:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800fd36:	f7fc fb99 	bl	800c46c <LCD_DrawBitmap>
 800fd3a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800fd3e:	4660      	mov	r0, ip
 800fd40:	f7ff f8b0 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800fd44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fd46:	9818      	ldr	r0, [sp, #96]	; 0x60
 800fd48:	441d      	add	r5, r3
 800fd4a:	6883      	ldr	r3, [r0, #8]
 800fd4c:	9519      	str	r5, [sp, #100]	; 0x64
 800fd4e:	695b      	ldr	r3, [r3, #20]
 800fd50:	a919      	add	r1, sp, #100	; 0x64
 800fd52:	4652      	mov	r2, sl
 800fd54:	4798      	blx	r3
 800fd56:	4605      	mov	r5, r0
 800fd58:	2d00      	cmp	r5, #0
 800fd5a:	d1c4      	bne.n	800fce6 <GUI_MEMDEV__WriteToActiveOpaque+0x1ba>
 800fd5c:	444e      	add	r6, r9
 800fd5e:	f10a 0a01 	add.w	sl, sl, #1
 800fd62:	f10b 0b01 	add.w	fp, fp, #1
 800fd66:	e759      	b.n	800fc1c <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 800fd68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd6a:	9300      	str	r3, [sp, #0]
 800fd6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fd70:	9201      	str	r2, [sp, #4]
 800fd72:	fb00 6003 	mla	r0, r0, r3, r6
 800fd76:	462a      	mov	r2, r5
 800fd78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd7a:	f7ff feb5 	bl	800fae8 <_Convert8>
 800fd7e:	e7c5      	b.n	800fd0c <GUI_MEMDEV__WriteToActiveOpaque+0x1e0>
 800fd80:	a818      	add	r0, sp, #96	; 0x60
 800fd82:	f7ff f88f 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800fd86:	e00e      	b.n	800fda6 <GUI_MEMDEV__WriteToActiveOpaque+0x27a>
 800fd88:	2301      	movs	r3, #1
 800fd8a:	9300      	str	r3, [sp, #0]
 800fd8c:	9301      	str	r3, [sp, #4]
 800fd8e:	9004      	str	r0, [sp, #16]
 800fd90:	9402      	str	r4, [sp, #8]
 800fd92:	f8cd 900c 	str.w	r9, [sp, #12]
 800fd96:	f8cd 8014 	str.w	r8, [sp, #20]
 800fd9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800fd9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fd9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fda0:	463a      	mov	r2, r7
 800fda2:	f7fc fb63 	bl	800c46c <LCD_DrawBitmap>
 800fda6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fda8:	e24d      	b.n	8010246 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800fdaa:	4630      	mov	r0, r6
 800fdac:	f7fa f88e 	bl	8009ecc <GUI_MEMDEV_GetDataPtr>
 800fdb0:	4606      	mov	r6, r0
 800fdb2:	2d00      	cmp	r5, #0
 800fdb4:	f000 808a 	beq.w	800fecc <GUI_MEMDEV__WriteToActiveOpaque+0x3a0>
 800fdb8:	4628      	mov	r0, r5
 800fdba:	f7ff f865 	bl	800ee88 <GUI_ALLOC_LockH>
 800fdbe:	2500      	movs	r5, #0
 800fdc0:	9018      	str	r0, [sp, #96]	; 0x60
 800fdc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fdc4:	429d      	cmp	r5, r3
 800fdc6:	da7d      	bge.n	800fec4 <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 800fdc8:	9818      	ldr	r0, [sp, #96]	; 0x60
 800fdca:	2300      	movs	r3, #0
 800fdcc:	9319      	str	r3, [sp, #100]	; 0x64
 800fdce:	6883      	ldr	r3, [r0, #8]
 800fdd0:	a919      	add	r1, sp, #100	; 0x64
 800fdd2:	695b      	ldr	r3, [r3, #20]
 800fdd4:	462a      	mov	r2, r5
 800fdd6:	4798      	blx	r3
 800fdd8:	42b8      	cmp	r0, r7
 800fdda:	4682      	mov	sl, r0
 800fddc:	d124      	bne.n	800fe28 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 800fdde:	46aa      	mov	sl, r5
 800fde0:	9818      	ldr	r0, [sp, #96]	; 0x60
 800fde2:	6883      	ldr	r3, [r0, #8]
 800fde4:	f10a 0b01 	add.w	fp, sl, #1
 800fde8:	695b      	ldr	r3, [r3, #20]
 800fdea:	a919      	add	r1, sp, #100	; 0x64
 800fdec:	465a      	mov	r2, fp
 800fdee:	4798      	blx	r3
 800fdf0:	42b8      	cmp	r0, r7
 800fdf2:	d101      	bne.n	800fdf8 <GUI_MEMDEV__WriteToActiveOpaque+0x2cc>
 800fdf4:	46da      	mov	sl, fp
 800fdf6:	e7f3      	b.n	800fde0 <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 800fdf8:	ebc5 0b0a 	rsb	fp, r5, sl
 800fdfc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fdfe:	9604      	str	r6, [sp, #16]
 800fe00:	2301      	movs	r3, #1
 800fe02:	f10b 0b01 	add.w	fp, fp, #1
 800fe06:	9300      	str	r3, [sp, #0]
 800fe08:	9301      	str	r3, [sp, #4]
 800fe0a:	4429      	add	r1, r5
 800fe0c:	9402      	str	r4, [sp, #8]
 800fe0e:	f8cd 900c 	str.w	r9, [sp, #12]
 800fe12:	f8cd 8014 	str.w	r8, [sp, #20]
 800fe16:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800fe18:	463a      	mov	r2, r7
 800fe1a:	465b      	mov	r3, fp
 800fe1c:	f7fc fb26 	bl	800c46c <LCD_DrawBitmap>
 800fe20:	fb09 660b 	mla	r6, r9, fp, r6
 800fe24:	4655      	mov	r5, sl
 800fe26:	e04b      	b.n	800fec0 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800fe28:	2c01      	cmp	r4, #1
 800fe2a:	d127      	bne.n	800fe7c <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800fe2c:	f1ba 0f00 	cmp.w	sl, #0
 800fe30:	d022      	beq.n	800fe78 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800fe32:	9819      	ldr	r0, [sp, #100]	; 0x64
 800fe34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fe36:	f8cd 900c 	str.w	r9, [sp, #12]
 800fe3a:	2208      	movs	r2, #8
 800fe3c:	fb90 f2f2 	sdiv	r2, r0, r2
 800fe40:	4432      	add	r2, r6
 800fe42:	9204      	str	r2, [sp, #16]
 800fe44:	f000 0207 	and.w	r2, r0, #7
 800fe48:	4408      	add	r0, r1
 800fe4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fe4c:	9206      	str	r2, [sp, #24]
 800fe4e:	2301      	movs	r3, #1
 800fe50:	4652      	mov	r2, sl
 800fe52:	9300      	str	r3, [sp, #0]
 800fe54:	9301      	str	r3, [sp, #4]
 800fe56:	9302      	str	r3, [sp, #8]
 800fe58:	4429      	add	r1, r5
 800fe5a:	f8cd 8014 	str.w	r8, [sp, #20]
 800fe5e:	f7fc fa29 	bl	800c2b4 <LCD__DrawBitmap_1bpp>
 800fe62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fe64:	9818      	ldr	r0, [sp, #96]	; 0x60
 800fe66:	4453      	add	r3, sl
 800fe68:	9319      	str	r3, [sp, #100]	; 0x64
 800fe6a:	6883      	ldr	r3, [r0, #8]
 800fe6c:	a919      	add	r1, sp, #100	; 0x64
 800fe6e:	695b      	ldr	r3, [r3, #20]
 800fe70:	462a      	mov	r2, r5
 800fe72:	4798      	blx	r3
 800fe74:	4682      	mov	sl, r0
 800fe76:	e7d9      	b.n	800fe2c <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 800fe78:	444e      	add	r6, r9
 800fe7a:	e021      	b.n	800fec0 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800fe7c:	f1ba 0f00 	cmp.w	sl, #0
 800fe80:	d0fa      	beq.n	800fe78 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800fe82:	9819      	ldr	r0, [sp, #100]	; 0x64
 800fe84:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fe86:	9402      	str	r4, [sp, #8]
 800fe88:	fb00 6201 	mla	r2, r0, r1, r6
 800fe8c:	9204      	str	r2, [sp, #16]
 800fe8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fe90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fe92:	f8cd 900c 	str.w	r9, [sp, #12]
 800fe96:	2301      	movs	r3, #1
 800fe98:	4410      	add	r0, r2
 800fe9a:	9300      	str	r3, [sp, #0]
 800fe9c:	4652      	mov	r2, sl
 800fe9e:	9301      	str	r3, [sp, #4]
 800fea0:	4429      	add	r1, r5
 800fea2:	f8cd 8014 	str.w	r8, [sp, #20]
 800fea6:	f7fc fae1 	bl	800c46c <LCD_DrawBitmap>
 800feaa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800feac:	9818      	ldr	r0, [sp, #96]	; 0x60
 800feae:	4453      	add	r3, sl
 800feb0:	9319      	str	r3, [sp, #100]	; 0x64
 800feb2:	6883      	ldr	r3, [r0, #8]
 800feb4:	a919      	add	r1, sp, #100	; 0x64
 800feb6:	695b      	ldr	r3, [r3, #20]
 800feb8:	462a      	mov	r2, r5
 800feba:	4798      	blx	r3
 800febc:	4682      	mov	sl, r0
 800febe:	e7dd      	b.n	800fe7c <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800fec0:	3501      	adds	r5, #1
 800fec2:	e77e      	b.n	800fdc2 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 800fec4:	a818      	add	r0, sp, #96	; 0x60
 800fec6:	f7fe ffed 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800feca:	e1be      	b.n	801024a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800fecc:	2301      	movs	r3, #1
 800fece:	9300      	str	r3, [sp, #0]
 800fed0:	9301      	str	r3, [sp, #4]
 800fed2:	9004      	str	r0, [sp, #16]
 800fed4:	9402      	str	r4, [sp, #8]
 800fed6:	f8cd 900c 	str.w	r9, [sp, #12]
 800feda:	f8cd 8014 	str.w	r8, [sp, #20]
 800fede:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800fee0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fee2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fee4:	463a      	mov	r2, r7
 800fee6:	e041      	b.n	800ff6c <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 800fee8:	4630      	mov	r0, r6
 800feea:	910a      	str	r1, [sp, #40]	; 0x28
 800feec:	f7fe ffcc 	bl	800ee88 <GUI_ALLOC_LockH>
 800fef0:	4682      	mov	sl, r0
 800fef2:	a81c      	add	r0, sp, #112	; 0x70
 800fef4:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800fef8:	f840 ad10 	str.w	sl, [r0, #-16]!
 800fefc:	f8da 4000 	ldr.w	r4, [sl]
 800ff00:	9210      	str	r2, [sp, #64]	; 0x40
 800ff02:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ff06:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 800ff0a:	4c9e      	ldr	r4, [pc, #632]	; (8010184 <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 800ff0c:	b213      	sxth	r3, r2
 800ff0e:	f8da 200c 	ldr.w	r2, [sl, #12]
 800ff12:	920b      	str	r2, [sp, #44]	; 0x2c
 800ff14:	9309      	str	r3, [sp, #36]	; 0x24
 800ff16:	f7fe ffc5 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800ff1a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800ff1e:	900e      	str	r0, [sp, #56]	; 0x38
 800ff20:	4899      	ldr	r0, [pc, #612]	; (8010188 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 800ff22:	6800      	ldr	r0, [r0, #0]
 800ff24:	7c40      	ldrb	r0, [r0, #17]
 800ff26:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 800ff2a:	6925      	ldr	r5, [r4, #16]
 800ff2c:	f8d5 8000 	ldr.w	r8, [r5]
 800ff30:	f7fc f852 	bl	800bfd8 <GUI_GetBitsPerPixelEx>
 800ff34:	2808      	cmp	r0, #8
 800ff36:	fa0f fb87 	sxth.w	fp, r7
 800ff3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ff3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ff3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff40:	d904      	bls.n	800ff4c <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 800ff42:	2810      	cmp	r0, #16
 800ff44:	bf8c      	ite	hi
 800ff46:	2404      	movhi	r4, #4
 800ff48:	2402      	movls	r4, #2
 800ff4a:	e000      	b.n	800ff4e <GUI_MEMDEV__WriteToActiveOpaque+0x422>
 800ff4c:	2401      	movs	r4, #1
 800ff4e:	45a9      	cmp	r9, r5
 800ff50:	d10f      	bne.n	800ff72 <GUI_MEMDEV__WriteToActiveOpaque+0x446>
 800ff52:	2001      	movs	r0, #1
 800ff54:	9203      	str	r2, [sp, #12]
 800ff56:	f10a 0218 	add.w	r2, sl, #24
 800ff5a:	9000      	str	r0, [sp, #0]
 800ff5c:	9001      	str	r0, [sp, #4]
 800ff5e:	9102      	str	r1, [sp, #8]
 800ff60:	9204      	str	r2, [sp, #16]
 800ff62:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ff64:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ff66:	2200      	movs	r2, #0
 800ff68:	9205      	str	r2, [sp, #20]
 800ff6a:	465a      	mov	r2, fp
 800ff6c:	f7fc fa7e 	bl	800c46c <LCD_DrawBitmap>
 800ff70:	e16b      	b.n	801024a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800ff72:	2920      	cmp	r1, #32
 800ff74:	f040 808e 	bne.w	8010094 <GUI_MEMDEV__WriteToActiveOpaque+0x568>
 800ff78:	fb0b f004 	mul.w	r0, fp, r4
 800ff7c:	f7ff f950 	bl	800f220 <GUI_ALLOC_AllocNoInit>
 800ff80:	900e      	str	r0, [sp, #56]	; 0x38
 800ff82:	2800      	cmp	r0, #0
 800ff84:	f000 8161 	beq.w	801024a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800ff88:	f7fe ff7e 	bl	800ee88 <GUI_ALLOC_LockH>
 800ff8c:	901a      	str	r0, [sp, #104]	; 0x68
 800ff8e:	4630      	mov	r0, r6
 800ff90:	f7fe ff7a 	bl	800ee88 <GUI_ALLOC_LockH>
 800ff94:	9018      	str	r0, [sp, #96]	; 0x60
 800ff96:	692b      	ldr	r3, [r5, #16]
 800ff98:	f100 0a18 	add.w	sl, r0, #24
 800ff9c:	ea4f 068b 	mov.w	r6, fp, lsl #2
 800ffa0:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d02f      	beq.n	8010008 <GUI_MEMDEV__WriteToActiveOpaque+0x4dc>
 800ffa8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800ffac:	2c02      	cmp	r4, #2
 800ffae:	d003      	beq.n	800ffb8 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800ffb0:	2c04      	cmp	r4, #4
 800ffb2:	d001      	beq.n	800ffb8 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800ffb4:	2c01      	cmp	r4, #1
 800ffb6:	d106      	bne.n	800ffc6 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800ffb8:	4650      	mov	r0, sl
 800ffba:	692f      	ldr	r7, [r5, #16]
 800ffbc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ffbe:	465a      	mov	r2, fp
 800ffc0:	4623      	mov	r3, r4
 800ffc2:	47b8      	blx	r7
 800ffc4:	44b2      	add	sl, r6
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	2200      	movs	r2, #0
 800ffca:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ffcc:	9300      	str	r3, [sp, #0]
 800ffce:	9301      	str	r3, [sp, #4]
 800ffd0:	9203      	str	r2, [sp, #12]
 800ffd2:	9104      	str	r1, [sp, #16]
 800ffd4:	9205      	str	r2, [sp, #20]
 800ffd6:	4641      	mov	r1, r8
 800ffd8:	465a      	mov	r2, fp
 800ffda:	f8cd 9008 	str.w	r9, [sp, #8]
 800ffde:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ffe0:	f7fc fa44 	bl	800c46c <LCD_DrawBitmap>
 800ffe4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ffe6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ffe8:	f108 0701 	add.w	r7, r8, #1
 800ffec:	fa02 f381 	sxtah	r3, r2, r1
 800fff0:	42bb      	cmp	r3, r7
 800fff2:	d107      	bne.n	8010004 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 800fff4:	a818      	add	r0, sp, #96	; 0x60
 800fff6:	f7fe ff55 	bl	800eea4 <GUI_ALLOC_UnlockH>
 800fffa:	a81a      	add	r0, sp, #104	; 0x68
 800fffc:	f7fe ff52 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8010000:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010002:	e120      	b.n	8010246 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 8010004:	46b8      	mov	r8, r7
 8010006:	e7d1      	b.n	800ffac <GUI_MEMDEV__WriteToActiveOpaque+0x480>
 8010008:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801000a:	2c02      	cmp	r4, #2
 801000c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801000e:	d00e      	beq.n	801002e <GUI_MEMDEV__WriteToActiveOpaque+0x502>
 8010010:	2c04      	cmp	r4, #4
 8010012:	d018      	beq.n	8010046 <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 8010014:	2c01      	cmp	r4, #1
 8010016:	d125      	bne.n	8010064 <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 8010018:	2300      	movs	r3, #0
 801001a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 801001e:	9309      	str	r3, [sp, #36]	; 0x24
 8010020:	47c0      	blx	r8
 8010022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010024:	54f8      	strb	r0, [r7, r3]
 8010026:	3301      	adds	r3, #1
 8010028:	459b      	cmp	fp, r3
 801002a:	d1f6      	bne.n	801001a <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 801002c:	e019      	b.n	8010062 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 801002e:	2300      	movs	r3, #0
 8010030:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8010034:	9309      	str	r3, [sp, #36]	; 0x24
 8010036:	47c0      	blx	r8
 8010038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801003a:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 801003e:	3301      	adds	r3, #1
 8010040:	459b      	cmp	fp, r3
 8010042:	d1f5      	bne.n	8010030 <GUI_MEMDEV__WriteToActiveOpaque+0x504>
 8010044:	e00d      	b.n	8010062 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 8010046:	465a      	mov	r2, fp
 8010048:	2300      	movs	r3, #0
 801004a:	f85a 0003 	ldr.w	r0, [sl, r3]
 801004e:	920b      	str	r2, [sp, #44]	; 0x2c
 8010050:	9309      	str	r3, [sp, #36]	; 0x24
 8010052:	47c0      	blx	r8
 8010054:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010058:	3a01      	subs	r2, #1
 801005a:	50f8      	str	r0, [r7, r3]
 801005c:	f103 0304 	add.w	r3, r3, #4
 8010060:	d1f3      	bne.n	801004a <GUI_MEMDEV__WriteToActiveOpaque+0x51e>
 8010062:	44b2      	add	sl, r6
 8010064:	2301      	movs	r3, #1
 8010066:	2200      	movs	r2, #0
 8010068:	991a      	ldr	r1, [sp, #104]	; 0x68
 801006a:	9300      	str	r3, [sp, #0]
 801006c:	9301      	str	r3, [sp, #4]
 801006e:	9203      	str	r2, [sp, #12]
 8010070:	9104      	str	r1, [sp, #16]
 8010072:	9205      	str	r2, [sp, #20]
 8010074:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010076:	f8cd 9008 	str.w	r9, [sp, #8]
 801007a:	4629      	mov	r1, r5
 801007c:	465a      	mov	r2, fp
 801007e:	f7fc f9f5 	bl	800c46c <LCD_DrawBitmap>
 8010082:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010084:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010086:	1c6f      	adds	r7, r5, #1
 8010088:	fa01 f380 	sxtah	r3, r1, r0
 801008c:	42bb      	cmp	r3, r7
 801008e:	d0b1      	beq.n	800fff4 <GUI_MEMDEV__WriteToActiveOpaque+0x4c8>
 8010090:	463d      	mov	r5, r7
 8010092:	e7ba      	b.n	801000a <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 8010094:	2910      	cmp	r1, #16
 8010096:	f040 80d8 	bne.w	801024a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 801009a:	fa0f fa87 	sxth.w	sl, r7
 801009e:	fb0a f004 	mul.w	r0, sl, r4
 80100a2:	f7ff f8bd 	bl	800f220 <GUI_ALLOC_AllocNoInit>
 80100a6:	9012      	str	r0, [sp, #72]	; 0x48
 80100a8:	2800      	cmp	r0, #0
 80100aa:	f000 80ce 	beq.w	801024a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 80100ae:	f7fe feeb 	bl	800ee88 <GUI_ALLOC_LockH>
 80100b2:	901a      	str	r0, [sp, #104]	; 0x68
 80100b4:	4630      	mov	r0, r6
 80100b6:	f7fe fee7 	bl	800ee88 <GUI_ALLOC_LockH>
 80100ba:	9018      	str	r0, [sp, #96]	; 0x60
 80100bc:	692b      	ldr	r3, [r5, #16]
 80100be:	f100 0618 	add.w	r6, r0, #24
 80100c2:	b113      	cbz	r3, 80100ca <GUI_MEMDEV__WriteToActiveOpaque+0x59e>
 80100c4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80100c8:	b92b      	cbnz	r3, 80100d6 <GUI_MEMDEV__WriteToActiveOpaque+0x5aa>
 80100ca:	00e2      	lsls	r2, r4, #3
 80100cc:	b23f      	sxth	r7, r7
 80100ce:	9211      	str	r2, [sp, #68]	; 0x44
 80100d0:	007f      	lsls	r7, r7, #1
 80100d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80100d4:	e088      	b.n	80101e8 <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 80100d6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80100da:	0080      	lsls	r0, r0, #2
 80100dc:	f7ff f8a0 	bl	800f220 <GUI_ALLOC_AllocNoInit>
 80100e0:	9011      	str	r0, [sp, #68]	; 0x44
 80100e2:	b118      	cbz	r0, 80100ec <GUI_MEMDEV__WriteToActiveOpaque+0x5c0>
 80100e4:	f7fe fed0 	bl	800ee88 <GUI_ALLOC_LockH>
 80100e8:	9019      	str	r0, [sp, #100]	; 0x64
 80100ea:	e001      	b.n	80100f0 <GUI_MEMDEV__WriteToActiveOpaque+0x5c4>
 80100ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80100ee:	9319      	str	r3, [sp, #100]	; 0x64
 80100f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	f000 80a0 	beq.w	8010238 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 80100f8:	b23f      	sxth	r7, r7
 80100fa:	007f      	lsls	r7, r7, #1
 80100fc:	970e      	str	r7, [sp, #56]	; 0x38
 80100fe:	00e7      	lsls	r7, r4, #3
 8010100:	9713      	str	r7, [sp, #76]	; 0x4c
 8010102:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010104:	970c      	str	r7, [sp, #48]	; 0x30
 8010106:	2c02      	cmp	r4, #2
 8010108:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801010c:	d004      	beq.n	8010118 <GUI_MEMDEV__WriteToActiveOpaque+0x5ec>
 801010e:	2c04      	cmp	r4, #4
 8010110:	d007      	beq.n	8010122 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8010112:	2c01      	cmp	r4, #1
 8010114:	d114      	bne.n	8010140 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 8010116:	e004      	b.n	8010122 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8010118:	4630      	mov	r0, r6
 801011a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801011c:	4652      	mov	r2, sl
 801011e:	4623      	mov	r3, r4
 8010120:	e003      	b.n	801012a <GUI_MEMDEV__WriteToActiveOpaque+0x5fe>
 8010122:	9919      	ldr	r1, [sp, #100]	; 0x64
 8010124:	4630      	mov	r0, r6
 8010126:	4652      	mov	r2, sl
 8010128:	2302      	movs	r3, #2
 801012a:	f8d9 7014 	ldr.w	r7, [r9, #20]
 801012e:	47b8      	blx	r7
 8010130:	692f      	ldr	r7, [r5, #16]
 8010132:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010134:	4641      	mov	r1, r8
 8010136:	4652      	mov	r2, sl
 8010138:	4623      	mov	r3, r4
 801013a:	47b8      	blx	r7
 801013c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801013e:	443e      	add	r6, r7
 8010140:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8010142:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010144:	9104      	str	r1, [sp, #16]
 8010146:	2301      	movs	r3, #1
 8010148:	2200      	movs	r2, #0
 801014a:	f107 0801 	add.w	r8, r7, #1
 801014e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8010150:	9300      	str	r3, [sp, #0]
 8010152:	9301      	str	r3, [sp, #4]
 8010154:	9702      	str	r7, [sp, #8]
 8010156:	9203      	str	r2, [sp, #12]
 8010158:	9205      	str	r2, [sp, #20]
 801015a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801015c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801015e:	465a      	mov	r2, fp
 8010160:	f7fc f984 	bl	800c46c <LCD_DrawBitmap>
 8010164:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8010166:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010168:	fa00 f387 	sxtah	r3, r0, r7
 801016c:	4543      	cmp	r3, r8
 801016e:	d002      	beq.n	8010176 <GUI_MEMDEV__WriteToActiveOpaque+0x64a>
 8010170:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8010174:	e7c7      	b.n	8010106 <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 8010176:	a819      	add	r0, sp, #100	; 0x64
 8010178:	f7fe fe94 	bl	800eea4 <GUI_ALLOC_UnlockH>
 801017c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801017e:	f7fe febd 	bl	800eefc <GUI_ALLOC_Free>
 8010182:	e059      	b.n	8010238 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 8010184:	20007738 	.word	0x20007738
 8010188:	20000084 	.word	0x20000084
 801018c:	2c04      	cmp	r4, #4
 801018e:	d041      	beq.n	8010214 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 8010190:	2c01      	cmp	r4, #1
 8010192:	d111      	bne.n	80101b8 <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 8010194:	464a      	mov	r2, r9
 8010196:	4631      	mov	r1, r6
 8010198:	f831 0b02 	ldrh.w	r0, [r1], #2
 801019c:	910a      	str	r1, [sp, #40]	; 0x28
 801019e:	920b      	str	r2, [sp, #44]	; 0x2c
 80101a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101a2:	4798      	blx	r3
 80101a4:	47c0      	blx	r8
 80101a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80101a8:	f802 0b01 	strb.w	r0, [r2], #1
 80101ac:	eb09 000a 	add.w	r0, r9, sl
 80101b0:	4282      	cmp	r2, r0
 80101b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80101b4:	d1f0      	bne.n	8010198 <GUI_MEMDEV__WriteToActiveOpaque+0x66c>
 80101b6:	443e      	add	r6, r7
 80101b8:	2301      	movs	r3, #1
 80101ba:	9811      	ldr	r0, [sp, #68]	; 0x44
 80101bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80101be:	9300      	str	r3, [sp, #0]
 80101c0:	2200      	movs	r2, #0
 80101c2:	9301      	str	r3, [sp, #4]
 80101c4:	9002      	str	r0, [sp, #8]
 80101c6:	9203      	str	r2, [sp, #12]
 80101c8:	9104      	str	r1, [sp, #16]
 80101ca:	9205      	str	r2, [sp, #20]
 80101cc:	4629      	mov	r1, r5
 80101ce:	465a      	mov	r2, fp
 80101d0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80101d2:	f7fc f94b 	bl	800c46c <LCD_DrawBitmap>
 80101d6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80101d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80101da:	f105 0901 	add.w	r9, r5, #1
 80101de:	fa02 f381 	sxtah	r3, r2, r1
 80101e2:	454b      	cmp	r3, r9
 80101e4:	d028      	beq.n	8010238 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 80101e6:	464d      	mov	r5, r9
 80101e8:	2c02      	cmp	r4, #2
 80101ea:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 80101ee:	d1cd      	bne.n	801018c <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 80101f0:	464b      	mov	r3, r9
 80101f2:	4631      	mov	r1, r6
 80101f4:	46d9      	mov	r9, fp
 80101f6:	f831 0b02 	ldrh.w	r0, [r1], #2
 80101fa:	910a      	str	r1, [sp, #40]	; 0x28
 80101fc:	9309      	str	r3, [sp, #36]	; 0x24
 80101fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010200:	4790      	blx	r2
 8010202:	47c0      	blx	r8
 8010204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010206:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010208:	f823 0b02 	strh.w	r0, [r3], #2
 801020c:	f1b9 0901 	subs.w	r9, r9, #1
 8010210:	d1f1      	bne.n	80101f6 <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 8010212:	e7d0      	b.n	80101b6 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 8010214:	464b      	mov	r3, r9
 8010216:	4631      	mov	r1, r6
 8010218:	46d9      	mov	r9, fp
 801021a:	f831 0b02 	ldrh.w	r0, [r1], #2
 801021e:	910a      	str	r1, [sp, #40]	; 0x28
 8010220:	9309      	str	r3, [sp, #36]	; 0x24
 8010222:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010224:	4790      	blx	r2
 8010226:	47c0      	blx	r8
 8010228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801022a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801022c:	f843 0b04 	str.w	r0, [r3], #4
 8010230:	f1b9 0901 	subs.w	r9, r9, #1
 8010234:	d1f1      	bne.n	801021a <GUI_MEMDEV__WriteToActiveOpaque+0x6ee>
 8010236:	e7be      	b.n	80101b6 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 8010238:	a818      	add	r0, sp, #96	; 0x60
 801023a:	f7fe fe33 	bl	800eea4 <GUI_ALLOC_UnlockH>
 801023e:	a81a      	add	r0, sp, #104	; 0x68
 8010240:	f7fe fe30 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8010244:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010246:	f7fe fe59 	bl	800eefc <GUI_ALLOC_Free>
 801024a:	b01d      	add	sp, #116	; 0x74
 801024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010250 <GUI_MEMDEV__WriteToActiveAlpha>:
 8010250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010254:	4d5f      	ldr	r5, [pc, #380]	; (80103d4 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 8010256:	4f60      	ldr	r7, [pc, #384]	; (80103d8 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 8010258:	682b      	ldr	r3, [r5, #0]
 801025a:	7c5b      	ldrb	r3, [r3, #17]
 801025c:	b091      	sub	sp, #68	; 0x44
 801025e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8010262:	900d      	str	r0, [sp, #52]	; 0x34
 8010264:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8010268:	460e      	mov	r6, r1
 801026a:	4614      	mov	r4, r2
 801026c:	f7fe fe0c 	bl	800ee88 <GUI_ALLOC_LockH>
 8010270:	4602      	mov	r2, r0
 8010272:	a810      	add	r0, sp, #64	; 0x40
 8010274:	6813      	ldr	r3, [r2, #0]
 8010276:	f840 2d08 	str.w	r2, [r0, #-8]!
 801027a:	691b      	ldr	r3, [r3, #16]
 801027c:	f8b2 a008 	ldrh.w	sl, [r2, #8]
 8010280:	685b      	ldr	r3, [r3, #4]
 8010282:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 8010286:	9309      	str	r3, [sp, #36]	; 0x24
 8010288:	f7fe fe0c 	bl	800eea4 <GUI_ALLOC_UnlockH>
 801028c:	682b      	ldr	r3, [r5, #0]
 801028e:	7c5b      	ldrb	r3, [r3, #17]
 8010290:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8010294:	68c3      	ldr	r3, [r0, #12]
 8010296:	2108      	movs	r1, #8
 8010298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801029a:	4798      	blx	r3
 801029c:	2817      	cmp	r0, #23
 801029e:	bf88      	it	hi
 80102a0:	2020      	movhi	r0, #32
 80102a2:	9008      	str	r0, [sp, #32]
 80102a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80102a8:	f8d8 2000 	ldr.w	r2, [r8]
 80102ac:	910a      	str	r1, [sp, #40]	; 0x28
 80102ae:	2000      	movs	r0, #0
 80102b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80102b2:	f7fc fe07 	bl	800cec4 <GUI__AllocAlphaBuffer>
 80102b6:	2800      	cmp	r0, #0
 80102b8:	f040 8089 	bne.w	80103ce <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 80102bc:	682a      	ldr	r2, [r5, #0]
 80102be:	fa0f f78a 	sxth.w	r7, sl
 80102c2:	19f5      	adds	r5, r6, r7
 80102c4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80102c8:	3d01      	subs	r5, #1
 80102ca:	1aed      	subs	r5, r5, r3
 80102cc:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 80102d0:	2d00      	cmp	r5, #0
 80102d2:	bfcc      	ite	gt
 80102d4:	ebc5 0507 	rsbgt	r5, r5, r7
 80102d8:	463d      	movle	r5, r7
 80102da:	42b3      	cmp	r3, r6
 80102dc:	bfc3      	ittte	gt
 80102de:	ebc6 0103 	rsbgt	r1, r6, r3
 80102e2:	ebc1 0505 	rsbgt	r5, r1, r5
 80102e6:	461e      	movgt	r6, r3
 80102e8:	2100      	movle	r1, #0
 80102ea:	2d00      	cmp	r5, #0
 80102ec:	dd6f      	ble.n	80103ce <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 80102ee:	fa0f f389 	sxth.w	r3, r9
 80102f2:	18e0      	adds	r0, r4, r3
 80102f4:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 80102f8:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80102fc:	3801      	subs	r0, #1
 80102fe:	ebcc 0000 	rsb	r0, ip, r0
 8010302:	2800      	cmp	r0, #0
 8010304:	bfc8      	it	gt
 8010306:	ebc0 0303 	rsbgt	r3, r0, r3
 801030a:	4294      	cmp	r4, r2
 801030c:	bfbd      	ittte	lt
 801030e:	ebc4 0b02 	rsblt	fp, r4, r2
 8010312:	ebcb 0303 	rsblt	r3, fp, r3
 8010316:	4614      	movlt	r4, r2
 8010318:	f04f 0b00 	movge.w	fp, #0
 801031c:	2b00      	cmp	r3, #0
 801031e:	dd56      	ble.n	80103ce <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010320:	fb07 1b0b 	mla	fp, r7, fp, r1
 8010324:	18e3      	adds	r3, r4, r3
 8010326:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 801032a:	930c      	str	r3, [sp, #48]	; 0x30
 801032c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801032e:	f7f9 fdcd 	bl	8009ecc <GUI_MEMDEV_GetDataPtr>
 8010332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010334:	9300      	str	r3, [sp, #0]
 8010336:	ab0f      	add	r3, sp, #60	; 0x3c
 8010338:	eb00 020b 	add.w	r2, r0, fp
 801033c:	9301      	str	r3, [sp, #4]
 801033e:	4630      	mov	r0, r6
 8010340:	4621      	mov	r1, r4
 8010342:	462b      	mov	r3, r5
 8010344:	f7fc fcd4 	bl	800ccf0 <GUI__DoAlphaBlending>
 8010348:	4681      	mov	r9, r0
 801034a:	2800      	cmp	r0, #0
 801034c:	d03f      	beq.n	80103ce <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 801034e:	4b23      	ldr	r3, [pc, #140]	; (80103dc <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 8010350:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010352:	4299      	cmp	r1, r3
 8010354:	d01e      	beq.n	8010394 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8010356:	4629      	mov	r1, r5
 8010358:	9a08      	ldr	r2, [sp, #32]
 801035a:	4643      	mov	r3, r8
 801035c:	f001 fc50 	bl	8011c00 <GUI__CompactPixelIndicesEx>
 8010360:	b9c0      	cbnz	r0, 8010394 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8010362:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8010366:	f1bc 0f00 	cmp.w	ip, #0
 801036a:	d006      	beq.n	801037a <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 801036c:	4648      	mov	r0, r9
 801036e:	4649      	mov	r1, r9
 8010370:	fa0f f28a 	sxth.w	r2, sl
 8010374:	2304      	movs	r3, #4
 8010376:	47e0      	blx	ip
 8010378:	e00c      	b.n	8010394 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 801037a:	464a      	mov	r2, r9
 801037c:	463b      	mov	r3, r7
 801037e:	6810      	ldr	r0, [r2, #0]
 8010380:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010382:	9206      	str	r2, [sp, #24]
 8010384:	9307      	str	r3, [sp, #28]
 8010386:	4788      	blx	r1
 8010388:	9b07      	ldr	r3, [sp, #28]
 801038a:	9a06      	ldr	r2, [sp, #24]
 801038c:	3b01      	subs	r3, #1
 801038e:	f842 0b04 	str.w	r0, [r2], #4
 8010392:	d1f4      	bne.n	801037e <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 8010394:	9a08      	ldr	r2, [sp, #32]
 8010396:	9202      	str	r2, [sp, #8]
 8010398:	2301      	movs	r3, #1
 801039a:	2200      	movs	r2, #0
 801039c:	f104 0c01 	add.w	ip, r4, #1
 80103a0:	9300      	str	r3, [sp, #0]
 80103a2:	9301      	str	r3, [sp, #4]
 80103a4:	9203      	str	r2, [sp, #12]
 80103a6:	9205      	str	r2, [sp, #20]
 80103a8:	f8cd 9010 	str.w	r9, [sp, #16]
 80103ac:	4630      	mov	r0, r6
 80103ae:	4621      	mov	r1, r4
 80103b0:	462a      	mov	r2, r5
 80103b2:	f8cd c01c 	str.w	ip, [sp, #28]
 80103b6:	f7fc f859 	bl	800c46c <LCD_DrawBitmap>
 80103ba:	2304      	movs	r3, #4
 80103bc:	fb1a bb03 	smlabb	fp, sl, r3, fp
 80103c0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80103c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103c6:	459c      	cmp	ip, r3
 80103c8:	d001      	beq.n	80103ce <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 80103ca:	4664      	mov	r4, ip
 80103cc:	e7ae      	b.n	801032c <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 80103ce:	b011      	add	sp, #68	; 0x44
 80103d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103d4:	20000084 	.word	0x20000084
 80103d8:	20007738 	.word	0x20007738
 80103dc:	0800f28f 	.word	0x0800f28f

080103e0 <GUI_MEMDEV_WriteAt>:
 80103e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80103e2:	460c      	mov	r4, r1
 80103e4:	4615      	mov	r5, r2
 80103e6:	4606      	mov	r6, r0
 80103e8:	b330      	cbz	r0, 8010438 <GUI_MEMDEV_WriteAt+0x58>
 80103ea:	f7fe fd4d 	bl	800ee88 <GUI_ALLOC_LockH>
 80103ee:	4a13      	ldr	r2, [pc, #76]	; (801043c <GUI_MEMDEV_WriteAt+0x5c>)
 80103f0:	8943      	ldrh	r3, [r0, #10]
 80103f2:	9001      	str	r0, [sp, #4]
 80103f4:	4294      	cmp	r4, r2
 80103f6:	8902      	ldrh	r2, [r0, #8]
 80103f8:	bf04      	itt	eq
 80103fa:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 80103fe:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 8010402:	f8ad 4008 	strh.w	r4, [sp, #8]
 8010406:	3a01      	subs	r2, #1
 8010408:	3b01      	subs	r3, #1
 801040a:	4422      	add	r2, r4
 801040c:	442b      	add	r3, r5
 801040e:	a801      	add	r0, sp, #4
 8010410:	f8ad 200c 	strh.w	r2, [sp, #12]
 8010414:	f8ad 500a 	strh.w	r5, [sp, #10]
 8010418:	f8ad 300e 	strh.w	r3, [sp, #14]
 801041c:	f7fe fd42 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8010420:	a802      	add	r0, sp, #8
 8010422:	f7f9 f9c5 	bl	80097b0 <WM__InitIVRSearch>
 8010426:	b138      	cbz	r0, 8010438 <GUI_MEMDEV_WriteAt+0x58>
 8010428:	4630      	mov	r0, r6
 801042a:	4621      	mov	r1, r4
 801042c:	462a      	mov	r2, r5
 801042e:	f7fa fb17 	bl	800aa60 <GUI_MEMDEV__WriteToActiveAt>
 8010432:	f7f9 f8fb 	bl	800962c <WM__GetNextIVR>
 8010436:	e7f6      	b.n	8010426 <GUI_MEMDEV_WriteAt+0x46>
 8010438:	b004      	add	sp, #16
 801043a:	bd70      	pop	{r4, r5, r6, pc}
 801043c:	fffff001 	.word	0xfffff001

08010440 <GUI_MEMDEV_Write>:
 8010440:	4901      	ldr	r1, [pc, #4]	; (8010448 <GUI_MEMDEV_Write+0x8>)
 8010442:	460a      	mov	r2, r1
 8010444:	f7ff bfcc 	b.w	80103e0 <GUI_MEMDEV_WriteAt>
 8010448:	fffff001 	.word	0xfffff001

0801044c <GUI_USAGE_BM_AddPixel>:
 801044c:	4603      	mov	r3, r0
 801044e:	b510      	push	{r4, lr}
 8010450:	f933 4b14 	ldrsh.w	r4, [r3], #20
 8010454:	1b09      	subs	r1, r1, r4
 8010456:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801045a:	6900      	ldr	r0, [r0, #16]
 801045c:	1b12      	subs	r2, r2, r4
 801045e:	fb00 3302 	mla	r3, r0, r2, r3
 8010462:	10c8      	asrs	r0, r1, #3
 8010464:	2280      	movs	r2, #128	; 0x80
 8010466:	f001 0107 	and.w	r1, r1, #7
 801046a:	fa42 f101 	asr.w	r1, r2, r1
 801046e:	5c1a      	ldrb	r2, [r3, r0]
 8010470:	4311      	orrs	r1, r2
 8010472:	5419      	strb	r1, [r3, r0]
 8010474:	bd10      	pop	{r4, pc}

08010476 <GUI_USAGE_BM_GetNextDirty>:
 8010476:	b570      	push	{r4, r5, r6, lr}
 8010478:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 801047c:	680b      	ldr	r3, [r1, #0]
 801047e:	8886      	ldrh	r6, [r0, #4]
 8010480:	42a2      	cmp	r2, r4
 8010482:	da41      	bge.n	8010508 <GUI_USAGE_BM_GetNextDirty+0x92>
 8010484:	b236      	sxth	r6, r6
 8010486:	42b3      	cmp	r3, r6
 8010488:	6904      	ldr	r4, [r0, #16]
 801048a:	da3d      	bge.n	8010508 <GUI_USAGE_BM_GetNextDirty+0x92>
 801048c:	3014      	adds	r0, #20
 801048e:	fb04 0202 	mla	r2, r4, r2, r0
 8010492:	10dd      	asrs	r5, r3, #3
 8010494:	1e70      	subs	r0, r6, #1
 8010496:	1954      	adds	r4, r2, r5
 8010498:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 801049c:	5d55      	ldrb	r5, [r2, r5]
 801049e:	f003 0207 	and.w	r2, r3, #7
 80104a2:	fa05 f202 	lsl.w	r2, r5, r2
 80104a6:	3401      	adds	r4, #1
 80104a8:	b2d2      	uxtb	r2, r2
 80104aa:	b93a      	cbnz	r2, 80104bc <GUI_USAGE_BM_GetNextDirty+0x46>
 80104ac:	b368      	cbz	r0, 801050a <GUI_USAGE_BM_GetNextDirty+0x94>
 80104ae:	3308      	adds	r3, #8
 80104b0:	f814 2b01 	ldrb.w	r2, [r4], #1
 80104b4:	3801      	subs	r0, #1
 80104b6:	f023 0307 	bic.w	r3, r3, #7
 80104ba:	e7f6      	b.n	80104aa <GUI_USAGE_BM_GetNextDirty+0x34>
 80104bc:	0615      	lsls	r5, r2, #24
 80104be:	d403      	bmi.n	80104c8 <GUI_USAGE_BM_GetNextDirty+0x52>
 80104c0:	0052      	lsls	r2, r2, #1
 80104c2:	b2d2      	uxtb	r2, r2
 80104c4:	3301      	adds	r3, #1
 80104c6:	e7f9      	b.n	80104bc <GUI_USAGE_BM_GetNextDirty+0x46>
 80104c8:	2aff      	cmp	r2, #255	; 0xff
 80104ca:	461d      	mov	r5, r3
 80104cc:	d005      	beq.n	80104da <GUI_USAGE_BM_GetNextDirty+0x64>
 80104ce:	0656      	lsls	r6, r2, #25
 80104d0:	d504      	bpl.n	80104dc <GUI_USAGE_BM_GetNextDirty+0x66>
 80104d2:	0052      	lsls	r2, r2, #1
 80104d4:	b2d2      	uxtb	r2, r2
 80104d6:	3301      	adds	r3, #1
 80104d8:	e7f9      	b.n	80104ce <GUI_USAGE_BM_GetNextDirty+0x58>
 80104da:	3307      	adds	r3, #7
 80104dc:	f003 0207 	and.w	r2, r3, #7
 80104e0:	2a07      	cmp	r2, #7
 80104e2:	d10d      	bne.n	8010500 <GUI_USAGE_BM_GetNextDirty+0x8a>
 80104e4:	3801      	subs	r0, #1
 80104e6:	d40b      	bmi.n	8010500 <GUI_USAGE_BM_GetNextDirty+0x8a>
 80104e8:	f814 2b01 	ldrb.w	r2, [r4], #1
 80104ec:	2aff      	cmp	r2, #255	; 0xff
 80104ee:	d101      	bne.n	80104f4 <GUI_USAGE_BM_GetNextDirty+0x7e>
 80104f0:	3308      	adds	r3, #8
 80104f2:	e7f7      	b.n	80104e4 <GUI_USAGE_BM_GetNextDirty+0x6e>
 80104f4:	0610      	lsls	r0, r2, #24
 80104f6:	d503      	bpl.n	8010500 <GUI_USAGE_BM_GetNextDirty+0x8a>
 80104f8:	0052      	lsls	r2, r2, #1
 80104fa:	b2d2      	uxtb	r2, r2
 80104fc:	3301      	adds	r3, #1
 80104fe:	e7f9      	b.n	80104f4 <GUI_USAGE_BM_GetNextDirty+0x7e>
 8010500:	1b58      	subs	r0, r3, r5
 8010502:	600d      	str	r5, [r1, #0]
 8010504:	3001      	adds	r0, #1
 8010506:	bd70      	pop	{r4, r5, r6, pc}
 8010508:	2000      	movs	r0, #0
 801050a:	bd70      	pop	{r4, r5, r6, pc}

0801050c <_GUI_USAGE_BM_Delete>:
 801050c:	f7fe bcf6 	b.w	800eefc <GUI_ALLOC_Free>

08010510 <GUI_USAGE_BM_Clear>:
 8010510:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8010514:	6902      	ldr	r2, [r0, #16]
 8010516:	2100      	movs	r1, #0
 8010518:	3014      	adds	r0, #20
 801051a:	435a      	muls	r2, r3
 801051c:	f001 be6c 	b.w	80121f8 <memset>

08010520 <GUI_USAGE_BM_AddHLine>:
 8010520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010522:	f9b0 4000 	ldrsh.w	r4, [r0]
 8010526:	1b09      	subs	r1, r1, r4
 8010528:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801052c:	42a1      	cmp	r1, r4
 801052e:	da2f      	bge.n	8010590 <GUI_USAGE_BM_AddHLine+0x70>
 8010530:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8010534:	440b      	add	r3, r1
 8010536:	f100 0414 	add.w	r4, r0, #20
 801053a:	3b01      	subs	r3, #1
 801053c:	6900      	ldr	r0, [r0, #16]
 801053e:	1b52      	subs	r2, r2, r5
 8010540:	43de      	mvns	r6, r3
 8010542:	fb00 4202 	mla	r2, r0, r2, r4
 8010546:	f001 0707 	and.w	r7, r1, #7
 801054a:	10cc      	asrs	r4, r1, #3
 801054c:	f006 0607 	and.w	r6, r6, #7
 8010550:	21ff      	movs	r1, #255	; 0xff
 8010552:	fa41 f707 	asr.w	r7, r1, r7
 8010556:	fa01 f606 	lsl.w	r6, r1, r6
 801055a:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 801055e:	eb02 0504 	add.w	r5, r2, r4
 8010562:	b2ff      	uxtb	r7, r7
 8010564:	b2f6      	uxtb	r6, r6
 8010566:	5d10      	ldrb	r0, [r2, r4]
 8010568:	d103      	bne.n	8010572 <GUI_USAGE_BM_AddHLine+0x52>
 801056a:	403e      	ands	r6, r7
 801056c:	4330      	orrs	r0, r6
 801056e:	5510      	strb	r0, [r2, r4]
 8010570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010572:	4338      	orrs	r0, r7
 8010574:	5510      	strb	r0, [r2, r4]
 8010576:	1e5c      	subs	r4, r3, #1
 8010578:	2c00      	cmp	r4, #0
 801057a:	f105 0501 	add.w	r5, r5, #1
 801057e:	dd04      	ble.n	801058a <GUI_USAGE_BM_AddHLine+0x6a>
 8010580:	4628      	mov	r0, r5
 8010582:	4622      	mov	r2, r4
 8010584:	f001 fe38 	bl	80121f8 <memset>
 8010588:	4425      	add	r5, r4
 801058a:	782b      	ldrb	r3, [r5, #0]
 801058c:	431e      	orrs	r6, r3
 801058e:	702e      	strb	r6, [r5, #0]
 8010590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010594 <GUI_USAGE_BM_Create>:
 8010594:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 8010598:	f102 060f 	add.w	r6, r2, #15
 801059c:	1136      	asrs	r6, r6, #4
 801059e:	0076      	lsls	r6, r6, #1
 80105a0:	4682      	mov	sl, r0
 80105a2:	fb06 f003 	mul.w	r0, r6, r3
 80105a6:	3014      	adds	r0, #20
 80105a8:	4689      	mov	r9, r1
 80105aa:	4690      	mov	r8, r2
 80105ac:	461f      	mov	r7, r3
 80105ae:	f7fe fe43 	bl	800f238 <GUI_ALLOC_AllocZero>
 80105b2:	4683      	mov	fp, r0
 80105b4:	b198      	cbz	r0, 80105de <GUI_USAGE_BM_Create+0x4a>
 80105b6:	f7fe fc67 	bl	800ee88 <GUI_ALLOC_LockH>
 80105ba:	4604      	mov	r4, r0
 80105bc:	4b0a      	ldr	r3, [pc, #40]	; (80105e8 <GUI_USAGE_BM_Create+0x54>)
 80105be:	60a3      	str	r3, [r4, #8]
 80105c0:	a802      	add	r0, sp, #8
 80105c2:	2301      	movs	r3, #1
 80105c4:	f840 4d04 	str.w	r4, [r0, #-4]!
 80105c8:	f8a4 8004 	strh.w	r8, [r4, #4]
 80105cc:	f8a4 a000 	strh.w	sl, [r4]
 80105d0:	f8a4 9002 	strh.w	r9, [r4, #2]
 80105d4:	80e7      	strh	r7, [r4, #6]
 80105d6:	81a3      	strh	r3, [r4, #12]
 80105d8:	6126      	str	r6, [r4, #16]
 80105da:	f7fe fc63 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80105de:	4658      	mov	r0, fp
 80105e0:	b002      	add	sp, #8
 80105e2:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 80105e6:	bf00      	nop
 80105e8:	080142dc 	.word	0x080142dc

080105ec <GUI_USAGE_DecUseCnt>:
 80105ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105ee:	4605      	mov	r5, r0
 80105f0:	f7fe fc4a 	bl	800ee88 <GUI_ALLOC_LockH>
 80105f4:	4602      	mov	r2, r0
 80105f6:	a802      	add	r0, sp, #8
 80105f8:	8994      	ldrh	r4, [r2, #12]
 80105fa:	f840 2d04 	str.w	r2, [r0, #-4]!
 80105fe:	3c01      	subs	r4, #1
 8010600:	b2a4      	uxth	r4, r4
 8010602:	8194      	strh	r4, [r2, #12]
 8010604:	f7fe fc4e 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8010608:	b914      	cbnz	r4, 8010610 <GUI_USAGE_DecUseCnt+0x24>
 801060a:	4628      	mov	r0, r5
 801060c:	f7fe fc76 	bl	800eefc <GUI_ALLOC_Free>
 8010610:	b003      	add	sp, #12
 8010612:	bd30      	pop	{r4, r5, pc}

08010614 <GUI_USAGE_AddRect>:
 8010614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010618:	4605      	mov	r5, r0
 801061a:	4688      	mov	r8, r1
 801061c:	4617      	mov	r7, r2
 801061e:	4699      	mov	r9, r3
 8010620:	68a8      	ldr	r0, [r5, #8]
 8010622:	464b      	mov	r3, r9
 8010624:	6846      	ldr	r6, [r0, #4]
 8010626:	4641      	mov	r1, r8
 8010628:	4628      	mov	r0, r5
 801062a:	1c54      	adds	r4, r2, #1
 801062c:	47b0      	blx	r6
 801062e:	9b08      	ldr	r3, [sp, #32]
 8010630:	443b      	add	r3, r7
 8010632:	42a3      	cmp	r3, r4
 8010634:	d001      	beq.n	801063a <GUI_USAGE_AddRect+0x26>
 8010636:	4622      	mov	r2, r4
 8010638:	e7f2      	b.n	8010620 <GUI_USAGE_AddRect+0xc>
 801063a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08010640 <GUI_MEMDEV_ReduceYSize>:
 8010640:	b513      	push	{r0, r1, r4, lr}
 8010642:	460c      	mov	r4, r1
 8010644:	b918      	cbnz	r0, 801064e <GUI_MEMDEV_ReduceYSize+0xe>
 8010646:	4b08      	ldr	r3, [pc, #32]	; (8010668 <GUI_MEMDEV_ReduceYSize+0x28>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801064c:	b150      	cbz	r0, 8010664 <GUI_MEMDEV_ReduceYSize+0x24>
 801064e:	f7fe fc1b 	bl	800ee88 <GUI_ALLOC_LockH>
 8010652:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010656:	9001      	str	r0, [sp, #4]
 8010658:	429c      	cmp	r4, r3
 801065a:	bfb8      	it	lt
 801065c:	8144      	strhlt	r4, [r0, #10]
 801065e:	a801      	add	r0, sp, #4
 8010660:	f7fe fc20 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8010664:	b002      	add	sp, #8
 8010666:	bd10      	pop	{r4, pc}
 8010668:	20000084 	.word	0x20000084

0801066c <GUI_MEMDEV_Clear>:
 801066c:	b513      	push	{r0, r1, r4, lr}
 801066e:	b918      	cbnz	r0, 8010678 <GUI_MEMDEV_Clear+0xc>
 8010670:	4b0d      	ldr	r3, [pc, #52]	; (80106a8 <GUI_MEMDEV_Clear+0x3c>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010676:	b1a8      	cbz	r0, 80106a4 <GUI_MEMDEV_Clear+0x38>
 8010678:	f7fe fc06 	bl	800ee88 <GUI_ALLOC_LockH>
 801067c:	ab02      	add	r3, sp, #8
 801067e:	6944      	ldr	r4, [r0, #20]
 8010680:	f843 0d08 	str.w	r0, [r3, #-8]!
 8010684:	4668      	mov	r0, sp
 8010686:	f7fe fc0d 	bl	800eea4 <GUI_ALLOC_UnlockH>
 801068a:	b15c      	cbz	r4, 80106a4 <GUI_MEMDEV_Clear+0x38>
 801068c:	4620      	mov	r0, r4
 801068e:	f7fe fbfb 	bl	800ee88 <GUI_ALLOC_LockH>
 8010692:	ac02      	add	r4, sp, #8
 8010694:	6883      	ldr	r3, [r0, #8]
 8010696:	f844 0d04 	str.w	r0, [r4, #-4]!
 801069a:	689b      	ldr	r3, [r3, #8]
 801069c:	4798      	blx	r3
 801069e:	4620      	mov	r0, r4
 80106a0:	f7fe fc00 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80106a4:	b002      	add	sp, #8
 80106a6:	bd10      	pop	{r4, pc}
 80106a8:	20000084 	.word	0x20000084

080106ac <_GetDevData>:
 80106ac:	4802      	ldr	r0, [pc, #8]	; (80106b8 <_GetDevData+0xc>)
 80106ae:	2901      	cmp	r1, #1
 80106b0:	bf18      	it	ne
 80106b2:	2000      	movne	r0, #0
 80106b4:	4770      	bx	lr
 80106b6:	bf00      	nop
 80106b8:	08014334 	.word	0x08014334

080106bc <_GetDevFunc>:
 80106bc:	4802      	ldr	r0, [pc, #8]	; (80106c8 <_GetDevFunc+0xc>)
 80106be:	2916      	cmp	r1, #22
 80106c0:	bf18      	it	ne
 80106c2:	2000      	movne	r0, #0
 80106c4:	4770      	bx	lr
 80106c6:	bf00      	nop
 80106c8:	0800fb2d 	.word	0x0800fb2d

080106cc <_SetOrg>:
 80106cc:	6800      	ldr	r0, [r0, #0]
 80106ce:	b508      	push	{r3, lr}
 80106d0:	b110      	cbz	r0, 80106d8 <_SetOrg+0xc>
 80106d2:	68c3      	ldr	r3, [r0, #12]
 80106d4:	6a1b      	ldr	r3, [r3, #32]
 80106d6:	4798      	blx	r3
 80106d8:	bd08      	pop	{r3, pc}

080106da <_GetRect>:
 80106da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106dc:	6880      	ldr	r0, [r0, #8]
 80106de:	460c      	mov	r4, r1
 80106e0:	f7fe fbd2 	bl	800ee88 <GUI_ALLOC_LockH>
 80106e4:	4603      	mov	r3, r0
 80106e6:	a802      	add	r0, sp, #8
 80106e8:	8899      	ldrh	r1, [r3, #4]
 80106ea:	88da      	ldrh	r2, [r3, #6]
 80106ec:	891d      	ldrh	r5, [r3, #8]
 80106ee:	f840 3d04 	str.w	r3, [r0, #-4]!
 80106f2:	895b      	ldrh	r3, [r3, #10]
 80106f4:	8021      	strh	r1, [r4, #0]
 80106f6:	8062      	strh	r2, [r4, #2]
 80106f8:	4429      	add	r1, r5
 80106fa:	441a      	add	r2, r3
 80106fc:	3901      	subs	r1, #1
 80106fe:	3a01      	subs	r2, #1
 8010700:	80a1      	strh	r1, [r4, #4]
 8010702:	80e2      	strh	r2, [r4, #6]
 8010704:	f7fe fbce 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8010708:	b003      	add	sp, #12
 801070a:	bd30      	pop	{r4, r5, pc}

0801070c <_XY2PTR>:
 801070c:	4b0e      	ldr	r3, [pc, #56]	; (8010748 <_XY2PTR+0x3c>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010712:	4605      	mov	r5, r0
 8010714:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010716:	460e      	mov	r6, r1
 8010718:	f7fe fbb6 	bl	800ee88 <GUI_ALLOC_LockH>
 801071c:	4603      	mov	r3, r0
 801071e:	a802      	add	r0, sp, #8
 8010720:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8010724:	f840 3d04 	str.w	r3, [r0, #-4]!
 8010728:	f103 0118 	add.w	r1, r3, #24
 801072c:	1b36      	subs	r6, r6, r4
 801072e:	68dc      	ldr	r4, [r3, #12]
 8010730:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010734:	fb04 1406 	mla	r4, r4, r6, r1
 8010738:	1aed      	subs	r5, r5, r3
 801073a:	f7fe fbb3 	bl	800eea4 <GUI_ALLOC_UnlockH>
 801073e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8010742:	4620      	mov	r0, r4
 8010744:	b002      	add	sp, #8
 8010746:	bd70      	pop	{r4, r5, r6, pc}
 8010748:	20000084 	.word	0x20000084

0801074c <_GetPixelIndex>:
 801074c:	b508      	push	{r3, lr}
 801074e:	4608      	mov	r0, r1
 8010750:	4611      	mov	r1, r2
 8010752:	f7ff ffdb 	bl	801070c <_XY2PTR>
 8010756:	8800      	ldrh	r0, [r0, #0]
 8010758:	bd08      	pop	{r3, pc}
	...

0801075c <_XorPixel>:
 801075c:	4b14      	ldr	r3, [pc, #80]	; (80107b0 <_XorPixel+0x54>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010762:	4607      	mov	r7, r0
 8010764:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010766:	4615      	mov	r5, r2
 8010768:	460e      	mov	r6, r1
 801076a:	f7fe fb8d 	bl	800ee88 <GUI_ALLOC_LockH>
 801076e:	4629      	mov	r1, r5
 8010770:	9000      	str	r0, [sp, #0]
 8010772:	4630      	mov	r0, r6
 8010774:	f7ff ffca 	bl	801070c <_XY2PTR>
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	4604      	mov	r4, r0
 801077c:	689b      	ldr	r3, [r3, #8]
 801077e:	4798      	blx	r3
 8010780:	8823      	ldrh	r3, [r4, #0]
 8010782:	4058      	eors	r0, r3
 8010784:	9b00      	ldr	r3, [sp, #0]
 8010786:	8020      	strh	r0, [r4, #0]
 8010788:	6958      	ldr	r0, [r3, #20]
 801078a:	b160      	cbz	r0, 80107a6 <_XorPixel+0x4a>
 801078c:	f7fe fb7c 	bl	800ee88 <GUI_ALLOC_LockH>
 8010790:	ac02      	add	r4, sp, #8
 8010792:	6883      	ldr	r3, [r0, #8]
 8010794:	f844 0d04 	str.w	r0, [r4, #-4]!
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	4631      	mov	r1, r6
 801079c:	462a      	mov	r2, r5
 801079e:	4798      	blx	r3
 80107a0:	4620      	mov	r0, r4
 80107a2:	f7fe fb7f 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80107a6:	4668      	mov	r0, sp
 80107a8:	f7fe fb7c 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80107ac:	b003      	add	sp, #12
 80107ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107b0:	20000084 	.word	0x20000084

080107b4 <_SetPixelIndex>:
 80107b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80107b6:	461c      	mov	r4, r3
 80107b8:	4b10      	ldr	r3, [pc, #64]	; (80107fc <_SetPixelIndex+0x48>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80107be:	460e      	mov	r6, r1
 80107c0:	4615      	mov	r5, r2
 80107c2:	f7fe fb61 	bl	800ee88 <GUI_ALLOC_LockH>
 80107c6:	4629      	mov	r1, r5
 80107c8:	9000      	str	r0, [sp, #0]
 80107ca:	4630      	mov	r0, r6
 80107cc:	f7ff ff9e 	bl	801070c <_XY2PTR>
 80107d0:	9b00      	ldr	r3, [sp, #0]
 80107d2:	8004      	strh	r4, [r0, #0]
 80107d4:	6958      	ldr	r0, [r3, #20]
 80107d6:	b160      	cbz	r0, 80107f2 <_SetPixelIndex+0x3e>
 80107d8:	f7fe fb56 	bl	800ee88 <GUI_ALLOC_LockH>
 80107dc:	ac02      	add	r4, sp, #8
 80107de:	6883      	ldr	r3, [r0, #8]
 80107e0:	f844 0d04 	str.w	r0, [r4, #-4]!
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	4631      	mov	r1, r6
 80107e8:	462a      	mov	r2, r5
 80107ea:	4798      	blx	r3
 80107ec:	4620      	mov	r0, r4
 80107ee:	f7fe fb59 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80107f2:	4668      	mov	r0, sp
 80107f4:	f7fe fb56 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80107f8:	b002      	add	sp, #8
 80107fa:	bd70      	pop	{r4, r5, r6, pc}
 80107fc:	20000084 	.word	0x20000084

08010800 <_DrawVLine>:
 8010800:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010804:	4d2c      	ldr	r5, [pc, #176]	; (80108b8 <_DrawVLine+0xb8>)
 8010806:	461e      	mov	r6, r3
 8010808:	682b      	ldr	r3, [r5, #0]
 801080a:	4681      	mov	r9, r0
 801080c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801080e:	460f      	mov	r7, r1
 8010810:	4614      	mov	r4, r2
 8010812:	f7fe fb39 	bl	800ee88 <GUI_ALLOC_LockH>
 8010816:	9000      	str	r0, [sp, #0]
 8010818:	6940      	ldr	r0, [r0, #20]
 801081a:	46aa      	mov	sl, r5
 801081c:	b108      	cbz	r0, 8010822 <_DrawVLine+0x22>
 801081e:	f7fe fb33 	bl	800ee88 <GUI_ALLOC_LockH>
 8010822:	9001      	str	r0, [sp, #4]
 8010824:	4621      	mov	r1, r4
 8010826:	4638      	mov	r0, r7
 8010828:	f7ff ff70 	bl	801070c <_XY2PTR>
 801082c:	9b00      	ldr	r3, [sp, #0]
 801082e:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8010832:	f8da 3000 	ldr.w	r3, [sl]
 8010836:	7c1a      	ldrb	r2, [r3, #16]
 8010838:	07d2      	lsls	r2, r2, #31
 801083a:	4605      	mov	r5, r0
 801083c:	d51f      	bpl.n	801087e <_DrawVLine+0x7e>
 801083e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010842:	689b      	ldr	r3, [r3, #8]
 8010844:	4798      	blx	r3
 8010846:	fa1f f880 	uxth.w	r8, r0
 801084a:	9801      	ldr	r0, [sp, #4]
 801084c:	b120      	cbz	r0, 8010858 <_DrawVLine+0x58>
 801084e:	6883      	ldr	r3, [r0, #8]
 8010850:	4639      	mov	r1, r7
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	4622      	mov	r2, r4
 8010856:	4798      	blx	r3
 8010858:	882b      	ldrh	r3, [r5, #0]
 801085a:	ea88 0303 	eor.w	r3, r8, r3
 801085e:	802b      	strh	r3, [r5, #0]
 8010860:	9b00      	ldr	r3, [sp, #0]
 8010862:	3401      	adds	r4, #1
 8010864:	68db      	ldr	r3, [r3, #12]
 8010866:	42b4      	cmp	r4, r6
 8010868:	441d      	add	r5, r3
 801086a:	ddee      	ble.n	801084a <_DrawVLine+0x4a>
 801086c:	4668      	mov	r0, sp
 801086e:	f7fe fb19 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8010872:	9b01      	ldr	r3, [sp, #4]
 8010874:	b1eb      	cbz	r3, 80108b2 <_DrawVLine+0xb2>
 8010876:	a801      	add	r0, sp, #4
 8010878:	f7fe fb14 	bl	800eea4 <GUI_ALLOC_UnlockH>
 801087c:	e019      	b.n	80108b2 <_DrawVLine+0xb2>
 801087e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010880:	f8d3 9000 	ldr.w	r9, [r3]
 8010884:	9b01      	ldr	r3, [sp, #4]
 8010886:	b163      	cbz	r3, 80108a2 <_DrawVLine+0xa2>
 8010888:	9801      	ldr	r0, [sp, #4]
 801088a:	6883      	ldr	r3, [r0, #8]
 801088c:	4622      	mov	r2, r4
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	4639      	mov	r1, r7
 8010892:	3401      	adds	r4, #1
 8010894:	4798      	blx	r3
 8010896:	42b4      	cmp	r4, r6
 8010898:	f8a5 9000 	strh.w	r9, [r5]
 801089c:	4445      	add	r5, r8
 801089e:	ddf3      	ble.n	8010888 <_DrawVLine+0x88>
 80108a0:	e7e4      	b.n	801086c <_DrawVLine+0x6c>
 80108a2:	1b34      	subs	r4, r6, r4
 80108a4:	3401      	adds	r4, #1
 80108a6:	3c01      	subs	r4, #1
 80108a8:	f8a5 9000 	strh.w	r9, [r5]
 80108ac:	4445      	add	r5, r8
 80108ae:	d1fa      	bne.n	80108a6 <_DrawVLine+0xa6>
 80108b0:	e7dc      	b.n	801086c <_DrawVLine+0x6c>
 80108b2:	b002      	add	sp, #8
 80108b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108b8:	20000084 	.word	0x20000084

080108bc <_FillRect>:
 80108bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c0:	4f2a      	ldr	r7, [pc, #168]	; (801096c <_FillRect+0xb0>)
 80108c2:	4614      	mov	r4, r2
 80108c4:	683a      	ldr	r2, [r7, #0]
 80108c6:	4698      	mov	r8, r3
 80108c8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80108ca:	b087      	sub	sp, #28
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	9302      	str	r3, [sp, #8]
 80108d0:	4682      	mov	sl, r0
 80108d2:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80108d4:	460e      	mov	r6, r1
 80108d6:	f7fe fad7 	bl	800ee88 <GUI_ALLOC_LockH>
 80108da:	4621      	mov	r1, r4
 80108dc:	9004      	str	r0, [sp, #16]
 80108de:	4630      	mov	r0, r6
 80108e0:	f7ff ff14 	bl	801070c <_XY2PTR>
 80108e4:	9a04      	ldr	r2, [sp, #16]
 80108e6:	4605      	mov	r5, r0
 80108e8:	6950      	ldr	r0, [r2, #20]
 80108ea:	68d3      	ldr	r3, [r2, #12]
 80108ec:	9303      	str	r3, [sp, #12]
 80108ee:	ebc6 0908 	rsb	r9, r6, r8
 80108f2:	f109 0801 	add.w	r8, r9, #1
 80108f6:	46bb      	mov	fp, r7
 80108f8:	b180      	cbz	r0, 801091c <_FillRect+0x60>
 80108fa:	f7fe fac5 	bl	800ee88 <GUI_ALLOC_LockH>
 80108fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010900:	af06      	add	r7, sp, #24
 8010902:	1b13      	subs	r3, r2, r4
 8010904:	f847 0d04 	str.w	r0, [r7, #-4]!
 8010908:	3301      	adds	r3, #1
 801090a:	9300      	str	r3, [sp, #0]
 801090c:	4631      	mov	r1, r6
 801090e:	4622      	mov	r2, r4
 8010910:	4643      	mov	r3, r8
 8010912:	f7ff fe7f 	bl	8010614 <GUI_USAGE_AddRect>
 8010916:	4638      	mov	r0, r7
 8010918:	f7fe fac4 	bl	800eea4 <GUI_ALLOC_UnlockH>
 801091c:	ea4f 0649 	mov.w	r6, r9, lsl #1
 8010920:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010922:	429c      	cmp	r4, r3
 8010924:	dc1c      	bgt.n	8010960 <_FillRect+0xa4>
 8010926:	f8db 3000 	ldr.w	r3, [fp]
 801092a:	7c1b      	ldrb	r3, [r3, #16]
 801092c:	07db      	lsls	r3, r3, #31
 801092e:	d50d      	bpl.n	801094c <_FillRect+0x90>
 8010930:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010934:	689b      	ldr	r3, [r3, #8]
 8010936:	4798      	blx	r3
 8010938:	19aa      	adds	r2, r5, r6
 801093a:	b280      	uxth	r0, r0
 801093c:	1eab      	subs	r3, r5, #2
 801093e:	8859      	ldrh	r1, [r3, #2]
 8010940:	4041      	eors	r1, r0
 8010942:	f823 1f02 	strh.w	r1, [r3, #2]!
 8010946:	4293      	cmp	r3, r2
 8010948:	d1f9      	bne.n	801093e <_FillRect+0x82>
 801094a:	e005      	b.n	8010958 <_FillRect+0x9c>
 801094c:	9b02      	ldr	r3, [sp, #8]
 801094e:	4628      	mov	r0, r5
 8010950:	b299      	uxth	r1, r3
 8010952:	4642      	mov	r2, r8
 8010954:	f7fb ffc6 	bl	800c8e4 <GUI__memset16>
 8010958:	9a03      	ldr	r2, [sp, #12]
 801095a:	3401      	adds	r4, #1
 801095c:	4415      	add	r5, r2
 801095e:	e7df      	b.n	8010920 <_FillRect+0x64>
 8010960:	a804      	add	r0, sp, #16
 8010962:	f7fe fa9f 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8010966:	b007      	add	sp, #28
 8010968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801096c:	20000084 	.word	0x20000084

08010970 <_DrawHLine>:
 8010970:	b507      	push	{r0, r1, r2, lr}
 8010972:	9200      	str	r2, [sp, #0]
 8010974:	f7ff ffa2 	bl	80108bc <_FillRect>
 8010978:	b003      	add	sp, #12
 801097a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010980 <_DrawBitmap>:
 8010980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010984:	4c8b      	ldr	r4, [pc, #556]	; (8010bb4 <_DrawBitmap+0x234>)
 8010986:	b093      	sub	sp, #76	; 0x4c
 8010988:	469b      	mov	fp, r3
 801098a:	6823      	ldr	r3, [r4, #0]
 801098c:	900d      	str	r0, [sp, #52]	; 0x34
 801098e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010990:	9207      	str	r2, [sp, #28]
 8010992:	460d      	mov	r5, r1
 8010994:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 8010998:	f7fe fa76 	bl	800ee88 <GUI_ALLOC_LockH>
 801099c:	9010      	str	r0, [sp, #64]	; 0x40
 801099e:	6940      	ldr	r0, [r0, #20]
 80109a0:	b108      	cbz	r0, 80109a6 <_DrawBitmap+0x26>
 80109a2:	f7fe fa71 	bl	800ee88 <GUI_ALLOC_LockH>
 80109a6:	9011      	str	r0, [sp, #68]	; 0x44
 80109a8:	a812      	add	r0, sp, #72	; 0x48
 80109aa:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 80109ae:	68db      	ldr	r3, [r3, #12]
 80109b0:	9308      	str	r3, [sp, #32]
 80109b2:	f7fe fa77 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80109b6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80109b8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80109ba:	442e      	add	r6, r5
 80109bc:	9604      	str	r6, [sp, #16]
 80109be:	b150      	cbz	r0, 80109d6 <_DrawBitmap+0x56>
 80109c0:	6823      	ldr	r3, [r4, #0]
 80109c2:	7c1b      	ldrb	r3, [r3, #16]
 80109c4:	0799      	lsls	r1, r3, #30
 80109c6:	d106      	bne.n	80109d6 <_DrawBitmap+0x56>
 80109c8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80109ca:	9700      	str	r7, [sp, #0]
 80109cc:	4631      	mov	r1, r6
 80109ce:	9a07      	ldr	r2, [sp, #28]
 80109d0:	465b      	mov	r3, fp
 80109d2:	f7ff fe1f 	bl	8010614 <GUI_USAGE_AddRect>
 80109d6:	9804      	ldr	r0, [sp, #16]
 80109d8:	9907      	ldr	r1, [sp, #28]
 80109da:	f7ff fe97 	bl	801070c <_XY2PTR>
 80109de:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80109e0:	2e10      	cmp	r6, #16
 80109e2:	4604      	mov	r4, r0
 80109e4:	d13a      	bne.n	8010a5c <_DrawBitmap+0xdc>
 80109e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80109e8:	b11b      	cbz	r3, 80109f2 <_DrawBitmap+0x72>
 80109ea:	ea4f 064b 	mov.w	r6, fp, lsl #1
 80109ee:	2500      	movs	r5, #0
 80109f0:	e014      	b.n	8010a1c <_DrawBitmap+0x9c>
 80109f2:	4b71      	ldr	r3, [pc, #452]	; (8010bb8 <_DrawBitmap+0x238>)
 80109f4:	681d      	ldr	r5, [r3, #0]
 80109f6:	2d00      	cmp	r5, #0
 80109f8:	d0f7      	beq.n	80109ea <_DrawBitmap+0x6a>
 80109fa:	9e08      	ldr	r6, [sp, #32]
 80109fc:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80109fe:	9600      	str	r6, [sp, #0]
 8010a00:	9701      	str	r7, [sp, #4]
 8010a02:	4651      	mov	r1, sl
 8010a04:	465a      	mov	r2, fp
 8010a06:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010a08:	47a8      	blx	r5
 8010a0a:	e349      	b.n	80110a0 <_DrawBitmap+0x720>
 8010a0c:	f1ba 0f00 	cmp.w	sl, #0
 8010a10:	d10a      	bne.n	8010a28 <_DrawBitmap+0xa8>
 8010a12:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8010a14:	44ba      	add	sl, r7
 8010a16:	9f08      	ldr	r7, [sp, #32]
 8010a18:	3501      	adds	r5, #1
 8010a1a:	443c      	add	r4, r7
 8010a1c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8010a1e:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8010a22:	42bd      	cmp	r5, r7
 8010a24:	dbf2      	blt.n	8010a0c <_DrawBitmap+0x8c>
 8010a26:	e014      	b.n	8010a52 <_DrawBitmap+0xd2>
 8010a28:	2c00      	cmp	r4, #0
 8010a2a:	d0f2      	beq.n	8010a12 <_DrawBitmap+0x92>
 8010a2c:	4b63      	ldr	r3, [pc, #396]	; (8010bbc <_DrawBitmap+0x23c>)
 8010a2e:	4620      	mov	r0, r4
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	4651      	mov	r1, sl
 8010a34:	4632      	mov	r2, r6
 8010a36:	4798      	blx	r3
 8010a38:	f1b8 0f00 	cmp.w	r8, #0
 8010a3c:	d0e9      	beq.n	8010a12 <_DrawBitmap+0x92>
 8010a3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a42:	9a07      	ldr	r2, [sp, #28]
 8010a44:	685f      	ldr	r7, [r3, #4]
 8010a46:	9904      	ldr	r1, [sp, #16]
 8010a48:	4640      	mov	r0, r8
 8010a4a:	442a      	add	r2, r5
 8010a4c:	465b      	mov	r3, fp
 8010a4e:	47b8      	blx	r7
 8010a50:	e7df      	b.n	8010a12 <_DrawBitmap+0x92>
 8010a52:	f1b8 0f00 	cmp.w	r8, #0
 8010a56:	f040 8320 	bne.w	801109a <_DrawBitmap+0x71a>
 8010a5a:	e321      	b.n	80110a0 <_DrawBitmap+0x720>
 8010a5c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010a5e:	2e17      	cmp	r6, #23
 8010a60:	dd38      	ble.n	8010ad4 <_DrawBitmap+0x154>
 8010a62:	2600      	movs	r6, #0
 8010a64:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8010a66:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010a68:	42be      	cmp	r6, r7
 8010a6a:	f280 809e 	bge.w	8010baa <_DrawBitmap+0x22a>
 8010a6e:	9f07      	ldr	r7, [sp, #28]
 8010a70:	4437      	add	r7, r6
 8010a72:	f1ba 0f00 	cmp.w	sl, #0
 8010a76:	d027      	beq.n	8010ac8 <_DrawBitmap+0x148>
 8010a78:	b334      	cbz	r4, 8010ac8 <_DrawBitmap+0x148>
 8010a7a:	b13d      	cbz	r5, 8010a8c <_DrawBitmap+0x10c>
 8010a7c:	68ab      	ldr	r3, [r5, #8]
 8010a7e:	9904      	ldr	r1, [sp, #16]
 8010a80:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8010a84:	4628      	mov	r0, r5
 8010a86:	463a      	mov	r2, r7
 8010a88:	465b      	mov	r3, fp
 8010a8a:	47e0      	blx	ip
 8010a8c:	1ea3      	subs	r3, r4, #2
 8010a8e:	f1aa 0904 	sub.w	r9, sl, #4
 8010a92:	9303      	str	r3, [sp, #12]
 8010a94:	46d8      	mov	r8, fp
 8010a96:	9b04      	ldr	r3, [sp, #16]
 8010a98:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010a9a:	445b      	add	r3, fp
 8010a9c:	ebc8 0103 	rsb	r1, r8, r3
 8010aa0:	6903      	ldr	r3, [r0, #16]
 8010aa2:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	9102      	str	r1, [sp, #8]
 8010aaa:	4798      	blx	r3
 8010aac:	9b03      	ldr	r3, [sp, #12]
 8010aae:	9902      	ldr	r1, [sp, #8]
 8010ab0:	f823 0f02 	strh.w	r0, [r3, #2]!
 8010ab4:	9303      	str	r3, [sp, #12]
 8010ab6:	b125      	cbz	r5, 8010ac2 <_DrawBitmap+0x142>
 8010ab8:	68ab      	ldr	r3, [r5, #8]
 8010aba:	4628      	mov	r0, r5
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	463a      	mov	r2, r7
 8010ac0:	4798      	blx	r3
 8010ac2:	f1b8 0801 	subs.w	r8, r8, #1
 8010ac6:	d1e6      	bne.n	8010a96 <_DrawBitmap+0x116>
 8010ac8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8010aca:	44ba      	add	sl, r7
 8010acc:	9f08      	ldr	r7, [sp, #32]
 8010ace:	3601      	adds	r6, #1
 8010ad0:	443c      	add	r4, r7
 8010ad2:	e7c7      	b.n	8010a64 <_DrawBitmap+0xe4>
 8010ad4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010ad6:	2e08      	cmp	r6, #8
 8010ad8:	f100 0402 	add.w	r4, r0, #2
 8010adc:	d170      	bne.n	8010bc0 <_DrawBitmap+0x240>
 8010ade:	9e07      	ldr	r6, [sp, #28]
 8010ae0:	9f07      	ldr	r7, [sp, #28]
 8010ae2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010ae4:	1bf3      	subs	r3, r6, r7
 8010ae6:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8010ae8:	42bb      	cmp	r3, r7
 8010aea:	f1a4 0002 	sub.w	r0, r4, #2
 8010aee:	da5c      	bge.n	8010baa <_DrawBitmap+0x22a>
 8010af0:	4b30      	ldr	r3, [pc, #192]	; (8010bb4 <_DrawBitmap+0x234>)
 8010af2:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	7c1b      	ldrb	r3, [r3, #16]
 8010af8:	b367      	cbz	r7, 8010b54 <_DrawBitmap+0x1d4>
 8010afa:	f013 0303 	ands.w	r3, r3, #3
 8010afe:	d004      	beq.n	8010b0a <_DrawBitmap+0x18a>
 8010b00:	2b02      	cmp	r3, #2
 8010b02:	d14c      	bne.n	8010b9e <_DrawBitmap+0x21e>
 8010b04:	46a0      	mov	r8, r4
 8010b06:	9f04      	ldr	r7, [sp, #16]
 8010b08:	e01d      	b.n	8010b46 <_DrawBitmap+0x1c6>
 8010b0a:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8010b0e:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8010b10:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8010b14:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8010b18:	3301      	adds	r3, #1
 8010b1a:	455b      	cmp	r3, fp
 8010b1c:	d1f5      	bne.n	8010b0a <_DrawBitmap+0x18a>
 8010b1e:	e03e      	b.n	8010b9e <_DrawBitmap+0x21e>
 8010b20:	9921      	ldr	r1, [sp, #132]	; 0x84
 8010b22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010b26:	f828 3c02 	strh.w	r3, [r8, #-2]
 8010b2a:	b12d      	cbz	r5, 8010b38 <_DrawBitmap+0x1b8>
 8010b2c:	68ab      	ldr	r3, [r5, #8]
 8010b2e:	4628      	mov	r0, r5
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	4639      	mov	r1, r7
 8010b34:	4632      	mov	r2, r6
 8010b36:	4798      	blx	r3
 8010b38:	9b04      	ldr	r3, [sp, #16]
 8010b3a:	3701      	adds	r7, #1
 8010b3c:	445b      	add	r3, fp
 8010b3e:	42bb      	cmp	r3, r7
 8010b40:	f108 0802 	add.w	r8, r8, #2
 8010b44:	d02b      	beq.n	8010b9e <_DrawBitmap+0x21e>
 8010b46:	9804      	ldr	r0, [sp, #16]
 8010b48:	ebc0 030a 	rsb	r3, r0, sl
 8010b4c:	5ddb      	ldrb	r3, [r3, r7]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d0f2      	beq.n	8010b38 <_DrawBitmap+0x1b8>
 8010b52:	e7e5      	b.n	8010b20 <_DrawBitmap+0x1a0>
 8010b54:	f013 0303 	ands.w	r3, r3, #3
 8010b58:	d004      	beq.n	8010b64 <_DrawBitmap+0x1e4>
 8010b5a:	2b02      	cmp	r3, #2
 8010b5c:	d11f      	bne.n	8010b9e <_DrawBitmap+0x21e>
 8010b5e:	46a0      	mov	r8, r4
 8010b60:	9f04      	ldr	r7, [sp, #16]
 8010b62:	e015      	b.n	8010b90 <_DrawBitmap+0x210>
 8010b64:	4b15      	ldr	r3, [pc, #84]	; (8010bbc <_DrawBitmap+0x23c>)
 8010b66:	4651      	mov	r1, sl
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	465a      	mov	r2, fp
 8010b6c:	4798      	blx	r3
 8010b6e:	e016      	b.n	8010b9e <_DrawBitmap+0x21e>
 8010b70:	f828 3c02 	strh.w	r3, [r8, #-2]
 8010b74:	b12d      	cbz	r5, 8010b82 <_DrawBitmap+0x202>
 8010b76:	68ab      	ldr	r3, [r5, #8]
 8010b78:	4628      	mov	r0, r5
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	4639      	mov	r1, r7
 8010b7e:	4632      	mov	r2, r6
 8010b80:	4798      	blx	r3
 8010b82:	9b04      	ldr	r3, [sp, #16]
 8010b84:	3701      	adds	r7, #1
 8010b86:	445b      	add	r3, fp
 8010b88:	42bb      	cmp	r3, r7
 8010b8a:	f108 0802 	add.w	r8, r8, #2
 8010b8e:	d006      	beq.n	8010b9e <_DrawBitmap+0x21e>
 8010b90:	9a04      	ldr	r2, [sp, #16]
 8010b92:	ebc2 030a 	rsb	r3, r2, sl
 8010b96:	5ddb      	ldrb	r3, [r3, r7]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d0f2      	beq.n	8010b82 <_DrawBitmap+0x202>
 8010b9c:	e7e8      	b.n	8010b70 <_DrawBitmap+0x1f0>
 8010b9e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8010ba0:	44ba      	add	sl, r7
 8010ba2:	9f08      	ldr	r7, [sp, #32]
 8010ba4:	3601      	adds	r6, #1
 8010ba6:	443c      	add	r4, r7
 8010ba8:	e79a      	b.n	8010ae0 <_DrawBitmap+0x160>
 8010baa:	2d00      	cmp	r5, #0
 8010bac:	f040 8275 	bne.w	801109a <_DrawBitmap+0x71a>
 8010bb0:	e276      	b.n	80110a0 <_DrawBitmap+0x720>
 8010bb2:	bf00      	nop
 8010bb4:	20000084 	.word	0x20000084
 8010bb8:	20002ba0 	.word	0x20002ba0
 8010bbc:	20000074 	.word	0x20000074
 8010bc0:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8010bc2:	4bab      	ldr	r3, [pc, #684]	; (8010e70 <_DrawBitmap+0x4f0>)
 8010bc4:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8010bc6:	9409      	str	r4, [sp, #36]	; 0x24
 8010bc8:	2e00      	cmp	r6, #0
 8010bca:	bf08      	it	eq
 8010bcc:	461e      	moveq	r6, r3
 8010bce:	9621      	str	r6, [sp, #132]	; 0x84
 8010bd0:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8010bd2:	0076      	lsls	r6, r6, #1
 8010bd4:	960e      	str	r6, [sp, #56]	; 0x38
 8010bd6:	00bf      	lsls	r7, r7, #2
 8010bd8:	9e07      	ldr	r6, [sp, #28]
 8010bda:	970f      	str	r7, [sp, #60]	; 0x3c
 8010bdc:	9605      	str	r6, [sp, #20]
 8010bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010be0:	9e05      	ldr	r6, [sp, #20]
 8010be2:	9f07      	ldr	r7, [sp, #28]
 8010be4:	1e9c      	subs	r4, r3, #2
 8010be6:	1bf3      	subs	r3, r6, r7
 8010be8:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8010bea:	42b3      	cmp	r3, r6
 8010bec:	f280 8253 	bge.w	8011096 <_DrawBitmap+0x716>
 8010bf0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8010bf2:	2f02      	cmp	r7, #2
 8010bf4:	f000 80d9 	beq.w	8010daa <_DrawBitmap+0x42a>
 8010bf8:	2f04      	cmp	r7, #4
 8010bfa:	f000 8178 	beq.w	8010eee <_DrawBitmap+0x56e>
 8010bfe:	2f01      	cmp	r7, #1
 8010c00:	f040 823f 	bne.w	8011082 <_DrawBitmap+0x702>
 8010c04:	f8df 9270 	ldr.w	r9, [pc, #624]	; 8010e78 <_DrawBitmap+0x4f8>
 8010c08:	f8d9 3000 	ldr.w	r3, [r9]
 8010c0c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010c0e:	f7fe f93b 	bl	800ee88 <GUI_ALLOC_LockH>
 8010c12:	f89a 3000 	ldrb.w	r3, [sl]
 8010c16:	4a97      	ldr	r2, [pc, #604]	; (8010e74 <_DrawBitmap+0x4f4>)
 8010c18:	9010      	str	r0, [sp, #64]	; 0x40
 8010c1a:	5cd5      	ldrb	r5, [r2, r3]
 8010c1c:	f8d9 3000 	ldr.w	r3, [r9]
 8010c20:	9820      	ldr	r0, [sp, #128]	; 0x80
 8010c22:	7c1b      	ldrb	r3, [r3, #16]
 8010c24:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8010c26:	f003 0303 	and.w	r3, r3, #3
 8010c2a:	2b02      	cmp	r3, #2
 8010c2c:	465e      	mov	r6, fp
 8010c2e:	f1c0 0808 	rsb	r8, r0, #8
 8010c32:	fa45 f500 	asr.w	r5, r5, r0
 8010c36:	d022      	beq.n	8010c7e <_DrawBitmap+0x2fe>
 8010c38:	2b03      	cmp	r3, #3
 8010c3a:	d062      	beq.n	8010d02 <_DrawBitmap+0x382>
 8010c3c:	2b01      	cmp	r3, #1
 8010c3e:	d060      	beq.n	8010d02 <_DrawBitmap+0x382>
 8010c40:	4652      	mov	r2, sl
 8010c42:	4546      	cmp	r6, r8
 8010c44:	bf38      	it	cc
 8010c46:	46b0      	movcc	r8, r6
 8010c48:	ebc8 0606 	rsb	r6, r8, r6
 8010c4c:	4643      	mov	r3, r8
 8010c4e:	4621      	mov	r1, r4
 8010c50:	f005 0001 	and.w	r0, r5, #1
 8010c54:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8010c56:	3b01      	subs	r3, #1
 8010c58:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8010c5c:	f821 0b02 	strh.w	r0, [r1], #2
 8010c60:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8010c64:	d1f4      	bne.n	8010c50 <_DrawBitmap+0x2d0>
 8010c66:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8010c6a:	2e00      	cmp	r6, #0
 8010c6c:	f000 8099 	beq.w	8010da2 <_DrawBitmap+0x422>
 8010c70:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8010c74:	497f      	ldr	r1, [pc, #508]	; (8010e74 <_DrawBitmap+0x4f4>)
 8010c76:	f04f 0808 	mov.w	r8, #8
 8010c7a:	5ccd      	ldrb	r5, [r1, r3]
 8010c7c:	e7e1      	b.n	8010c42 <_DrawBitmap+0x2c2>
 8010c7e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8010c80:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8010c84:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8010c88:	f8cd a018 	str.w	sl, [sp, #24]
 8010c8c:	4546      	cmp	r6, r8
 8010c8e:	bf38      	it	cc
 8010c90:	46b0      	movcc	r8, r6
 8010c92:	ebc8 0606 	rsb	r6, r8, r6
 8010c96:	b32f      	cbz	r7, 8010ce4 <_DrawBitmap+0x364>
 8010c98:	b91d      	cbnz	r5, 8010ca2 <_DrawBitmap+0x322>
 8010c9a:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8010c9e:	44c1      	add	r9, r8
 8010ca0:	e024      	b.n	8010cec <_DrawBitmap+0x36c>
 8010ca2:	07ea      	lsls	r2, r5, #31
 8010ca4:	d50b      	bpl.n	8010cbe <_DrawBitmap+0x33e>
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	9a05      	ldr	r2, [sp, #20]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	f8cd c008 	str.w	ip, [sp, #8]
 8010cb0:	4638      	mov	r0, r7
 8010cb2:	4649      	mov	r1, r9
 8010cb4:	4798      	blx	r3
 8010cb6:	f8dd c008 	ldr.w	ip, [sp, #8]
 8010cba:	f8a4 c000 	strh.w	ip, [r4]
 8010cbe:	f1b8 0801 	subs.w	r8, r8, #1
 8010cc2:	f109 0901 	add.w	r9, r9, #1
 8010cc6:	f104 0402 	add.w	r4, r4, #2
 8010cca:	d00f      	beq.n	8010cec <_DrawBitmap+0x36c>
 8010ccc:	086d      	lsrs	r5, r5, #1
 8010cce:	e7e3      	b.n	8010c98 <_DrawBitmap+0x318>
 8010cd0:	07eb      	lsls	r3, r5, #31
 8010cd2:	bf48      	it	mi
 8010cd4:	f8a4 c000 	strhmi.w	ip, [r4]
 8010cd8:	f1b8 0801 	subs.w	r8, r8, #1
 8010cdc:	f104 0402 	add.w	r4, r4, #2
 8010ce0:	d004      	beq.n	8010cec <_DrawBitmap+0x36c>
 8010ce2:	086d      	lsrs	r5, r5, #1
 8010ce4:	2d00      	cmp	r5, #0
 8010ce6:	d1f3      	bne.n	8010cd0 <_DrawBitmap+0x350>
 8010ce8:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8010cec:	2e00      	cmp	r6, #0
 8010cee:	d058      	beq.n	8010da2 <_DrawBitmap+0x422>
 8010cf0:	9906      	ldr	r1, [sp, #24]
 8010cf2:	4a60      	ldr	r2, [pc, #384]	; (8010e74 <_DrawBitmap+0x4f4>)
 8010cf4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010cf8:	9106      	str	r1, [sp, #24]
 8010cfa:	5cd5      	ldrb	r5, [r2, r3]
 8010cfc:	f04f 0808 	mov.w	r8, #8
 8010d00:	e7c4      	b.n	8010c8c <_DrawBitmap+0x30c>
 8010d02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d04:	6913      	ldr	r3, [r2, #16]
 8010d06:	689b      	ldr	r3, [r3, #8]
 8010d08:	4798      	blx	r3
 8010d0a:	9b04      	ldr	r3, [sp, #16]
 8010d0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d0e:	b280      	uxth	r0, r0
 8010d10:	900a      	str	r0, [sp, #40]	; 0x28
 8010d12:	f10a 0901 	add.w	r9, sl, #1
 8010d16:	4546      	cmp	r6, r8
 8010d18:	bf38      	it	cc
 8010d1a:	46b0      	movcc	r8, r6
 8010d1c:	ebc8 0606 	rsb	r6, r8, r6
 8010d20:	1ca3      	adds	r3, r4, #2
 8010d22:	b31f      	cbz	r7, 8010d6c <_DrawBitmap+0x3ec>
 8010d24:	f8cd 8018 	str.w	r8, [sp, #24]
 8010d28:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010d2a:	9a06      	ldr	r2, [sp, #24]
 8010d2c:	4440      	add	r0, r8
 8010d2e:	900c      	str	r0, [sp, #48]	; 0x30
 8010d30:	1a81      	subs	r1, r0, r2
 8010d32:	07e8      	lsls	r0, r5, #31
 8010d34:	d50d      	bpl.n	8010d52 <_DrawBitmap+0x3d2>
 8010d36:	68ba      	ldr	r2, [r7, #8]
 8010d38:	4638      	mov	r0, r7
 8010d3a:	f8d2 c000 	ldr.w	ip, [r2]
 8010d3e:	9a05      	ldr	r2, [sp, #20]
 8010d40:	9302      	str	r3, [sp, #8]
 8010d42:	47e0      	blx	ip
 8010d44:	9b02      	ldr	r3, [sp, #8]
 8010d46:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010d48:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8010d4c:	4042      	eors	r2, r0
 8010d4e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8010d52:	9906      	ldr	r1, [sp, #24]
 8010d54:	3901      	subs	r1, #1
 8010d56:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8010d5a:	f103 0302 	add.w	r3, r3, #2
 8010d5e:	9106      	str	r1, [sp, #24]
 8010d60:	d1e2      	bne.n	8010d28 <_DrawBitmap+0x3a8>
 8010d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d64:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d66:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8010d6a:	e010      	b.n	8010d8e <_DrawBitmap+0x40e>
 8010d6c:	4642      	mov	r2, r8
 8010d6e:	07e9      	lsls	r1, r5, #31
 8010d70:	d505      	bpl.n	8010d7e <_DrawBitmap+0x3fe>
 8010d72:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 8010d76:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010d78:	4041      	eors	r1, r0
 8010d7a:	f823 1c02 	strh.w	r1, [r3, #-2]
 8010d7e:	3a01      	subs	r2, #1
 8010d80:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8010d84:	f103 0302 	add.w	r3, r3, #2
 8010d88:	d1f1      	bne.n	8010d6e <_DrawBitmap+0x3ee>
 8010d8a:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8010d8e:	b146      	cbz	r6, 8010da2 <_DrawBitmap+0x422>
 8010d90:	f899 3000 	ldrb.w	r3, [r9]
 8010d94:	4a37      	ldr	r2, [pc, #220]	; (8010e74 <_DrawBitmap+0x4f4>)
 8010d96:	f109 0901 	add.w	r9, r9, #1
 8010d9a:	5cd5      	ldrb	r5, [r2, r3]
 8010d9c:	f04f 0808 	mov.w	r8, #8
 8010da0:	e7b9      	b.n	8010d16 <_DrawBitmap+0x396>
 8010da2:	a810      	add	r0, sp, #64	; 0x40
 8010da4:	f7fe f87e 	bl	800eea4 <GUI_ALLOC_UnlockH>
 8010da8:	e16b      	b.n	8011082 <_DrawBitmap+0x702>
 8010daa:	4b33      	ldr	r3, [pc, #204]	; (8010e78 <_DrawBitmap+0x4f8>)
 8010dac:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8010db2:	7c1b      	ldrb	r3, [r3, #16]
 8010db4:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8010db8:	f1c6 0504 	rsb	r5, r6, #4
 8010dbc:	f89a 6000 	ldrb.w	r6, [sl]
 8010dc0:	f003 0303 	and.w	r3, r3, #3
 8010dc4:	40be      	lsls	r6, r7
 8010dc6:	2b01      	cmp	r3, #1
 8010dc8:	b2ed      	uxtb	r5, r5
 8010dca:	b2f6      	uxtb	r6, r6
 8010dcc:	d06a      	beq.n	8010ea4 <_DrawBitmap+0x524>
 8010dce:	d308      	bcc.n	8010de2 <_DrawBitmap+0x462>
 8010dd0:	2b02      	cmp	r3, #2
 8010dd2:	f040 8156 	bne.w	8011082 <_DrawBitmap+0x702>
 8010dd6:	f8cd a018 	str.w	sl, [sp, #24]
 8010dda:	465f      	mov	r7, fp
 8010ddc:	f8dd c010 	ldr.w	ip, [sp, #16]
 8010de0:	e03e      	b.n	8010e60 <_DrawBitmap+0x4e0>
 8010de2:	4652      	mov	r2, sl
 8010de4:	465b      	mov	r3, fp
 8010de6:	429d      	cmp	r5, r3
 8010de8:	bfc8      	it	gt
 8010dea:	b2dd      	uxtbgt	r5, r3
 8010dec:	1b5b      	subs	r3, r3, r5
 8010dee:	4629      	mov	r1, r5
 8010df0:	4620      	mov	r0, r4
 8010df2:	ea4f 1c96 	mov.w	ip, r6, lsr #6
 8010df6:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8010df8:	3901      	subs	r1, #1
 8010dfa:	f857 c02c 	ldr.w	ip, [r7, ip, lsl #2]
 8010dfe:	f820 cb02 	strh.w	ip, [r0], #2
 8010e02:	00b6      	lsls	r6, r6, #2
 8010e04:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8010e08:	b2f6      	uxtb	r6, r6
 8010e0a:	d1f2      	bne.n	8010df2 <_DrawBitmap+0x472>
 8010e0c:	3d01      	subs	r5, #1
 8010e0e:	b2ed      	uxtb	r5, r5
 8010e10:	3501      	adds	r5, #1
 8010e12:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	f000 8133 	beq.w	8011082 <_DrawBitmap+0x702>
 8010e1c:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8010e20:	2504      	movs	r5, #4
 8010e22:	e7e0      	b.n	8010de6 <_DrawBitmap+0x466>
 8010e24:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8010e28:	eb08 010c 	add.w	r1, r8, ip
 8010e2c:	d126      	bne.n	8010e7c <_DrawBitmap+0x4fc>
 8010e2e:	f108 0801 	add.w	r8, r8, #1
 8010e32:	fa5f f388 	uxtb.w	r3, r8
 8010e36:	00b6      	lsls	r6, r6, #2
 8010e38:	429d      	cmp	r5, r3
 8010e3a:	b2f6      	uxtb	r6, r6
 8010e3c:	d1f2      	bne.n	8010e24 <_DrawBitmap+0x4a4>
 8010e3e:	3d01      	subs	r5, #1
 8010e40:	b2ed      	uxtb	r5, r5
 8010e42:	1c6b      	adds	r3, r5, #1
 8010e44:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010e48:	f10c 0301 	add.w	r3, ip, #1
 8010e4c:	eb03 0c05 	add.w	ip, r3, r5
 8010e50:	2f00      	cmp	r7, #0
 8010e52:	f000 8116 	beq.w	8011082 <_DrawBitmap+0x702>
 8010e56:	9b06      	ldr	r3, [sp, #24]
 8010e58:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8010e5c:	9306      	str	r3, [sp, #24]
 8010e5e:	2504      	movs	r5, #4
 8010e60:	42bd      	cmp	r5, r7
 8010e62:	bfc8      	it	gt
 8010e64:	b2fd      	uxtbgt	r5, r7
 8010e66:	1b7f      	subs	r7, r7, r5
 8010e68:	f04f 0800 	mov.w	r8, #0
 8010e6c:	e7da      	b.n	8010e24 <_DrawBitmap+0x4a4>
 8010e6e:	bf00      	nop
 8010e70:	080142f4 	.word	0x080142f4
 8010e74:	08014198 	.word	0x08014198
 8010e78:	20000084 	.word	0x20000084
 8010e7c:	09b3      	lsrs	r3, r6, #6
 8010e7e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8010e80:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010e84:	f824 3018 	strh.w	r3, [r4, r8, lsl #1]
 8010e88:	f1b9 0f00 	cmp.w	r9, #0
 8010e8c:	d0cf      	beq.n	8010e2e <_DrawBitmap+0x4ae>
 8010e8e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010e92:	9a05      	ldr	r2, [sp, #20]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	f8cd c008 	str.w	ip, [sp, #8]
 8010e9a:	4648      	mov	r0, r9
 8010e9c:	4798      	blx	r3
 8010e9e:	f8dd c008 	ldr.w	ip, [sp, #8]
 8010ea2:	e7c4      	b.n	8010e2e <_DrawBitmap+0x4ae>
 8010ea4:	4651      	mov	r1, sl
 8010ea6:	465b      	mov	r3, fp
 8010ea8:	429d      	cmp	r5, r3
 8010eaa:	bfc8      	it	gt
 8010eac:	b2dd      	uxtbgt	r5, r3
 8010eae:	1b5b      	subs	r3, r3, r5
 8010eb0:	1ca2      	adds	r2, r4, #2
 8010eb2:	4628      	mov	r0, r5
 8010eb4:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8010eb8:	d005      	beq.n	8010ec6 <_DrawBitmap+0x546>
 8010eba:	f832 7c02 	ldrh.w	r7, [r2, #-2]
 8010ebe:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 8010ec2:	f822 7c02 	strh.w	r7, [r2, #-2]
 8010ec6:	3801      	subs	r0, #1
 8010ec8:	00b6      	lsls	r6, r6, #2
 8010eca:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8010ece:	b2f6      	uxtb	r6, r6
 8010ed0:	f102 0202 	add.w	r2, r2, #2
 8010ed4:	d1ee      	bne.n	8010eb4 <_DrawBitmap+0x534>
 8010ed6:	3d01      	subs	r5, #1
 8010ed8:	b2ed      	uxtb	r5, r5
 8010eda:	3501      	adds	r5, #1
 8010edc:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	f000 80ce 	beq.w	8011082 <_DrawBitmap+0x702>
 8010ee6:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8010eea:	2504      	movs	r5, #4
 8010eec:	e7dc      	b.n	8010ea8 <_DrawBitmap+0x528>
 8010eee:	4a6e      	ldr	r2, [pc, #440]	; (80110a8 <_DrawBitmap+0x728>)
 8010ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8010ef4:	6812      	ldr	r2, [r2, #0]
 8010ef6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010ef8:	7c12      	ldrb	r2, [r2, #16]
 8010efa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010efc:	f002 0203 	and.w	r2, r2, #3
 8010f00:	40bb      	lsls	r3, r7
 8010f02:	2a01      	cmp	r2, #1
 8010f04:	b2dd      	uxtb	r5, r3
 8010f06:	f000 8095 	beq.w	8011034 <_DrawBitmap+0x6b4>
 8010f0a:	d302      	bcc.n	8010f12 <_DrawBitmap+0x592>
 8010f0c:	2a02      	cmp	r2, #2
 8010f0e:	d036      	beq.n	8010f7e <_DrawBitmap+0x5fe>
 8010f10:	e0b7      	b.n	8011082 <_DrawBitmap+0x702>
 8010f12:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8010f14:	b166      	cbz	r6, 8010f30 <_DrawBitmap+0x5b0>
 8010f16:	092d      	lsrs	r5, r5, #4
 8010f18:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8010f1a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8010f1e:	8023      	strh	r3, [r4, #0]
 8010f20:	f10a 0201 	add.w	r2, sl, #1
 8010f24:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010f26:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8010f2a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010f2e:	e001      	b.n	8010f34 <_DrawBitmap+0x5b4>
 8010f30:	465b      	mov	r3, fp
 8010f32:	4652      	mov	r2, sl
 8010f34:	2b01      	cmp	r3, #1
 8010f36:	dd19      	ble.n	8010f6c <_DrawBitmap+0x5ec>
 8010f38:	1058      	asrs	r0, r3, #1
 8010f3a:	1d21      	adds	r1, r4, #4
 8010f3c:	f003 0301 	and.w	r3, r3, #1
 8010f40:	eb02 0c00 	add.w	ip, r2, r0
 8010f44:	092f      	lsrs	r7, r5, #4
 8010f46:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8010f48:	f005 050f 	and.w	r5, r5, #15
 8010f4c:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8010f50:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8010f54:	f821 7c04 	strh.w	r7, [r1, #-4]
 8010f58:	f821 5c02 	strh.w	r5, [r1, #-2]
 8010f5c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8010f60:	4562      	cmp	r2, ip
 8010f62:	f101 0104 	add.w	r1, r1, #4
 8010f66:	d1ed      	bne.n	8010f44 <_DrawBitmap+0x5c4>
 8010f68:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	f000 8088 	beq.w	8011082 <_DrawBitmap+0x702>
 8010f72:	092d      	lsrs	r5, r5, #4
 8010f74:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8010f76:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8010f7a:	8023      	strh	r3, [r4, #0]
 8010f7c:	e081      	b.n	8011082 <_DrawBitmap+0x702>
 8010f7e:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8010f80:	b1c7      	cbz	r7, 8010fb4 <_DrawBitmap+0x634>
 8010f82:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8010f86:	d00b      	beq.n	8010fa0 <_DrawBitmap+0x620>
 8010f88:	092d      	lsrs	r5, r5, #4
 8010f8a:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8010f8c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8010f90:	8023      	strh	r3, [r4, #0]
 8010f92:	b12e      	cbz	r6, 8010fa0 <_DrawBitmap+0x620>
 8010f94:	68b3      	ldr	r3, [r6, #8]
 8010f96:	9904      	ldr	r1, [sp, #16]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	9a05      	ldr	r2, [sp, #20]
 8010f9c:	4630      	mov	r0, r6
 8010f9e:	4798      	blx	r3
 8010fa0:	9804      	ldr	r0, [sp, #16]
 8010fa2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010fa4:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8010fa8:	1c47      	adds	r7, r0, #1
 8010faa:	f10b 39ff 	add.w	r9, fp, #4294967295
 8010fae:	f10a 0801 	add.w	r8, sl, #1
 8010fb2:	e00f      	b.n	8010fd4 <_DrawBitmap+0x654>
 8010fb4:	46d9      	mov	r9, fp
 8010fb6:	46d0      	mov	r8, sl
 8010fb8:	9f04      	ldr	r7, [sp, #16]
 8010fba:	e00b      	b.n	8010fd4 <_DrawBitmap+0x654>
 8010fbc:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8010fc0:	d10c      	bne.n	8010fdc <_DrawBitmap+0x65c>
 8010fc2:	f015 050f 	ands.w	r5, r5, #15
 8010fc6:	d117      	bne.n	8010ff8 <_DrawBitmap+0x678>
 8010fc8:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 8010fcc:	3404      	adds	r4, #4
 8010fce:	3702      	adds	r7, #2
 8010fd0:	f1a9 0902 	sub.w	r9, r9, #2
 8010fd4:	f1b9 0f01 	cmp.w	r9, #1
 8010fd8:	dcf0      	bgt.n	8010fbc <_DrawBitmap+0x63c>
 8010fda:	e01a      	b.n	8011012 <_DrawBitmap+0x692>
 8010fdc:	092b      	lsrs	r3, r5, #4
 8010fde:	9921      	ldr	r1, [sp, #132]	; 0x84
 8010fe0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010fe4:	8023      	strh	r3, [r4, #0]
 8010fe6:	2e00      	cmp	r6, #0
 8010fe8:	d0eb      	beq.n	8010fc2 <_DrawBitmap+0x642>
 8010fea:	68b3      	ldr	r3, [r6, #8]
 8010fec:	9a05      	ldr	r2, [sp, #20]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	4630      	mov	r0, r6
 8010ff2:	4639      	mov	r1, r7
 8010ff4:	4798      	blx	r3
 8010ff6:	e7e4      	b.n	8010fc2 <_DrawBitmap+0x642>
 8010ff8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010ffa:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 8010ffe:	8063      	strh	r3, [r4, #2]
 8011000:	2e00      	cmp	r6, #0
 8011002:	d0e1      	beq.n	8010fc8 <_DrawBitmap+0x648>
 8011004:	68b3      	ldr	r3, [r6, #8]
 8011006:	9a05      	ldr	r2, [sp, #20]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	4630      	mov	r0, r6
 801100c:	1c79      	adds	r1, r7, #1
 801100e:	4798      	blx	r3
 8011010:	e7da      	b.n	8010fc8 <_DrawBitmap+0x648>
 8011012:	f1b9 0f00 	cmp.w	r9, #0
 8011016:	d034      	beq.n	8011082 <_DrawBitmap+0x702>
 8011018:	092d      	lsrs	r5, r5, #4
 801101a:	d032      	beq.n	8011082 <_DrawBitmap+0x702>
 801101c:	9821      	ldr	r0, [sp, #132]	; 0x84
 801101e:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 8011022:	8023      	strh	r3, [r4, #0]
 8011024:	b36e      	cbz	r6, 8011082 <_DrawBitmap+0x702>
 8011026:	68b3      	ldr	r3, [r6, #8]
 8011028:	9a05      	ldr	r2, [sp, #20]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	4630      	mov	r0, r6
 801102e:	4639      	mov	r1, r7
 8011030:	4798      	blx	r3
 8011032:	e026      	b.n	8011082 <_DrawBitmap+0x702>
 8011034:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8011036:	f1c6 0302 	rsb	r3, r6, #2
 801103a:	b2db      	uxtb	r3, r3
 801103c:	4650      	mov	r0, sl
 801103e:	465a      	mov	r2, fp
 8011040:	4293      	cmp	r3, r2
 8011042:	bfc8      	it	gt
 8011044:	b2d3      	uxtbgt	r3, r2
 8011046:	1ad2      	subs	r2, r2, r3
 8011048:	1ca1      	adds	r1, r4, #2
 801104a:	461e      	mov	r6, r3
 801104c:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8011050:	d005      	beq.n	801105e <_DrawBitmap+0x6de>
 8011052:	f831 7c02 	ldrh.w	r7, [r1, #-2]
 8011056:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 801105a:	f821 7c02 	strh.w	r7, [r1, #-2]
 801105e:	3e01      	subs	r6, #1
 8011060:	012d      	lsls	r5, r5, #4
 8011062:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8011066:	b2ed      	uxtb	r5, r5
 8011068:	f101 0102 	add.w	r1, r1, #2
 801106c:	d1ee      	bne.n	801104c <_DrawBitmap+0x6cc>
 801106e:	3b01      	subs	r3, #1
 8011070:	b2db      	uxtb	r3, r3
 8011072:	3301      	adds	r3, #1
 8011074:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8011078:	b11a      	cbz	r2, 8011082 <_DrawBitmap+0x702>
 801107a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801107e:	2302      	movs	r3, #2
 8011080:	e7de      	b.n	8011040 <_DrawBitmap+0x6c0>
 8011082:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8011084:	9b05      	ldr	r3, [sp, #20]
 8011086:	9e08      	ldr	r6, [sp, #32]
 8011088:	44ba      	add	sl, r7
 801108a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801108c:	3301      	adds	r3, #1
 801108e:	4437      	add	r7, r6
 8011090:	9305      	str	r3, [sp, #20]
 8011092:	9709      	str	r7, [sp, #36]	; 0x24
 8011094:	e5a3      	b.n	8010bde <_DrawBitmap+0x25e>
 8011096:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011098:	b113      	cbz	r3, 80110a0 <_DrawBitmap+0x720>
 801109a:	a811      	add	r0, sp, #68	; 0x44
 801109c:	f7fd ff02 	bl	800eea4 <GUI_ALLOC_UnlockH>
 80110a0:	b013      	add	sp, #76	; 0x4c
 80110a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110a6:	bf00      	nop
 80110a8:	20000084 	.word	0x20000084

080110ac <_GetDevProp>:
 80110ac:	2908      	cmp	r1, #8
 80110ae:	b508      	push	{r3, lr}
 80110b0:	d008      	beq.n	80110c4 <_GetDevProp+0x18>
 80110b2:	6800      	ldr	r0, [r0, #0]
 80110b4:	b118      	cbz	r0, 80110be <_GetDevProp+0x12>
 80110b6:	68c3      	ldr	r3, [r0, #12]
 80110b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110ba:	4798      	blx	r3
 80110bc:	bd08      	pop	{r3, pc}
 80110be:	f04f 30ff 	mov.w	r0, #4294967295
 80110c2:	bd08      	pop	{r3, pc}
 80110c4:	2010      	movs	r0, #16
 80110c6:	bd08      	pop	{r3, pc}

080110c8 <LCD_SelectLCD>:
 80110c8:	b510      	push	{r4, lr}
 80110ca:	4b0d      	ldr	r3, [pc, #52]	; (8011100 <LCD_SelectLCD+0x38>)
 80110cc:	681a      	ldr	r2, [r3, #0]
 80110ce:	7c51      	ldrb	r1, [r2, #17]
 80110d0:	4a0c      	ldr	r2, [pc, #48]	; (8011104 <LCD_SelectLCD+0x3c>)
 80110d2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80110d6:	461c      	mov	r4, r3
 80110d8:	b140      	cbz	r0, 80110ec <LCD_SelectLCD+0x24>
 80110da:	68c3      	ldr	r3, [r0, #12]
 80110dc:	b113      	cbz	r3, 80110e4 <LCD_SelectLCD+0x1c>
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	2b04      	cmp	r3, #4
 80110e2:	d001      	beq.n	80110e8 <LCD_SelectLCD+0x20>
 80110e4:	6800      	ldr	r0, [r0, #0]
 80110e6:	e7f7      	b.n	80110d8 <LCD_SelectLCD+0x10>
 80110e8:	f7fc f9cc 	bl	800d484 <GUI_DEVICE_Unlink>
 80110ec:	6823      	ldr	r3, [r4, #0]
 80110ee:	2200      	movs	r2, #0
 80110f0:	661a      	str	r2, [r3, #96]	; 0x60
 80110f2:	f103 0208 	add.w	r2, r3, #8
 80110f6:	615a      	str	r2, [r3, #20]
 80110f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110fc:	f7fb bac2 	b.w	800c684 <LCD_SetClipRectMax>
 8011100:	20000084 	.word	0x20000084
 8011104:	20007738 	.word	0x20007738

08011108 <LCD_ReadRectEx>:
 8011108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801110c:	b087      	sub	sp, #28
 801110e:	4617      	mov	r7, r2
 8011110:	9304      	str	r3, [sp, #16]
 8011112:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011114:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8011116:	68da      	ldr	r2, [r3, #12]
 8011118:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801111a:	f8d2 8014 	ldr.w	r8, [r2, #20]
 801111e:	4606      	mov	r6, r0
 8011120:	460d      	mov	r5, r1
 8011122:	b973      	cbnz	r3, 8011142 <LCD_ReadRectEx+0x3a>
 8011124:	4b71      	ldr	r3, [pc, #452]	; (80112ec <LCD_ReadRectEx+0x1e4>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	7c58      	ldrb	r0, [r3, #17]
 801112a:	f7fa ff55 	bl	800bfd8 <GUI_GetBitsPerPixelEx>
 801112e:	2808      	cmp	r0, #8
 8011130:	4682      	mov	sl, r0
 8011132:	dd15      	ble.n	8011160 <LCD_ReadRectEx+0x58>
 8011134:	2810      	cmp	r0, #16
 8011136:	bfcc      	ite	gt
 8011138:	f04f 0904 	movgt.w	r9, #4
 801113c:	f04f 0902 	movle.w	r9, #2
 8011140:	e010      	b.n	8011164 <LCD_ReadRectEx+0x5c>
 8011142:	a811      	add	r0, sp, #68	; 0x44
 8011144:	2101      	movs	r1, #1
 8011146:	4798      	blx	r3
 8011148:	4684      	mov	ip, r0
 801114a:	2800      	cmp	r0, #0
 801114c:	d0ea      	beq.n	8011124 <LCD_ReadRectEx+0x1c>
 801114e:	9b04      	ldr	r3, [sp, #16]
 8011150:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011152:	e88d 0018 	stmia.w	sp, {r3, r4}
 8011156:	4631      	mov	r1, r6
 8011158:	462a      	mov	r2, r5
 801115a:	463b      	mov	r3, r7
 801115c:	47e0      	blx	ip
 801115e:	e0c1      	b.n	80112e4 <LCD_ReadRectEx+0x1dc>
 8011160:	f04f 0901 	mov.w	r9, #1
 8011164:	f04f 0b00 	mov.w	fp, #0
 8011168:	9b04      	ldr	r3, [sp, #16]
 801116a:	429d      	cmp	r5, r3
 801116c:	f300 80ba 	bgt.w	80112e4 <LCD_ReadRectEx+0x1dc>
 8011170:	f1b9 0f02 	cmp.w	r9, #2
 8011174:	d009      	beq.n	801118a <LCD_ReadRectEx+0x82>
 8011176:	f1b9 0f04 	cmp.w	r9, #4
 801117a:	d004      	beq.n	8011186 <LCD_ReadRectEx+0x7e>
 801117c:	f1b9 0f01 	cmp.w	r9, #1
 8011180:	f040 80ae 	bne.w	80112e0 <LCD_ReadRectEx+0x1d8>
 8011184:	e003      	b.n	801118e <LCD_ReadRectEx+0x86>
 8011186:	46b4      	mov	ip, r6
 8011188:	e09b      	b.n	80112c2 <LCD_ReadRectEx+0x1ba>
 801118a:	46b4      	mov	ip, r6
 801118c:	e08a      	b.n	80112a4 <LCD_ReadRectEx+0x19c>
 801118e:	f10a 32ff 	add.w	r2, sl, #4294967295
 8011192:	2a07      	cmp	r2, #7
 8011194:	f200 80a4 	bhi.w	80112e0 <LCD_ReadRectEx+0x1d8>
 8011198:	e8df f002 	tbb	[pc, r2]
 801119c:	0606080a 	.word	0x0606080a
 80111a0:	04040404 	.word	0x04040404
 80111a4:	46b4      	mov	ip, r6
 80111a6:	e066      	b.n	8011276 <LCD_ReadRectEx+0x16e>
 80111a8:	46b4      	mov	ip, r6
 80111aa:	e047      	b.n	801123c <LCD_ReadRectEx+0x134>
 80111ac:	46b4      	mov	ip, r6
 80111ae:	e022      	b.n	80111f6 <LCD_ReadRectEx+0xee>
 80111b0:	46b4      	mov	ip, r6
 80111b2:	45bc      	cmp	ip, r7
 80111b4:	f300 8094 	bgt.w	80112e0 <LCD_ReadRectEx+0x1d8>
 80111b8:	4661      	mov	r1, ip
 80111ba:	462a      	mov	r2, r5
 80111bc:	f8cd c00c 	str.w	ip, [sp, #12]
 80111c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80111c2:	47c0      	blx	r8
 80111c4:	f1cb 0207 	rsb	r2, fp, #7
 80111c8:	fa00 f202 	lsl.w	r2, r0, r2
 80111cc:	f64f 717f 	movw	r1, #65407	; 0xff7f
 80111d0:	7820      	ldrb	r0, [r4, #0]
 80111d2:	fa41 f10b 	asr.w	r1, r1, fp
 80111d6:	4001      	ands	r1, r0
 80111d8:	430a      	orrs	r2, r1
 80111da:	7022      	strb	r2, [r4, #0]
 80111dc:	f10b 0301 	add.w	r3, fp, #1
 80111e0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80111e4:	f023 0207 	bic.w	r2, r3, #7
 80111e8:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 80111ec:	fa43 fb02 	asr.w	fp, r3, r2
 80111f0:	f10c 0c01 	add.w	ip, ip, #1
 80111f4:	e7dd      	b.n	80111b2 <LCD_ReadRectEx+0xaa>
 80111f6:	45bc      	cmp	ip, r7
 80111f8:	dc72      	bgt.n	80112e0 <LCD_ReadRectEx+0x1d8>
 80111fa:	4661      	mov	r1, ip
 80111fc:	462a      	mov	r2, r5
 80111fe:	f8cd c00c 	str.w	ip, [sp, #12]
 8011202:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011204:	47c0      	blx	r8
 8011206:	ea4f 024b 	mov.w	r2, fp, lsl #1
 801120a:	f1c2 0106 	rsb	r1, r2, #6
 801120e:	fa00 f101 	lsl.w	r1, r0, r1
 8011212:	f64f 703f 	movw	r0, #65343	; 0xff3f
 8011216:	fa40 f202 	asr.w	r2, r0, r2
 801121a:	7820      	ldrb	r0, [r4, #0]
 801121c:	4002      	ands	r2, r0
 801121e:	4311      	orrs	r1, r2
 8011220:	7021      	strb	r1, [r4, #0]
 8011222:	f10b 0301 	add.w	r3, fp, #1
 8011226:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801122a:	f023 0203 	bic.w	r2, r3, #3
 801122e:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8011232:	fa43 fb02 	asr.w	fp, r3, r2
 8011236:	f10c 0c01 	add.w	ip, ip, #1
 801123a:	e7dc      	b.n	80111f6 <LCD_ReadRectEx+0xee>
 801123c:	45bc      	cmp	ip, r7
 801123e:	dc4f      	bgt.n	80112e0 <LCD_ReadRectEx+0x1d8>
 8011240:	4661      	mov	r1, ip
 8011242:	462a      	mov	r2, r5
 8011244:	f8cd c00c 	str.w	ip, [sp, #12]
 8011248:	9811      	ldr	r0, [sp, #68]	; 0x44
 801124a:	47c0      	blx	r8
 801124c:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8011250:	f1c2 0104 	rsb	r1, r2, #4
 8011254:	fa00 f101 	lsl.w	r1, r0, r1
 8011258:	200f      	movs	r0, #15
 801125a:	fa00 f202 	lsl.w	r2, r0, r2
 801125e:	7820      	ldrb	r0, [r4, #0]
 8011260:	4002      	ands	r2, r0
 8011262:	4311      	orrs	r1, r2
 8011264:	7021      	strb	r1, [r4, #0]
 8011266:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801126a:	445c      	add	r4, fp
 801126c:	f10c 0c01 	add.w	ip, ip, #1
 8011270:	f08b 0b01 	eor.w	fp, fp, #1
 8011274:	e7e2      	b.n	801123c <LCD_ReadRectEx+0x134>
 8011276:	4273      	negs	r3, r6
 8011278:	1ba2      	subs	r2, r4, r6
 801127a:	45bc      	cmp	ip, r7
 801127c:	9305      	str	r3, [sp, #20]
 801127e:	4462      	add	r2, ip
 8011280:	dc0e      	bgt.n	80112a0 <LCD_ReadRectEx+0x198>
 8011282:	4661      	mov	r1, ip
 8011284:	462a      	mov	r2, r5
 8011286:	f8cd c00c 	str.w	ip, [sp, #12]
 801128a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801128c:	47c0      	blx	r8
 801128e:	9a05      	ldr	r2, [sp, #20]
 8011290:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011294:	4422      	add	r2, r4
 8011296:	f802 000c 	strb.w	r0, [r2, ip]
 801129a:	f10c 0c01 	add.w	ip, ip, #1
 801129e:	e7ea      	b.n	8011276 <LCD_ReadRectEx+0x16e>
 80112a0:	4614      	mov	r4, r2
 80112a2:	e01d      	b.n	80112e0 <LCD_ReadRectEx+0x1d8>
 80112a4:	45bc      	cmp	ip, r7
 80112a6:	dc1b      	bgt.n	80112e0 <LCD_ReadRectEx+0x1d8>
 80112a8:	4661      	mov	r1, ip
 80112aa:	f8cd c00c 	str.w	ip, [sp, #12]
 80112ae:	9811      	ldr	r0, [sp, #68]	; 0x44
 80112b0:	462a      	mov	r2, r5
 80112b2:	47c0      	blx	r8
 80112b4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80112b8:	f824 0b02 	strh.w	r0, [r4], #2
 80112bc:	f10c 0c01 	add.w	ip, ip, #1
 80112c0:	e7f0      	b.n	80112a4 <LCD_ReadRectEx+0x19c>
 80112c2:	45bc      	cmp	ip, r7
 80112c4:	dc0c      	bgt.n	80112e0 <LCD_ReadRectEx+0x1d8>
 80112c6:	4661      	mov	r1, ip
 80112c8:	f8cd c00c 	str.w	ip, [sp, #12]
 80112cc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80112ce:	462a      	mov	r2, r5
 80112d0:	47c0      	blx	r8
 80112d2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80112d6:	f844 0b04 	str.w	r0, [r4], #4
 80112da:	f10c 0c01 	add.w	ip, ip, #1
 80112de:	e7f0      	b.n	80112c2 <LCD_ReadRectEx+0x1ba>
 80112e0:	3501      	adds	r5, #1
 80112e2:	e741      	b.n	8011168 <LCD_ReadRectEx+0x60>
 80112e4:	b007      	add	sp, #28
 80112e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ea:	bf00      	nop
 80112ec:	20000084 	.word	0x20000084

080112f0 <GUI_ReadRectEx>:
 80112f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112f2:	4d16      	ldr	r5, [pc, #88]	; (801134c <GUI_ReadRectEx+0x5c>)
 80112f4:	9e05      	ldr	r6, [sp, #20]
 80112f6:	682d      	ldr	r5, [r5, #0]
 80112f8:	9c06      	ldr	r4, [sp, #24]
 80112fa:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 80112fe:	42b8      	cmp	r0, r7
 8011300:	bfb8      	it	lt
 8011302:	4638      	movlt	r0, r7
 8011304:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8011308:	42ba      	cmp	r2, r7
 801130a:	bfa8      	it	ge
 801130c:	463a      	movge	r2, r7
 801130e:	4282      	cmp	r2, r0
 8011310:	db1b      	blt.n	801134a <GUI_ReadRectEx+0x5a>
 8011312:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8011316:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 801131a:	42b9      	cmp	r1, r7
 801131c:	bfb8      	it	lt
 801131e:	4639      	movlt	r1, r7
 8011320:	42ab      	cmp	r3, r5
 8011322:	bfa8      	it	ge
 8011324:	462b      	movge	r3, r5
 8011326:	428b      	cmp	r3, r1
 8011328:	db0f      	blt.n	801134a <GUI_ReadRectEx+0x5a>
 801132a:	68e5      	ldr	r5, [r4, #12]
 801132c:	682d      	ldr	r5, [r5, #0]
 801132e:	f035 0704 	bics.w	r7, r5, #4
 8011332:	d105      	bne.n	8011340 <GUI_ReadRectEx+0x50>
 8011334:	9605      	str	r6, [sp, #20]
 8011336:	9406      	str	r4, [sp, #24]
 8011338:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801133c:	f7ff bee4 	b.w	8011108 <LCD_ReadRectEx>
 8011340:	6825      	ldr	r5, [r4, #0]
 8011342:	2d00      	cmp	r5, #0
 8011344:	d0f6      	beq.n	8011334 <GUI_ReadRectEx+0x44>
 8011346:	462c      	mov	r4, r5
 8011348:	e7ef      	b.n	801132a <GUI_ReadRectEx+0x3a>
 801134a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801134c:	20000084 	.word	0x20000084

08011350 <LCD_GetBkColorIndex>:
 8011350:	4b02      	ldr	r3, [pc, #8]	; (801135c <LCD_GetBkColorIndex+0xc>)
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011356:	6818      	ldr	r0, [r3, #0]
 8011358:	4770      	bx	lr
 801135a:	bf00      	nop
 801135c:	20000084 	.word	0x20000084

08011360 <LCD_GetColorIndex>:
 8011360:	4b02      	ldr	r3, [pc, #8]	; (801136c <LCD_GetColorIndex+0xc>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011366:	6818      	ldr	r0, [r3, #0]
 8011368:	4770      	bx	lr
 801136a:	bf00      	nop
 801136c:	20000084 	.word	0x20000084

08011370 <_OnExit>:
 8011370:	b510      	push	{r4, lr}
 8011372:	4c04      	ldr	r4, [pc, #16]	; (8011384 <_OnExit+0x14>)
 8011374:	6820      	ldr	r0, [r4, #0]
 8011376:	f7fd fd73 	bl	800ee60 <GUI_ALLOC_FreeFixedBlock>
 801137a:	4a03      	ldr	r2, [pc, #12]	; (8011388 <_OnExit+0x18>)
 801137c:	2300      	movs	r3, #0
 801137e:	6023      	str	r3, [r4, #0]
 8011380:	6013      	str	r3, [r2, #0]
 8011382:	bd10      	pop	{r4, pc}
 8011384:	20007838 	.word	0x20007838
 8011388:	20002ba4 	.word	0x20002ba4

0801138c <LCD_InitColors>:
 801138c:	b538      	push	{r3, r4, r5, lr}
 801138e:	4d09      	ldr	r5, [pc, #36]	; (80113b4 <LCD_InitColors+0x28>)
 8011390:	682c      	ldr	r4, [r5, #0]
 8011392:	b95c      	cbnz	r4, 80113ac <LCD_InitColors+0x20>
 8011394:	4b08      	ldr	r3, [pc, #32]	; (80113b8 <LCD_InitColors+0x2c>)
 8011396:	6818      	ldr	r0, [r3, #0]
 8011398:	0080      	lsls	r0, r0, #2
 801139a:	f7fd fe45 	bl	800f028 <GUI_ALLOC_GetFixedBlock>
 801139e:	6028      	str	r0, [r5, #0]
 80113a0:	b130      	cbz	r0, 80113b0 <LCD_InitColors+0x24>
 80113a2:	4806      	ldr	r0, [pc, #24]	; (80113bc <LCD_InitColors+0x30>)
 80113a4:	4b06      	ldr	r3, [pc, #24]	; (80113c0 <LCD_InitColors+0x34>)
 80113a6:	6003      	str	r3, [r0, #0]
 80113a8:	f7fc f98e 	bl	800d6c8 <GUI__RegisterExit>
 80113ac:	2000      	movs	r0, #0
 80113ae:	bd38      	pop	{r3, r4, r5, pc}
 80113b0:	2001      	movs	r0, #1
 80113b2:	bd38      	pop	{r3, r4, r5, pc}
 80113b4:	20007838 	.word	0x20007838
 80113b8:	20000118 	.word	0x20000118
 80113bc:	20002ba8 	.word	0x20002ba8
 80113c0:	08011371 	.word	0x08011371

080113c4 <LCD_InitLUT>:
 80113c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113c8:	f000 febe 	bl	8012148 <LCD_GetNumLayers>
 80113cc:	2400      	movs	r4, #0
 80113ce:	4680      	mov	r8, r0
 80113d0:	4544      	cmp	r4, r8
 80113d2:	da2c      	bge.n	801142e <LCD_InitLUT+0x6a>
 80113d4:	4620      	mov	r0, r4
 80113d6:	f7fc f81d 	bl	800d414 <GUI_DEVICE__GetpDriver>
 80113da:	b330      	cbz	r0, 801142a <LCD_InitLUT+0x66>
 80113dc:	4e15      	ldr	r6, [pc, #84]	; (8011434 <LCD_InitLUT+0x70>)
 80113de:	6833      	ldr	r3, [r6, #0]
 80113e0:	4620      	mov	r0, r4
 80113e2:	f893 9011 	ldrb.w	r9, [r3, #17]
 80113e6:	745c      	strb	r4, [r3, #17]
 80113e8:	f7fa fdd8 	bl	800bf9c <LCD_GetBitsPerPixelEx>
 80113ec:	2808      	cmp	r0, #8
 80113ee:	dd03      	ble.n	80113f8 <LCD_InitLUT+0x34>
 80113f0:	6833      	ldr	r3, [r6, #0]
 80113f2:	f883 9011 	strb.w	r9, [r3, #17]
 80113f6:	e018      	b.n	801142a <LCD_InitLUT+0x66>
 80113f8:	4b0f      	ldr	r3, [pc, #60]	; (8011438 <LCD_InitLUT+0x74>)
 80113fa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80113fe:	691a      	ldr	r2, [r3, #16]
 8011400:	4b0e      	ldr	r3, [pc, #56]	; (801143c <LCD_InitLUT+0x78>)
 8011402:	429a      	cmp	r2, r3
 8011404:	d0f4      	beq.n	80113f0 <LCD_InitLUT+0x2c>
 8011406:	4620      	mov	r0, r4
 8011408:	f7fa fdcb 	bl	800bfa2 <LCD_GetNumColorsEx>
 801140c:	2500      	movs	r5, #0
 801140e:	4682      	mov	sl, r0
 8011410:	4555      	cmp	r5, sl
 8011412:	daed      	bge.n	80113f0 <LCD_InitLUT+0x2c>
 8011414:	b2ef      	uxtb	r7, r5
 8011416:	4638      	mov	r0, r7
 8011418:	f7fb f9a8 	bl	800c76c <LCD_Index2Color>
 801141c:	4639      	mov	r1, r7
 801141e:	4602      	mov	r2, r0
 8011420:	4620      	mov	r0, r4
 8011422:	f7fa fd77 	bl	800bf14 <LCD_SetLUTEntryEx>
 8011426:	3501      	adds	r5, #1
 8011428:	e7f2      	b.n	8011410 <LCD_InitLUT+0x4c>
 801142a:	3401      	adds	r4, #1
 801142c:	e7d0      	b.n	80113d0 <LCD_InitLUT+0xc>
 801142e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011432:	bf00      	nop
 8011434:	20000084 	.word	0x20000084
 8011438:	20007738 	.word	0x20007738
 801143c:	08014ddc 	.word	0x08014ddc

08011440 <LCD_AA_SetAndMask>:
 8011440:	4b02      	ldr	r3, [pc, #8]	; (801144c <LCD_AA_SetAndMask+0xc>)
 8011442:	681a      	ldr	r2, [r3, #0]
 8011444:	6018      	str	r0, [r3, #0]
 8011446:	4610      	mov	r0, r2
 8011448:	4770      	bx	lr
 801144a:	bf00      	nop
 801144c:	2000011c 	.word	0x2000011c

08011450 <_GetWordWrap>:
 8011450:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011454:	2500      	movs	r5, #0
 8011456:	9001      	str	r0, [sp, #4]
 8011458:	4689      	mov	r9, r1
 801145a:	4690      	mov	r8, r2
 801145c:	46aa      	mov	sl, r5
 801145e:	462e      	mov	r6, r5
 8011460:	462c      	mov	r4, r5
 8011462:	462f      	mov	r7, r5
 8011464:	a801      	add	r0, sp, #4
 8011466:	f7fb fd43 	bl	800cef0 <GUI_UC__GetCharCodeInc>
 801146a:	2d00      	cmp	r5, #0
 801146c:	bf08      	it	eq
 801146e:	4605      	moveq	r5, r0
 8011470:	b108      	cbz	r0, 8011476 <_GetWordWrap+0x26>
 8011472:	280a      	cmp	r0, #10
 8011474:	d10b      	bne.n	801148e <_GetWordWrap+0x3e>
 8011476:	4626      	mov	r6, r4
 8011478:	2e00      	cmp	r6, #0
 801147a:	bf18      	it	ne
 801147c:	4634      	movne	r4, r6
 801147e:	f1b8 0f00 	cmp.w	r8, #0
 8011482:	d025      	beq.n	80114d0 <_GetWordWrap+0x80>
 8011484:	ebca 0707 	rsb	r7, sl, r7
 8011488:	f8c8 7000 	str.w	r7, [r8]
 801148c:	e020      	b.n	80114d0 <_GetWordWrap+0x80>
 801148e:	2820      	cmp	r0, #32
 8011490:	d01c      	beq.n	80114cc <_GetWordWrap+0x7c>
 8011492:	2d20      	cmp	r5, #32
 8011494:	d00e      	beq.n	80114b4 <_GetWordWrap+0x64>
 8011496:	4b10      	ldr	r3, [pc, #64]	; (80114d8 <_GetWordWrap+0x88>)
 8011498:	6819      	ldr	r1, [r3, #0]
 801149a:	4b10      	ldr	r3, [pc, #64]	; (80114dc <_GetWordWrap+0x8c>)
 801149c:	681a      	ldr	r2, [r3, #0]
 801149e:	2300      	movs	r3, #0
 80114a0:	4293      	cmp	r3, r2
 80114a2:	da09      	bge.n	80114b8 <_GetWordWrap+0x68>
 80114a4:	f831 e013 	ldrh.w	lr, [r1, r3, lsl #1]
 80114a8:	4586      	cmp	lr, r0
 80114aa:	d101      	bne.n	80114b0 <_GetWordWrap+0x60>
 80114ac:	1c66      	adds	r6, r4, #1
 80114ae:	e003      	b.n	80114b8 <_GetWordWrap+0x68>
 80114b0:	3301      	adds	r3, #1
 80114b2:	e7f5      	b.n	80114a0 <_GetWordWrap+0x50>
 80114b4:	4626      	mov	r6, r4
 80114b6:	2500      	movs	r5, #0
 80114b8:	f7fc fd80 	bl	800dfbc <GUI_GetCharDistX>
 80114bc:	4407      	add	r7, r0
 80114be:	454f      	cmp	r7, r9
 80114c0:	4682      	mov	sl, r0
 80114c2:	dd01      	ble.n	80114c8 <_GetWordWrap+0x78>
 80114c4:	2c00      	cmp	r4, #0
 80114c6:	d1d7      	bne.n	8011478 <_GetWordWrap+0x28>
 80114c8:	3401      	adds	r4, #1
 80114ca:	e7cb      	b.n	8011464 <_GetWordWrap+0x14>
 80114cc:	4626      	mov	r6, r4
 80114ce:	e7f3      	b.n	80114b8 <_GetWordWrap+0x68>
 80114d0:	4620      	mov	r0, r4
 80114d2:	b002      	add	sp, #8
 80114d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114d8:	20002bb0 	.word	0x20002bb0
 80114dc:	20002bb4 	.word	0x20002bb4

080114e0 <_GetCharWrap>:
 80114e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114e2:	2400      	movs	r4, #0
 80114e4:	9001      	str	r0, [sp, #4]
 80114e6:	460e      	mov	r6, r1
 80114e8:	4625      	mov	r5, r4
 80114ea:	a801      	add	r0, sp, #4
 80114ec:	f7fb fd00 	bl	800cef0 <GUI_UC__GetCharCodeInc>
 80114f0:	4607      	mov	r7, r0
 80114f2:	b148      	cbz	r0, 8011508 <_GetCharWrap+0x28>
 80114f4:	f7fc fd62 	bl	800dfbc <GUI_GetCharDistX>
 80114f8:	4405      	add	r5, r0
 80114fa:	b10c      	cbz	r4, 8011500 <_GetCharWrap+0x20>
 80114fc:	42b5      	cmp	r5, r6
 80114fe:	dc03      	bgt.n	8011508 <_GetCharWrap+0x28>
 8011500:	2f0a      	cmp	r7, #10
 8011502:	d001      	beq.n	8011508 <_GetCharWrap+0x28>
 8011504:	3401      	adds	r4, #1
 8011506:	e7f0      	b.n	80114ea <_GetCharWrap+0xa>
 8011508:	4620      	mov	r0, r4
 801150a:	b003      	add	sp, #12
 801150c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08011510 <_WrapGetNumCharsDisp>:
 8011510:	2a01      	cmp	r2, #1
 8011512:	b510      	push	{r4, lr}
 8011514:	d005      	beq.n	8011522 <_WrapGetNumCharsDisp+0x12>
 8011516:	2a02      	cmp	r2, #2
 8011518:	d108      	bne.n	801152c <_WrapGetNumCharsDisp+0x1c>
 801151a:	4b07      	ldr	r3, [pc, #28]	; (8011538 <_WrapGetNumCharsDisp+0x28>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	4798      	blx	r3
 8011520:	bd10      	pop	{r4, pc}
 8011522:	4a06      	ldr	r2, [pc, #24]	; (801153c <_WrapGetNumCharsDisp+0x2c>)
 8011524:	6814      	ldr	r4, [r2, #0]
 8011526:	461a      	mov	r2, r3
 8011528:	47a0      	blx	r4
 801152a:	bd10      	pop	{r4, pc}
 801152c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8011530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011534:	f7fc bc88 	b.w	800de48 <GUI__GetLineNumChars>
 8011538:	20000120 	.word	0x20000120
 801153c:	20000124 	.word	0x20000124

08011540 <GUI__WrapGetNumCharsDisp>:
 8011540:	2300      	movs	r3, #0
 8011542:	f7ff bfe5 	b.w	8011510 <_WrapGetNumCharsDisp>

08011546 <GUI__WrapGetNumCharsToNextLine>:
 8011546:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011548:	b085      	sub	sp, #20
 801154a:	ab03      	add	r3, sp, #12
 801154c:	4617      	mov	r7, r2
 801154e:	460e      	mov	r6, r1
 8011550:	9001      	str	r0, [sp, #4]
 8011552:	f7ff ffdd 	bl	8011510 <_WrapGetNumCharsDisp>
 8011556:	9d01      	ldr	r5, [sp, #4]
 8011558:	4604      	mov	r4, r0
 801155a:	4621      	mov	r1, r4
 801155c:	4628      	mov	r0, r5
 801155e:	f7fb fcdb 	bl	800cf18 <GUI_UC__NumChars2NumBytes>
 8011562:	4428      	add	r0, r5
 8011564:	ad04      	add	r5, sp, #16
 8011566:	f845 0d0c 	str.w	r0, [r5, #-12]!
 801156a:	4628      	mov	r0, r5
 801156c:	f7fb fcc0 	bl	800cef0 <GUI_UC__GetCharCodeInc>
 8011570:	280a      	cmp	r0, #10
 8011572:	d101      	bne.n	8011578 <GUI__WrapGetNumCharsToNextLine+0x32>
 8011574:	3401      	adds	r4, #1
 8011576:	e012      	b.n	801159e <GUI__WrapGetNumCharsToNextLine+0x58>
 8011578:	2f01      	cmp	r7, #1
 801157a:	d110      	bne.n	801159e <GUI__WrapGetNumCharsToNextLine+0x58>
 801157c:	2820      	cmp	r0, #32
 801157e:	d10e      	bne.n	801159e <GUI__WrapGetNumCharsToNextLine+0x58>
 8011580:	f7fc fd1c 	bl	800dfbc <GUI_GetCharDistX>
 8011584:	4607      	mov	r7, r0
 8011586:	9b03      	ldr	r3, [sp, #12]
 8011588:	429e      	cmp	r6, r3
 801158a:	db08      	blt.n	801159e <GUI__WrapGetNumCharsToNextLine+0x58>
 801158c:	443b      	add	r3, r7
 801158e:	4628      	mov	r0, r5
 8011590:	9303      	str	r3, [sp, #12]
 8011592:	f7fb fcad 	bl	800cef0 <GUI_UC__GetCharCodeInc>
 8011596:	2820      	cmp	r0, #32
 8011598:	f104 0401 	add.w	r4, r4, #1
 801159c:	d0f3      	beq.n	8011586 <GUI__WrapGetNumCharsToNextLine+0x40>
 801159e:	4620      	mov	r0, r4
 80115a0:	b005      	add	sp, #20
 80115a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080115a4 <GUI__WrapGetNumBytesToNextLine>:
 80115a4:	b510      	push	{r4, lr}
 80115a6:	4604      	mov	r4, r0
 80115a8:	f7ff ffcd 	bl	8011546 <GUI__WrapGetNumCharsToNextLine>
 80115ac:	4601      	mov	r1, r0
 80115ae:	4620      	mov	r0, r4
 80115b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115b4:	f7fb bcb0 	b.w	800cf18 <GUI_UC__NumChars2NumBytes>

080115b8 <GUI__ExpandPixelIndicesEx>:
 80115b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115bc:	1e0c      	subs	r4, r1, #0
 80115be:	4605      	mov	r5, r0
 80115c0:	f340 80b3 	ble.w	801172a <GUI__ExpandPixelIndicesEx+0x172>
 80115c4:	2a08      	cmp	r2, #8
 80115c6:	685f      	ldr	r7, [r3, #4]
 80115c8:	dd04      	ble.n	80115d4 <GUI__ExpandPixelIndicesEx+0x1c>
 80115ca:	2a10      	cmp	r2, #16
 80115cc:	f340 8098 	ble.w	8011700 <GUI__ExpandPixelIndicesEx+0x148>
 80115d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115d4:	3a01      	subs	r2, #1
 80115d6:	2a07      	cmp	r2, #7
 80115d8:	f200 80a7 	bhi.w	801172a <GUI__ExpandPixelIndicesEx+0x172>
 80115dc:	e8df f002 	tbb	[pc, r2]
 80115e0:	58a52d04 	.word	0x58a52d04
 80115e4:	83a5a5a5 	.word	0x83a5a5a5
 80115e8:	1e66      	subs	r6, r4, #1
 80115ea:	10f2      	asrs	r2, r6, #3
 80115ec:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80115f0:	3b01      	subs	r3, #1
 80115f2:	eb05 0802 	add.w	r8, r5, r2
 80115f6:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 80115fa:	f006 0607 	and.w	r6, r6, #7
 80115fe:	f815 a002 	ldrb.w	sl, [r5, r2]
 8011602:	2580      	movs	r5, #128	; 0x80
 8011604:	4135      	asrs	r5, r6
 8011606:	f108 38ff 	add.w	r8, r8, #4294967295
 801160a:	b2ed      	uxtb	r5, r5
 801160c:	f1c6 0307 	rsb	r3, r6, #7
 8011610:	ea0a 0005 	and.w	r0, sl, r5
 8011614:	4118      	asrs	r0, r3
 8011616:	47b8      	blx	r7
 8011618:	f849 0904 	str.w	r0, [r9], #-4
 801161c:	b936      	cbnz	r6, 801162c <GUI__ExpandPixelIndicesEx+0x74>
 801161e:	f898 a000 	ldrb.w	sl, [r8]
 8011622:	2501      	movs	r5, #1
 8011624:	f108 38ff 	add.w	r8, r8, #4294967295
 8011628:	2607      	movs	r6, #7
 801162a:	e002      	b.n	8011632 <GUI__ExpandPixelIndicesEx+0x7a>
 801162c:	006d      	lsls	r5, r5, #1
 801162e:	3e01      	subs	r6, #1
 8011630:	b2ed      	uxtb	r5, r5
 8011632:	3c01      	subs	r4, #1
 8011634:	d1ea      	bne.n	801160c <GUI__ExpandPixelIndicesEx+0x54>
 8011636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801163a:	1e66      	subs	r6, r4, #1
 801163c:	10b2      	asrs	r2, r6, #2
 801163e:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8011642:	3b01      	subs	r3, #1
 8011644:	f006 0603 	and.w	r6, r6, #3
 8011648:	eb05 0802 	add.w	r8, r5, r2
 801164c:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8011650:	f815 a002 	ldrb.w	sl, [r5, r2]
 8011654:	0073      	lsls	r3, r6, #1
 8011656:	25c0      	movs	r5, #192	; 0xc0
 8011658:	411d      	asrs	r5, r3
 801165a:	f108 38ff 	add.w	r8, r8, #4294967295
 801165e:	b2ed      	uxtb	r5, r5
 8011660:	0073      	lsls	r3, r6, #1
 8011662:	f1c3 0306 	rsb	r3, r3, #6
 8011666:	ea0a 0005 	and.w	r0, sl, r5
 801166a:	4118      	asrs	r0, r3
 801166c:	47b8      	blx	r7
 801166e:	f849 0904 	str.w	r0, [r9], #-4
 8011672:	b936      	cbnz	r6, 8011682 <GUI__ExpandPixelIndicesEx+0xca>
 8011674:	2503      	movs	r5, #3
 8011676:	f898 a000 	ldrb.w	sl, [r8]
 801167a:	462e      	mov	r6, r5
 801167c:	f108 38ff 	add.w	r8, r8, #4294967295
 8011680:	e002      	b.n	8011688 <GUI__ExpandPixelIndicesEx+0xd0>
 8011682:	00ad      	lsls	r5, r5, #2
 8011684:	3e01      	subs	r6, #1
 8011686:	b2ed      	uxtb	r5, r5
 8011688:	3c01      	subs	r4, #1
 801168a:	d1e9      	bne.n	8011660 <GUI__ExpandPixelIndicesEx+0xa8>
 801168c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011690:	1e66      	subs	r6, r4, #1
 8011692:	1072      	asrs	r2, r6, #1
 8011694:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8011698:	3b01      	subs	r3, #1
 801169a:	f006 0601 	and.w	r6, r6, #1
 801169e:	eb05 0802 	add.w	r8, r5, r2
 80116a2:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 80116a6:	f815 a002 	ldrb.w	sl, [r5, r2]
 80116aa:	00b3      	lsls	r3, r6, #2
 80116ac:	25f0      	movs	r5, #240	; 0xf0
 80116ae:	411d      	asrs	r5, r3
 80116b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80116b4:	b2ed      	uxtb	r5, r5
 80116b6:	00b3      	lsls	r3, r6, #2
 80116b8:	f1c3 0304 	rsb	r3, r3, #4
 80116bc:	ea0a 0005 	and.w	r0, sl, r5
 80116c0:	4118      	asrs	r0, r3
 80116c2:	47b8      	blx	r7
 80116c4:	f849 0904 	str.w	r0, [r9], #-4
 80116c8:	b936      	cbnz	r6, 80116d8 <GUI__ExpandPixelIndicesEx+0x120>
 80116ca:	f898 a000 	ldrb.w	sl, [r8]
 80116ce:	250f      	movs	r5, #15
 80116d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80116d4:	2601      	movs	r6, #1
 80116d6:	e002      	b.n	80116de <GUI__ExpandPixelIndicesEx+0x126>
 80116d8:	012d      	lsls	r5, r5, #4
 80116da:	b2ed      	uxtb	r5, r5
 80116dc:	2600      	movs	r6, #0
 80116de:	3c01      	subs	r4, #1
 80116e0:	d1e9      	bne.n	80116b6 <GUI__ExpandPixelIndicesEx+0xfe>
 80116e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116e6:	192e      	adds	r6, r5, r4
 80116e8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 80116ec:	1b34      	subs	r4, r6, r4
 80116ee:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 80116f2:	47b8      	blx	r7
 80116f4:	42a6      	cmp	r6, r4
 80116f6:	f845 0d04 	str.w	r0, [r5, #-4]!
 80116fa:	d1f8      	bne.n	80116ee <GUI__ExpandPixelIndicesEx+0x136>
 80116fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011700:	695e      	ldr	r6, [r3, #20]
 8011702:	b12e      	cbz	r6, 8011710 <GUI__ExpandPixelIndicesEx+0x158>
 8011704:	4629      	mov	r1, r5
 8011706:	4622      	mov	r2, r4
 8011708:	2302      	movs	r3, #2
 801170a:	47b0      	blx	r6
 801170c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011710:	0064      	lsls	r4, r4, #1
 8011712:	4425      	add	r5, r4
 8011714:	192e      	adds	r6, r5, r4
 8011716:	1b2c      	subs	r4, r5, r4
 8011718:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 801171c:	47b8      	blx	r7
 801171e:	42a5      	cmp	r5, r4
 8011720:	f846 0d04 	str.w	r0, [r6, #-4]!
 8011724:	d1f8      	bne.n	8011718 <GUI__ExpandPixelIndicesEx+0x160>
 8011726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801172a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801172e <_GetTwinArcPara>:
 801172e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011732:	fb01 f901 	mul.w	r9, r1, r1
 8011736:	1e47      	subs	r7, r0, #1
 8011738:	4604      	mov	r4, r0
 801173a:	4340      	muls	r0, r0
 801173c:	ebc9 0000 	rsb	r0, r9, r0
 8011740:	460d      	mov	r5, r1
 8011742:	4692      	mov	sl, r2
 8011744:	4698      	mov	r8, r3
 8011746:	9e08      	ldr	r6, [sp, #32]
 8011748:	f7fb f91f 	bl	800c98a <GUI__sqrt32>
 801174c:	42bd      	cmp	r5, r7
 801174e:	f8ca 0000 	str.w	r0, [sl]
 8011752:	da10      	bge.n	8011776 <_GetTwinArcPara+0x48>
 8011754:	fb07 f007 	mul.w	r0, r7, r7
 8011758:	ebc9 0000 	rsb	r0, r9, r0
 801175c:	f7fb f915 	bl	800c98a <GUI__sqrt32>
 8011760:	3c02      	subs	r4, #2
 8011762:	42a5      	cmp	r5, r4
 8011764:	f8c8 0000 	str.w	r0, [r8]
 8011768:	da03      	bge.n	8011772 <_GetTwinArcPara+0x44>
 801176a:	3801      	subs	r0, #1
 801176c:	6030      	str	r0, [r6, #0]
 801176e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011772:	2300      	movs	r3, #0
 8011774:	e002      	b.n	801177c <_GetTwinArcPara+0x4e>
 8011776:	2300      	movs	r3, #0
 8011778:	f8c8 3000 	str.w	r3, [r8]
 801177c:	6033      	str	r3, [r6, #0]
 801177e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08011784 <GUI__DrawTwinArc2>:
 8011784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011788:	461c      	mov	r4, r3
 801178a:	4b57      	ldr	r3, [pc, #348]	; (80118e8 <GUI__DrawTwinArc2+0x164>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8011790:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8011792:	b08b      	sub	sp, #44	; 0x2c
 8011794:	4415      	add	r5, r2
 8011796:	1e63      	subs	r3, r4, #1
 8011798:	19c6      	adds	r6, r0, r7
 801179a:	442b      	add	r3, r5
 801179c:	440f      	add	r7, r1
 801179e:	a808      	add	r0, sp, #32
 80117a0:	f8ad 6020 	strh.w	r6, [sp, #32]
 80117a4:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80117a8:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 80117ac:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80117b0:	f7f7 fffe 	bl	80097b0 <WM__InitIVRSearch>
 80117b4:	2800      	cmp	r0, #0
 80117b6:	f000 8094 	beq.w	80118e2 <GUI__DrawTwinArc2+0x15e>
 80117ba:	2c00      	cmp	r4, #0
 80117bc:	dc02      	bgt.n	80117c4 <GUI__DrawTwinArc2+0x40>
 80117be:	f7f7 ff35 	bl	800962c <WM__GetNextIVR>
 80117c2:	e7f7      	b.n	80117b4 <GUI__DrawTwinArc2+0x30>
 80117c4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80117c6:	f7fc f90a 	bl	800d9de <GUI_SetColor>
 80117ca:	f104 38ff 	add.w	r8, r4, #4294967295
 80117ce:	4641      	mov	r1, r8
 80117d0:	f118 38ff 	adds.w	r8, r8, #4294967295
 80117d4:	d324      	bcc.n	8011820 <GUI__DrawTwinArc2+0x9c>
 80117d6:	ab07      	add	r3, sp, #28
 80117d8:	9300      	str	r3, [sp, #0]
 80117da:	4620      	mov	r0, r4
 80117dc:	aa05      	add	r2, sp, #20
 80117de:	ab06      	add	r3, sp, #24
 80117e0:	f7ff ffa5 	bl	801172e <_GetTwinArcPara>
 80117e4:	f104 39ff 	add.w	r9, r4, #4294967295
 80117e8:	f8dd a018 	ldr.w	sl, [sp, #24]
 80117ec:	9905      	ldr	r1, [sp, #20]
 80117ee:	1930      	adds	r0, r6, r4
 80117f0:	44a9      	add	r9, r5
 80117f2:	ebc8 0909 	rsb	r9, r8, r9
 80117f6:	ebc4 0b07 	rsb	fp, r4, r7
 80117fa:	ebca 0200 	rsb	r2, sl, r0
 80117fe:	eb0b 0301 	add.w	r3, fp, r1
 8011802:	1a40      	subs	r0, r0, r1
 8011804:	3a01      	subs	r2, #1
 8011806:	4649      	mov	r1, r9
 8011808:	9302      	str	r3, [sp, #8]
 801180a:	f7fa fcdb 	bl	800c1c4 <LCD_DrawHLine>
 801180e:	9b02      	ldr	r3, [sp, #8]
 8011810:	eb0b 000a 	add.w	r0, fp, sl
 8011814:	3001      	adds	r0, #1
 8011816:	4649      	mov	r1, r9
 8011818:	461a      	mov	r2, r3
 801181a:	f7fa fcd3 	bl	800c1c4 <LCD_DrawHLine>
 801181e:	e7d6      	b.n	80117ce <GUI__DrawTwinArc2+0x4a>
 8011820:	2c01      	cmp	r4, #1
 8011822:	d0cc      	beq.n	80117be <GUI__DrawTwinArc2+0x3a>
 8011824:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011826:	f7fc f8da 	bl	800d9de <GUI_SetColor>
 801182a:	f1a4 0902 	sub.w	r9, r4, #2
 801182e:	eb05 0b04 	add.w	fp, r5, r4
 8011832:	f105 0802 	add.w	r8, r5, #2
 8011836:	f1b9 0f00 	cmp.w	r9, #0
 801183a:	d027      	beq.n	801188c <GUI__DrawTwinArc2+0x108>
 801183c:	ab07      	add	r3, sp, #28
 801183e:	4649      	mov	r1, r9
 8011840:	9300      	str	r3, [sp, #0]
 8011842:	4620      	mov	r0, r4
 8011844:	aa05      	add	r2, sp, #20
 8011846:	ab06      	add	r3, sp, #24
 8011848:	f7ff ff71 	bl	801172e <_GetTwinArcPara>
 801184c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011850:	9906      	ldr	r1, [sp, #24]
 8011852:	1930      	adds	r0, r6, r4
 8011854:	1b3b      	subs	r3, r7, r4
 8011856:	ebca 0200 	rsb	r2, sl, r0
 801185a:	eb03 0c01 	add.w	ip, r3, r1
 801185e:	1a40      	subs	r0, r0, r1
 8011860:	3a01      	subs	r2, #1
 8011862:	4641      	mov	r1, r8
 8011864:	9302      	str	r3, [sp, #8]
 8011866:	f8cd c00c 	str.w	ip, [sp, #12]
 801186a:	f7fa fcab 	bl	800c1c4 <LCD_DrawHLine>
 801186e:	9b02      	ldr	r3, [sp, #8]
 8011870:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011874:	eb03 000a 	add.w	r0, r3, sl
 8011878:	4641      	mov	r1, r8
 801187a:	3001      	adds	r0, #1
 801187c:	4662      	mov	r2, ip
 801187e:	f7fa fca1 	bl	800c1c4 <LCD_DrawHLine>
 8011882:	f109 39ff 	add.w	r9, r9, #4294967295
 8011886:	f108 0801 	add.w	r8, r8, #1
 801188a:	e7d4      	b.n	8011836 <GUI__DrawTwinArc2+0xb2>
 801188c:	2c02      	cmp	r4, #2
 801188e:	d096      	beq.n	80117be <GUI__DrawTwinArc2+0x3a>
 8011890:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011892:	f7fc f8a4 	bl	800d9de <GUI_SetColor>
 8011896:	f1c4 0303 	rsb	r3, r4, #3
 801189a:	f1a4 0803 	sub.w	r8, r4, #3
 801189e:	449b      	add	fp, r3
 80118a0:	f1b8 0f00 	cmp.w	r8, #0
 80118a4:	d08b      	beq.n	80117be <GUI__DrawTwinArc2+0x3a>
 80118a6:	ab07      	add	r3, sp, #28
 80118a8:	4641      	mov	r1, r8
 80118aa:	9300      	str	r3, [sp, #0]
 80118ac:	4620      	mov	r0, r4
 80118ae:	ab06      	add	r3, sp, #24
 80118b0:	aa05      	add	r2, sp, #20
 80118b2:	f7ff ff3c 	bl	801172e <_GetTwinArcPara>
 80118b6:	9807      	ldr	r0, [sp, #28]
 80118b8:	1932      	adds	r2, r6, r4
 80118ba:	ebc4 0907 	rsb	r9, r4, r7
 80118be:	4659      	mov	r1, fp
 80118c0:	eb09 0a00 	add.w	sl, r9, r0
 80118c4:	1a10      	subs	r0, r2, r0
 80118c6:	3a01      	subs	r2, #1
 80118c8:	f7fa fc7c 	bl	800c1c4 <LCD_DrawHLine>
 80118cc:	4659      	mov	r1, fp
 80118ce:	f109 0001 	add.w	r0, r9, #1
 80118d2:	4652      	mov	r2, sl
 80118d4:	f7fa fc76 	bl	800c1c4 <LCD_DrawHLine>
 80118d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80118dc:	f10b 0b01 	add.w	fp, fp, #1
 80118e0:	e7de      	b.n	80118a0 <GUI__DrawTwinArc2+0x11c>
 80118e2:	b00b      	add	sp, #44	; 0x2c
 80118e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118e8:	20000084 	.word	0x20000084

080118ec <GUI__CompactPixelIndices>:
 80118ec:	2a08      	cmp	r2, #8
 80118ee:	b510      	push	{r4, lr}
 80118f0:	dd0e      	ble.n	8011910 <GUI__CompactPixelIndices+0x24>
 80118f2:	2a10      	cmp	r2, #16
 80118f4:	dc0a      	bgt.n	801190c <GUI__CompactPixelIndices+0x20>
 80118f6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80118fa:	4603      	mov	r3, r0
 80118fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8011900:	f823 2b02 	strh.w	r2, [r3], #2
 8011904:	428b      	cmp	r3, r1
 8011906:	d1f9      	bne.n	80118fc <GUI__CompactPixelIndices+0x10>
 8011908:	2001      	movs	r0, #1
 801190a:	bd10      	pop	{r4, pc}
 801190c:	2000      	movs	r0, #0
 801190e:	bd10      	pop	{r4, pc}
 8011910:	2a02      	cmp	r2, #2
 8011912:	d06d      	beq.n	80119f0 <GUI__CompactPixelIndices+0x104>
 8011914:	2a04      	cmp	r2, #4
 8011916:	d054      	beq.n	80119c2 <GUI__CompactPixelIndices+0xd6>
 8011918:	2a01      	cmp	r2, #1
 801191a:	f040 8095 	bne.w	8011a48 <GUI__CompactPixelIndices+0x15c>
 801191e:	4604      	mov	r4, r0
 8011920:	6803      	ldr	r3, [r0, #0]
 8011922:	2901      	cmp	r1, #1
 8011924:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8011928:	b2db      	uxtb	r3, r3
 801192a:	d047      	beq.n	80119bc <GUI__CompactPixelIndices+0xd0>
 801192c:	6842      	ldr	r2, [r0, #4]
 801192e:	2902      	cmp	r1, #2
 8011930:	f002 0201 	and.w	r2, r2, #1
 8011934:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8011938:	d102      	bne.n	8011940 <GUI__CompactPixelIndices+0x54>
 801193a:	f100 0208 	add.w	r2, r0, #8
 801193e:	e03e      	b.n	80119be <GUI__CompactPixelIndices+0xd2>
 8011940:	6882      	ldr	r2, [r0, #8]
 8011942:	2903      	cmp	r1, #3
 8011944:	f002 0201 	and.w	r2, r2, #1
 8011948:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 801194c:	d102      	bne.n	8011954 <GUI__CompactPixelIndices+0x68>
 801194e:	f100 020c 	add.w	r2, r0, #12
 8011952:	e034      	b.n	80119be <GUI__CompactPixelIndices+0xd2>
 8011954:	68c2      	ldr	r2, [r0, #12]
 8011956:	2904      	cmp	r1, #4
 8011958:	f002 0201 	and.w	r2, r2, #1
 801195c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8011960:	d102      	bne.n	8011968 <GUI__CompactPixelIndices+0x7c>
 8011962:	f100 0210 	add.w	r2, r0, #16
 8011966:	e02a      	b.n	80119be <GUI__CompactPixelIndices+0xd2>
 8011968:	6902      	ldr	r2, [r0, #16]
 801196a:	2905      	cmp	r1, #5
 801196c:	f002 0201 	and.w	r2, r2, #1
 8011970:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8011974:	d102      	bne.n	801197c <GUI__CompactPixelIndices+0x90>
 8011976:	f100 0214 	add.w	r2, r0, #20
 801197a:	e020      	b.n	80119be <GUI__CompactPixelIndices+0xd2>
 801197c:	6942      	ldr	r2, [r0, #20]
 801197e:	2906      	cmp	r1, #6
 8011980:	f002 0201 	and.w	r2, r2, #1
 8011984:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8011988:	d102      	bne.n	8011990 <GUI__CompactPixelIndices+0xa4>
 801198a:	f100 0218 	add.w	r2, r0, #24
 801198e:	e016      	b.n	80119be <GUI__CompactPixelIndices+0xd2>
 8011990:	6982      	ldr	r2, [r0, #24]
 8011992:	3907      	subs	r1, #7
 8011994:	f002 0201 	and.w	r2, r2, #1
 8011998:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 801199c:	d102      	bne.n	80119a4 <GUI__CompactPixelIndices+0xb8>
 801199e:	f100 021c 	add.w	r2, r0, #28
 80119a2:	e005      	b.n	80119b0 <GUI__CompactPixelIndices+0xc4>
 80119a4:	f100 0220 	add.w	r2, r0, #32
 80119a8:	69c0      	ldr	r0, [r0, #28]
 80119aa:	f000 0001 	and.w	r0, r0, #1
 80119ae:	4303      	orrs	r3, r0
 80119b0:	f804 3b01 	strb.w	r3, [r4], #1
 80119b4:	2900      	cmp	r1, #0
 80119b6:	d0a7      	beq.n	8011908 <GUI__CompactPixelIndices+0x1c>
 80119b8:	4610      	mov	r0, r2
 80119ba:	e7b1      	b.n	8011920 <GUI__CompactPixelIndices+0x34>
 80119bc:	1d02      	adds	r2, r0, #4
 80119be:	2100      	movs	r1, #0
 80119c0:	e7f6      	b.n	80119b0 <GUI__CompactPixelIndices+0xc4>
 80119c2:	4602      	mov	r2, r0
 80119c4:	6803      	ldr	r3, [r0, #0]
 80119c6:	2901      	cmp	r1, #1
 80119c8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80119cc:	b2db      	uxtb	r3, r3
 80119ce:	d102      	bne.n	80119d6 <GUI__CompactPixelIndices+0xea>
 80119d0:	1d04      	adds	r4, r0, #4
 80119d2:	2100      	movs	r1, #0
 80119d4:	e006      	b.n	80119e4 <GUI__CompactPixelIndices+0xf8>
 80119d6:	f100 0408 	add.w	r4, r0, #8
 80119da:	6840      	ldr	r0, [r0, #4]
 80119dc:	f000 000f 	and.w	r0, r0, #15
 80119e0:	4303      	orrs	r3, r0
 80119e2:	3902      	subs	r1, #2
 80119e4:	f802 3b01 	strb.w	r3, [r2], #1
 80119e8:	2900      	cmp	r1, #0
 80119ea:	d08d      	beq.n	8011908 <GUI__CompactPixelIndices+0x1c>
 80119ec:	4620      	mov	r0, r4
 80119ee:	e7e9      	b.n	80119c4 <GUI__CompactPixelIndices+0xd8>
 80119f0:	4604      	mov	r4, r0
 80119f2:	6803      	ldr	r3, [r0, #0]
 80119f4:	2901      	cmp	r1, #1
 80119f6:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80119fa:	b2db      	uxtb	r3, r3
 80119fc:	d021      	beq.n	8011a42 <GUI__CompactPixelIndices+0x156>
 80119fe:	6842      	ldr	r2, [r0, #4]
 8011a00:	2902      	cmp	r1, #2
 8011a02:	f002 0203 	and.w	r2, r2, #3
 8011a06:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8011a0a:	d102      	bne.n	8011a12 <GUI__CompactPixelIndices+0x126>
 8011a0c:	f100 0208 	add.w	r2, r0, #8
 8011a10:	e018      	b.n	8011a44 <GUI__CompactPixelIndices+0x158>
 8011a12:	6882      	ldr	r2, [r0, #8]
 8011a14:	2903      	cmp	r1, #3
 8011a16:	f002 0203 	and.w	r2, r2, #3
 8011a1a:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8011a1e:	d102      	bne.n	8011a26 <GUI__CompactPixelIndices+0x13a>
 8011a20:	f100 020c 	add.w	r2, r0, #12
 8011a24:	e00e      	b.n	8011a44 <GUI__CompactPixelIndices+0x158>
 8011a26:	f100 0210 	add.w	r2, r0, #16
 8011a2a:	68c0      	ldr	r0, [r0, #12]
 8011a2c:	f000 0003 	and.w	r0, r0, #3
 8011a30:	4303      	orrs	r3, r0
 8011a32:	3904      	subs	r1, #4
 8011a34:	f804 3b01 	strb.w	r3, [r4], #1
 8011a38:	2900      	cmp	r1, #0
 8011a3a:	f43f af65 	beq.w	8011908 <GUI__CompactPixelIndices+0x1c>
 8011a3e:	4610      	mov	r0, r2
 8011a40:	e7d7      	b.n	80119f2 <GUI__CompactPixelIndices+0x106>
 8011a42:	1d02      	adds	r2, r0, #4
 8011a44:	2100      	movs	r1, #0
 8011a46:	e7f5      	b.n	8011a34 <GUI__CompactPixelIndices+0x148>
 8011a48:	2300      	movs	r3, #0
 8011a4a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8011a4e:	54c2      	strb	r2, [r0, r3]
 8011a50:	3301      	adds	r3, #1
 8011a52:	428b      	cmp	r3, r1
 8011a54:	d1f9      	bne.n	8011a4a <GUI__CompactPixelIndices+0x15e>
 8011a56:	e757      	b.n	8011908 <GUI__CompactPixelIndices+0x1c>

08011a58 <GUI__ConvertColor2Index>:
 8011a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011a60:	681e      	ldr	r6, [r3, #0]
 8011a62:	f1b8 0f00 	cmp.w	r8, #0
 8011a66:	bf08      	it	eq
 8011a68:	4680      	moveq	r8, r0
 8011a6a:	2a08      	cmp	r2, #8
 8011a6c:	4604      	mov	r4, r0
 8011a6e:	460d      	mov	r5, r1
 8011a70:	dd05      	ble.n	8011a7e <GUI__ConvertColor2Index+0x26>
 8011a72:	2a10      	cmp	r2, #16
 8011a74:	f340 80b6 	ble.w	8011be4 <GUI__ConvertColor2Index+0x18c>
 8011a78:	2000      	movs	r0, #0
 8011a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a7e:	3a01      	subs	r2, #1
 8011a80:	2a07      	cmp	r2, #7
 8011a82:	f200 80a4 	bhi.w	8011bce <GUI__ConvertColor2Index+0x176>
 8011a86:	e8df f002 	tbb	[pc, r2]
 8011a8a:	6111      	.short	0x6111
 8011a8c:	a2a287a2 	.word	0xa2a287a2
 8011a90:	92a2      	.short	0x92a2
 8011a92:	69e0      	ldr	r0, [r4, #28]
 8011a94:	47b0      	blx	r6
 8011a96:	4338      	orrs	r0, r7
 8011a98:	f104 0920 	add.w	r9, r4, #32
 8011a9c:	b2c7      	uxtb	r7, r0
 8011a9e:	3d08      	subs	r5, #8
 8011aa0:	f808 7b01 	strb.w	r7, [r8], #1
 8011aa4:	2d00      	cmp	r5, #0
 8011aa6:	f000 8092 	beq.w	8011bce <GUI__ConvertColor2Index+0x176>
 8011aaa:	464c      	mov	r4, r9
 8011aac:	6820      	ldr	r0, [r4, #0]
 8011aae:	47b0      	blx	r6
 8011ab0:	2d01      	cmp	r5, #1
 8011ab2:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8011ab6:	b2c7      	uxtb	r7, r0
 8011ab8:	f000 808c 	beq.w	8011bd4 <GUI__ConvertColor2Index+0x17c>
 8011abc:	6860      	ldr	r0, [r4, #4]
 8011abe:	47b0      	blx	r6
 8011ac0:	2d02      	cmp	r5, #2
 8011ac2:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 8011ac6:	b2c7      	uxtb	r7, r0
 8011ac8:	d102      	bne.n	8011ad0 <GUI__ConvertColor2Index+0x78>
 8011aca:	f104 0908 	add.w	r9, r4, #8
 8011ace:	e083      	b.n	8011bd8 <GUI__ConvertColor2Index+0x180>
 8011ad0:	68a0      	ldr	r0, [r4, #8]
 8011ad2:	47b0      	blx	r6
 8011ad4:	2d03      	cmp	r5, #3
 8011ad6:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 8011ada:	b2c7      	uxtb	r7, r0
 8011adc:	d102      	bne.n	8011ae4 <GUI__ConvertColor2Index+0x8c>
 8011ade:	f104 090c 	add.w	r9, r4, #12
 8011ae2:	e079      	b.n	8011bd8 <GUI__ConvertColor2Index+0x180>
 8011ae4:	68e0      	ldr	r0, [r4, #12]
 8011ae6:	47b0      	blx	r6
 8011ae8:	2d04      	cmp	r5, #4
 8011aea:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8011aee:	b2c7      	uxtb	r7, r0
 8011af0:	d102      	bne.n	8011af8 <GUI__ConvertColor2Index+0xa0>
 8011af2:	f104 0910 	add.w	r9, r4, #16
 8011af6:	e06f      	b.n	8011bd8 <GUI__ConvertColor2Index+0x180>
 8011af8:	6920      	ldr	r0, [r4, #16]
 8011afa:	47b0      	blx	r6
 8011afc:	2d05      	cmp	r5, #5
 8011afe:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 8011b02:	b2c7      	uxtb	r7, r0
 8011b04:	d102      	bne.n	8011b0c <GUI__ConvertColor2Index+0xb4>
 8011b06:	f104 0914 	add.w	r9, r4, #20
 8011b0a:	e065      	b.n	8011bd8 <GUI__ConvertColor2Index+0x180>
 8011b0c:	6960      	ldr	r0, [r4, #20]
 8011b0e:	47b0      	blx	r6
 8011b10:	2d06      	cmp	r5, #6
 8011b12:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8011b16:	b2c7      	uxtb	r7, r0
 8011b18:	d102      	bne.n	8011b20 <GUI__ConvertColor2Index+0xc8>
 8011b1a:	f104 0918 	add.w	r9, r4, #24
 8011b1e:	e05b      	b.n	8011bd8 <GUI__ConvertColor2Index+0x180>
 8011b20:	69a0      	ldr	r0, [r4, #24]
 8011b22:	47b0      	blx	r6
 8011b24:	2d07      	cmp	r5, #7
 8011b26:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 8011b2a:	b2c7      	uxtb	r7, r0
 8011b2c:	d1b1      	bne.n	8011a92 <GUI__ConvertColor2Index+0x3a>
 8011b2e:	f104 091c 	add.w	r9, r4, #28
 8011b32:	e051      	b.n	8011bd8 <GUI__ConvertColor2Index+0x180>
 8011b34:	68e0      	ldr	r0, [r4, #12]
 8011b36:	47b0      	blx	r6
 8011b38:	4338      	orrs	r0, r7
 8011b3a:	f104 0910 	add.w	r9, r4, #16
 8011b3e:	b2c7      	uxtb	r7, r0
 8011b40:	3d04      	subs	r5, #4
 8011b42:	f808 7b01 	strb.w	r7, [r8], #1
 8011b46:	2d00      	cmp	r5, #0
 8011b48:	d041      	beq.n	8011bce <GUI__ConvertColor2Index+0x176>
 8011b4a:	464c      	mov	r4, r9
 8011b4c:	6820      	ldr	r0, [r4, #0]
 8011b4e:	47b0      	blx	r6
 8011b50:	2d01      	cmp	r5, #1
 8011b52:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8011b56:	b2c7      	uxtb	r7, r0
 8011b58:	d040      	beq.n	8011bdc <GUI__ConvertColor2Index+0x184>
 8011b5a:	6860      	ldr	r0, [r4, #4]
 8011b5c:	47b0      	blx	r6
 8011b5e:	2d02      	cmp	r5, #2
 8011b60:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8011b64:	b2c7      	uxtb	r7, r0
 8011b66:	d102      	bne.n	8011b6e <GUI__ConvertColor2Index+0x116>
 8011b68:	f104 0908 	add.w	r9, r4, #8
 8011b6c:	e038      	b.n	8011be0 <GUI__ConvertColor2Index+0x188>
 8011b6e:	68a0      	ldr	r0, [r4, #8]
 8011b70:	47b0      	blx	r6
 8011b72:	2d03      	cmp	r5, #3
 8011b74:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8011b78:	b2c7      	uxtb	r7, r0
 8011b7a:	d1db      	bne.n	8011b34 <GUI__ConvertColor2Index+0xdc>
 8011b7c:	f104 090c 	add.w	r9, r4, #12
 8011b80:	e02e      	b.n	8011be0 <GUI__ConvertColor2Index+0x188>
 8011b82:	6860      	ldr	r0, [r4, #4]
 8011b84:	47b0      	blx	r6
 8011b86:	4338      	orrs	r0, r7
 8011b88:	f104 0908 	add.w	r9, r4, #8
 8011b8c:	b2c7      	uxtb	r7, r0
 8011b8e:	3d02      	subs	r5, #2
 8011b90:	f808 7b01 	strb.w	r7, [r8], #1
 8011b94:	b1dd      	cbz	r5, 8011bce <GUI__ConvertColor2Index+0x176>
 8011b96:	464c      	mov	r4, r9
 8011b98:	6820      	ldr	r0, [r4, #0]
 8011b9a:	47b0      	blx	r6
 8011b9c:	2d01      	cmp	r5, #1
 8011b9e:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8011ba2:	b2c7      	uxtb	r7, r0
 8011ba4:	d1ed      	bne.n	8011b82 <GUI__ConvertColor2Index+0x12a>
 8011ba6:	f104 0904 	add.w	r9, r4, #4
 8011baa:	2500      	movs	r5, #0
 8011bac:	e7f0      	b.n	8011b90 <GUI__ConvertColor2Index+0x138>
 8011bae:	691f      	ldr	r7, [r3, #16]
 8011bb0:	b12f      	cbz	r7, 8011bbe <GUI__ConvertColor2Index+0x166>
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	4641      	mov	r1, r8
 8011bb6:	462a      	mov	r2, r5
 8011bb8:	2301      	movs	r3, #1
 8011bba:	47b8      	blx	r7
 8011bbc:	e007      	b.n	8011bce <GUI__ConvertColor2Index+0x176>
 8011bbe:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 8011bc2:	47b0      	blx	r6
 8011bc4:	f808 0007 	strb.w	r0, [r8, r7]
 8011bc8:	3701      	adds	r7, #1
 8011bca:	42bd      	cmp	r5, r7
 8011bcc:	d1f7      	bne.n	8011bbe <GUI__ConvertColor2Index+0x166>
 8011bce:	2001      	movs	r0, #1
 8011bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bd4:	f104 0904 	add.w	r9, r4, #4
 8011bd8:	2500      	movs	r5, #0
 8011bda:	e761      	b.n	8011aa0 <GUI__ConvertColor2Index+0x48>
 8011bdc:	f104 0904 	add.w	r9, r4, #4
 8011be0:	2500      	movs	r5, #0
 8011be2:	e7ae      	b.n	8011b42 <GUI__ConvertColor2Index+0xea>
 8011be4:	691f      	ldr	r7, [r3, #16]
 8011be6:	b11f      	cbz	r7, 8011bf0 <GUI__ConvertColor2Index+0x198>
 8011be8:	4641      	mov	r1, r8
 8011bea:	462a      	mov	r2, r5
 8011bec:	2302      	movs	r3, #2
 8011bee:	e7e4      	b.n	8011bba <GUI__ConvertColor2Index+0x162>
 8011bf0:	f854 0b04 	ldr.w	r0, [r4], #4
 8011bf4:	47b0      	blx	r6
 8011bf6:	3d01      	subs	r5, #1
 8011bf8:	f828 0b02 	strh.w	r0, [r8], #2
 8011bfc:	d1f8      	bne.n	8011bf0 <GUI__ConvertColor2Index+0x198>
 8011bfe:	e7e6      	b.n	8011bce <GUI__ConvertColor2Index+0x176>

08011c00 <GUI__CompactPixelIndicesEx>:
 8011c00:	b513      	push	{r0, r1, r4, lr}
 8011c02:	2400      	movs	r4, #0
 8011c04:	9400      	str	r4, [sp, #0]
 8011c06:	f7ff ff27 	bl	8011a58 <GUI__ConvertColor2Index>
 8011c0a:	b002      	add	sp, #8
 8011c0c:	bd10      	pop	{r4, pc}

08011c0e <_GetCharCode>:
 8011c0e:	7800      	ldrb	r0, [r0, #0]
 8011c10:	4770      	bx	lr

08011c12 <_GetCharSize>:
 8011c12:	2001      	movs	r0, #1
 8011c14:	4770      	bx	lr

08011c16 <_CalcSizeOfChar>:
 8011c16:	2001      	movs	r0, #1
 8011c18:	4770      	bx	lr

08011c1a <_Encode>:
 8011c1a:	7001      	strb	r1, [r0, #0]
 8011c1c:	2001      	movs	r0, #1
 8011c1e:	4770      	bx	lr

08011c20 <GUI_DrawHLine>:
 8011c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c22:	4f10      	ldr	r7, [pc, #64]	; (8011c64 <GUI_DrawHLine+0x44>)
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8011c28:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011c2a:	4405      	add	r5, r0
 8011c2c:	190e      	adds	r6, r1, r4
 8011c2e:	b2ab      	uxth	r3, r5
 8011c30:	4414      	add	r4, r2
 8011c32:	4668      	mov	r0, sp
 8011c34:	f8ad 6000 	strh.w	r6, [sp]
 8011c38:	f8ad 4004 	strh.w	r4, [sp, #4]
 8011c3c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011c40:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011c44:	f7f7 fdb4 	bl	80097b0 <WM__InitIVRSearch>
 8011c48:	b148      	cbz	r0, 8011c5e <GUI_DrawHLine+0x3e>
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c4e:	4630      	mov	r0, r6
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	4629      	mov	r1, r5
 8011c54:	4622      	mov	r2, r4
 8011c56:	4798      	blx	r3
 8011c58:	f7f7 fce8 	bl	800962c <WM__GetNextIVR>
 8011c5c:	e7f4      	b.n	8011c48 <GUI_DrawHLine+0x28>
 8011c5e:	b003      	add	sp, #12
 8011c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c62:	bf00      	nop
 8011c64:	20000084 	.word	0x20000084

08011c68 <GUI_DrawPixel>:
 8011c68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c6a:	4e0f      	ldr	r6, [pc, #60]	; (8011ca8 <GUI_DrawPixel+0x40>)
 8011c6c:	6833      	ldr	r3, [r6, #0]
 8011c6e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8011c70:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8011c72:	4405      	add	r5, r0
 8011c74:	b2ab      	uxth	r3, r5
 8011c76:	440c      	add	r4, r1
 8011c78:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011c7c:	f8ad 3000 	strh.w	r3, [sp]
 8011c80:	4668      	mov	r0, sp
 8011c82:	b2a3      	uxth	r3, r4
 8011c84:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011c88:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011c8c:	f7f7 fd90 	bl	80097b0 <WM__InitIVRSearch>
 8011c90:	b140      	cbz	r0, 8011ca4 <GUI_DrawPixel+0x3c>
 8011c92:	6833      	ldr	r3, [r6, #0]
 8011c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c96:	4628      	mov	r0, r5
 8011c98:	685b      	ldr	r3, [r3, #4]
 8011c9a:	4621      	mov	r1, r4
 8011c9c:	4798      	blx	r3
 8011c9e:	f7f7 fcc5 	bl	800962c <WM__GetNextIVR>
 8011ca2:	e7f5      	b.n	8011c90 <GUI_DrawPixel+0x28>
 8011ca4:	b002      	add	sp, #8
 8011ca6:	bd70      	pop	{r4, r5, r6, pc}
 8011ca8:	20000084 	.word	0x20000084

08011cac <GUI_DrawVLine>:
 8011cac:	4b0f      	ldr	r3, [pc, #60]	; (8011cec <GUI_DrawVLine+0x40>)
 8011cae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8011cb4:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8011cb6:	4406      	add	r6, r0
 8011cb8:	190d      	adds	r5, r1, r4
 8011cba:	b2b3      	uxth	r3, r6
 8011cbc:	4414      	add	r4, r2
 8011cbe:	4668      	mov	r0, sp
 8011cc0:	f8ad 3000 	strh.w	r3, [sp]
 8011cc4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011cc8:	f8ad 5002 	strh.w	r5, [sp, #2]
 8011ccc:	f8ad 4006 	strh.w	r4, [sp, #6]
 8011cd0:	f7f7 fd6e 	bl	80097b0 <WM__InitIVRSearch>
 8011cd4:	b138      	cbz	r0, 8011ce6 <GUI_DrawVLine+0x3a>
 8011cd6:	4630      	mov	r0, r6
 8011cd8:	4629      	mov	r1, r5
 8011cda:	4622      	mov	r2, r4
 8011cdc:	f7fa fa98 	bl	800c210 <LCD_DrawVLine>
 8011ce0:	f7f7 fca4 	bl	800962c <WM__GetNextIVR>
 8011ce4:	e7f6      	b.n	8011cd4 <GUI_DrawVLine+0x28>
 8011ce6:	b002      	add	sp, #8
 8011ce8:	bd70      	pop	{r4, r5, r6, pc}
 8011cea:	bf00      	nop
 8011cec:	20000084 	.word	0x20000084

08011cf0 <GUI_FillRect>:
 8011cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011cf2:	4c0f      	ldr	r4, [pc, #60]	; (8011d30 <GUI_FillRect+0x40>)
 8011cf4:	6824      	ldr	r4, [r4, #0]
 8011cf6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8011cf8:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8011cfa:	1947      	adds	r7, r0, r5
 8011cfc:	190e      	adds	r6, r1, r4
 8011cfe:	4415      	add	r5, r2
 8011d00:	441c      	add	r4, r3
 8011d02:	4668      	mov	r0, sp
 8011d04:	f8ad 7000 	strh.w	r7, [sp]
 8011d08:	f8ad 5004 	strh.w	r5, [sp, #4]
 8011d0c:	f8ad 6002 	strh.w	r6, [sp, #2]
 8011d10:	f8ad 4006 	strh.w	r4, [sp, #6]
 8011d14:	f7f7 fd4c 	bl	80097b0 <WM__InitIVRSearch>
 8011d18:	b140      	cbz	r0, 8011d2c <GUI_FillRect+0x3c>
 8011d1a:	4638      	mov	r0, r7
 8011d1c:	4631      	mov	r1, r6
 8011d1e:	462a      	mov	r2, r5
 8011d20:	4623      	mov	r3, r4
 8011d22:	f7fa fa9b 	bl	800c25c <LCD_FillRect>
 8011d26:	f7f7 fc81 	bl	800962c <WM__GetNextIVR>
 8011d2a:	e7f5      	b.n	8011d18 <GUI_FillRect+0x28>
 8011d2c:	b003      	add	sp, #12
 8011d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d30:	20000084 	.word	0x20000084

08011d34 <GUI_FillRectEx>:
 8011d34:	4603      	mov	r3, r0
 8011d36:	f9b0 0000 	ldrsh.w	r0, [r0]
 8011d3a:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8011d3e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8011d42:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011d46:	f7ff bfd3 	b.w	8011cf0 <GUI_FillRect>

08011d4a <_DrawGradient>:
 8011d4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d4e:	b08f      	sub	sp, #60	; 0x3c
 8011d50:	4688      	mov	r8, r1
 8011d52:	4614      	mov	r4, r2
 8011d54:	991a      	ldr	r1, [sp, #104]	; 0x68
 8011d56:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011d58:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8011d5c:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8011d60:	9104      	str	r1, [sp, #16]
 8011d62:	4605      	mov	r5, r0
 8011d64:	461e      	mov	r6, r3
 8011d66:	9203      	str	r2, [sp, #12]
 8011d68:	f7fb fd6d 	bl	800d846 <GUI_GetColor>
 8011d6c:	45da      	cmp	sl, fp
 8011d6e:	9009      	str	r0, [sp, #36]	; 0x24
 8011d70:	d109      	bne.n	8011d86 <_DrawGradient+0x3c>
 8011d72:	4650      	mov	r0, sl
 8011d74:	f7fa fd4a 	bl	800c80c <LCD_SetColor>
 8011d78:	9b03      	ldr	r3, [sp, #12]
 8011d7a:	b113      	cbz	r3, 8011d82 <_DrawGradient+0x38>
 8011d7c:	4628      	mov	r0, r5
 8011d7e:	4641      	mov	r1, r8
 8011d80:	e09d      	b.n	8011ebe <_DrawGradient+0x174>
 8011d82:	4640      	mov	r0, r8
 8011d84:	e0a1      	b.n	8011eca <_DrawGradient+0x180>
 8011d86:	ebb6 0708 	subs.w	r7, r6, r8
 8011d8a:	f000 80b2 	beq.w	8011ef2 <_DrawGradient+0x1a8>
 8011d8e:	fa5f f28a 	uxtb.w	r2, sl
 8011d92:	fa5f f38b 	uxtb.w	r3, fp
 8011d96:	1a9b      	subs	r3, r3, r2
 8011d98:	930a      	str	r3, [sp, #40]	; 0x28
 8011d9a:	2302      	movs	r3, #2
 8011d9c:	fb97 f3f3 	sdiv	r3, r7, r3
 8011da0:	fb02 3207 	mla	r2, r2, r7, r3
 8011da4:	f3cb 2107 	ubfx	r1, fp, #8, #8
 8011da8:	9205      	str	r2, [sp, #20]
 8011daa:	f3ca 2207 	ubfx	r2, sl, #8, #8
 8011dae:	1a89      	subs	r1, r1, r2
 8011db0:	fb02 3207 	mla	r2, r2, r7, r3
 8011db4:	910b      	str	r1, [sp, #44]	; 0x2c
 8011db6:	9206      	str	r2, [sp, #24]
 8011db8:	f3cb 4107 	ubfx	r1, fp, #16, #8
 8011dbc:	f3ca 4207 	ubfx	r2, sl, #16, #8
 8011dc0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8011dc4:	1a89      	subs	r1, r1, r2
 8011dc6:	ebca 6b1b 	rsb	fp, sl, fp, lsr #24
 8011dca:	fb02 3207 	mla	r2, r2, r7, r3
 8011dce:	fb0a 3a07 	mla	sl, sl, r7, r3
 8011dd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011dd4:	910c      	str	r1, [sp, #48]	; 0x30
 8011dd6:	9207      	str	r2, [sp, #28]
 8011dd8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8011ddc:	f8cd a020 	str.w	sl, [sp, #32]
 8011de0:	f108 33ff 	add.w	r3, r8, #4294967295
 8011de4:	f04f 0901 	mov.w	r9, #1
 8011de8:	f103 0a01 	add.w	sl, r3, #1
 8011dec:	45b2      	cmp	sl, r6
 8011dee:	dc5b      	bgt.n	8011ea8 <_DrawGradient+0x15e>
 8011df0:	f8dd c014 	ldr.w	ip, [sp, #20]
 8011df4:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8011df8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011dfa:	fb9c fcf7 	sdiv	ip, ip, r7
 8011dfe:	f8cd c004 	str.w	ip, [sp, #4]
 8011e02:	f8dd c014 	ldr.w	ip, [sp, #20]
 8011e06:	44f4      	add	ip, lr
 8011e08:	f8cd c014 	str.w	ip, [sp, #20]
 8011e0c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8011e10:	f8dd c018 	ldr.w	ip, [sp, #24]
 8011e14:	fb9c f1f7 	sdiv	r1, ip, r7
 8011e18:	44f4      	add	ip, lr
 8011e1a:	f8cd c018 	str.w	ip, [sp, #24]
 8011e1e:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8011e22:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8011e26:	fb9c fbf7 	sdiv	fp, ip, r7
 8011e2a:	44f4      	add	ip, lr
 8011e2c:	f8cd c01c 	str.w	ip, [sp, #28]
 8011e30:	f8dd c020 	ldr.w	ip, [sp, #32]
 8011e34:	fb9c fef7 	sdiv	lr, ip, r7
 8011e38:	4494      	add	ip, r2
 8011e3a:	f8cd c020 	str.w	ip, [sp, #32]
 8011e3e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8011e42:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 8011e46:	ea4b 6b0e 	orr.w	fp, fp, lr, lsl #24
 8011e4a:	ea4c 2201 	orr.w	r2, ip, r1, lsl #8
 8011e4e:	45c2      	cmp	sl, r8
 8011e50:	ea4b 0b02 	orr.w	fp, fp, r2
 8011e54:	dd25      	ble.n	8011ea2 <_DrawGradient+0x158>
 8011e56:	4583      	cmp	fp, r0
 8011e58:	d102      	bne.n	8011e60 <_DrawGradient+0x116>
 8011e5a:	f109 0901 	add.w	r9, r9, #1
 8011e5e:	e020      	b.n	8011ea2 <_DrawGradient+0x158>
 8011e60:	9302      	str	r3, [sp, #8]
 8011e62:	f7fa fcd3 	bl	800c80c <LCD_SetColor>
 8011e66:	f1b9 0f01 	cmp.w	r9, #1
 8011e6a:	9b02      	ldr	r3, [sp, #8]
 8011e6c:	d00f      	beq.n	8011e8e <_DrawGradient+0x144>
 8011e6e:	9a03      	ldr	r2, [sp, #12]
 8011e70:	ebc9 010a 	rsb	r1, r9, sl
 8011e74:	b112      	cbz	r2, 8011e7c <_DrawGradient+0x132>
 8011e76:	4628      	mov	r0, r5
 8011e78:	4622      	mov	r2, r4
 8011e7a:	e003      	b.n	8011e84 <_DrawGradient+0x13a>
 8011e7c:	4608      	mov	r0, r1
 8011e7e:	461a      	mov	r2, r3
 8011e80:	4629      	mov	r1, r5
 8011e82:	4623      	mov	r3, r4
 8011e84:	f7fa f9ea 	bl	800c25c <LCD_FillRect>
 8011e88:	f04f 0901 	mov.w	r9, #1
 8011e8c:	e009      	b.n	8011ea2 <_DrawGradient+0x158>
 8011e8e:	9903      	ldr	r1, [sp, #12]
 8011e90:	b111      	cbz	r1, 8011e98 <_DrawGradient+0x14e>
 8011e92:	4628      	mov	r0, r5
 8011e94:	4619      	mov	r1, r3
 8011e96:	e001      	b.n	8011e9c <_DrawGradient+0x152>
 8011e98:	4618      	mov	r0, r3
 8011e9a:	4629      	mov	r1, r5
 8011e9c:	4622      	mov	r2, r4
 8011e9e:	9b04      	ldr	r3, [sp, #16]
 8011ea0:	4798      	blx	r3
 8011ea2:	4653      	mov	r3, sl
 8011ea4:	4658      	mov	r0, fp
 8011ea6:	e79f      	b.n	8011de8 <_DrawGradient+0x9e>
 8011ea8:	f7fa fcb0 	bl	800c80c <LCD_SetColor>
 8011eac:	f1b9 0f01 	cmp.w	r9, #1
 8011eb0:	d00f      	beq.n	8011ed2 <_DrawGradient+0x188>
 8011eb2:	9a03      	ldr	r2, [sp, #12]
 8011eb4:	ebc9 0106 	rsb	r1, r9, r6
 8011eb8:	b132      	cbz	r2, 8011ec8 <_DrawGradient+0x17e>
 8011eba:	4628      	mov	r0, r5
 8011ebc:	3101      	adds	r1, #1
 8011ebe:	4622      	mov	r2, r4
 8011ec0:	4633      	mov	r3, r6
 8011ec2:	f7fa f9cb 	bl	800c25c <LCD_FillRect>
 8011ec6:	e00e      	b.n	8011ee6 <_DrawGradient+0x19c>
 8011ec8:	1c48      	adds	r0, r1, #1
 8011eca:	4629      	mov	r1, r5
 8011ecc:	4632      	mov	r2, r6
 8011ece:	4623      	mov	r3, r4
 8011ed0:	e7f7      	b.n	8011ec2 <_DrawGradient+0x178>
 8011ed2:	9b03      	ldr	r3, [sp, #12]
 8011ed4:	b113      	cbz	r3, 8011edc <_DrawGradient+0x192>
 8011ed6:	4628      	mov	r0, r5
 8011ed8:	4631      	mov	r1, r6
 8011eda:	e001      	b.n	8011ee0 <_DrawGradient+0x196>
 8011edc:	4630      	mov	r0, r6
 8011ede:	4629      	mov	r1, r5
 8011ee0:	4622      	mov	r2, r4
 8011ee2:	9b04      	ldr	r3, [sp, #16]
 8011ee4:	4798      	blx	r3
 8011ee6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ee8:	b00f      	add	sp, #60	; 0x3c
 8011eea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eee:	f7fa bc8d 	b.w	800c80c <LCD_SetColor>
 8011ef2:	b00f      	add	sp, #60	; 0x3c
 8011ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011ef8 <GUI_DrawGradientV>:
 8011ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011efc:	4c15      	ldr	r4, [pc, #84]	; (8011f54 <GUI_DrawGradientV+0x5c>)
 8011efe:	6824      	ldr	r4, [r4, #0]
 8011f00:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8011f02:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8011f04:	b087      	sub	sp, #28
 8011f06:	eb00 0905 	add.w	r9, r0, r5
 8011f0a:	eb01 0804 	add.w	r8, r1, r4
 8011f0e:	4415      	add	r5, r2
 8011f10:	441c      	add	r4, r3
 8011f12:	a804      	add	r0, sp, #16
 8011f14:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8011f16:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011f18:	f8ad 9010 	strh.w	r9, [sp, #16]
 8011f1c:	f8ad 5014 	strh.w	r5, [sp, #20]
 8011f20:	f8ad 8012 	strh.w	r8, [sp, #18]
 8011f24:	f8ad 4016 	strh.w	r4, [sp, #22]
 8011f28:	f7f7 fc42 	bl	80097b0 <WM__InitIVRSearch>
 8011f2c:	b170      	cbz	r0, 8011f4c <GUI_DrawGradientV+0x54>
 8011f2e:	4b0a      	ldr	r3, [pc, #40]	; (8011f58 <GUI_DrawGradientV+0x60>)
 8011f30:	9302      	str	r3, [sp, #8]
 8011f32:	2301      	movs	r3, #1
 8011f34:	9303      	str	r3, [sp, #12]
 8011f36:	4648      	mov	r0, r9
 8011f38:	4641      	mov	r1, r8
 8011f3a:	462a      	mov	r2, r5
 8011f3c:	4623      	mov	r3, r4
 8011f3e:	9700      	str	r7, [sp, #0]
 8011f40:	9601      	str	r6, [sp, #4]
 8011f42:	f7ff ff02 	bl	8011d4a <_DrawGradient>
 8011f46:	f7f7 fb71 	bl	800962c <WM__GetNextIVR>
 8011f4a:	e7ef      	b.n	8011f2c <GUI_DrawGradientV+0x34>
 8011f4c:	b007      	add	sp, #28
 8011f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f52:	bf00      	nop
 8011f54:	20000084 	.word	0x20000084
 8011f58:	0800c1c5 	.word	0x0800c1c5

08011f5c <GUI_DrawRect>:
 8011f5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011f60:	4c1e      	ldr	r4, [pc, #120]	; (8011fdc <GUI_DrawRect+0x80>)
 8011f62:	f8d4 e000 	ldr.w	lr, [r4]
 8011f66:	f8de 404c 	ldr.w	r4, [lr, #76]	; 0x4c
 8011f6a:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
 8011f6e:	1905      	adds	r5, r0, r4
 8011f70:	4414      	add	r4, r2
 8011f72:	f89e 2018 	ldrb.w	r2, [lr, #24]
 8011f76:	3a01      	subs	r2, #1
 8011f78:	b292      	uxth	r2, r2
 8011f7a:	198f      	adds	r7, r1, r6
 8011f7c:	441e      	add	r6, r3
 8011f7e:	1aab      	subs	r3, r5, r2
 8011f80:	f8ad 3000 	strh.w	r3, [sp]
 8011f84:	1913      	adds	r3, r2, r4
 8011f86:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011f8a:	4668      	mov	r0, sp
 8011f8c:	1abb      	subs	r3, r7, r2
 8011f8e:	4432      	add	r2, r6
 8011f90:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011f94:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011f98:	f7f7 fc0a 	bl	80097b0 <WM__InitIVRSearch>
 8011f9c:	b1d0      	cbz	r0, 8011fd4 <GUI_DrawRect+0x78>
 8011f9e:	4628      	mov	r0, r5
 8011fa0:	4639      	mov	r1, r7
 8011fa2:	4622      	mov	r2, r4
 8011fa4:	f7fa f90e 	bl	800c1c4 <LCD_DrawHLine>
 8011fa8:	f107 0901 	add.w	r9, r7, #1
 8011fac:	4628      	mov	r0, r5
 8011fae:	4631      	mov	r1, r6
 8011fb0:	4622      	mov	r2, r4
 8011fb2:	f106 38ff 	add.w	r8, r6, #4294967295
 8011fb6:	f7fa f905 	bl	800c1c4 <LCD_DrawHLine>
 8011fba:	4628      	mov	r0, r5
 8011fbc:	4649      	mov	r1, r9
 8011fbe:	4642      	mov	r2, r8
 8011fc0:	f7fa f926 	bl	800c210 <LCD_DrawVLine>
 8011fc4:	4620      	mov	r0, r4
 8011fc6:	4649      	mov	r1, r9
 8011fc8:	4642      	mov	r2, r8
 8011fca:	f7fa f921 	bl	800c210 <LCD_DrawVLine>
 8011fce:	f7f7 fb2d 	bl	800962c <WM__GetNextIVR>
 8011fd2:	e7e3      	b.n	8011f9c <GUI_DrawRect+0x40>
 8011fd4:	b003      	add	sp, #12
 8011fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fda:	bf00      	nop
 8011fdc:	20000084 	.word	0x20000084

08011fe0 <_GetIndexMask_0>:
 8011fe0:	b508      	push	{r3, lr}
 8011fe2:	f7f9 fff1 	bl	800bfc8 <LCD_GetNumColors>
 8011fe6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8011fea:	d010      	beq.n	801200e <_GetIndexMask_0+0x2e>
 8011fec:	287f      	cmp	r0, #127	; 0x7f
 8011fee:	d810      	bhi.n	8012012 <_GetIndexMask_0+0x32>
 8011ff0:	283f      	cmp	r0, #63	; 0x3f
 8011ff2:	d810      	bhi.n	8012016 <_GetIndexMask_0+0x36>
 8011ff4:	281f      	cmp	r0, #31
 8011ff6:	d810      	bhi.n	801201a <_GetIndexMask_0+0x3a>
 8011ff8:	280f      	cmp	r0, #15
 8011ffa:	d810      	bhi.n	801201e <_GetIndexMask_0+0x3e>
 8011ffc:	2807      	cmp	r0, #7
 8011ffe:	d810      	bhi.n	8012022 <_GetIndexMask_0+0x42>
 8012000:	2803      	cmp	r0, #3
 8012002:	d810      	bhi.n	8012026 <_GetIndexMask_0+0x46>
 8012004:	2801      	cmp	r0, #1
 8012006:	bf94      	ite	ls
 8012008:	2000      	movls	r0, #0
 801200a:	2001      	movhi	r0, #1
 801200c:	e00c      	b.n	8012028 <_GetIndexMask_0+0x48>
 801200e:	2008      	movs	r0, #8
 8012010:	e00a      	b.n	8012028 <_GetIndexMask_0+0x48>
 8012012:	2007      	movs	r0, #7
 8012014:	e008      	b.n	8012028 <_GetIndexMask_0+0x48>
 8012016:	2006      	movs	r0, #6
 8012018:	e006      	b.n	8012028 <_GetIndexMask_0+0x48>
 801201a:	2005      	movs	r0, #5
 801201c:	e004      	b.n	8012028 <_GetIndexMask_0+0x48>
 801201e:	2004      	movs	r0, #4
 8012020:	e002      	b.n	8012028 <_GetIndexMask_0+0x48>
 8012022:	2003      	movs	r0, #3
 8012024:	e000      	b.n	8012028 <_GetIndexMask_0+0x48>
 8012026:	2002      	movs	r0, #2
 8012028:	2301      	movs	r3, #1
 801202a:	fa03 f000 	lsl.w	r0, r3, r0
 801202e:	3801      	subs	r0, #1
 8012030:	bd08      	pop	{r3, pc}

08012032 <_Index2Color_0>:
 8012032:	b538      	push	{r3, r4, r5, lr}
 8012034:	4604      	mov	r4, r0
 8012036:	f7f9 ffc7 	bl	800bfc8 <LCD_GetNumColors>
 801203a:	4605      	mov	r5, r0
 801203c:	f7f9 ffe2 	bl	800c004 <LCD_GetPalette>
 8012040:	42ac      	cmp	r4, r5
 8012042:	d203      	bcs.n	801204c <_Index2Color_0+0x1a>
 8012044:	b118      	cbz	r0, 801204e <_Index2Color_0+0x1c>
 8012046:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801204a:	bd38      	pop	{r3, r4, r5, pc}
 801204c:	2000      	movs	r0, #0
 801204e:	bd38      	pop	{r3, r4, r5, pc}

08012050 <_Color2Index_0>:
 8012050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012054:	4682      	mov	sl, r0
 8012056:	f7f9 ffb7 	bl	800bfc8 <LCD_GetNumColors>
 801205a:	4681      	mov	r9, r0
 801205c:	f7f9 ffd2 	bl	800c004 <LCD_GetPalette>
 8012060:	4605      	mov	r5, r0
 8012062:	b1e0      	cbz	r0, 801209e <_Color2Index_0+0x4e>
 8012064:	2300      	movs	r3, #0
 8012066:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 801206a:	4592      	cmp	sl, r2
 801206c:	d019      	beq.n	80120a2 <_Color2Index_0+0x52>
 801206e:	3301      	adds	r3, #1
 8012070:	454b      	cmp	r3, r9
 8012072:	dbf8      	blt.n	8012066 <_Color2Index_0+0x16>
 8012074:	2700      	movs	r7, #0
 8012076:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 801207a:	463c      	mov	r4, r7
 801207c:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 8012080:	4650      	mov	r0, sl
 8012082:	f7fb fbad 	bl	800d7e0 <GUI_CalcColorDist>
 8012086:	4626      	mov	r6, r4
 8012088:	4540      	cmp	r0, r8
 801208a:	f104 0401 	add.w	r4, r4, #1
 801208e:	bf24      	itt	cs
 8012090:	4640      	movcs	r0, r8
 8012092:	463e      	movcs	r6, r7
 8012094:	454c      	cmp	r4, r9
 8012096:	da07      	bge.n	80120a8 <_Color2Index_0+0x58>
 8012098:	4680      	mov	r8, r0
 801209a:	4637      	mov	r7, r6
 801209c:	e7ee      	b.n	801207c <_Color2Index_0+0x2c>
 801209e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120a2:	4618      	mov	r0, r3
 80120a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120a8:	4630      	mov	r0, r6
 80120aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080120b0 <_DrawDownRect>:
 80120b0:	b510      	push	{r4, lr}
 80120b2:	b09c      	sub	sp, #112	; 0x70
 80120b4:	4604      	mov	r4, r0
 80120b6:	4668      	mov	r0, sp
 80120b8:	f7fb fc72 	bl	800d9a0 <GUI_SaveContext_W>
 80120bc:	4b09      	ldr	r3, [pc, #36]	; (80120e4 <_DrawDownRect+0x34>)
 80120be:	6818      	ldr	r0, [r3, #0]
 80120c0:	f7fa fba4 	bl	800c80c <LCD_SetColor>
 80120c4:	f9b4 0000 	ldrsh.w	r0, [r4]
 80120c8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80120cc:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80120d0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80120d4:	f7ff ff42 	bl	8011f5c <GUI_DrawRect>
 80120d8:	4668      	mov	r0, sp
 80120da:	f7fb fc6b 	bl	800d9b4 <GUI_RestoreContext>
 80120de:	b01c      	add	sp, #112	; 0x70
 80120e0:	bd10      	pop	{r4, pc}
 80120e2:	bf00      	nop
 80120e4:	20002bb8 	.word	0x20002bb8

080120e8 <_DrawUpRect>:
 80120e8:	b510      	push	{r4, lr}
 80120ea:	b09c      	sub	sp, #112	; 0x70
 80120ec:	4604      	mov	r4, r0
 80120ee:	4668      	mov	r0, sp
 80120f0:	f7fb fc56 	bl	800d9a0 <GUI_SaveContext_W>
 80120f4:	4b09      	ldr	r3, [pc, #36]	; (801211c <_DrawUpRect+0x34>)
 80120f6:	6818      	ldr	r0, [r3, #0]
 80120f8:	f7fa fb88 	bl	800c80c <LCD_SetColor>
 80120fc:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012100:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012104:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8012108:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801210c:	f7ff ff26 	bl	8011f5c <GUI_DrawRect>
 8012110:	4668      	mov	r0, sp
 8012112:	f7fb fc4f 	bl	800d9b4 <GUI_RestoreContext>
 8012116:	b01c      	add	sp, #112	; 0x70
 8012118:	bd10      	pop	{r4, pc}
 801211a:	bf00      	nop
 801211c:	20002bb8 	.word	0x20002bb8

08012120 <_DrawDown>:
 8012120:	b507      	push	{r0, r1, r2, lr}
 8012122:	4668      	mov	r0, sp
 8012124:	f7f6 f8e0 	bl	80082e8 <WM_GetClientRect>
 8012128:	4668      	mov	r0, sp
 801212a:	f7ff ffc1 	bl	80120b0 <_DrawDownRect>
 801212e:	b003      	add	sp, #12
 8012130:	f85d fb04 	ldr.w	pc, [sp], #4

08012134 <_DrawUp>:
 8012134:	b507      	push	{r0, r1, r2, lr}
 8012136:	4668      	mov	r0, sp
 8012138:	f7f6 f8d6 	bl	80082e8 <WM_GetClientRect>
 801213c:	4668      	mov	r0, sp
 801213e:	f7ff ffd3 	bl	80120e8 <_DrawUpRect>
 8012142:	b003      	add	sp, #12
 8012144:	f85d fb04 	ldr.w	pc, [sp], #4

08012148 <LCD_GetNumLayers>:
 8012148:	b510      	push	{r4, lr}
 801214a:	2000      	movs	r0, #0
 801214c:	f7fb f962 	bl	800d414 <GUI_DEVICE__GetpDriver>
 8012150:	1c04      	adds	r4, r0, #0
 8012152:	f04f 0001 	mov.w	r0, #1
 8012156:	bf18      	it	ne
 8012158:	2401      	movne	r4, #1
 801215a:	f7fb f95b 	bl	800d414 <GUI_DEVICE__GetpDriver>
 801215e:	b100      	cbz	r0, 8012162 <LCD_GetNumLayers+0x1a>
 8012160:	3401      	adds	r4, #1
 8012162:	4620      	mov	r0, r4
 8012164:	bd10      	pop	{r4, pc}
	...

08012168 <__libc_init_array>:
 8012168:	b570      	push	{r4, r5, r6, lr}
 801216a:	4e0d      	ldr	r6, [pc, #52]	; (80121a0 <__libc_init_array+0x38>)
 801216c:	4c0d      	ldr	r4, [pc, #52]	; (80121a4 <__libc_init_array+0x3c>)
 801216e:	1ba4      	subs	r4, r4, r6
 8012170:	10a4      	asrs	r4, r4, #2
 8012172:	2500      	movs	r5, #0
 8012174:	42a5      	cmp	r5, r4
 8012176:	d109      	bne.n	801218c <__libc_init_array+0x24>
 8012178:	4e0b      	ldr	r6, [pc, #44]	; (80121a8 <__libc_init_array+0x40>)
 801217a:	4c0c      	ldr	r4, [pc, #48]	; (80121ac <__libc_init_array+0x44>)
 801217c:	f000 fcc0 	bl	8012b00 <_init>
 8012180:	1ba4      	subs	r4, r4, r6
 8012182:	10a4      	asrs	r4, r4, #2
 8012184:	2500      	movs	r5, #0
 8012186:	42a5      	cmp	r5, r4
 8012188:	d105      	bne.n	8012196 <__libc_init_array+0x2e>
 801218a:	bd70      	pop	{r4, r5, r6, pc}
 801218c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012190:	4798      	blx	r3
 8012192:	3501      	adds	r5, #1
 8012194:	e7ee      	b.n	8012174 <__libc_init_array+0xc>
 8012196:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801219a:	4798      	blx	r3
 801219c:	3501      	adds	r5, #1
 801219e:	e7f2      	b.n	8012186 <__libc_init_array+0x1e>
 80121a0:	08014e4c 	.word	0x08014e4c
 80121a4:	08014e4c 	.word	0x08014e4c
 80121a8:	08014e4c 	.word	0x08014e4c
 80121ac:	08014e50 	.word	0x08014e50

080121b0 <memcpy>:
 80121b0:	b510      	push	{r4, lr}
 80121b2:	1e43      	subs	r3, r0, #1
 80121b4:	440a      	add	r2, r1
 80121b6:	4291      	cmp	r1, r2
 80121b8:	d100      	bne.n	80121bc <memcpy+0xc>
 80121ba:	bd10      	pop	{r4, pc}
 80121bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80121c4:	e7f7      	b.n	80121b6 <memcpy+0x6>

080121c6 <memmove>:
 80121c6:	4288      	cmp	r0, r1
 80121c8:	b510      	push	{r4, lr}
 80121ca:	eb01 0302 	add.w	r3, r1, r2
 80121ce:	d807      	bhi.n	80121e0 <memmove+0x1a>
 80121d0:	1e42      	subs	r2, r0, #1
 80121d2:	4299      	cmp	r1, r3
 80121d4:	d00a      	beq.n	80121ec <memmove+0x26>
 80121d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121da:	f802 4f01 	strb.w	r4, [r2, #1]!
 80121de:	e7f8      	b.n	80121d2 <memmove+0xc>
 80121e0:	4283      	cmp	r3, r0
 80121e2:	d9f5      	bls.n	80121d0 <memmove+0xa>
 80121e4:	1881      	adds	r1, r0, r2
 80121e6:	1ad2      	subs	r2, r2, r3
 80121e8:	42d3      	cmn	r3, r2
 80121ea:	d100      	bne.n	80121ee <memmove+0x28>
 80121ec:	bd10      	pop	{r4, pc}
 80121ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80121f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80121f6:	e7f7      	b.n	80121e8 <memmove+0x22>

080121f8 <memset>:
 80121f8:	4402      	add	r2, r0
 80121fa:	4603      	mov	r3, r0
 80121fc:	4293      	cmp	r3, r2
 80121fe:	d100      	bne.n	8012202 <memset+0xa>
 8012200:	4770      	bx	lr
 8012202:	f803 1b01 	strb.w	r1, [r3], #1
 8012206:	e7f9      	b.n	80121fc <memset+0x4>

08012208 <siprintf>:
 8012208:	b40e      	push	{r1, r2, r3}
 801220a:	b500      	push	{lr}
 801220c:	b09c      	sub	sp, #112	; 0x70
 801220e:	ab1d      	add	r3, sp, #116	; 0x74
 8012210:	9002      	str	r0, [sp, #8]
 8012212:	9006      	str	r0, [sp, #24]
 8012214:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012218:	4809      	ldr	r0, [pc, #36]	; (8012240 <siprintf+0x38>)
 801221a:	9107      	str	r1, [sp, #28]
 801221c:	9104      	str	r1, [sp, #16]
 801221e:	4909      	ldr	r1, [pc, #36]	; (8012244 <siprintf+0x3c>)
 8012220:	f853 2b04 	ldr.w	r2, [r3], #4
 8012224:	9105      	str	r1, [sp, #20]
 8012226:	6800      	ldr	r0, [r0, #0]
 8012228:	9301      	str	r3, [sp, #4]
 801222a:	a902      	add	r1, sp, #8
 801222c:	f000 f99a 	bl	8012564 <_svfiprintf_r>
 8012230:	9b02      	ldr	r3, [sp, #8]
 8012232:	2200      	movs	r2, #0
 8012234:	701a      	strb	r2, [r3, #0]
 8012236:	b01c      	add	sp, #112	; 0x70
 8012238:	f85d eb04 	ldr.w	lr, [sp], #4
 801223c:	b003      	add	sp, #12
 801223e:	4770      	bx	lr
 8012240:	20000128 	.word	0x20000128
 8012244:	ffff0208 	.word	0xffff0208

08012248 <strchr>:
 8012248:	b2c9      	uxtb	r1, r1
 801224a:	4603      	mov	r3, r0
 801224c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012250:	b11a      	cbz	r2, 801225a <strchr+0x12>
 8012252:	428a      	cmp	r2, r1
 8012254:	d1f9      	bne.n	801224a <strchr+0x2>
 8012256:	4618      	mov	r0, r3
 8012258:	4770      	bx	lr
 801225a:	2900      	cmp	r1, #0
 801225c:	bf18      	it	ne
 801225e:	2300      	movne	r3, #0
 8012260:	e7f9      	b.n	8012256 <strchr+0xe>

08012262 <strcpy>:
 8012262:	4603      	mov	r3, r0
 8012264:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012268:	f803 2b01 	strb.w	r2, [r3], #1
 801226c:	2a00      	cmp	r2, #0
 801226e:	d1f9      	bne.n	8012264 <strcpy+0x2>
 8012270:	4770      	bx	lr

08012272 <strstr>:
 8012272:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012274:	7803      	ldrb	r3, [r0, #0]
 8012276:	b17b      	cbz	r3, 8012298 <strstr+0x26>
 8012278:	4604      	mov	r4, r0
 801227a:	7823      	ldrb	r3, [r4, #0]
 801227c:	4620      	mov	r0, r4
 801227e:	1c66      	adds	r6, r4, #1
 8012280:	b17b      	cbz	r3, 80122a2 <strstr+0x30>
 8012282:	1e4a      	subs	r2, r1, #1
 8012284:	1e63      	subs	r3, r4, #1
 8012286:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801228a:	b14d      	cbz	r5, 80122a0 <strstr+0x2e>
 801228c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8012290:	42af      	cmp	r7, r5
 8012292:	4634      	mov	r4, r6
 8012294:	d0f7      	beq.n	8012286 <strstr+0x14>
 8012296:	e7f0      	b.n	801227a <strstr+0x8>
 8012298:	780b      	ldrb	r3, [r1, #0]
 801229a:	2b00      	cmp	r3, #0
 801229c:	bf18      	it	ne
 801229e:	2000      	movne	r0, #0
 80122a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122a2:	4618      	mov	r0, r3
 80122a4:	e7fc      	b.n	80122a0 <strstr+0x2e>
	...

080122a8 <strtok>:
 80122a8:	4b13      	ldr	r3, [pc, #76]	; (80122f8 <strtok+0x50>)
 80122aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122ae:	681d      	ldr	r5, [r3, #0]
 80122b0:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80122b2:	4606      	mov	r6, r0
 80122b4:	460f      	mov	r7, r1
 80122b6:	b9b4      	cbnz	r4, 80122e6 <strtok+0x3e>
 80122b8:	2050      	movs	r0, #80	; 0x50
 80122ba:	f000 f849 	bl	8012350 <malloc>
 80122be:	65a8      	str	r0, [r5, #88]	; 0x58
 80122c0:	e9c0 4400 	strd	r4, r4, [r0]
 80122c4:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80122c8:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80122cc:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80122d0:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80122d4:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80122d8:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80122dc:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80122e0:	6184      	str	r4, [r0, #24]
 80122e2:	7704      	strb	r4, [r0, #28]
 80122e4:	6244      	str	r4, [r0, #36]	; 0x24
 80122e6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80122e8:	4639      	mov	r1, r7
 80122ea:	4630      	mov	r0, r6
 80122ec:	2301      	movs	r3, #1
 80122ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122f2:	f000 b803 	b.w	80122fc <__strtok_r>
 80122f6:	bf00      	nop
 80122f8:	20000128 	.word	0x20000128

080122fc <__strtok_r>:
 80122fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122fe:	b918      	cbnz	r0, 8012308 <__strtok_r+0xc>
 8012300:	6810      	ldr	r0, [r2, #0]
 8012302:	b908      	cbnz	r0, 8012308 <__strtok_r+0xc>
 8012304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012306:	4620      	mov	r0, r4
 8012308:	4604      	mov	r4, r0
 801230a:	460f      	mov	r7, r1
 801230c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012310:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012314:	b91e      	cbnz	r6, 801231e <__strtok_r+0x22>
 8012316:	b96d      	cbnz	r5, 8012334 <__strtok_r+0x38>
 8012318:	6015      	str	r5, [r2, #0]
 801231a:	4628      	mov	r0, r5
 801231c:	e7f2      	b.n	8012304 <__strtok_r+0x8>
 801231e:	42b5      	cmp	r5, r6
 8012320:	d1f6      	bne.n	8012310 <__strtok_r+0x14>
 8012322:	2b00      	cmp	r3, #0
 8012324:	d1ef      	bne.n	8012306 <__strtok_r+0xa>
 8012326:	6014      	str	r4, [r2, #0]
 8012328:	7003      	strb	r3, [r0, #0]
 801232a:	e7eb      	b.n	8012304 <__strtok_r+0x8>
 801232c:	462b      	mov	r3, r5
 801232e:	e00d      	b.n	801234c <__strtok_r+0x50>
 8012330:	b926      	cbnz	r6, 801233c <__strtok_r+0x40>
 8012332:	461c      	mov	r4, r3
 8012334:	4623      	mov	r3, r4
 8012336:	460f      	mov	r7, r1
 8012338:	f813 5b01 	ldrb.w	r5, [r3], #1
 801233c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012340:	42b5      	cmp	r5, r6
 8012342:	d1f5      	bne.n	8012330 <__strtok_r+0x34>
 8012344:	2d00      	cmp	r5, #0
 8012346:	d0f1      	beq.n	801232c <__strtok_r+0x30>
 8012348:	2100      	movs	r1, #0
 801234a:	7021      	strb	r1, [r4, #0]
 801234c:	6013      	str	r3, [r2, #0]
 801234e:	e7d9      	b.n	8012304 <__strtok_r+0x8>

08012350 <malloc>:
 8012350:	4b02      	ldr	r3, [pc, #8]	; (801235c <malloc+0xc>)
 8012352:	4601      	mov	r1, r0
 8012354:	6818      	ldr	r0, [r3, #0]
 8012356:	f000 b851 	b.w	80123fc <_malloc_r>
 801235a:	bf00      	nop
 801235c:	20000128 	.word	0x20000128

08012360 <_free_r>:
 8012360:	b538      	push	{r3, r4, r5, lr}
 8012362:	4605      	mov	r5, r0
 8012364:	2900      	cmp	r1, #0
 8012366:	d045      	beq.n	80123f4 <_free_r+0x94>
 8012368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801236c:	1f0c      	subs	r4, r1, #4
 801236e:	2b00      	cmp	r3, #0
 8012370:	bfb8      	it	lt
 8012372:	18e4      	addlt	r4, r4, r3
 8012374:	f000 fb86 	bl	8012a84 <__malloc_lock>
 8012378:	4a1f      	ldr	r2, [pc, #124]	; (80123f8 <_free_r+0x98>)
 801237a:	6813      	ldr	r3, [r2, #0]
 801237c:	4610      	mov	r0, r2
 801237e:	b933      	cbnz	r3, 801238e <_free_r+0x2e>
 8012380:	6063      	str	r3, [r4, #4]
 8012382:	6014      	str	r4, [r2, #0]
 8012384:	4628      	mov	r0, r5
 8012386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801238a:	f000 bb7c 	b.w	8012a86 <__malloc_unlock>
 801238e:	42a3      	cmp	r3, r4
 8012390:	d90c      	bls.n	80123ac <_free_r+0x4c>
 8012392:	6821      	ldr	r1, [r4, #0]
 8012394:	1862      	adds	r2, r4, r1
 8012396:	4293      	cmp	r3, r2
 8012398:	bf04      	itt	eq
 801239a:	681a      	ldreq	r2, [r3, #0]
 801239c:	685b      	ldreq	r3, [r3, #4]
 801239e:	6063      	str	r3, [r4, #4]
 80123a0:	bf04      	itt	eq
 80123a2:	1852      	addeq	r2, r2, r1
 80123a4:	6022      	streq	r2, [r4, #0]
 80123a6:	6004      	str	r4, [r0, #0]
 80123a8:	e7ec      	b.n	8012384 <_free_r+0x24>
 80123aa:	4613      	mov	r3, r2
 80123ac:	685a      	ldr	r2, [r3, #4]
 80123ae:	b10a      	cbz	r2, 80123b4 <_free_r+0x54>
 80123b0:	42a2      	cmp	r2, r4
 80123b2:	d9fa      	bls.n	80123aa <_free_r+0x4a>
 80123b4:	6819      	ldr	r1, [r3, #0]
 80123b6:	1858      	adds	r0, r3, r1
 80123b8:	42a0      	cmp	r0, r4
 80123ba:	d10b      	bne.n	80123d4 <_free_r+0x74>
 80123bc:	6820      	ldr	r0, [r4, #0]
 80123be:	4401      	add	r1, r0
 80123c0:	1858      	adds	r0, r3, r1
 80123c2:	4282      	cmp	r2, r0
 80123c4:	6019      	str	r1, [r3, #0]
 80123c6:	d1dd      	bne.n	8012384 <_free_r+0x24>
 80123c8:	6810      	ldr	r0, [r2, #0]
 80123ca:	6852      	ldr	r2, [r2, #4]
 80123cc:	605a      	str	r2, [r3, #4]
 80123ce:	4401      	add	r1, r0
 80123d0:	6019      	str	r1, [r3, #0]
 80123d2:	e7d7      	b.n	8012384 <_free_r+0x24>
 80123d4:	d902      	bls.n	80123dc <_free_r+0x7c>
 80123d6:	230c      	movs	r3, #12
 80123d8:	602b      	str	r3, [r5, #0]
 80123da:	e7d3      	b.n	8012384 <_free_r+0x24>
 80123dc:	6820      	ldr	r0, [r4, #0]
 80123de:	1821      	adds	r1, r4, r0
 80123e0:	428a      	cmp	r2, r1
 80123e2:	bf04      	itt	eq
 80123e4:	6811      	ldreq	r1, [r2, #0]
 80123e6:	6852      	ldreq	r2, [r2, #4]
 80123e8:	6062      	str	r2, [r4, #4]
 80123ea:	bf04      	itt	eq
 80123ec:	1809      	addeq	r1, r1, r0
 80123ee:	6021      	streq	r1, [r4, #0]
 80123f0:	605c      	str	r4, [r3, #4]
 80123f2:	e7c7      	b.n	8012384 <_free_r+0x24>
 80123f4:	bd38      	pop	{r3, r4, r5, pc}
 80123f6:	bf00      	nop
 80123f8:	20002bbc 	.word	0x20002bbc

080123fc <_malloc_r>:
 80123fc:	b570      	push	{r4, r5, r6, lr}
 80123fe:	1ccd      	adds	r5, r1, #3
 8012400:	f025 0503 	bic.w	r5, r5, #3
 8012404:	3508      	adds	r5, #8
 8012406:	2d0c      	cmp	r5, #12
 8012408:	bf38      	it	cc
 801240a:	250c      	movcc	r5, #12
 801240c:	2d00      	cmp	r5, #0
 801240e:	4606      	mov	r6, r0
 8012410:	db01      	blt.n	8012416 <_malloc_r+0x1a>
 8012412:	42a9      	cmp	r1, r5
 8012414:	d903      	bls.n	801241e <_malloc_r+0x22>
 8012416:	230c      	movs	r3, #12
 8012418:	6033      	str	r3, [r6, #0]
 801241a:	2000      	movs	r0, #0
 801241c:	bd70      	pop	{r4, r5, r6, pc}
 801241e:	f000 fb31 	bl	8012a84 <__malloc_lock>
 8012422:	4a21      	ldr	r2, [pc, #132]	; (80124a8 <_malloc_r+0xac>)
 8012424:	6814      	ldr	r4, [r2, #0]
 8012426:	4621      	mov	r1, r4
 8012428:	b991      	cbnz	r1, 8012450 <_malloc_r+0x54>
 801242a:	4c20      	ldr	r4, [pc, #128]	; (80124ac <_malloc_r+0xb0>)
 801242c:	6823      	ldr	r3, [r4, #0]
 801242e:	b91b      	cbnz	r3, 8012438 <_malloc_r+0x3c>
 8012430:	4630      	mov	r0, r6
 8012432:	f000 fb17 	bl	8012a64 <_sbrk_r>
 8012436:	6020      	str	r0, [r4, #0]
 8012438:	4629      	mov	r1, r5
 801243a:	4630      	mov	r0, r6
 801243c:	f000 fb12 	bl	8012a64 <_sbrk_r>
 8012440:	1c43      	adds	r3, r0, #1
 8012442:	d124      	bne.n	801248e <_malloc_r+0x92>
 8012444:	230c      	movs	r3, #12
 8012446:	6033      	str	r3, [r6, #0]
 8012448:	4630      	mov	r0, r6
 801244a:	f000 fb1c 	bl	8012a86 <__malloc_unlock>
 801244e:	e7e4      	b.n	801241a <_malloc_r+0x1e>
 8012450:	680b      	ldr	r3, [r1, #0]
 8012452:	1b5b      	subs	r3, r3, r5
 8012454:	d418      	bmi.n	8012488 <_malloc_r+0x8c>
 8012456:	2b0b      	cmp	r3, #11
 8012458:	d90f      	bls.n	801247a <_malloc_r+0x7e>
 801245a:	600b      	str	r3, [r1, #0]
 801245c:	50cd      	str	r5, [r1, r3]
 801245e:	18cc      	adds	r4, r1, r3
 8012460:	4630      	mov	r0, r6
 8012462:	f000 fb10 	bl	8012a86 <__malloc_unlock>
 8012466:	f104 000b 	add.w	r0, r4, #11
 801246a:	1d23      	adds	r3, r4, #4
 801246c:	f020 0007 	bic.w	r0, r0, #7
 8012470:	1ac3      	subs	r3, r0, r3
 8012472:	d0d3      	beq.n	801241c <_malloc_r+0x20>
 8012474:	425a      	negs	r2, r3
 8012476:	50e2      	str	r2, [r4, r3]
 8012478:	e7d0      	b.n	801241c <_malloc_r+0x20>
 801247a:	428c      	cmp	r4, r1
 801247c:	684b      	ldr	r3, [r1, #4]
 801247e:	bf16      	itet	ne
 8012480:	6063      	strne	r3, [r4, #4]
 8012482:	6013      	streq	r3, [r2, #0]
 8012484:	460c      	movne	r4, r1
 8012486:	e7eb      	b.n	8012460 <_malloc_r+0x64>
 8012488:	460c      	mov	r4, r1
 801248a:	6849      	ldr	r1, [r1, #4]
 801248c:	e7cc      	b.n	8012428 <_malloc_r+0x2c>
 801248e:	1cc4      	adds	r4, r0, #3
 8012490:	f024 0403 	bic.w	r4, r4, #3
 8012494:	42a0      	cmp	r0, r4
 8012496:	d005      	beq.n	80124a4 <_malloc_r+0xa8>
 8012498:	1a21      	subs	r1, r4, r0
 801249a:	4630      	mov	r0, r6
 801249c:	f000 fae2 	bl	8012a64 <_sbrk_r>
 80124a0:	3001      	adds	r0, #1
 80124a2:	d0cf      	beq.n	8012444 <_malloc_r+0x48>
 80124a4:	6025      	str	r5, [r4, #0]
 80124a6:	e7db      	b.n	8012460 <_malloc_r+0x64>
 80124a8:	20002bbc 	.word	0x20002bbc
 80124ac:	20002bc0 	.word	0x20002bc0

080124b0 <__ssputs_r>:
 80124b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124b4:	688e      	ldr	r6, [r1, #8]
 80124b6:	429e      	cmp	r6, r3
 80124b8:	4682      	mov	sl, r0
 80124ba:	460c      	mov	r4, r1
 80124bc:	4690      	mov	r8, r2
 80124be:	4699      	mov	r9, r3
 80124c0:	d837      	bhi.n	8012532 <__ssputs_r+0x82>
 80124c2:	898a      	ldrh	r2, [r1, #12]
 80124c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80124c8:	d031      	beq.n	801252e <__ssputs_r+0x7e>
 80124ca:	6825      	ldr	r5, [r4, #0]
 80124cc:	6909      	ldr	r1, [r1, #16]
 80124ce:	1a6f      	subs	r7, r5, r1
 80124d0:	6965      	ldr	r5, [r4, #20]
 80124d2:	2302      	movs	r3, #2
 80124d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80124d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80124dc:	f109 0301 	add.w	r3, r9, #1
 80124e0:	443b      	add	r3, r7
 80124e2:	429d      	cmp	r5, r3
 80124e4:	bf38      	it	cc
 80124e6:	461d      	movcc	r5, r3
 80124e8:	0553      	lsls	r3, r2, #21
 80124ea:	d530      	bpl.n	801254e <__ssputs_r+0x9e>
 80124ec:	4629      	mov	r1, r5
 80124ee:	f7ff ff85 	bl	80123fc <_malloc_r>
 80124f2:	4606      	mov	r6, r0
 80124f4:	b950      	cbnz	r0, 801250c <__ssputs_r+0x5c>
 80124f6:	230c      	movs	r3, #12
 80124f8:	f8ca 3000 	str.w	r3, [sl]
 80124fc:	89a3      	ldrh	r3, [r4, #12]
 80124fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012502:	81a3      	strh	r3, [r4, #12]
 8012504:	f04f 30ff 	mov.w	r0, #4294967295
 8012508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801250c:	463a      	mov	r2, r7
 801250e:	6921      	ldr	r1, [r4, #16]
 8012510:	f7ff fe4e 	bl	80121b0 <memcpy>
 8012514:	89a3      	ldrh	r3, [r4, #12]
 8012516:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801251a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801251e:	81a3      	strh	r3, [r4, #12]
 8012520:	6126      	str	r6, [r4, #16]
 8012522:	6165      	str	r5, [r4, #20]
 8012524:	443e      	add	r6, r7
 8012526:	1bed      	subs	r5, r5, r7
 8012528:	6026      	str	r6, [r4, #0]
 801252a:	60a5      	str	r5, [r4, #8]
 801252c:	464e      	mov	r6, r9
 801252e:	454e      	cmp	r6, r9
 8012530:	d900      	bls.n	8012534 <__ssputs_r+0x84>
 8012532:	464e      	mov	r6, r9
 8012534:	4632      	mov	r2, r6
 8012536:	4641      	mov	r1, r8
 8012538:	6820      	ldr	r0, [r4, #0]
 801253a:	f7ff fe44 	bl	80121c6 <memmove>
 801253e:	68a3      	ldr	r3, [r4, #8]
 8012540:	1b9b      	subs	r3, r3, r6
 8012542:	60a3      	str	r3, [r4, #8]
 8012544:	6823      	ldr	r3, [r4, #0]
 8012546:	441e      	add	r6, r3
 8012548:	6026      	str	r6, [r4, #0]
 801254a:	2000      	movs	r0, #0
 801254c:	e7dc      	b.n	8012508 <__ssputs_r+0x58>
 801254e:	462a      	mov	r2, r5
 8012550:	f000 fa9a 	bl	8012a88 <_realloc_r>
 8012554:	4606      	mov	r6, r0
 8012556:	2800      	cmp	r0, #0
 8012558:	d1e2      	bne.n	8012520 <__ssputs_r+0x70>
 801255a:	6921      	ldr	r1, [r4, #16]
 801255c:	4650      	mov	r0, sl
 801255e:	f7ff feff 	bl	8012360 <_free_r>
 8012562:	e7c8      	b.n	80124f6 <__ssputs_r+0x46>

08012564 <_svfiprintf_r>:
 8012564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012568:	461d      	mov	r5, r3
 801256a:	898b      	ldrh	r3, [r1, #12]
 801256c:	061f      	lsls	r7, r3, #24
 801256e:	b09d      	sub	sp, #116	; 0x74
 8012570:	4680      	mov	r8, r0
 8012572:	460c      	mov	r4, r1
 8012574:	4616      	mov	r6, r2
 8012576:	d50f      	bpl.n	8012598 <_svfiprintf_r+0x34>
 8012578:	690b      	ldr	r3, [r1, #16]
 801257a:	b96b      	cbnz	r3, 8012598 <_svfiprintf_r+0x34>
 801257c:	2140      	movs	r1, #64	; 0x40
 801257e:	f7ff ff3d 	bl	80123fc <_malloc_r>
 8012582:	6020      	str	r0, [r4, #0]
 8012584:	6120      	str	r0, [r4, #16]
 8012586:	b928      	cbnz	r0, 8012594 <_svfiprintf_r+0x30>
 8012588:	230c      	movs	r3, #12
 801258a:	f8c8 3000 	str.w	r3, [r8]
 801258e:	f04f 30ff 	mov.w	r0, #4294967295
 8012592:	e0c8      	b.n	8012726 <_svfiprintf_r+0x1c2>
 8012594:	2340      	movs	r3, #64	; 0x40
 8012596:	6163      	str	r3, [r4, #20]
 8012598:	2300      	movs	r3, #0
 801259a:	9309      	str	r3, [sp, #36]	; 0x24
 801259c:	2320      	movs	r3, #32
 801259e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80125a2:	2330      	movs	r3, #48	; 0x30
 80125a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80125a8:	9503      	str	r5, [sp, #12]
 80125aa:	f04f 0b01 	mov.w	fp, #1
 80125ae:	4637      	mov	r7, r6
 80125b0:	463d      	mov	r5, r7
 80125b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80125b6:	b10b      	cbz	r3, 80125bc <_svfiprintf_r+0x58>
 80125b8:	2b25      	cmp	r3, #37	; 0x25
 80125ba:	d13e      	bne.n	801263a <_svfiprintf_r+0xd6>
 80125bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80125c0:	d00b      	beq.n	80125da <_svfiprintf_r+0x76>
 80125c2:	4653      	mov	r3, sl
 80125c4:	4632      	mov	r2, r6
 80125c6:	4621      	mov	r1, r4
 80125c8:	4640      	mov	r0, r8
 80125ca:	f7ff ff71 	bl	80124b0 <__ssputs_r>
 80125ce:	3001      	adds	r0, #1
 80125d0:	f000 80a4 	beq.w	801271c <_svfiprintf_r+0x1b8>
 80125d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125d6:	4453      	add	r3, sl
 80125d8:	9309      	str	r3, [sp, #36]	; 0x24
 80125da:	783b      	ldrb	r3, [r7, #0]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	f000 809d 	beq.w	801271c <_svfiprintf_r+0x1b8>
 80125e2:	2300      	movs	r3, #0
 80125e4:	f04f 32ff 	mov.w	r2, #4294967295
 80125e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80125ec:	9304      	str	r3, [sp, #16]
 80125ee:	9307      	str	r3, [sp, #28]
 80125f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80125f4:	931a      	str	r3, [sp, #104]	; 0x68
 80125f6:	462f      	mov	r7, r5
 80125f8:	2205      	movs	r2, #5
 80125fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80125fe:	4850      	ldr	r0, [pc, #320]	; (8012740 <_svfiprintf_r+0x1dc>)
 8012600:	f7ed fdee 	bl	80001e0 <memchr>
 8012604:	9b04      	ldr	r3, [sp, #16]
 8012606:	b9d0      	cbnz	r0, 801263e <_svfiprintf_r+0xda>
 8012608:	06d9      	lsls	r1, r3, #27
 801260a:	bf44      	itt	mi
 801260c:	2220      	movmi	r2, #32
 801260e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012612:	071a      	lsls	r2, r3, #28
 8012614:	bf44      	itt	mi
 8012616:	222b      	movmi	r2, #43	; 0x2b
 8012618:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801261c:	782a      	ldrb	r2, [r5, #0]
 801261e:	2a2a      	cmp	r2, #42	; 0x2a
 8012620:	d015      	beq.n	801264e <_svfiprintf_r+0xea>
 8012622:	9a07      	ldr	r2, [sp, #28]
 8012624:	462f      	mov	r7, r5
 8012626:	2000      	movs	r0, #0
 8012628:	250a      	movs	r5, #10
 801262a:	4639      	mov	r1, r7
 801262c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012630:	3b30      	subs	r3, #48	; 0x30
 8012632:	2b09      	cmp	r3, #9
 8012634:	d94d      	bls.n	80126d2 <_svfiprintf_r+0x16e>
 8012636:	b1b8      	cbz	r0, 8012668 <_svfiprintf_r+0x104>
 8012638:	e00f      	b.n	801265a <_svfiprintf_r+0xf6>
 801263a:	462f      	mov	r7, r5
 801263c:	e7b8      	b.n	80125b0 <_svfiprintf_r+0x4c>
 801263e:	4a40      	ldr	r2, [pc, #256]	; (8012740 <_svfiprintf_r+0x1dc>)
 8012640:	1a80      	subs	r0, r0, r2
 8012642:	fa0b f000 	lsl.w	r0, fp, r0
 8012646:	4318      	orrs	r0, r3
 8012648:	9004      	str	r0, [sp, #16]
 801264a:	463d      	mov	r5, r7
 801264c:	e7d3      	b.n	80125f6 <_svfiprintf_r+0x92>
 801264e:	9a03      	ldr	r2, [sp, #12]
 8012650:	1d11      	adds	r1, r2, #4
 8012652:	6812      	ldr	r2, [r2, #0]
 8012654:	9103      	str	r1, [sp, #12]
 8012656:	2a00      	cmp	r2, #0
 8012658:	db01      	blt.n	801265e <_svfiprintf_r+0xfa>
 801265a:	9207      	str	r2, [sp, #28]
 801265c:	e004      	b.n	8012668 <_svfiprintf_r+0x104>
 801265e:	4252      	negs	r2, r2
 8012660:	f043 0302 	orr.w	r3, r3, #2
 8012664:	9207      	str	r2, [sp, #28]
 8012666:	9304      	str	r3, [sp, #16]
 8012668:	783b      	ldrb	r3, [r7, #0]
 801266a:	2b2e      	cmp	r3, #46	; 0x2e
 801266c:	d10c      	bne.n	8012688 <_svfiprintf_r+0x124>
 801266e:	787b      	ldrb	r3, [r7, #1]
 8012670:	2b2a      	cmp	r3, #42	; 0x2a
 8012672:	d133      	bne.n	80126dc <_svfiprintf_r+0x178>
 8012674:	9b03      	ldr	r3, [sp, #12]
 8012676:	1d1a      	adds	r2, r3, #4
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	9203      	str	r2, [sp, #12]
 801267c:	2b00      	cmp	r3, #0
 801267e:	bfb8      	it	lt
 8012680:	f04f 33ff 	movlt.w	r3, #4294967295
 8012684:	3702      	adds	r7, #2
 8012686:	9305      	str	r3, [sp, #20]
 8012688:	4d2e      	ldr	r5, [pc, #184]	; (8012744 <_svfiprintf_r+0x1e0>)
 801268a:	7839      	ldrb	r1, [r7, #0]
 801268c:	2203      	movs	r2, #3
 801268e:	4628      	mov	r0, r5
 8012690:	f7ed fda6 	bl	80001e0 <memchr>
 8012694:	b138      	cbz	r0, 80126a6 <_svfiprintf_r+0x142>
 8012696:	2340      	movs	r3, #64	; 0x40
 8012698:	1b40      	subs	r0, r0, r5
 801269a:	fa03 f000 	lsl.w	r0, r3, r0
 801269e:	9b04      	ldr	r3, [sp, #16]
 80126a0:	4303      	orrs	r3, r0
 80126a2:	3701      	adds	r7, #1
 80126a4:	9304      	str	r3, [sp, #16]
 80126a6:	7839      	ldrb	r1, [r7, #0]
 80126a8:	4827      	ldr	r0, [pc, #156]	; (8012748 <_svfiprintf_r+0x1e4>)
 80126aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80126ae:	2206      	movs	r2, #6
 80126b0:	1c7e      	adds	r6, r7, #1
 80126b2:	f7ed fd95 	bl	80001e0 <memchr>
 80126b6:	2800      	cmp	r0, #0
 80126b8:	d038      	beq.n	801272c <_svfiprintf_r+0x1c8>
 80126ba:	4b24      	ldr	r3, [pc, #144]	; (801274c <_svfiprintf_r+0x1e8>)
 80126bc:	bb13      	cbnz	r3, 8012704 <_svfiprintf_r+0x1a0>
 80126be:	9b03      	ldr	r3, [sp, #12]
 80126c0:	3307      	adds	r3, #7
 80126c2:	f023 0307 	bic.w	r3, r3, #7
 80126c6:	3308      	adds	r3, #8
 80126c8:	9303      	str	r3, [sp, #12]
 80126ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126cc:	444b      	add	r3, r9
 80126ce:	9309      	str	r3, [sp, #36]	; 0x24
 80126d0:	e76d      	b.n	80125ae <_svfiprintf_r+0x4a>
 80126d2:	fb05 3202 	mla	r2, r5, r2, r3
 80126d6:	2001      	movs	r0, #1
 80126d8:	460f      	mov	r7, r1
 80126da:	e7a6      	b.n	801262a <_svfiprintf_r+0xc6>
 80126dc:	2300      	movs	r3, #0
 80126de:	3701      	adds	r7, #1
 80126e0:	9305      	str	r3, [sp, #20]
 80126e2:	4619      	mov	r1, r3
 80126e4:	250a      	movs	r5, #10
 80126e6:	4638      	mov	r0, r7
 80126e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126ec:	3a30      	subs	r2, #48	; 0x30
 80126ee:	2a09      	cmp	r2, #9
 80126f0:	d903      	bls.n	80126fa <_svfiprintf_r+0x196>
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d0c8      	beq.n	8012688 <_svfiprintf_r+0x124>
 80126f6:	9105      	str	r1, [sp, #20]
 80126f8:	e7c6      	b.n	8012688 <_svfiprintf_r+0x124>
 80126fa:	fb05 2101 	mla	r1, r5, r1, r2
 80126fe:	2301      	movs	r3, #1
 8012700:	4607      	mov	r7, r0
 8012702:	e7f0      	b.n	80126e6 <_svfiprintf_r+0x182>
 8012704:	ab03      	add	r3, sp, #12
 8012706:	9300      	str	r3, [sp, #0]
 8012708:	4622      	mov	r2, r4
 801270a:	4b11      	ldr	r3, [pc, #68]	; (8012750 <_svfiprintf_r+0x1ec>)
 801270c:	a904      	add	r1, sp, #16
 801270e:	4640      	mov	r0, r8
 8012710:	f3af 8000 	nop.w
 8012714:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012718:	4681      	mov	r9, r0
 801271a:	d1d6      	bne.n	80126ca <_svfiprintf_r+0x166>
 801271c:	89a3      	ldrh	r3, [r4, #12]
 801271e:	065b      	lsls	r3, r3, #25
 8012720:	f53f af35 	bmi.w	801258e <_svfiprintf_r+0x2a>
 8012724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012726:	b01d      	add	sp, #116	; 0x74
 8012728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801272c:	ab03      	add	r3, sp, #12
 801272e:	9300      	str	r3, [sp, #0]
 8012730:	4622      	mov	r2, r4
 8012732:	4b07      	ldr	r3, [pc, #28]	; (8012750 <_svfiprintf_r+0x1ec>)
 8012734:	a904      	add	r1, sp, #16
 8012736:	4640      	mov	r0, r8
 8012738:	f000 f882 	bl	8012840 <_printf_i>
 801273c:	e7ea      	b.n	8012714 <_svfiprintf_r+0x1b0>
 801273e:	bf00      	nop
 8012740:	08014e10 	.word	0x08014e10
 8012744:	08014e16 	.word	0x08014e16
 8012748:	08014e1a 	.word	0x08014e1a
 801274c:	00000000 	.word	0x00000000
 8012750:	080124b1 	.word	0x080124b1

08012754 <_printf_common>:
 8012754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012758:	4691      	mov	r9, r2
 801275a:	461f      	mov	r7, r3
 801275c:	688a      	ldr	r2, [r1, #8]
 801275e:	690b      	ldr	r3, [r1, #16]
 8012760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012764:	4293      	cmp	r3, r2
 8012766:	bfb8      	it	lt
 8012768:	4613      	movlt	r3, r2
 801276a:	f8c9 3000 	str.w	r3, [r9]
 801276e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012772:	4606      	mov	r6, r0
 8012774:	460c      	mov	r4, r1
 8012776:	b112      	cbz	r2, 801277e <_printf_common+0x2a>
 8012778:	3301      	adds	r3, #1
 801277a:	f8c9 3000 	str.w	r3, [r9]
 801277e:	6823      	ldr	r3, [r4, #0]
 8012780:	0699      	lsls	r1, r3, #26
 8012782:	bf42      	ittt	mi
 8012784:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012788:	3302      	addmi	r3, #2
 801278a:	f8c9 3000 	strmi.w	r3, [r9]
 801278e:	6825      	ldr	r5, [r4, #0]
 8012790:	f015 0506 	ands.w	r5, r5, #6
 8012794:	d107      	bne.n	80127a6 <_printf_common+0x52>
 8012796:	f104 0a19 	add.w	sl, r4, #25
 801279a:	68e3      	ldr	r3, [r4, #12]
 801279c:	f8d9 2000 	ldr.w	r2, [r9]
 80127a0:	1a9b      	subs	r3, r3, r2
 80127a2:	42ab      	cmp	r3, r5
 80127a4:	dc28      	bgt.n	80127f8 <_printf_common+0xa4>
 80127a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80127aa:	6822      	ldr	r2, [r4, #0]
 80127ac:	3300      	adds	r3, #0
 80127ae:	bf18      	it	ne
 80127b0:	2301      	movne	r3, #1
 80127b2:	0692      	lsls	r2, r2, #26
 80127b4:	d42d      	bmi.n	8012812 <_printf_common+0xbe>
 80127b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80127ba:	4639      	mov	r1, r7
 80127bc:	4630      	mov	r0, r6
 80127be:	47c0      	blx	r8
 80127c0:	3001      	adds	r0, #1
 80127c2:	d020      	beq.n	8012806 <_printf_common+0xb2>
 80127c4:	6823      	ldr	r3, [r4, #0]
 80127c6:	68e5      	ldr	r5, [r4, #12]
 80127c8:	f8d9 2000 	ldr.w	r2, [r9]
 80127cc:	f003 0306 	and.w	r3, r3, #6
 80127d0:	2b04      	cmp	r3, #4
 80127d2:	bf08      	it	eq
 80127d4:	1aad      	subeq	r5, r5, r2
 80127d6:	68a3      	ldr	r3, [r4, #8]
 80127d8:	6922      	ldr	r2, [r4, #16]
 80127da:	bf0c      	ite	eq
 80127dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80127e0:	2500      	movne	r5, #0
 80127e2:	4293      	cmp	r3, r2
 80127e4:	bfc4      	itt	gt
 80127e6:	1a9b      	subgt	r3, r3, r2
 80127e8:	18ed      	addgt	r5, r5, r3
 80127ea:	f04f 0900 	mov.w	r9, #0
 80127ee:	341a      	adds	r4, #26
 80127f0:	454d      	cmp	r5, r9
 80127f2:	d11a      	bne.n	801282a <_printf_common+0xd6>
 80127f4:	2000      	movs	r0, #0
 80127f6:	e008      	b.n	801280a <_printf_common+0xb6>
 80127f8:	2301      	movs	r3, #1
 80127fa:	4652      	mov	r2, sl
 80127fc:	4639      	mov	r1, r7
 80127fe:	4630      	mov	r0, r6
 8012800:	47c0      	blx	r8
 8012802:	3001      	adds	r0, #1
 8012804:	d103      	bne.n	801280e <_printf_common+0xba>
 8012806:	f04f 30ff 	mov.w	r0, #4294967295
 801280a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801280e:	3501      	adds	r5, #1
 8012810:	e7c3      	b.n	801279a <_printf_common+0x46>
 8012812:	18e1      	adds	r1, r4, r3
 8012814:	1c5a      	adds	r2, r3, #1
 8012816:	2030      	movs	r0, #48	; 0x30
 8012818:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801281c:	4422      	add	r2, r4
 801281e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012822:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012826:	3302      	adds	r3, #2
 8012828:	e7c5      	b.n	80127b6 <_printf_common+0x62>
 801282a:	2301      	movs	r3, #1
 801282c:	4622      	mov	r2, r4
 801282e:	4639      	mov	r1, r7
 8012830:	4630      	mov	r0, r6
 8012832:	47c0      	blx	r8
 8012834:	3001      	adds	r0, #1
 8012836:	d0e6      	beq.n	8012806 <_printf_common+0xb2>
 8012838:	f109 0901 	add.w	r9, r9, #1
 801283c:	e7d8      	b.n	80127f0 <_printf_common+0x9c>
	...

08012840 <_printf_i>:
 8012840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012844:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012848:	460c      	mov	r4, r1
 801284a:	7e09      	ldrb	r1, [r1, #24]
 801284c:	b085      	sub	sp, #20
 801284e:	296e      	cmp	r1, #110	; 0x6e
 8012850:	4617      	mov	r7, r2
 8012852:	4606      	mov	r6, r0
 8012854:	4698      	mov	r8, r3
 8012856:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012858:	f000 80b3 	beq.w	80129c2 <_printf_i+0x182>
 801285c:	d822      	bhi.n	80128a4 <_printf_i+0x64>
 801285e:	2963      	cmp	r1, #99	; 0x63
 8012860:	d036      	beq.n	80128d0 <_printf_i+0x90>
 8012862:	d80a      	bhi.n	801287a <_printf_i+0x3a>
 8012864:	2900      	cmp	r1, #0
 8012866:	f000 80b9 	beq.w	80129dc <_printf_i+0x19c>
 801286a:	2958      	cmp	r1, #88	; 0x58
 801286c:	f000 8083 	beq.w	8012976 <_printf_i+0x136>
 8012870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012874:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012878:	e032      	b.n	80128e0 <_printf_i+0xa0>
 801287a:	2964      	cmp	r1, #100	; 0x64
 801287c:	d001      	beq.n	8012882 <_printf_i+0x42>
 801287e:	2969      	cmp	r1, #105	; 0x69
 8012880:	d1f6      	bne.n	8012870 <_printf_i+0x30>
 8012882:	6820      	ldr	r0, [r4, #0]
 8012884:	6813      	ldr	r3, [r2, #0]
 8012886:	0605      	lsls	r5, r0, #24
 8012888:	f103 0104 	add.w	r1, r3, #4
 801288c:	d52a      	bpl.n	80128e4 <_printf_i+0xa4>
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	6011      	str	r1, [r2, #0]
 8012892:	2b00      	cmp	r3, #0
 8012894:	da03      	bge.n	801289e <_printf_i+0x5e>
 8012896:	222d      	movs	r2, #45	; 0x2d
 8012898:	425b      	negs	r3, r3
 801289a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801289e:	486f      	ldr	r0, [pc, #444]	; (8012a5c <_printf_i+0x21c>)
 80128a0:	220a      	movs	r2, #10
 80128a2:	e039      	b.n	8012918 <_printf_i+0xd8>
 80128a4:	2973      	cmp	r1, #115	; 0x73
 80128a6:	f000 809d 	beq.w	80129e4 <_printf_i+0x1a4>
 80128aa:	d808      	bhi.n	80128be <_printf_i+0x7e>
 80128ac:	296f      	cmp	r1, #111	; 0x6f
 80128ae:	d020      	beq.n	80128f2 <_printf_i+0xb2>
 80128b0:	2970      	cmp	r1, #112	; 0x70
 80128b2:	d1dd      	bne.n	8012870 <_printf_i+0x30>
 80128b4:	6823      	ldr	r3, [r4, #0]
 80128b6:	f043 0320 	orr.w	r3, r3, #32
 80128ba:	6023      	str	r3, [r4, #0]
 80128bc:	e003      	b.n	80128c6 <_printf_i+0x86>
 80128be:	2975      	cmp	r1, #117	; 0x75
 80128c0:	d017      	beq.n	80128f2 <_printf_i+0xb2>
 80128c2:	2978      	cmp	r1, #120	; 0x78
 80128c4:	d1d4      	bne.n	8012870 <_printf_i+0x30>
 80128c6:	2378      	movs	r3, #120	; 0x78
 80128c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80128cc:	4864      	ldr	r0, [pc, #400]	; (8012a60 <_printf_i+0x220>)
 80128ce:	e055      	b.n	801297c <_printf_i+0x13c>
 80128d0:	6813      	ldr	r3, [r2, #0]
 80128d2:	1d19      	adds	r1, r3, #4
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	6011      	str	r1, [r2, #0]
 80128d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80128dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80128e0:	2301      	movs	r3, #1
 80128e2:	e08c      	b.n	80129fe <_printf_i+0x1be>
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	6011      	str	r1, [r2, #0]
 80128e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80128ec:	bf18      	it	ne
 80128ee:	b21b      	sxthne	r3, r3
 80128f0:	e7cf      	b.n	8012892 <_printf_i+0x52>
 80128f2:	6813      	ldr	r3, [r2, #0]
 80128f4:	6825      	ldr	r5, [r4, #0]
 80128f6:	1d18      	adds	r0, r3, #4
 80128f8:	6010      	str	r0, [r2, #0]
 80128fa:	0628      	lsls	r0, r5, #24
 80128fc:	d501      	bpl.n	8012902 <_printf_i+0xc2>
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	e002      	b.n	8012908 <_printf_i+0xc8>
 8012902:	0668      	lsls	r0, r5, #25
 8012904:	d5fb      	bpl.n	80128fe <_printf_i+0xbe>
 8012906:	881b      	ldrh	r3, [r3, #0]
 8012908:	4854      	ldr	r0, [pc, #336]	; (8012a5c <_printf_i+0x21c>)
 801290a:	296f      	cmp	r1, #111	; 0x6f
 801290c:	bf14      	ite	ne
 801290e:	220a      	movne	r2, #10
 8012910:	2208      	moveq	r2, #8
 8012912:	2100      	movs	r1, #0
 8012914:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012918:	6865      	ldr	r5, [r4, #4]
 801291a:	60a5      	str	r5, [r4, #8]
 801291c:	2d00      	cmp	r5, #0
 801291e:	f2c0 8095 	blt.w	8012a4c <_printf_i+0x20c>
 8012922:	6821      	ldr	r1, [r4, #0]
 8012924:	f021 0104 	bic.w	r1, r1, #4
 8012928:	6021      	str	r1, [r4, #0]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d13d      	bne.n	80129aa <_printf_i+0x16a>
 801292e:	2d00      	cmp	r5, #0
 8012930:	f040 808e 	bne.w	8012a50 <_printf_i+0x210>
 8012934:	4665      	mov	r5, ip
 8012936:	2a08      	cmp	r2, #8
 8012938:	d10b      	bne.n	8012952 <_printf_i+0x112>
 801293a:	6823      	ldr	r3, [r4, #0]
 801293c:	07db      	lsls	r3, r3, #31
 801293e:	d508      	bpl.n	8012952 <_printf_i+0x112>
 8012940:	6923      	ldr	r3, [r4, #16]
 8012942:	6862      	ldr	r2, [r4, #4]
 8012944:	429a      	cmp	r2, r3
 8012946:	bfde      	ittt	le
 8012948:	2330      	movle	r3, #48	; 0x30
 801294a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801294e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012952:	ebac 0305 	sub.w	r3, ip, r5
 8012956:	6123      	str	r3, [r4, #16]
 8012958:	f8cd 8000 	str.w	r8, [sp]
 801295c:	463b      	mov	r3, r7
 801295e:	aa03      	add	r2, sp, #12
 8012960:	4621      	mov	r1, r4
 8012962:	4630      	mov	r0, r6
 8012964:	f7ff fef6 	bl	8012754 <_printf_common>
 8012968:	3001      	adds	r0, #1
 801296a:	d14d      	bne.n	8012a08 <_printf_i+0x1c8>
 801296c:	f04f 30ff 	mov.w	r0, #4294967295
 8012970:	b005      	add	sp, #20
 8012972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012976:	4839      	ldr	r0, [pc, #228]	; (8012a5c <_printf_i+0x21c>)
 8012978:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801297c:	6813      	ldr	r3, [r2, #0]
 801297e:	6821      	ldr	r1, [r4, #0]
 8012980:	1d1d      	adds	r5, r3, #4
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	6015      	str	r5, [r2, #0]
 8012986:	060a      	lsls	r2, r1, #24
 8012988:	d50b      	bpl.n	80129a2 <_printf_i+0x162>
 801298a:	07ca      	lsls	r2, r1, #31
 801298c:	bf44      	itt	mi
 801298e:	f041 0120 	orrmi.w	r1, r1, #32
 8012992:	6021      	strmi	r1, [r4, #0]
 8012994:	b91b      	cbnz	r3, 801299e <_printf_i+0x15e>
 8012996:	6822      	ldr	r2, [r4, #0]
 8012998:	f022 0220 	bic.w	r2, r2, #32
 801299c:	6022      	str	r2, [r4, #0]
 801299e:	2210      	movs	r2, #16
 80129a0:	e7b7      	b.n	8012912 <_printf_i+0xd2>
 80129a2:	064d      	lsls	r5, r1, #25
 80129a4:	bf48      	it	mi
 80129a6:	b29b      	uxthmi	r3, r3
 80129a8:	e7ef      	b.n	801298a <_printf_i+0x14a>
 80129aa:	4665      	mov	r5, ip
 80129ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80129b0:	fb02 3311 	mls	r3, r2, r1, r3
 80129b4:	5cc3      	ldrb	r3, [r0, r3]
 80129b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80129ba:	460b      	mov	r3, r1
 80129bc:	2900      	cmp	r1, #0
 80129be:	d1f5      	bne.n	80129ac <_printf_i+0x16c>
 80129c0:	e7b9      	b.n	8012936 <_printf_i+0xf6>
 80129c2:	6813      	ldr	r3, [r2, #0]
 80129c4:	6825      	ldr	r5, [r4, #0]
 80129c6:	6961      	ldr	r1, [r4, #20]
 80129c8:	1d18      	adds	r0, r3, #4
 80129ca:	6010      	str	r0, [r2, #0]
 80129cc:	0628      	lsls	r0, r5, #24
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	d501      	bpl.n	80129d6 <_printf_i+0x196>
 80129d2:	6019      	str	r1, [r3, #0]
 80129d4:	e002      	b.n	80129dc <_printf_i+0x19c>
 80129d6:	066a      	lsls	r2, r5, #25
 80129d8:	d5fb      	bpl.n	80129d2 <_printf_i+0x192>
 80129da:	8019      	strh	r1, [r3, #0]
 80129dc:	2300      	movs	r3, #0
 80129de:	6123      	str	r3, [r4, #16]
 80129e0:	4665      	mov	r5, ip
 80129e2:	e7b9      	b.n	8012958 <_printf_i+0x118>
 80129e4:	6813      	ldr	r3, [r2, #0]
 80129e6:	1d19      	adds	r1, r3, #4
 80129e8:	6011      	str	r1, [r2, #0]
 80129ea:	681d      	ldr	r5, [r3, #0]
 80129ec:	6862      	ldr	r2, [r4, #4]
 80129ee:	2100      	movs	r1, #0
 80129f0:	4628      	mov	r0, r5
 80129f2:	f7ed fbf5 	bl	80001e0 <memchr>
 80129f6:	b108      	cbz	r0, 80129fc <_printf_i+0x1bc>
 80129f8:	1b40      	subs	r0, r0, r5
 80129fa:	6060      	str	r0, [r4, #4]
 80129fc:	6863      	ldr	r3, [r4, #4]
 80129fe:	6123      	str	r3, [r4, #16]
 8012a00:	2300      	movs	r3, #0
 8012a02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a06:	e7a7      	b.n	8012958 <_printf_i+0x118>
 8012a08:	6923      	ldr	r3, [r4, #16]
 8012a0a:	462a      	mov	r2, r5
 8012a0c:	4639      	mov	r1, r7
 8012a0e:	4630      	mov	r0, r6
 8012a10:	47c0      	blx	r8
 8012a12:	3001      	adds	r0, #1
 8012a14:	d0aa      	beq.n	801296c <_printf_i+0x12c>
 8012a16:	6823      	ldr	r3, [r4, #0]
 8012a18:	079b      	lsls	r3, r3, #30
 8012a1a:	d413      	bmi.n	8012a44 <_printf_i+0x204>
 8012a1c:	68e0      	ldr	r0, [r4, #12]
 8012a1e:	9b03      	ldr	r3, [sp, #12]
 8012a20:	4298      	cmp	r0, r3
 8012a22:	bfb8      	it	lt
 8012a24:	4618      	movlt	r0, r3
 8012a26:	e7a3      	b.n	8012970 <_printf_i+0x130>
 8012a28:	2301      	movs	r3, #1
 8012a2a:	464a      	mov	r2, r9
 8012a2c:	4639      	mov	r1, r7
 8012a2e:	4630      	mov	r0, r6
 8012a30:	47c0      	blx	r8
 8012a32:	3001      	adds	r0, #1
 8012a34:	d09a      	beq.n	801296c <_printf_i+0x12c>
 8012a36:	3501      	adds	r5, #1
 8012a38:	68e3      	ldr	r3, [r4, #12]
 8012a3a:	9a03      	ldr	r2, [sp, #12]
 8012a3c:	1a9b      	subs	r3, r3, r2
 8012a3e:	42ab      	cmp	r3, r5
 8012a40:	dcf2      	bgt.n	8012a28 <_printf_i+0x1e8>
 8012a42:	e7eb      	b.n	8012a1c <_printf_i+0x1dc>
 8012a44:	2500      	movs	r5, #0
 8012a46:	f104 0919 	add.w	r9, r4, #25
 8012a4a:	e7f5      	b.n	8012a38 <_printf_i+0x1f8>
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d1ac      	bne.n	80129aa <_printf_i+0x16a>
 8012a50:	7803      	ldrb	r3, [r0, #0]
 8012a52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012a56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a5a:	e76c      	b.n	8012936 <_printf_i+0xf6>
 8012a5c:	08014e21 	.word	0x08014e21
 8012a60:	08014e32 	.word	0x08014e32

08012a64 <_sbrk_r>:
 8012a64:	b538      	push	{r3, r4, r5, lr}
 8012a66:	4c06      	ldr	r4, [pc, #24]	; (8012a80 <_sbrk_r+0x1c>)
 8012a68:	2300      	movs	r3, #0
 8012a6a:	4605      	mov	r5, r0
 8012a6c:	4608      	mov	r0, r1
 8012a6e:	6023      	str	r3, [r4, #0]
 8012a70:	f000 f838 	bl	8012ae4 <_sbrk>
 8012a74:	1c43      	adds	r3, r0, #1
 8012a76:	d102      	bne.n	8012a7e <_sbrk_r+0x1a>
 8012a78:	6823      	ldr	r3, [r4, #0]
 8012a7a:	b103      	cbz	r3, 8012a7e <_sbrk_r+0x1a>
 8012a7c:	602b      	str	r3, [r5, #0]
 8012a7e:	bd38      	pop	{r3, r4, r5, pc}
 8012a80:	2000783c 	.word	0x2000783c

08012a84 <__malloc_lock>:
 8012a84:	4770      	bx	lr

08012a86 <__malloc_unlock>:
 8012a86:	4770      	bx	lr

08012a88 <_realloc_r>:
 8012a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a8a:	4607      	mov	r7, r0
 8012a8c:	4614      	mov	r4, r2
 8012a8e:	460e      	mov	r6, r1
 8012a90:	b921      	cbnz	r1, 8012a9c <_realloc_r+0x14>
 8012a92:	4611      	mov	r1, r2
 8012a94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012a98:	f7ff bcb0 	b.w	80123fc <_malloc_r>
 8012a9c:	b922      	cbnz	r2, 8012aa8 <_realloc_r+0x20>
 8012a9e:	f7ff fc5f 	bl	8012360 <_free_r>
 8012aa2:	4625      	mov	r5, r4
 8012aa4:	4628      	mov	r0, r5
 8012aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012aa8:	f000 f814 	bl	8012ad4 <_malloc_usable_size_r>
 8012aac:	42a0      	cmp	r0, r4
 8012aae:	d20f      	bcs.n	8012ad0 <_realloc_r+0x48>
 8012ab0:	4621      	mov	r1, r4
 8012ab2:	4638      	mov	r0, r7
 8012ab4:	f7ff fca2 	bl	80123fc <_malloc_r>
 8012ab8:	4605      	mov	r5, r0
 8012aba:	2800      	cmp	r0, #0
 8012abc:	d0f2      	beq.n	8012aa4 <_realloc_r+0x1c>
 8012abe:	4631      	mov	r1, r6
 8012ac0:	4622      	mov	r2, r4
 8012ac2:	f7ff fb75 	bl	80121b0 <memcpy>
 8012ac6:	4631      	mov	r1, r6
 8012ac8:	4638      	mov	r0, r7
 8012aca:	f7ff fc49 	bl	8012360 <_free_r>
 8012ace:	e7e9      	b.n	8012aa4 <_realloc_r+0x1c>
 8012ad0:	4635      	mov	r5, r6
 8012ad2:	e7e7      	b.n	8012aa4 <_realloc_r+0x1c>

08012ad4 <_malloc_usable_size_r>:
 8012ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ad8:	1f18      	subs	r0, r3, #4
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	bfbc      	itt	lt
 8012ade:	580b      	ldrlt	r3, [r1, r0]
 8012ae0:	18c0      	addlt	r0, r0, r3
 8012ae2:	4770      	bx	lr

08012ae4 <_sbrk>:
 8012ae4:	4b04      	ldr	r3, [pc, #16]	; (8012af8 <_sbrk+0x14>)
 8012ae6:	6819      	ldr	r1, [r3, #0]
 8012ae8:	4602      	mov	r2, r0
 8012aea:	b909      	cbnz	r1, 8012af0 <_sbrk+0xc>
 8012aec:	4903      	ldr	r1, [pc, #12]	; (8012afc <_sbrk+0x18>)
 8012aee:	6019      	str	r1, [r3, #0]
 8012af0:	6818      	ldr	r0, [r3, #0]
 8012af2:	4402      	add	r2, r0
 8012af4:	601a      	str	r2, [r3, #0]
 8012af6:	4770      	bx	lr
 8012af8:	20002bc4 	.word	0x20002bc4
 8012afc:	20007840 	.word	0x20007840

08012b00 <_init>:
 8012b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b02:	bf00      	nop
 8012b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b06:	bc08      	pop	{r3}
 8012b08:	469e      	mov	lr, r3
 8012b0a:	4770      	bx	lr

08012b0c <_fini>:
 8012b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b0e:	bf00      	nop
 8012b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b12:	bc08      	pop	{r3}
 8012b14:	469e      	mov	lr, r3
 8012b16:	4770      	bx	lr
