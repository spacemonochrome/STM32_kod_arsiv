
STM32_SPI_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004858  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac0  08004ac0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ac8  08004ac8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac8  08004ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004acc  08004acc  00014acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005184  20000084  08004b54  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20005208  08004b54  00025208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce9e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001de5  00000000  00000000  0002cf52  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000950  00000000  00000000  0002ed38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000858  00000000  00000000  0002f688  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021303  00000000  00000000  0002fee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000098f4  00000000  00000000  000511e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2371  00000000  00000000  0005aad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011ce48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000247c  00000000  00000000  0011cec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080049c8 	.word	0x080049c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	080049c8 	.word	0x080049c8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fb92 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f864 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f902 	bl	80006dc <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d8:	f000 f8ca 	bl	8000670 <MX_SPI1_Init>
  MX_FATFS_Init();
 80004dc:	f001 fd98 	bl	8002010 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80004e0:	2064      	movs	r0, #100	; 0x64
 80004e2:	f000 fbf9 	bl	8000cd8 <HAL_Delay>

  //format drive
  //fres = _mkfs("", FM_ANY, 0, buffer, sizeof(buffer));

  FATFS_LinkDriver(&USER_Driver, SFLASHPath);
 80004e6:	4925      	ldr	r1, [pc, #148]	; (800057c <main+0xb4>)
 80004e8:	4825      	ldr	r0, [pc, #148]	; (8000580 <main+0xb8>)
 80004ea:	f004 fa31 	bl	8004950 <FATFS_LinkDriver>

  //Mount drive
  fres = f_mount(&FatFs, &SFLASHPath, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	4922      	ldr	r1, [pc, #136]	; (800057c <main+0xb4>)
 80004f2:	4824      	ldr	r0, [pc, #144]	; (8000584 <main+0xbc>)
 80004f4:	f003 fc32 	bl	8003d5c <f_mount>
 80004f8:	4603      	mov	r3, r0
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b22      	ldr	r3, [pc, #136]	; (8000588 <main+0xc0>)
 80004fe:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK)
 8000500:	4b21      	ldr	r3, [pc, #132]	; (8000588 <main+0xc0>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d000      	beq.n	800050a <main+0x42>
  {
    while(1);
 8000508:	e7fe      	b.n	8000508 <main+0x40>
  }


  fres = f_open(&SFLASHPath, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800050a:	220a      	movs	r2, #10
 800050c:	491f      	ldr	r1, [pc, #124]	; (800058c <main+0xc4>)
 800050e:	481b      	ldr	r0, [pc, #108]	; (800057c <main+0xb4>)
 8000510:	f003 fc6a 	bl	8003de8 <f_open>
 8000514:	4603      	mov	r3, r0
 8000516:	461a      	mov	r2, r3
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <main+0xc0>)
 800051a:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK)
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <main+0xc0>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d000      	beq.n	8000526 <main+0x5e>
  {
 	 while(1);
 8000524:	e7fe      	b.n	8000524 <main+0x5c>
  }
  else
  {
	  fres = f_write(&SFLASHPath, &str, sizeof(str), brw);
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <main+0xc8>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2264      	movs	r2, #100	; 0x64
 800052c:	4919      	ldr	r1, [pc, #100]	; (8000594 <main+0xcc>)
 800052e:	4813      	ldr	r0, [pc, #76]	; (800057c <main+0xb4>)
 8000530:	f003 ff85 	bl	800443e <f_write>
 8000534:	4603      	mov	r3, r0
 8000536:	461a      	mov	r2, r3
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <main+0xc0>)
 800053a:	701a      	strb	r2, [r3, #0]
  }
  f_close(&SFLASHPath);
 800053c:	480f      	ldr	r0, [pc, #60]	; (800057c <main+0xb4>)
 800053e:	f004 f990 	bl	8004862 <f_close>

  fres = f_open(&SFLASHPath, "test.txt", FA_READ);
 8000542:	2201      	movs	r2, #1
 8000544:	4911      	ldr	r1, [pc, #68]	; (800058c <main+0xc4>)
 8000546:	480d      	ldr	r0, [pc, #52]	; (800057c <main+0xb4>)
 8000548:	f003 fc4e 	bl	8003de8 <f_open>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <main+0xc0>)
 8000552:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK)
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <main+0xc0>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d000      	beq.n	800055e <main+0x96>
  {
	  while(1);
 800055c:	e7fe      	b.n	800055c <main+0x94>
  }
  else
  {
	  fres = f_read(&SFLASHPath, &buffer, 11, &brw);
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <main+0xc8>)
 8000560:	220b      	movs	r2, #11
 8000562:	490d      	ldr	r1, [pc, #52]	; (8000598 <main+0xd0>)
 8000564:	4805      	ldr	r0, [pc, #20]	; (800057c <main+0xb4>)
 8000566:	f003 fe0b 	bl	8004180 <f_read>
 800056a:	4603      	mov	r3, r0
 800056c:	461a      	mov	r2, r3
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <main+0xc0>)
 8000570:	701a      	strb	r2, [r3, #0]
  }
  f_close(&SFLASHPath);
 8000572:	4802      	ldr	r0, [pc, #8]	; (800057c <main+0xb4>)
 8000574:	f004 f975 	bl	8004862 <f_close>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	e7fe      	b.n	8000578 <main+0xb0>
 800057a:	bf00      	nop
 800057c:	2000210c 	.word	0x2000210c
 8000580:	20000070 	.word	0x20000070
 8000584:	200000d4 	.word	0x200000d4
 8000588:	20003194 	.word	0x20003194
 800058c:	080049e0 	.word	0x080049e0
 8000590:	20001108 	.word	0x20001108
 8000594:	20000000 	.word	0x20000000
 8000598:	2000110c 	.word	0x2000110c

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2230      	movs	r2, #48	; 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f004 fa04 	bl	80049b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	4b28      	ldr	r3, [pc, #160]	; (8000668 <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	4a27      	ldr	r2, [pc, #156]	; (8000668 <SystemClock_Config+0xcc>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	; 0x40
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b22      	ldr	r3, [pc, #136]	; (800066c <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a21      	ldr	r2, [pc, #132]	; (800066c <SystemClock_Config+0xd0>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000610:	23a8      	movs	r3, #168	; 0xa8
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fe15 	bl	8001250 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800062c:	f000 f898 	bl	8000760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2302      	movs	r3, #2
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2105      	movs	r1, #5
 800064e:	4618      	mov	r0, r3
 8000650:	f001 f86e 	bl	8001730 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800065a:	f000 f881 	bl	8000760 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	; 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000674:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_SPI1_Init+0x64>)
 8000676:	4a18      	ldr	r2, [pc, #96]	; (80006d8 <MX_SPI1_Init+0x68>)
 8000678:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_SPI1_Init+0x64>)
 800067c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000680:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_SPI1_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_SPI1_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_SPI1_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_SPI1_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_SPI1_Init+0x64>)
 800069c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_SPI1_Init+0x64>)
 80006a4:	2210      	movs	r2, #16
 80006a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_SPI1_Init+0x64>)
 80006bc:	220a      	movs	r2, #10
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_SPI1_Init+0x64>)
 80006c2:	f001 f9f3 	bl	8001aac <HAL_SPI_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006cc:	f000 f848 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000313c 	.word	0x2000313c
 80006d8:	40013000 	.word	0x40013000

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	4b18      	ldr	r3, [pc, #96]	; (8000758 <MX_GPIO_Init+0x7c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a17      	ldr	r2, [pc, #92]	; (8000758 <MX_GPIO_Init+0x7c>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_GPIO_Init+0x7c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_GPIO_Init+0x7c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a10      	ldr	r2, [pc, #64]	; (8000758 <MX_GPIO_Init+0x7c>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_GPIO_Init+0x7c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2110      	movs	r1, #16
 800072e:	480b      	ldr	r0, [pc, #44]	; (800075c <MX_GPIO_Init+0x80>)
 8000730:	f000 fd74 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000734:	2310      	movs	r3, #16
 8000736:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	4619      	mov	r1, r3
 800074a:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_GPIO_Init+0x80>)
 800074c:	f000 fbcc 	bl	8000ee8 <HAL_GPIO_Init>

}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40020000 	.word	0x40020000

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000766:	e7fe      	b.n	8000766 <Error_Handler+0x6>

08000768 <SPIFLASH_disk_initialize>:
#include "spi_flash.h"

extern SPI_HandleTypeDef hspi1;

int32_t SPIFLASH_disk_initialize(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
	int ret;

	ret = W25X_GetChipID();
 800076e:	f000 f82d 	bl	80007cc <W25X_GetChipID>
 8000772:	6078      	str	r0, [r7, #4]
	if(ret!=W25X16_CHIPID)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a05      	ldr	r2, [pc, #20]	; (800078c <SPIFLASH_disk_initialize+0x24>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d001      	beq.n	8000780 <SPIFLASH_disk_initialize+0x18>
		return 1;
 800077c:	2301      	movs	r3, #1
 800077e:	e000      	b.n	8000782 <SPIFLASH_disk_initialize+0x1a>

	return 0;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	00ef4015 	.word	0x00ef4015

08000790 <SPI_Read_Byte>:

uint8_t SPI_Read_Byte(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	return (SPI_Write_Byte(0xFF));
 8000794:	20ff      	movs	r0, #255	; 0xff
 8000796:	f000 f803 	bl	80007a0 <SPI_Write_Byte>
 800079a:	4603      	mov	r3, r0
}
 800079c:	4618      	mov	r0, r3
 800079e:	bd80      	pop	{r7, pc}

080007a0 <SPI_Write_Byte>:

uint8_t SPI_Write_Byte(uint8_t data)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	char read_data;

	HAL_SPI_TransmitReceive(&hspi1, &data, &read_data, 1, 1);
 80007aa:	f107 020f 	add.w	r2, r7, #15
 80007ae:	1df9      	adds	r1, r7, #7
 80007b0:	2301      	movs	r3, #1
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2301      	movs	r3, #1
 80007b6:	4804      	ldr	r0, [pc, #16]	; (80007c8 <SPI_Write_Byte+0x28>)
 80007b8:	f001 f9dc 	bl	8001b74 <HAL_SPI_TransmitReceive>
	return read_data;
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000313c 	.word	0x2000313c

080007cc <W25X_GetChipID>:

#if USE_GETCHIPID
int W25X_GetChipID(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
	int nID = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
	
	FLASH_CS_0();
 80007d6:	2200      	movs	r2, #0
 80007d8:	2110      	movs	r1, #16
 80007da:	4814      	ldr	r0, [pc, #80]	; (800082c <W25X_GetChipID+0x60>)
 80007dc:	f000 fd1e 	bl	800121c <HAL_GPIO_WritePin>

	SPI_Write_Byte(W25X_JedecDeviceID);
 80007e0:	209f      	movs	r0, #159	; 0x9f
 80007e2:	f7ff ffdd 	bl	80007a0 <SPI_Write_Byte>
	nID = SPI_Read_Byte();
 80007e6:	f7ff ffd3 	bl	8000790 <SPI_Read_Byte>
 80007ea:	4603      	mov	r3, r0
 80007ec:	607b      	str	r3, [r7, #4]
	nID <<= 8;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	607b      	str	r3, [r7, #4]
	nID |= SPI_Read_Byte();
 80007f4:	f7ff ffcc 	bl	8000790 <SPI_Read_Byte>
 80007f8:	4603      	mov	r3, r0
 80007fa:	461a      	mov	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4313      	orrs	r3, r2
 8000800:	607b      	str	r3, [r7, #4]
	nID <<= 8;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	607b      	str	r3, [r7, #4]
	nID |= SPI_Read_Byte();
 8000808:	f7ff ffc2 	bl	8000790 <SPI_Read_Byte>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4313      	orrs	r3, r2
 8000814:	607b      	str	r3, [r7, #4]
	
	FLASH_CS_1();
 8000816:	2201      	movs	r2, #1
 8000818:	2110      	movs	r1, #16
 800081a:	4804      	ldr	r0, [pc, #16]	; (800082c <W25X_GetChipID+0x60>)
 800081c:	f000 fcfe 	bl	800121c <HAL_GPIO_WritePin>

	return nID;
 8000820:	687b      	ldr	r3, [r7, #4]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40020000 	.word	0x40020000

08000830 <W25X_Read_StatusReg>:
#endif

#if USE_READ_STATUSREG
char W25X_Read_StatusReg(void)
{	char u8 = 0;
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	2300      	movs	r3, #0
 8000838:	71fb      	strb	r3, [r7, #7]
	FLASH_CS_0();
 800083a:	2200      	movs	r2, #0
 800083c:	2110      	movs	r1, #16
 800083e:	480a      	ldr	r0, [pc, #40]	; (8000868 <W25X_Read_StatusReg+0x38>)
 8000840:	f000 fcec 	bl	800121c <HAL_GPIO_WritePin>
	SPI_Write_Byte(W25X_ReadStatusReg);
 8000844:	2005      	movs	r0, #5
 8000846:	f7ff ffab 	bl	80007a0 <SPI_Write_Byte>
	u8 = SPI_Read_Byte();
 800084a:	f7ff ffa1 	bl	8000790 <SPI_Read_Byte>
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	FLASH_CS_1();	
 8000852:	2201      	movs	r2, #1
 8000854:	2110      	movs	r1, #16
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <W25X_Read_StatusReg+0x38>)
 8000858:	f000 fce0 	bl	800121c <HAL_GPIO_WritePin>
	return u8;
 800085c:	79fb      	ldrb	r3, [r7, #7]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40020000 	.word	0x40020000

0800086c <W25X_Write_Enable>:
}
#endif

#if USE_WRITE_ENABLE
void W25X_Write_Enable(void)
{	FLASH_CS_0();
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
 8000870:	2200      	movs	r2, #0
 8000872:	2110      	movs	r1, #16
 8000874:	4806      	ldr	r0, [pc, #24]	; (8000890 <W25X_Write_Enable+0x24>)
 8000876:	f000 fcd1 	bl	800121c <HAL_GPIO_WritePin>
	SPI_Write_Byte(W25X_WriteEnable);
 800087a:	2006      	movs	r0, #6
 800087c:	f7ff ff90 	bl	80007a0 <SPI_Write_Byte>
	FLASH_CS_1();
 8000880:	2201      	movs	r2, #1
 8000882:	2110      	movs	r1, #16
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <W25X_Write_Enable+0x24>)
 8000886:	f000 fcc9 	bl	800121c <HAL_GPIO_WritePin>
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40020000 	.word	0x40020000

08000894 <W25X_Wait_Busy>:
}
#endif

#if USE_WAIT_BUSY
void W25X_Wait_Busy(void)
{	while(W25X_Read_StatusReg() == 0x03)
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
 8000898:	e001      	b.n	800089e <W25X_Wait_Busy+0xa>
		W25X_Read_StatusReg();
 800089a:	f7ff ffc9 	bl	8000830 <W25X_Read_StatusReg>
{	while(W25X_Read_StatusReg() == 0x03)
 800089e:	f7ff ffc7 	bl	8000830 <W25X_Read_StatusReg>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d0f8      	beq.n	800089a <W25X_Wait_Busy+0x6>
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <W25X_Erase_Sector>:
#endif

#if USE_ERASE_SECTOR
void W25X_Erase_Sector(uint32_t nDest)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	nDest *= FLASH_SECTOR_SIZE;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	031b      	lsls	r3, r3, #12
 80008b8:	607b      	str	r3, [r7, #4]
	
	FLASH_CS_0();			
 80008ba:	2200      	movs	r2, #0
 80008bc:	2110      	movs	r1, #16
 80008be:	4814      	ldr	r0, [pc, #80]	; (8000910 <W25X_Erase_Sector+0x64>)
 80008c0:	f000 fcac 	bl	800121c <HAL_GPIO_WritePin>
	W25X_Write_Enable();
 80008c4:	f7ff ffd2 	bl	800086c <W25X_Write_Enable>
	FLASH_CS_0();
 80008c8:	2200      	movs	r2, #0
 80008ca:	2110      	movs	r1, #16
 80008cc:	4810      	ldr	r0, [pc, #64]	; (8000910 <W25X_Erase_Sector+0x64>)
 80008ce:	f000 fca5 	bl	800121c <HAL_GPIO_WritePin>
	SPI_Write_Byte(W25X_SectorErase);
 80008d2:	2020      	movs	r0, #32
 80008d4:	f7ff ff64 	bl	80007a0 <SPI_Write_Byte>
	SPI_Write_Byte((char)((nDest & 0xFFFFFF) >> 16));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	0c1b      	lsrs	r3, r3, #16
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff5e 	bl	80007a0 <SPI_Write_Byte>
	SPI_Write_Byte((char)((nDest & 0xFFFF) >> 8));
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	0a1b      	lsrs	r3, r3, #8
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ff58 	bl	80007a0 <SPI_Write_Byte>
	SPI_Write_Byte((char)nDest & 0xFF);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff53 	bl	80007a0 <SPI_Write_Byte>
	FLASH_CS_1();
 80008fa:	2201      	movs	r2, #1
 80008fc:	2110      	movs	r1, #16
 80008fe:	4804      	ldr	r0, [pc, #16]	; (8000910 <W25X_Erase_Sector+0x64>)
 8000900:	f000 fc8c 	bl	800121c <HAL_GPIO_WritePin>
	W25X_Wait_Busy();
 8000904:	f7ff ffc6 	bl	8000894 <W25X_Wait_Busy>
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40020000 	.word	0x40020000

08000914 <W25X_Read_Sector>:
}
#endif

#if USE_READ_SECTOR
void W25X_Read_Sector(uint32_t nSector, char* pBuffer)
{	uint16_t i;
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]

	nSector *= FLASH_SECTOR_SIZE;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	031b      	lsls	r3, r3, #12
 8000922:	607b      	str	r3, [r7, #4]
	
	FLASH_CS_0();
 8000924:	2200      	movs	r2, #0
 8000926:	2110      	movs	r1, #16
 8000928:	4819      	ldr	r0, [pc, #100]	; (8000990 <W25X_Read_Sector+0x7c>)
 800092a:	f000 fc77 	bl	800121c <HAL_GPIO_WritePin>
	SPI_Write_Byte(W25X_ReadData);
 800092e:	2003      	movs	r0, #3
 8000930:	f7ff ff36 	bl	80007a0 <SPI_Write_Byte>
	SPI_Write_Byte((char)(nSector >> 16));
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	0c1b      	lsrs	r3, r3, #16
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ff30 	bl	80007a0 <SPI_Write_Byte>
	SPI_Write_Byte((char)(nSector>> 8));
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	0a1b      	lsrs	r3, r3, #8
 8000944:	b2db      	uxtb	r3, r3
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ff2a 	bl	80007a0 <SPI_Write_Byte>
	SPI_Write_Byte((char) nSector);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff25 	bl	80007a0 <SPI_Write_Byte>
	
	for(i=0;i<FLASH_SECTOR_SIZE;i++)
 8000956:	2300      	movs	r3, #0
 8000958:	81fb      	strh	r3, [r7, #14]
 800095a:	e009      	b.n	8000970 <W25X_Read_Sector+0x5c>
	{	pBuffer[i] = SPI_Read_Byte();
 800095c:	89fb      	ldrh	r3, [r7, #14]
 800095e:	683a      	ldr	r2, [r7, #0]
 8000960:	18d4      	adds	r4, r2, r3
 8000962:	f7ff ff15 	bl	8000790 <SPI_Read_Byte>
 8000966:	4603      	mov	r3, r0
 8000968:	7023      	strb	r3, [r4, #0]
	for(i=0;i<FLASH_SECTOR_SIZE;i++)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	3301      	adds	r3, #1
 800096e:	81fb      	strh	r3, [r7, #14]
 8000970:	89fb      	ldrh	r3, [r7, #14]
 8000972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000976:	d3f1      	bcc.n	800095c <W25X_Read_Sector+0x48>
	}
	FLASH_CS_1();
 8000978:	2201      	movs	r2, #1
 800097a:	2110      	movs	r1, #16
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <W25X_Read_Sector+0x7c>)
 800097e:	f000 fc4d 	bl	800121c <HAL_GPIO_WritePin>
	W25X_Wait_Busy();
 8000982:	f7ff ff87 	bl	8000894 <W25X_Wait_Busy>
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	bd90      	pop	{r4, r7, pc}
 800098e:	bf00      	nop
 8000990:	40020000 	.word	0x40020000

08000994 <W25X_Write_Sector>:
}
#endif

#if USE_WRITE_SECTOR
void W25X_Write_Sector(uint32_t nSector, char* pBuffer)
{	
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
	int i,j;

	nSector *= FLASH_SECTOR_SIZE;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	031b      	lsls	r3, r3, #12
 80009a2:	607b      	str	r3, [r7, #4]
	
	for(j=0;j<FLASH_PAGES_PER_SECTOR;j++)
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	e041      	b.n	8000a2e <W25X_Write_Sector+0x9a>
	{
		FLASH_CS_0();
 80009aa:	2200      	movs	r2, #0
 80009ac:	2110      	movs	r1, #16
 80009ae:	4823      	ldr	r0, [pc, #140]	; (8000a3c <W25X_Write_Sector+0xa8>)
 80009b0:	f000 fc34 	bl	800121c <HAL_GPIO_WritePin>
		W25X_Write_Enable();
 80009b4:	f7ff ff5a 	bl	800086c <W25X_Write_Enable>
		FLASH_CS_0();
 80009b8:	2200      	movs	r2, #0
 80009ba:	2110      	movs	r1, #16
 80009bc:	481f      	ldr	r0, [pc, #124]	; (8000a3c <W25X_Write_Sector+0xa8>)
 80009be:	f000 fc2d 	bl	800121c <HAL_GPIO_WritePin>
		
		SPI_Write_Byte(W25X_PageProgram);
 80009c2:	2002      	movs	r0, #2
 80009c4:	f7ff feec 	bl	80007a0 <SPI_Write_Byte>
		SPI_Write_Byte((char)(nSector >> 16));
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	0c1b      	lsrs	r3, r3, #16
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fee6 	bl	80007a0 <SPI_Write_Byte>
		SPI_Write_Byte((char)(nSector >> 8));
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	0a1b      	lsrs	r3, r3, #8
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fee0 	bl	80007a0 <SPI_Write_Byte>
		SPI_Write_Byte((char) nSector);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fedb 	bl	80007a0 <SPI_Write_Byte>
		
		for(i=0;i<FLASH_PAGE_SIZE;i++)								
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	e009      	b.n	8000a04 <W25X_Write_Sector+0x70>
			SPI_Write_Byte(pBuffer[i]);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	4413      	add	r3, r2
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fed1 	bl	80007a0 <SPI_Write_Byte>
		for(i=0;i<FLASH_PAGE_SIZE;i++)								
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3301      	adds	r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2bff      	cmp	r3, #255	; 0xff
 8000a08:	ddf2      	ble.n	80009f0 <W25X_Write_Sector+0x5c>
		
		pBuffer += FLASH_PAGE_SIZE;
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a10:	603b      	str	r3, [r7, #0]
		nSector += FLASH_PAGE_SIZE;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a18:	607b      	str	r3, [r7, #4]

		FLASH_CS_1();
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	4807      	ldr	r0, [pc, #28]	; (8000a3c <W25X_Write_Sector+0xa8>)
 8000a20:	f000 fbfc 	bl	800121c <HAL_GPIO_WritePin>
		W25X_Wait_Busy();
 8000a24:	f7ff ff36 	bl	8000894 <W25X_Wait_Busy>
	for(j=0;j<FLASH_PAGES_PER_SECTOR;j++)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	ddba      	ble.n	80009aa <W25X_Write_Sector+0x16>
	}
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40020000 	.word	0x40020000

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a54:	6453      	str	r3, [r2, #68]	; 0x44
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <HAL_SPI_MspInit+0x84>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d12b      	bne.n	8000b0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_SPI_MspInit+0x88>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_SPI_MspInit+0x88>)
 8000abc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_SPI_MspInit+0x88>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_SPI_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <HAL_SPI_MspInit+0x88>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_SPI_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000aea:	23e0      	movs	r3, #224	; 0xe0
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000afa:	2305      	movs	r3, #5
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <HAL_SPI_MspInit+0x8c>)
 8000b06:	f000 f9ef 	bl	8000ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	; 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40013000 	.word	0x40013000
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020000 	.word	0x40020000

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 f894 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <SystemInit+0x28>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <SystemInit+0x28>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <SystemInit+0x28>)
 8000b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ba4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ba6:	e003      	b.n	8000bb0 <LoopCopyDataInit>

08000ba8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000baa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bae:	3104      	adds	r1, #4

08000bb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bb8:	d3f6      	bcc.n	8000ba8 <CopyDataInit>
  ldr  r2, =_sbss
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bbc:	e002      	b.n	8000bc4 <LoopFillZerobss>

08000bbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bc0:	f842 3b04 	str.w	r3, [r2], #4

08000bc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bc8:	d3f9      	bcc.n	8000bbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bca:	f7ff ffd3 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f003 fecf 	bl	8004970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd2:	f7ff fc79 	bl	80004c8 <main>
  bx  lr    
 8000bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bdc:	08004ad0 	.word	0x08004ad0
  ldr  r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000be4:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8000be8:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8000bec:	20005208 	.word	0x20005208

08000bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <HAL_Init+0x40>)
 8000bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_Init+0x40>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_Init+0x40>)
 8000c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f92f 	bl	8000e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 f808 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff ff0a 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023c00 	.word	0x40023c00

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f939 	bl	8000ece <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f90f 	bl	8000e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000064 	.word	0x20000064
 8000c90:	2000006c 	.word	0x2000006c
 8000c94:	20000068 	.word	0x20000068

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	2000006c 	.word	0x2000006c
 8000cbc:	20003198 	.word	0x20003198

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20003198 	.word	0x20003198

08000cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff ffee 	bl	8000cc0 <HAL_GetTick>
 8000ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf0:	d005      	beq.n	8000cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_Delay+0x40>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cfe:	bf00      	nop
 8000d00:	f7ff ffde 	bl	8000cc0 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8f7      	bhi.n	8000d00 <HAL_Delay+0x28>
  {
  }
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2000006c 	.word	0x2000006c

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	; (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
         );
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	; 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e4c:	d301      	bcc.n	8000e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00f      	b.n	8000e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <SysTick_Config+0x40>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f7ff ff8e 	bl	8000d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <SysTick_Config+0x40>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <SysTick_Config+0x40>)
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	e000e010 	.word	0xe000e010

08000e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff47 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea8:	f7ff ff5c 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	68b9      	ldr	r1, [r7, #8]
 8000eb2:	6978      	ldr	r0, [r7, #20]
 8000eb4:	f7ff ff8e 	bl	8000dd4 <NVIC_EncodePriority>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff5d 	bl	8000d80 <__NVIC_SetPriority>
}
 8000ec6:	bf00      	nop
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ffb0 	bl	8000e3c <SysTick_Config>
 8000edc:	4603      	mov	r3, r0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	e16b      	b.n	80011dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 815a 	bne.w	80011d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d00b      	beq.n	8000f42 <HAL_GPIO_Init+0x5a>
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d007      	beq.n	8000f42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f36:	2b11      	cmp	r3, #17
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b12      	cmp	r3, #18
 8000f40:	d130      	bne.n	8000fa4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	091b      	lsrs	r3, r3, #4
 8000f8e:	f003 0201 	and.w	r2, r3, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0xfc>
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b12      	cmp	r3, #18
 8000fe2:	d123      	bne.n	800102c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	69b9      	ldr	r1, [r7, #24]
 8001028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0203 	and.w	r2, r3, #3
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80b4 	beq.w	80011d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b5f      	ldr	r3, [pc, #380]	; (80011f0 <HAL_GPIO_Init+0x308>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a5e      	ldr	r2, [pc, #376]	; (80011f0 <HAL_GPIO_Init+0x308>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b5c      	ldr	r3, [pc, #368]	; (80011f0 <HAL_GPIO_Init+0x308>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108a:	4a5a      	ldr	r2, [pc, #360]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	3302      	adds	r3, #2
 8001092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a51      	ldr	r2, [pc, #324]	; (80011f8 <HAL_GPIO_Init+0x310>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d02b      	beq.n	800110e <HAL_GPIO_Init+0x226>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a50      	ldr	r2, [pc, #320]	; (80011fc <HAL_GPIO_Init+0x314>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d025      	beq.n	800110a <HAL_GPIO_Init+0x222>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4f      	ldr	r2, [pc, #316]	; (8001200 <HAL_GPIO_Init+0x318>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d01f      	beq.n	8001106 <HAL_GPIO_Init+0x21e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4e      	ldr	r2, [pc, #312]	; (8001204 <HAL_GPIO_Init+0x31c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0x21a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4d      	ldr	r2, [pc, #308]	; (8001208 <HAL_GPIO_Init+0x320>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x216>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4c      	ldr	r2, [pc, #304]	; (800120c <HAL_GPIO_Init+0x324>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x212>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4b      	ldr	r2, [pc, #300]	; (8001210 <HAL_GPIO_Init+0x328>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x20e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4a      	ldr	r2, [pc, #296]	; (8001214 <HAL_GPIO_Init+0x32c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x20a>
 80010ee:	2307      	movs	r3, #7
 80010f0:	e00e      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010f2:	2308      	movs	r3, #8
 80010f4:	e00c      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010f6:	2306      	movs	r3, #6
 80010f8:	e00a      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010fa:	2305      	movs	r3, #5
 80010fc:	e008      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010fe:	2304      	movs	r3, #4
 8001100:	e006      	b.n	8001110 <HAL_GPIO_Init+0x228>
 8001102:	2303      	movs	r3, #3
 8001104:	e004      	b.n	8001110 <HAL_GPIO_Init+0x228>
 8001106:	2302      	movs	r3, #2
 8001108:	e002      	b.n	8001110 <HAL_GPIO_Init+0x228>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x228>
 800110e:	2300      	movs	r3, #0
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	f002 0203 	and.w	r2, r2, #3
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	4093      	lsls	r3, r2
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001120:	4934      	ldr	r1, [pc, #208]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800112e:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <HAL_GPIO_Init+0x330>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001152:	4a31      	ldr	r2, [pc, #196]	; (8001218 <HAL_GPIO_Init+0x330>)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001158:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <HAL_GPIO_Init+0x330>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800117c:	4a26      	ldr	r2, [pc, #152]	; (8001218 <HAL_GPIO_Init+0x330>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001182:	4b25      	ldr	r3, [pc, #148]	; (8001218 <HAL_GPIO_Init+0x330>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a6:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <HAL_GPIO_Init+0x330>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <HAL_GPIO_Init+0x330>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d0:	4a11      	ldr	r2, [pc, #68]	; (8001218 <HAL_GPIO_Init+0x330>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3301      	adds	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	f67f ae90 	bls.w	8000f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e4:	bf00      	nop
 80011e6:	3724      	adds	r7, #36	; 0x24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020800 	.word	0x40020800
 8001204:	40020c00 	.word	0x40020c00
 8001208:	40021000 	.word	0x40021000
 800120c:	40021400 	.word	0x40021400
 8001210:	40021800 	.word	0x40021800
 8001214:	40021c00 	.word	0x40021c00
 8001218:	40013c00 	.word	0x40013c00

0800121c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
 8001228:	4613      	mov	r3, r2
 800122a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800122c:	787b      	ldrb	r3, [r7, #1]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001238:	e003      	b.n	8001242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	041a      	lsls	r2, r3, #16
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	619a      	str	r2, [r3, #24]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e25b      	b.n	800171a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d075      	beq.n	800135a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126e:	4ba3      	ldr	r3, [pc, #652]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b04      	cmp	r3, #4
 8001278:	d00c      	beq.n	8001294 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4ba0      	ldr	r3, [pc, #640]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001282:	2b08      	cmp	r3, #8
 8001284:	d112      	bne.n	80012ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001286:	4b9d      	ldr	r3, [pc, #628]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001292:	d10b      	bne.n	80012ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	4b99      	ldr	r3, [pc, #612]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d05b      	beq.n	8001358 <HAL_RCC_OscConfig+0x108>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d157      	bne.n	8001358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e236      	b.n	800171a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b4:	d106      	bne.n	80012c4 <HAL_RCC_OscConfig+0x74>
 80012b6:	4b91      	ldr	r3, [pc, #580]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a90      	ldr	r2, [pc, #576]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e01d      	b.n	8001300 <HAL_RCC_OscConfig+0xb0>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x98>
 80012ce:	4b8b      	ldr	r3, [pc, #556]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a8a      	ldr	r2, [pc, #552]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b88      	ldr	r3, [pc, #544]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a87      	ldr	r2, [pc, #540]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e00b      	b.n	8001300 <HAL_RCC_OscConfig+0xb0>
 80012e8:	4b84      	ldr	r3, [pc, #528]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a83      	ldr	r2, [pc, #524]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b81      	ldr	r3, [pc, #516]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a80      	ldr	r2, [pc, #512]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d013      	beq.n	8001330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fcda 	bl	8000cc0 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fcd6 	bl	8000cc0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	; 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e1fb      	b.n	800171a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	4b76      	ldr	r3, [pc, #472]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0xc0>
 800132e:	e014      	b.n	800135a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fcc6 	bl	8000cc0 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001338:	f7ff fcc2 	bl	8000cc0 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b64      	cmp	r3, #100	; 0x64
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e1e7      	b.n	800171a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134a:	4b6c      	ldr	r3, [pc, #432]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0xe8>
 8001356:	e000      	b.n	800135a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d063      	beq.n	800142e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001366:	4b65      	ldr	r3, [pc, #404]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00b      	beq.n	800138a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b62      	ldr	r3, [pc, #392]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137a:	2b08      	cmp	r3, #8
 800137c:	d11c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137e:	4b5f      	ldr	r3, [pc, #380]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d116      	bne.n	80013b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138a:	4b5c      	ldr	r3, [pc, #368]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <HAL_RCC_OscConfig+0x152>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d001      	beq.n	80013a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e1bb      	b.n	800171a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a2:	4b56      	ldr	r3, [pc, #344]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4952      	ldr	r1, [pc, #328]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b6:	e03a      	b.n	800142e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d020      	beq.n	8001402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c0:	4b4f      	ldr	r3, [pc, #316]	; (8001500 <HAL_RCC_OscConfig+0x2b0>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff fc7b 	bl	8000cc0 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ce:	f7ff fc77 	bl	8000cc0 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e19c      	b.n	800171a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e0:	4b46      	ldr	r3, [pc, #280]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ec:	4b43      	ldr	r3, [pc, #268]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	4940      	ldr	r1, [pc, #256]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]
 8001400:	e015      	b.n	800142e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001402:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <HAL_RCC_OscConfig+0x2b0>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fc5a 	bl	8000cc0 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001410:	f7ff fc56 	bl	8000cc0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e17b      	b.n	800171a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001422:	4b36      	ldr	r3, [pc, #216]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d030      	beq.n	800149c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d016      	beq.n	8001470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001442:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_RCC_OscConfig+0x2b4>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001448:	f7ff fc3a 	bl	8000cc0 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001450:	f7ff fc36 	bl	8000cc0 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e15b      	b.n	800171a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x200>
 800146e:	e015      	b.n	800149c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <HAL_RCC_OscConfig+0x2b4>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff fc23 	bl	8000cc0 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147e:	f7ff fc1f 	bl	8000cc0 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e144      	b.n	800171a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80a0 	beq.w	80015ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10f      	bne.n	80014da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_OscConfig+0x2b8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d121      	bne.n	800152a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_RCC_OscConfig+0x2b8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_RCC_OscConfig+0x2b8>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fbe5 	bl	8000cc0 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	e011      	b.n	800151e <HAL_RCC_OscConfig+0x2ce>
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	42470000 	.word	0x42470000
 8001504:	42470e80 	.word	0x42470e80
 8001508:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150c:	f7ff fbd8 	bl	8000cc0 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e0fd      	b.n	800171a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b81      	ldr	r3, [pc, #516]	; (8001724 <HAL_RCC_OscConfig+0x4d4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d106      	bne.n	8001540 <HAL_RCC_OscConfig+0x2f0>
 8001532:	4b7d      	ldr	r3, [pc, #500]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	4a7c      	ldr	r2, [pc, #496]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
 800153e:	e01c      	b.n	800157a <HAL_RCC_OscConfig+0x32a>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b05      	cmp	r3, #5
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0x312>
 8001548:	4b77      	ldr	r3, [pc, #476]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a76      	ldr	r2, [pc, #472]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
 8001554:	4b74      	ldr	r3, [pc, #464]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	4a73      	ldr	r2, [pc, #460]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6713      	str	r3, [r2, #112]	; 0x70
 8001560:	e00b      	b.n	800157a <HAL_RCC_OscConfig+0x32a>
 8001562:	4b71      	ldr	r3, [pc, #452]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	4a70      	ldr	r2, [pc, #448]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	6713      	str	r3, [r2, #112]	; 0x70
 800156e:	4b6e      	ldr	r3, [pc, #440]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	4a6d      	ldr	r2, [pc, #436]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 8001574:	f023 0304 	bic.w	r3, r3, #4
 8001578:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d015      	beq.n	80015ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001582:	f7ff fb9d 	bl	8000cc0 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001588:	e00a      	b.n	80015a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800158a:	f7ff fb99 	bl	8000cc0 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	f241 3288 	movw	r2, #5000	; 0x1388
 8001598:	4293      	cmp	r3, r2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e0bc      	b.n	800171a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a0:	4b61      	ldr	r3, [pc, #388]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0ee      	beq.n	800158a <HAL_RCC_OscConfig+0x33a>
 80015ac:	e014      	b.n	80015d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ae:	f7ff fb87 	bl	8000cc0 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b4:	e00a      	b.n	80015cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b6:	f7ff fb83 	bl	8000cc0 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e0a6      	b.n	800171a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015cc:	4b56      	ldr	r3, [pc, #344]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1ee      	bne.n	80015b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d105      	bne.n	80015ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015de:	4b52      	ldr	r3, [pc, #328]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a51      	ldr	r2, [pc, #324]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 80015e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 8092 	beq.w	8001718 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015f4:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d05c      	beq.n	80016ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d141      	bne.n	800168c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001608:	4b48      	ldr	r3, [pc, #288]	; (800172c <HAL_RCC_OscConfig+0x4dc>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff fb57 	bl	8000cc0 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001616:	f7ff fb53 	bl	8000cc0 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e078      	b.n	800171a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001628:	4b3f      	ldr	r3, [pc, #252]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f0      	bne.n	8001616 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69da      	ldr	r2, [r3, #28]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	019b      	lsls	r3, r3, #6
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	085b      	lsrs	r3, r3, #1
 800164c:	3b01      	subs	r3, #1
 800164e:	041b      	lsls	r3, r3, #16
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	061b      	lsls	r3, r3, #24
 8001658:	4933      	ldr	r1, [pc, #204]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165e:	4b33      	ldr	r3, [pc, #204]	; (800172c <HAL_RCC_OscConfig+0x4dc>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fb2c 	bl	8000cc0 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166c:	f7ff fb28 	bl	8000cc0 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e04d      	b.n	800171a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x41c>
 800168a:	e045      	b.n	8001718 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168c:	4b27      	ldr	r3, [pc, #156]	; (800172c <HAL_RCC_OscConfig+0x4dc>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7ff fb15 	bl	8000cc0 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169a:	f7ff fb11 	bl	8000cc0 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e036      	b.n	800171a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ac:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x44a>
 80016b8:	e02e      	b.n	8001718 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e029      	b.n	800171a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_RCC_OscConfig+0x4d8>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d11c      	bne.n	8001714 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d115      	bne.n	8001714 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016ee:	4013      	ands	r3, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d10d      	bne.n	8001714 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001702:	429a      	cmp	r2, r3
 8001704:	d106      	bne.n	8001714 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40007000 	.word	0x40007000
 8001728:	40023800 	.word	0x40023800
 800172c:	42470060 	.word	0x42470060

08001730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0cc      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001744:	4b68      	ldr	r3, [pc, #416]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 030f 	and.w	r3, r3, #15
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d90c      	bls.n	800176c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001752:	4b65      	ldr	r3, [pc, #404]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0b8      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d020      	beq.n	80017ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001784:	4b59      	ldr	r3, [pc, #356]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a58      	ldr	r2, [pc, #352]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800178e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800179c:	4b53      	ldr	r3, [pc, #332]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a52      	ldr	r2, [pc, #328]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a8:	4b50      	ldr	r3, [pc, #320]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	494d      	ldr	r1, [pc, #308]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d044      	beq.n	8001850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b47      	ldr	r3, [pc, #284]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d119      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e07f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d003      	beq.n	80017ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ee:	4b3f      	ldr	r3, [pc, #252]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e06f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fe:	4b3b      	ldr	r3, [pc, #236]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e067      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180e:	4b37      	ldr	r3, [pc, #220]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f023 0203 	bic.w	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4934      	ldr	r1, [pc, #208]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001820:	f7ff fa4e 	bl	8000cc0 <HAL_GetTick>
 8001824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	e00a      	b.n	800183e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001828:	f7ff fa4a 	bl	8000cc0 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e04f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183e:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 020c 	and.w	r2, r3, #12
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	429a      	cmp	r2, r3
 800184e:	d1eb      	bne.n	8001828 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d20c      	bcs.n	8001878 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e032      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4916      	ldr	r1, [pc, #88]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	490e      	ldr	r1, [pc, #56]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b6:	f000 f821 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 80018ba:	4601      	mov	r1, r0
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <HAL_RCC_ClockConfig+0x1c0>)
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	fa21 f303 	lsr.w	r3, r1, r3
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_RCC_ClockConfig+0x1c8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f9ae 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023c00 	.word	0x40023c00
 80018ec:	40023800 	.word	0x40023800
 80018f0:	08004a30 	.word	0x08004a30
 80018f4:	20000064 	.word	0x20000064
 80018f8:	20000068 	.word	0x20000068

080018fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	2300      	movs	r3, #0
 800190c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001912:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b04      	cmp	r3, #4
 800191c:	d007      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x32>
 800191e:	2b08      	cmp	r3, #8
 8001920:	d008      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x38>
 8001922:	2b00      	cmp	r3, #0
 8001924:	f040 80b4 	bne.w	8001a90 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b5e      	ldr	r3, [pc, #376]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800192a:	60bb      	str	r3, [r7, #8]
       break;
 800192c:	e0b3      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192e:	4b5e      	ldr	r3, [pc, #376]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001930:	60bb      	str	r3, [r7, #8]
      break;
 8001932:	e0b0      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001934:	4b5a      	ldr	r3, [pc, #360]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800193c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193e:	4b58      	ldr	r3, [pc, #352]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d04a      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194a:	4b55      	ldr	r3, [pc, #340]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	099b      	lsrs	r3, r3, #6
 8001950:	f04f 0400 	mov.w	r4, #0
 8001954:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	ea03 0501 	and.w	r5, r3, r1
 8001960:	ea04 0602 	and.w	r6, r4, r2
 8001964:	4629      	mov	r1, r5
 8001966:	4632      	mov	r2, r6
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	f04f 0400 	mov.w	r4, #0
 8001970:	0154      	lsls	r4, r2, #5
 8001972:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001976:	014b      	lsls	r3, r1, #5
 8001978:	4619      	mov	r1, r3
 800197a:	4622      	mov	r2, r4
 800197c:	1b49      	subs	r1, r1, r5
 800197e:	eb62 0206 	sbc.w	r2, r2, r6
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	f04f 0400 	mov.w	r4, #0
 800198a:	0194      	lsls	r4, r2, #6
 800198c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001990:	018b      	lsls	r3, r1, #6
 8001992:	1a5b      	subs	r3, r3, r1
 8001994:	eb64 0402 	sbc.w	r4, r4, r2
 8001998:	f04f 0100 	mov.w	r1, #0
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	00e2      	lsls	r2, r4, #3
 80019a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019a6:	00d9      	lsls	r1, r3, #3
 80019a8:	460b      	mov	r3, r1
 80019aa:	4614      	mov	r4, r2
 80019ac:	195b      	adds	r3, r3, r5
 80019ae:	eb44 0406 	adc.w	r4, r4, r6
 80019b2:	f04f 0100 	mov.w	r1, #0
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	0262      	lsls	r2, r4, #9
 80019bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80019c0:	0259      	lsls	r1, r3, #9
 80019c2:	460b      	mov	r3, r1
 80019c4:	4614      	mov	r4, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	4621      	mov	r1, r4
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f04f 0400 	mov.w	r4, #0
 80019d0:	461a      	mov	r2, r3
 80019d2:	4623      	mov	r3, r4
 80019d4:	f7fe fbf8 	bl	80001c8 <__aeabi_uldivmod>
 80019d8:	4603      	mov	r3, r0
 80019da:	460c      	mov	r4, r1
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	e049      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e0:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	099b      	lsrs	r3, r3, #6
 80019e6:	f04f 0400 	mov.w	r4, #0
 80019ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	ea03 0501 	and.w	r5, r3, r1
 80019f6:	ea04 0602 	and.w	r6, r4, r2
 80019fa:	4629      	mov	r1, r5
 80019fc:	4632      	mov	r2, r6
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	f04f 0400 	mov.w	r4, #0
 8001a06:	0154      	lsls	r4, r2, #5
 8001a08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a0c:	014b      	lsls	r3, r1, #5
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4622      	mov	r2, r4
 8001a12:	1b49      	subs	r1, r1, r5
 8001a14:	eb62 0206 	sbc.w	r2, r2, r6
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	f04f 0400 	mov.w	r4, #0
 8001a20:	0194      	lsls	r4, r2, #6
 8001a22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a26:	018b      	lsls	r3, r1, #6
 8001a28:	1a5b      	subs	r3, r3, r1
 8001a2a:	eb64 0402 	sbc.w	r4, r4, r2
 8001a2e:	f04f 0100 	mov.w	r1, #0
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	00e2      	lsls	r2, r4, #3
 8001a38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a3c:	00d9      	lsls	r1, r3, #3
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4614      	mov	r4, r2
 8001a42:	195b      	adds	r3, r3, r5
 8001a44:	eb44 0406 	adc.w	r4, r4, r6
 8001a48:	f04f 0100 	mov.w	r1, #0
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	02a2      	lsls	r2, r4, #10
 8001a52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a56:	0299      	lsls	r1, r3, #10
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4614      	mov	r4, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	4621      	mov	r1, r4
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f04f 0400 	mov.w	r4, #0
 8001a66:	461a      	mov	r2, r3
 8001a68:	4623      	mov	r3, r4
 8001a6a:	f7fe fbad 	bl	80001c8 <__aeabi_uldivmod>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	460c      	mov	r4, r1
 8001a72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	0c1b      	lsrs	r3, r3, #16
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8c:	60bb      	str	r3, [r7, #8]
      break;
 8001a8e:	e002      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a92:	60bb      	str	r3, [r7, #8]
      break;
 8001a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a96:	68bb      	ldr	r3, [r7, #8]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	00f42400 	.word	0x00f42400
 8001aa8:	007a1200 	.word	0x007a1200

08001aac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e056      	b.n	8001b6c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d106      	bne.n	8001ade <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7fe ffd9 	bl	8000a90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001af4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	ea42 0103 	orr.w	r1, r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	0c1b      	lsrs	r3, r3, #16
 8001b3c:	f003 0104 	and.w	r1, r3, #4
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	69da      	ldr	r2, [r3, #28]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	; 0x30
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001b82:	2301      	movs	r3, #1
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_SPI_TransmitReceive+0x26>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e18a      	b.n	8001eb0 <HAL_SPI_TransmitReceive+0x33c>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ba2:	f7ff f88d 	bl	8000cc0 <HAL_GetTick>
 8001ba6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d00f      	beq.n	8001be4 <HAL_SPI_TransmitReceive+0x70>
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bca:	d107      	bne.n	8001bdc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d103      	bne.n	8001bdc <HAL_SPI_TransmitReceive+0x68>
 8001bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d003      	beq.n	8001be4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001be2:	e15b      	b.n	8001e9c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <HAL_SPI_TransmitReceive+0x82>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <HAL_SPI_TransmitReceive+0x82>
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d103      	bne.n	8001bfe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001bfc:	e14e      	b.n	8001e9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d003      	beq.n	8001c12 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2205      	movs	r2, #5
 8001c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	887a      	ldrh	r2, [r7, #2]
 8001c22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	887a      	ldrh	r2, [r7, #2]
 8001c34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	887a      	ldrh	r2, [r7, #2]
 8001c3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c52:	2b40      	cmp	r3, #64	; 0x40
 8001c54:	d007      	beq.n	8001c66 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c6e:	d178      	bne.n	8001d62 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <HAL_SPI_TransmitReceive+0x10a>
 8001c78:	8b7b      	ldrh	r3, [r7, #26]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d166      	bne.n	8001d4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	881a      	ldrh	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	1c9a      	adds	r2, r3, #2
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ca2:	e053      	b.n	8001d4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d11b      	bne.n	8001cea <HAL_SPI_TransmitReceive+0x176>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d016      	beq.n	8001cea <HAL_SPI_TransmitReceive+0x176>
 8001cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d113      	bne.n	8001cea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	881a      	ldrh	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	1c9a      	adds	r2, r3, #2
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d119      	bne.n	8001d2c <HAL_SPI_TransmitReceive+0x1b8>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d014      	beq.n	8001d2c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0c:	b292      	uxth	r2, r2
 8001d0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d14:	1c9a      	adds	r2, r3, #2
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001d2c:	f7fe ffc8 	bl	8000cc0 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d807      	bhi.n	8001d4c <HAL_SPI_TransmitReceive+0x1d8>
 8001d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d42:	d003      	beq.n	8001d4c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d4a:	e0a7      	b.n	8001e9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1a6      	bne.n	8001ca4 <HAL_SPI_TransmitReceive+0x130>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1a1      	bne.n	8001ca4 <HAL_SPI_TransmitReceive+0x130>
 8001d60:	e07c      	b.n	8001e5c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_SPI_TransmitReceive+0x1fc>
 8001d6a:	8b7b      	ldrh	r3, [r7, #26]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d16b      	bne.n	8001e48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	330c      	adds	r3, #12
 8001d7a:	7812      	ldrb	r2, [r2, #0]
 8001d7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d96:	e057      	b.n	8001e48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d11c      	bne.n	8001de0 <HAL_SPI_TransmitReceive+0x26c>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d017      	beq.n	8001de0 <HAL_SPI_TransmitReceive+0x26c>
 8001db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d114      	bne.n	8001de0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	330c      	adds	r3, #12
 8001dc0:	7812      	ldrb	r2, [r2, #0]
 8001dc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d119      	bne.n	8001e22 <HAL_SPI_TransmitReceive+0x2ae>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d014      	beq.n	8001e22 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001e22:	f7fe ff4d 	bl	8000cc0 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d803      	bhi.n	8001e3a <HAL_SPI_TransmitReceive+0x2c6>
 8001e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d102      	bne.n	8001e40 <HAL_SPI_TransmitReceive+0x2cc>
 8001e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d103      	bne.n	8001e48 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e46:	e029      	b.n	8001e9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1a2      	bne.n	8001d98 <HAL_SPI_TransmitReceive+0x224>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d19d      	bne.n	8001d98 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 f893 	bl	8001f8c <SPI_EndRxTxTransaction>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d006      	beq.n	8001e7a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2220      	movs	r2, #32
 8001e76:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001e78:	e010      	b.n	8001e9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10b      	bne.n	8001e9a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	e000      	b.n	8001e9c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001e9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001eac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3730      	adds	r7, #48	; 0x30
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ec8:	e04c      	b.n	8001f64 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d048      	beq.n	8001f64 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001ed2:	f7fe fef5 	bl	8000cc0 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d902      	bls.n	8001ee8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d13d      	bne.n	8001f64 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ef6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f00:	d111      	bne.n	8001f26 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f0a:	d004      	beq.n	8001f16 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f14:	d107      	bne.n	8001f26 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f2e:	d10f      	bne.n	8001f50 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e00f      	b.n	8001f84 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d1a3      	bne.n	8001eca <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <SPI_EndRxTxTransaction+0x7c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1b      	ldr	r2, [pc, #108]	; (800200c <SPI_EndRxTxTransaction+0x80>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0d5b      	lsrs	r3, r3, #21
 8001fa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fa8:	fb02 f303 	mul.w	r3, r2, r3
 8001fac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fb6:	d112      	bne.n	8001fde <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2180      	movs	r1, #128	; 0x80
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f7ff ff78 	bl	8001eb8 <SPI_WaitFlagStateUntilTimeout>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d016      	beq.n	8001ffc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	f043 0220 	orr.w	r2, r3, #32
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e00f      	b.n	8001ffe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff4:	2b80      	cmp	r3, #128	; 0x80
 8001ff6:	d0f2      	beq.n	8001fde <SPI_EndRxTxTransaction+0x52>
 8001ff8:	e000      	b.n	8001ffc <SPI_EndRxTxTransaction+0x70>
        break;
 8001ffa:	bf00      	nop
  }

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000064 	.word	0x20000064
 800200c:	165e9f81 	.word	0x165e9f81

08002010 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002014:	4904      	ldr	r1, [pc, #16]	; (8002028 <MX_FATFS_Init+0x18>)
 8002016:	4805      	ldr	r0, [pc, #20]	; (800202c <MX_FATFS_Init+0x1c>)
 8002018:	f002 fc9a 	bl	8004950 <FATFS_LinkDriver>
 800201c:	4603      	mov	r3, r0
 800201e:	461a      	mov	r2, r3
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <MX_FATFS_Init+0x20>)
 8002022:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	2000319c 	.word	0x2000319c
 800202c:	20000070 	.word	0x20000070
 8002030:	200031a0 	.word	0x200031a0

08002034 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002038:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return (SPIFLASH_disk_initialize() ? STA_NOINIT : RES_OK);
 800204e:	f7fe fb8b 	bl	8000768 <SPIFLASH_disk_initialize>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf14      	ite	ne
 8002058:	2301      	movne	r3, #1
 800205a:	2300      	moveq	r3, #0
 800205c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	if(W25X_Read_StatusReg() == 0x03)
 8002070:	f7fe fbde 	bl	8000830 <W25X_Read_StatusReg>
 8002074:	4603      	mov	r3, r0
 8002076:	2b03      	cmp	r3, #3
 8002078:	d101      	bne.n	800207e <USER_status+0x18>
		return RES_NOTRDY;
 800207a:	2303      	movs	r3, #3
 800207c:	e000      	b.n	8002080 <USER_status+0x1a>

	return RES_OK;
 800207e:	2300      	movs	r3, #0
  /* USER CODE END STATUS */
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	4603      	mov	r3, r0
 8002096:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	int i;
	for(i=0;i<count;i++)
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	e00d      	b.n	80020ba <USER_read+0x32>
	{
		W25X_Read_Sector(sector,buff);
 800209e:	68b9      	ldr	r1, [r7, #8]
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7fe fc37 	bl	8000914 <W25X_Read_Sector>
		sector ++;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3301      	adds	r3, #1
 80020aa:	607b      	str	r3, [r7, #4]
		buff += FLASH_SECTOR_SIZE;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b2:	60bb      	str	r3, [r7, #8]
	for(i=0;i<count;i++)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	3301      	adds	r3, #1
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d8ed      	bhi.n	800209e <USER_read+0x16>
	}

	return RES_OK;
 80020c2:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	4603      	mov	r3, r0
 80020da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	int i;
	for(i=0;i<count;i++)
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	e010      	b.n	8002104 <USER_write+0x38>
	{
		W25X_Erase_Sector(sector);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7fe fbe2 	bl	80008ac <W25X_Erase_Sector>

		W25X_Write_Sector(sector,(char*)buff);
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fc52 	bl	8000994 <W25X_Write_Sector>
		sector ++;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3301      	adds	r3, #1
 80020f4:	607b      	str	r3, [r7, #4]
		buff += FLASH_SECTOR_SIZE;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fc:	60bb      	str	r3, [r7, #8]
	for(i=0;i<count;i++)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d8ea      	bhi.n	80020e2 <USER_write+0x16>
	}

	return RES_OK;
 800210c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	603a      	str	r2, [r7, #0]
 8002122:	71fb      	strb	r3, [r7, #7]
 8002124:	460b      	mov	r3, r1
 8002126:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	73fb      	strb	r3, [r7, #15]

	switch(cmd)
 800212c:	79bb      	ldrb	r3, [r7, #6]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d819      	bhi.n	8002166 <USER_ioctl+0x4e>
 8002132:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <USER_ioctl+0x20>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	08002167 	.word	0x08002167
 800213c:	0800215d 	.word	0x0800215d
 8002140:	08002153 	.word	0x08002153
 8002144:	08002149 	.word	0x08002149
		{
			case CTRL_SYNC :
				break;

			case GET_BLOCK_SIZE:
				*(DWORD*)buff = FLASH_BLOCK_SIZE;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800214e:	601a      	str	r2, [r3, #0]
				break;
 8002150:	e00a      	b.n	8002168 <USER_ioctl+0x50>


			case GET_SECTOR_SIZE:
				*(DWORD*)buff = FLASH_SECTOR_SIZE;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002158:	601a      	str	r2, [r3, #0]
				break;
 800215a:	e005      	b.n	8002168 <USER_ioctl+0x50>

			case GET_SECTOR_COUNT:
				*(DWORD*)buff = FLASH_SECTOR_COUNT;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002162:	601a      	str	r2, [r3, #0]
				break;
 8002164:	e000      	b.n	8002168 <USER_ioctl+0x50>

			default:
				break;
 8002166:	bf00      	nop
		}
		return res;
 8002168:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop

08002178 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	4a08      	ldr	r2, [pc, #32]	; (80021a8 <disk_status+0x30>)
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	79fa      	ldrb	r2, [r7, #7]
 8002190:	4905      	ldr	r1, [pc, #20]	; (80021a8 <disk_status+0x30>)
 8002192:	440a      	add	r2, r1
 8002194:	7a12      	ldrb	r2, [r2, #8]
 8002196:	4610      	mov	r0, r2
 8002198:	4798      	blx	r3
 800219a:	4603      	mov	r3, r0
 800219c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200000c8 	.word	0x200000c8

080021ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	4a0d      	ldr	r2, [pc, #52]	; (80021f4 <disk_initialize+0x48>)
 80021be:	5cd3      	ldrb	r3, [r2, r3]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d111      	bne.n	80021e8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <disk_initialize+0x48>)
 80021c8:	2101      	movs	r1, #1
 80021ca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <disk_initialize+0x48>)
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	79fa      	ldrb	r2, [r7, #7]
 80021da:	4906      	ldr	r1, [pc, #24]	; (80021f4 <disk_initialize+0x48>)
 80021dc:	440a      	add	r2, r1
 80021de:	7a12      	ldrb	r2, [r2, #8]
 80021e0:	4610      	mov	r0, r2
 80021e2:	4798      	blx	r3
 80021e4:	4603      	mov	r3, r0
 80021e6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200000c8 	.word	0x200000c8

080021f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	4603      	mov	r3, r0
 8002206:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <disk_read+0x3c>)
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	689c      	ldr	r4, [r3, #8]
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	4a07      	ldr	r2, [pc, #28]	; (8002234 <disk_read+0x3c>)
 8002218:	4413      	add	r3, r2
 800221a:	7a18      	ldrb	r0, [r3, #8]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	47a0      	blx	r4
 8002224:	4603      	mov	r3, r0
 8002226:	75fb      	strb	r3, [r7, #23]
  return res;
 8002228:	7dfb      	ldrb	r3, [r7, #23]
}
 800222a:	4618      	mov	r0, r3
 800222c:	371c      	adds	r7, #28
 800222e:	46bd      	mov	sp, r7
 8002230:	bd90      	pop	{r4, r7, pc}
 8002232:	bf00      	nop
 8002234:	200000c8 	.word	0x200000c8

08002238 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	4603      	mov	r3, r0
 8002246:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <disk_write+0x3c>)
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	68dc      	ldr	r4, [r3, #12]
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	4a07      	ldr	r2, [pc, #28]	; (8002274 <disk_write+0x3c>)
 8002258:	4413      	add	r3, r2
 800225a:	7a18      	ldrb	r0, [r3, #8]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	47a0      	blx	r4
 8002264:	4603      	mov	r3, r0
 8002266:	75fb      	strb	r3, [r7, #23]
  return res;
 8002268:	7dfb      	ldrb	r3, [r7, #23]
}
 800226a:	4618      	mov	r0, r3
 800226c:	371c      	adds	r7, #28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd90      	pop	{r4, r7, pc}
 8002272:	bf00      	nop
 8002274:	200000c8 	.word	0x200000c8

08002278 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	603a      	str	r2, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
 8002284:	460b      	mov	r3, r1
 8002286:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <disk_ioctl+0x38>)
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	79fa      	ldrb	r2, [r7, #7]
 8002296:	4906      	ldr	r1, [pc, #24]	; (80022b0 <disk_ioctl+0x38>)
 8002298:	440a      	add	r2, r1
 800229a:	7a10      	ldrb	r0, [r2, #8]
 800229c:	79b9      	ldrb	r1, [r7, #6]
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	4798      	blx	r3
 80022a2:	4603      	mov	r3, r0
 80022a4:	73fb      	strb	r3, [r7, #15]
  return res;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	200000c8 	.word	0x200000c8

080022b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3301      	adds	r3, #1
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80022c4:	89fb      	ldrh	r3, [r7, #14]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	b21a      	sxth	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	b21b      	sxth	r3, r3
 80022d0:	4313      	orrs	r3, r2
 80022d2:	b21b      	sxth	r3, r3
 80022d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80022d6:	89fb      	ldrh	r3, [r7, #14]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3303      	adds	r3, #3
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	3202      	adds	r2, #2
 80022fc:	7812      	ldrb	r2, [r2, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	3201      	adds	r2, #1
 800230a:	7812      	ldrb	r2, [r2, #0]
 800230c:	4313      	orrs	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	7812      	ldrb	r2, [r2, #0]
 8002318:	4313      	orrs	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
	return rv;
 800231c:	68fb      	ldr	r3, [r7, #12]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	887a      	ldrh	r2, [r7, #2]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	701a      	strb	r2, [r3, #0]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	701a      	strb	r2, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00d      	beq.n	80023ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	1c53      	adds	r3, r2, #1
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	1c59      	adds	r1, r3, #1
 80023dc:	6179      	str	r1, [r7, #20]
 80023de:	7812      	ldrb	r2, [r2, #0]
 80023e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f1      	bne.n	80023d2 <mem_cpy+0x1a>
	}
}
 80023ee:	bf00      	nop
 80023f0:	371c      	adds	r7, #28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80023fa:	b480      	push	{r7}
 80023fc:	b087      	sub	sp, #28
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	617a      	str	r2, [r7, #20]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3b01      	subs	r3, #1
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f3      	bne.n	800240a <mem_set+0x10>
}
 8002422:	bf00      	nop
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800242e:	b480      	push	{r7}
 8002430:	b089      	sub	sp, #36	; 0x24
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	61fa      	str	r2, [r7, #28]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	4619      	mov	r1, r3
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	61ba      	str	r2, [r7, #24]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	1acb      	subs	r3, r1, r3
 800245a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <mem_cmp+0x40>
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0eb      	beq.n	8002446 <mem_cmp+0x18>

	return r;
 800246e:	697b      	ldr	r3, [r7, #20]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3724      	adds	r7, #36	; 0x24
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002486:	e002      	b.n	800248e <chk_chr+0x12>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3301      	adds	r3, #1
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <chk_chr+0x26>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4293      	cmp	r3, r2
 80024a0:	d1f2      	bne.n	8002488 <chk_chr+0xc>
	return *str;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	781b      	ldrb	r3, [r3, #0]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	e029      	b.n	800251c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80024c8:	4a27      	ldr	r2, [pc, #156]	; (8002568 <chk_lock+0xb4>)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	4413      	add	r3, r2
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d01d      	beq.n	8002512 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80024d6:	4a24      	ldr	r2, [pc, #144]	; (8002568 <chk_lock+0xb4>)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	4413      	add	r3, r2
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d116      	bne.n	8002516 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80024e8:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <chk_lock+0xb4>)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	4413      	add	r3, r2
 80024f0:	3304      	adds	r3, #4
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d10c      	bne.n	8002516 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80024fc:	4a1a      	ldr	r2, [pc, #104]	; (8002568 <chk_lock+0xb4>)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	4413      	add	r3, r2
 8002504:	3308      	adds	r3, #8
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800250c:	429a      	cmp	r2, r3
 800250e:	d102      	bne.n	8002516 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002510:	e007      	b.n	8002522 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8002512:	2301      	movs	r3, #1
 8002514:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3301      	adds	r3, #1
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d9d2      	bls.n	80024c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d109      	bne.n	800253c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d102      	bne.n	8002534 <chk_lock+0x80>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d101      	bne.n	8002538 <chk_lock+0x84>
 8002534:	2300      	movs	r3, #0
 8002536:	e010      	b.n	800255a <chk_lock+0xa6>
 8002538:	2312      	movs	r3, #18
 800253a:	e00e      	b.n	800255a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d108      	bne.n	8002554 <chk_lock+0xa0>
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <chk_lock+0xb4>)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	4413      	add	r3, r2
 800254a:	330c      	adds	r3, #12
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002552:	d101      	bne.n	8002558 <chk_lock+0xa4>
 8002554:	2310      	movs	r3, #16
 8002556:	e000      	b.n	800255a <chk_lock+0xa6>
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	200000a8 	.word	0x200000a8

0800256c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	e002      	b.n	800257e <enq_lock+0x12>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3301      	adds	r3, #1
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d806      	bhi.n	8002592 <enq_lock+0x26>
 8002584:	4a09      	ldr	r2, [pc, #36]	; (80025ac <enq_lock+0x40>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	4413      	add	r3, r2
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f2      	bne.n	8002578 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b02      	cmp	r3, #2
 8002596:	bf14      	ite	ne
 8002598:	2301      	movne	r3, #1
 800259a:	2300      	moveq	r3, #0
 800259c:	b2db      	uxtb	r3, r3
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	200000a8 	.word	0x200000a8

080025b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	e01f      	b.n	8002600 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80025c0:	4a41      	ldr	r2, [pc, #260]	; (80026c8 <inc_lock+0x118>)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	4413      	add	r3, r2
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d113      	bne.n	80025fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80025d2:	4a3d      	ldr	r2, [pc, #244]	; (80026c8 <inc_lock+0x118>)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	4413      	add	r3, r2
 80025da:	3304      	adds	r3, #4
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d109      	bne.n	80025fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80025e6:	4a38      	ldr	r2, [pc, #224]	; (80026c8 <inc_lock+0x118>)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	4413      	add	r3, r2
 80025ee:	3308      	adds	r3, #8
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d006      	beq.n	8002608 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	3301      	adds	r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d9dc      	bls.n	80025c0 <inc_lock+0x10>
 8002606:	e000      	b.n	800260a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8002608:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d132      	bne.n	8002676 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	e002      	b.n	800261c <inc_lock+0x6c>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3301      	adds	r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d806      	bhi.n	8002630 <inc_lock+0x80>
 8002622:	4a29      	ldr	r2, [pc, #164]	; (80026c8 <inc_lock+0x118>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	4413      	add	r3, r2
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f2      	bne.n	8002616 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d101      	bne.n	800263a <inc_lock+0x8a>
 8002636:	2300      	movs	r3, #0
 8002638:	e040      	b.n	80026bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4922      	ldr	r1, [pc, #136]	; (80026c8 <inc_lock+0x118>)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	440b      	add	r3, r1
 8002646:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	491e      	ldr	r1, [pc, #120]	; (80026c8 <inc_lock+0x118>)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	440b      	add	r3, r1
 8002654:	3304      	adds	r3, #4
 8002656:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	491a      	ldr	r1, [pc, #104]	; (80026c8 <inc_lock+0x118>)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	440b      	add	r3, r1
 8002664:	3308      	adds	r3, #8
 8002666:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8002668:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <inc_lock+0x118>)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	4413      	add	r3, r2
 8002670:	330c      	adds	r3, #12
 8002672:	2200      	movs	r2, #0
 8002674:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d009      	beq.n	8002690 <inc_lock+0xe0>
 800267c:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <inc_lock+0x118>)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	4413      	add	r3, r2
 8002684:	330c      	adds	r3, #12
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <inc_lock+0xe0>
 800268c:	2300      	movs	r3, #0
 800268e:	e015      	b.n	80026bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d108      	bne.n	80026a8 <inc_lock+0xf8>
 8002696:	4a0c      	ldr	r2, [pc, #48]	; (80026c8 <inc_lock+0x118>)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	4413      	add	r3, r2
 800269e:	330c      	adds	r3, #12
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	3301      	adds	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	e001      	b.n	80026ac <inc_lock+0xfc>
 80026a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ac:	4906      	ldr	r1, [pc, #24]	; (80026c8 <inc_lock+0x118>)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	440b      	add	r3, r1
 80026b4:	330c      	adds	r3, #12
 80026b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3301      	adds	r3, #1
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	200000a8 	.word	0x200000a8

080026cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d825      	bhi.n	800272c <dec_lock+0x60>
		n = Files[i].ctr;
 80026e0:	4a17      	ldr	r2, [pc, #92]	; (8002740 <dec_lock+0x74>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	4413      	add	r3, r2
 80026e8:	330c      	adds	r3, #12
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80026ee:	89fb      	ldrh	r3, [r7, #14]
 80026f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f4:	d101      	bne.n	80026fa <dec_lock+0x2e>
 80026f6:	2300      	movs	r3, #0
 80026f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80026fa:	89fb      	ldrh	r3, [r7, #14]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <dec_lock+0x3a>
 8002700:	89fb      	ldrh	r3, [r7, #14]
 8002702:	3b01      	subs	r3, #1
 8002704:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8002706:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <dec_lock+0x74>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	4413      	add	r3, r2
 800270e:	330c      	adds	r3, #12
 8002710:	89fa      	ldrh	r2, [r7, #14]
 8002712:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002714:	89fb      	ldrh	r3, [r7, #14]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <dec_lock+0x5a>
 800271a:	4a09      	ldr	r2, [pc, #36]	; (8002740 <dec_lock+0x74>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	4413      	add	r3, r2
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	737b      	strb	r3, [r7, #13]
 800272a:	e001      	b.n	8002730 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800272c:	2302      	movs	r3, #2
 800272e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8002730:	7b7b      	ldrb	r3, [r7, #13]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	200000a8 	.word	0x200000a8

08002744 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e010      	b.n	8002774 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002752:	4a0d      	ldr	r2, [pc, #52]	; (8002788 <clear_lock+0x44>)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	4413      	add	r3, r2
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	429a      	cmp	r2, r3
 8002760:	d105      	bne.n	800276e <clear_lock+0x2a>
 8002762:	4a09      	ldr	r2, [pc, #36]	; (8002788 <clear_lock+0x44>)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	4413      	add	r3, r2
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	3301      	adds	r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d9eb      	bls.n	8002752 <clear_lock+0xe>
	}
}
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	200000a8 	.word	0x200000a8

0800278c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	78db      	ldrb	r3, [r3, #3]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d034      	beq.n	800280a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	7858      	ldrb	r0, [r3, #1]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80027b0:	2301      	movs	r3, #1
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	f7ff fd40 	bl	8002238 <disk_write>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	e022      	b.n	800280a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	1ad2      	subs	r2, r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d217      	bcs.n	800280a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	789b      	ldrb	r3, [r3, #2]
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	e010      	b.n	8002804 <sync_window+0x78>
					wsect += fs->fsize;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4413      	add	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7858      	ldrb	r0, [r3, #1]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80027f6:	2301      	movs	r3, #1
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	f7ff fd1d 	bl	8002238 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	3b01      	subs	r3, #1
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d8eb      	bhi.n	80027e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800280a:	7bfb      	ldrb	r3, [r7, #15]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d01b      	beq.n	8002864 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff ffad 	bl	800278c <sync_window>
 8002832:	4603      	mov	r3, r0
 8002834:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d113      	bne.n	8002864 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7858      	ldrb	r0, [r3, #1]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002846:	2301      	movs	r3, #1
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	f7ff fcd5 	bl	80021f8 <disk_read>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d004      	beq.n	800285e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002854:	f04f 33ff 	mov.w	r3, #4294967295
 8002858:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ff87 	bl	800278c <sync_window>
 800287e:	4603      	mov	r3, r0
 8002880:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d159      	bne.n	800293c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b03      	cmp	r3, #3
 800288e:	d149      	bne.n	8002924 <sync_fs+0xb4>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	791b      	ldrb	r3, [r3, #4]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d145      	bne.n	8002924 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	899b      	ldrh	r3, [r3, #12]
 80028a2:	461a      	mov	r2, r3
 80028a4:	2100      	movs	r1, #0
 80028a6:	f7ff fda8 	bl	80023fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3334      	adds	r3, #52	; 0x34
 80028ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80028b2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fd37 	bl	800232a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3334      	adds	r3, #52	; 0x34
 80028c0:	4921      	ldr	r1, [pc, #132]	; (8002948 <sync_fs+0xd8>)
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fd4c 	bl	8002360 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3334      	adds	r3, #52	; 0x34
 80028cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80028d0:	491e      	ldr	r1, [pc, #120]	; (800294c <sync_fs+0xdc>)
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fd44 	bl	8002360 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3334      	adds	r3, #52	; 0x34
 80028dc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f7ff fd3a 	bl	8002360 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3334      	adds	r3, #52	; 0x34
 80028f0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f7ff fd30 	bl	8002360 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	7858      	ldrb	r0, [r3, #1]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002918:	2301      	movs	r3, #1
 800291a:	f7ff fc8d 	bl	8002238 <disk_write>
			fs->fsi_flag = 0;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	785b      	ldrb	r3, [r3, #1]
 8002928:	2200      	movs	r2, #0
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fca3 	bl	8002278 <disk_ioctl>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <sync_fs+0xcc>
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	41615252 	.word	0x41615252
 800294c:	61417272 	.word	0x61417272

08002950 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	3b02      	subs	r3, #2
 800295e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	3b02      	subs	r3, #2
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d301      	bcc.n	8002970 <clust2sect+0x20>
 800296c:	2300      	movs	r3, #0
 800296e:	e008      	b.n	8002982 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	895b      	ldrh	r3, [r3, #10]
 8002974:	461a      	mov	r2, r3
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	fb03 f202 	mul.w	r2, r3, r2
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	4413      	add	r3, r2
}
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b086      	sub	sp, #24
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d904      	bls.n	80029ae <get_fat+0x20>
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d302      	bcc.n	80029b4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80029ae:	2301      	movs	r3, #1
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	e0b7      	b.n	8002b24 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80029b4:	f04f 33ff 	mov.w	r3, #4294967295
 80029b8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d05a      	beq.n	8002a78 <get_fat+0xea>
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d07d      	beq.n	8002ac2 <get_fat+0x134>
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	f040 80a2 	bne.w	8002b10 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	085b      	lsrs	r3, r3, #1
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4413      	add	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	899b      	ldrh	r3, [r3, #12]
 80029e2:	4619      	mov	r1, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ea:	4413      	add	r3, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	6938      	ldr	r0, [r7, #16]
 80029f0:	f7ff ff10 	bl	8002814 <move_window>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f040 808d 	bne.w	8002b16 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	60fa      	str	r2, [r7, #12]
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	8992      	ldrh	r2, [r2, #12]
 8002a06:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a0a:	fb02 f201 	mul.w	r2, r2, r1
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4413      	add	r3, r2
 8002a14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a18:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	899b      	ldrh	r3, [r3, #12]
 8002a22:	4619      	mov	r1, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	6938      	ldr	r0, [r7, #16]
 8002a30:	f7ff fef0 	bl	8002814 <move_window>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d16f      	bne.n	8002b1a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	899b      	ldrh	r3, [r3, #12]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a46:	fb02 f201 	mul.w	r2, r2, r1
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	461a      	mov	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <get_fat+0xe0>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	091b      	lsrs	r3, r3, #4
 8002a6c:	e002      	b.n	8002a74 <get_fat+0xe6>
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a74:	617b      	str	r3, [r7, #20]
			break;
 8002a76:	e055      	b.n	8002b24 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	899b      	ldrh	r3, [r3, #12]
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	4619      	mov	r1, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	6938      	ldr	r0, [r7, #16]
 8002a92:	f7ff febf 	bl	8002814 <move_window>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d140      	bne.n	8002b1e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	8992      	ldrh	r2, [r2, #12]
 8002aaa:	fbb3 f0f2 	udiv	r0, r3, r2
 8002aae:	fb02 f200 	mul.w	r2, r2, r0
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fbfc 	bl	80022b4 <ld_word>
 8002abc:	4603      	mov	r3, r0
 8002abe:	617b      	str	r3, [r7, #20]
			break;
 8002ac0:	e030      	b.n	8002b24 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	899b      	ldrh	r3, [r3, #12]
 8002aca:	089b      	lsrs	r3, r3, #2
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	4619      	mov	r1, r3
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	6938      	ldr	r0, [r7, #16]
 8002adc:	f7ff fe9a 	bl	8002814 <move_window>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d11d      	bne.n	8002b22 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	8992      	ldrh	r2, [r2, #12]
 8002af4:	fbb3 f0f2 	udiv	r0, r3, r2
 8002af8:	fb02 f200 	mul.w	r2, r2, r0
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	440b      	add	r3, r1
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fbef 	bl	80022e4 <ld_dword>
 8002b06:	4603      	mov	r3, r0
 8002b08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002b0c:	617b      	str	r3, [r7, #20]
			break;
 8002b0e:	e009      	b.n	8002b24 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8002b10:	2301      	movs	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	e006      	b.n	8002b24 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002b16:	bf00      	nop
 8002b18:	e004      	b.n	8002b24 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002b1a:	bf00      	nop
 8002b1c:	e002      	b.n	8002b24 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002b1e:	bf00      	nop
 8002b20:	e000      	b.n	8002b24 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002b22:	bf00      	nop
		}
	}

	return val;
 8002b24:	697b      	ldr	r3, [r7, #20]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8002b2e:	b590      	push	{r4, r7, lr}
 8002b30:	b089      	sub	sp, #36	; 0x24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	f240 8106 	bls.w	8002d52 <put_fat+0x224>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	f080 8100 	bcs.w	8002d52 <put_fat+0x224>
		switch (fs->fs_type) {
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	f000 8088 	beq.w	8002c6c <put_fat+0x13e>
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	f000 80b0 	beq.w	8002cc2 <put_fat+0x194>
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	f040 80f5 	bne.w	8002d52 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4413      	add	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	899b      	ldrh	r3, [r3, #12]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b86:	4413      	add	r3, r2
 8002b88:	4619      	mov	r1, r3
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f7ff fe42 	bl	8002814 <move_window>
 8002b90:	4603      	mov	r3, r0
 8002b92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002b94:	7ffb      	ldrb	r3, [r7, #31]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f040 80d4 	bne.w	8002d44 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	61ba      	str	r2, [r7, #24]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	8992      	ldrh	r2, [r2, #12]
 8002bac:	fbb3 f0f2 	udiv	r0, r3, r2
 8002bb0:	fb02 f200 	mul.w	r2, r2, r0
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00d      	beq.n	8002be0 <put_fat+0xb2>
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	b25a      	sxtb	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	b25b      	sxtb	r3, r3
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	b25b      	sxtb	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	e001      	b.n	8002be4 <put_fat+0xb6>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2201      	movs	r2, #1
 8002bec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	899b      	ldrh	r3, [r3, #12]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bfe:	4413      	add	r3, r2
 8002c00:	4619      	mov	r1, r3
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7ff fe06 	bl	8002814 <move_window>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002c0c:	7ffb      	ldrb	r3, [r7, #31]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f040 809a 	bne.w	8002d48 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	899b      	ldrh	r3, [r3, #12]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fbb3 f0f2 	udiv	r0, r3, r2
 8002c26:	fb02 f200 	mul.w	r2, r2, r0
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <put_fat+0x114>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	e00e      	b.n	8002c60 <put_fat+0x132>
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	b25b      	sxtb	r3, r3
 8002c48:	f023 030f 	bic.w	r3, r3, #15
 8002c4c:	b25a      	sxtb	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	b25b      	sxtb	r3, r3
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	b25b      	sxtb	r3, r3
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	b25b      	sxtb	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	70da      	strb	r2, [r3, #3]
			break;
 8002c6a:	e072      	b.n	8002d52 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	899b      	ldrh	r3, [r3, #12]
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	4619      	mov	r1, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c80:	4413      	add	r3, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f7ff fdc5 	bl	8002814 <move_window>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002c8e:	7ffb      	ldrb	r3, [r7, #31]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d15b      	bne.n	8002d4c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	8992      	ldrh	r2, [r2, #12]
 8002ca2:	fbb3 f0f2 	udiv	r0, r3, r2
 8002ca6:	fb02 f200 	mul.w	r2, r2, r0
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	440b      	add	r3, r1
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	b292      	uxth	r2, r2
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fb38 	bl	800232a <st_word>
			fs->wflag = 1;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	70da      	strb	r2, [r3, #3]
			break;
 8002cc0:	e047      	b.n	8002d52 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	899b      	ldrh	r3, [r3, #12]
 8002cca:	089b      	lsrs	r3, r3, #2
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	4619      	mov	r1, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f7ff fd9a 	bl	8002814 <move_window>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002ce4:	7ffb      	ldrb	r3, [r7, #31]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d132      	bne.n	8002d50 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	8992      	ldrh	r2, [r2, #12]
 8002cfe:	fbb3 f0f2 	udiv	r0, r3, r2
 8002d02:	fb02 f200 	mul.w	r2, r2, r0
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	440b      	add	r3, r1
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff faea 	bl	80022e4 <ld_dword>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002d16:	4323      	orrs	r3, r4
 8002d18:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	8992      	ldrh	r2, [r2, #12]
 8002d28:	fbb3 f0f2 	udiv	r0, r3, r2
 8002d2c:	fb02 f200 	mul.w	r2, r2, r0
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	440b      	add	r3, r1
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fb12 	bl	8002360 <st_dword>
			fs->wflag = 1;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	70da      	strb	r2, [r3, #3]
			break;
 8002d42:	e006      	b.n	8002d52 <put_fat+0x224>
			if (res != FR_OK) break;
 8002d44:	bf00      	nop
 8002d46:	e004      	b.n	8002d52 <put_fat+0x224>
			if (res != FR_OK) break;
 8002d48:	bf00      	nop
 8002d4a:	e002      	b.n	8002d52 <put_fat+0x224>
			if (res != FR_OK) break;
 8002d4c:	bf00      	nop
 8002d4e:	e000      	b.n	8002d52 <put_fat+0x224>
			if (res != FR_OK) break;
 8002d50:	bf00      	nop
		}
	}
	return res;
 8002d52:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3724      	adds	r7, #36	; 0x24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd90      	pop	{r4, r7, pc}

08002d5c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d904      	bls.n	8002d82 <remove_chain+0x26>
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d301      	bcc.n	8002d86 <remove_chain+0x2a>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e04b      	b.n	8002e1e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00c      	beq.n	8002da6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	69b8      	ldr	r0, [r7, #24]
 8002d94:	f7ff fecb 	bl	8002b2e <put_fat>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8002d9c:	7ffb      	ldrb	r3, [r7, #31]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <remove_chain+0x4a>
 8002da2:	7ffb      	ldrb	r3, [r7, #31]
 8002da4:	e03b      	b.n	8002e1e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7ff fdf0 	bl	800298e <get_fat>
 8002dae:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d031      	beq.n	8002e1a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <remove_chain+0x64>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e02e      	b.n	8002e1e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc6:	d101      	bne.n	8002dcc <remove_chain+0x70>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e028      	b.n	8002e1e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002dcc:	2200      	movs	r2, #0
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	69b8      	ldr	r0, [r7, #24]
 8002dd2:	f7ff feac 	bl	8002b2e <put_fat>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8002dda:	7ffb      	ldrb	r3, [r7, #31]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <remove_chain+0x88>
 8002de0:	7ffb      	ldrb	r3, [r7, #31]
 8002de2:	e01c      	b.n	8002e1e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	3b02      	subs	r3, #2
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d20b      	bcs.n	8002e0a <remove_chain+0xae>
			fs->free_clst++;
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	791b      	ldrb	r3, [r3, #4]
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d3c6      	bcc.n	8002da6 <remove_chain+0x4a>
 8002e18:	e000      	b.n	8002e1c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8002e1a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3720      	adds	r7, #32
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b088      	sub	sp, #32
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10d      	bne.n	8002e58 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d004      	beq.n	8002e52 <create_chain+0x2c>
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d31b      	bcc.n	8002e8a <create_chain+0x64>
 8002e52:	2301      	movs	r3, #1
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	e018      	b.n	8002e8a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002e58:	6839      	ldr	r1, [r7, #0]
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff fd97 	bl	800298e <get_fat>
 8002e60:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d801      	bhi.n	8002e6c <create_chain+0x46>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e070      	b.n	8002f4e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e72:	d101      	bne.n	8002e78 <create_chain+0x52>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	e06a      	b.n	8002f4e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d201      	bcs.n	8002e86 <create_chain+0x60>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	e063      	b.n	8002f4e <create_chain+0x128>
		scl = clst;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3301      	adds	r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d307      	bcc.n	8002eae <create_chain+0x88>
				ncl = 2;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d901      	bls.n	8002eae <create_chain+0x88>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e04f      	b.n	8002f4e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002eae:	69f9      	ldr	r1, [r7, #28]
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff fd6c 	bl	800298e <get_fat>
 8002eb6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00e      	beq.n	8002edc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d003      	beq.n	8002ecc <create_chain+0xa6>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eca:	d101      	bne.n	8002ed0 <create_chain+0xaa>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	e03e      	b.n	8002f4e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d1da      	bne.n	8002e8e <create_chain+0x68>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e038      	b.n	8002f4e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8002edc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8002ede:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee2:	69f9      	ldr	r1, [r7, #28]
 8002ee4:	6938      	ldr	r0, [r7, #16]
 8002ee6:	f7ff fe22 	bl	8002b2e <put_fat>
 8002eea:	4603      	mov	r3, r0
 8002eec:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8002eee:	7dfb      	ldrb	r3, [r7, #23]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d109      	bne.n	8002f08 <create_chain+0xe2>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d006      	beq.n	8002f08 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	6839      	ldr	r1, [r7, #0]
 8002efe:	6938      	ldr	r0, [r7, #16]
 8002f00:	f7ff fe15 	bl	8002b2e <put_fat>
 8002f04:	4603      	mov	r3, r0
 8002f06:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d116      	bne.n	8002f3c <create_chain+0x116>
		fs->last_clst = ncl;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	3b02      	subs	r3, #2
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d804      	bhi.n	8002f2c <create_chain+0x106>
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	1e5a      	subs	r2, r3, #1
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	791b      	ldrb	r3, [r3, #4]
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	711a      	strb	r2, [r3, #4]
 8002f3a:	e007      	b.n	8002f4c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d102      	bne.n	8002f48 <create_chain+0x122>
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
 8002f46:	e000      	b.n	8002f4a <create_chain+0x124>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8002f4c:	69fb      	ldr	r3, [r7, #28]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b087      	sub	sp, #28
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	899b      	ldrh	r3, [r3, #12]
 8002f72:	461a      	mov	r2, r3
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	8952      	ldrh	r2, [r2, #10]
 8002f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1d1a      	adds	r2, r3, #4
 8002f88:	613a      	str	r2, [r7, #16]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <clmt_clust+0x42>
 8002f94:	2300      	movs	r3, #0
 8002f96:	e010      	b.n	8002fba <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d307      	bcc.n	8002fb0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	3304      	adds	r3, #4
 8002fac:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002fae:	e7e9      	b.n	8002f84 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8002fb0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	4413      	add	r3, r2
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b086      	sub	sp, #24
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fdc:	d204      	bcs.n	8002fe8 <dir_sdi+0x22>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <dir_sdi+0x26>
		return FR_INT_ERR;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e071      	b.n	80030d0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <dir_sdi+0x46>
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d902      	bls.n	800300c <dir_sdi+0x46>
		clst = fs->dirbase;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10c      	bne.n	800302c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	095b      	lsrs	r3, r3, #5
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	8912      	ldrh	r2, [r2, #8]
 800301a:	4293      	cmp	r3, r2
 800301c:	d301      	bcc.n	8003022 <dir_sdi+0x5c>
 800301e:	2302      	movs	r3, #2
 8003020:	e056      	b.n	80030d0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	61da      	str	r2, [r3, #28]
 800302a:	e02d      	b.n	8003088 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	895b      	ldrh	r3, [r3, #10]
 8003030:	461a      	mov	r2, r3
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	899b      	ldrh	r3, [r3, #12]
 8003036:	fb03 f302 	mul.w	r3, r3, r2
 800303a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800303c:	e019      	b.n	8003072 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6979      	ldr	r1, [r7, #20]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fca3 	bl	800298e <get_fat>
 8003048:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d101      	bne.n	8003056 <dir_sdi+0x90>
 8003052:	2301      	movs	r3, #1
 8003054:	e03c      	b.n	80030d0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d904      	bls.n	8003066 <dir_sdi+0xa0>
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	429a      	cmp	r2, r3
 8003064:	d301      	bcc.n	800306a <dir_sdi+0xa4>
 8003066:	2302      	movs	r3, #2
 8003068:	e032      	b.n	80030d0 <dir_sdi+0x10a>
			ofs -= csz;
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	429a      	cmp	r2, r3
 8003078:	d2e1      	bcs.n	800303e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800307a:	6979      	ldr	r1, [r7, #20]
 800307c:	6938      	ldr	r0, [r7, #16]
 800307e:	f7ff fc67 	bl	8002950 <clust2sect>
 8003082:	4602      	mov	r2, r0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <dir_sdi+0xd4>
 8003096:	2302      	movs	r3, #2
 8003098:	e01a      	b.n	80030d0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	899b      	ldrh	r3, [r3, #12]
 80030a2:	4619      	mov	r1, r3
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030aa:	441a      	add	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	899b      	ldrh	r3, [r3, #12]
 80030ba:	461a      	mov	r2, r3
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	fbb3 f0f2 	udiv	r0, r3, r2
 80030c2:	fb02 f200 	mul.w	r2, r2, r0
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	18ca      	adds	r2, r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	3320      	adds	r3, #32
 80030ee:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <dir_next+0x28>
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030fe:	d301      	bcc.n	8003104 <dir_next+0x2c>
 8003100:	2304      	movs	r3, #4
 8003102:	e0bb      	b.n	800327c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	899b      	ldrh	r3, [r3, #12]
 8003108:	461a      	mov	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003110:	fb02 f201 	mul.w	r2, r2, r1
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	2b00      	cmp	r3, #0
 8003118:	f040 809d 	bne.w	8003256 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10b      	bne.n	8003146 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	8912      	ldrh	r2, [r2, #8]
 8003136:	4293      	cmp	r3, r2
 8003138:	f0c0 808d 	bcc.w	8003256 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	61da      	str	r2, [r3, #28]
 8003142:	2304      	movs	r3, #4
 8003144:	e09a      	b.n	800327c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	899b      	ldrh	r3, [r3, #12]
 800314a:	461a      	mov	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	8952      	ldrh	r2, [r2, #10]
 8003156:	3a01      	subs	r2, #1
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d17b      	bne.n	8003256 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	4619      	mov	r1, r3
 8003166:	4610      	mov	r0, r2
 8003168:	f7ff fc11 	bl	800298e <get_fat>
 800316c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d801      	bhi.n	8003178 <dir_next+0xa0>
 8003174:	2302      	movs	r3, #2
 8003176:	e081      	b.n	800327c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317e:	d101      	bne.n	8003184 <dir_next+0xac>
 8003180:	2301      	movs	r3, #1
 8003182:	e07b      	b.n	800327c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	429a      	cmp	r2, r3
 800318c:	d359      	bcc.n	8003242 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d104      	bne.n	800319e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	61da      	str	r2, [r3, #28]
 800319a:	2304      	movs	r3, #4
 800319c:	e06e      	b.n	800327c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	4619      	mov	r1, r3
 80031a6:	4610      	mov	r0, r2
 80031a8:	f7ff fe3d 	bl	8002e26 <create_chain>
 80031ac:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <dir_next+0xe0>
 80031b4:	2307      	movs	r3, #7
 80031b6:	e061      	b.n	800327c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <dir_next+0xea>
 80031be:	2302      	movs	r3, #2
 80031c0:	e05c      	b.n	800327c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d101      	bne.n	80031ce <dir_next+0xf6>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e056      	b.n	800327c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f7ff fadc 	bl	800278c <sync_window>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <dir_next+0x106>
 80031da:	2301      	movs	r3, #1
 80031dc:	e04e      	b.n	800327c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	899b      	ldrh	r3, [r3, #12]
 80031e8:	461a      	mov	r2, r3
 80031ea:	2100      	movs	r1, #0
 80031ec:	f7ff f905 	bl	80023fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80031f0:	2300      	movs	r3, #0
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	6979      	ldr	r1, [r7, #20]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7ff fbaa 	bl	8002950 <clust2sect>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	631a      	str	r2, [r3, #48]	; 0x30
 8003202:	e012      	b.n	800322a <dir_next+0x152>
						fs->wflag = 1;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f7ff fabe 	bl	800278c <sync_window>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <dir_next+0x142>
 8003216:	2301      	movs	r3, #1
 8003218:	e030      	b.n	800327c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	3301      	adds	r3, #1
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	895b      	ldrh	r3, [r3, #10]
 800322e:	461a      	mov	r2, r3
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4293      	cmp	r3, r2
 8003234:	d3e6      	bcc.n	8003204 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad2      	subs	r2, r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003248:	6979      	ldr	r1, [r7, #20]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f7ff fb80 	bl	8002950 <clust2sect>
 8003250:	4602      	mov	r2, r0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	899b      	ldrh	r3, [r3, #12]
 8003266:	461a      	mov	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	fbb3 f0f2 	udiv	r0, r3, r2
 800326e:	fb02 f200 	mul.w	r2, r2, r0
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	18ca      	adds	r2, r1, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003294:	2100      	movs	r1, #0
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff fe95 	bl	8002fc6 <dir_sdi>
 800329c:	4603      	mov	r3, r0
 800329e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d12b      	bne.n	80032fe <dir_alloc+0x7a>
		n = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	4619      	mov	r1, r3
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f7ff faaf 	bl	8002814 <move_window>
 80032b6:	4603      	mov	r3, r0
 80032b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d11d      	bne.n	80032fc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2be5      	cmp	r3, #229	; 0xe5
 80032c8:	d004      	beq.n	80032d4 <dir_alloc+0x50>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d107      	bne.n	80032e4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	3301      	adds	r3, #1
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d102      	bne.n	80032e8 <dir_alloc+0x64>
 80032e2:	e00c      	b.n	80032fe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80032e8:	2101      	movs	r1, #1
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff fef4 	bl	80030d8 <dir_next>
 80032f0:	4603      	mov	r3, r0
 80032f2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0d7      	beq.n	80032aa <dir_alloc+0x26>
 80032fa:	e000      	b.n	80032fe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80032fc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80032fe:	7dfb      	ldrb	r3, [r7, #23]
 8003300:	2b04      	cmp	r3, #4
 8003302:	d101      	bne.n	8003308 <dir_alloc+0x84>
 8003304:	2307      	movs	r3, #7
 8003306:	75fb      	strb	r3, [r7, #23]
	return res;
 8003308:	7dfb      	ldrb	r3, [r7, #23]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	331a      	adds	r3, #26
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe ffc7 	bl	80022b4 <ld_word>
 8003326:	4603      	mov	r3, r0
 8003328:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b03      	cmp	r3, #3
 8003330:	d109      	bne.n	8003346 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	3314      	adds	r3, #20
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe ffbc 	bl	80022b4 <ld_word>
 800333c:	4603      	mov	r3, r0
 800333e:	041b      	lsls	r3, r3, #16
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003346:	68fb      	ldr	r3, [r7, #12]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	331a      	adds	r3, #26
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	b292      	uxth	r2, r2
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe ffdf 	bl	800232a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d109      	bne.n	8003388 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f103 0214 	add.w	r2, r3, #20
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	0c1b      	lsrs	r3, r3, #16
 800337e:	b29b      	uxth	r3, r3
 8003380:	4619      	mov	r1, r3
 8003382:	4610      	mov	r0, r2
 8003384:	f7fe ffd1 	bl	800232a <st_word>
	}
}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800339e:	2100      	movs	r1, #0
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff fe10 	bl	8002fc6 <dir_sdi>
 80033a6:	4603      	mov	r3, r0
 80033a8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <dir_find+0x24>
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	e03e      	b.n	8003432 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	4619      	mov	r1, r3
 80033ba:	6938      	ldr	r0, [r7, #16]
 80033bc:	f7ff fa2a 	bl	8002814 <move_window>
 80033c0:	4603      	mov	r3, r0
 80033c2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d12f      	bne.n	800342a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d102      	bne.n	80033de <dir_find+0x4e>
 80033d8:	2304      	movs	r3, #4
 80033da:	75fb      	strb	r3, [r7, #23]
 80033dc:	e028      	b.n	8003430 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	330b      	adds	r3, #11
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	330b      	adds	r3, #11
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <dir_find+0x86>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a18      	ldr	r0, [r3, #32]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3324      	adds	r3, #36	; 0x24
 8003408:	220b      	movs	r2, #11
 800340a:	4619      	mov	r1, r3
 800340c:	f7ff f80f 	bl	800242e <mem_cmp>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003416:	2100      	movs	r1, #0
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff fe5d 	bl	80030d8 <dir_next>
 800341e:	4603      	mov	r3, r0
 8003420:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0c5      	beq.n	80033b4 <dir_find+0x24>
 8003428:	e002      	b.n	8003430 <dir_find+0xa0>
		if (res != FR_OK) break;
 800342a:	bf00      	nop
 800342c:	e000      	b.n	8003430 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800342e:	bf00      	nop

	return res;
 8003430:	7dfb      	ldrb	r3, [r7, #23]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8003448:	2101      	movs	r1, #1
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff ff1a 	bl	8003284 <dir_alloc>
 8003450:	4603      	mov	r3, r0
 8003452:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d11c      	bne.n	8003494 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	4619      	mov	r1, r3
 8003460:	68b8      	ldr	r0, [r7, #8]
 8003462:	f7ff f9d7 	bl	8002814 <move_window>
 8003466:	4603      	mov	r3, r0
 8003468:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d111      	bne.n	8003494 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	2220      	movs	r2, #32
 8003476:	2100      	movs	r1, #0
 8003478:	4618      	mov	r0, r3
 800347a:	f7fe ffbe 	bl	80023fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a18      	ldr	r0, [r3, #32]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3324      	adds	r3, #36	; 0x24
 8003486:	220b      	movs	r2, #11
 8003488:	4619      	mov	r1, r3
 800348a:	f7fe ff95 	bl	80023b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2201      	movs	r2, #1
 8003492:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003494:	7bfb      	ldrb	r3, [r7, #15]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3324      	adds	r3, #36	; 0x24
 80034b4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80034b6:	220b      	movs	r2, #11
 80034b8:	2120      	movs	r1, #32
 80034ba:	68b8      	ldr	r0, [r7, #8]
 80034bc:	f7fe ff9d 	bl	80023fa <mem_set>
	si = i = 0; ni = 8;
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	2308      	movs	r3, #8
 80034ca:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	617a      	str	r2, [r7, #20]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4413      	add	r3, r2
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80034da:	7ffb      	ldrb	r3, [r7, #31]
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d94e      	bls.n	800357e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80034e0:	7ffb      	ldrb	r3, [r7, #31]
 80034e2:	2b2f      	cmp	r3, #47	; 0x2f
 80034e4:	d006      	beq.n	80034f4 <create_name+0x54>
 80034e6:	7ffb      	ldrb	r3, [r7, #31]
 80034e8:	2b5c      	cmp	r3, #92	; 0x5c
 80034ea:	d110      	bne.n	800350e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80034ec:	e002      	b.n	80034f4 <create_name+0x54>
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	3301      	adds	r3, #1
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	4413      	add	r3, r2
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b2f      	cmp	r3, #47	; 0x2f
 80034fe:	d0f6      	beq.n	80034ee <create_name+0x4e>
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	4413      	add	r3, r2
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b5c      	cmp	r3, #92	; 0x5c
 800350a:	d0f0      	beq.n	80034ee <create_name+0x4e>
			break;
 800350c:	e038      	b.n	8003580 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800350e:	7ffb      	ldrb	r3, [r7, #31]
 8003510:	2b2e      	cmp	r3, #46	; 0x2e
 8003512:	d003      	beq.n	800351c <create_name+0x7c>
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	429a      	cmp	r2, r3
 800351a:	d30c      	bcc.n	8003536 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2b0b      	cmp	r3, #11
 8003520:	d002      	beq.n	8003528 <create_name+0x88>
 8003522:	7ffb      	ldrb	r3, [r7, #31]
 8003524:	2b2e      	cmp	r3, #46	; 0x2e
 8003526:	d001      	beq.n	800352c <create_name+0x8c>
 8003528:	2306      	movs	r3, #6
 800352a:	e044      	b.n	80035b6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800352c:	2308      	movs	r3, #8
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	230b      	movs	r3, #11
 8003532:	61bb      	str	r3, [r7, #24]
			continue;
 8003534:	e022      	b.n	800357c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8003536:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800353a:	2b00      	cmp	r3, #0
 800353c:	da04      	bge.n	8003548 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800353e:	7ffb      	ldrb	r3, [r7, #31]
 8003540:	3b80      	subs	r3, #128	; 0x80
 8003542:	4a1f      	ldr	r2, [pc, #124]	; (80035c0 <create_name+0x120>)
 8003544:	5cd3      	ldrb	r3, [r2, r3]
 8003546:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8003548:	7ffb      	ldrb	r3, [r7, #31]
 800354a:	4619      	mov	r1, r3
 800354c:	481d      	ldr	r0, [pc, #116]	; (80035c4 <create_name+0x124>)
 800354e:	f7fe ff95 	bl	800247c <chk_chr>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <create_name+0xbc>
 8003558:	2306      	movs	r3, #6
 800355a:	e02c      	b.n	80035b6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800355c:	7ffb      	ldrb	r3, [r7, #31]
 800355e:	2b60      	cmp	r3, #96	; 0x60
 8003560:	d905      	bls.n	800356e <create_name+0xce>
 8003562:	7ffb      	ldrb	r3, [r7, #31]
 8003564:	2b7a      	cmp	r3, #122	; 0x7a
 8003566:	d802      	bhi.n	800356e <create_name+0xce>
 8003568:	7ffb      	ldrb	r3, [r7, #31]
 800356a:	3b20      	subs	r3, #32
 800356c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	613a      	str	r2, [r7, #16]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	4413      	add	r3, r2
 8003578:	7ffa      	ldrb	r2, [r7, #31]
 800357a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800357c:	e7a6      	b.n	80034cc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800357e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	441a      	add	r2, r3
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <create_name+0xf4>
 8003590:	2306      	movs	r3, #6
 8003592:	e010      	b.n	80035b6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2be5      	cmp	r3, #229	; 0xe5
 800359a:	d102      	bne.n	80035a2 <create_name+0x102>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2205      	movs	r2, #5
 80035a0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80035a2:	7ffb      	ldrb	r3, [r7, #31]
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d801      	bhi.n	80035ac <create_name+0x10c>
 80035a8:	2204      	movs	r2, #4
 80035aa:	e000      	b.n	80035ae <create_name+0x10e>
 80035ac:	2200      	movs	r2, #0
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	330b      	adds	r3, #11
 80035b2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80035b4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3720      	adds	r7, #32
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	08004a40 	.word	0x08004a40
 80035c4:	080049ec 	.word	0x080049ec

080035c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80035dc:	e002      	b.n	80035e4 <follow_path+0x1c>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	3301      	adds	r3, #1
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b2f      	cmp	r3, #47	; 0x2f
 80035ea:	d0f8      	beq.n	80035de <follow_path+0x16>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b5c      	cmp	r3, #92	; 0x5c
 80035f2:	d0f4      	beq.n	80035de <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b1f      	cmp	r3, #31
 8003600:	d80a      	bhi.n	8003618 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2280      	movs	r2, #128	; 0x80
 8003606:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800360a:	2100      	movs	r1, #0
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff fcda 	bl	8002fc6 <dir_sdi>
 8003612:	4603      	mov	r3, r0
 8003614:	75fb      	strb	r3, [r7, #23]
 8003616:	e048      	b.n	80036aa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003618:	463b      	mov	r3, r7
 800361a:	4619      	mov	r1, r3
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff ff3f 	bl	80034a0 <create_name>
 8003622:	4603      	mov	r3, r0
 8003624:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003626:	7dfb      	ldrb	r3, [r7, #23]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d139      	bne.n	80036a0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff feaf 	bl	8003390 <dir_find>
 8003632:	4603      	mov	r3, r0
 8003634:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800363c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800363e:	7dfb      	ldrb	r3, [r7, #23]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003644:	7dfb      	ldrb	r3, [r7, #23]
 8003646:	2b04      	cmp	r3, #4
 8003648:	d12c      	bne.n	80036a4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800364a:	7afb      	ldrb	r3, [r7, #11]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d127      	bne.n	80036a4 <follow_path+0xdc>
 8003654:	2305      	movs	r3, #5
 8003656:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8003658:	e024      	b.n	80036a4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800365a:	7afb      	ldrb	r3, [r7, #11]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d121      	bne.n	80036a8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	799b      	ldrb	r3, [r3, #6]
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	d102      	bne.n	8003676 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8003670:	2305      	movs	r3, #5
 8003672:	75fb      	strb	r3, [r7, #23]
 8003674:	e019      	b.n	80036aa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	8992      	ldrh	r2, [r2, #12]
 8003684:	fbb3 f0f2 	udiv	r0, r3, r2
 8003688:	fb02 f200 	mul.w	r2, r2, r0
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	440b      	add	r3, r1
 8003690:	4619      	mov	r1, r3
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f7ff fe3d 	bl	8003312 <ld_clust>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800369e:	e7bb      	b.n	8003618 <follow_path+0x50>
			if (res != FR_OK) break;
 80036a0:	bf00      	nop
 80036a2:	e002      	b.n	80036aa <follow_path+0xe2>
				break;
 80036a4:	bf00      	nop
 80036a6:	e000      	b.n	80036aa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80036a8:	bf00      	nop
			}
		}
	}

	return res;
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80036bc:	f04f 33ff 	mov.w	r3, #4294967295
 80036c0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d031      	beq.n	800372e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	e002      	b.n	80036d8 <get_ldnumber+0x24>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	3301      	adds	r3, #1
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d903      	bls.n	80036e8 <get_ldnumber+0x34>
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b3a      	cmp	r3, #58	; 0x3a
 80036e6:	d1f4      	bne.n	80036d2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b3a      	cmp	r3, #58	; 0x3a
 80036ee:	d11c      	bne.n	800372a <get_ldnumber+0x76>
			tp = *path;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	60fa      	str	r2, [r7, #12]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	3b30      	subs	r3, #48	; 0x30
 8003700:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b09      	cmp	r3, #9
 8003706:	d80e      	bhi.n	8003726 <get_ldnumber+0x72>
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	429a      	cmp	r2, r3
 800370e:	d10a      	bne.n	8003726 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d107      	bne.n	8003726 <get_ldnumber+0x72>
					vol = (int)i;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	3301      	adds	r3, #1
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	e002      	b.n	8003730 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800372e:	693b      	ldr	r3, [r7, #16]
}
 8003730:	4618      	mov	r0, r3
 8003732:	371c      	adds	r7, #28
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	70da      	strb	r2, [r3, #3]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f04f 32ff 	mov.w	r2, #4294967295
 8003752:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003754:	6839      	ldr	r1, [r7, #0]
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff f85c 	bl	8002814 <move_window>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <check_fs+0x2a>
 8003762:	2304      	movs	r3, #4
 8003764:	e038      	b.n	80037d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3334      	adds	r3, #52	; 0x34
 800376a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe fda0 	bl	80022b4 <ld_word>
 8003774:	4603      	mov	r3, r0
 8003776:	461a      	mov	r2, r3
 8003778:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <check_fs+0x48>
 8003780:	2303      	movs	r3, #3
 8003782:	e029      	b.n	80037d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800378a:	2be9      	cmp	r3, #233	; 0xe9
 800378c:	d009      	beq.n	80037a2 <check_fs+0x66>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003794:	2beb      	cmp	r3, #235	; 0xeb
 8003796:	d11e      	bne.n	80037d6 <check_fs+0x9a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800379e:	2b90      	cmp	r3, #144	; 0x90
 80037a0:	d119      	bne.n	80037d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3334      	adds	r3, #52	; 0x34
 80037a6:	3336      	adds	r3, #54	; 0x36
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fe fd9b 	bl	80022e4 <ld_dword>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80037b4:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <check_fs+0xa4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d101      	bne.n	80037be <check_fs+0x82>
 80037ba:	2300      	movs	r3, #0
 80037bc:	e00c      	b.n	80037d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3334      	adds	r3, #52	; 0x34
 80037c2:	3352      	adds	r3, #82	; 0x52
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe fd8d 	bl	80022e4 <ld_dword>
 80037ca:	4602      	mov	r2, r0
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <check_fs+0xa8>)
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d101      	bne.n	80037d6 <check_fs+0x9a>
 80037d2:	2300      	movs	r3, #0
 80037d4:	e000      	b.n	80037d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80037d6:	2302      	movs	r3, #2
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	00544146 	.word	0x00544146
 80037e4:	33544146 	.word	0x33544146

080037e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b096      	sub	sp, #88	; 0x58
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	4613      	mov	r3, r2
 80037f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f7ff ff59 	bl	80036b4 <get_ldnumber>
 8003802:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003806:	2b00      	cmp	r3, #0
 8003808:	da01      	bge.n	800380e <find_volume+0x26>
 800380a:	230b      	movs	r3, #11
 800380c:	e265      	b.n	8003cda <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800380e:	4ab0      	ldr	r2, [pc, #704]	; (8003ad0 <find_volume+0x2e8>)
 8003810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003816:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <find_volume+0x3a>
 800381e:	230c      	movs	r3, #12
 8003820:	e25b      	b.n	8003cda <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003826:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01a      	beq.n	800386e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8003838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383a:	785b      	ldrb	r3, [r3, #1]
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe fc9b 	bl	8002178 <disk_status>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003848:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10c      	bne.n	800386e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <find_volume+0x82>
 800385a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8003866:	230a      	movs	r3, #10
 8003868:	e237      	b.n	8003cda <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800386a:	2300      	movs	r3, #0
 800386c:	e235      	b.n	8003cda <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003876:	b2da      	uxtb	r2, r3
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800387c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387e:	785b      	ldrb	r3, [r3, #1]
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe fc93 	bl	80021ac <disk_initialize>
 8003886:	4603      	mov	r3, r0
 8003888:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800388c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003898:	2303      	movs	r3, #3
 800389a:	e21e      	b.n	8003cda <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <find_volume+0xca>
 80038a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80038ae:	230a      	movs	r3, #10
 80038b0:	e213      	b.n	8003cda <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80038b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b4:	7858      	ldrb	r0, [r3, #1]
 80038b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b8:	330c      	adds	r3, #12
 80038ba:	461a      	mov	r2, r3
 80038bc:	2102      	movs	r1, #2
 80038be:	f7fe fcdb 	bl	8002278 <disk_ioctl>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <find_volume+0xe4>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e206      	b.n	8003cda <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80038cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ce:	899b      	ldrh	r3, [r3, #12]
 80038d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d4:	d80d      	bhi.n	80038f2 <find_volume+0x10a>
 80038d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d8:	899b      	ldrh	r3, [r3, #12]
 80038da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038de:	d308      	bcc.n	80038f2 <find_volume+0x10a>
 80038e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e2:	899b      	ldrh	r3, [r3, #12]
 80038e4:	461a      	mov	r2, r3
 80038e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e8:	899b      	ldrh	r3, [r3, #12]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <find_volume+0x10e>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e1f1      	b.n	8003cda <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80038fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80038fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038fe:	f7ff ff1d 	bl	800373c <check_fs>
 8003902:	4603      	mov	r3, r0
 8003904:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003908:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800390c:	2b02      	cmp	r3, #2
 800390e:	d14b      	bne.n	80039a8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003910:	2300      	movs	r3, #0
 8003912:	643b      	str	r3, [r7, #64]	; 0x40
 8003914:	e01f      	b.n	8003956 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8003916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003918:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800391c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003924:	4413      	add	r3, r2
 8003926:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	3304      	adds	r3, #4
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d006      	beq.n	8003940 <find_volume+0x158>
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	3308      	adds	r3, #8
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe fcd4 	bl	80022e4 <ld_dword>
 800393c:	4602      	mov	r2, r0
 800393e:	e000      	b.n	8003942 <find_volume+0x15a>
 8003940:	2200      	movs	r2, #0
 8003942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800394a:	440b      	add	r3, r1
 800394c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003952:	3301      	adds	r3, #1
 8003954:	643b      	str	r3, [r7, #64]	; 0x40
 8003956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003958:	2b03      	cmp	r3, #3
 800395a:	d9dc      	bls.n	8003916 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800395c:	2300      	movs	r3, #0
 800395e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8003960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <find_volume+0x184>
 8003966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003968:	3b01      	subs	r3, #1
 800396a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800396c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003974:	4413      	add	r3, r2
 8003976:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800397a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800397c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <find_volume+0x1a6>
 8003982:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003984:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003986:	f7ff fed9 	bl	800373c <check_fs>
 800398a:	4603      	mov	r3, r0
 800398c:	e000      	b.n	8003990 <find_volume+0x1a8>
 800398e:	2303      	movs	r3, #3
 8003990:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003994:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003998:	2b01      	cmp	r3, #1
 800399a:	d905      	bls.n	80039a8 <find_volume+0x1c0>
 800399c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800399e:	3301      	adds	r3, #1
 80039a0:	643b      	str	r3, [r7, #64]	; 0x40
 80039a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d9e1      	bls.n	800396c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80039a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d101      	bne.n	80039b4 <find_volume+0x1cc>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e192      	b.n	8003cda <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80039b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d901      	bls.n	80039c0 <find_volume+0x1d8>
 80039bc:	230d      	movs	r3, #13
 80039be:	e18c      	b.n	8003cda <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80039c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c2:	3334      	adds	r3, #52	; 0x34
 80039c4:	330b      	adds	r3, #11
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fc74 	bl	80022b4 <ld_word>
 80039cc:	4603      	mov	r3, r0
 80039ce:	461a      	mov	r2, r3
 80039d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d2:	899b      	ldrh	r3, [r3, #12]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <find_volume+0x1f4>
 80039d8:	230d      	movs	r3, #13
 80039da:	e17e      	b.n	8003cda <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80039dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039de:	3334      	adds	r3, #52	; 0x34
 80039e0:	3316      	adds	r3, #22
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe fc66 	bl	80022b4 <ld_word>
 80039e8:	4603      	mov	r3, r0
 80039ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80039ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <find_volume+0x218>
 80039f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f4:	3334      	adds	r3, #52	; 0x34
 80039f6:	3324      	adds	r3, #36	; 0x24
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe fc73 	bl	80022e4 <ld_dword>
 80039fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8003a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a04:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8003a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a12:	789b      	ldrb	r3, [r3, #2]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d005      	beq.n	8003a24 <find_volume+0x23c>
 8003a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1a:	789b      	ldrb	r3, [r3, #2]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d001      	beq.n	8003a24 <find_volume+0x23c>
 8003a20:	230d      	movs	r3, #13
 8003a22:	e15a      	b.n	8003cda <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a26:	789b      	ldrb	r3, [r3, #2]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2c:	fb02 f303 	mul.w	r3, r2, r3
 8003a30:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8003a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	895b      	ldrh	r3, [r3, #10]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <find_volume+0x270>
 8003a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a48:	895b      	ldrh	r3, [r3, #10]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4e:	895b      	ldrh	r3, [r3, #10]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <find_volume+0x274>
 8003a58:	230d      	movs	r3, #13
 8003a5a:	e13e      	b.n	8003cda <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	3334      	adds	r3, #52	; 0x34
 8003a60:	3311      	adds	r3, #17
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fc26 	bl	80022b4 <ld_word>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a72:	891b      	ldrh	r3, [r3, #8]
 8003a74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a76:	8992      	ldrh	r2, [r2, #12]
 8003a78:	0952      	lsrs	r2, r2, #5
 8003a7a:	b292      	uxth	r2, r2
 8003a7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a80:	fb02 f201 	mul.w	r2, r2, r1
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <find_volume+0x2a8>
 8003a8c:	230d      	movs	r3, #13
 8003a8e:	e124      	b.n	8003cda <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8003a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a92:	3334      	adds	r3, #52	; 0x34
 8003a94:	3313      	adds	r3, #19
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe fc0c 	bl	80022b4 <ld_word>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8003aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <find_volume+0x2cc>
 8003aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa8:	3334      	adds	r3, #52	; 0x34
 8003aaa:	3320      	adds	r3, #32
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe fc19 	bl	80022e4 <ld_dword>
 8003ab2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8003ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab6:	3334      	adds	r3, #52	; 0x34
 8003ab8:	330e      	adds	r3, #14
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe fbfa 	bl	80022b4 <ld_word>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003ac4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d104      	bne.n	8003ad4 <find_volume+0x2ec>
 8003aca:	230d      	movs	r3, #13
 8003acc:	e105      	b.n	8003cda <find_volume+0x4f2>
 8003ace:	bf00      	nop
 8003ad0:	200000a0 	.word	0x200000a0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8003ad4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad8:	4413      	add	r3, r2
 8003ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003adc:	8911      	ldrh	r1, [r2, #8]
 8003ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ae0:	8992      	ldrh	r2, [r2, #12]
 8003ae2:	0952      	lsrs	r2, r2, #5
 8003ae4:	b292      	uxth	r2, r2
 8003ae6:	fbb1 f2f2 	udiv	r2, r1, r2
 8003aea:	b292      	uxth	r2, r2
 8003aec:	4413      	add	r3, r2
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003af0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d201      	bcs.n	8003afc <find_volume+0x314>
 8003af8:	230d      	movs	r3, #13
 8003afa:	e0ee      	b.n	8003cda <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b04:	8952      	ldrh	r2, [r2, #10]
 8003b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <find_volume+0x32e>
 8003b12:	230d      	movs	r3, #13
 8003b14:	e0e1      	b.n	8003cda <find_volume+0x4f2>
		fmt = FS_FAT32;
 8003b16:	2303      	movs	r3, #3
 8003b18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d802      	bhi.n	8003b2c <find_volume+0x344>
 8003b26:	2302      	movs	r3, #2
 8003b28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d802      	bhi.n	8003b3c <find_volume+0x354>
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	1c9a      	adds	r2, r3, #2
 8003b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b42:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8003b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b48:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003b4a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b4e:	441a      	add	r2, r3
 8003b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b52:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8003b54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	441a      	add	r2, r3
 8003b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8003b5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d11e      	bne.n	8003ba4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b68:	3334      	adds	r3, #52	; 0x34
 8003b6a:	332a      	adds	r3, #42	; 0x2a
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fe fba1 	bl	80022b4 <ld_word>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <find_volume+0x394>
 8003b78:	230d      	movs	r3, #13
 8003b7a:	e0ae      	b.n	8003cda <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7e:	891b      	ldrh	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <find_volume+0x3a0>
 8003b84:	230d      	movs	r3, #13
 8003b86:	e0a8      	b.n	8003cda <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8a:	3334      	adds	r3, #52	; 0x34
 8003b8c:	332c      	adds	r3, #44	; 0x2c
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe fba8 	bl	80022e4 <ld_dword>
 8003b94:	4602      	mov	r2, r0
 8003b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b98:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba2:	e01f      	b.n	8003be4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba6:	891b      	ldrh	r3, [r3, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <find_volume+0x3c8>
 8003bac:	230d      	movs	r3, #13
 8003bae:	e094      	b.n	8003cda <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb6:	441a      	add	r2, r3
 8003bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bba:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d103      	bne.n	8003bcc <find_volume+0x3e4>
 8003bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	e00a      	b.n	8003be2 <find_volume+0x3fa>
 8003bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bce:	699a      	ldr	r2, [r3, #24]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	4413      	add	r3, r2
 8003bd6:	085a      	lsrs	r2, r3, #1
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8003be2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bea:	899b      	ldrh	r3, [r3, #12]
 8003bec:	4619      	mov	r1, r3
 8003bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bf6:	8989      	ldrh	r1, [r1, #12]
 8003bf8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d201      	bcs.n	8003c04 <find_volume+0x41c>
 8003c00:	230d      	movs	r3, #13
 8003c02:	e06a      	b.n	8003cda <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c06:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0a:	615a      	str	r2, [r3, #20]
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c12:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8003c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c16:	2280      	movs	r2, #128	; 0x80
 8003c18:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003c1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d149      	bne.n	8003cb6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	3334      	adds	r3, #52	; 0x34
 8003c26:	3330      	adds	r3, #48	; 0x30
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fe fb43 	bl	80022b4 <ld_word>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d140      	bne.n	8003cb6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c36:	3301      	adds	r3, #1
 8003c38:	4619      	mov	r1, r3
 8003c3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c3c:	f7fe fdea 	bl	8002814 <move_window>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d137      	bne.n	8003cb6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8003c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c48:	2200      	movs	r2, #0
 8003c4a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4e:	3334      	adds	r3, #52	; 0x34
 8003c50:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe fb2d 	bl	80022b4 <ld_word>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d127      	bne.n	8003cb6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c68:	3334      	adds	r3, #52	; 0x34
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fe fb3a 	bl	80022e4 <ld_dword>
 8003c70:	4602      	mov	r2, r0
 8003c72:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <find_volume+0x4fc>)
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d11e      	bne.n	8003cb6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	3334      	adds	r3, #52	; 0x34
 8003c7c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe fb2f 	bl	80022e4 <ld_dword>
 8003c86:	4602      	mov	r2, r0
 8003c88:	4b17      	ldr	r3, [pc, #92]	; (8003ce8 <find_volume+0x500>)
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d113      	bne.n	8003cb6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c90:	3334      	adds	r3, #52	; 0x34
 8003c92:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe fb24 	bl	80022e4 <ld_dword>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca4:	3334      	adds	r3, #52	; 0x34
 8003ca6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fe fb1a 	bl	80022e4 <ld_dword>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003cbc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <find_volume+0x504>)
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	4b09      	ldr	r3, [pc, #36]	; (8003cec <find_volume+0x504>)
 8003cc8:	801a      	strh	r2, [r3, #0]
 8003cca:	4b08      	ldr	r3, [pc, #32]	; (8003cec <find_volume+0x504>)
 8003ccc:	881a      	ldrh	r2, [r3, #0]
 8003cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8003cd2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cd4:	f7fe fd36 	bl	8002744 <clear_lock>
#endif
	return FR_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3758      	adds	r7, #88	; 0x58
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	41615252 	.word	0x41615252
 8003ce8:	61417272 	.word	0x61417272
 8003cec:	200000a4 	.word	0x200000a4

08003cf0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8003cfa:	2309      	movs	r3, #9
 8003cfc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d01c      	beq.n	8003d3e <validate+0x4e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d018      	beq.n	8003d3e <validate+0x4e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d013      	beq.n	8003d3e <validate+0x4e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	889a      	ldrh	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	88db      	ldrh	r3, [r3, #6]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d10c      	bne.n	8003d3e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	785b      	ldrb	r3, [r3, #1]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fe fa24 	bl	8002178 <disk_status>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <validate+0x4e>
			res = FR_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <validate+0x5a>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	e000      	b.n	8003d4c <validate+0x5c>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	6013      	str	r3, [r2, #0]
	return res;
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	4613      	mov	r3, r2
 8003d68:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003d6e:	f107 0310 	add.w	r3, r7, #16
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fc9e 	bl	80036b4 <get_ldnumber>
 8003d78:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	da01      	bge.n	8003d84 <f_mount+0x28>
 8003d80:	230b      	movs	r3, #11
 8003d82:	e02b      	b.n	8003ddc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003d84:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <f_mount+0x88>)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8003d94:	69b8      	ldr	r0, [r7, #24]
 8003d96:	f7fe fcd5 	bl	8002744 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	490d      	ldr	r1, [pc, #52]	; (8003de4 <f_mount+0x88>)
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <f_mount+0x66>
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d001      	beq.n	8003dc6 <f_mount+0x6a>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e00a      	b.n	8003ddc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003dc6:	f107 010c 	add.w	r1, r7, #12
 8003dca:	f107 0308 	add.w	r3, r7, #8
 8003dce:	2200      	movs	r2, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fd09 	bl	80037e8 <find_volume>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3720      	adds	r7, #32
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	200000a0 	.word	0x200000a0

08003de8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b098      	sub	sp, #96	; 0x60
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	4613      	mov	r3, r2
 8003df4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <f_open+0x18>
 8003dfc:	2309      	movs	r3, #9
 8003dfe:	e1bb      	b.n	8004178 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e06:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8003e08:	79fa      	ldrb	r2, [r7, #7]
 8003e0a:	f107 0110 	add.w	r1, r7, #16
 8003e0e:	f107 0308 	add.w	r3, r7, #8
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fce8 	bl	80037e8 <find_volume>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8003e1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f040 819f 	bne.w	8004166 <f_open+0x37e>
		dj.obj.fs = fs;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	f107 0314 	add.w	r3, r7, #20
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fbc7 	bl	80035c8 <follow_path>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8003e40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d11a      	bne.n	8003e7e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003e48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003e4c:	b25b      	sxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	da03      	bge.n	8003e5a <f_open+0x72>
				res = FR_INVALID_NAME;
 8003e52:	2306      	movs	r3, #6
 8003e54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003e58:	e011      	b.n	8003e7e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f107 0314 	add.w	r3, r7, #20
 8003e70:	4611      	mov	r1, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe fb1e 	bl	80024b4 <chk_lock>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	f003 031c 	and.w	r3, r3, #28
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d07f      	beq.n	8003f88 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8003e88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d017      	beq.n	8003ec0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003e90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d10e      	bne.n	8003eb6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003e98:	f7fe fb68 	bl	800256c <enq_lock>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d006      	beq.n	8003eb0 <f_open+0xc8>
 8003ea2:	f107 0314 	add.w	r3, r7, #20
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fac7 	bl	800343a <dir_register>
 8003eac:	4603      	mov	r3, r0
 8003eae:	e000      	b.n	8003eb2 <f_open+0xca>
 8003eb0:	2312      	movs	r3, #18
 8003eb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	f043 0308 	orr.w	r3, r3, #8
 8003ebc:	71fb      	strb	r3, [r7, #7]
 8003ebe:	e010      	b.n	8003ee2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003ec0:	7ebb      	ldrb	r3, [r7, #26]
 8003ec2:	f003 0311 	and.w	r3, r3, #17
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <f_open+0xea>
					res = FR_DENIED;
 8003eca:	2307      	movs	r3, #7
 8003ecc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003ed0:	e007      	b.n	8003ee2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <f_open+0xfa>
 8003edc:	2308      	movs	r3, #8
 8003ede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003ee2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d168      	bne.n	8003fbc <f_open+0x1d4>
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d063      	beq.n	8003fbc <f_open+0x1d4>
				dw = GET_FATTIME();
 8003ef4:	f7fe f89e 	bl	8002034 <get_fattime>
 8003ef8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8003efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efc:	330e      	adds	r3, #14
 8003efe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe fa2d 	bl	8002360 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8003f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f08:	3316      	adds	r3, #22
 8003f0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe fa27 	bl	8002360 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f14:	330b      	adds	r3, #11
 8003f16:	2220      	movs	r2, #32
 8003f18:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff f9f6 	bl	8003312 <ld_clust>
 8003f26:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fa0e 	bl	8003350 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f36:	331c      	adds	r3, #28
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe fa10 	bl	8002360 <st_dword>
					fs->wflag = 1;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	2201      	movs	r2, #1
 8003f44:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8003f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d037      	beq.n	8003fbc <f_open+0x1d4>
						dw = fs->winsect;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8003f52:	f107 0314 	add.w	r3, r7, #20
 8003f56:	2200      	movs	r2, #0
 8003f58:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fe fefe 	bl	8002d5c <remove_chain>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8003f66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d126      	bne.n	8003fbc <f_open+0x1d4>
							res = move_window(fs, dw);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe fc4e 	bl	8002814 <move_window>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f82:	3a01      	subs	r2, #1
 8003f84:	611a      	str	r2, [r3, #16]
 8003f86:	e019      	b.n	8003fbc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8003f88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d115      	bne.n	8003fbc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8003f90:	7ebb      	ldrb	r3, [r7, #26]
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8003f9a:	2304      	movs	r3, #4
 8003f9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003fa0:	e00c      	b.n	8003fbc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <f_open+0x1d4>
 8003fac:	7ebb      	ldrb	r3, [r7, #26]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <f_open+0x1d4>
						res = FR_DENIED;
 8003fb6:	2307      	movs	r3, #7
 8003fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8003fbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d128      	bne.n	8004016 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fd4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8003fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	bf14      	ite	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	2300      	moveq	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	f107 0314 	add.w	r3, r7, #20
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fe fad7 	bl	80025b0 <inc_lock>
 8004002:	4602      	mov	r2, r0
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d102      	bne.n	8004016 <f_open+0x22e>
 8004010:	2302      	movs	r3, #2
 8004012:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004016:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800401a:	2b00      	cmp	r3, #0
 800401c:	f040 80a3 	bne.w	8004166 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff f973 	bl	8003312 <ld_clust>
 800402c:	4602      	mov	r2, r0
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004034:	331c      	adds	r3, #28
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe f954 	bl	80022e4 <ld_dword>
 800403c:	4602      	mov	r2, r0
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	88da      	ldrh	r2, [r3, #6]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	79fa      	ldrb	r2, [r7, #7]
 800405a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3330      	adds	r3, #48	; 0x30
 8004072:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f7fe f9be 	bl	80023fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b00      	cmp	r3, #0
 8004086:	d06e      	beq.n	8004166 <f_open+0x37e>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d06a      	beq.n	8004166 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	895b      	ldrh	r3, [r3, #10]
 800409c:	461a      	mov	r2, r3
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	899b      	ldrh	r3, [r3, #12]
 80040a2:	fb03 f302 	mul.w	r3, r3, r2
 80040a6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	657b      	str	r3, [r7, #84]	; 0x54
 80040b4:	e016      	b.n	80040e4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe fc67 	bl	800298e <get_fat>
 80040c0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80040c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d802      	bhi.n	80040ce <f_open+0x2e6>
 80040c8:	2302      	movs	r3, #2
 80040ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80040ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d102      	bne.n	80040dc <f_open+0x2f4>
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80040dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	657b      	str	r3, [r7, #84]	; 0x54
 80040e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d103      	bne.n	80040f4 <f_open+0x30c>
 80040ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d8e0      	bhi.n	80040b6 <f_open+0x2ce>
				}
				fp->clust = clst;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040f8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80040fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d131      	bne.n	8004166 <f_open+0x37e>
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	899b      	ldrh	r3, [r3, #12]
 8004106:	461a      	mov	r2, r3
 8004108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800410a:	fbb3 f1f2 	udiv	r1, r3, r2
 800410e:	fb02 f201 	mul.w	r2, r2, r1
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d026      	beq.n	8004166 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800411c:	4618      	mov	r0, r3
 800411e:	f7fe fc17 	bl	8002950 <clust2sect>
 8004122:	6478      	str	r0, [r7, #68]	; 0x44
 8004124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004126:	2b00      	cmp	r3, #0
 8004128:	d103      	bne.n	8004132 <f_open+0x34a>
						res = FR_INT_ERR;
 800412a:	2302      	movs	r3, #2
 800412c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004130:	e019      	b.n	8004166 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	899b      	ldrh	r3, [r3, #12]
 8004136:	461a      	mov	r2, r3
 8004138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800413a:	fbb3 f2f2 	udiv	r2, r3, r2
 800413e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004140:	441a      	add	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	7858      	ldrb	r0, [r3, #1]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a1a      	ldr	r2, [r3, #32]
 8004154:	2301      	movs	r3, #1
 8004156:	f7fe f84f 	bl	80021f8 <disk_read>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <f_open+0x37e>
 8004160:	2301      	movs	r3, #1
 8004162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004166:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <f_open+0x38c>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004174:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8004178:	4618      	mov	r0, r3
 800417a:	3760      	adds	r7, #96	; 0x60
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08e      	sub	sp, #56	; 0x38
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f107 0214 	add.w	r2, r7, #20
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff fda5 	bl	8003cf0 <validate>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80041ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d107      	bne.n	80041c4 <f_read+0x44>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	7d5b      	ldrb	r3, [r3, #21]
 80041b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80041bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <f_read+0x4a>
 80041c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80041c8:	e135      	b.n	8004436 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	7d1b      	ldrb	r3, [r3, #20]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <f_read+0x5a>
 80041d6:	2307      	movs	r3, #7
 80041d8:	e12d      	b.n	8004436 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	f240 811e 	bls.w	800442c <f_read+0x2ac>
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80041f4:	e11a      	b.n	800442c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	8992      	ldrh	r2, [r2, #12]
 80041fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8004202:	fb02 f201 	mul.w	r2, r2, r1
 8004206:	1a9b      	subs	r3, r3, r2
 8004208:	2b00      	cmp	r3, #0
 800420a:	f040 80d5 	bne.w	80043b8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	8992      	ldrh	r2, [r2, #12]
 8004216:	fbb3 f3f2 	udiv	r3, r3, r2
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	8952      	ldrh	r2, [r2, #10]
 800421e:	3a01      	subs	r2, #1
 8004220:	4013      	ands	r3, r2
 8004222:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d12f      	bne.n	800428a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	633b      	str	r3, [r7, #48]	; 0x30
 8004238:	e013      	b.n	8004262 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	2b00      	cmp	r3, #0
 8004240:	d007      	beq.n	8004252 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	4619      	mov	r1, r3
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f7fe fe84 	bl	8002f56 <clmt_clust>
 800424e:	6338      	str	r0, [r7, #48]	; 0x30
 8004250:	e007      	b.n	8004262 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f7fe fb97 	bl	800298e <get_fat>
 8004260:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	2b01      	cmp	r3, #1
 8004266:	d804      	bhi.n	8004272 <f_read+0xf2>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2202      	movs	r2, #2
 800426c:	755a      	strb	r2, [r3, #21]
 800426e:	2302      	movs	r3, #2
 8004270:	e0e1      	b.n	8004436 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d104      	bne.n	8004284 <f_read+0x104>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	755a      	strb	r2, [r3, #21]
 8004280:	2301      	movs	r3, #1
 8004282:	e0d8      	b.n	8004436 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004288:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f7fe fb5c 	bl	8002950 <clust2sect>
 8004298:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d104      	bne.n	80042aa <f_read+0x12a>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2202      	movs	r2, #2
 80042a4:	755a      	strb	r2, [r3, #21]
 80042a6:	2302      	movs	r3, #2
 80042a8:	e0c5      	b.n	8004436 <f_read+0x2b6>
			sect += csect;
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	4413      	add	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	899b      	ldrh	r3, [r3, #12]
 80042b6:	461a      	mov	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80042be:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d041      	beq.n	800434a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	4413      	add	r3, r2
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	8952      	ldrh	r2, [r2, #10]
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d905      	bls.n	80042e0 <f_read+0x160>
					cc = fs->csize - csect;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	895b      	ldrh	r3, [r3, #10]
 80042d8:	461a      	mov	r2, r3
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	7858      	ldrb	r0, [r3, #1]
 80042e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042ea:	f7fd ff85 	bl	80021f8 <disk_read>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d004      	beq.n	80042fe <f_read+0x17e>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2201      	movs	r2, #1
 80042f8:	755a      	strb	r2, [r3, #21]
 80042fa:	2301      	movs	r3, #1
 80042fc:	e09b      	b.n	8004436 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	7d1b      	ldrb	r3, [r3, #20]
 8004302:	b25b      	sxtb	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	da18      	bge.n	800433a <f_read+0x1ba>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1a      	ldr	r2, [r3, #32]
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004312:	429a      	cmp	r2, r3
 8004314:	d911      	bls.n	800433a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1a      	ldr	r2, [r3, #32]
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	8992      	ldrh	r2, [r2, #12]
 8004322:	fb02 f303 	mul.w	r3, r2, r3
 8004326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004328:	18d0      	adds	r0, r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	899b      	ldrh	r3, [r3, #12]
 8004334:	461a      	mov	r2, r3
 8004336:	f7fe f83f 	bl	80023b8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	899b      	ldrh	r3, [r3, #12]
 800433e:	461a      	mov	r2, r3
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8004348:	e05c      	b.n	8004404 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	429a      	cmp	r2, r3
 8004352:	d02e      	beq.n	80043b2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	7d1b      	ldrb	r3, [r3, #20]
 8004358:	b25b      	sxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	da18      	bge.n	8004390 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	7858      	ldrb	r0, [r3, #1]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a1a      	ldr	r2, [r3, #32]
 800436c:	2301      	movs	r3, #1
 800436e:	f7fd ff63 	bl	8002238 <disk_write>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d004      	beq.n	8004382 <f_read+0x202>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	755a      	strb	r2, [r3, #21]
 800437e:	2301      	movs	r3, #1
 8004380:	e059      	b.n	8004436 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	7d1b      	ldrb	r3, [r3, #20]
 8004386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800438a:	b2da      	uxtb	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	7858      	ldrb	r0, [r3, #1]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800439a:	2301      	movs	r3, #1
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	f7fd ff2b 	bl	80021f8 <disk_read>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <f_read+0x232>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2201      	movs	r2, #1
 80043ac:	755a      	strb	r2, [r3, #21]
 80043ae:	2301      	movs	r3, #1
 80043b0:	e041      	b.n	8004436 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	899b      	ldrh	r3, [r3, #12]
 80043bc:	4618      	mov	r0, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	8992      	ldrh	r2, [r2, #12]
 80043c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80043ca:	fb02 f201 	mul.w	r2, r2, r1
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	1ac3      	subs	r3, r0, r3
 80043d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80043d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d901      	bls.n	80043e0 <f_read+0x260>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	8992      	ldrh	r2, [r2, #12]
 80043ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80043f2:	fb02 f200 	mul.w	r2, r2, r0
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	440b      	add	r3, r1
 80043fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043fc:	4619      	mov	r1, r3
 80043fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004400:	f7fd ffda 	bl	80023b8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004408:	4413      	add	r3, r2
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004412:	441a      	add	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	619a      	str	r2, [r3, #24]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441e:	441a      	add	r2, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	f47f aee1 	bne.w	80041f6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3738      	adds	r7, #56	; 0x38
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b08c      	sub	sp, #48	; 0x30
 8004442:	af00      	add	r7, sp, #0
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	607a      	str	r2, [r7, #4]
 800444a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f107 0210 	add.w	r2, r7, #16
 800445c:	4611      	mov	r1, r2
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fc46 	bl	8003cf0 <validate>
 8004464:	4603      	mov	r3, r0
 8004466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800446a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800446e:	2b00      	cmp	r3, #0
 8004470:	d107      	bne.n	8004482 <f_write+0x44>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	7d5b      	ldrb	r3, [r3, #21]
 8004476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800447a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <f_write+0x4a>
 8004482:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004486:	e16a      	b.n	800475e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	7d1b      	ldrb	r3, [r3, #20]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <f_write+0x5a>
 8004494:	2307      	movs	r3, #7
 8004496:	e162      	b.n	800475e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	699a      	ldr	r2, [r3, #24]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	441a      	add	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	f080 814c 	bcs.w	8004742 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	43db      	mvns	r3, r3
 80044b0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80044b2:	e146      	b.n	8004742 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	8992      	ldrh	r2, [r2, #12]
 80044bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80044c0:	fb02 f201 	mul.w	r2, r2, r1
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f040 80f1 	bne.w	80046ae <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	8992      	ldrh	r2, [r2, #12]
 80044d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	8952      	ldrh	r2, [r2, #10]
 80044dc:	3a01      	subs	r2, #1
 80044de:	4013      	ands	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d143      	bne.n	8004570 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10c      	bne.n	800450a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d11a      	bne.n	8004532 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2100      	movs	r1, #0
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe fc90 	bl	8002e26 <create_chain>
 8004506:	62b8      	str	r0, [r7, #40]	; 0x28
 8004508:	e013      	b.n	8004532 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	4619      	mov	r1, r3
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f7fe fd1c 	bl	8002f56 <clmt_clust>
 800451e:	62b8      	str	r0, [r7, #40]	; 0x28
 8004520:	e007      	b.n	8004532 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f7fe fc7b 	bl	8002e26 <create_chain>
 8004530:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8109 	beq.w	800474c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453c:	2b01      	cmp	r3, #1
 800453e:	d104      	bne.n	800454a <f_write+0x10c>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2202      	movs	r2, #2
 8004544:	755a      	strb	r2, [r3, #21]
 8004546:	2302      	movs	r3, #2
 8004548:	e109      	b.n	800475e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d104      	bne.n	800455c <f_write+0x11e>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	755a      	strb	r2, [r3, #21]
 8004558:	2301      	movs	r3, #1
 800455a:	e100      	b.n	800475e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004560:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d102      	bne.n	8004570 <f_write+0x132>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800456e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	7d1b      	ldrb	r3, [r3, #20]
 8004574:	b25b      	sxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	da18      	bge.n	80045ac <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	7858      	ldrb	r0, [r3, #1]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a1a      	ldr	r2, [r3, #32]
 8004588:	2301      	movs	r3, #1
 800458a:	f7fd fe55 	bl	8002238 <disk_write>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d004      	beq.n	800459e <f_write+0x160>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	755a      	strb	r2, [r3, #21]
 800459a:	2301      	movs	r3, #1
 800459c:	e0df      	b.n	800475e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	7d1b      	ldrb	r3, [r3, #20]
 80045a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	4619      	mov	r1, r3
 80045b4:	4610      	mov	r0, r2
 80045b6:	f7fe f9cb 	bl	8002950 <clust2sect>
 80045ba:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d104      	bne.n	80045cc <f_write+0x18e>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2202      	movs	r2, #2
 80045c6:	755a      	strb	r2, [r3, #21]
 80045c8:	2302      	movs	r3, #2
 80045ca:	e0c8      	b.n	800475e <f_write+0x320>
			sect += csect;
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	4413      	add	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	899b      	ldrh	r3, [r3, #12]
 80045d8:	461a      	mov	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80045e0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d043      	beq.n	8004670 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	4413      	add	r3, r2
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	8952      	ldrh	r2, [r2, #10]
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d905      	bls.n	8004602 <f_write+0x1c4>
					cc = fs->csize - csect;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	895b      	ldrh	r3, [r3, #10]
 80045fa:	461a      	mov	r2, r3
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	7858      	ldrb	r0, [r3, #1]
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	69f9      	ldr	r1, [r7, #28]
 800460c:	f7fd fe14 	bl	8002238 <disk_write>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d004      	beq.n	8004620 <f_write+0x1e2>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2201      	movs	r2, #1
 800461a:	755a      	strb	r2, [r3, #21]
 800461c:	2301      	movs	r3, #1
 800461e:	e09e      	b.n	800475e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a1a      	ldr	r2, [r3, #32]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	6a3a      	ldr	r2, [r7, #32]
 800462a:	429a      	cmp	r2, r3
 800462c:	d918      	bls.n	8004660 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a1a      	ldr	r2, [r3, #32]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	8992      	ldrh	r2, [r2, #12]
 8004640:	fb02 f303 	mul.w	r3, r2, r3
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	18d1      	adds	r1, r2, r3
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	899b      	ldrh	r3, [r3, #12]
 800464c:	461a      	mov	r2, r3
 800464e:	f7fd feb3 	bl	80023b8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	7d1b      	ldrb	r3, [r3, #20]
 8004656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800465a:	b2da      	uxtb	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	899b      	ldrh	r3, [r3, #12]
 8004664:	461a      	mov	r2, r3
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	fb02 f303 	mul.w	r3, r2, r3
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800466e:	e04b      	b.n	8004708 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	429a      	cmp	r2, r3
 8004678:	d016      	beq.n	80046a8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004682:	429a      	cmp	r2, r3
 8004684:	d210      	bcs.n	80046a8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	7858      	ldrb	r0, [r3, #1]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004690:	2301      	movs	r3, #1
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	f7fd fdb0 	bl	80021f8 <disk_read>
 8004698:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	755a      	strb	r2, [r3, #21]
 80046a4:	2301      	movs	r3, #1
 80046a6:	e05a      	b.n	800475e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	899b      	ldrh	r3, [r3, #12]
 80046b2:	4618      	mov	r0, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	8992      	ldrh	r2, [r2, #12]
 80046bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80046c0:	fb02 f201 	mul.w	r2, r2, r1
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	1ac3      	subs	r3, r0, r3
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80046ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d901      	bls.n	80046d6 <f_write+0x298>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	8992      	ldrh	r2, [r2, #12]
 80046e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80046e8:	fb02 f200 	mul.w	r2, r2, r0
 80046ec:	1a9b      	subs	r3, r3, r2
 80046ee:	440b      	add	r3, r1
 80046f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f2:	69f9      	ldr	r1, [r7, #28]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fd fe5f 	bl	80023b8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	7d1b      	ldrb	r3, [r3, #20]
 80046fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004702:	b2da      	uxtb	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	4413      	add	r3, r2
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	699a      	ldr	r2, [r3, #24]
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	441a      	add	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	619a      	str	r2, [r3, #24]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	429a      	cmp	r2, r3
 8004726:	bf38      	it	cc
 8004728:	461a      	movcc	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	60da      	str	r2, [r3, #12]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	441a      	add	r2, r3
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f47f aeb5 	bne.w	80044b4 <f_write+0x76>
 800474a:	e000      	b.n	800474e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800474c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	7d1b      	ldrb	r3, [r3, #20]
 8004752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004756:	b2da      	uxtb	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3730      	adds	r7, #48	; 0x30
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b086      	sub	sp, #24
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f107 0208 	add.w	r2, r7, #8
 8004774:	4611      	mov	r1, r2
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff faba 	bl	8003cf0 <validate>
 800477c:	4603      	mov	r3, r0
 800477e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004780:	7dfb      	ldrb	r3, [r7, #23]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d168      	bne.n	8004858 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	7d1b      	ldrb	r3, [r3, #20]
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	d062      	beq.n	8004858 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	7d1b      	ldrb	r3, [r3, #20]
 8004796:	b25b      	sxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	da15      	bge.n	80047c8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	7858      	ldrb	r0, [r3, #1]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1a      	ldr	r2, [r3, #32]
 80047aa:	2301      	movs	r3, #1
 80047ac:	f7fd fd44 	bl	8002238 <disk_write>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <f_sync+0x54>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e04f      	b.n	800485a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	7d1b      	ldrb	r3, [r3, #20]
 80047be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80047c8:	f7fd fc34 	bl	8002034 <get_fattime>
 80047cc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	4619      	mov	r1, r3
 80047d6:	4610      	mov	r0, r2
 80047d8:	f7fe f81c 	bl	8002814 <move_window>
 80047dc:	4603      	mov	r3, r0
 80047de:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80047e0:	7dfb      	ldrb	r3, [r7, #23]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d138      	bne.n	8004858 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	330b      	adds	r3, #11
 80047f0:	781a      	ldrb	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	330b      	adds	r3, #11
 80047f6:	f042 0220 	orr.w	r2, r2, #32
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	461a      	mov	r2, r3
 8004808:	68f9      	ldr	r1, [r7, #12]
 800480a:	f7fe fda1 	bl	8003350 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f103 021c 	add.w	r2, r3, #28
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4619      	mov	r1, r3
 800481a:	4610      	mov	r0, r2
 800481c:	f7fd fda0 	bl	8002360 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3316      	adds	r3, #22
 8004824:	6939      	ldr	r1, [r7, #16]
 8004826:	4618      	mov	r0, r3
 8004828:	f7fd fd9a 	bl	8002360 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3312      	adds	r3, #18
 8004830:	2100      	movs	r1, #0
 8004832:	4618      	mov	r0, r3
 8004834:	f7fd fd79 	bl	800232a <st_word>
					fs->wflag = 1;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2201      	movs	r2, #1
 800483c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	4618      	mov	r0, r3
 8004842:	f7fe f815 	bl	8002870 <sync_fs>
 8004846:	4603      	mov	r3, r0
 8004848:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	7d1b      	ldrb	r3, [r3, #20]
 800484e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004852:	b2da      	uxtb	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8004858:	7dfb      	ldrb	r3, [r7, #23]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7ff ff7b 	bl	8004766 <f_sync>
 8004870:	4603      	mov	r3, r0
 8004872:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d118      	bne.n	80048ac <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f107 0208 	add.w	r2, r7, #8
 8004880:	4611      	mov	r1, r2
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff fa34 	bl	8003cf0 <validate>
 8004888:	4603      	mov	r3, r0
 800488a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10c      	bne.n	80048ac <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	4618      	mov	r0, r3
 8004898:	f7fd ff18 	bl	80026cc <dec_lock>
 800489c:	4603      	mov	r3, r0
 800489e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d102      	bne.n	80048ac <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	4613      	mov	r3, r2
 80048c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80048c6:	2301      	movs	r3, #1
 80048c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80048ce:	4b1f      	ldr	r3, [pc, #124]	; (800494c <FATFS_LinkDriverEx+0x94>)
 80048d0:	7a5b      	ldrb	r3, [r3, #9]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d131      	bne.n	800493c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80048d8:	4b1c      	ldr	r3, [pc, #112]	; (800494c <FATFS_LinkDriverEx+0x94>)
 80048da:	7a5b      	ldrb	r3, [r3, #9]
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	461a      	mov	r2, r3
 80048e0:	4b1a      	ldr	r3, [pc, #104]	; (800494c <FATFS_LinkDriverEx+0x94>)
 80048e2:	2100      	movs	r1, #0
 80048e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80048e6:	4b19      	ldr	r3, [pc, #100]	; (800494c <FATFS_LinkDriverEx+0x94>)
 80048e8:	7a5b      	ldrb	r3, [r3, #9]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	4a17      	ldr	r2, [pc, #92]	; (800494c <FATFS_LinkDriverEx+0x94>)
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80048f6:	4b15      	ldr	r3, [pc, #84]	; (800494c <FATFS_LinkDriverEx+0x94>)
 80048f8:	7a5b      	ldrb	r3, [r3, #9]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	4b13      	ldr	r3, [pc, #76]	; (800494c <FATFS_LinkDriverEx+0x94>)
 8004900:	4413      	add	r3, r2
 8004902:	79fa      	ldrb	r2, [r7, #7]
 8004904:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004906:	4b11      	ldr	r3, [pc, #68]	; (800494c <FATFS_LinkDriverEx+0x94>)
 8004908:	7a5b      	ldrb	r3, [r3, #9]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	b2d1      	uxtb	r1, r2
 8004910:	4a0e      	ldr	r2, [pc, #56]	; (800494c <FATFS_LinkDriverEx+0x94>)
 8004912:	7251      	strb	r1, [r2, #9]
 8004914:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004916:	7dbb      	ldrb	r3, [r7, #22]
 8004918:	3330      	adds	r3, #48	; 0x30
 800491a:	b2da      	uxtb	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	3301      	adds	r3, #1
 8004924:	223a      	movs	r2, #58	; 0x3a
 8004926:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	3302      	adds	r3, #2
 800492c:	222f      	movs	r2, #47	; 0x2f
 800492e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	3303      	adds	r3, #3
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800493c:	7dfb      	ldrb	r3, [r7, #23]
}
 800493e:	4618      	mov	r0, r3
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	200000c8 	.word	0x200000c8

08004950 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800495a:	2200      	movs	r2, #0
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff ffaa 	bl	80048b8 <FATFS_LinkDriverEx>
 8004964:	4603      	mov	r3, r0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <__libc_init_array>:
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	4e0d      	ldr	r6, [pc, #52]	; (80049a8 <__libc_init_array+0x38>)
 8004974:	4c0d      	ldr	r4, [pc, #52]	; (80049ac <__libc_init_array+0x3c>)
 8004976:	1ba4      	subs	r4, r4, r6
 8004978:	10a4      	asrs	r4, r4, #2
 800497a:	2500      	movs	r5, #0
 800497c:	42a5      	cmp	r5, r4
 800497e:	d109      	bne.n	8004994 <__libc_init_array+0x24>
 8004980:	4e0b      	ldr	r6, [pc, #44]	; (80049b0 <__libc_init_array+0x40>)
 8004982:	4c0c      	ldr	r4, [pc, #48]	; (80049b4 <__libc_init_array+0x44>)
 8004984:	f000 f820 	bl	80049c8 <_init>
 8004988:	1ba4      	subs	r4, r4, r6
 800498a:	10a4      	asrs	r4, r4, #2
 800498c:	2500      	movs	r5, #0
 800498e:	42a5      	cmp	r5, r4
 8004990:	d105      	bne.n	800499e <__libc_init_array+0x2e>
 8004992:	bd70      	pop	{r4, r5, r6, pc}
 8004994:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004998:	4798      	blx	r3
 800499a:	3501      	adds	r5, #1
 800499c:	e7ee      	b.n	800497c <__libc_init_array+0xc>
 800499e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049a2:	4798      	blx	r3
 80049a4:	3501      	adds	r5, #1
 80049a6:	e7f2      	b.n	800498e <__libc_init_array+0x1e>
 80049a8:	08004ac8 	.word	0x08004ac8
 80049ac:	08004ac8 	.word	0x08004ac8
 80049b0:	08004ac8 	.word	0x08004ac8
 80049b4:	08004acc 	.word	0x08004acc

080049b8 <memset>:
 80049b8:	4402      	add	r2, r0
 80049ba:	4603      	mov	r3, r0
 80049bc:	4293      	cmp	r3, r2
 80049be:	d100      	bne.n	80049c2 <memset+0xa>
 80049c0:	4770      	bx	lr
 80049c2:	f803 1b01 	strb.w	r1, [r3], #1
 80049c6:	e7f9      	b.n	80049bc <memset+0x4>

080049c8 <_init>:
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ca:	bf00      	nop
 80049cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ce:	bc08      	pop	{r3}
 80049d0:	469e      	mov	lr, r3
 80049d2:	4770      	bx	lr

080049d4 <_fini>:
 80049d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d6:	bf00      	nop
 80049d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049da:	bc08      	pop	{r3}
 80049dc:	469e      	mov	lr, r3
 80049de:	4770      	bx	lr
