
STM32_FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013648  08004230  08004230  00014230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017878  08017878  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  08017878  08017878  00027878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017880  08017880  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017880  08017880  00027880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017884  08017884  00027884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08017888  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c038  20000074  080178fc  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c0ac  080178fc  0003c0ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005fc4  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013db  00000000  00000000  00036068  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004b8  00000000  00000000  00037448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000468  00000000  00000000  00037900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f4dd  00000000  00000000  00037d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004fc8  00000000  00000000  00057245  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bfa61  00000000  00000000  0005c20d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  0011bc6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001438  00000000  00000000  0011bd5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00003378  00000000  00000000  0011d194  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004214 	.word	0x08004214

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08004214 	.word	0x08004214

080001c8 <arm_bitreversal_32>:
 80001c8:	1c4b      	adds	r3, r1, #1
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	bf98      	it	ls
 80001ce:	4770      	bxls	lr
 80001d0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001d4:	1c91      	adds	r1, r2, #2
 80001d6:	089b      	lsrs	r3, r3, #2

080001d8 <arm_bitreversal_32_0>:
 80001d8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001dc:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e0:	880a      	ldrh	r2, [r1, #0]
 80001e2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001e6:	4480      	add	r8, r0
 80001e8:	4481      	add	r9, r0
 80001ea:	4402      	add	r2, r0
 80001ec:	4484      	add	ip, r0
 80001ee:	f8d9 7000 	ldr.w	r7, [r9]
 80001f2:	f8d8 6000 	ldr.w	r6, [r8]
 80001f6:	6815      	ldr	r5, [r2, #0]
 80001f8:	f8dc 4000 	ldr.w	r4, [ip]
 80001fc:	f8c9 6000 	str.w	r6, [r9]
 8000200:	f8c8 7000 	str.w	r7, [r8]
 8000204:	f8cc 5000 	str.w	r5, [ip]
 8000208:	6014      	str	r4, [r2, #0]
 800020a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800020e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000212:	6855      	ldr	r5, [r2, #4]
 8000214:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000218:	f8c9 6004 	str.w	r6, [r9, #4]
 800021c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000220:	f8cc 5004 	str.w	r5, [ip, #4]
 8000224:	6054      	str	r4, [r2, #4]
 8000226:	3108      	adds	r1, #8
 8000228:	3b01      	subs	r3, #1
 800022a:	d1d5      	bne.n	80001d8 <arm_bitreversal_32_0>
 800022c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000230:	4770      	bx	lr

08000232 <arm_bitreversal_16>:
 8000232:	1c4b      	adds	r3, r1, #1
 8000234:	2b01      	cmp	r3, #1
 8000236:	bf98      	it	ls
 8000238:	4770      	bxls	lr
 800023a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800023e:	1c91      	adds	r1, r2, #2
 8000240:	089b      	lsrs	r3, r3, #2

08000242 <arm_bitreversal_16_0>:
 8000242:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000246:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800024a:	880a      	ldrh	r2, [r1, #0]
 800024c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000250:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000254:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000258:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800025c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000260:	f8d9 7000 	ldr.w	r7, [r9]
 8000264:	f8d8 6000 	ldr.w	r6, [r8]
 8000268:	6815      	ldr	r5, [r2, #0]
 800026a:	f8dc 4000 	ldr.w	r4, [ip]
 800026e:	f8c9 6000 	str.w	r6, [r9]
 8000272:	f8c8 7000 	str.w	r7, [r8]
 8000276:	f8cc 5000 	str.w	r5, [ip]
 800027a:	6014      	str	r4, [r2, #0]
 800027c:	3108      	adds	r1, #8
 800027e:	3b01      	subs	r3, #1
 8000280:	d1df      	bne.n	8000242 <arm_bitreversal_16_0>
 8000282:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c6:	f1a4 0401 	sub.w	r4, r4, #1
 80003ca:	d1e9      	bne.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2iz>:
 8000b34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b3c:	d215      	bcs.n	8000b6a <__aeabi_d2iz+0x36>
 8000b3e:	d511      	bpl.n	8000b64 <__aeabi_d2iz+0x30>
 8000b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d912      	bls.n	8000b70 <__aeabi_d2iz+0x3c>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d105      	bne.n	8000b7c <__aeabi_d2iz+0x48>
 8000b70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	bf08      	it	eq
 8000b76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__aeabi_d2f>:
 8000b84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b8c:	bf24      	itt	cs
 8000b8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b96:	d90d      	bls.n	8000bb4 <__aeabi_d2f+0x30>
 8000b98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bac:	bf08      	it	eq
 8000bae:	f020 0001 	biceq.w	r0, r0, #1
 8000bb2:	4770      	bx	lr
 8000bb4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb8:	d121      	bne.n	8000bfe <__aeabi_d2f+0x7a>
 8000bba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bbe:	bfbc      	itt	lt
 8000bc0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	4770      	bxlt	lr
 8000bc6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bce:	f1c2 0218 	rsb	r2, r2, #24
 8000bd2:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bda:	fa20 f002 	lsr.w	r0, r0, r2
 8000bde:	bf18      	it	ne
 8000be0:	f040 0001 	orrne.w	r0, r0, #1
 8000be4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf0:	ea40 000c 	orr.w	r0, r0, ip
 8000bf4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bfc:	e7cc      	b.n	8000b98 <__aeabi_d2f+0x14>
 8000bfe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c02:	d107      	bne.n	8000c14 <__aeabi_d2f+0x90>
 8000c04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c08:	bf1e      	ittt	ne
 8000c0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c12:	4770      	bxne	lr
 8000c14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop

08000c24 <__aeabi_uldivmod>:
 8000c24:	b953      	cbnz	r3, 8000c3c <__aeabi_uldivmod+0x18>
 8000c26:	b94a      	cbnz	r2, 8000c3c <__aeabi_uldivmod+0x18>
 8000c28:	2900      	cmp	r1, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	2800      	cmpeq	r0, #0
 8000c2e:	bf1c      	itt	ne
 8000c30:	f04f 31ff 	movne.w	r1, #4294967295
 8000c34:	f04f 30ff 	movne.w	r0, #4294967295
 8000c38:	f000 b972 	b.w	8000f20 <__aeabi_idiv0>
 8000c3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c44:	f000 f806 	bl	8000c54 <__udivmoddi4>
 8000c48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c50:	b004      	add	sp, #16
 8000c52:	4770      	bx	lr

08000c54 <__udivmoddi4>:
 8000c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c58:	9e08      	ldr	r6, [sp, #32]
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	4688      	mov	r8, r1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d14b      	bne.n	8000cfa <__udivmoddi4+0xa6>
 8000c62:	428a      	cmp	r2, r1
 8000c64:	4615      	mov	r5, r2
 8000c66:	d967      	bls.n	8000d38 <__udivmoddi4+0xe4>
 8000c68:	fab2 f282 	clz	r2, r2
 8000c6c:	b14a      	cbz	r2, 8000c82 <__udivmoddi4+0x2e>
 8000c6e:	f1c2 0720 	rsb	r7, r2, #32
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7a:	4095      	lsls	r5, r2
 8000c7c:	ea47 0803 	orr.w	r8, r7, r3
 8000c80:	4094      	lsls	r4, r2
 8000c82:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c86:	0c23      	lsrs	r3, r4, #16
 8000c88:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c8c:	fa1f fc85 	uxth.w	ip, r5
 8000c90:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c94:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c98:	fb07 f10c 	mul.w	r1, r7, ip
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x60>
 8000ca0:	18eb      	adds	r3, r5, r3
 8000ca2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ca6:	f080 811b 	bcs.w	8000ee0 <__udivmoddi4+0x28c>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 8118 	bls.w	8000ee0 <__udivmoddi4+0x28c>
 8000cb0:	3f02      	subs	r7, #2
 8000cb2:	442b      	add	r3, r5
 8000cb4:	1a5b      	subs	r3, r3, r1
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cc8:	45a4      	cmp	ip, r4
 8000cca:	d909      	bls.n	8000ce0 <__udivmoddi4+0x8c>
 8000ccc:	192c      	adds	r4, r5, r4
 8000cce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd2:	f080 8107 	bcs.w	8000ee4 <__udivmoddi4+0x290>
 8000cd6:	45a4      	cmp	ip, r4
 8000cd8:	f240 8104 	bls.w	8000ee4 <__udivmoddi4+0x290>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	442c      	add	r4, r5
 8000ce0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce4:	eba4 040c 	sub.w	r4, r4, ip
 8000ce8:	2700      	movs	r7, #0
 8000cea:	b11e      	cbz	r6, 8000cf4 <__udivmoddi4+0xa0>
 8000cec:	40d4      	lsrs	r4, r2
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d909      	bls.n	8000d12 <__udivmoddi4+0xbe>
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f000 80eb 	beq.w	8000eda <__udivmoddi4+0x286>
 8000d04:	2700      	movs	r7, #0
 8000d06:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0a:	4638      	mov	r0, r7
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	fab3 f783 	clz	r7, r3
 8000d16:	2f00      	cmp	r7, #0
 8000d18:	d147      	bne.n	8000daa <__udivmoddi4+0x156>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0xd0>
 8000d1e:	4282      	cmp	r2, r0
 8000d20:	f200 80fa 	bhi.w	8000f18 <__udivmoddi4+0x2c4>
 8000d24:	1a84      	subs	r4, r0, r2
 8000d26:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	4698      	mov	r8, r3
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d0e0      	beq.n	8000cf4 <__udivmoddi4+0xa0>
 8000d32:	e9c6 4800 	strd	r4, r8, [r6]
 8000d36:	e7dd      	b.n	8000cf4 <__udivmoddi4+0xa0>
 8000d38:	b902      	cbnz	r2, 8000d3c <__udivmoddi4+0xe8>
 8000d3a:	deff      	udf	#255	; 0xff
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	2a00      	cmp	r2, #0
 8000d42:	f040 808f 	bne.w	8000e64 <__udivmoddi4+0x210>
 8000d46:	1b49      	subs	r1, r1, r5
 8000d48:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d4c:	fa1f f885 	uxth.w	r8, r5
 8000d50:	2701      	movs	r7, #1
 8000d52:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d60:	fb08 f10c 	mul.w	r1, r8, ip
 8000d64:	4299      	cmp	r1, r3
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0x124>
 8000d68:	18eb      	adds	r3, r5, r3
 8000d6a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x122>
 8000d70:	4299      	cmp	r1, r3
 8000d72:	f200 80cd 	bhi.w	8000f10 <__udivmoddi4+0x2bc>
 8000d76:	4684      	mov	ip, r0
 8000d78:	1a59      	subs	r1, r3, r1
 8000d7a:	b2a3      	uxth	r3, r4
 8000d7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d80:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d84:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d88:	fb08 f800 	mul.w	r8, r8, r0
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x14c>
 8000d90:	192c      	adds	r4, r5, r4
 8000d92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x14a>
 8000d98:	45a0      	cmp	r8, r4
 8000d9a:	f200 80b6 	bhi.w	8000f0a <__udivmoddi4+0x2b6>
 8000d9e:	4618      	mov	r0, r3
 8000da0:	eba4 0408 	sub.w	r4, r4, r8
 8000da4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da8:	e79f      	b.n	8000cea <__udivmoddi4+0x96>
 8000daa:	f1c7 0c20 	rsb	ip, r7, #32
 8000dae:	40bb      	lsls	r3, r7
 8000db0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000db8:	fa01 f407 	lsl.w	r4, r1, r7
 8000dbc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dc8:	4325      	orrs	r5, r4
 8000dca:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dce:	0c2c      	lsrs	r4, r5, #16
 8000dd0:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd4:	fa1f fa8e 	uxth.w	sl, lr
 8000dd8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ddc:	fb09 f40a 	mul.w	r4, r9, sl
 8000de0:	429c      	cmp	r4, r3
 8000de2:	fa02 f207 	lsl.w	r2, r2, r7
 8000de6:	fa00 f107 	lsl.w	r1, r0, r7
 8000dea:	d90b      	bls.n	8000e04 <__udivmoddi4+0x1b0>
 8000dec:	eb1e 0303 	adds.w	r3, lr, r3
 8000df0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df4:	f080 8087 	bcs.w	8000f06 <__udivmoddi4+0x2b2>
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	f240 8084 	bls.w	8000f06 <__udivmoddi4+0x2b2>
 8000dfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000e02:	4473      	add	r3, lr
 8000e04:	1b1b      	subs	r3, r3, r4
 8000e06:	b2ad      	uxth	r5, r5
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e10:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e14:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e18:	45a2      	cmp	sl, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x1da>
 8000e1c:	eb1e 0404 	adds.w	r4, lr, r4
 8000e20:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e24:	d26b      	bcs.n	8000efe <__udivmoddi4+0x2aa>
 8000e26:	45a2      	cmp	sl, r4
 8000e28:	d969      	bls.n	8000efe <__udivmoddi4+0x2aa>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4474      	add	r4, lr
 8000e2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e32:	fba0 8902 	umull	r8, r9, r0, r2
 8000e36:	eba4 040a 	sub.w	r4, r4, sl
 8000e3a:	454c      	cmp	r4, r9
 8000e3c:	46c2      	mov	sl, r8
 8000e3e:	464b      	mov	r3, r9
 8000e40:	d354      	bcc.n	8000eec <__udivmoddi4+0x298>
 8000e42:	d051      	beq.n	8000ee8 <__udivmoddi4+0x294>
 8000e44:	2e00      	cmp	r6, #0
 8000e46:	d069      	beq.n	8000f1c <__udivmoddi4+0x2c8>
 8000e48:	ebb1 050a 	subs.w	r5, r1, sl
 8000e4c:	eb64 0403 	sbc.w	r4, r4, r3
 8000e50:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e54:	40fd      	lsrs	r5, r7
 8000e56:	40fc      	lsrs	r4, r7
 8000e58:	ea4c 0505 	orr.w	r5, ip, r5
 8000e5c:	e9c6 5400 	strd	r5, r4, [r6]
 8000e60:	2700      	movs	r7, #0
 8000e62:	e747      	b.n	8000cf4 <__udivmoddi4+0xa0>
 8000e64:	f1c2 0320 	rsb	r3, r2, #32
 8000e68:	fa20 f703 	lsr.w	r7, r0, r3
 8000e6c:	4095      	lsls	r5, r2
 8000e6e:	fa01 f002 	lsl.w	r0, r1, r2
 8000e72:	fa21 f303 	lsr.w	r3, r1, r3
 8000e76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7a:	4338      	orrs	r0, r7
 8000e7c:	0c01      	lsrs	r1, r0, #16
 8000e7e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e82:	fa1f f885 	uxth.w	r8, r5
 8000e86:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8e:	fb07 f308 	mul.w	r3, r7, r8
 8000e92:	428b      	cmp	r3, r1
 8000e94:	fa04 f402 	lsl.w	r4, r4, r2
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x256>
 8000e9a:	1869      	adds	r1, r5, r1
 8000e9c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea0:	d22f      	bcs.n	8000f02 <__udivmoddi4+0x2ae>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d92d      	bls.n	8000f02 <__udivmoddi4+0x2ae>
 8000ea6:	3f02      	subs	r7, #2
 8000ea8:	4429      	add	r1, r5
 8000eaa:	1acb      	subs	r3, r1, r3
 8000eac:	b281      	uxth	r1, r0
 8000eae:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eb6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eba:	fb00 f308 	mul.w	r3, r0, r8
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x27e>
 8000ec2:	1869      	adds	r1, r5, r1
 8000ec4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ec8:	d217      	bcs.n	8000efa <__udivmoddi4+0x2a6>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d915      	bls.n	8000efa <__udivmoddi4+0x2a6>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4429      	add	r1, r5
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ed8:	e73b      	b.n	8000d52 <__udivmoddi4+0xfe>
 8000eda:	4637      	mov	r7, r6
 8000edc:	4630      	mov	r0, r6
 8000ede:	e709      	b.n	8000cf4 <__udivmoddi4+0xa0>
 8000ee0:	4607      	mov	r7, r0
 8000ee2:	e6e7      	b.n	8000cb4 <__udivmoddi4+0x60>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6fb      	b.n	8000ce0 <__udivmoddi4+0x8c>
 8000ee8:	4541      	cmp	r1, r8
 8000eea:	d2ab      	bcs.n	8000e44 <__udivmoddi4+0x1f0>
 8000eec:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef0:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	e7a4      	b.n	8000e44 <__udivmoddi4+0x1f0>
 8000efa:	4660      	mov	r0, ip
 8000efc:	e7e9      	b.n	8000ed2 <__udivmoddi4+0x27e>
 8000efe:	4618      	mov	r0, r3
 8000f00:	e795      	b.n	8000e2e <__udivmoddi4+0x1da>
 8000f02:	4667      	mov	r7, ip
 8000f04:	e7d1      	b.n	8000eaa <__udivmoddi4+0x256>
 8000f06:	4681      	mov	r9, r0
 8000f08:	e77c      	b.n	8000e04 <__udivmoddi4+0x1b0>
 8000f0a:	3802      	subs	r0, #2
 8000f0c:	442c      	add	r4, r5
 8000f0e:	e747      	b.n	8000da0 <__udivmoddi4+0x14c>
 8000f10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f14:	442b      	add	r3, r5
 8000f16:	e72f      	b.n	8000d78 <__udivmoddi4+0x124>
 8000f18:	4638      	mov	r0, r7
 8000f1a:	e708      	b.n	8000d2e <__udivmoddi4+0xda>
 8000f1c:	4637      	mov	r7, r6
 8000f1e:	e6e9      	b.n	8000cf4 <__udivmoddi4+0xa0>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f000 fa0a 	bl	8001340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 f80c 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f30:	f000 f874 	bl	800101c <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  take_fft(1000,5,100);
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	2105      	movs	r1, #5
 8000f38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f3c:	f000 f888 	bl	8001050 <take_fft>
	  HAL_Delay(100);
 8000f40:	2064      	movs	r0, #100	; 0x64
 8000f42:	f000 fa6f 	bl	8001424 <HAL_Delay>
  {
 8000f46:	e7f5      	b.n	8000f34 <main+0x10>

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b094      	sub	sp, #80	; 0x50
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	2230      	movs	r2, #48	; 0x30
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f002 f8e8 	bl	800312c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <SystemClock_Config+0xcc>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	4a27      	ldr	r2, [pc, #156]	; (8001014 <SystemClock_Config+0xcc>)
 8000f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <SystemClock_Config+0xcc>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <SystemClock_Config+0xd0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a21      	ldr	r2, [pc, #132]	; (8001018 <SystemClock_Config+0xd0>)
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <SystemClock_Config+0xd0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fbc:	23a8      	movs	r3, #168	; 0xa8
 8000fbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc8:	f107 0320 	add.w	r3, r7, #32
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fb31 	bl	8001634 <HAL_RCC_OscConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fd8:	f000 f91c 	bl	8001214 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fdc:	230f      	movs	r3, #15
 8000fde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2105      	movs	r1, #5
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fd8a 	bl	8001b14 <HAL_RCC_ClockConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001006:	f000 f905 	bl	8001214 <Error_Handler>
  }
}
 800100a:	bf00      	nop
 800100c:	3750      	adds	r7, #80	; 0x50
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40007000 	.word	0x40007000

0800101c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_GPIO_Init+0x30>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a08      	ldr	r2, [pc, #32]	; (800104c <MX_GPIO_Init+0x30>)
 800102c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_GPIO_Init+0x30>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800

08001050 <take_fft>:

/* USER CODE BEGIN 4 */
void take_fft(unsigned int fs, unsigned char amp, unsigned int freq)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	ed2d 8b02 	vpush	{d8}
 8001056:	b08b      	sub	sp, #44	; 0x2c
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	460b      	mov	r3, r1
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	72fb      	strb	r3, [r7, #11]
	uint32_t i;
	float32_t f_step, max_value;
	uint32_t max_index;

	f_step = (float32_t)fs / (float32_t)FFT_SIZE;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	ee07 3a90 	vmov	s15, r3
 8001068:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800106c:	eddf 6a61 	vldr	s13, [pc, #388]	; 80011f4 <take_fft+0x1a4>
 8001070:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001074:	edc7 7a08 	vstr	s15, [r7, #32]

	for (i = 0; i < FFT_SIZE; i++)
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
 800107c:	e064      	b.n	8001148 <take_fft+0xf8>
	{
		fft_in[i] = (amp * ((float32_t)sin(2.0f * PI * freq * (float32_t)i / (float32_t)fs))) +  (2*amp*((float32_t)sin(2.0f * PI * 10 * (float32_t)i / (float32_t)fs)));
 800107e:	7afb      	ldrb	r3, [r7, #11]
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001092:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80011f8 <take_fft+0x1a8>
 8001096:	ee27 7a87 	vmul.f32	s14, s15, s14
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010b6:	ee16 0a90 	vmov	r0, s13
 80010ba:	f7ff fa49 	bl	8000550 <__aeabi_f2d>
 80010be:	4603      	mov	r3, r0
 80010c0:	460c      	mov	r4, r1
 80010c2:	ec44 3b10 	vmov	d0, r3, r4
 80010c6:	f002 f83b 	bl	8003140 <sin>
 80010ca:	ec54 3b10 	vmov	r3, r4, d0
 80010ce:	4618      	mov	r0, r3
 80010d0:	4621      	mov	r1, r4
 80010d2:	f7ff fd57 	bl	8000b84 <__aeabi_d2f>
 80010d6:	ee07 0a90 	vmov	s15, r0
 80010da:	ee28 8a27 	vmul.f32	s16, s16, s15
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	ee07 3a90 	vmov	s15, r3
 80010e6:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80011fc <take_fft+0x1ac>
 80010f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001106:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800110a:	ee16 0a90 	vmov	r0, s13
 800110e:	f7ff fa1f 	bl	8000550 <__aeabi_f2d>
 8001112:	4603      	mov	r3, r0
 8001114:	460c      	mov	r4, r1
 8001116:	ec44 3b10 	vmov	d0, r3, r4
 800111a:	f002 f811 	bl	8003140 <sin>
 800111e:	ec54 3b10 	vmov	r3, r4, d0
 8001122:	4618      	mov	r0, r3
 8001124:	4621      	mov	r1, r4
 8001126:	f7ff fd2d 	bl	8000b84 <__aeabi_d2f>
 800112a:	ee07 0a90 	vmov	s15, r0
 800112e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001132:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001136:	4a32      	ldr	r2, [pc, #200]	; (8001200 <take_fft+0x1b0>)
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < FFT_SIZE; i++)
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	3301      	adds	r3, #1
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800114e:	d396      	bcc.n	800107e <take_fft+0x2e>
	}

	arm_rfft_fast_init_f32(&rfft_f32, FFT_SIZE);
 8001150:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001154:	482b      	ldr	r0, [pc, #172]	; (8001204 <take_fft+0x1b4>)
 8001156:	f000 ff03 	bl	8001f60 <arm_rfft_fast_init_f32>
	arm_rfft_fast_f32(&rfft_f32, fft_in, fft_out, 0);
 800115a:	2300      	movs	r3, #0
 800115c:	4a2a      	ldr	r2, [pc, #168]	; (8001208 <take_fft+0x1b8>)
 800115e:	4928      	ldr	r1, [pc, #160]	; (8001200 <take_fft+0x1b0>)
 8001160:	4828      	ldr	r0, [pc, #160]	; (8001204 <take_fft+0x1b4>)
 8001162:	f000 ff81 	bl	8002068 <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(fft_out, fft_out_abs, FFT_SIZE / 2);
 8001166:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800116a:	4928      	ldr	r1, [pc, #160]	; (800120c <take_fft+0x1bc>)
 800116c:	4826      	ldr	r0, [pc, #152]	; (8001208 <take_fft+0x1b8>)
 800116e:	f001 fbe9 	bl	8002944 <arm_cmplx_mag_f32>


	fft_out_abs_norm[0] = fft_out_abs[0] / FFT_SIZE;
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <take_fft+0x1bc>)
 8001174:	ed93 7a00 	vldr	s14, [r3]
 8001178:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80011f4 <take_fft+0x1a4>
 800117c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001180:	4b23      	ldr	r3, [pc, #140]	; (8001210 <take_fft+0x1c0>)
 8001182:	edc3 7a00 	vstr	s15, [r3]
	for (i = 1; i < FFT_SIZE; i++)
 8001186:	2301      	movs	r3, #1
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	e014      	b.n	80011b6 <take_fft+0x166>
	{
		fft_out_abs_norm[i] = (2.0f * fft_out_abs[i]) / (float32_t)FFT_SIZE;
 800118c:	4a1f      	ldr	r2, [pc, #124]	; (800120c <take_fft+0x1bc>)
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	edd3 7a00 	vldr	s15, [r3]
 8001198:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800119c:	eddf 6a15 	vldr	s13, [pc, #84]	; 80011f4 <take_fft+0x1a4>
 80011a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a4:	4a1a      	ldr	r2, [pc, #104]	; (8001210 <take_fft+0x1c0>)
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	edc3 7a00 	vstr	s15, [r3]
	for (i = 1; i < FFT_SIZE; i++)
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	3301      	adds	r3, #1
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011bc:	d3e6      	bcc.n	800118c <take_fft+0x13c>
	}

	arm_max_f32(fft_out_abs_norm, FFT_SIZE, &max_value, &max_index);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	f107 0218 	add.w	r2, r7, #24
 80011c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ca:	4811      	ldr	r0, [pc, #68]	; (8001210 <take_fft+0x1c0>)
 80011cc:	f000 fe60 	bl	8001e90 <arm_max_f32>

	float32_t frequency = max_index * f_step;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011da:	ed97 7a08 	vldr	s14, [r7, #32]
 80011de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e2:	edc7 7a07 	vstr	s15, [r7, #28]
}
 80011e6:	bf00      	nop
 80011e8:	372c      	adds	r7, #44	; 0x2c
 80011ea:	46bd      	mov	sp, r7
 80011ec:	ecbd 8b02 	vpop	{d8}
 80011f0:	bd90      	pop	{r4, r7, pc}
 80011f2:	bf00      	nop
 80011f4:	45800000 	.word	0x45800000
 80011f8:	40c90fdb 	.word	0x40c90fdb
 80011fc:	427b53d2 	.word	0x427b53d2
 8001200:	20002090 	.word	0x20002090
 8001204:	2000c090 	.word	0x2000c090
 8001208:	20008090 	.word	0x20008090
 800120c:	20006090 	.word	0x20006090
 8001210:	20000090 	.word	0x20000090

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121a:	e7fe      	b.n	800121a <Error_Handler+0x6>

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_MspInit+0x4c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_MspInit+0x4c>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_MspInit+0x4c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_MspInit+0x4c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_MspInit+0x4c>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_MspInit+0x4c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <NMI_Handler+0x4>

08001272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <MemManage_Handler+0x4>

0800127e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <UsageFault_Handler+0x4>

0800128a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b8:	f000 f894 	bl	80013e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <SystemInit+0x28>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ca:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <SystemInit+0x28>)
 80012cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <SystemInit+0x28>)
 80012d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012da:	609a      	str	r2, [r3, #8]
#endif
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001324 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012f2:	e003      	b.n	80012fc <LoopCopyDataInit>

080012f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012fa:	3104      	adds	r1, #4

080012fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012fc:	480b      	ldr	r0, [pc, #44]	; (800132c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001300:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001302:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001304:	d3f6      	bcc.n	80012f4 <CopyDataInit>
  ldr  r2, =_sbss
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001308:	e002      	b.n	8001310 <LoopFillZerobss>

0800130a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800130a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800130c:	f842 3b04 	str.w	r3, [r2], #4

08001310 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001312:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001314:	d3f9      	bcc.n	800130a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001316:	f7ff ffd3 	bl	80012c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131a:	f001 fee3 	bl	80030e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131e:	f7ff fe01 	bl	8000f24 <main>
  bx  lr    
 8001322:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001324:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001328:	08017888 	.word	0x08017888
  ldr  r0, =_sdata
 800132c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001330:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001334:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001338:	2000c0ac 	.word	0x2000c0ac

0800133c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC_IRQHandler>
	...

08001340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_Init+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <HAL_Init+0x40>)
 800134a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <HAL_Init+0x40>)
 8001356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_Init+0x40>)
 8001362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001368:	2003      	movs	r0, #3
 800136a:	f000 f92f 	bl	80015cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136e:	2000      	movs	r0, #0
 8001370:	f000 f808 	bl	8001384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001374:	f7ff ff52 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023c00 	.word	0x40023c00

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_InitTick+0x54>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x58>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139a:	fbb3 f3f1 	udiv	r3, r3, r1
 800139e:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f939 	bl	800161a <HAL_SYSTICK_Config>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00e      	b.n	80013d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d80a      	bhi.n	80013ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b8:	2200      	movs	r2, #0
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f000 f90f 	bl	80015e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_InitTick+0x5c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e000      	b.n	80013d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000008 	.word	0x20000008
 80013e0:	20000004 	.word	0x20000004

080013e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x20>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x24>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <HAL_IncTick+0x24>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008
 8001408:	2000c0a8 	.word	0x2000c0a8

0800140c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <HAL_GetTick+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	2000c0a8 	.word	0x2000c0a8

08001424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800142c:	f7ff ffee 	bl	800140c <HAL_GetTick>
 8001430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143c:	d005      	beq.n	800144a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_Delay+0x40>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800144a:	bf00      	nop
 800144c:	f7ff ffde 	bl	800140c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	429a      	cmp	r2, r3
 800145a:	d8f7      	bhi.n	800144c <HAL_Delay+0x28>
  {
  }
}
 800145c:	bf00      	nop
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000008 	.word	0x20000008

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	db0a      	blt.n	80014f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	490c      	ldr	r1, [pc, #48]	; (8001518 <__NVIC_SetPriority+0x4c>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f4:	e00a      	b.n	800150c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4908      	ldr	r1, [pc, #32]	; (800151c <__NVIC_SetPriority+0x50>)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	3b04      	subs	r3, #4
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	440b      	add	r3, r1
 800150a:	761a      	strb	r2, [r3, #24]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000e100 	.word	0xe000e100
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f1c3 0307 	rsb	r3, r3, #7
 800153a:	2b04      	cmp	r3, #4
 800153c:	bf28      	it	cs
 800153e:	2304      	movcs	r3, #4
 8001540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3304      	adds	r3, #4
 8001546:	2b06      	cmp	r3, #6
 8001548:	d902      	bls.n	8001550 <NVIC_EncodePriority+0x30>
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3b03      	subs	r3, #3
 800154e:	e000      	b.n	8001552 <NVIC_EncodePriority+0x32>
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43d9      	mvns	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	4313      	orrs	r3, r2
         );
}
 800157a:	4618      	mov	r0, r3
 800157c:	3724      	adds	r7, #36	; 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001598:	d301      	bcc.n	800159e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159a:	2301      	movs	r3, #1
 800159c:	e00f      	b.n	80015be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <SysTick_Config+0x40>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a6:	210f      	movs	r1, #15
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f7ff ff8e 	bl	80014cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <SysTick_Config+0x40>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <SysTick_Config+0x40>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	e000e010 	.word	0xe000e010

080015cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff47 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f4:	f7ff ff5c 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 80015f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f7ff ff8e 	bl	8001520 <NVIC_EncodePriority>
 8001604:	4602      	mov	r2, r0
 8001606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff5d 	bl	80014cc <__NVIC_SetPriority>
}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ffb0 	bl	8001588 <SysTick_Config>
 8001628:	4603      	mov	r3, r0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e25b      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d075      	beq.n	800173e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001652:	4ba3      	ldr	r3, [pc, #652]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b04      	cmp	r3, #4
 800165c:	d00c      	beq.n	8001678 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165e:	4ba0      	ldr	r3, [pc, #640]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001666:	2b08      	cmp	r3, #8
 8001668:	d112      	bne.n	8001690 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800166a:	4b9d      	ldr	r3, [pc, #628]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001676:	d10b      	bne.n	8001690 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001678:	4b99      	ldr	r3, [pc, #612]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d05b      	beq.n	800173c <HAL_RCC_OscConfig+0x108>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d157      	bne.n	800173c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e236      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001698:	d106      	bne.n	80016a8 <HAL_RCC_OscConfig+0x74>
 800169a:	4b91      	ldr	r3, [pc, #580]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a90      	ldr	r2, [pc, #576]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e01d      	b.n	80016e4 <HAL_RCC_OscConfig+0xb0>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x98>
 80016b2:	4b8b      	ldr	r3, [pc, #556]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a8a      	ldr	r2, [pc, #552]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a87      	ldr	r2, [pc, #540]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0xb0>
 80016cc:	4b84      	ldr	r3, [pc, #528]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a83      	ldr	r2, [pc, #524]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b81      	ldr	r3, [pc, #516]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a80      	ldr	r2, [pc, #512]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d013      	beq.n	8001714 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fe8e 	bl	800140c <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fe8a 	bl	800140c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	; 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e1fb      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	4b76      	ldr	r3, [pc, #472]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0xc0>
 8001712:	e014      	b.n	800173e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fe7a 	bl	800140c <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fe76 	bl	800140c <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	; 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e1e7      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172e:	4b6c      	ldr	r3, [pc, #432]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0xe8>
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d063      	beq.n	8001812 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800174a:	4b65      	ldr	r3, [pc, #404]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00b      	beq.n	800176e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001756:	4b62      	ldr	r3, [pc, #392]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800175e:	2b08      	cmp	r3, #8
 8001760:	d11c      	bne.n	800179c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001762:	4b5f      	ldr	r3, [pc, #380]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d116      	bne.n	800179c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176e:	4b5c      	ldr	r3, [pc, #368]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <HAL_RCC_OscConfig+0x152>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d001      	beq.n	8001786 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e1bb      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001786:	4b56      	ldr	r3, [pc, #344]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4952      	ldr	r1, [pc, #328]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179a:	e03a      	b.n	8001812 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a4:	4b4f      	ldr	r3, [pc, #316]	; (80018e4 <HAL_RCC_OscConfig+0x2b0>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017aa:	f7ff fe2f 	bl	800140c <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b2:	f7ff fe2b 	bl	800140c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e19c      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c4:	4b46      	ldr	r3, [pc, #280]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d0:	4b43      	ldr	r3, [pc, #268]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4940      	ldr	r1, [pc, #256]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
 80017e4:	e015      	b.n	8001812 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e6:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_RCC_OscConfig+0x2b0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff fe0e 	bl	800140c <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f4:	f7ff fe0a 	bl	800140c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e17b      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001806:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d030      	beq.n	8001880 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d016      	beq.n	8001854 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001826:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 8001828:	2201      	movs	r2, #1
 800182a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182c:	f7ff fdee 	bl	800140c <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001834:	f7ff fdea 	bl	800140c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e15b      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001846:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x200>
 8001852:	e015      	b.n	8001880 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001854:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185a:	f7ff fdd7 	bl	800140c <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001862:	f7ff fdd3 	bl	800140c <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e144      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80a0 	beq.w	80019ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ba:	2301      	movs	r3, #1
 80018bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_RCC_OscConfig+0x2b8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d121      	bne.n	800190e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <HAL_RCC_OscConfig+0x2b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a07      	ldr	r2, [pc, #28]	; (80018ec <HAL_RCC_OscConfig+0x2b8>)
 80018d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d6:	f7ff fd99 	bl	800140c <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	e011      	b.n	8001902 <HAL_RCC_OscConfig+0x2ce>
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	42470000 	.word	0x42470000
 80018e8:	42470e80 	.word	0x42470e80
 80018ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f0:	f7ff fd8c 	bl	800140c <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e0fd      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001902:	4b81      	ldr	r3, [pc, #516]	; (8001b08 <HAL_RCC_OscConfig+0x4d4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d106      	bne.n	8001924 <HAL_RCC_OscConfig+0x2f0>
 8001916:	4b7d      	ldr	r3, [pc, #500]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191a:	4a7c      	ldr	r2, [pc, #496]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6713      	str	r3, [r2, #112]	; 0x70
 8001922:	e01c      	b.n	800195e <HAL_RCC_OscConfig+0x32a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b05      	cmp	r3, #5
 800192a:	d10c      	bne.n	8001946 <HAL_RCC_OscConfig+0x312>
 800192c:	4b77      	ldr	r3, [pc, #476]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001930:	4a76      	ldr	r2, [pc, #472]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	6713      	str	r3, [r2, #112]	; 0x70
 8001938:	4b74      	ldr	r3, [pc, #464]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193c:	4a73      	ldr	r2, [pc, #460]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6713      	str	r3, [r2, #112]	; 0x70
 8001944:	e00b      	b.n	800195e <HAL_RCC_OscConfig+0x32a>
 8001946:	4b71      	ldr	r3, [pc, #452]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194a:	4a70      	ldr	r2, [pc, #448]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	6713      	str	r3, [r2, #112]	; 0x70
 8001952:	4b6e      	ldr	r3, [pc, #440]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	4a6d      	ldr	r2, [pc, #436]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d015      	beq.n	8001992 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001966:	f7ff fd51 	bl	800140c <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196c:	e00a      	b.n	8001984 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f7ff fd4d 	bl	800140c <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f241 3288 	movw	r2, #5000	; 0x1388
 800197c:	4293      	cmp	r3, r2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e0bc      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001984:	4b61      	ldr	r3, [pc, #388]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0ee      	beq.n	800196e <HAL_RCC_OscConfig+0x33a>
 8001990:	e014      	b.n	80019bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001992:	f7ff fd3b 	bl	800140c <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001998:	e00a      	b.n	80019b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800199a:	f7ff fd37 	bl	800140c <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e0a6      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b0:	4b56      	ldr	r3, [pc, #344]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1ee      	bne.n	800199a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d105      	bne.n	80019ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c2:	4b52      	ldr	r3, [pc, #328]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a51      	ldr	r2, [pc, #324]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 80019c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 8092 	beq.w	8001afc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019d8:	4b4c      	ldr	r3, [pc, #304]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d05c      	beq.n	8001a9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d141      	bne.n	8001a70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ec:	4b48      	ldr	r3, [pc, #288]	; (8001b10 <HAL_RCC_OscConfig+0x4dc>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff fd0b 	bl	800140c <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fa:	f7ff fd07 	bl	800140c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e078      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0c:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69da      	ldr	r2, [r3, #28]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	019b      	lsls	r3, r3, #6
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	085b      	lsrs	r3, r3, #1
 8001a30:	3b01      	subs	r3, #1
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3a:	061b      	lsls	r3, r3, #24
 8001a3c:	4933      	ldr	r1, [pc, #204]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a42:	4b33      	ldr	r3, [pc, #204]	; (8001b10 <HAL_RCC_OscConfig+0x4dc>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fce0 	bl	800140c <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a50:	f7ff fcdc 	bl	800140c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e04d      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a62:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x41c>
 8001a6e:	e045      	b.n	8001afc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_RCC_OscConfig+0x4dc>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff fcc9 	bl	800140c <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff fcc5 	bl	800140c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e036      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x44a>
 8001a9c:	e02e      	b.n	8001afc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e029      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d11c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d115      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d10d      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d106      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40007000 	.word	0x40007000
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	42470060 	.word	0x42470060

08001b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0cc      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b28:	4b68      	ldr	r3, [pc, #416]	; (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d90c      	bls.n	8001b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b65      	ldr	r3, [pc, #404]	; (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b63      	ldr	r3, [pc, #396]	; (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0b8      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d020      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b68:	4b59      	ldr	r3, [pc, #356]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4a58      	ldr	r2, [pc, #352]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b80:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	4a52      	ldr	r2, [pc, #328]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b8c:	4b50      	ldr	r3, [pc, #320]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	494d      	ldr	r1, [pc, #308]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d044      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d119      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e07f      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d003      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd2:	4b3f      	ldr	r3, [pc, #252]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d109      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e06f      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be2:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e067      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf2:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f023 0203 	bic.w	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4934      	ldr	r1, [pc, #208]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c04:	f7ff fc02 	bl	800140c <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0c:	f7ff fbfe 	bl	800140c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e04f      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 020c 	and.w	r2, r3, #12
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d1eb      	bne.n	8001c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c34:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d20c      	bcs.n	8001c5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e032      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4916      	ldr	r1, [pc, #88]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d009      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	490e      	ldr	r1, [pc, #56]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c9a:	f000 f821 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001cac:	5cd3      	ldrb	r3, [r2, r3]
 8001cae:	fa21 f303 	lsr.w	r3, r1, r3
 8001cb2:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_RCC_ClockConfig+0x1c8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fb62 	bl	8001384 <HAL_InitTick>

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023c00 	.word	0x40023c00
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	08004230 	.word	0x08004230
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	20000004 	.word	0x20000004

08001ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cf6:	4b63      	ldr	r3, [pc, #396]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d007      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0x32>
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d008      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x38>
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f040 80b4 	bne.w	8001e74 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d0c:	4b5e      	ldr	r3, [pc, #376]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d0e:	60bb      	str	r3, [r7, #8]
       break;
 8001d10:	e0b3      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d12:	4b5e      	ldr	r3, [pc, #376]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001d14:	60bb      	str	r3, [r7, #8]
      break;
 8001d16:	e0b0      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d18:	4b5a      	ldr	r3, [pc, #360]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d22:	4b58      	ldr	r3, [pc, #352]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d04a      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d2e:	4b55      	ldr	r3, [pc, #340]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	099b      	lsrs	r3, r3, #6
 8001d34:	f04f 0400 	mov.w	r4, #0
 8001d38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	ea03 0501 	and.w	r5, r3, r1
 8001d44:	ea04 0602 	and.w	r6, r4, r2
 8001d48:	4629      	mov	r1, r5
 8001d4a:	4632      	mov	r2, r6
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	f04f 0400 	mov.w	r4, #0
 8001d54:	0154      	lsls	r4, r2, #5
 8001d56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d5a:	014b      	lsls	r3, r1, #5
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4622      	mov	r2, r4
 8001d60:	1b49      	subs	r1, r1, r5
 8001d62:	eb62 0206 	sbc.w	r2, r2, r6
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	f04f 0400 	mov.w	r4, #0
 8001d6e:	0194      	lsls	r4, r2, #6
 8001d70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d74:	018b      	lsls	r3, r1, #6
 8001d76:	1a5b      	subs	r3, r3, r1
 8001d78:	eb64 0402 	sbc.w	r4, r4, r2
 8001d7c:	f04f 0100 	mov.w	r1, #0
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	00e2      	lsls	r2, r4, #3
 8001d86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d8a:	00d9      	lsls	r1, r3, #3
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4614      	mov	r4, r2
 8001d90:	195b      	adds	r3, r3, r5
 8001d92:	eb44 0406 	adc.w	r4, r4, r6
 8001d96:	f04f 0100 	mov.w	r1, #0
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	0262      	lsls	r2, r4, #9
 8001da0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001da4:	0259      	lsls	r1, r3, #9
 8001da6:	460b      	mov	r3, r1
 8001da8:	4614      	mov	r4, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	4621      	mov	r1, r4
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f04f 0400 	mov.w	r4, #0
 8001db4:	461a      	mov	r2, r3
 8001db6:	4623      	mov	r3, r4
 8001db8:	f7fe ff34 	bl	8000c24 <__aeabi_uldivmod>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	460c      	mov	r4, r1
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	e049      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc4:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	099b      	lsrs	r3, r3, #6
 8001dca:	f04f 0400 	mov.w	r4, #0
 8001dce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	ea03 0501 	and.w	r5, r3, r1
 8001dda:	ea04 0602 	and.w	r6, r4, r2
 8001dde:	4629      	mov	r1, r5
 8001de0:	4632      	mov	r2, r6
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	f04f 0400 	mov.w	r4, #0
 8001dea:	0154      	lsls	r4, r2, #5
 8001dec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001df0:	014b      	lsls	r3, r1, #5
 8001df2:	4619      	mov	r1, r3
 8001df4:	4622      	mov	r2, r4
 8001df6:	1b49      	subs	r1, r1, r5
 8001df8:	eb62 0206 	sbc.w	r2, r2, r6
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	f04f 0400 	mov.w	r4, #0
 8001e04:	0194      	lsls	r4, r2, #6
 8001e06:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e0a:	018b      	lsls	r3, r1, #6
 8001e0c:	1a5b      	subs	r3, r3, r1
 8001e0e:	eb64 0402 	sbc.w	r4, r4, r2
 8001e12:	f04f 0100 	mov.w	r1, #0
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	00e2      	lsls	r2, r4, #3
 8001e1c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e20:	00d9      	lsls	r1, r3, #3
 8001e22:	460b      	mov	r3, r1
 8001e24:	4614      	mov	r4, r2
 8001e26:	195b      	adds	r3, r3, r5
 8001e28:	eb44 0406 	adc.w	r4, r4, r6
 8001e2c:	f04f 0100 	mov.w	r1, #0
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	02a2      	lsls	r2, r4, #10
 8001e36:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e3a:	0299      	lsls	r1, r3, #10
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4614      	mov	r4, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	4621      	mov	r1, r4
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f04f 0400 	mov.w	r4, #0
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4623      	mov	r3, r4
 8001e4e:	f7fe fee9 	bl	8000c24 <__aeabi_uldivmod>
 8001e52:	4603      	mov	r3, r0
 8001e54:	460c      	mov	r4, r1
 8001e56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	0c1b      	lsrs	r3, r3, #16
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	3301      	adds	r3, #1
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e70:	60bb      	str	r3, [r7, #8]
      break;
 8001e72:	e002      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e76:	60bb      	str	r3, [r7, #8]
      break;
 8001e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	00f42400 	.word	0x00f42400
 8001e8c:	007a1200 	.word	0x007a1200

08001e90 <arm_max_f32>:
 8001e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e94:	1e4f      	subs	r7, r1, #1
 8001e96:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8001e9a:	f100 0e04 	add.w	lr, r0, #4
 8001e9e:	edd0 7a00 	vldr	s15, [r0]
 8001ea2:	d058      	beq.n	8001f56 <arm_max_f32+0xc6>
 8001ea4:	3014      	adds	r0, #20
 8001ea6:	46c4      	mov	ip, r8
 8001ea8:	2604      	movs	r6, #4
 8001eaa:	2400      	movs	r4, #0
 8001eac:	ed10 6a04 	vldr	s12, [r0, #-16]
 8001eb0:	ed50 6a03 	vldr	s13, [r0, #-12]
 8001eb4:	ed10 7a02 	vldr	s14, [r0, #-8]
 8001eb8:	ed50 5a01 	vldr	s11, [r0, #-4]
 8001ebc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec4:	bfc8      	it	gt
 8001ec6:	eef0 7a46 	vmovgt.f32	s15, s12
 8001eca:	f1a6 0503 	sub.w	r5, r6, #3
 8001ece:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001ed2:	bfc8      	it	gt
 8001ed4:	462c      	movgt	r4, r5
 8001ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eda:	bf48      	it	mi
 8001edc:	eef0 7a66 	vmovmi.f32	s15, s13
 8001ee0:	f1a6 0502 	sub.w	r5, r6, #2
 8001ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee8:	bf48      	it	mi
 8001eea:	462c      	movmi	r4, r5
 8001eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef0:	bf48      	it	mi
 8001ef2:	eef0 7a47 	vmovmi.f32	s15, s14
 8001ef6:	f106 35ff 	add.w	r5, r6, #4294967295
 8001efa:	eef4 7ae5 	vcmpe.f32	s15, s11
 8001efe:	bf48      	it	mi
 8001f00:	462c      	movmi	r4, r5
 8001f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f06:	bf48      	it	mi
 8001f08:	4634      	movmi	r4, r6
 8001f0a:	bf48      	it	mi
 8001f0c:	eef0 7a65 	vmovmi.f32	s15, s11
 8001f10:	f1bc 0c01 	subs.w	ip, ip, #1
 8001f14:	f106 0604 	add.w	r6, r6, #4
 8001f18:	f100 0010 	add.w	r0, r0, #16
 8001f1c:	d1c6      	bne.n	8001eac <arm_max_f32+0x1c>
 8001f1e:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8001f22:	f017 0003 	ands.w	r0, r7, #3
 8001f26:	d018      	beq.n	8001f5a <arm_max_f32+0xca>
 8001f28:	1a08      	subs	r0, r1, r0
 8001f2a:	ecbe 7a01 	vldmia	lr!, {s14}
 8001f2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f36:	bfc8      	it	gt
 8001f38:	4604      	movgt	r4, r0
 8001f3a:	f100 0001 	add.w	r0, r0, #1
 8001f3e:	bfd8      	it	le
 8001f40:	eeb0 7a67 	vmovle.f32	s14, s15
 8001f44:	4288      	cmp	r0, r1
 8001f46:	eef0 7a47 	vmov.f32	s15, s14
 8001f4a:	d1ee      	bne.n	8001f2a <arm_max_f32+0x9a>
 8001f4c:	ed82 7a00 	vstr	s14, [r2]
 8001f50:	601c      	str	r4, [r3, #0]
 8001f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f56:	4644      	mov	r4, r8
 8001f58:	e7e3      	b.n	8001f22 <arm_max_f32+0x92>
 8001f5a:	eeb0 7a67 	vmov.f32	s14, s15
 8001f5e:	e7f5      	b.n	8001f4c <arm_max_f32+0xbc>

08001f60 <arm_rfft_fast_init_f32>:
 8001f60:	084b      	lsrs	r3, r1, #1
 8001f62:	2b80      	cmp	r3, #128	; 0x80
 8001f64:	b410      	push	{r4}
 8001f66:	8201      	strh	r1, [r0, #16]
 8001f68:	8003      	strh	r3, [r0, #0]
 8001f6a:	d047      	beq.n	8001ffc <arm_rfft_fast_init_f32+0x9c>
 8001f6c:	d917      	bls.n	8001f9e <arm_rfft_fast_init_f32+0x3e>
 8001f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f72:	d03d      	beq.n	8001ff0 <arm_rfft_fast_init_f32+0x90>
 8001f74:	d929      	bls.n	8001fca <arm_rfft_fast_init_f32+0x6a>
 8001f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7a:	d020      	beq.n	8001fbe <arm_rfft_fast_init_f32+0x5e>
 8001f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f80:	d113      	bne.n	8001faa <arm_rfft_fast_init_f32+0x4a>
 8001f82:	4921      	ldr	r1, [pc, #132]	; (8002008 <arm_rfft_fast_init_f32+0xa8>)
 8001f84:	4a21      	ldr	r2, [pc, #132]	; (800200c <arm_rfft_fast_init_f32+0xac>)
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <arm_rfft_fast_init_f32+0xb0>)
 8001f88:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8001f8c:	8184      	strh	r4, [r0, #12]
 8001f8e:	6081      	str	r1, [r0, #8]
 8001f90:	6042      	str	r2, [r0, #4]
 8001f92:	6143      	str	r3, [r0, #20]
 8001f94:	2000      	movs	r0, #0
 8001f96:	b240      	sxtb	r0, r0
 8001f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d01c      	beq.n	8001fdc <arm_rfft_fast_init_f32+0x7c>
 8001fa2:	2b40      	cmp	r3, #64	; 0x40
 8001fa4:	d006      	beq.n	8001fb4 <arm_rfft_fast_init_f32+0x54>
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d01d      	beq.n	8001fe6 <arm_rfft_fast_init_f32+0x86>
 8001faa:	20ff      	movs	r0, #255	; 0xff
 8001fac:	b240      	sxtb	r0, r0
 8001fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	2438      	movs	r4, #56	; 0x38
 8001fb6:	4917      	ldr	r1, [pc, #92]	; (8002014 <arm_rfft_fast_init_f32+0xb4>)
 8001fb8:	4a17      	ldr	r2, [pc, #92]	; (8002018 <arm_rfft_fast_init_f32+0xb8>)
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <arm_rfft_fast_init_f32+0xbc>)
 8001fbc:	e7e6      	b.n	8001f8c <arm_rfft_fast_init_f32+0x2c>
 8001fbe:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8001fc2:	4917      	ldr	r1, [pc, #92]	; (8002020 <arm_rfft_fast_init_f32+0xc0>)
 8001fc4:	4a17      	ldr	r2, [pc, #92]	; (8002024 <arm_rfft_fast_init_f32+0xc4>)
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <arm_rfft_fast_init_f32+0xc8>)
 8001fc8:	e7e0      	b.n	8001f8c <arm_rfft_fast_init_f32+0x2c>
 8001fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fce:	d1ec      	bne.n	8001faa <arm_rfft_fast_init_f32+0x4a>
 8001fd0:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8001fd4:	4915      	ldr	r1, [pc, #84]	; (800202c <arm_rfft_fast_init_f32+0xcc>)
 8001fd6:	4a16      	ldr	r2, [pc, #88]	; (8002030 <arm_rfft_fast_init_f32+0xd0>)
 8001fd8:	4b16      	ldr	r3, [pc, #88]	; (8002034 <arm_rfft_fast_init_f32+0xd4>)
 8001fda:	e7d7      	b.n	8001f8c <arm_rfft_fast_init_f32+0x2c>
 8001fdc:	2430      	movs	r4, #48	; 0x30
 8001fde:	4916      	ldr	r1, [pc, #88]	; (8002038 <arm_rfft_fast_init_f32+0xd8>)
 8001fe0:	4a16      	ldr	r2, [pc, #88]	; (800203c <arm_rfft_fast_init_f32+0xdc>)
 8001fe2:	4b17      	ldr	r3, [pc, #92]	; (8002040 <arm_rfft_fast_init_f32+0xe0>)
 8001fe4:	e7d2      	b.n	8001f8c <arm_rfft_fast_init_f32+0x2c>
 8001fe6:	2414      	movs	r4, #20
 8001fe8:	4916      	ldr	r1, [pc, #88]	; (8002044 <arm_rfft_fast_init_f32+0xe4>)
 8001fea:	4a17      	ldr	r2, [pc, #92]	; (8002048 <arm_rfft_fast_init_f32+0xe8>)
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <arm_rfft_fast_init_f32+0xec>)
 8001fee:	e7cd      	b.n	8001f8c <arm_rfft_fast_init_f32+0x2c>
 8001ff0:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8001ff4:	4916      	ldr	r1, [pc, #88]	; (8002050 <arm_rfft_fast_init_f32+0xf0>)
 8001ff6:	4a17      	ldr	r2, [pc, #92]	; (8002054 <arm_rfft_fast_init_f32+0xf4>)
 8001ff8:	4b17      	ldr	r3, [pc, #92]	; (8002058 <arm_rfft_fast_init_f32+0xf8>)
 8001ffa:	e7c7      	b.n	8001f8c <arm_rfft_fast_init_f32+0x2c>
 8001ffc:	24d0      	movs	r4, #208	; 0xd0
 8001ffe:	4917      	ldr	r1, [pc, #92]	; (800205c <arm_rfft_fast_init_f32+0xfc>)
 8002000:	4a17      	ldr	r2, [pc, #92]	; (8002060 <arm_rfft_fast_init_f32+0x100>)
 8002002:	4b18      	ldr	r3, [pc, #96]	; (8002064 <arm_rfft_fast_init_f32+0x104>)
 8002004:	e7c2      	b.n	8001f8c <arm_rfft_fast_init_f32+0x2c>
 8002006:	bf00      	nop
 8002008:	08013048 	.word	0x08013048
 800200c:	08004240 	.word	0x08004240
 8002010:	0800a3b0 	.word	0x0800a3b0
 8002014:	08008340 	.word	0x08008340
 8002018:	08014e08 	.word	0x08014e08
 800201c:	080172f8 	.word	0x080172f8
 8002020:	08010d30 	.word	0x08010d30
 8002024:	0800ec30 	.word	0x0800ec30
 8002028:	080083b0 	.word	0x080083b0
 800202c:	08016f88 	.word	0x08016f88
 8002030:	0800e3b0 	.word	0x0800e3b0
 8002034:	08015008 	.word	0x08015008
 8002038:	08011be8 	.word	0x08011be8
 800203c:	08010c30 	.word	0x08010c30
 8002040:	08008240 	.word	0x08008240
 8002044:	08011b40 	.word	0x08011b40
 8002048:	0800ebb0 	.word	0x0800ebb0
 800204c:	08011b68 	.word	0x08011b68
 8002050:	08015808 	.word	0x08015808
 8002054:	08012048 	.word	0x08012048
 8002058:	08015b88 	.word	0x08015b88
 800205c:	080174f8 	.word	0x080174f8
 8002060:	08011c48 	.word	0x08011c48
 8002064:	08016b88 	.word	0x08016b88

08002068 <arm_rfft_fast_f32>:
 8002068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800206c:	8a06      	ldrh	r6, [r0, #16]
 800206e:	0876      	lsrs	r6, r6, #1
 8002070:	4607      	mov	r7, r0
 8002072:	4615      	mov	r5, r2
 8002074:	8006      	strh	r6, [r0, #0]
 8002076:	460c      	mov	r4, r1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d15c      	bne.n	8002136 <arm_rfft_fast_f32+0xce>
 800207c:	461a      	mov	r2, r3
 800207e:	2301      	movs	r3, #1
 8002080:	f000 fbe6 	bl	8002850 <arm_cfft_f32>
 8002084:	edd4 7a00 	vldr	s15, [r4]
 8002088:	ed94 7a01 	vldr	s14, [r4, #4]
 800208c:	883e      	ldrh	r6, [r7, #0]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	ee37 7a07 	vadd.f32	s14, s14, s14
 8002094:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002098:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800209c:	ee77 6a87 	vadd.f32	s13, s15, s14
 80020a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020a4:	3e01      	subs	r6, #1
 80020a6:	ee26 7aa3 	vmul.f32	s14, s13, s7
 80020aa:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80020ae:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80020b2:	ed85 7a00 	vstr	s14, [r5]
 80020b6:	edc5 7a01 	vstr	s15, [r5, #4]
 80020ba:	3010      	adds	r0, #16
 80020bc:	f105 0210 	add.w	r2, r5, #16
 80020c0:	3b08      	subs	r3, #8
 80020c2:	f104 0110 	add.w	r1, r4, #16
 80020c6:	ed51 4a02 	vldr	s9, [r1, #-8]
 80020ca:	ed93 5a02 	vldr	s10, [r3, #8]
 80020ce:	ed11 7a01 	vldr	s14, [r1, #-4]
 80020d2:	ed10 6a02 	vldr	s12, [r0, #-8]
 80020d6:	edd3 5a03 	vldr	s11, [r3, #12]
 80020da:	ed50 6a01 	vldr	s13, [r0, #-4]
 80020de:	ee75 7a64 	vsub.f32	s15, s10, s9
 80020e2:	ee35 4a87 	vadd.f32	s8, s11, s14
 80020e6:	ee35 5a24 	vadd.f32	s10, s10, s9
 80020ea:	ee77 5a65 	vsub.f32	s11, s14, s11
 80020ee:	ee66 4a27 	vmul.f32	s9, s12, s15
 80020f2:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80020f6:	ee34 5a85 	vadd.f32	s10, s9, s10
 80020fa:	ee26 6a04 	vmul.f32	s12, s12, s8
 80020fe:	ee66 6a84 	vmul.f32	s13, s13, s8
 8002102:	ee77 7a25 	vadd.f32	s15, s14, s11
 8002106:	ee76 6a85 	vadd.f32	s13, s13, s10
 800210a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800210e:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8002112:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8002116:	3e01      	subs	r6, #1
 8002118:	ed42 6a02 	vstr	s13, [r2, #-8]
 800211c:	ed42 7a01 	vstr	s15, [r2, #-4]
 8002120:	f1a3 0308 	sub.w	r3, r3, #8
 8002124:	f101 0108 	add.w	r1, r1, #8
 8002128:	f100 0008 	add.w	r0, r0, #8
 800212c:	f102 0208 	add.w	r2, r2, #8
 8002130:	d1c9      	bne.n	80020c6 <arm_rfft_fast_f32+0x5e>
 8002132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002136:	edd1 7a00 	vldr	s15, [r1]
 800213a:	edd1 6a01 	vldr	s13, [r1, #4]
 800213e:	6941      	ldr	r1, [r0, #20]
 8002140:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002144:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002148:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800214c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8002150:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8002154:	3e01      	subs	r6, #1
 8002156:	ed82 7a00 	vstr	s14, [r2]
 800215a:	edc2 7a01 	vstr	s15, [r2, #4]
 800215e:	00f0      	lsls	r0, r6, #3
 8002160:	b3ee      	cbz	r6, 80021de <arm_rfft_fast_f32+0x176>
 8002162:	3808      	subs	r0, #8
 8002164:	f101 0e10 	add.w	lr, r1, #16
 8002168:	4420      	add	r0, r4
 800216a:	f104 0110 	add.w	r1, r4, #16
 800216e:	f102 0c10 	add.w	ip, r2, #16
 8002172:	ed90 7a02 	vldr	s14, [r0, #8]
 8002176:	ed51 6a02 	vldr	s13, [r1, #-8]
 800217a:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800217e:	ed90 4a03 	vldr	s8, [r0, #12]
 8002182:	ed11 5a01 	vldr	s10, [r1, #-4]
 8002186:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800218a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800218e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8002192:	ee26 3a27 	vmul.f32	s6, s12, s15
 8002196:	ee77 6a26 	vadd.f32	s13, s14, s13
 800219a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800219e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80021a2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80021a6:	ee77 7a05 	vadd.f32	s15, s14, s10
 80021aa:	ee26 6a24 	vmul.f32	s12, s12, s9
 80021ae:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80021b2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80021b6:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80021ba:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80021be:	ee27 7a23 	vmul.f32	s14, s14, s7
 80021c2:	3e01      	subs	r6, #1
 80021c4:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80021c8:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80021cc:	f1a0 0008 	sub.w	r0, r0, #8
 80021d0:	f101 0108 	add.w	r1, r1, #8
 80021d4:	f10e 0e08 	add.w	lr, lr, #8
 80021d8:	f10c 0c08 	add.w	ip, ip, #8
 80021dc:	d1c9      	bne.n	8002172 <arm_rfft_fast_f32+0x10a>
 80021de:	4638      	mov	r0, r7
 80021e0:	4629      	mov	r1, r5
 80021e2:	461a      	mov	r2, r3
 80021e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021e8:	2301      	movs	r3, #1
 80021ea:	f000 bb31 	b.w	8002850 <arm_cfft_f32>
 80021ee:	bf00      	nop

080021f0 <arm_cfft_radix8by2_f32>:
 80021f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021f4:	ed2d 8b08 	vpush	{d8-d11}
 80021f8:	f8b0 e000 	ldrh.w	lr, [r0]
 80021fc:	6842      	ldr	r2, [r0, #4]
 80021fe:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8002202:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8002206:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800220a:	4607      	mov	r7, r0
 800220c:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8002210:	f000 80af 	beq.w	8002372 <arm_cfft_radix8by2_f32+0x182>
 8002214:	3310      	adds	r3, #16
 8002216:	18ce      	adds	r6, r1, r3
 8002218:	3210      	adds	r2, #16
 800221a:	4443      	add	r3, r8
 800221c:	f101 0510 	add.w	r5, r1, #16
 8002220:	f108 0410 	add.w	r4, r8, #16
 8002224:	ed54 1a04 	vldr	s3, [r4, #-16]
 8002228:	ed13 4a04 	vldr	s8, [r3, #-16]
 800222c:	ed53 3a03 	vldr	s7, [r3, #-12]
 8002230:	ed53 5a02 	vldr	s11, [r3, #-8]
 8002234:	ed13 5a01 	vldr	s10, [r3, #-4]
 8002238:	ed54 6a03 	vldr	s13, [r4, #-12]
 800223c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8002240:	ed16 2a04 	vldr	s4, [r6, #-16]
 8002244:	ed56 2a03 	vldr	s5, [r6, #-12]
 8002248:	ed15 6a03 	vldr	s12, [r5, #-12]
 800224c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8002250:	ed15 3a04 	vldr	s6, [r5, #-16]
 8002254:	ed54 7a01 	vldr	s15, [r4, #-4]
 8002258:	ed56 0a02 	vldr	s1, [r6, #-8]
 800225c:	ed16 1a01 	vldr	s2, [r6, #-4]
 8002260:	ed55 4a02 	vldr	s9, [r5, #-8]
 8002264:	ee73 ba21 	vadd.f32	s23, s6, s3
 8002268:	ee36 ba26 	vadd.f32	s22, s12, s13
 800226c:	ee37 aa27 	vadd.f32	s20, s14, s15
 8002270:	ee72 9a04 	vadd.f32	s19, s4, s8
 8002274:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8002278:	ee31 8a05 	vadd.f32	s16, s2, s10
 800227c:	ee74 aa80 	vadd.f32	s21, s9, s0
 8002280:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8002284:	ed45 ba04 	vstr	s23, [r5, #-16]
 8002288:	ed05 ba03 	vstr	s22, [r5, #-12]
 800228c:	ed45 aa02 	vstr	s21, [r5, #-8]
 8002290:	ed05 aa01 	vstr	s20, [r5, #-4]
 8002294:	ed06 8a01 	vstr	s16, [r6, #-4]
 8002298:	ed46 9a04 	vstr	s19, [r6, #-16]
 800229c:	ed06 9a03 	vstr	s18, [r6, #-12]
 80022a0:	ed46 8a02 	vstr	s17, [r6, #-8]
 80022a4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80022a8:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80022ac:	ed12 6a03 	vldr	s12, [r2, #-12]
 80022b0:	ed52 2a04 	vldr	s5, [r2, #-16]
 80022b4:	ee33 3a61 	vsub.f32	s6, s6, s3
 80022b8:	ee34 4a42 	vsub.f32	s8, s8, s4
 80022bc:	ee26 8a86 	vmul.f32	s16, s13, s12
 80022c0:	ee24 2a06 	vmul.f32	s4, s8, s12
 80022c4:	ee63 1a22 	vmul.f32	s3, s6, s5
 80022c8:	ee24 4a22 	vmul.f32	s8, s8, s5
 80022cc:	ee23 3a06 	vmul.f32	s6, s6, s12
 80022d0:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80022d4:	ee23 6a86 	vmul.f32	s12, s7, s12
 80022d8:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80022dc:	ee36 6a04 	vadd.f32	s12, s12, s8
 80022e0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80022e4:	ee72 3a63 	vsub.f32	s7, s4, s7
 80022e8:	ee71 2a88 	vadd.f32	s5, s3, s16
 80022ec:	ed44 6a03 	vstr	s13, [r4, #-12]
 80022f0:	ed44 2a04 	vstr	s5, [r4, #-16]
 80022f4:	ed43 3a04 	vstr	s7, [r3, #-16]
 80022f8:	ed03 6a03 	vstr	s12, [r3, #-12]
 80022fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002300:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8002304:	ed12 7a01 	vldr	s14, [r2, #-4]
 8002308:	ed52 5a02 	vldr	s11, [r2, #-8]
 800230c:	ee35 6a41 	vsub.f32	s12, s10, s2
 8002310:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8002314:	ee67 3a87 	vmul.f32	s7, s15, s14
 8002318:	ee26 5a87 	vmul.f32	s10, s13, s14
 800231c:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8002320:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002324:	ee64 4a87 	vmul.f32	s9, s9, s14
 8002328:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800232c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8002330:	ee26 6a25 	vmul.f32	s12, s12, s11
 8002334:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8002338:	ee74 5a23 	vadd.f32	s11, s8, s7
 800233c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8002340:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002344:	f1be 0e01 	subs.w	lr, lr, #1
 8002348:	ed44 5a02 	vstr	s11, [r4, #-8]
 800234c:	f105 0510 	add.w	r5, r5, #16
 8002350:	ed44 7a01 	vstr	s15, [r4, #-4]
 8002354:	f106 0610 	add.w	r6, r6, #16
 8002358:	ed03 6a02 	vstr	s12, [r3, #-8]
 800235c:	ed03 7a01 	vstr	s14, [r3, #-4]
 8002360:	f102 0210 	add.w	r2, r2, #16
 8002364:	f104 0410 	add.w	r4, r4, #16
 8002368:	f103 0310 	add.w	r3, r3, #16
 800236c:	f47f af5a 	bne.w	8002224 <arm_cfft_radix8by2_f32+0x34>
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	fa1f f48c 	uxth.w	r4, ip
 8002376:	4608      	mov	r0, r1
 8002378:	2302      	movs	r3, #2
 800237a:	4621      	mov	r1, r4
 800237c:	f000 fbca 	bl	8002b14 <arm_radix8_butterfly_f32>
 8002380:	ecbd 8b08 	vpop	{d8-d11}
 8002384:	4640      	mov	r0, r8
 8002386:	4621      	mov	r1, r4
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	2302      	movs	r3, #2
 800238c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002390:	f000 bbc0 	b.w	8002b14 <arm_radix8_butterfly_f32>

08002394 <arm_cfft_radix8by4_f32>:
 8002394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002398:	ed2d 8b0a 	vpush	{d8-d12}
 800239c:	8802      	ldrh	r2, [r0, #0]
 800239e:	ed91 6a00 	vldr	s12, [r1]
 80023a2:	b08f      	sub	sp, #60	; 0x3c
 80023a4:	460f      	mov	r7, r1
 80023a6:	0852      	lsrs	r2, r2, #1
 80023a8:	0093      	lsls	r3, r2, #2
 80023aa:	900c      	str	r0, [sp, #48]	; 0x30
 80023ac:	9103      	str	r1, [sp, #12]
 80023ae:	6841      	ldr	r1, [r0, #4]
 80023b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80023b4:	4638      	mov	r0, r7
 80023b6:	4418      	add	r0, r3
 80023b8:	4606      	mov	r6, r0
 80023ba:	9009      	str	r0, [sp, #36]	; 0x24
 80023bc:	4418      	add	r0, r3
 80023be:	edd0 6a00 	vldr	s13, [r0]
 80023c2:	edd6 3a00 	vldr	s7, [r6]
 80023c6:	edd6 2a01 	vldr	s5, [r6, #4]
 80023ca:	edd0 7a01 	vldr	s15, [r0, #4]
 80023ce:	900a      	str	r0, [sp, #40]	; 0x28
 80023d0:	ee76 5a26 	vadd.f32	s11, s12, s13
 80023d4:	4604      	mov	r4, r0
 80023d6:	4625      	mov	r5, r4
 80023d8:	441c      	add	r4, r3
 80023da:	ed94 4a00 	vldr	s8, [r4]
 80023de:	ed94 5a01 	vldr	s10, [r4, #4]
 80023e2:	9401      	str	r4, [sp, #4]
 80023e4:	ee75 4aa3 	vadd.f32	s9, s11, s7
 80023e8:	4630      	mov	r0, r6
 80023ea:	ee74 4a24 	vadd.f32	s9, s8, s9
 80023ee:	463e      	mov	r6, r7
 80023f0:	ee14 ea90 	vmov	lr, s9
 80023f4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80023f8:	f846 eb08 	str.w	lr, [r6], #8
 80023fc:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002400:	edd0 4a01 	vldr	s9, [r0, #4]
 8002404:	9604      	str	r6, [sp, #16]
 8002406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800240a:	9e01      	ldr	r6, [sp, #4]
 800240c:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8002410:	ed96 2a01 	vldr	s4, [r6, #4]
 8002414:	ee36 7a24 	vadd.f32	s14, s12, s9
 8002418:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800241c:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8002420:	ee36 6a62 	vsub.f32	s12, s12, s5
 8002424:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8002428:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800242c:	ee73 3a45 	vsub.f32	s7, s6, s10
 8002430:	4604      	mov	r4, r0
 8002432:	ee36 6a45 	vsub.f32	s12, s12, s10
 8002436:	ee75 6a26 	vadd.f32	s13, s10, s13
 800243a:	46a3      	mov	fp, r4
 800243c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8002440:	ee34 5a84 	vadd.f32	s10, s9, s8
 8002444:	ee13 8a90 	vmov	r8, s7
 8002448:	46a4      	mov	ip, r4
 800244a:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800244e:	ed87 7a01 	vstr	s14, [r7, #4]
 8002452:	f84b 8b08 	str.w	r8, [fp], #8
 8002456:	f1ac 0704 	sub.w	r7, ip, #4
 800245a:	ed8c 5a01 	vstr	s10, [ip, #4]
 800245e:	f101 0c08 	add.w	ip, r1, #8
 8002462:	462c      	mov	r4, r5
 8002464:	f8cd c014 	str.w	ip, [sp, #20]
 8002468:	ee15 ca90 	vmov	ip, s11
 800246c:	f844 cb08 	str.w	ip, [r4], #8
 8002470:	9407      	str	r4, [sp, #28]
 8002472:	f101 0410 	add.w	r4, r1, #16
 8002476:	ed85 6a01 	vstr	s12, [r5, #4]
 800247a:	0852      	lsrs	r2, r2, #1
 800247c:	9402      	str	r4, [sp, #8]
 800247e:	462c      	mov	r4, r5
 8002480:	f101 0518 	add.w	r5, r1, #24
 8002484:	920b      	str	r2, [sp, #44]	; 0x2c
 8002486:	46b2      	mov	sl, r6
 8002488:	9506      	str	r5, [sp, #24]
 800248a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800248e:	3a02      	subs	r2, #2
 8002490:	ee16 5a90 	vmov	r5, s13
 8002494:	46b6      	mov	lr, r6
 8002496:	4630      	mov	r0, r6
 8002498:	0852      	lsrs	r2, r2, #1
 800249a:	f84a 5b08 	str.w	r5, [sl], #8
 800249e:	f1a0 0604 	sub.w	r6, r0, #4
 80024a2:	edce 7a01 	vstr	s15, [lr, #4]
 80024a6:	9208      	str	r2, [sp, #32]
 80024a8:	f000 8130 	beq.w	800270c <arm_cfft_radix8by4_f32+0x378>
 80024ac:	4691      	mov	r9, r2
 80024ae:	9a03      	ldr	r2, [sp, #12]
 80024b0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80024b4:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80024b8:	3b08      	subs	r3, #8
 80024ba:	f102 0510 	add.w	r5, r2, #16
 80024be:	f101 0c20 	add.w	ip, r1, #32
 80024c2:	f1a4 020c 	sub.w	r2, r4, #12
 80024c6:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80024ca:	4433      	add	r3, r6
 80024cc:	3410      	adds	r4, #16
 80024ce:	4650      	mov	r0, sl
 80024d0:	4659      	mov	r1, fp
 80024d2:	ed55 3a02 	vldr	s7, [r5, #-8]
 80024d6:	ed14 5a02 	vldr	s10, [r4, #-8]
 80024da:	ed91 7a00 	vldr	s14, [r1]
 80024de:	edd0 7a00 	vldr	s15, [r0]
 80024e2:	ed15 4a01 	vldr	s8, [r5, #-4]
 80024e6:	ed54 5a01 	vldr	s11, [r4, #-4]
 80024ea:	edd0 6a01 	vldr	s13, [r0, #4]
 80024ee:	ed91 6a01 	vldr	s12, [r1, #4]
 80024f2:	ee33 8a85 	vadd.f32	s16, s7, s10
 80024f6:	ee34 0a25 	vadd.f32	s0, s8, s11
 80024fa:	ee78 4a07 	vadd.f32	s9, s16, s14
 80024fe:	ee74 5a65 	vsub.f32	s11, s8, s11
 8002502:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8002506:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800250a:	ed45 4a02 	vstr	s9, [r5, #-8]
 800250e:	edd1 4a01 	vldr	s9, [r1, #4]
 8002512:	ed90 4a01 	vldr	s8, [r0, #4]
 8002516:	ee70 4a24 	vadd.f32	s9, s0, s9
 800251a:	ee76 aa05 	vadd.f32	s21, s12, s10
 800251e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8002522:	ee35 aac7 	vsub.f32	s20, s11, s14
 8002526:	ed45 4a01 	vstr	s9, [r5, #-4]
 800252a:	edd6 1a00 	vldr	s3, [r6]
 800252e:	edd7 0a00 	vldr	s1, [r7]
 8002532:	ed92 4a02 	vldr	s8, [r2, #8]
 8002536:	edd3 3a02 	vldr	s7, [r3, #8]
 800253a:	ed93 2a01 	vldr	s4, [r3, #4]
 800253e:	ed16 1a01 	vldr	s2, [r6, #-4]
 8002542:	edd2 2a01 	vldr	s5, [r2, #4]
 8002546:	ed57 9a01 	vldr	s19, [r7, #-4]
 800254a:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800254e:	ee39 3a81 	vadd.f32	s6, s19, s2
 8002552:	ee74 8a84 	vadd.f32	s17, s9, s8
 8002556:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800255a:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800255e:	ee7a aae6 	vsub.f32	s21, s21, s13
 8002562:	ee18 aa90 	vmov	sl, s17
 8002566:	f847 a908 	str.w	sl, [r7], #-8
 800256a:	edd2 8a01 	vldr	s17, [r2, #4]
 800256e:	ed93 9a01 	vldr	s18, [r3, #4]
 8002572:	ee73 8a28 	vadd.f32	s17, s6, s17
 8002576:	ee3a aa27 	vadd.f32	s20, s20, s15
 800257a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800257e:	ee74 0a63 	vsub.f32	s1, s8, s7
 8002582:	edc7 8a01 	vstr	s17, [r7, #4]
 8002586:	ed18 ba02 	vldr	s22, [r8, #-8]
 800258a:	ed58 8a01 	vldr	s17, [r8, #-4]
 800258e:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8002592:	ee6a ba28 	vmul.f32	s23, s20, s17
 8002596:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800259a:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800259e:	ee30 9a81 	vadd.f32	s18, s1, s2
 80025a2:	ee79 9a82 	vadd.f32	s19, s19, s4
 80025a6:	ee3c ca2b 	vadd.f32	s24, s24, s23
 80025aa:	ee6a aaa8 	vmul.f32	s21, s21, s17
 80025ae:	ee69 baa8 	vmul.f32	s23, s19, s17
 80025b2:	ee2a aa0b 	vmul.f32	s20, s20, s22
 80025b6:	ee69 9a8b 	vmul.f32	s19, s19, s22
 80025ba:	ee69 8a28 	vmul.f32	s17, s18, s17
 80025be:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80025c2:	ee1c aa10 	vmov	sl, s24
 80025c6:	ee78 8aa9 	vadd.f32	s17, s17, s19
 80025ca:	f841 ab08 	str.w	sl, [r1], #8
 80025ce:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80025d2:	ee3b bacb 	vsub.f32	s22, s23, s22
 80025d6:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80025da:	ee33 3a62 	vsub.f32	s6, s6, s5
 80025de:	ed01 aa01 	vstr	s20, [r1, #-4]
 80025e2:	edc2 8a01 	vstr	s17, [r2, #4]
 80025e6:	ed82 ba02 	vstr	s22, [r2, #8]
 80025ea:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80025ee:	ee74 3a63 	vsub.f32	s7, s8, s7
 80025f2:	ee38 8a47 	vsub.f32	s16, s16, s14
 80025f6:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80025fa:	ee30 0a46 	vsub.f32	s0, s0, s12
 80025fe:	ee33 3a42 	vsub.f32	s6, s6, s4
 8002602:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002606:	ee30 0a66 	vsub.f32	s0, s0, s13
 800260a:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800260e:	ee63 8a04 	vmul.f32	s17, s6, s8
 8002612:	ee28 aa24 	vmul.f32	s20, s16, s9
 8002616:	ee60 9a04 	vmul.f32	s19, s0, s8
 800261a:	ee28 8a04 	vmul.f32	s16, s16, s8
 800261e:	ee20 0a24 	vmul.f32	s0, s0, s9
 8002622:	ee63 3a84 	vmul.f32	s7, s7, s8
 8002626:	ee39 4a68 	vsub.f32	s8, s18, s17
 800262a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800262e:	ee14 aa10 	vmov	sl, s8
 8002632:	ee30 0a48 	vsub.f32	s0, s0, s16
 8002636:	ee63 4a24 	vmul.f32	s9, s6, s9
 800263a:	ed44 9a02 	vstr	s19, [r4, #-8]
 800263e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8002642:	ed04 0a01 	vstr	s0, [r4, #-4]
 8002646:	f846 a908 	str.w	sl, [r6], #-8
 800264a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800264e:	ee35 7a87 	vadd.f32	s14, s11, s14
 8002652:	edc6 3a01 	vstr	s7, [r6, #4]
 8002656:	ee76 6a86 	vadd.f32	s13, s13, s12
 800265a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800265e:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8002662:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8002666:	ee67 5a86 	vmul.f32	s11, s15, s12
 800266a:	ee26 5a87 	vmul.f32	s10, s13, s14
 800266e:	ee72 2a62 	vsub.f32	s5, s4, s5
 8002672:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8002676:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800267a:	ee75 5a25 	vadd.f32	s11, s10, s11
 800267e:	ee62 0a86 	vmul.f32	s1, s5, s12
 8002682:	ee66 6a86 	vmul.f32	s13, s13, s12
 8002686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800268a:	ee21 6a06 	vmul.f32	s12, s2, s12
 800268e:	ee62 2a87 	vmul.f32	s5, s5, s14
 8002692:	ee21 1a07 	vmul.f32	s2, s2, s14
 8002696:	ee15 aa90 	vmov	sl, s11
 800269a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800269e:	f840 ab08 	str.w	sl, [r0], #8
 80026a2:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80026a6:	ee76 2a22 	vadd.f32	s5, s12, s5
 80026aa:	f1b9 0901 	subs.w	r9, r9, #1
 80026ae:	ed40 7a01 	vstr	s15, [r0, #-4]
 80026b2:	f105 0508 	add.w	r5, r5, #8
 80026b6:	ed83 1a02 	vstr	s2, [r3, #8]
 80026ba:	edc3 2a01 	vstr	s5, [r3, #4]
 80026be:	f108 0808 	add.w	r8, r8, #8
 80026c2:	f1a2 0208 	sub.w	r2, r2, #8
 80026c6:	f10c 0c10 	add.w	ip, ip, #16
 80026ca:	f104 0408 	add.w	r4, r4, #8
 80026ce:	f10e 0e18 	add.w	lr, lr, #24
 80026d2:	f1a3 0308 	sub.w	r3, r3, #8
 80026d6:	f47f aefc 	bne.w	80024d2 <arm_cfft_radix8by4_f32+0x13e>
 80026da:	9908      	ldr	r1, [sp, #32]
 80026dc:	9802      	ldr	r0, [sp, #8]
 80026de:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80026e2:	00cb      	lsls	r3, r1, #3
 80026e4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80026e8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80026ec:	9102      	str	r1, [sp, #8]
 80026ee:	9904      	ldr	r1, [sp, #16]
 80026f0:	4419      	add	r1, r3
 80026f2:	9104      	str	r1, [sp, #16]
 80026f4:	9905      	ldr	r1, [sp, #20]
 80026f6:	4419      	add	r1, r3
 80026f8:	9105      	str	r1, [sp, #20]
 80026fa:	9907      	ldr	r1, [sp, #28]
 80026fc:	449b      	add	fp, r3
 80026fe:	4419      	add	r1, r3
 8002700:	449a      	add	sl, r3
 8002702:	9b06      	ldr	r3, [sp, #24]
 8002704:	9107      	str	r1, [sp, #28]
 8002706:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800270a:	9306      	str	r3, [sp, #24]
 800270c:	9a04      	ldr	r2, [sp, #16]
 800270e:	9807      	ldr	r0, [sp, #28]
 8002710:	edd2 3a00 	vldr	s7, [r2]
 8002714:	ed90 4a00 	vldr	s8, [r0]
 8002718:	eddb 7a00 	vldr	s15, [fp]
 800271c:	ed9a 3a00 	vldr	s6, [sl]
 8002720:	edd2 4a01 	vldr	s9, [r2, #4]
 8002724:	ed90 7a01 	vldr	s14, [r0, #4]
 8002728:	ed9b 2a01 	vldr	s4, [fp, #4]
 800272c:	edda 5a01 	vldr	s11, [sl, #4]
 8002730:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8002734:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002736:	ee73 6a84 	vadd.f32	s13, s7, s8
 800273a:	ee34 6a87 	vadd.f32	s12, s9, s14
 800273e:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8002742:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8002746:	ee33 5a05 	vadd.f32	s10, s6, s10
 800274a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800274e:	ed82 5a00 	vstr	s10, [r2]
 8002752:	ed9b 5a01 	vldr	s10, [fp, #4]
 8002756:	edda 4a01 	vldr	s9, [sl, #4]
 800275a:	ee36 5a05 	vadd.f32	s10, s12, s10
 800275e:	ee72 3a04 	vadd.f32	s7, s4, s8
 8002762:	ee35 5a24 	vadd.f32	s10, s10, s9
 8002766:	ee77 4a67 	vsub.f32	s9, s14, s15
 800276a:	ed82 5a01 	vstr	s10, [r2, #4]
 800276e:	9a05      	ldr	r2, [sp, #20]
 8002770:	ee34 5a83 	vadd.f32	s10, s9, s6
 8002774:	edd2 1a00 	vldr	s3, [r2]
 8002778:	edd2 2a01 	vldr	s5, [r2, #4]
 800277c:	9a02      	ldr	r2, [sp, #8]
 800277e:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8002782:	ee36 6a42 	vsub.f32	s12, s12, s4
 8002786:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800278a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800278e:	ee65 2a22 	vmul.f32	s5, s10, s5
 8002792:	ee25 5a21 	vmul.f32	s10, s10, s3
 8002796:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800279a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800279e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80027a2:	edcb 2a00 	vstr	s5, [fp]
 80027a6:	ed8b 5a01 	vstr	s10, [fp, #4]
 80027aa:	edd2 3a01 	vldr	s7, [r2, #4]
 80027ae:	ed92 5a00 	vldr	s10, [r2]
 80027b2:	9a06      	ldr	r2, [sp, #24]
 80027b4:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80027b8:	ee36 6a65 	vsub.f32	s12, s12, s11
 80027bc:	ee66 4a85 	vmul.f32	s9, s13, s10
 80027c0:	ee26 5a05 	vmul.f32	s10, s12, s10
 80027c4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80027c8:	ee26 6a23 	vmul.f32	s12, s12, s7
 80027cc:	ee75 6a66 	vsub.f32	s13, s10, s13
 80027d0:	ee34 6a86 	vadd.f32	s12, s9, s12
 80027d4:	ee34 4a42 	vsub.f32	s8, s8, s4
 80027d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027dc:	edc0 6a01 	vstr	s13, [r0, #4]
 80027e0:	ed80 6a00 	vstr	s12, [r0]
 80027e4:	ed92 6a01 	vldr	s12, [r2, #4]
 80027e8:	9803      	ldr	r0, [sp, #12]
 80027ea:	ee77 7a43 	vsub.f32	s15, s14, s6
 80027ee:	ee75 5a84 	vadd.f32	s11, s11, s8
 80027f2:	ed92 7a00 	vldr	s14, [r2]
 80027f6:	ee65 6a87 	vmul.f32	s13, s11, s14
 80027fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027fe:	ee65 5a86 	vmul.f32	s11, s11, s12
 8002802:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002806:	ee77 5a65 	vsub.f32	s11, s14, s11
 800280a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800280e:	edca 5a01 	vstr	s11, [sl, #4]
 8002812:	edca 7a00 	vstr	s15, [sl]
 8002816:	6872      	ldr	r2, [r6, #4]
 8002818:	4621      	mov	r1, r4
 800281a:	2304      	movs	r3, #4
 800281c:	f000 f97a 	bl	8002b14 <arm_radix8_butterfly_f32>
 8002820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002822:	6872      	ldr	r2, [r6, #4]
 8002824:	4621      	mov	r1, r4
 8002826:	2304      	movs	r3, #4
 8002828:	f000 f974 	bl	8002b14 <arm_radix8_butterfly_f32>
 800282c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800282e:	6872      	ldr	r2, [r6, #4]
 8002830:	4621      	mov	r1, r4
 8002832:	2304      	movs	r3, #4
 8002834:	f000 f96e 	bl	8002b14 <arm_radix8_butterfly_f32>
 8002838:	9801      	ldr	r0, [sp, #4]
 800283a:	6872      	ldr	r2, [r6, #4]
 800283c:	4621      	mov	r1, r4
 800283e:	2304      	movs	r3, #4
 8002840:	b00f      	add	sp, #60	; 0x3c
 8002842:	ecbd 8b0a 	vpop	{d8-d12}
 8002846:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800284a:	f000 b963 	b.w	8002b14 <arm_radix8_butterfly_f32>
 800284e:	bf00      	nop

08002850 <arm_cfft_f32>:
 8002850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002854:	2a01      	cmp	r2, #1
 8002856:	4606      	mov	r6, r0
 8002858:	4617      	mov	r7, r2
 800285a:	460c      	mov	r4, r1
 800285c:	4698      	mov	r8, r3
 800285e:	8805      	ldrh	r5, [r0, #0]
 8002860:	d054      	beq.n	800290c <arm_cfft_f32+0xbc>
 8002862:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002866:	d04c      	beq.n	8002902 <arm_cfft_f32+0xb2>
 8002868:	d916      	bls.n	8002898 <arm_cfft_f32+0x48>
 800286a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800286e:	d01a      	beq.n	80028a6 <arm_cfft_f32+0x56>
 8002870:	d95c      	bls.n	800292c <arm_cfft_f32+0xdc>
 8002872:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002876:	d044      	beq.n	8002902 <arm_cfft_f32+0xb2>
 8002878:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800287c:	d105      	bne.n	800288a <arm_cfft_f32+0x3a>
 800287e:	4620      	mov	r0, r4
 8002880:	4629      	mov	r1, r5
 8002882:	6872      	ldr	r2, [r6, #4]
 8002884:	2301      	movs	r3, #1
 8002886:	f000 f945 	bl	8002b14 <arm_radix8_butterfly_f32>
 800288a:	f1b8 0f00 	cmp.w	r8, #0
 800288e:	d111      	bne.n	80028b4 <arm_cfft_f32+0x64>
 8002890:	2f01      	cmp	r7, #1
 8002892:	d016      	beq.n	80028c2 <arm_cfft_f32+0x72>
 8002894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002898:	2d20      	cmp	r5, #32
 800289a:	d032      	beq.n	8002902 <arm_cfft_f32+0xb2>
 800289c:	d94a      	bls.n	8002934 <arm_cfft_f32+0xe4>
 800289e:	2d40      	cmp	r5, #64	; 0x40
 80028a0:	d0ed      	beq.n	800287e <arm_cfft_f32+0x2e>
 80028a2:	2d80      	cmp	r5, #128	; 0x80
 80028a4:	d1f1      	bne.n	800288a <arm_cfft_f32+0x3a>
 80028a6:	4630      	mov	r0, r6
 80028a8:	4621      	mov	r1, r4
 80028aa:	f7ff fca1 	bl	80021f0 <arm_cfft_radix8by2_f32>
 80028ae:	f1b8 0f00 	cmp.w	r8, #0
 80028b2:	d0ed      	beq.n	8002890 <arm_cfft_f32+0x40>
 80028b4:	4620      	mov	r0, r4
 80028b6:	89b1      	ldrh	r1, [r6, #12]
 80028b8:	68b2      	ldr	r2, [r6, #8]
 80028ba:	f7fd fc85 	bl	80001c8 <arm_bitreversal_32>
 80028be:	2f01      	cmp	r7, #1
 80028c0:	d1e8      	bne.n	8002894 <arm_cfft_f32+0x44>
 80028c2:	ee07 5a90 	vmov	s15, r5
 80028c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80028ce:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 80028d2:	2d00      	cmp	r5, #0
 80028d4:	d0de      	beq.n	8002894 <arm_cfft_f32+0x44>
 80028d6:	f104 0108 	add.w	r1, r4, #8
 80028da:	2300      	movs	r3, #0
 80028dc:	3301      	adds	r3, #1
 80028de:	429d      	cmp	r5, r3
 80028e0:	f101 0108 	add.w	r1, r1, #8
 80028e4:	ed11 7a04 	vldr	s14, [r1, #-16]
 80028e8:	ed51 7a03 	vldr	s15, [r1, #-12]
 80028ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 80028f0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80028f4:	ed01 7a04 	vstr	s14, [r1, #-16]
 80028f8:	ed41 7a03 	vstr	s15, [r1, #-12]
 80028fc:	d1ee      	bne.n	80028dc <arm_cfft_f32+0x8c>
 80028fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002902:	4630      	mov	r0, r6
 8002904:	4621      	mov	r1, r4
 8002906:	f7ff fd45 	bl	8002394 <arm_cfft_radix8by4_f32>
 800290a:	e7be      	b.n	800288a <arm_cfft_f32+0x3a>
 800290c:	b1ad      	cbz	r5, 800293a <arm_cfft_f32+0xea>
 800290e:	f101 030c 	add.w	r3, r1, #12
 8002912:	2200      	movs	r2, #0
 8002914:	ed53 7a02 	vldr	s15, [r3, #-8]
 8002918:	3201      	adds	r2, #1
 800291a:	eef1 7a67 	vneg.f32	s15, s15
 800291e:	4295      	cmp	r5, r2
 8002920:	ed43 7a02 	vstr	s15, [r3, #-8]
 8002924:	f103 0308 	add.w	r3, r3, #8
 8002928:	d1f4      	bne.n	8002914 <arm_cfft_f32+0xc4>
 800292a:	e79a      	b.n	8002862 <arm_cfft_f32+0x12>
 800292c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8002930:	d0a5      	beq.n	800287e <arm_cfft_f32+0x2e>
 8002932:	e7aa      	b.n	800288a <arm_cfft_f32+0x3a>
 8002934:	2d10      	cmp	r5, #16
 8002936:	d0b6      	beq.n	80028a6 <arm_cfft_f32+0x56>
 8002938:	e7a7      	b.n	800288a <arm_cfft_f32+0x3a>
 800293a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800293e:	d894      	bhi.n	800286a <arm_cfft_f32+0x1a>
 8002940:	e7aa      	b.n	8002898 <arm_cfft_f32+0x48>
 8002942:	bf00      	nop

08002944 <arm_cmplx_mag_f32>:
 8002944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002948:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800294c:	b084      	sub	sp, #16
 800294e:	d07f      	beq.n	8002a50 <arm_cmplx_mag_f32+0x10c>
 8002950:	2700      	movs	r7, #0
 8002952:	f100 0420 	add.w	r4, r0, #32
 8002956:	f101 0510 	add.w	r5, r1, #16
 800295a:	4646      	mov	r6, r8
 800295c:	e05a      	b.n	8002a14 <arm_cmplx_mag_f32+0xd0>
 800295e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8002962:	eeb4 0a40 	vcmp.f32	s0, s0
 8002966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296a:	f040 80a4 	bne.w	8002ab6 <arm_cmplx_mag_f32+0x172>
 800296e:	ed05 0a04 	vstr	s0, [r5, #-16]
 8002972:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8002976:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800297a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800297e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002982:	ee77 7a80 	vadd.f32	s15, s15, s0
 8002986:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800298a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298e:	f2c0 808f 	blt.w	8002ab0 <arm_cmplx_mag_f32+0x16c>
 8002992:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8002996:	eeb4 0a40 	vcmp.f32	s0, s0
 800299a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299e:	f040 80af 	bne.w	8002b00 <arm_cmplx_mag_f32+0x1bc>
 80029a2:	ed05 0a03 	vstr	s0, [r5, #-12]
 80029a6:	ed54 7a04 	vldr	s15, [r4, #-16]
 80029aa:	ed14 0a03 	vldr	s0, [r4, #-12]
 80029ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029b2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80029b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80029ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c2:	db72      	blt.n	8002aaa <arm_cmplx_mag_f32+0x166>
 80029c4:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80029c8:	eeb4 0a40 	vcmp.f32	s0, s0
 80029cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d0:	f040 808c 	bne.w	8002aec <arm_cmplx_mag_f32+0x1a8>
 80029d4:	ed05 0a02 	vstr	s0, [r5, #-8]
 80029d8:	ed54 7a02 	vldr	s15, [r4, #-8]
 80029dc:	ed14 0a01 	vldr	s0, [r4, #-4]
 80029e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029e4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80029e8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80029ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f4:	db20      	blt.n	8002a38 <arm_cmplx_mag_f32+0xf4>
 80029f6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80029fa:	eeb4 0a40 	vcmp.f32	s0, s0
 80029fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a02:	d169      	bne.n	8002ad8 <arm_cmplx_mag_f32+0x194>
 8002a04:	3e01      	subs	r6, #1
 8002a06:	ed05 0a01 	vstr	s0, [r5, #-4]
 8002a0a:	f104 0420 	add.w	r4, r4, #32
 8002a0e:	f105 0510 	add.w	r5, r5, #16
 8002a12:	d019      	beq.n	8002a48 <arm_cmplx_mag_f32+0x104>
 8002a14:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8002a18:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8002a1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a20:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002a24:	ee77 7a80 	vadd.f32	s15, s15, s0
 8002a28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a30:	da95      	bge.n	800295e <arm_cmplx_mag_f32+0x1a>
 8002a32:	f845 7c10 	str.w	r7, [r5, #-16]
 8002a36:	e79c      	b.n	8002972 <arm_cmplx_mag_f32+0x2e>
 8002a38:	3e01      	subs	r6, #1
 8002a3a:	f845 7c04 	str.w	r7, [r5, #-4]
 8002a3e:	f104 0420 	add.w	r4, r4, #32
 8002a42:	f105 0510 	add.w	r5, r5, #16
 8002a46:	d1e5      	bne.n	8002a14 <arm_cmplx_mag_f32+0xd0>
 8002a48:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8002a4c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8002a50:	f012 0503 	ands.w	r5, r2, #3
 8002a54:	d026      	beq.n	8002aa4 <arm_cmplx_mag_f32+0x160>
 8002a56:	2600      	movs	r6, #0
 8002a58:	f100 0408 	add.w	r4, r0, #8
 8002a5c:	e00c      	b.n	8002a78 <arm_cmplx_mag_f32+0x134>
 8002a5e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8002a62:	eeb4 0a40 	vcmp.f32	s0, s0
 8002a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6a:	d12e      	bne.n	8002aca <arm_cmplx_mag_f32+0x186>
 8002a6c:	3d01      	subs	r5, #1
 8002a6e:	ed01 0a01 	vstr	s0, [r1, #-4]
 8002a72:	f104 0408 	add.w	r4, r4, #8
 8002a76:	d015      	beq.n	8002aa4 <arm_cmplx_mag_f32+0x160>
 8002a78:	ed54 7a02 	vldr	s15, [r4, #-8]
 8002a7c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8002a80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a84:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002a88:	3104      	adds	r1, #4
 8002a8a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8002a8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a96:	dae2      	bge.n	8002a5e <arm_cmplx_mag_f32+0x11a>
 8002a98:	3d01      	subs	r5, #1
 8002a9a:	f841 6c04 	str.w	r6, [r1, #-4]
 8002a9e:	f104 0408 	add.w	r4, r4, #8
 8002aa2:	d1e9      	bne.n	8002a78 <arm_cmplx_mag_f32+0x134>
 8002aa4:	b004      	add	sp, #16
 8002aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002aaa:	f845 7c08 	str.w	r7, [r5, #-8]
 8002aae:	e793      	b.n	80029d8 <arm_cmplx_mag_f32+0x94>
 8002ab0:	f845 7c0c 	str.w	r7, [r5, #-12]
 8002ab4:	e777      	b.n	80029a6 <arm_cmplx_mag_f32+0x62>
 8002ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aba:	9203      	str	r2, [sp, #12]
 8002abc:	9102      	str	r1, [sp, #8]
 8002abe:	9001      	str	r0, [sp, #4]
 8002ac0:	f000 fb86 	bl	80031d0 <sqrtf>
 8002ac4:	a801      	add	r0, sp, #4
 8002ac6:	c807      	ldmia	r0, {r0, r1, r2}
 8002ac8:	e751      	b.n	800296e <arm_cmplx_mag_f32+0x2a>
 8002aca:	eeb0 0a67 	vmov.f32	s0, s15
 8002ace:	9101      	str	r1, [sp, #4]
 8002ad0:	f000 fb7e 	bl	80031d0 <sqrtf>
 8002ad4:	9901      	ldr	r1, [sp, #4]
 8002ad6:	e7c9      	b.n	8002a6c <arm_cmplx_mag_f32+0x128>
 8002ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8002adc:	9203      	str	r2, [sp, #12]
 8002ade:	9102      	str	r1, [sp, #8]
 8002ae0:	9001      	str	r0, [sp, #4]
 8002ae2:	f000 fb75 	bl	80031d0 <sqrtf>
 8002ae6:	a801      	add	r0, sp, #4
 8002ae8:	c807      	ldmia	r0, {r0, r1, r2}
 8002aea:	e78b      	b.n	8002a04 <arm_cmplx_mag_f32+0xc0>
 8002aec:	eeb0 0a67 	vmov.f32	s0, s15
 8002af0:	9203      	str	r2, [sp, #12]
 8002af2:	9102      	str	r1, [sp, #8]
 8002af4:	9001      	str	r0, [sp, #4]
 8002af6:	f000 fb6b 	bl	80031d0 <sqrtf>
 8002afa:	a801      	add	r0, sp, #4
 8002afc:	c807      	ldmia	r0, {r0, r1, r2}
 8002afe:	e769      	b.n	80029d4 <arm_cmplx_mag_f32+0x90>
 8002b00:	eeb0 0a67 	vmov.f32	s0, s15
 8002b04:	9203      	str	r2, [sp, #12]
 8002b06:	9102      	str	r1, [sp, #8]
 8002b08:	9001      	str	r0, [sp, #4]
 8002b0a:	f000 fb61 	bl	80031d0 <sqrtf>
 8002b0e:	a801      	add	r0, sp, #4
 8002b10:	c807      	ldmia	r0, {r0, r1, r2}
 8002b12:	e746      	b.n	80029a2 <arm_cmplx_mag_f32+0x5e>

08002b14 <arm_radix8_butterfly_f32>:
 8002b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b18:	ed2d 8b10 	vpush	{d8-d15}
 8002b1c:	b09d      	sub	sp, #116	; 0x74
 8002b1e:	461c      	mov	r4, r3
 8002b20:	ed9f bac8 	vldr	s22, [pc, #800]	; 8002e44 <arm_radix8_butterfly_f32+0x330>
 8002b24:	921a      	str	r2, [sp, #104]	; 0x68
 8002b26:	1d03      	adds	r3, r0, #4
 8002b28:	4682      	mov	sl, r0
 8002b2a:	4689      	mov	r9, r1
 8002b2c:	468b      	mov	fp, r1
 8002b2e:	931b      	str	r3, [sp, #108]	; 0x6c
 8002b30:	9400      	str	r4, [sp, #0]
 8002b32:	469e      	mov	lr, r3
 8002b34:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8002b38:	005a      	lsls	r2, r3, #1
 8002b3a:	18d6      	adds	r6, r2, r3
 8002b3c:	18f5      	adds	r5, r6, r3
 8002b3e:	9203      	str	r2, [sp, #12]
 8002b40:	195a      	adds	r2, r3, r5
 8002b42:	18d0      	adds	r0, r2, r3
 8002b44:	00df      	lsls	r7, r3, #3
 8002b46:	1819      	adds	r1, r3, r0
 8002b48:	463c      	mov	r4, r7
 8002b4a:	9701      	str	r7, [sp, #4]
 8002b4c:	4457      	add	r7, sl
 8002b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8002b50:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8002b5a:	eb07 0c04 	add.w	ip, r7, r4
 8002b5e:	9c00      	ldr	r4, [sp, #0]
 8002b60:	9302      	str	r3, [sp, #8]
 8002b62:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8002b66:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8002b6a:	3204      	adds	r2, #4
 8002b6c:	3104      	adds	r1, #4
 8002b6e:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8002b72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b76:	f04f 0800 	mov.w	r8, #0
 8002b7a:	eddc 7a00 	vldr	s15, [ip]
 8002b7e:	edd7 6a00 	vldr	s13, [r7]
 8002b82:	edd6 3a00 	vldr	s7, [r6]
 8002b86:	ed5e aa01 	vldr	s21, [lr, #-4]
 8002b8a:	edd5 4a00 	vldr	s9, [r5]
 8002b8e:	ed90 2a00 	vldr	s4, [r0]
 8002b92:	ed12 7a01 	vldr	s14, [r2, #-4]
 8002b96:	ed51 0a01 	vldr	s1, [r1, #-4]
 8002b9a:	ee77 8a82 	vadd.f32	s17, s15, s4
 8002b9e:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8002ba2:	ee76 1a87 	vadd.f32	s3, s13, s14
 8002ba6:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8002baa:	ee31 6a84 	vadd.f32	s12, s3, s8
 8002bae:	ee33 5a28 	vadd.f32	s10, s6, s17
 8002bb2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8002bb6:	ee75 6a06 	vadd.f32	s13, s10, s12
 8002bba:	ee35 5a46 	vsub.f32	s10, s10, s12
 8002bbe:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8002bc2:	ed85 5a00 	vstr	s10, [r5]
 8002bc6:	ed96 1a01 	vldr	s2, [r6, #4]
 8002bca:	edd7 5a01 	vldr	s11, [r7, #4]
 8002bce:	ed92 aa00 	vldr	s20, [r2]
 8002bd2:	ed91 6a00 	vldr	s12, [r1]
 8002bd6:	ed9e 9a00 	vldr	s18, [lr]
 8002bda:	ed95 5a01 	vldr	s10, [r5, #4]
 8002bde:	eddc 6a01 	vldr	s13, [ip, #4]
 8002be2:	edd0 9a01 	vldr	s19, [r0, #4]
 8002be6:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8002bea:	ee71 2a46 	vsub.f32	s5, s2, s12
 8002bee:	ee75 3aca 	vsub.f32	s7, s11, s20
 8002bf2:	ee37 0a60 	vsub.f32	s0, s14, s1
 8002bf6:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8002bfa:	ee37 7a20 	vadd.f32	s14, s14, s1
 8002bfe:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8002c02:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8002c06:	ee79 3a05 	vadd.f32	s7, s18, s10
 8002c0a:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8002c0e:	ee39 5a45 	vsub.f32	s10, s18, s10
 8002c12:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8002c16:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8002c1a:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8002c1e:	ee31 6a06 	vadd.f32	s12, s2, s12
 8002c22:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8002c26:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8002c2a:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8002c2e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8002c32:	ee33 3a68 	vsub.f32	s6, s6, s17
 8002c36:	ee36 0a88 	vadd.f32	s0, s13, s16
 8002c3a:	ee75 8a86 	vadd.f32	s17, s11, s12
 8002c3e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8002c42:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8002c46:	ee75 6a62 	vsub.f32	s13, s10, s5
 8002c4a:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8002c4e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8002c52:	ee33 1a89 	vadd.f32	s2, s7, s18
 8002c56:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8002c5a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8002c5e:	ee75 4a22 	vadd.f32	s9, s10, s5
 8002c62:	ee32 5a27 	vadd.f32	s10, s4, s15
 8002c66:	ee72 7a67 	vsub.f32	s15, s4, s15
 8002c6a:	ee33 8a06 	vadd.f32	s16, s6, s12
 8002c6e:	ee75 2a87 	vadd.f32	s5, s11, s14
 8002c72:	ee31 9a28 	vadd.f32	s18, s2, s17
 8002c76:	ee33 6a46 	vsub.f32	s12, s6, s12
 8002c7a:	ee74 0a61 	vsub.f32	s1, s8, s3
 8002c7e:	ee33 2a80 	vadd.f32	s4, s7, s0
 8002c82:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8002c86:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8002c8a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8002c8e:	ee31 1a68 	vsub.f32	s2, s2, s17
 8002c92:	ee34 4a21 	vadd.f32	s8, s8, s3
 8002c96:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8002c9a:	ee74 4a85 	vadd.f32	s9, s9, s10
 8002c9e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ca2:	44d8      	add	r8, fp
 8002ca4:	45c1      	cmp	r9, r8
 8002ca6:	ed8e 9a00 	vstr	s18, [lr]
 8002caa:	ed85 1a01 	vstr	s2, [r5, #4]
 8002cae:	449e      	add	lr, r3
 8002cb0:	ed8c 8a00 	vstr	s16, [ip]
 8002cb4:	441d      	add	r5, r3
 8002cb6:	ed80 6a00 	vstr	s12, [r0]
 8002cba:	edcc 0a01 	vstr	s1, [ip, #4]
 8002cbe:	ed80 4a01 	vstr	s8, [r0, #4]
 8002cc2:	449c      	add	ip, r3
 8002cc4:	ed87 2a00 	vstr	s4, [r7]
 8002cc8:	4418      	add	r0, r3
 8002cca:	ed41 3a01 	vstr	s7, [r1, #-4]
 8002cce:	ed42 2a01 	vstr	s5, [r2, #-4]
 8002cd2:	ed86 7a00 	vstr	s14, [r6]
 8002cd6:	ed87 3a01 	vstr	s6, [r7, #4]
 8002cda:	edc1 4a00 	vstr	s9, [r1]
 8002cde:	441f      	add	r7, r3
 8002ce0:	edc2 5a00 	vstr	s11, [r2]
 8002ce4:	4419      	add	r1, r3
 8002ce6:	edc6 6a01 	vstr	s13, [r6, #4]
 8002cea:	441a      	add	r2, r3
 8002cec:	441e      	add	r6, r3
 8002cee:	f63f af44 	bhi.w	8002b7a <arm_radix8_butterfly_f32+0x66>
 8002cf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002cf4:	2907      	cmp	r1, #7
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	f240 81e9 	bls.w	80030ce <arm_radix8_butterfly_f32+0x5ba>
 8002cfc:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8002d00:	193e      	adds	r6, r7, r4
 8002d02:	1935      	adds	r5, r6, r4
 8002d04:	9c03      	ldr	r4, [sp, #12]
 8002d06:	9000      	str	r0, [sp, #0]
 8002d08:	4622      	mov	r2, r4
 8002d0a:	3201      	adds	r2, #1
 8002d0c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002d10:	9900      	ldr	r1, [sp, #0]
 8002d12:	1828      	adds	r0, r5, r0
 8002d14:	eb00 0e01 	add.w	lr, r0, r1
 8002d18:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d1a:	440a      	add	r2, r1
 8002d1c:	eb04 0c01 	add.w	ip, r4, r1
 8002d20:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8002d24:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8002d28:	9a00      	ldr	r2, [sp, #0]
 8002d2a:	940f      	str	r4, [sp, #60]	; 0x3c
 8002d2c:	00ed      	lsls	r5, r5, #3
 8002d2e:	9511      	str	r5, [sp, #68]	; 0x44
 8002d30:	00d5      	lsls	r5, r2, #3
 8002d32:	950d      	str	r5, [sp, #52]	; 0x34
 8002d34:	9d01      	ldr	r5, [sp, #4]
 8002d36:	3508      	adds	r5, #8
 8002d38:	9516      	str	r5, [sp, #88]	; 0x58
 8002d3a:	9d02      	ldr	r5, [sp, #8]
 8002d3c:	3508      	adds	r5, #8
 8002d3e:	0114      	lsls	r4, r2, #4
 8002d40:	9517      	str	r5, [sp, #92]	; 0x5c
 8002d42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002d44:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8002d46:	940e      	str	r4, [sp, #56]	; 0x38
 8002d48:	00c0      	lsls	r0, r0, #3
 8002d4a:	9010      	str	r0, [sp, #64]	; 0x40
 8002d4c:	18aa      	adds	r2, r5, r2
 8002d4e:	9207      	str	r2, [sp, #28]
 8002d50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002d52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002d54:	18aa      	adds	r2, r5, r2
 8002d56:	9208      	str	r2, [sp, #32]
 8002d58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002d5a:	18aa      	adds	r2, r5, r2
 8002d5c:	9209      	str	r2, [sp, #36]	; 0x24
 8002d5e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002d62:	f10e 0204 	add.w	r2, lr, #4
 8002d66:	920a      	str	r2, [sp, #40]	; 0x28
 8002d68:	00c9      	lsls	r1, r1, #3
 8002d6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002d6c:	310c      	adds	r1, #12
 8002d6e:	00f6      	lsls	r6, r6, #3
 8002d70:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8002d74:	9114      	str	r1, [sp, #80]	; 0x50
 8002d76:	18a9      	adds	r1, r5, r2
 8002d78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d7a:	9612      	str	r6, [sp, #72]	; 0x48
 8002d7c:	00ff      	lsls	r7, r7, #3
 8002d7e:	19ae      	adds	r6, r5, r6
 8002d80:	3008      	adds	r0, #8
 8002d82:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8002d86:	9606      	str	r6, [sp, #24]
 8002d88:	9019      	str	r0, [sp, #100]	; 0x64
 8002d8a:	18aa      	adds	r2, r5, r2
 8002d8c:	0164      	lsls	r4, r4, #5
 8002d8e:	19ee      	adds	r6, r5, r7
 8002d90:	f10c 000c 	add.w	r0, ip, #12
 8002d94:	9713      	str	r7, [sp, #76]	; 0x4c
 8002d96:	9604      	str	r6, [sp, #16]
 8002d98:	9015      	str	r0, [sp, #84]	; 0x54
 8002d9a:	9103      	str	r1, [sp, #12]
 8002d9c:	9205      	str	r2, [sp, #20]
 8002d9e:	f104 0208 	add.w	r2, r4, #8
 8002da2:	9218      	str	r2, [sp, #96]	; 0x60
 8002da4:	f04f 0801 	mov.w	r8, #1
 8002da8:	2200      	movs	r2, #0
 8002daa:	f102 0108 	add.w	r1, r2, #8
 8002dae:	460f      	mov	r7, r1
 8002db0:	910b      	str	r1, [sp, #44]	; 0x2c
 8002db2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8002db4:	188e      	adds	r6, r1, r2
 8002db6:	9916      	ldr	r1, [sp, #88]	; 0x58
 8002db8:	188d      	adds	r5, r1, r2
 8002dba:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8002dbc:	188c      	adds	r4, r1, r2
 8002dbe:	9919      	ldr	r1, [sp, #100]	; 0x64
 8002dc0:	1888      	adds	r0, r1, r2
 8002dc2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8002dc4:	eb01 0c02 	add.w	ip, r1, r2
 8002dc8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8002dca:	440a      	add	r2, r1
 8002dcc:	9903      	ldr	r1, [sp, #12]
 8002dce:	edd1 fa00 	vldr	s31, [r1]
 8002dd2:	9905      	ldr	r1, [sp, #20]
 8002dd4:	ed91 fa00 	vldr	s30, [r1]
 8002dd8:	9904      	ldr	r1, [sp, #16]
 8002dda:	edd1 ea00 	vldr	s29, [r1]
 8002dde:	9906      	ldr	r1, [sp, #24]
 8002de0:	ed91 ea00 	vldr	s28, [r1]
 8002de4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002de6:	edd1 da00 	vldr	s27, [r1]
 8002dea:	9908      	ldr	r1, [sp, #32]
 8002dec:	ed91 da00 	vldr	s26, [r1]
 8002df0:	9907      	ldr	r1, [sp, #28]
 8002df2:	edd1 ca00 	vldr	s25, [r1]
 8002df6:	9903      	ldr	r1, [sp, #12]
 8002df8:	ed91 ca01 	vldr	s24, [r1, #4]
 8002dfc:	9905      	ldr	r1, [sp, #20]
 8002dfe:	edd1 ba01 	vldr	s23, [r1, #4]
 8002e02:	9904      	ldr	r1, [sp, #16]
 8002e04:	edd1 aa01 	vldr	s21, [r1, #4]
 8002e08:	9906      	ldr	r1, [sp, #24]
 8002e0a:	ed91 aa01 	vldr	s20, [r1, #4]
 8002e0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e10:	edd1 7a01 	vldr	s15, [r1, #4]
 8002e14:	9908      	ldr	r1, [sp, #32]
 8002e16:	edcd 7a00 	vstr	s15, [sp]
 8002e1a:	edd1 7a01 	vldr	s15, [r1, #4]
 8002e1e:	9907      	ldr	r1, [sp, #28]
 8002e20:	edcd 7a01 	vstr	s15, [sp, #4]
 8002e24:	edd1 7a01 	vldr	s15, [r1, #4]
 8002e28:	eb0a 0e07 	add.w	lr, sl, r7
 8002e2c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002e2e:	edcd 7a02 	vstr	s15, [sp, #8]
 8002e32:	eb0c 010a 	add.w	r1, ip, sl
 8002e36:	4456      	add	r6, sl
 8002e38:	4455      	add	r5, sl
 8002e3a:	4454      	add	r4, sl
 8002e3c:	4450      	add	r0, sl
 8002e3e:	4452      	add	r2, sl
 8002e40:	46c4      	mov	ip, r8
 8002e42:	e001      	b.n	8002e48 <arm_radix8_butterfly_f32+0x334>
 8002e44:	3f3504f3 	.word	0x3f3504f3
 8002e48:	ed96 5a00 	vldr	s10, [r6]
 8002e4c:	ed52 9a01 	vldr	s19, [r2, #-4]
 8002e50:	ed11 6a01 	vldr	s12, [r1, #-4]
 8002e54:	edd0 7a00 	vldr	s15, [r0]
 8002e58:	ed17 7a01 	vldr	s14, [r7, #-4]
 8002e5c:	edde 3a00 	vldr	s7, [lr]
 8002e60:	ed94 3a00 	vldr	s6, [r4]
 8002e64:	ed95 2a00 	vldr	s4, [r5]
 8002e68:	ed9e 0a01 	vldr	s0, [lr, #4]
 8002e6c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8002e70:	ee32 1a06 	vadd.f32	s2, s4, s12
 8002e74:	ee33 4a29 	vadd.f32	s8, s6, s19
 8002e78:	ee77 4a87 	vadd.f32	s9, s15, s14
 8002e7c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8002e80:	ee71 6a24 	vadd.f32	s13, s2, s9
 8002e84:	ee32 2a46 	vsub.f32	s4, s4, s12
 8002e88:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8002e8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e90:	ed8e 6a00 	vstr	s12, [lr]
 8002e94:	edd0 8a01 	vldr	s17, [r0, #4]
 8002e98:	ed95 9a01 	vldr	s18, [r5, #4]
 8002e9c:	edd1 2a00 	vldr	s5, [r1]
 8002ea0:	ed97 7a00 	vldr	s14, [r7]
 8002ea4:	edd4 0a01 	vldr	s1, [r4, #4]
 8002ea8:	ed96 6a01 	vldr	s12, [r6, #4]
 8002eac:	edd2 5a00 	vldr	s11, [r2]
 8002eb0:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8002eb4:	ee33 3a69 	vsub.f32	s6, s6, s19
 8002eb8:	ee39 5a62 	vsub.f32	s10, s18, s5
 8002ebc:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8002ec0:	ee38 4a44 	vsub.f32	s8, s16, s8
 8002ec4:	ee38 7a87 	vadd.f32	s14, s17, s14
 8002ec8:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8002ecc:	ee79 2a22 	vadd.f32	s5, s18, s5
 8002ed0:	ee75 8a69 	vsub.f32	s17, s10, s19
 8002ed4:	ee32 9a27 	vadd.f32	s18, s4, s15
 8002ed8:	ee35 5a29 	vadd.f32	s10, s10, s19
 8002edc:	ee72 7a67 	vsub.f32	s15, s4, s15
 8002ee0:	ee30 2a06 	vadd.f32	s4, s0, s12
 8002ee4:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8002ee8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8002eec:	ee32 9a08 	vadd.f32	s18, s4, s16
 8002ef0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8002ef4:	ee32 2a48 	vsub.f32	s4, s4, s16
 8002ef8:	ee71 4a64 	vsub.f32	s9, s2, s9
 8002efc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8002f00:	ee32 1a87 	vadd.f32	s2, s5, s14
 8002f04:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8002f08:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8002f0c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8002f10:	ee73 0a29 	vadd.f32	s1, s6, s19
 8002f14:	ee36 0a28 	vadd.f32	s0, s12, s17
 8002f18:	ee33 3a69 	vsub.f32	s6, s6, s19
 8002f1c:	ee32 7a64 	vsub.f32	s14, s4, s9
 8002f20:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8002f24:	ee36 6a68 	vsub.f32	s12, s12, s17
 8002f28:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8002f2c:	ee75 8a85 	vadd.f32	s17, s11, s10
 8002f30:	ee74 3a22 	vadd.f32	s7, s8, s5
 8002f34:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8002f38:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8002f3c:	ee79 1a41 	vsub.f32	s3, s18, s2
 8002f40:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8002f44:	ee76 5a43 	vsub.f32	s11, s12, s6
 8002f48:	ee74 2a62 	vsub.f32	s5, s8, s5
 8002f4c:	ee72 4a24 	vadd.f32	s9, s4, s9
 8002f50:	ee30 4a60 	vsub.f32	s8, s0, s1
 8002f54:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8002f58:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002f5c:	ee77 9a85 	vadd.f32	s19, s15, s10
 8002f60:	ee36 6a03 	vadd.f32	s12, s12, s6
 8002f64:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8002f68:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8002f6c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8002f70:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8002f74:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8002f78:	ee39 1a01 	vadd.f32	s2, s18, s2
 8002f7c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8002f80:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8002f84:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8002f88:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8002f8c:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8002f90:	ee35 3a03 	vadd.f32	s6, s10, s6
 8002f94:	ee72 6a66 	vsub.f32	s13, s4, s13
 8002f98:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8002f9c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8002fa0:	ed9d 4a02 	vldr	s8, [sp, #8]
 8002fa4:	ed8e 1a01 	vstr	s2, [lr, #4]
 8002fa8:	ee77 3a63 	vsub.f32	s7, s14, s7
 8002fac:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8002fb0:	ed9d 7a01 	vldr	s14, [sp, #4]
 8002fb4:	ed86 3a00 	vstr	s6, [r6]
 8002fb8:	ee30 9a89 	vadd.f32	s18, s1, s18
 8002fbc:	ee32 2a05 	vadd.f32	s4, s4, s10
 8002fc0:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8002fc4:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8002fc8:	ee67 2a22 	vmul.f32	s5, s14, s5
 8002fcc:	ee64 1a00 	vmul.f32	s3, s8, s0
 8002fd0:	ee27 7a24 	vmul.f32	s14, s14, s9
 8002fd4:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8002fd8:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8002fdc:	ee64 8a28 	vmul.f32	s17, s8, s17
 8002fe0:	ed9d 4a00 	vldr	s8, [sp]
 8002fe4:	edc6 6a01 	vstr	s13, [r6, #4]
 8002fe8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8002fec:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8002ff0:	ee64 9a29 	vmul.f32	s19, s8, s19
 8002ff4:	ee24 4a25 	vmul.f32	s8, s8, s11
 8002ff8:	ee30 7a87 	vadd.f32	s14, s1, s14
 8002ffc:	ee74 4a84 	vadd.f32	s9, s9, s8
 8003000:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8003004:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8003008:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800300c:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8003010:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8003014:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8003018:	ee75 1a21 	vadd.f32	s3, s10, s3
 800301c:	ee30 0a68 	vsub.f32	s0, s0, s17
 8003020:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8003024:	ee70 0a84 	vadd.f32	s1, s1, s8
 8003028:	ee36 6a67 	vsub.f32	s12, s12, s15
 800302c:	44dc      	add	ip, fp
 800302e:	45e1      	cmp	r9, ip
 8003030:	ed84 9a00 	vstr	s18, [r4]
 8003034:	edc4 3a01 	vstr	s7, [r4, #4]
 8003038:	449e      	add	lr, r3
 800303a:	ed02 7a01 	vstr	s14, [r2, #-4]
 800303e:	edc2 2a00 	vstr	s5, [r2]
 8003042:	441e      	add	r6, r3
 8003044:	ed85 2a00 	vstr	s4, [r5]
 8003048:	ed85 8a01 	vstr	s16, [r5, #4]
 800304c:	441c      	add	r4, r3
 800304e:	ed47 1a01 	vstr	s3, [r7, #-4]
 8003052:	ed87 0a00 	vstr	s0, [r7]
 8003056:	441a      	add	r2, r3
 8003058:	ed41 4a01 	vstr	s9, [r1, #-4]
 800305c:	edc1 9a00 	vstr	s19, [r1]
 8003060:	441d      	add	r5, r3
 8003062:	edc0 0a00 	vstr	s1, [r0]
 8003066:	441f      	add	r7, r3
 8003068:	ed80 6a01 	vstr	s12, [r0, #4]
 800306c:	4419      	add	r1, r3
 800306e:	4418      	add	r0, r3
 8003070:	f63f aeea 	bhi.w	8002e48 <arm_radix8_butterfly_f32+0x334>
 8003074:	9a03      	ldr	r2, [sp, #12]
 8003076:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003078:	440a      	add	r2, r1
 800307a:	9203      	str	r2, [sp, #12]
 800307c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800307e:	9a05      	ldr	r2, [sp, #20]
 8003080:	440a      	add	r2, r1
 8003082:	9205      	str	r2, [sp, #20]
 8003084:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003086:	9a04      	ldr	r2, [sp, #16]
 8003088:	440a      	add	r2, r1
 800308a:	9204      	str	r2, [sp, #16]
 800308c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800308e:	9a06      	ldr	r2, [sp, #24]
 8003090:	440a      	add	r2, r1
 8003092:	9206      	str	r2, [sp, #24]
 8003094:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003098:	440a      	add	r2, r1
 800309a:	9209      	str	r2, [sp, #36]	; 0x24
 800309c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800309e:	9a08      	ldr	r2, [sp, #32]
 80030a0:	440a      	add	r2, r1
 80030a2:	9208      	str	r2, [sp, #32]
 80030a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80030a6:	9a07      	ldr	r2, [sp, #28]
 80030a8:	440a      	add	r2, r1
 80030aa:	9207      	str	r2, [sp, #28]
 80030ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80030ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030b0:	f108 0801 	add.w	r8, r8, #1
 80030b4:	3208      	adds	r2, #8
 80030b6:	4588      	cmp	r8, r1
 80030b8:	920a      	str	r2, [sp, #40]	; 0x28
 80030ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80030bc:	f47f ae75 	bne.w	8002daa <arm_radix8_butterfly_f32+0x296>
 80030c0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	46c3      	mov	fp, r8
 80030c8:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 80030cc:	e532      	b.n	8002b34 <arm_radix8_butterfly_f32+0x20>
 80030ce:	b01d      	add	sp, #116	; 0x74
 80030d0:	ecbd 8b10 	vpop	{d8-d15}
 80030d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080030d8 <__errno>:
 80030d8:	4b01      	ldr	r3, [pc, #4]	; (80030e0 <__errno+0x8>)
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	2000000c 	.word	0x2000000c

080030e4 <__libc_init_array>:
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	4e0d      	ldr	r6, [pc, #52]	; (800311c <__libc_init_array+0x38>)
 80030e8:	4c0d      	ldr	r4, [pc, #52]	; (8003120 <__libc_init_array+0x3c>)
 80030ea:	1ba4      	subs	r4, r4, r6
 80030ec:	10a4      	asrs	r4, r4, #2
 80030ee:	2500      	movs	r5, #0
 80030f0:	42a5      	cmp	r5, r4
 80030f2:	d109      	bne.n	8003108 <__libc_init_array+0x24>
 80030f4:	4e0b      	ldr	r6, [pc, #44]	; (8003124 <__libc_init_array+0x40>)
 80030f6:	4c0c      	ldr	r4, [pc, #48]	; (8003128 <__libc_init_array+0x44>)
 80030f8:	f001 f88c 	bl	8004214 <_init>
 80030fc:	1ba4      	subs	r4, r4, r6
 80030fe:	10a4      	asrs	r4, r4, #2
 8003100:	2500      	movs	r5, #0
 8003102:	42a5      	cmp	r5, r4
 8003104:	d105      	bne.n	8003112 <__libc_init_array+0x2e>
 8003106:	bd70      	pop	{r4, r5, r6, pc}
 8003108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800310c:	4798      	blx	r3
 800310e:	3501      	adds	r5, #1
 8003110:	e7ee      	b.n	80030f0 <__libc_init_array+0xc>
 8003112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003116:	4798      	blx	r3
 8003118:	3501      	adds	r5, #1
 800311a:	e7f2      	b.n	8003102 <__libc_init_array+0x1e>
 800311c:	08017880 	.word	0x08017880
 8003120:	08017880 	.word	0x08017880
 8003124:	08017880 	.word	0x08017880
 8003128:	08017884 	.word	0x08017884

0800312c <memset>:
 800312c:	4402      	add	r2, r0
 800312e:	4603      	mov	r3, r0
 8003130:	4293      	cmp	r3, r2
 8003132:	d100      	bne.n	8003136 <memset+0xa>
 8003134:	4770      	bx	lr
 8003136:	f803 1b01 	strb.w	r1, [r3], #1
 800313a:	e7f9      	b.n	8003130 <memset+0x4>
 800313c:	0000      	movs	r0, r0
	...

08003140 <sin>:
 8003140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003142:	ec51 0b10 	vmov	r0, r1, d0
 8003146:	4a20      	ldr	r2, [pc, #128]	; (80031c8 <sin+0x88>)
 8003148:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800314c:	4293      	cmp	r3, r2
 800314e:	dc07      	bgt.n	8003160 <sin+0x20>
 8003150:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80031c0 <sin+0x80>
 8003154:	2000      	movs	r0, #0
 8003156:	f000 fe8b 	bl	8003e70 <__kernel_sin>
 800315a:	ec51 0b10 	vmov	r0, r1, d0
 800315e:	e007      	b.n	8003170 <sin+0x30>
 8003160:	4a1a      	ldr	r2, [pc, #104]	; (80031cc <sin+0x8c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	dd09      	ble.n	800317a <sin+0x3a>
 8003166:	ee10 2a10 	vmov	r2, s0
 800316a:	460b      	mov	r3, r1
 800316c:	f7fd f890 	bl	8000290 <__aeabi_dsub>
 8003170:	ec41 0b10 	vmov	d0, r0, r1
 8003174:	b005      	add	sp, #20
 8003176:	f85d fb04 	ldr.w	pc, [sp], #4
 800317a:	4668      	mov	r0, sp
 800317c:	f000 f878 	bl	8003270 <__ieee754_rem_pio2>
 8003180:	f000 0003 	and.w	r0, r0, #3
 8003184:	2801      	cmp	r0, #1
 8003186:	ed9d 1b02 	vldr	d1, [sp, #8]
 800318a:	ed9d 0b00 	vldr	d0, [sp]
 800318e:	d004      	beq.n	800319a <sin+0x5a>
 8003190:	2802      	cmp	r0, #2
 8003192:	d005      	beq.n	80031a0 <sin+0x60>
 8003194:	b970      	cbnz	r0, 80031b4 <sin+0x74>
 8003196:	2001      	movs	r0, #1
 8003198:	e7dd      	b.n	8003156 <sin+0x16>
 800319a:	f000 fa61 	bl	8003660 <__kernel_cos>
 800319e:	e7dc      	b.n	800315a <sin+0x1a>
 80031a0:	2001      	movs	r0, #1
 80031a2:	f000 fe65 	bl	8003e70 <__kernel_sin>
 80031a6:	ec53 2b10 	vmov	r2, r3, d0
 80031aa:	ee10 0a10 	vmov	r0, s0
 80031ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80031b2:	e7dd      	b.n	8003170 <sin+0x30>
 80031b4:	f000 fa54 	bl	8003660 <__kernel_cos>
 80031b8:	e7f5      	b.n	80031a6 <sin+0x66>
 80031ba:	bf00      	nop
 80031bc:	f3af 8000 	nop.w
	...
 80031c8:	3fe921fb 	.word	0x3fe921fb
 80031cc:	7fefffff 	.word	0x7fefffff

080031d0 <sqrtf>:
 80031d0:	b510      	push	{r4, lr}
 80031d2:	ed2d 8b02 	vpush	{d8}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	eeb0 8a40 	vmov.f32	s16, s0
 80031dc:	f000 fa3a 	bl	8003654 <__ieee754_sqrtf>
 80031e0:	4b21      	ldr	r3, [pc, #132]	; (8003268 <sqrtf+0x98>)
 80031e2:	f993 4000 	ldrsb.w	r4, [r3]
 80031e6:	1c63      	adds	r3, r4, #1
 80031e8:	d02c      	beq.n	8003244 <sqrtf+0x74>
 80031ea:	eeb4 8a48 	vcmp.f32	s16, s16
 80031ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f2:	d627      	bvs.n	8003244 <sqrtf+0x74>
 80031f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80031f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fc:	d522      	bpl.n	8003244 <sqrtf+0x74>
 80031fe:	2301      	movs	r3, #1
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	4b1a      	ldr	r3, [pc, #104]	; (800326c <sqrtf+0x9c>)
 8003204:	9301      	str	r3, [sp, #4]
 8003206:	ee18 0a10 	vmov	r0, s16
 800320a:	2300      	movs	r3, #0
 800320c:	9308      	str	r3, [sp, #32]
 800320e:	f7fd f99f 	bl	8000550 <__aeabi_f2d>
 8003212:	2200      	movs	r2, #0
 8003214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003218:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800321c:	2300      	movs	r3, #0
 800321e:	b9ac      	cbnz	r4, 800324c <sqrtf+0x7c>
 8003220:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003224:	4668      	mov	r0, sp
 8003226:	f000 ff6b 	bl	8004100 <matherr>
 800322a:	b1b8      	cbz	r0, 800325c <sqrtf+0x8c>
 800322c:	9b08      	ldr	r3, [sp, #32]
 800322e:	b11b      	cbz	r3, 8003238 <sqrtf+0x68>
 8003230:	f7ff ff52 	bl	80030d8 <__errno>
 8003234:	9b08      	ldr	r3, [sp, #32]
 8003236:	6003      	str	r3, [r0, #0]
 8003238:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800323c:	f7fd fca2 	bl	8000b84 <__aeabi_d2f>
 8003240:	ee00 0a10 	vmov	s0, r0
 8003244:	b00a      	add	sp, #40	; 0x28
 8003246:	ecbd 8b02 	vpop	{d8}
 800324a:	bd10      	pop	{r4, pc}
 800324c:	4610      	mov	r0, r2
 800324e:	4619      	mov	r1, r3
 8003250:	f7fd fb00 	bl	8000854 <__aeabi_ddiv>
 8003254:	2c02      	cmp	r4, #2
 8003256:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800325a:	d1e3      	bne.n	8003224 <sqrtf+0x54>
 800325c:	f7ff ff3c 	bl	80030d8 <__errno>
 8003260:	2321      	movs	r3, #33	; 0x21
 8003262:	6003      	str	r3, [r0, #0]
 8003264:	e7e2      	b.n	800322c <sqrtf+0x5c>
 8003266:	bf00      	nop
 8003268:	20000070 	.word	0x20000070
 800326c:	08017698 	.word	0x08017698

08003270 <__ieee754_rem_pio2>:
 8003270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003274:	ec57 6b10 	vmov	r6, r7, d0
 8003278:	4bc3      	ldr	r3, [pc, #780]	; (8003588 <__ieee754_rem_pio2+0x318>)
 800327a:	b08d      	sub	sp, #52	; 0x34
 800327c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003280:	4598      	cmp	r8, r3
 8003282:	4604      	mov	r4, r0
 8003284:	9704      	str	r7, [sp, #16]
 8003286:	dc07      	bgt.n	8003298 <__ieee754_rem_pio2+0x28>
 8003288:	2200      	movs	r2, #0
 800328a:	2300      	movs	r3, #0
 800328c:	ed84 0b00 	vstr	d0, [r4]
 8003290:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003294:	2500      	movs	r5, #0
 8003296:	e027      	b.n	80032e8 <__ieee754_rem_pio2+0x78>
 8003298:	4bbc      	ldr	r3, [pc, #752]	; (800358c <__ieee754_rem_pio2+0x31c>)
 800329a:	4598      	cmp	r8, r3
 800329c:	dc75      	bgt.n	800338a <__ieee754_rem_pio2+0x11a>
 800329e:	9b04      	ldr	r3, [sp, #16]
 80032a0:	4dbb      	ldr	r5, [pc, #748]	; (8003590 <__ieee754_rem_pio2+0x320>)
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	ee10 0a10 	vmov	r0, s0
 80032a8:	a3a9      	add	r3, pc, #676	; (adr r3, 8003550 <__ieee754_rem_pio2+0x2e0>)
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	4639      	mov	r1, r7
 80032b0:	dd36      	ble.n	8003320 <__ieee754_rem_pio2+0xb0>
 80032b2:	f7fc ffed 	bl	8000290 <__aeabi_dsub>
 80032b6:	45a8      	cmp	r8, r5
 80032b8:	4606      	mov	r6, r0
 80032ba:	460f      	mov	r7, r1
 80032bc:	d018      	beq.n	80032f0 <__ieee754_rem_pio2+0x80>
 80032be:	a3a6      	add	r3, pc, #664	; (adr r3, 8003558 <__ieee754_rem_pio2+0x2e8>)
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f7fc ffe4 	bl	8000290 <__aeabi_dsub>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	e9c4 2300 	strd	r2, r3, [r4]
 80032d0:	4630      	mov	r0, r6
 80032d2:	4639      	mov	r1, r7
 80032d4:	f7fc ffdc 	bl	8000290 <__aeabi_dsub>
 80032d8:	a39f      	add	r3, pc, #636	; (adr r3, 8003558 <__ieee754_rem_pio2+0x2e8>)
 80032da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032de:	f7fc ffd7 	bl	8000290 <__aeabi_dsub>
 80032e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80032e6:	2501      	movs	r5, #1
 80032e8:	4628      	mov	r0, r5
 80032ea:	b00d      	add	sp, #52	; 0x34
 80032ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032f0:	a39b      	add	r3, pc, #620	; (adr r3, 8003560 <__ieee754_rem_pio2+0x2f0>)
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	f7fc ffcb 	bl	8000290 <__aeabi_dsub>
 80032fa:	a39b      	add	r3, pc, #620	; (adr r3, 8003568 <__ieee754_rem_pio2+0x2f8>)
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	4606      	mov	r6, r0
 8003302:	460f      	mov	r7, r1
 8003304:	f7fc ffc4 	bl	8000290 <__aeabi_dsub>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	e9c4 2300 	strd	r2, r3, [r4]
 8003310:	4630      	mov	r0, r6
 8003312:	4639      	mov	r1, r7
 8003314:	f7fc ffbc 	bl	8000290 <__aeabi_dsub>
 8003318:	a393      	add	r3, pc, #588	; (adr r3, 8003568 <__ieee754_rem_pio2+0x2f8>)
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	e7de      	b.n	80032de <__ieee754_rem_pio2+0x6e>
 8003320:	f7fc ffb8 	bl	8000294 <__adddf3>
 8003324:	45a8      	cmp	r8, r5
 8003326:	4606      	mov	r6, r0
 8003328:	460f      	mov	r7, r1
 800332a:	d016      	beq.n	800335a <__ieee754_rem_pio2+0xea>
 800332c:	a38a      	add	r3, pc, #552	; (adr r3, 8003558 <__ieee754_rem_pio2+0x2e8>)
 800332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003332:	f7fc ffaf 	bl	8000294 <__adddf3>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	e9c4 2300 	strd	r2, r3, [r4]
 800333e:	4630      	mov	r0, r6
 8003340:	4639      	mov	r1, r7
 8003342:	f7fc ffa5 	bl	8000290 <__aeabi_dsub>
 8003346:	a384      	add	r3, pc, #528	; (adr r3, 8003558 <__ieee754_rem_pio2+0x2e8>)
 8003348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334c:	f7fc ffa2 	bl	8000294 <__adddf3>
 8003350:	f04f 35ff 	mov.w	r5, #4294967295
 8003354:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003358:	e7c6      	b.n	80032e8 <__ieee754_rem_pio2+0x78>
 800335a:	a381      	add	r3, pc, #516	; (adr r3, 8003560 <__ieee754_rem_pio2+0x2f0>)
 800335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003360:	f7fc ff98 	bl	8000294 <__adddf3>
 8003364:	a380      	add	r3, pc, #512	; (adr r3, 8003568 <__ieee754_rem_pio2+0x2f8>)
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	4606      	mov	r6, r0
 800336c:	460f      	mov	r7, r1
 800336e:	f7fc ff91 	bl	8000294 <__adddf3>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	e9c4 2300 	strd	r2, r3, [r4]
 800337a:	4630      	mov	r0, r6
 800337c:	4639      	mov	r1, r7
 800337e:	f7fc ff87 	bl	8000290 <__aeabi_dsub>
 8003382:	a379      	add	r3, pc, #484	; (adr r3, 8003568 <__ieee754_rem_pio2+0x2f8>)
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	e7e0      	b.n	800334c <__ieee754_rem_pio2+0xdc>
 800338a:	4b82      	ldr	r3, [pc, #520]	; (8003594 <__ieee754_rem_pio2+0x324>)
 800338c:	4598      	cmp	r8, r3
 800338e:	f300 80d0 	bgt.w	8003532 <__ieee754_rem_pio2+0x2c2>
 8003392:	f000 fe27 	bl	8003fe4 <fabs>
 8003396:	ec57 6b10 	vmov	r6, r7, d0
 800339a:	ee10 0a10 	vmov	r0, s0
 800339e:	a374      	add	r3, pc, #464	; (adr r3, 8003570 <__ieee754_rem_pio2+0x300>)
 80033a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a4:	4639      	mov	r1, r7
 80033a6:	f7fd f92b 	bl	8000600 <__aeabi_dmul>
 80033aa:	2200      	movs	r2, #0
 80033ac:	4b7a      	ldr	r3, [pc, #488]	; (8003598 <__ieee754_rem_pio2+0x328>)
 80033ae:	f7fc ff71 	bl	8000294 <__adddf3>
 80033b2:	f7fd fbbf 	bl	8000b34 <__aeabi_d2iz>
 80033b6:	4605      	mov	r5, r0
 80033b8:	f7fd f8b8 	bl	800052c <__aeabi_i2d>
 80033bc:	a364      	add	r3, pc, #400	; (adr r3, 8003550 <__ieee754_rem_pio2+0x2e0>)
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033c6:	f7fd f91b 	bl	8000600 <__aeabi_dmul>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4630      	mov	r0, r6
 80033d0:	4639      	mov	r1, r7
 80033d2:	f7fc ff5d 	bl	8000290 <__aeabi_dsub>
 80033d6:	a360      	add	r3, pc, #384	; (adr r3, 8003558 <__ieee754_rem_pio2+0x2e8>)
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	4682      	mov	sl, r0
 80033de:	468b      	mov	fp, r1
 80033e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033e4:	f7fd f90c 	bl	8000600 <__aeabi_dmul>
 80033e8:	2d1f      	cmp	r5, #31
 80033ea:	4606      	mov	r6, r0
 80033ec:	460f      	mov	r7, r1
 80033ee:	dc0c      	bgt.n	800340a <__ieee754_rem_pio2+0x19a>
 80033f0:	1e6a      	subs	r2, r5, #1
 80033f2:	4b6a      	ldr	r3, [pc, #424]	; (800359c <__ieee754_rem_pio2+0x32c>)
 80033f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f8:	4543      	cmp	r3, r8
 80033fa:	d006      	beq.n	800340a <__ieee754_rem_pio2+0x19a>
 80033fc:	4632      	mov	r2, r6
 80033fe:	463b      	mov	r3, r7
 8003400:	4650      	mov	r0, sl
 8003402:	4659      	mov	r1, fp
 8003404:	f7fc ff44 	bl	8000290 <__aeabi_dsub>
 8003408:	e00e      	b.n	8003428 <__ieee754_rem_pio2+0x1b8>
 800340a:	4632      	mov	r2, r6
 800340c:	463b      	mov	r3, r7
 800340e:	4650      	mov	r0, sl
 8003410:	4659      	mov	r1, fp
 8003412:	f7fc ff3d 	bl	8000290 <__aeabi_dsub>
 8003416:	ea4f 5328 	mov.w	r3, r8, asr #20
 800341a:	9305      	str	r3, [sp, #20]
 800341c:	9a05      	ldr	r2, [sp, #20]
 800341e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b10      	cmp	r3, #16
 8003426:	dc02      	bgt.n	800342e <__ieee754_rem_pio2+0x1be>
 8003428:	e9c4 0100 	strd	r0, r1, [r4]
 800342c:	e039      	b.n	80034a2 <__ieee754_rem_pio2+0x232>
 800342e:	a34c      	add	r3, pc, #304	; (adr r3, 8003560 <__ieee754_rem_pio2+0x2f0>)
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003438:	f7fd f8e2 	bl	8000600 <__aeabi_dmul>
 800343c:	4606      	mov	r6, r0
 800343e:	460f      	mov	r7, r1
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4650      	mov	r0, sl
 8003446:	4659      	mov	r1, fp
 8003448:	f7fc ff22 	bl	8000290 <__aeabi_dsub>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4680      	mov	r8, r0
 8003452:	4689      	mov	r9, r1
 8003454:	4650      	mov	r0, sl
 8003456:	4659      	mov	r1, fp
 8003458:	f7fc ff1a 	bl	8000290 <__aeabi_dsub>
 800345c:	4632      	mov	r2, r6
 800345e:	463b      	mov	r3, r7
 8003460:	f7fc ff16 	bl	8000290 <__aeabi_dsub>
 8003464:	a340      	add	r3, pc, #256	; (adr r3, 8003568 <__ieee754_rem_pio2+0x2f8>)
 8003466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346a:	4606      	mov	r6, r0
 800346c:	460f      	mov	r7, r1
 800346e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003472:	f7fd f8c5 	bl	8000600 <__aeabi_dmul>
 8003476:	4632      	mov	r2, r6
 8003478:	463b      	mov	r3, r7
 800347a:	f7fc ff09 	bl	8000290 <__aeabi_dsub>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4606      	mov	r6, r0
 8003484:	460f      	mov	r7, r1
 8003486:	4640      	mov	r0, r8
 8003488:	4649      	mov	r1, r9
 800348a:	f7fc ff01 	bl	8000290 <__aeabi_dsub>
 800348e:	9a05      	ldr	r2, [sp, #20]
 8003490:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b31      	cmp	r3, #49	; 0x31
 8003498:	dc20      	bgt.n	80034dc <__ieee754_rem_pio2+0x26c>
 800349a:	e9c4 0100 	strd	r0, r1, [r4]
 800349e:	46c2      	mov	sl, r8
 80034a0:	46cb      	mov	fp, r9
 80034a2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80034a6:	4650      	mov	r0, sl
 80034a8:	4642      	mov	r2, r8
 80034aa:	464b      	mov	r3, r9
 80034ac:	4659      	mov	r1, fp
 80034ae:	f7fc feef 	bl	8000290 <__aeabi_dsub>
 80034b2:	463b      	mov	r3, r7
 80034b4:	4632      	mov	r2, r6
 80034b6:	f7fc feeb 	bl	8000290 <__aeabi_dsub>
 80034ba:	9b04      	ldr	r3, [sp, #16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80034c2:	f6bf af11 	bge.w	80032e8 <__ieee754_rem_pio2+0x78>
 80034c6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80034ca:	6063      	str	r3, [r4, #4]
 80034cc:	f8c4 8000 	str.w	r8, [r4]
 80034d0:	60a0      	str	r0, [r4, #8]
 80034d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80034d6:	60e3      	str	r3, [r4, #12]
 80034d8:	426d      	negs	r5, r5
 80034da:	e705      	b.n	80032e8 <__ieee754_rem_pio2+0x78>
 80034dc:	a326      	add	r3, pc, #152	; (adr r3, 8003578 <__ieee754_rem_pio2+0x308>)
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034e6:	f7fd f88b 	bl	8000600 <__aeabi_dmul>
 80034ea:	4606      	mov	r6, r0
 80034ec:	460f      	mov	r7, r1
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4640      	mov	r0, r8
 80034f4:	4649      	mov	r1, r9
 80034f6:	f7fc fecb 	bl	8000290 <__aeabi_dsub>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4682      	mov	sl, r0
 8003500:	468b      	mov	fp, r1
 8003502:	4640      	mov	r0, r8
 8003504:	4649      	mov	r1, r9
 8003506:	f7fc fec3 	bl	8000290 <__aeabi_dsub>
 800350a:	4632      	mov	r2, r6
 800350c:	463b      	mov	r3, r7
 800350e:	f7fc febf 	bl	8000290 <__aeabi_dsub>
 8003512:	a31b      	add	r3, pc, #108	; (adr r3, 8003580 <__ieee754_rem_pio2+0x310>)
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	4606      	mov	r6, r0
 800351a:	460f      	mov	r7, r1
 800351c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003520:	f7fd f86e 	bl	8000600 <__aeabi_dmul>
 8003524:	4632      	mov	r2, r6
 8003526:	463b      	mov	r3, r7
 8003528:	f7fc feb2 	bl	8000290 <__aeabi_dsub>
 800352c:	4606      	mov	r6, r0
 800352e:	460f      	mov	r7, r1
 8003530:	e764      	b.n	80033fc <__ieee754_rem_pio2+0x18c>
 8003532:	4b1b      	ldr	r3, [pc, #108]	; (80035a0 <__ieee754_rem_pio2+0x330>)
 8003534:	4598      	cmp	r8, r3
 8003536:	dd35      	ble.n	80035a4 <__ieee754_rem_pio2+0x334>
 8003538:	ee10 2a10 	vmov	r2, s0
 800353c:	463b      	mov	r3, r7
 800353e:	4630      	mov	r0, r6
 8003540:	4639      	mov	r1, r7
 8003542:	f7fc fea5 	bl	8000290 <__aeabi_dsub>
 8003546:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800354a:	e9c4 0100 	strd	r0, r1, [r4]
 800354e:	e6a1      	b.n	8003294 <__ieee754_rem_pio2+0x24>
 8003550:	54400000 	.word	0x54400000
 8003554:	3ff921fb 	.word	0x3ff921fb
 8003558:	1a626331 	.word	0x1a626331
 800355c:	3dd0b461 	.word	0x3dd0b461
 8003560:	1a600000 	.word	0x1a600000
 8003564:	3dd0b461 	.word	0x3dd0b461
 8003568:	2e037073 	.word	0x2e037073
 800356c:	3ba3198a 	.word	0x3ba3198a
 8003570:	6dc9c883 	.word	0x6dc9c883
 8003574:	3fe45f30 	.word	0x3fe45f30
 8003578:	2e000000 	.word	0x2e000000
 800357c:	3ba3198a 	.word	0x3ba3198a
 8003580:	252049c1 	.word	0x252049c1
 8003584:	397b839a 	.word	0x397b839a
 8003588:	3fe921fb 	.word	0x3fe921fb
 800358c:	4002d97b 	.word	0x4002d97b
 8003590:	3ff921fb 	.word	0x3ff921fb
 8003594:	413921fb 	.word	0x413921fb
 8003598:	3fe00000 	.word	0x3fe00000
 800359c:	080176a0 	.word	0x080176a0
 80035a0:	7fefffff 	.word	0x7fefffff
 80035a4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80035a8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80035ac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80035b0:	4630      	mov	r0, r6
 80035b2:	460f      	mov	r7, r1
 80035b4:	f7fd fabe 	bl	8000b34 <__aeabi_d2iz>
 80035b8:	f7fc ffb8 	bl	800052c <__aeabi_i2d>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4630      	mov	r0, r6
 80035c2:	4639      	mov	r1, r7
 80035c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80035c8:	f7fc fe62 	bl	8000290 <__aeabi_dsub>
 80035cc:	2200      	movs	r2, #0
 80035ce:	4b1f      	ldr	r3, [pc, #124]	; (800364c <__ieee754_rem_pio2+0x3dc>)
 80035d0:	f7fd f816 	bl	8000600 <__aeabi_dmul>
 80035d4:	460f      	mov	r7, r1
 80035d6:	4606      	mov	r6, r0
 80035d8:	f7fd faac 	bl	8000b34 <__aeabi_d2iz>
 80035dc:	f7fc ffa6 	bl	800052c <__aeabi_i2d>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4630      	mov	r0, r6
 80035e6:	4639      	mov	r1, r7
 80035e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80035ec:	f7fc fe50 	bl	8000290 <__aeabi_dsub>
 80035f0:	2200      	movs	r2, #0
 80035f2:	4b16      	ldr	r3, [pc, #88]	; (800364c <__ieee754_rem_pio2+0x3dc>)
 80035f4:	f7fd f804 	bl	8000600 <__aeabi_dmul>
 80035f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80035fc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003600:	f04f 0803 	mov.w	r8, #3
 8003604:	2600      	movs	r6, #0
 8003606:	2700      	movs	r7, #0
 8003608:	4632      	mov	r2, r6
 800360a:	463b      	mov	r3, r7
 800360c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003610:	f108 3aff 	add.w	sl, r8, #4294967295
 8003614:	f7fd fa5c 	bl	8000ad0 <__aeabi_dcmpeq>
 8003618:	b9b0      	cbnz	r0, 8003648 <__ieee754_rem_pio2+0x3d8>
 800361a:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <__ieee754_rem_pio2+0x3e0>)
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	2302      	movs	r3, #2
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	462a      	mov	r2, r5
 8003624:	4643      	mov	r3, r8
 8003626:	4621      	mov	r1, r4
 8003628:	a806      	add	r0, sp, #24
 800362a:	f000 f8e1 	bl	80037f0 <__kernel_rem_pio2>
 800362e:	9b04      	ldr	r3, [sp, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	4605      	mov	r5, r0
 8003634:	f6bf ae58 	bge.w	80032e8 <__ieee754_rem_pio2+0x78>
 8003638:	6863      	ldr	r3, [r4, #4]
 800363a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800363e:	6063      	str	r3, [r4, #4]
 8003640:	68e3      	ldr	r3, [r4, #12]
 8003642:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003646:	e746      	b.n	80034d6 <__ieee754_rem_pio2+0x266>
 8003648:	46d0      	mov	r8, sl
 800364a:	e7dd      	b.n	8003608 <__ieee754_rem_pio2+0x398>
 800364c:	41700000 	.word	0x41700000
 8003650:	08017720 	.word	0x08017720

08003654 <__ieee754_sqrtf>:
 8003654:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8003658:	4770      	bx	lr
 800365a:	0000      	movs	r0, r0
 800365c:	0000      	movs	r0, r0
	...

08003660 <__kernel_cos>:
 8003660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003664:	ec59 8b10 	vmov	r8, r9, d0
 8003668:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800366c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8003670:	ed2d 8b02 	vpush	{d8}
 8003674:	eeb0 8a41 	vmov.f32	s16, s2
 8003678:	eef0 8a61 	vmov.f32	s17, s3
 800367c:	da07      	bge.n	800368e <__kernel_cos+0x2e>
 800367e:	ee10 0a10 	vmov	r0, s0
 8003682:	4649      	mov	r1, r9
 8003684:	f7fd fa56 	bl	8000b34 <__aeabi_d2iz>
 8003688:	2800      	cmp	r0, #0
 800368a:	f000 8089 	beq.w	80037a0 <__kernel_cos+0x140>
 800368e:	4642      	mov	r2, r8
 8003690:	464b      	mov	r3, r9
 8003692:	4640      	mov	r0, r8
 8003694:	4649      	mov	r1, r9
 8003696:	f7fc ffb3 	bl	8000600 <__aeabi_dmul>
 800369a:	2200      	movs	r2, #0
 800369c:	4b4e      	ldr	r3, [pc, #312]	; (80037d8 <__kernel_cos+0x178>)
 800369e:	4604      	mov	r4, r0
 80036a0:	460d      	mov	r5, r1
 80036a2:	f7fc ffad 	bl	8000600 <__aeabi_dmul>
 80036a6:	a340      	add	r3, pc, #256	; (adr r3, 80037a8 <__kernel_cos+0x148>)
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	4682      	mov	sl, r0
 80036ae:	468b      	mov	fp, r1
 80036b0:	4620      	mov	r0, r4
 80036b2:	4629      	mov	r1, r5
 80036b4:	f7fc ffa4 	bl	8000600 <__aeabi_dmul>
 80036b8:	a33d      	add	r3, pc, #244	; (adr r3, 80037b0 <__kernel_cos+0x150>)
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	f7fc fde9 	bl	8000294 <__adddf3>
 80036c2:	4622      	mov	r2, r4
 80036c4:	462b      	mov	r3, r5
 80036c6:	f7fc ff9b 	bl	8000600 <__aeabi_dmul>
 80036ca:	a33b      	add	r3, pc, #236	; (adr r3, 80037b8 <__kernel_cos+0x158>)
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	f7fc fdde 	bl	8000290 <__aeabi_dsub>
 80036d4:	4622      	mov	r2, r4
 80036d6:	462b      	mov	r3, r5
 80036d8:	f7fc ff92 	bl	8000600 <__aeabi_dmul>
 80036dc:	a338      	add	r3, pc, #224	; (adr r3, 80037c0 <__kernel_cos+0x160>)
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	f7fc fdd7 	bl	8000294 <__adddf3>
 80036e6:	4622      	mov	r2, r4
 80036e8:	462b      	mov	r3, r5
 80036ea:	f7fc ff89 	bl	8000600 <__aeabi_dmul>
 80036ee:	a336      	add	r3, pc, #216	; (adr r3, 80037c8 <__kernel_cos+0x168>)
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f7fc fdcc 	bl	8000290 <__aeabi_dsub>
 80036f8:	4622      	mov	r2, r4
 80036fa:	462b      	mov	r3, r5
 80036fc:	f7fc ff80 	bl	8000600 <__aeabi_dmul>
 8003700:	a333      	add	r3, pc, #204	; (adr r3, 80037d0 <__kernel_cos+0x170>)
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	f7fc fdc5 	bl	8000294 <__adddf3>
 800370a:	4622      	mov	r2, r4
 800370c:	462b      	mov	r3, r5
 800370e:	f7fc ff77 	bl	8000600 <__aeabi_dmul>
 8003712:	4622      	mov	r2, r4
 8003714:	462b      	mov	r3, r5
 8003716:	f7fc ff73 	bl	8000600 <__aeabi_dmul>
 800371a:	ec53 2b18 	vmov	r2, r3, d8
 800371e:	4604      	mov	r4, r0
 8003720:	460d      	mov	r5, r1
 8003722:	4640      	mov	r0, r8
 8003724:	4649      	mov	r1, r9
 8003726:	f7fc ff6b 	bl	8000600 <__aeabi_dmul>
 800372a:	460b      	mov	r3, r1
 800372c:	4602      	mov	r2, r0
 800372e:	4629      	mov	r1, r5
 8003730:	4620      	mov	r0, r4
 8003732:	f7fc fdad 	bl	8000290 <__aeabi_dsub>
 8003736:	4b29      	ldr	r3, [pc, #164]	; (80037dc <__kernel_cos+0x17c>)
 8003738:	429e      	cmp	r6, r3
 800373a:	4680      	mov	r8, r0
 800373c:	4689      	mov	r9, r1
 800373e:	dc11      	bgt.n	8003764 <__kernel_cos+0x104>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4650      	mov	r0, sl
 8003746:	4659      	mov	r1, fp
 8003748:	f7fc fda2 	bl	8000290 <__aeabi_dsub>
 800374c:	460b      	mov	r3, r1
 800374e:	4924      	ldr	r1, [pc, #144]	; (80037e0 <__kernel_cos+0x180>)
 8003750:	4602      	mov	r2, r0
 8003752:	2000      	movs	r0, #0
 8003754:	f7fc fd9c 	bl	8000290 <__aeabi_dsub>
 8003758:	ecbd 8b02 	vpop	{d8}
 800375c:	ec41 0b10 	vmov	d0, r0, r1
 8003760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003764:	4b1f      	ldr	r3, [pc, #124]	; (80037e4 <__kernel_cos+0x184>)
 8003766:	491e      	ldr	r1, [pc, #120]	; (80037e0 <__kernel_cos+0x180>)
 8003768:	429e      	cmp	r6, r3
 800376a:	bfcc      	ite	gt
 800376c:	4d1e      	ldrgt	r5, [pc, #120]	; (80037e8 <__kernel_cos+0x188>)
 800376e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8003772:	2400      	movs	r4, #0
 8003774:	4622      	mov	r2, r4
 8003776:	462b      	mov	r3, r5
 8003778:	2000      	movs	r0, #0
 800377a:	f7fc fd89 	bl	8000290 <__aeabi_dsub>
 800377e:	4622      	mov	r2, r4
 8003780:	4606      	mov	r6, r0
 8003782:	460f      	mov	r7, r1
 8003784:	462b      	mov	r3, r5
 8003786:	4650      	mov	r0, sl
 8003788:	4659      	mov	r1, fp
 800378a:	f7fc fd81 	bl	8000290 <__aeabi_dsub>
 800378e:	4642      	mov	r2, r8
 8003790:	464b      	mov	r3, r9
 8003792:	f7fc fd7d 	bl	8000290 <__aeabi_dsub>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4630      	mov	r0, r6
 800379c:	4639      	mov	r1, r7
 800379e:	e7d9      	b.n	8003754 <__kernel_cos+0xf4>
 80037a0:	2000      	movs	r0, #0
 80037a2:	490f      	ldr	r1, [pc, #60]	; (80037e0 <__kernel_cos+0x180>)
 80037a4:	e7d8      	b.n	8003758 <__kernel_cos+0xf8>
 80037a6:	bf00      	nop
 80037a8:	be8838d4 	.word	0xbe8838d4
 80037ac:	bda8fae9 	.word	0xbda8fae9
 80037b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80037b4:	3e21ee9e 	.word	0x3e21ee9e
 80037b8:	809c52ad 	.word	0x809c52ad
 80037bc:	3e927e4f 	.word	0x3e927e4f
 80037c0:	19cb1590 	.word	0x19cb1590
 80037c4:	3efa01a0 	.word	0x3efa01a0
 80037c8:	16c15177 	.word	0x16c15177
 80037cc:	3f56c16c 	.word	0x3f56c16c
 80037d0:	5555554c 	.word	0x5555554c
 80037d4:	3fa55555 	.word	0x3fa55555
 80037d8:	3fe00000 	.word	0x3fe00000
 80037dc:	3fd33332 	.word	0x3fd33332
 80037e0:	3ff00000 	.word	0x3ff00000
 80037e4:	3fe90000 	.word	0x3fe90000
 80037e8:	3fd20000 	.word	0x3fd20000
 80037ec:	00000000 	.word	0x00000000

080037f0 <__kernel_rem_pio2>:
 80037f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f4:	ed2d 8b02 	vpush	{d8}
 80037f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80037fc:	1ed4      	subs	r4, r2, #3
 80037fe:	9308      	str	r3, [sp, #32]
 8003800:	9101      	str	r1, [sp, #4]
 8003802:	4bc5      	ldr	r3, [pc, #788]	; (8003b18 <__kernel_rem_pio2+0x328>)
 8003804:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8003806:	9009      	str	r0, [sp, #36]	; 0x24
 8003808:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800380c:	9304      	str	r3, [sp, #16]
 800380e:	9b08      	ldr	r3, [sp, #32]
 8003810:	3b01      	subs	r3, #1
 8003812:	9307      	str	r3, [sp, #28]
 8003814:	2318      	movs	r3, #24
 8003816:	fb94 f4f3 	sdiv	r4, r4, r3
 800381a:	f06f 0317 	mvn.w	r3, #23
 800381e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003822:	fb04 3303 	mla	r3, r4, r3, r3
 8003826:	eb03 0a02 	add.w	sl, r3, r2
 800382a:	9b04      	ldr	r3, [sp, #16]
 800382c:	9a07      	ldr	r2, [sp, #28]
 800382e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8003b08 <__kernel_rem_pio2+0x318>
 8003832:	eb03 0802 	add.w	r8, r3, r2
 8003836:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003838:	1aa7      	subs	r7, r4, r2
 800383a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800383e:	ae22      	add	r6, sp, #136	; 0x88
 8003840:	2500      	movs	r5, #0
 8003842:	4545      	cmp	r5, r8
 8003844:	dd13      	ble.n	800386e <__kernel_rem_pio2+0x7e>
 8003846:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8003b08 <__kernel_rem_pio2+0x318>
 800384a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800384e:	2600      	movs	r6, #0
 8003850:	9b04      	ldr	r3, [sp, #16]
 8003852:	429e      	cmp	r6, r3
 8003854:	dc32      	bgt.n	80038bc <__kernel_rem_pio2+0xcc>
 8003856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003858:	9302      	str	r3, [sp, #8]
 800385a:	9b08      	ldr	r3, [sp, #32]
 800385c:	199d      	adds	r5, r3, r6
 800385e:	ab22      	add	r3, sp, #136	; 0x88
 8003860:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003864:	9306      	str	r3, [sp, #24]
 8003866:	ec59 8b18 	vmov	r8, r9, d8
 800386a:	2700      	movs	r7, #0
 800386c:	e01f      	b.n	80038ae <__kernel_rem_pio2+0xbe>
 800386e:	42ef      	cmn	r7, r5
 8003870:	d407      	bmi.n	8003882 <__kernel_rem_pio2+0x92>
 8003872:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003876:	f7fc fe59 	bl	800052c <__aeabi_i2d>
 800387a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800387e:	3501      	adds	r5, #1
 8003880:	e7df      	b.n	8003842 <__kernel_rem_pio2+0x52>
 8003882:	ec51 0b18 	vmov	r0, r1, d8
 8003886:	e7f8      	b.n	800387a <__kernel_rem_pio2+0x8a>
 8003888:	9906      	ldr	r1, [sp, #24]
 800388a:	9d02      	ldr	r5, [sp, #8]
 800388c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003890:	9106      	str	r1, [sp, #24]
 8003892:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8003896:	9502      	str	r5, [sp, #8]
 8003898:	f7fc feb2 	bl	8000600 <__aeabi_dmul>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4640      	mov	r0, r8
 80038a2:	4649      	mov	r1, r9
 80038a4:	f7fc fcf6 	bl	8000294 <__adddf3>
 80038a8:	3701      	adds	r7, #1
 80038aa:	4680      	mov	r8, r0
 80038ac:	4689      	mov	r9, r1
 80038ae:	9b07      	ldr	r3, [sp, #28]
 80038b0:	429f      	cmp	r7, r3
 80038b2:	dde9      	ble.n	8003888 <__kernel_rem_pio2+0x98>
 80038b4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80038b8:	3601      	adds	r6, #1
 80038ba:	e7c9      	b.n	8003850 <__kernel_rem_pio2+0x60>
 80038bc:	9b04      	ldr	r3, [sp, #16]
 80038be:	aa0e      	add	r2, sp, #56	; 0x38
 80038c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80038c4:	930c      	str	r3, [sp, #48]	; 0x30
 80038c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80038c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80038cc:	9c04      	ldr	r4, [sp, #16]
 80038ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80038d0:	ab9a      	add	r3, sp, #616	; 0x268
 80038d2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80038d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80038da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80038de:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80038e2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80038e6:	ab9a      	add	r3, sp, #616	; 0x268
 80038e8:	445b      	add	r3, fp
 80038ea:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80038ee:	2500      	movs	r5, #0
 80038f0:	1b63      	subs	r3, r4, r5
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	dc78      	bgt.n	80039e8 <__kernel_rem_pio2+0x1f8>
 80038f6:	4650      	mov	r0, sl
 80038f8:	ec49 8b10 	vmov	d0, r8, r9
 80038fc:	f000 fc04 	bl	8004108 <scalbn>
 8003900:	ec57 6b10 	vmov	r6, r7, d0
 8003904:	2200      	movs	r2, #0
 8003906:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800390a:	ee10 0a10 	vmov	r0, s0
 800390e:	4639      	mov	r1, r7
 8003910:	f7fc fe76 	bl	8000600 <__aeabi_dmul>
 8003914:	ec41 0b10 	vmov	d0, r0, r1
 8003918:	f000 fb6e 	bl	8003ff8 <floor>
 800391c:	2200      	movs	r2, #0
 800391e:	ec51 0b10 	vmov	r0, r1, d0
 8003922:	4b7e      	ldr	r3, [pc, #504]	; (8003b1c <__kernel_rem_pio2+0x32c>)
 8003924:	f7fc fe6c 	bl	8000600 <__aeabi_dmul>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4630      	mov	r0, r6
 800392e:	4639      	mov	r1, r7
 8003930:	f7fc fcae 	bl	8000290 <__aeabi_dsub>
 8003934:	460f      	mov	r7, r1
 8003936:	4606      	mov	r6, r0
 8003938:	f7fd f8fc 	bl	8000b34 <__aeabi_d2iz>
 800393c:	9006      	str	r0, [sp, #24]
 800393e:	f7fc fdf5 	bl	800052c <__aeabi_i2d>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4630      	mov	r0, r6
 8003948:	4639      	mov	r1, r7
 800394a:	f7fc fca1 	bl	8000290 <__aeabi_dsub>
 800394e:	f1ba 0f00 	cmp.w	sl, #0
 8003952:	4606      	mov	r6, r0
 8003954:	460f      	mov	r7, r1
 8003956:	dd6c      	ble.n	8003a32 <__kernel_rem_pio2+0x242>
 8003958:	1e62      	subs	r2, r4, #1
 800395a:	ab0e      	add	r3, sp, #56	; 0x38
 800395c:	f1ca 0118 	rsb	r1, sl, #24
 8003960:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003964:	9d06      	ldr	r5, [sp, #24]
 8003966:	fa40 f301 	asr.w	r3, r0, r1
 800396a:	441d      	add	r5, r3
 800396c:	408b      	lsls	r3, r1
 800396e:	1ac0      	subs	r0, r0, r3
 8003970:	ab0e      	add	r3, sp, #56	; 0x38
 8003972:	9506      	str	r5, [sp, #24]
 8003974:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003978:	f1ca 0317 	rsb	r3, sl, #23
 800397c:	fa40 f303 	asr.w	r3, r0, r3
 8003980:	9302      	str	r3, [sp, #8]
 8003982:	9b02      	ldr	r3, [sp, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	dd62      	ble.n	8003a4e <__kernel_rem_pio2+0x25e>
 8003988:	9b06      	ldr	r3, [sp, #24]
 800398a:	2200      	movs	r2, #0
 800398c:	3301      	adds	r3, #1
 800398e:	9306      	str	r3, [sp, #24]
 8003990:	4615      	mov	r5, r2
 8003992:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003996:	4294      	cmp	r4, r2
 8003998:	f300 8095 	bgt.w	8003ac6 <__kernel_rem_pio2+0x2d6>
 800399c:	f1ba 0f00 	cmp.w	sl, #0
 80039a0:	dd07      	ble.n	80039b2 <__kernel_rem_pio2+0x1c2>
 80039a2:	f1ba 0f01 	cmp.w	sl, #1
 80039a6:	f000 80a2 	beq.w	8003aee <__kernel_rem_pio2+0x2fe>
 80039aa:	f1ba 0f02 	cmp.w	sl, #2
 80039ae:	f000 80c1 	beq.w	8003b34 <__kernel_rem_pio2+0x344>
 80039b2:	9b02      	ldr	r3, [sp, #8]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d14a      	bne.n	8003a4e <__kernel_rem_pio2+0x25e>
 80039b8:	4632      	mov	r2, r6
 80039ba:	463b      	mov	r3, r7
 80039bc:	2000      	movs	r0, #0
 80039be:	4958      	ldr	r1, [pc, #352]	; (8003b20 <__kernel_rem_pio2+0x330>)
 80039c0:	f7fc fc66 	bl	8000290 <__aeabi_dsub>
 80039c4:	4606      	mov	r6, r0
 80039c6:	460f      	mov	r7, r1
 80039c8:	2d00      	cmp	r5, #0
 80039ca:	d040      	beq.n	8003a4e <__kernel_rem_pio2+0x25e>
 80039cc:	4650      	mov	r0, sl
 80039ce:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8003b10 <__kernel_rem_pio2+0x320>
 80039d2:	f000 fb99 	bl	8004108 <scalbn>
 80039d6:	4630      	mov	r0, r6
 80039d8:	4639      	mov	r1, r7
 80039da:	ec53 2b10 	vmov	r2, r3, d0
 80039de:	f7fc fc57 	bl	8000290 <__aeabi_dsub>
 80039e2:	4606      	mov	r6, r0
 80039e4:	460f      	mov	r7, r1
 80039e6:	e032      	b.n	8003a4e <__kernel_rem_pio2+0x25e>
 80039e8:	2200      	movs	r2, #0
 80039ea:	4b4e      	ldr	r3, [pc, #312]	; (8003b24 <__kernel_rem_pio2+0x334>)
 80039ec:	4640      	mov	r0, r8
 80039ee:	4649      	mov	r1, r9
 80039f0:	f7fc fe06 	bl	8000600 <__aeabi_dmul>
 80039f4:	f7fd f89e 	bl	8000b34 <__aeabi_d2iz>
 80039f8:	f7fc fd98 	bl	800052c <__aeabi_i2d>
 80039fc:	2200      	movs	r2, #0
 80039fe:	4b4a      	ldr	r3, [pc, #296]	; (8003b28 <__kernel_rem_pio2+0x338>)
 8003a00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a04:	f7fc fdfc 	bl	8000600 <__aeabi_dmul>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4640      	mov	r0, r8
 8003a0e:	4649      	mov	r1, r9
 8003a10:	f7fc fc3e 	bl	8000290 <__aeabi_dsub>
 8003a14:	f7fd f88e 	bl	8000b34 <__aeabi_d2iz>
 8003a18:	ab0e      	add	r3, sp, #56	; 0x38
 8003a1a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8003a1e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8003a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a26:	f7fc fc35 	bl	8000294 <__adddf3>
 8003a2a:	3501      	adds	r5, #1
 8003a2c:	4680      	mov	r8, r0
 8003a2e:	4689      	mov	r9, r1
 8003a30:	e75e      	b.n	80038f0 <__kernel_rem_pio2+0x100>
 8003a32:	d105      	bne.n	8003a40 <__kernel_rem_pio2+0x250>
 8003a34:	1e63      	subs	r3, r4, #1
 8003a36:	aa0e      	add	r2, sp, #56	; 0x38
 8003a38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003a3c:	15c3      	asrs	r3, r0, #23
 8003a3e:	e79f      	b.n	8003980 <__kernel_rem_pio2+0x190>
 8003a40:	2200      	movs	r2, #0
 8003a42:	4b3a      	ldr	r3, [pc, #232]	; (8003b2c <__kernel_rem_pio2+0x33c>)
 8003a44:	f7fd f862 	bl	8000b0c <__aeabi_dcmpge>
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	d139      	bne.n	8003ac0 <__kernel_rem_pio2+0x2d0>
 8003a4c:	9002      	str	r0, [sp, #8]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2300      	movs	r3, #0
 8003a52:	4630      	mov	r0, r6
 8003a54:	4639      	mov	r1, r7
 8003a56:	f7fd f83b 	bl	8000ad0 <__aeabi_dcmpeq>
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	f000 80c7 	beq.w	8003bee <__kernel_rem_pio2+0x3fe>
 8003a60:	1e65      	subs	r5, r4, #1
 8003a62:	462b      	mov	r3, r5
 8003a64:	2200      	movs	r2, #0
 8003a66:	9904      	ldr	r1, [sp, #16]
 8003a68:	428b      	cmp	r3, r1
 8003a6a:	da6a      	bge.n	8003b42 <__kernel_rem_pio2+0x352>
 8003a6c:	2a00      	cmp	r2, #0
 8003a6e:	f000 8088 	beq.w	8003b82 <__kernel_rem_pio2+0x392>
 8003a72:	ab0e      	add	r3, sp, #56	; 0x38
 8003a74:	f1aa 0a18 	sub.w	sl, sl, #24
 8003a78:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80b4 	beq.w	8003bea <__kernel_rem_pio2+0x3fa>
 8003a82:	4650      	mov	r0, sl
 8003a84:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8003b10 <__kernel_rem_pio2+0x320>
 8003a88:	f000 fb3e 	bl	8004108 <scalbn>
 8003a8c:	00ec      	lsls	r4, r5, #3
 8003a8e:	ab72      	add	r3, sp, #456	; 0x1c8
 8003a90:	191e      	adds	r6, r3, r4
 8003a92:	ec59 8b10 	vmov	r8, r9, d0
 8003a96:	f106 0a08 	add.w	sl, r6, #8
 8003a9a:	462f      	mov	r7, r5
 8003a9c:	2f00      	cmp	r7, #0
 8003a9e:	f280 80df 	bge.w	8003c60 <__kernel_rem_pio2+0x470>
 8003aa2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8003b08 <__kernel_rem_pio2+0x318>
 8003aa6:	f04f 0a00 	mov.w	sl, #0
 8003aaa:	eba5 030a 	sub.w	r3, r5, sl
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f2c0 810a 	blt.w	8003cc8 <__kernel_rem_pio2+0x4d8>
 8003ab4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8003b30 <__kernel_rem_pio2+0x340>
 8003ab8:	ec59 8b18 	vmov	r8, r9, d8
 8003abc:	2700      	movs	r7, #0
 8003abe:	e0f5      	b.n	8003cac <__kernel_rem_pio2+0x4bc>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	9302      	str	r3, [sp, #8]
 8003ac4:	e760      	b.n	8003988 <__kernel_rem_pio2+0x198>
 8003ac6:	ab0e      	add	r3, sp, #56	; 0x38
 8003ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003acc:	b94d      	cbnz	r5, 8003ae2 <__kernel_rem_pio2+0x2f2>
 8003ace:	b12b      	cbz	r3, 8003adc <__kernel_rem_pio2+0x2ec>
 8003ad0:	a80e      	add	r0, sp, #56	; 0x38
 8003ad2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003ad6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003ada:	2301      	movs	r3, #1
 8003adc:	3201      	adds	r2, #1
 8003ade:	461d      	mov	r5, r3
 8003ae0:	e759      	b.n	8003996 <__kernel_rem_pio2+0x1a6>
 8003ae2:	a80e      	add	r0, sp, #56	; 0x38
 8003ae4:	1acb      	subs	r3, r1, r3
 8003ae6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003aea:	462b      	mov	r3, r5
 8003aec:	e7f6      	b.n	8003adc <__kernel_rem_pio2+0x2ec>
 8003aee:	1e62      	subs	r2, r4, #1
 8003af0:	ab0e      	add	r3, sp, #56	; 0x38
 8003af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003afa:	a90e      	add	r1, sp, #56	; 0x38
 8003afc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003b00:	e757      	b.n	80039b2 <__kernel_rem_pio2+0x1c2>
 8003b02:	bf00      	nop
 8003b04:	f3af 8000 	nop.w
	...
 8003b14:	3ff00000 	.word	0x3ff00000
 8003b18:	08017868 	.word	0x08017868
 8003b1c:	40200000 	.word	0x40200000
 8003b20:	3ff00000 	.word	0x3ff00000
 8003b24:	3e700000 	.word	0x3e700000
 8003b28:	41700000 	.word	0x41700000
 8003b2c:	3fe00000 	.word	0x3fe00000
 8003b30:	08017828 	.word	0x08017828
 8003b34:	1e62      	subs	r2, r4, #1
 8003b36:	ab0e      	add	r3, sp, #56	; 0x38
 8003b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b3c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003b40:	e7db      	b.n	8003afa <__kernel_rem_pio2+0x30a>
 8003b42:	a90e      	add	r1, sp, #56	; 0x38
 8003b44:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	e78b      	b.n	8003a66 <__kernel_rem_pio2+0x276>
 8003b4e:	3301      	adds	r3, #1
 8003b50:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003b54:	2900      	cmp	r1, #0
 8003b56:	d0fa      	beq.n	8003b4e <__kernel_rem_pio2+0x35e>
 8003b58:	9a08      	ldr	r2, [sp, #32]
 8003b5a:	4422      	add	r2, r4
 8003b5c:	00d2      	lsls	r2, r2, #3
 8003b5e:	a922      	add	r1, sp, #136	; 0x88
 8003b60:	18e3      	adds	r3, r4, r3
 8003b62:	9206      	str	r2, [sp, #24]
 8003b64:	440a      	add	r2, r1
 8003b66:	9302      	str	r3, [sp, #8]
 8003b68:	f10b 0108 	add.w	r1, fp, #8
 8003b6c:	f102 0308 	add.w	r3, r2, #8
 8003b70:	1c66      	adds	r6, r4, #1
 8003b72:	910a      	str	r1, [sp, #40]	; 0x28
 8003b74:	2500      	movs	r5, #0
 8003b76:	930d      	str	r3, [sp, #52]	; 0x34
 8003b78:	9b02      	ldr	r3, [sp, #8]
 8003b7a:	42b3      	cmp	r3, r6
 8003b7c:	da04      	bge.n	8003b88 <__kernel_rem_pio2+0x398>
 8003b7e:	461c      	mov	r4, r3
 8003b80:	e6a6      	b.n	80038d0 <__kernel_rem_pio2+0xe0>
 8003b82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b84:	2301      	movs	r3, #1
 8003b86:	e7e3      	b.n	8003b50 <__kernel_rem_pio2+0x360>
 8003b88:	9b06      	ldr	r3, [sp, #24]
 8003b8a:	18ef      	adds	r7, r5, r3
 8003b8c:	ab22      	add	r3, sp, #136	; 0x88
 8003b8e:	441f      	add	r7, r3
 8003b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b92:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003b96:	f7fc fcc9 	bl	800052c <__aeabi_i2d>
 8003b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b9c:	461c      	mov	r4, r3
 8003b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ba0:	e9c7 0100 	strd	r0, r1, [r7]
 8003ba4:	eb03 0b05 	add.w	fp, r3, r5
 8003ba8:	2700      	movs	r7, #0
 8003baa:	f04f 0800 	mov.w	r8, #0
 8003bae:	f04f 0900 	mov.w	r9, #0
 8003bb2:	9b07      	ldr	r3, [sp, #28]
 8003bb4:	429f      	cmp	r7, r3
 8003bb6:	dd08      	ble.n	8003bca <__kernel_rem_pio2+0x3da>
 8003bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bba:	aa72      	add	r2, sp, #456	; 0x1c8
 8003bbc:	18eb      	adds	r3, r5, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8003bc4:	3601      	adds	r6, #1
 8003bc6:	3508      	adds	r5, #8
 8003bc8:	e7d6      	b.n	8003b78 <__kernel_rem_pio2+0x388>
 8003bca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003bce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003bd2:	f7fc fd15 	bl	8000600 <__aeabi_dmul>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4640      	mov	r0, r8
 8003bdc:	4649      	mov	r1, r9
 8003bde:	f7fc fb59 	bl	8000294 <__adddf3>
 8003be2:	3701      	adds	r7, #1
 8003be4:	4680      	mov	r8, r0
 8003be6:	4689      	mov	r9, r1
 8003be8:	e7e3      	b.n	8003bb2 <__kernel_rem_pio2+0x3c2>
 8003bea:	3d01      	subs	r5, #1
 8003bec:	e741      	b.n	8003a72 <__kernel_rem_pio2+0x282>
 8003bee:	f1ca 0000 	rsb	r0, sl, #0
 8003bf2:	ec47 6b10 	vmov	d0, r6, r7
 8003bf6:	f000 fa87 	bl	8004108 <scalbn>
 8003bfa:	ec57 6b10 	vmov	r6, r7, d0
 8003bfe:	2200      	movs	r2, #0
 8003c00:	4b99      	ldr	r3, [pc, #612]	; (8003e68 <__kernel_rem_pio2+0x678>)
 8003c02:	ee10 0a10 	vmov	r0, s0
 8003c06:	4639      	mov	r1, r7
 8003c08:	f7fc ff80 	bl	8000b0c <__aeabi_dcmpge>
 8003c0c:	b1f8      	cbz	r0, 8003c4e <__kernel_rem_pio2+0x45e>
 8003c0e:	2200      	movs	r2, #0
 8003c10:	4b96      	ldr	r3, [pc, #600]	; (8003e6c <__kernel_rem_pio2+0x67c>)
 8003c12:	4630      	mov	r0, r6
 8003c14:	4639      	mov	r1, r7
 8003c16:	f7fc fcf3 	bl	8000600 <__aeabi_dmul>
 8003c1a:	f7fc ff8b 	bl	8000b34 <__aeabi_d2iz>
 8003c1e:	4680      	mov	r8, r0
 8003c20:	f7fc fc84 	bl	800052c <__aeabi_i2d>
 8003c24:	2200      	movs	r2, #0
 8003c26:	4b90      	ldr	r3, [pc, #576]	; (8003e68 <__kernel_rem_pio2+0x678>)
 8003c28:	f7fc fcea 	bl	8000600 <__aeabi_dmul>
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4602      	mov	r2, r0
 8003c30:	4639      	mov	r1, r7
 8003c32:	4630      	mov	r0, r6
 8003c34:	f7fc fb2c 	bl	8000290 <__aeabi_dsub>
 8003c38:	f7fc ff7c 	bl	8000b34 <__aeabi_d2iz>
 8003c3c:	1c65      	adds	r5, r4, #1
 8003c3e:	ab0e      	add	r3, sp, #56	; 0x38
 8003c40:	f10a 0a18 	add.w	sl, sl, #24
 8003c44:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003c48:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8003c4c:	e719      	b.n	8003a82 <__kernel_rem_pio2+0x292>
 8003c4e:	4630      	mov	r0, r6
 8003c50:	4639      	mov	r1, r7
 8003c52:	f7fc ff6f 	bl	8000b34 <__aeabi_d2iz>
 8003c56:	ab0e      	add	r3, sp, #56	; 0x38
 8003c58:	4625      	mov	r5, r4
 8003c5a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003c5e:	e710      	b.n	8003a82 <__kernel_rem_pio2+0x292>
 8003c60:	ab0e      	add	r3, sp, #56	; 0x38
 8003c62:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8003c66:	f7fc fc61 	bl	800052c <__aeabi_i2d>
 8003c6a:	4642      	mov	r2, r8
 8003c6c:	464b      	mov	r3, r9
 8003c6e:	f7fc fcc7 	bl	8000600 <__aeabi_dmul>
 8003c72:	2200      	movs	r2, #0
 8003c74:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8003c78:	4b7c      	ldr	r3, [pc, #496]	; (8003e6c <__kernel_rem_pio2+0x67c>)
 8003c7a:	4640      	mov	r0, r8
 8003c7c:	4649      	mov	r1, r9
 8003c7e:	f7fc fcbf 	bl	8000600 <__aeabi_dmul>
 8003c82:	3f01      	subs	r7, #1
 8003c84:	4680      	mov	r8, r0
 8003c86:	4689      	mov	r9, r1
 8003c88:	e708      	b.n	8003a9c <__kernel_rem_pio2+0x2ac>
 8003c8a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8003c96:	f7fc fcb3 	bl	8000600 <__aeabi_dmul>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	4649      	mov	r1, r9
 8003ca2:	f7fc faf7 	bl	8000294 <__adddf3>
 8003ca6:	3701      	adds	r7, #1
 8003ca8:	4680      	mov	r8, r0
 8003caa:	4689      	mov	r9, r1
 8003cac:	9b04      	ldr	r3, [sp, #16]
 8003cae:	429f      	cmp	r7, r3
 8003cb0:	dc01      	bgt.n	8003cb6 <__kernel_rem_pio2+0x4c6>
 8003cb2:	45ba      	cmp	sl, r7
 8003cb4:	dae9      	bge.n	8003c8a <__kernel_rem_pio2+0x49a>
 8003cb6:	ab4a      	add	r3, sp, #296	; 0x128
 8003cb8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003cbc:	e9c3 8900 	strd	r8, r9, [r3]
 8003cc0:	f10a 0a01 	add.w	sl, sl, #1
 8003cc4:	3e08      	subs	r6, #8
 8003cc6:	e6f0      	b.n	8003aaa <__kernel_rem_pio2+0x2ba>
 8003cc8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d85b      	bhi.n	8003d86 <__kernel_rem_pio2+0x596>
 8003cce:	e8df f003 	tbb	[pc, r3]
 8003cd2:	264a      	.short	0x264a
 8003cd4:	0226      	.short	0x0226
 8003cd6:	ab9a      	add	r3, sp, #616	; 0x268
 8003cd8:	441c      	add	r4, r3
 8003cda:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8003cde:	46a2      	mov	sl, r4
 8003ce0:	46ab      	mov	fp, r5
 8003ce2:	f1bb 0f00 	cmp.w	fp, #0
 8003ce6:	dc6c      	bgt.n	8003dc2 <__kernel_rem_pio2+0x5d2>
 8003ce8:	46a2      	mov	sl, r4
 8003cea:	46ab      	mov	fp, r5
 8003cec:	f1bb 0f01 	cmp.w	fp, #1
 8003cf0:	f300 8086 	bgt.w	8003e00 <__kernel_rem_pio2+0x610>
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	2d01      	cmp	r5, #1
 8003cfa:	f300 80a0 	bgt.w	8003e3e <__kernel_rem_pio2+0x64e>
 8003cfe:	9b02      	ldr	r3, [sp, #8]
 8003d00:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8003d04:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f040 809e 	bne.w	8003e4a <__kernel_rem_pio2+0x65a>
 8003d0e:	9b01      	ldr	r3, [sp, #4]
 8003d10:	e9c3 7800 	strd	r7, r8, [r3]
 8003d14:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8003d18:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003d1c:	e033      	b.n	8003d86 <__kernel_rem_pio2+0x596>
 8003d1e:	3408      	adds	r4, #8
 8003d20:	ab4a      	add	r3, sp, #296	; 0x128
 8003d22:	441c      	add	r4, r3
 8003d24:	462e      	mov	r6, r5
 8003d26:	2000      	movs	r0, #0
 8003d28:	2100      	movs	r1, #0
 8003d2a:	2e00      	cmp	r6, #0
 8003d2c:	da3a      	bge.n	8003da4 <__kernel_rem_pio2+0x5b4>
 8003d2e:	9b02      	ldr	r3, [sp, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d03d      	beq.n	8003db0 <__kernel_rem_pio2+0x5c0>
 8003d34:	4602      	mov	r2, r0
 8003d36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d3a:	9c01      	ldr	r4, [sp, #4]
 8003d3c:	e9c4 2300 	strd	r2, r3, [r4]
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8003d48:	f7fc faa2 	bl	8000290 <__aeabi_dsub>
 8003d4c:	ae4c      	add	r6, sp, #304	; 0x130
 8003d4e:	2401      	movs	r4, #1
 8003d50:	42a5      	cmp	r5, r4
 8003d52:	da30      	bge.n	8003db6 <__kernel_rem_pio2+0x5c6>
 8003d54:	9b02      	ldr	r3, [sp, #8]
 8003d56:	b113      	cbz	r3, 8003d5e <__kernel_rem_pio2+0x56e>
 8003d58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	9b01      	ldr	r3, [sp, #4]
 8003d60:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003d64:	e00f      	b.n	8003d86 <__kernel_rem_pio2+0x596>
 8003d66:	ab9a      	add	r3, sp, #616	; 0x268
 8003d68:	441c      	add	r4, r3
 8003d6a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8003d6e:	2000      	movs	r0, #0
 8003d70:	2100      	movs	r1, #0
 8003d72:	2d00      	cmp	r5, #0
 8003d74:	da10      	bge.n	8003d98 <__kernel_rem_pio2+0x5a8>
 8003d76:	9b02      	ldr	r3, [sp, #8]
 8003d78:	b113      	cbz	r3, 8003d80 <__kernel_rem_pio2+0x590>
 8003d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d7e:	4619      	mov	r1, r3
 8003d80:	9b01      	ldr	r3, [sp, #4]
 8003d82:	e9c3 0100 	strd	r0, r1, [r3]
 8003d86:	9b06      	ldr	r3, [sp, #24]
 8003d88:	f003 0007 	and.w	r0, r3, #7
 8003d8c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8003d90:	ecbd 8b02 	vpop	{d8}
 8003d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d98:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003d9c:	f7fc fa7a 	bl	8000294 <__adddf3>
 8003da0:	3d01      	subs	r5, #1
 8003da2:	e7e6      	b.n	8003d72 <__kernel_rem_pio2+0x582>
 8003da4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003da8:	f7fc fa74 	bl	8000294 <__adddf3>
 8003dac:	3e01      	subs	r6, #1
 8003dae:	e7bc      	b.n	8003d2a <__kernel_rem_pio2+0x53a>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	e7c1      	b.n	8003d3a <__kernel_rem_pio2+0x54a>
 8003db6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8003dba:	f7fc fa6b 	bl	8000294 <__adddf3>
 8003dbe:	3401      	adds	r4, #1
 8003dc0:	e7c6      	b.n	8003d50 <__kernel_rem_pio2+0x560>
 8003dc2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8003dc6:	ed3a 7b02 	vldmdb	sl!, {d7}
 8003dca:	4640      	mov	r0, r8
 8003dcc:	ec53 2b17 	vmov	r2, r3, d7
 8003dd0:	4649      	mov	r1, r9
 8003dd2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003dd6:	f7fc fa5d 	bl	8000294 <__adddf3>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4606      	mov	r6, r0
 8003de0:	460f      	mov	r7, r1
 8003de2:	4640      	mov	r0, r8
 8003de4:	4649      	mov	r1, r9
 8003de6:	f7fc fa53 	bl	8000290 <__aeabi_dsub>
 8003dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dee:	f7fc fa51 	bl	8000294 <__adddf3>
 8003df2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003df6:	e9ca 0100 	strd	r0, r1, [sl]
 8003dfa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8003dfe:	e770      	b.n	8003ce2 <__kernel_rem_pio2+0x4f2>
 8003e00:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8003e04:	ed3a 7b02 	vldmdb	sl!, {d7}
 8003e08:	4630      	mov	r0, r6
 8003e0a:	ec53 2b17 	vmov	r2, r3, d7
 8003e0e:	4639      	mov	r1, r7
 8003e10:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003e14:	f7fc fa3e 	bl	8000294 <__adddf3>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4680      	mov	r8, r0
 8003e1e:	4689      	mov	r9, r1
 8003e20:	4630      	mov	r0, r6
 8003e22:	4639      	mov	r1, r7
 8003e24:	f7fc fa34 	bl	8000290 <__aeabi_dsub>
 8003e28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e2c:	f7fc fa32 	bl	8000294 <__adddf3>
 8003e30:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003e34:	e9ca 0100 	strd	r0, r1, [sl]
 8003e38:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8003e3c:	e756      	b.n	8003cec <__kernel_rem_pio2+0x4fc>
 8003e3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003e42:	f7fc fa27 	bl	8000294 <__adddf3>
 8003e46:	3d01      	subs	r5, #1
 8003e48:	e756      	b.n	8003cf8 <__kernel_rem_pio2+0x508>
 8003e4a:	9b01      	ldr	r3, [sp, #4]
 8003e4c:	9a01      	ldr	r2, [sp, #4]
 8003e4e:	601f      	str	r7, [r3, #0]
 8003e50:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8003e54:	605c      	str	r4, [r3, #4]
 8003e56:	609d      	str	r5, [r3, #8]
 8003e58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003e5c:	60d3      	str	r3, [r2, #12]
 8003e5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003e62:	6110      	str	r0, [r2, #16]
 8003e64:	6153      	str	r3, [r2, #20]
 8003e66:	e78e      	b.n	8003d86 <__kernel_rem_pio2+0x596>
 8003e68:	41700000 	.word	0x41700000
 8003e6c:	3e700000 	.word	0x3e700000

08003e70 <__kernel_sin>:
 8003e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e74:	ec55 4b10 	vmov	r4, r5, d0
 8003e78:	b085      	sub	sp, #20
 8003e7a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003e7e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003e82:	ed8d 1b00 	vstr	d1, [sp]
 8003e86:	9002      	str	r0, [sp, #8]
 8003e88:	da06      	bge.n	8003e98 <__kernel_sin+0x28>
 8003e8a:	ee10 0a10 	vmov	r0, s0
 8003e8e:	4629      	mov	r1, r5
 8003e90:	f7fc fe50 	bl	8000b34 <__aeabi_d2iz>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	d051      	beq.n	8003f3c <__kernel_sin+0xcc>
 8003e98:	4622      	mov	r2, r4
 8003e9a:	462b      	mov	r3, r5
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	f7fc fbae 	bl	8000600 <__aeabi_dmul>
 8003ea4:	4682      	mov	sl, r0
 8003ea6:	468b      	mov	fp, r1
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4620      	mov	r0, r4
 8003eae:	4629      	mov	r1, r5
 8003eb0:	f7fc fba6 	bl	8000600 <__aeabi_dmul>
 8003eb4:	a341      	add	r3, pc, #260	; (adr r3, 8003fbc <__kernel_sin+0x14c>)
 8003eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eba:	4680      	mov	r8, r0
 8003ebc:	4689      	mov	r9, r1
 8003ebe:	4650      	mov	r0, sl
 8003ec0:	4659      	mov	r1, fp
 8003ec2:	f7fc fb9d 	bl	8000600 <__aeabi_dmul>
 8003ec6:	a33f      	add	r3, pc, #252	; (adr r3, 8003fc4 <__kernel_sin+0x154>)
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	f7fc f9e0 	bl	8000290 <__aeabi_dsub>
 8003ed0:	4652      	mov	r2, sl
 8003ed2:	465b      	mov	r3, fp
 8003ed4:	f7fc fb94 	bl	8000600 <__aeabi_dmul>
 8003ed8:	a33c      	add	r3, pc, #240	; (adr r3, 8003fcc <__kernel_sin+0x15c>)
 8003eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ede:	f7fc f9d9 	bl	8000294 <__adddf3>
 8003ee2:	4652      	mov	r2, sl
 8003ee4:	465b      	mov	r3, fp
 8003ee6:	f7fc fb8b 	bl	8000600 <__aeabi_dmul>
 8003eea:	a33a      	add	r3, pc, #232	; (adr r3, 8003fd4 <__kernel_sin+0x164>)
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f7fc f9ce 	bl	8000290 <__aeabi_dsub>
 8003ef4:	4652      	mov	r2, sl
 8003ef6:	465b      	mov	r3, fp
 8003ef8:	f7fc fb82 	bl	8000600 <__aeabi_dmul>
 8003efc:	a337      	add	r3, pc, #220	; (adr r3, 8003fdc <__kernel_sin+0x16c>)
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	f7fc f9c7 	bl	8000294 <__adddf3>
 8003f06:	9b02      	ldr	r3, [sp, #8]
 8003f08:	4606      	mov	r6, r0
 8003f0a:	460f      	mov	r7, r1
 8003f0c:	b9db      	cbnz	r3, 8003f46 <__kernel_sin+0xd6>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4650      	mov	r0, sl
 8003f14:	4659      	mov	r1, fp
 8003f16:	f7fc fb73 	bl	8000600 <__aeabi_dmul>
 8003f1a:	a325      	add	r3, pc, #148	; (adr r3, 8003fb0 <__kernel_sin+0x140>)
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	f7fc f9b6 	bl	8000290 <__aeabi_dsub>
 8003f24:	4642      	mov	r2, r8
 8003f26:	464b      	mov	r3, r9
 8003f28:	f7fc fb6a 	bl	8000600 <__aeabi_dmul>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4620      	mov	r0, r4
 8003f32:	4629      	mov	r1, r5
 8003f34:	f7fc f9ae 	bl	8000294 <__adddf3>
 8003f38:	4604      	mov	r4, r0
 8003f3a:	460d      	mov	r5, r1
 8003f3c:	ec45 4b10 	vmov	d0, r4, r5
 8003f40:	b005      	add	sp, #20
 8003f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f46:	2200      	movs	r2, #0
 8003f48:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <__kernel_sin+0x148>)
 8003f4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f4e:	f7fc fb57 	bl	8000600 <__aeabi_dmul>
 8003f52:	4632      	mov	r2, r6
 8003f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f58:	463b      	mov	r3, r7
 8003f5a:	4640      	mov	r0, r8
 8003f5c:	4649      	mov	r1, r9
 8003f5e:	f7fc fb4f 	bl	8000600 <__aeabi_dmul>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f6a:	f7fc f991 	bl	8000290 <__aeabi_dsub>
 8003f6e:	4652      	mov	r2, sl
 8003f70:	465b      	mov	r3, fp
 8003f72:	f7fc fb45 	bl	8000600 <__aeabi_dmul>
 8003f76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f7a:	f7fc f989 	bl	8000290 <__aeabi_dsub>
 8003f7e:	a30c      	add	r3, pc, #48	; (adr r3, 8003fb0 <__kernel_sin+0x140>)
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	4606      	mov	r6, r0
 8003f86:	460f      	mov	r7, r1
 8003f88:	4640      	mov	r0, r8
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	f7fc fb38 	bl	8000600 <__aeabi_dmul>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4630      	mov	r0, r6
 8003f96:	4639      	mov	r1, r7
 8003f98:	f7fc f97c 	bl	8000294 <__adddf3>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	f7fc f974 	bl	8000290 <__aeabi_dsub>
 8003fa8:	e7c6      	b.n	8003f38 <__kernel_sin+0xc8>
 8003faa:	bf00      	nop
 8003fac:	f3af 8000 	nop.w
 8003fb0:	55555549 	.word	0x55555549
 8003fb4:	3fc55555 	.word	0x3fc55555
 8003fb8:	3fe00000 	.word	0x3fe00000
 8003fbc:	5acfd57c 	.word	0x5acfd57c
 8003fc0:	3de5d93a 	.word	0x3de5d93a
 8003fc4:	8a2b9ceb 	.word	0x8a2b9ceb
 8003fc8:	3e5ae5e6 	.word	0x3e5ae5e6
 8003fcc:	57b1fe7d 	.word	0x57b1fe7d
 8003fd0:	3ec71de3 	.word	0x3ec71de3
 8003fd4:	19c161d5 	.word	0x19c161d5
 8003fd8:	3f2a01a0 	.word	0x3f2a01a0
 8003fdc:	1110f8a6 	.word	0x1110f8a6
 8003fe0:	3f811111 	.word	0x3f811111

08003fe4 <fabs>:
 8003fe4:	ec51 0b10 	vmov	r0, r1, d0
 8003fe8:	ee10 2a10 	vmov	r2, s0
 8003fec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003ff0:	ec43 2b10 	vmov	d0, r2, r3
 8003ff4:	4770      	bx	lr
	...

08003ff8 <floor>:
 8003ff8:	ec51 0b10 	vmov	r0, r1, d0
 8003ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004000:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004004:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004008:	2e13      	cmp	r6, #19
 800400a:	460c      	mov	r4, r1
 800400c:	ee10 5a10 	vmov	r5, s0
 8004010:	4680      	mov	r8, r0
 8004012:	dc34      	bgt.n	800407e <floor+0x86>
 8004014:	2e00      	cmp	r6, #0
 8004016:	da16      	bge.n	8004046 <floor+0x4e>
 8004018:	a335      	add	r3, pc, #212	; (adr r3, 80040f0 <floor+0xf8>)
 800401a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401e:	f7fc f939 	bl	8000294 <__adddf3>
 8004022:	2200      	movs	r2, #0
 8004024:	2300      	movs	r3, #0
 8004026:	f7fc fd7b 	bl	8000b20 <__aeabi_dcmpgt>
 800402a:	b148      	cbz	r0, 8004040 <floor+0x48>
 800402c:	2c00      	cmp	r4, #0
 800402e:	da59      	bge.n	80040e4 <floor+0xec>
 8004030:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004034:	4a30      	ldr	r2, [pc, #192]	; (80040f8 <floor+0x100>)
 8004036:	432b      	orrs	r3, r5
 8004038:	2500      	movs	r5, #0
 800403a:	42ab      	cmp	r3, r5
 800403c:	bf18      	it	ne
 800403e:	4614      	movne	r4, r2
 8004040:	4621      	mov	r1, r4
 8004042:	4628      	mov	r0, r5
 8004044:	e025      	b.n	8004092 <floor+0x9a>
 8004046:	4f2d      	ldr	r7, [pc, #180]	; (80040fc <floor+0x104>)
 8004048:	4137      	asrs	r7, r6
 800404a:	ea01 0307 	and.w	r3, r1, r7
 800404e:	4303      	orrs	r3, r0
 8004050:	d01f      	beq.n	8004092 <floor+0x9a>
 8004052:	a327      	add	r3, pc, #156	; (adr r3, 80040f0 <floor+0xf8>)
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	f7fc f91c 	bl	8000294 <__adddf3>
 800405c:	2200      	movs	r2, #0
 800405e:	2300      	movs	r3, #0
 8004060:	f7fc fd5e 	bl	8000b20 <__aeabi_dcmpgt>
 8004064:	2800      	cmp	r0, #0
 8004066:	d0eb      	beq.n	8004040 <floor+0x48>
 8004068:	2c00      	cmp	r4, #0
 800406a:	bfbe      	ittt	lt
 800406c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004070:	fa43 f606 	asrlt.w	r6, r3, r6
 8004074:	19a4      	addlt	r4, r4, r6
 8004076:	ea24 0407 	bic.w	r4, r4, r7
 800407a:	2500      	movs	r5, #0
 800407c:	e7e0      	b.n	8004040 <floor+0x48>
 800407e:	2e33      	cmp	r6, #51	; 0x33
 8004080:	dd0b      	ble.n	800409a <floor+0xa2>
 8004082:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004086:	d104      	bne.n	8004092 <floor+0x9a>
 8004088:	ee10 2a10 	vmov	r2, s0
 800408c:	460b      	mov	r3, r1
 800408e:	f7fc f901 	bl	8000294 <__adddf3>
 8004092:	ec41 0b10 	vmov	d0, r0, r1
 8004096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800409a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800409e:	f04f 33ff 	mov.w	r3, #4294967295
 80040a2:	fa23 f707 	lsr.w	r7, r3, r7
 80040a6:	4207      	tst	r7, r0
 80040a8:	d0f3      	beq.n	8004092 <floor+0x9a>
 80040aa:	a311      	add	r3, pc, #68	; (adr r3, 80040f0 <floor+0xf8>)
 80040ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b0:	f7fc f8f0 	bl	8000294 <__adddf3>
 80040b4:	2200      	movs	r2, #0
 80040b6:	2300      	movs	r3, #0
 80040b8:	f7fc fd32 	bl	8000b20 <__aeabi_dcmpgt>
 80040bc:	2800      	cmp	r0, #0
 80040be:	d0bf      	beq.n	8004040 <floor+0x48>
 80040c0:	2c00      	cmp	r4, #0
 80040c2:	da02      	bge.n	80040ca <floor+0xd2>
 80040c4:	2e14      	cmp	r6, #20
 80040c6:	d103      	bne.n	80040d0 <floor+0xd8>
 80040c8:	3401      	adds	r4, #1
 80040ca:	ea25 0507 	bic.w	r5, r5, r7
 80040ce:	e7b7      	b.n	8004040 <floor+0x48>
 80040d0:	2301      	movs	r3, #1
 80040d2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80040d6:	fa03 f606 	lsl.w	r6, r3, r6
 80040da:	4435      	add	r5, r6
 80040dc:	4545      	cmp	r5, r8
 80040de:	bf38      	it	cc
 80040e0:	18e4      	addcc	r4, r4, r3
 80040e2:	e7f2      	b.n	80040ca <floor+0xd2>
 80040e4:	2500      	movs	r5, #0
 80040e6:	462c      	mov	r4, r5
 80040e8:	e7aa      	b.n	8004040 <floor+0x48>
 80040ea:	bf00      	nop
 80040ec:	f3af 8000 	nop.w
 80040f0:	8800759c 	.word	0x8800759c
 80040f4:	7e37e43c 	.word	0x7e37e43c
 80040f8:	bff00000 	.word	0xbff00000
 80040fc:	000fffff 	.word	0x000fffff

08004100 <matherr>:
 8004100:	2000      	movs	r0, #0
 8004102:	4770      	bx	lr
 8004104:	0000      	movs	r0, r0
	...

08004108 <scalbn>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	ec55 4b10 	vmov	r4, r5, d0
 800410e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004112:	4606      	mov	r6, r0
 8004114:	462b      	mov	r3, r5
 8004116:	b9aa      	cbnz	r2, 8004144 <scalbn+0x3c>
 8004118:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800411c:	4323      	orrs	r3, r4
 800411e:	d03b      	beq.n	8004198 <scalbn+0x90>
 8004120:	4b31      	ldr	r3, [pc, #196]	; (80041e8 <scalbn+0xe0>)
 8004122:	4629      	mov	r1, r5
 8004124:	2200      	movs	r2, #0
 8004126:	ee10 0a10 	vmov	r0, s0
 800412a:	f7fc fa69 	bl	8000600 <__aeabi_dmul>
 800412e:	4b2f      	ldr	r3, [pc, #188]	; (80041ec <scalbn+0xe4>)
 8004130:	429e      	cmp	r6, r3
 8004132:	4604      	mov	r4, r0
 8004134:	460d      	mov	r5, r1
 8004136:	da12      	bge.n	800415e <scalbn+0x56>
 8004138:	a327      	add	r3, pc, #156	; (adr r3, 80041d8 <scalbn+0xd0>)
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	f7fc fa5f 	bl	8000600 <__aeabi_dmul>
 8004142:	e009      	b.n	8004158 <scalbn+0x50>
 8004144:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004148:	428a      	cmp	r2, r1
 800414a:	d10c      	bne.n	8004166 <scalbn+0x5e>
 800414c:	ee10 2a10 	vmov	r2, s0
 8004150:	4620      	mov	r0, r4
 8004152:	4629      	mov	r1, r5
 8004154:	f7fc f89e 	bl	8000294 <__adddf3>
 8004158:	4604      	mov	r4, r0
 800415a:	460d      	mov	r5, r1
 800415c:	e01c      	b.n	8004198 <scalbn+0x90>
 800415e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004162:	460b      	mov	r3, r1
 8004164:	3a36      	subs	r2, #54	; 0x36
 8004166:	4432      	add	r2, r6
 8004168:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800416c:	428a      	cmp	r2, r1
 800416e:	dd0b      	ble.n	8004188 <scalbn+0x80>
 8004170:	ec45 4b11 	vmov	d1, r4, r5
 8004174:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80041e0 <scalbn+0xd8>
 8004178:	f000 f83c 	bl	80041f4 <copysign>
 800417c:	a318      	add	r3, pc, #96	; (adr r3, 80041e0 <scalbn+0xd8>)
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	ec51 0b10 	vmov	r0, r1, d0
 8004186:	e7da      	b.n	800413e <scalbn+0x36>
 8004188:	2a00      	cmp	r2, #0
 800418a:	dd08      	ble.n	800419e <scalbn+0x96>
 800418c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004190:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004194:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004198:	ec45 4b10 	vmov	d0, r4, r5
 800419c:	bd70      	pop	{r4, r5, r6, pc}
 800419e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80041a2:	da0d      	bge.n	80041c0 <scalbn+0xb8>
 80041a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80041a8:	429e      	cmp	r6, r3
 80041aa:	ec45 4b11 	vmov	d1, r4, r5
 80041ae:	dce1      	bgt.n	8004174 <scalbn+0x6c>
 80041b0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80041d8 <scalbn+0xd0>
 80041b4:	f000 f81e 	bl	80041f4 <copysign>
 80041b8:	a307      	add	r3, pc, #28	; (adr r3, 80041d8 <scalbn+0xd0>)
 80041ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041be:	e7e0      	b.n	8004182 <scalbn+0x7a>
 80041c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80041c4:	3236      	adds	r2, #54	; 0x36
 80041c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80041ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80041ce:	4620      	mov	r0, r4
 80041d0:	4629      	mov	r1, r5
 80041d2:	2200      	movs	r2, #0
 80041d4:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <scalbn+0xe8>)
 80041d6:	e7b2      	b.n	800413e <scalbn+0x36>
 80041d8:	c2f8f359 	.word	0xc2f8f359
 80041dc:	01a56e1f 	.word	0x01a56e1f
 80041e0:	8800759c 	.word	0x8800759c
 80041e4:	7e37e43c 	.word	0x7e37e43c
 80041e8:	43500000 	.word	0x43500000
 80041ec:	ffff3cb0 	.word	0xffff3cb0
 80041f0:	3c900000 	.word	0x3c900000

080041f4 <copysign>:
 80041f4:	ec51 0b10 	vmov	r0, r1, d0
 80041f8:	ee11 0a90 	vmov	r0, s3
 80041fc:	ee10 2a10 	vmov	r2, s0
 8004200:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004204:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8004208:	ea41 0300 	orr.w	r3, r1, r0
 800420c:	ec43 2b10 	vmov	d0, r2, r3
 8004210:	4770      	bx	lr
	...

08004214 <_init>:
 8004214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004216:	bf00      	nop
 8004218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421a:	bc08      	pop	{r3}
 800421c:	469e      	mov	lr, r3
 800421e:	4770      	bx	lr

08004220 <_fini>:
 8004220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004222:	bf00      	nop
 8004224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004226:	bc08      	pop	{r3}
 8004228:	469e      	mov	lr, r3
 800422a:	4770      	bx	lr
