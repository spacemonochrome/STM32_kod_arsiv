
STM32_OV7670_16BitLCD5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08006c10  08006c10  00016c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d50  08006d50  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006d50  08006d50  00016d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d58  08006d58  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d58  08006d58  00016d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d5c  08006d5c  00016d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ac4  20000068  08006dc8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b2c  08006dc8  00020b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125d1  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002824  00000000  00000000  00032669  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e20  00000000  00000000  00034e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  00035cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d69  00000000  00000000  000369b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dfd6  00000000  00000000  00059719  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8d54  00000000  00000000  000676ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00130443  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b0  00000000  00000000  001304c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006bf8 	.word	0x08006bf8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08006bf8 	.word	0x08006bf8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <LcdWriteReg>:

#include "ILI9341.h"
#include "stm32f4xx_hal.h"

void LcdWriteReg(unsigned short Data)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	LCD_REG = Data;
 80004d2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	8013      	strh	r3, [r2, #0]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
	...

080004e8 <LcdWriteData>:


void LcdWriteData(unsigned short Data)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	80fb      	strh	r3, [r7, #6]
	LCD_RAM = Data;
 80004f2:	4a04      	ldr	r2, [pc, #16]	; (8000504 <LcdWriteData+0x1c>)
 80004f4:	88fb      	ldrh	r3, [r7, #6]
 80004f6:	8013      	strh	r3, [r2, #0]
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	60020000 	.word	0x60020000

08000508 <LcdInit>:

void LcdInit(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0

    HAL_Delay(5);
 800050c:	2005      	movs	r0, #5
 800050e:	f001 fbf9 	bl	8001d04 <HAL_Delay>

    LcdWriteReg(ILI9341_DISPLAY_OFF);
 8000512:	2028      	movs	r0, #40	; 0x28
 8000514:	f7ff ffd8 	bl	80004c8 <LcdWriteReg>

    LcdWriteReg(ILI9341_POWERA);
 8000518:	20cb      	movs	r0, #203	; 0xcb
 800051a:	f7ff ffd5 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x39);
 800051e:	2039      	movs	r0, #57	; 0x39
 8000520:	f7ff ffe2 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x2C);
 8000524:	202c      	movs	r0, #44	; 0x2c
 8000526:	f7ff ffdf 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x00);
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff ffdc 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x34);
 8000530:	2034      	movs	r0, #52	; 0x34
 8000532:	f7ff ffd9 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x02);
 8000536:	2002      	movs	r0, #2
 8000538:	f7ff ffd6 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_POWERB);
 800053c:	20cf      	movs	r0, #207	; 0xcf
 800053e:	f7ff ffc3 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x00);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffd0 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0xC1);
 8000548:	20c1      	movs	r0, #193	; 0xc1
 800054a:	f7ff ffcd 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x30);
 800054e:	2030      	movs	r0, #48	; 0x30
 8000550:	f7ff ffca 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_DTCA);
 8000554:	20e8      	movs	r0, #232	; 0xe8
 8000556:	f7ff ffb7 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x85);
 800055a:	2085      	movs	r0, #133	; 0x85
 800055c:	f7ff ffc4 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x00);
 8000560:	2000      	movs	r0, #0
 8000562:	f7ff ffc1 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x78);
 8000566:	2078      	movs	r0, #120	; 0x78
 8000568:	f7ff ffbe 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_DTCB);
 800056c:	20ea      	movs	r0, #234	; 0xea
 800056e:	f7ff ffab 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x00);
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff ffb8 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x00);
 8000578:	2000      	movs	r0, #0
 800057a:	f7ff ffb5 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_POWER_SEQ);
 800057e:	20ed      	movs	r0, #237	; 0xed
 8000580:	f7ff ffa2 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x64);
 8000584:	2064      	movs	r0, #100	; 0x64
 8000586:	f7ff ffaf 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x03);
 800058a:	2003      	movs	r0, #3
 800058c:	f7ff ffac 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x12);
 8000590:	2012      	movs	r0, #18
 8000592:	f7ff ffa9 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x81);
 8000596:	2081      	movs	r0, #129	; 0x81
 8000598:	f7ff ffa6 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_PRC);
 800059c:	20f7      	movs	r0, #247	; 0xf7
 800059e:	f7ff ff93 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x20);
 80005a2:	2020      	movs	r0, #32
 80005a4:	f7ff ffa0 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_POWER1);
 80005a8:	20c0      	movs	r0, #192	; 0xc0
 80005aa:	f7ff ff8d 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x23);
 80005ae:	2023      	movs	r0, #35	; 0x23
 80005b0:	f7ff ff9a 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_POWER2);
 80005b4:	20c1      	movs	r0, #193	; 0xc1
 80005b6:	f7ff ff87 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x10);
 80005ba:	2010      	movs	r0, #16
 80005bc:	f7ff ff94 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_VCOM1);
 80005c0:	20c5      	movs	r0, #197	; 0xc5
 80005c2:	f7ff ff81 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x3E);
 80005c6:	203e      	movs	r0, #62	; 0x3e
 80005c8:	f7ff ff8e 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x28);
 80005cc:	2028      	movs	r0, #40	; 0x28
 80005ce:	f7ff ff8b 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_VCOM2);
 80005d2:	20c7      	movs	r0, #199	; 0xc7
 80005d4:	f7ff ff78 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x86);
 80005d8:	2086      	movs	r0, #134	; 0x86
 80005da:	f7ff ff85 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_MAC);
 80005de:	2036      	movs	r0, #54	; 0x36
 80005e0:	f7ff ff72 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x48);
 80005e4:	2048      	movs	r0, #72	; 0x48
 80005e6:	f7ff ff7f 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_PIXEL_FORMAT);
 80005ea:	203a      	movs	r0, #58	; 0x3a
 80005ec:	f7ff ff6c 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x55);
 80005f0:	2055      	movs	r0, #85	; 0x55
 80005f2:	f7ff ff79 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_FRC);
 80005f6:	20b1      	movs	r0, #177	; 0xb1
 80005f8:	f7ff ff66 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x00);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f7ff ff73 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x18);
 8000602:	2018      	movs	r0, #24
 8000604:	f7ff ff70 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_DFC);
 8000608:	20b6      	movs	r0, #182	; 0xb6
 800060a:	f7ff ff5d 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x08);
 800060e:	2008      	movs	r0, #8
 8000610:	f7ff ff6a 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x82);
 8000614:	2082      	movs	r0, #130	; 0x82
 8000616:	f7ff ff67 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x27);
 800061a:	2027      	movs	r0, #39	; 0x27
 800061c:	f7ff ff64 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_3GAMMA_EN);
 8000620:	20f2      	movs	r0, #242	; 0xf2
 8000622:	f7ff ff51 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x00);
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff ff5e 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_COLUMN_ADDR);
 800062c:	202a      	movs	r0, #42	; 0x2a
 800062e:	f7ff ff4b 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x00);
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff ff58 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x00);
 8000638:	2000      	movs	r0, #0
 800063a:	f7ff ff55 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x00);
 800063e:	2000      	movs	r0, #0
 8000640:	f7ff ff52 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0xEF);
 8000644:	20ef      	movs	r0, #239	; 0xef
 8000646:	f7ff ff4f 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_PAGE_ADDR);
 800064a:	202b      	movs	r0, #43	; 0x2b
 800064c:	f7ff ff3c 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x00);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff ff49 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x00);
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ff46 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x01);
 800065c:	2001      	movs	r0, #1
 800065e:	f7ff ff43 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x3F);
 8000662:	203f      	movs	r0, #63	; 0x3f
 8000664:	f7ff ff40 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_GAMMA);
 8000668:	2026      	movs	r0, #38	; 0x26
 800066a:	f7ff ff2d 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x01);
 800066e:	2001      	movs	r0, #1
 8000670:	f7ff ff3a 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_PGAMMA);
 8000674:	20e0      	movs	r0, #224	; 0xe0
 8000676:	f7ff ff27 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x0F);
 800067a:	200f      	movs	r0, #15
 800067c:	f7ff ff34 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x31);
 8000680:	2031      	movs	r0, #49	; 0x31
 8000682:	f7ff ff31 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x2B);
 8000686:	202b      	movs	r0, #43	; 0x2b
 8000688:	f7ff ff2e 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x0C);
 800068c:	200c      	movs	r0, #12
 800068e:	f7ff ff2b 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x0E);
 8000692:	200e      	movs	r0, #14
 8000694:	f7ff ff28 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x08);
 8000698:	2008      	movs	r0, #8
 800069a:	f7ff ff25 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x4E);
 800069e:	204e      	movs	r0, #78	; 0x4e
 80006a0:	f7ff ff22 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0xF1);
 80006a4:	20f1      	movs	r0, #241	; 0xf1
 80006a6:	f7ff ff1f 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x37);
 80006aa:	2037      	movs	r0, #55	; 0x37
 80006ac:	f7ff ff1c 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x07);
 80006b0:	2007      	movs	r0, #7
 80006b2:	f7ff ff19 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x10);
 80006b6:	2010      	movs	r0, #16
 80006b8:	f7ff ff16 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x03);
 80006bc:	2003      	movs	r0, #3
 80006be:	f7ff ff13 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x0E);
 80006c2:	200e      	movs	r0, #14
 80006c4:	f7ff ff10 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x09);
 80006c8:	2009      	movs	r0, #9
 80006ca:	f7ff ff0d 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x00);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f7ff ff0a 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_NGAMMA);
 80006d4:	20e1      	movs	r0, #225	; 0xe1
 80006d6:	f7ff fef7 	bl	80004c8 <LcdWriteReg>
    LcdWriteData(0x00);
 80006da:	2000      	movs	r0, #0
 80006dc:	f7ff ff04 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x0E);
 80006e0:	200e      	movs	r0, #14
 80006e2:	f7ff ff01 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x14);
 80006e6:	2014      	movs	r0, #20
 80006e8:	f7ff fefe 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x03);
 80006ec:	2003      	movs	r0, #3
 80006ee:	f7ff fefb 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x11);
 80006f2:	2011      	movs	r0, #17
 80006f4:	f7ff fef8 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x07);
 80006f8:	2007      	movs	r0, #7
 80006fa:	f7ff fef5 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x31);
 80006fe:	2031      	movs	r0, #49	; 0x31
 8000700:	f7ff fef2 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0xC1);
 8000704:	20c1      	movs	r0, #193	; 0xc1
 8000706:	f7ff feef 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x48);
 800070a:	2048      	movs	r0, #72	; 0x48
 800070c:	f7ff feec 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x08);
 8000710:	2008      	movs	r0, #8
 8000712:	f7ff fee9 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x0F);
 8000716:	200f      	movs	r0, #15
 8000718:	f7ff fee6 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x0C);
 800071c:	200c      	movs	r0, #12
 800071e:	f7ff fee3 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x31);
 8000722:	2031      	movs	r0, #49	; 0x31
 8000724:	f7ff fee0 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x36);
 8000728:	2036      	movs	r0, #54	; 0x36
 800072a:	f7ff fedd 	bl	80004e8 <LcdWriteData>
    LcdWriteData(0x0F);
 800072e:	200f      	movs	r0, #15
 8000730:	f7ff feda 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_SLEEP_OUT);
 8000734:	2011      	movs	r0, #17
 8000736:	f7ff fec7 	bl	80004c8 <LcdWriteReg>
    HAL_Delay(100);
 800073a:	2064      	movs	r0, #100	; 0x64
 800073c:	f001 fae2 	bl	8001d04 <HAL_Delay>

	LcdWriteReg(ILI9341_MAC);
 8000740:	2036      	movs	r0, #54	; 0x36
 8000742:	f7ff fec1 	bl	80004c8 <LcdWriteReg>
	LcdWriteData(0x28);
 8000746:	2028      	movs	r0, #40	; 0x28
 8000748:	f7ff fece 	bl	80004e8 <LcdWriteData>

    LcdWriteReg(ILI9341_DISPLAY_ON);
 800074c:	2029      	movs	r0, #41	; 0x29
 800074e:	f7ff febb 	bl	80004c8 <LcdWriteReg>
    LcdWriteReg(ILI9341_GRAM);
 8000752:	202c      	movs	r0, #44	; 0x2c
 8000754:	f7ff feb8 	bl	80004c8 <LcdWriteReg>

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <Set_Address>:

void Set_Address(short X1,short Y1,short X2,short Y2)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4604      	mov	r4, r0
 8000764:	4608      	mov	r0, r1
 8000766:	4611      	mov	r1, r2
 8000768:	461a      	mov	r2, r3
 800076a:	4623      	mov	r3, r4
 800076c:	80fb      	strh	r3, [r7, #6]
 800076e:	4603      	mov	r3, r0
 8000770:	80bb      	strh	r3, [r7, #4]
 8000772:	460b      	mov	r3, r1
 8000774:	807b      	strh	r3, [r7, #2]
 8000776:	4613      	mov	r3, r2
 8000778:	803b      	strh	r3, [r7, #0]
	LcdWriteReg(ILI9341_COLUMN_ADDR);
 800077a:	202a      	movs	r0, #42	; 0x2a
 800077c:	f7ff fea4 	bl	80004c8 <LcdWriteReg>
	LcdWriteData(X1>>8);
 8000780:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000784:	121b      	asrs	r3, r3, #8
 8000786:	b21b      	sxth	r3, r3
 8000788:	b29b      	uxth	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff feac 	bl	80004e8 <LcdWriteData>
	LcdWriteData(X1);
 8000790:	88fb      	ldrh	r3, [r7, #6]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fea8 	bl	80004e8 <LcdWriteData>
	LcdWriteData(X2>>8);
 8000798:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800079c:	121b      	asrs	r3, r3, #8
 800079e:	b21b      	sxth	r3, r3
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fea0 	bl	80004e8 <LcdWriteData>
	LcdWriteData(X2);
 80007a8:	887b      	ldrh	r3, [r7, #2]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fe9c 	bl	80004e8 <LcdWriteData>

	LcdWriteReg(ILI9341_PAGE_ADDR);
 80007b0:	202b      	movs	r0, #43	; 0x2b
 80007b2:	f7ff fe89 	bl	80004c8 <LcdWriteReg>
	LcdWriteData(Y1>>8);
 80007b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007ba:	121b      	asrs	r3, r3, #8
 80007bc:	b21b      	sxth	r3, r3
 80007be:	b29b      	uxth	r3, r3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fe91 	bl	80004e8 <LcdWriteData>
	LcdWriteData(Y1);
 80007c6:	88bb      	ldrh	r3, [r7, #4]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fe8d 	bl	80004e8 <LcdWriteData>
	LcdWriteData(Y2>>8);
 80007ce:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007d2:	121b      	asrs	r3, r3, #8
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fe85 	bl	80004e8 <LcdWriteData>
	LcdWriteData(Y2);
 80007de:	883b      	ldrh	r3, [r7, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fe81 	bl	80004e8 <LcdWriteData>

	LcdWriteReg(ILI9341_GRAM);
 80007e6:	202c      	movs	r0, #44	; 0x2c
 80007e8:	f7ff fe6e 	bl	80004c8 <LcdWriteReg>
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd90      	pop	{r4, r7, pc}

080007f4 <ov7670_init>:
 {0xFF, 0xFF},

};

char ov7670_init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
	  ov7670_write(0x12, 0x80);
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	2012      	movs	r0, #18
 80007fe:	f000 f841 	bl	8000884 <ov7670_write>
	  HAL_Delay(30);
 8000802:	201e      	movs	r0, #30
 8000804:	f001 fa7e 	bl	8001d04 <HAL_Delay>

	  uint8_t buffer[4];
	  ov7670_read(REG_VER, buffer);
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4619      	mov	r1, r3
 800080c:	200b      	movs	r0, #11
 800080e:	f000 f857 	bl	80008c0 <ov7670_read>
	  if ( buffer[0] != 0x73)
 8000812:	793b      	ldrb	r3, [r7, #4]
 8000814:	2b73      	cmp	r3, #115	; 0x73
 8000816:	d001      	beq.n	800081c <ov7670_init+0x28>
	  {
		  return 0;
 8000818:	2300      	movs	r3, #0
 800081a:	e002      	b.n	8000822 <ov7670_init+0x2e>
	  }
	  else
	  {
		  ov7670_config();
 800081c:	f000 f806 	bl	800082c <ov7670_config>
	  }

	  return 1;
 8000820:	2301      	movs	r3, #1
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <ov7670_config>:

char ov7670_config()
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
	ov7670_write(0x12, 0x80);
 8000832:	2180      	movs	r1, #128	; 0x80
 8000834:	2012      	movs	r0, #18
 8000836:	f000 f825 	bl	8000884 <ov7670_write>
    HAL_Delay(30);
 800083a:	201e      	movs	r0, #30
 800083c:	f001 fa62 	bl	8001d04 <HAL_Delay>

  for(int i = 0; OV7670_reg[i][0]!=0xFF; i++) {
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	e011      	b.n	800086a <ov7670_config+0x3e>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <ov7670_config+0x54>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 800084e:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <ov7670_config+0x54>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4413      	add	r3, r2
 8000856:	785b      	ldrb	r3, [r3, #1]
 8000858:	4619      	mov	r1, r3
 800085a:	f000 f813 	bl	8000884 <ov7670_write>
    HAL_Delay(1);
 800085e:	2001      	movs	r0, #1
 8000860:	f001 fa50 	bl	8001d04 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0]!=0xFF; i++) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3301      	adds	r3, #1
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4a05      	ldr	r2, [pc, #20]	; (8000880 <ov7670_config+0x54>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000872:	2bff      	cmp	r3, #255	; 0xff
 8000874:	d1e7      	bne.n	8000846 <ov7670_config+0x1a>
  }
  return 0;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	08006c60 	.word	0x08006c60

08000884 <ov7670_write>:

char ov7670_write(uint8_t regAddr, uint8_t data)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af04      	add	r7, sp, #16
 800088a:	4603      	mov	r3, r0
 800088c:	460a      	mov	r2, r1
 800088e:	71fb      	strb	r3, [r7, #7]
 8000890:	4613      	mov	r3, r2
 8000892:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(&hi2c1, 0x42, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	b29a      	uxth	r2, r3
 8000898:	2364      	movs	r3, #100	; 0x64
 800089a:	9302      	str	r3, [sp, #8]
 800089c:	2301      	movs	r3, #1
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	1dbb      	adds	r3, r7, #6
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2301      	movs	r3, #1
 80008a6:	2142      	movs	r1, #66	; 0x42
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <ov7670_write+0x38>)
 80008aa:	f002 f993 	bl	8002bd4 <HAL_I2C_Mem_Write>
 80008ae:	4603      	mov	r3, r0
 80008b0:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return 0;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200002f4 	.word	0x200002f4

080008c0 <ov7670_read>:

char ov7670_read(uint8_t regAddr, uint8_t *data)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Master_Transmit(&hi2c1, 0x42, &regAddr, 1, 100);
 80008cc:	1dfa      	adds	r2, r7, #7
 80008ce:	2364      	movs	r3, #100	; 0x64
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2301      	movs	r3, #1
 80008d4:	2142      	movs	r1, #66	; 0x42
 80008d6:	480b      	ldr	r0, [pc, #44]	; (8000904 <ov7670_read+0x44>)
 80008d8:	f001 fe58 	bl	800258c <HAL_I2C_Master_Transmit>
 80008dc:	4603      	mov	r3, r0
 80008de:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(&hi2c1, 0x42, data, 1, 100);
 80008e0:	2364      	movs	r3, #100	; 0x64
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2301      	movs	r3, #1
 80008e6:	683a      	ldr	r2, [r7, #0]
 80008e8:	2142      	movs	r1, #66	; 0x42
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <ov7670_read+0x44>)
 80008ec:	f001 ff4c 	bl	8002788 <HAL_I2C_Master_Receive>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200002f4 	.word	0x200002f4

08000908 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2104      	movs	r1, #4
 8000910:	4803      	ldr	r0, [pc, #12]	; (8000920 <SELECT+0x18>)
 8000912:	f001 fcc5 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000916:	2001      	movs	r0, #1
 8000918:	f001 f9f4 	bl	8001d04 <HAL_Delay>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40020c00 	.word	0x40020c00

08000924 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2104      	movs	r1, #4
 800092c:	4803      	ldr	r0, [pc, #12]	; (800093c <DESELECT+0x18>)
 800092e:	f001 fcb7 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000932:	2001      	movs	r0, #1
 8000934:	f001 f9e6 	bl	8001d04 <HAL_Delay>
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40020c00 	.word	0x40020c00

08000940 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800094a:	bf00      	nop
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <SPI_TxByte+0x30>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	2b02      	cmp	r3, #2
 8000958:	d1f8      	bne.n	800094c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800095a:	1df9      	adds	r1, r7, #7
 800095c:	2364      	movs	r3, #100	; 0x64
 800095e:	2201      	movs	r2, #1
 8000960:	4803      	ldr	r0, [pc, #12]	; (8000970 <SPI_TxByte+0x30>)
 8000962:	f003 faa7 	bl	8003eb4 <HAL_SPI_Transmit>
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000039c 	.word	0x2000039c

08000974 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000980:	bf00      	nop
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <SPI_TxBuffer+0x30>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	f003 0302 	and.w	r3, r3, #2
 800098c:	2b02      	cmp	r3, #2
 800098e:	d1f8      	bne.n	8000982 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000990:	887a      	ldrh	r2, [r7, #2]
 8000992:	2364      	movs	r3, #100	; 0x64
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	4803      	ldr	r0, [pc, #12]	; (80009a4 <SPI_TxBuffer+0x30>)
 8000998:	f003 fa8c 	bl	8003eb4 <HAL_SPI_Transmit>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	2000039c 	.word	0x2000039c

080009a8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80009ae:	23ff      	movs	r3, #255	; 0xff
 80009b0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80009b2:	bf00      	nop
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <SPI_RxByte+0x34>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d1f8      	bne.n	80009b4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80009c2:	1dba      	adds	r2, r7, #6
 80009c4:	1df9      	adds	r1, r7, #7
 80009c6:	2364      	movs	r3, #100	; 0x64
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2301      	movs	r3, #1
 80009cc:	4803      	ldr	r0, [pc, #12]	; (80009dc <SPI_RxByte+0x34>)
 80009ce:	f003 fba5 	bl	800411c <HAL_SPI_TransmitReceive>

	return data;
 80009d2:	79bb      	ldrb	r3, [r7, #6]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2000039c 	.word	0x2000039c

080009e0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80009e8:	f7ff ffde 	bl	80009a8 <SPI_RxByte>
 80009ec:	4603      	mov	r3, r0
 80009ee:	461a      	mov	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	701a      	strb	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <SD_ReadyWait+0x30>)
 8000a04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a08:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000a0a:	f7ff ffcd 	bl	80009a8 <SPI_RxByte>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2bff      	cmp	r3, #255	; 0xff
 8000a16:	d003      	beq.n	8000a20 <SD_ReadyWait+0x24>
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SD_ReadyWait+0x30>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1f4      	bne.n	8000a0a <SD_ReadyWait+0xe>

	return res;
 8000a20:	79fb      	ldrb	r3, [r7, #7]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000c0 	.word	0x200000c0

08000a30 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000a36:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000a3a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000a3c:	f7ff ff72 	bl	8000924 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	e005      	b.n	8000a52 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000a46:	20ff      	movs	r0, #255	; 0xff
 8000a48:	f7ff ff7a 	bl	8000940 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	2b09      	cmp	r3, #9
 8000a56:	ddf6      	ble.n	8000a46 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000a58:	f7ff ff56 	bl	8000908 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000a5c:	2340      	movs	r3, #64	; 0x40
 8000a5e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000a70:	2395      	movs	r3, #149	; 0x95
 8000a72:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000a74:	463b      	mov	r3, r7
 8000a76:	2106      	movs	r1, #6
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff7b 	bl	8000974 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a7e:	e002      	b.n	8000a86 <SD_PowerOn+0x56>
	{
		cnt--;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a86:	f7ff ff8f 	bl	80009a8 <SPI_RxByte>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d002      	beq.n	8000a96 <SD_PowerOn+0x66>
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1f4      	bne.n	8000a80 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000a96:	f7ff ff45 	bl	8000924 <DESELECT>
	SPI_TxByte(0XFF);
 8000a9a:	20ff      	movs	r0, #255	; 0xff
 8000a9c:	f7ff ff50 	bl	8000940 <SPI_TxByte>

	PowerFlag = 1;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <SD_PowerOn+0x80>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000085 	.word	0x20000085

08000ab4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <SD_PowerOff+0x14>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	20000085 	.word	0x20000085

08000acc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <SD_CheckPower+0x14>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000085 	.word	0x20000085

08000ae4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <SD_RxDataBlock+0x58>)
 8000af0:	22c8      	movs	r2, #200	; 0xc8
 8000af2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000af4:	f7ff ff58 	bl	80009a8 <SPI_RxByte>
 8000af8:	4603      	mov	r3, r0
 8000afa:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2bff      	cmp	r3, #255	; 0xff
 8000b00:	d103      	bne.n	8000b0a <SD_RxDataBlock+0x26>
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <SD_RxDataBlock+0x58>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1f4      	bne.n	8000af4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	2bfe      	cmp	r3, #254	; 0xfe
 8000b0e:	d001      	beq.n	8000b14 <SD_RxDataBlock+0x30>
 8000b10:	2300      	movs	r3, #0
 8000b12:	e00f      	b.n	8000b34 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff60 	bl	80009e0 <SPI_RxBytePtr>
	} while(len--);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	1e5a      	subs	r2, r3, #1
 8000b24:	603a      	str	r2, [r7, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1f4      	bne.n	8000b14 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000b2a:	f7ff ff3d 	bl	80009a8 <SPI_RxByte>
	SPI_RxByte();
 8000b2e:	f7ff ff3b 	bl	80009a8 <SPI_RxByte>

	return TRUE;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200000c2 	.word	0x200000c2

08000b40 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000b50:	f7ff ff54 	bl	80009fc <SD_ReadyWait>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2bff      	cmp	r3, #255	; 0xff
 8000b58:	d001      	beq.n	8000b5e <SD_TxDataBlock+0x1e>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e02f      	b.n	8000bbe <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000b5e:	78fb      	ldrb	r3, [r7, #3]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff feed 	bl	8000940 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000b66:	78fb      	ldrb	r3, [r7, #3]
 8000b68:	2bfd      	cmp	r3, #253	; 0xfd
 8000b6a:	d020      	beq.n	8000bae <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff feff 	bl	8000974 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000b76:	f7ff ff17 	bl	80009a8 <SPI_RxByte>
		SPI_RxByte();
 8000b7a:	f7ff ff15 	bl	80009a8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000b7e:	e00b      	b.n	8000b98 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000b80:	f7ff ff12 	bl	80009a8 <SPI_RxByte>
 8000b84:	4603      	mov	r3, r0
 8000b86:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	f003 031f 	and.w	r3, r3, #31
 8000b8e:	2b05      	cmp	r3, #5
 8000b90:	d006      	beq.n	8000ba0 <SD_TxDataBlock+0x60>
			i++;
 8000b92:	7bbb      	ldrb	r3, [r7, #14]
 8000b94:	3301      	adds	r3, #1
 8000b96:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000b98:	7bbb      	ldrb	r3, [r7, #14]
 8000b9a:	2b40      	cmp	r3, #64	; 0x40
 8000b9c:	d9f0      	bls.n	8000b80 <SD_TxDataBlock+0x40>
 8000b9e:	e000      	b.n	8000ba2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000ba0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000ba2:	bf00      	nop
 8000ba4:	f7ff ff00 	bl	80009a8 <SPI_RxByte>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0fa      	beq.n	8000ba4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	f003 031f 	and.w	r3, r3, #31
 8000bb4:	2b05      	cmp	r3, #5
 8000bb6:	d101      	bne.n	8000bbc <SD_TxDataBlock+0x7c>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <SD_TxDataBlock+0x7e>

	return FALSE;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b084      	sub	sp, #16
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	6039      	str	r1, [r7, #0]
 8000bd0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000bd2:	f7ff ff13 	bl	80009fc <SD_ReadyWait>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2bff      	cmp	r3, #255	; 0xff
 8000bda:	d001      	beq.n	8000be0 <SD_SendCmd+0x1a>
 8000bdc:	23ff      	movs	r3, #255	; 0xff
 8000bde:	e042      	b.n	8000c66 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff feac 	bl	8000940 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	0e1b      	lsrs	r3, r3, #24
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fea6 	bl	8000940 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	0c1b      	lsrs	r3, r3, #16
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fea0 	bl	8000940 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	0a1b      	lsrs	r3, r3, #8
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fe9a 	bl	8000940 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fe95 	bl	8000940 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b40      	cmp	r3, #64	; 0x40
 8000c1a:	d102      	bne.n	8000c22 <SD_SendCmd+0x5c>
 8000c1c:	2395      	movs	r3, #149	; 0x95
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	e007      	b.n	8000c32 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b48      	cmp	r3, #72	; 0x48
 8000c26:	d102      	bne.n	8000c2e <SD_SendCmd+0x68>
 8000c28:	2387      	movs	r3, #135	; 0x87
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	e001      	b.n	8000c32 <SD_SendCmd+0x6c>
	else crc = 1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fe83 	bl	8000940 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b4c      	cmp	r3, #76	; 0x4c
 8000c3e:	d101      	bne.n	8000c44 <SD_SendCmd+0x7e>
 8000c40:	f7ff feb2 	bl	80009a8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000c44:	230a      	movs	r3, #10
 8000c46:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000c48:	f7ff feae 	bl	80009a8 <SPI_RxByte>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000c50:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	da05      	bge.n	8000c64 <SD_SendCmd+0x9e>
 8000c58:	7bbb      	ldrb	r3, [r7, #14]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	73bb      	strb	r3, [r7, #14]
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1f1      	bne.n	8000c48 <SD_SendCmd+0x82>

	return res;
 8000c64:	7b7b      	ldrb	r3, [r7, #13]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <SD_disk_initialize+0x14>
 8000c80:	2301      	movs	r3, #1
 8000c82:	e0d1      	b.n	8000e28 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000c84:	4b6a      	ldr	r3, [pc, #424]	; (8000e30 <SD_disk_initialize+0x1c0>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <SD_disk_initialize+0x2a>
 8000c92:	4b67      	ldr	r3, [pc, #412]	; (8000e30 <SD_disk_initialize+0x1c0>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	e0c6      	b.n	8000e28 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000c9a:	f7ff fec9 	bl	8000a30 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000c9e:	f7ff fe33 	bl	8000908 <SELECT>

	/* check disk type */
	type = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2040      	movs	r0, #64	; 0x40
 8000caa:	f7ff ff8c 	bl	8000bc6 <SD_SendCmd>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	f040 80a1 	bne.w	8000df8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000cb6:	4b5f      	ldr	r3, [pc, #380]	; (8000e34 <SD_disk_initialize+0x1c4>)
 8000cb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cbc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000cbe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000cc2:	2048      	movs	r0, #72	; 0x48
 8000cc4:	f7ff ff7f 	bl	8000bc6 <SD_SendCmd>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d155      	bne.n	8000d7a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	e00c      	b.n	8000cee <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000cd4:	7bfc      	ldrb	r4, [r7, #15]
 8000cd6:	f7ff fe67 	bl	80009a8 <SPI_RxByte>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	4423      	add	r3, r4
 8000ce4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	3301      	adds	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d9ef      	bls.n	8000cd4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000cf4:	7abb      	ldrb	r3, [r7, #10]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d17e      	bne.n	8000df8 <SD_disk_initialize+0x188>
 8000cfa:	7afb      	ldrb	r3, [r7, #11]
 8000cfc:	2baa      	cmp	r3, #170	; 0xaa
 8000cfe:	d17b      	bne.n	8000df8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000d00:	2100      	movs	r1, #0
 8000d02:	2077      	movs	r0, #119	; 0x77
 8000d04:	f7ff ff5f 	bl	8000bc6 <SD_SendCmd>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d807      	bhi.n	8000d1e <SD_disk_initialize+0xae>
 8000d0e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d12:	2069      	movs	r0, #105	; 0x69
 8000d14:	f7ff ff57 	bl	8000bc6 <SD_SendCmd>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d004      	beq.n	8000d28 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000d1e:	4b45      	ldr	r3, [pc, #276]	; (8000e34 <SD_disk_initialize+0x1c4>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1ec      	bne.n	8000d00 <SD_disk_initialize+0x90>
 8000d26:	e000      	b.n	8000d2a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000d28:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000d2a:	4b42      	ldr	r3, [pc, #264]	; (8000e34 <SD_disk_initialize+0x1c4>)
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d062      	beq.n	8000df8 <SD_disk_initialize+0x188>
 8000d32:	2100      	movs	r1, #0
 8000d34:	207a      	movs	r0, #122	; 0x7a
 8000d36:	f7ff ff46 	bl	8000bc6 <SD_SendCmd>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d15b      	bne.n	8000df8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e00c      	b.n	8000d60 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000d46:	7bfc      	ldrb	r4, [r7, #15]
 8000d48:	f7ff fe2e 	bl	80009a8 <SPI_RxByte>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4423      	add	r3, r4
 8000d56:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d9ef      	bls.n	8000d46 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000d66:	7a3b      	ldrb	r3, [r7, #8]
 8000d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SD_disk_initialize+0x104>
 8000d70:	230c      	movs	r3, #12
 8000d72:	e000      	b.n	8000d76 <SD_disk_initialize+0x106>
 8000d74:	2304      	movs	r3, #4
 8000d76:	73bb      	strb	r3, [r7, #14]
 8000d78:	e03e      	b.n	8000df8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2077      	movs	r0, #119	; 0x77
 8000d7e:	f7ff ff22 	bl	8000bc6 <SD_SendCmd>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d808      	bhi.n	8000d9a <SD_disk_initialize+0x12a>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2069      	movs	r0, #105	; 0x69
 8000d8c:	f7ff ff1b 	bl	8000bc6 <SD_SendCmd>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d801      	bhi.n	8000d9a <SD_disk_initialize+0x12a>
 8000d96:	2302      	movs	r3, #2
 8000d98:	e000      	b.n	8000d9c <SD_disk_initialize+0x12c>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000d9e:	7bbb      	ldrb	r3, [r7, #14]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d10e      	bne.n	8000dc2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000da4:	2100      	movs	r1, #0
 8000da6:	2077      	movs	r0, #119	; 0x77
 8000da8:	f7ff ff0d 	bl	8000bc6 <SD_SendCmd>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d80e      	bhi.n	8000dd0 <SD_disk_initialize+0x160>
 8000db2:	2100      	movs	r1, #0
 8000db4:	2069      	movs	r0, #105	; 0x69
 8000db6:	f7ff ff06 	bl	8000bc6 <SD_SendCmd>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d107      	bne.n	8000dd0 <SD_disk_initialize+0x160>
 8000dc0:	e00c      	b.n	8000ddc <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2041      	movs	r0, #65	; 0x41
 8000dc6:	f7ff fefe 	bl	8000bc6 <SD_SendCmd>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d004      	beq.n	8000dda <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <SD_disk_initialize+0x1c4>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1e2      	bne.n	8000d9e <SD_disk_initialize+0x12e>
 8000dd8:	e000      	b.n	8000ddc <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000dda:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <SD_disk_initialize+0x1c4>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d007      	beq.n	8000df4 <SD_disk_initialize+0x184>
 8000de4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de8:	2050      	movs	r0, #80	; 0x50
 8000dea:	f7ff feec 	bl	8000bc6 <SD_SendCmd>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SD_disk_initialize+0x188>
 8000df4:	2300      	movs	r3, #0
 8000df6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000df8:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <SD_disk_initialize+0x1c8>)
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000dfe:	f7ff fd91 	bl	8000924 <DESELECT>
	SPI_RxByte();
 8000e02:	f7ff fdd1 	bl	80009a8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000e06:	7bbb      	ldrb	r3, [r7, #14]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d008      	beq.n	8000e1e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <SD_disk_initialize+0x1c0>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	f023 0301 	bic.w	r3, r3, #1
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <SD_disk_initialize+0x1c0>)
 8000e1a:	701a      	strb	r2, [r3, #0]
 8000e1c:	e001      	b.n	8000e22 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000e1e:	f7ff fe49 	bl	8000ab4 <SD_PowerOff>
	}

	return Stat;
 8000e22:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <SD_disk_initialize+0x1c0>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b2db      	uxtb	r3, r3
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd90      	pop	{r4, r7, pc}
 8000e30:	20000000 	.word	0x20000000
 8000e34:	200000c2 	.word	0x200000c2
 8000e38:	20000084 	.word	0x20000084

08000e3c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SD_disk_status+0x14>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e002      	b.n	8000e56 <SD_disk_status+0x1a>
	return Stat;
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SD_disk_status+0x28>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b2db      	uxtb	r3, r3
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000000 	.word	0x20000000

08000e68 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	4603      	mov	r3, r0
 8000e76:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d102      	bne.n	8000e84 <SD_disk_read+0x1c>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <SD_disk_read+0x20>
 8000e84:	2304      	movs	r3, #4
 8000e86:	e051      	b.n	8000f2c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <SD_disk_read+0xcc>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SD_disk_read+0x32>
 8000e96:	2303      	movs	r3, #3
 8000e98:	e048      	b.n	8000f2c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000e9a:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <SD_disk_read+0xd0>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d102      	bne.n	8000eac <SD_disk_read+0x44>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	025b      	lsls	r3, r3, #9
 8000eaa:	607b      	str	r3, [r7, #4]

	SELECT();
 8000eac:	f7ff fd2c 	bl	8000908 <SELECT>

	if (count == 1)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d111      	bne.n	8000eda <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	2051      	movs	r0, #81	; 0x51
 8000eba:	f7ff fe84 	bl	8000bc6 <SD_SendCmd>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d129      	bne.n	8000f18 <SD_disk_read+0xb0>
 8000ec4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec8:	68b8      	ldr	r0, [r7, #8]
 8000eca:	f7ff fe0b 	bl	8000ae4 <SD_RxDataBlock>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d021      	beq.n	8000f18 <SD_disk_read+0xb0>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	e01e      	b.n	8000f18 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	2052      	movs	r0, #82	; 0x52
 8000ede:	f7ff fe72 	bl	8000bc6 <SD_SendCmd>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d117      	bne.n	8000f18 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ee8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eec:	68b8      	ldr	r0, [r7, #8]
 8000eee:	f7ff fdf9 	bl	8000ae4 <SD_RxDataBlock>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00a      	beq.n	8000f0e <SD_disk_read+0xa6>
				buff += 512;
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000efe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1ed      	bne.n	8000ee8 <SD_disk_read+0x80>
 8000f0c:	e000      	b.n	8000f10 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000f0e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000f10:	2100      	movs	r1, #0
 8000f12:	204c      	movs	r0, #76	; 0x4c
 8000f14:	f7ff fe57 	bl	8000bc6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000f18:	f7ff fd04 	bl	8000924 <DESELECT>
	SPI_RxByte();
 8000f1c:	f7ff fd44 	bl	80009a8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	bf14      	ite	ne
 8000f26:	2301      	movne	r3, #1
 8000f28:	2300      	moveq	r3, #0
 8000f2a:	b2db      	uxtb	r3, r3
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000084 	.word	0x20000084

08000f3c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d102      	bne.n	8000f58 <SD_disk_write+0x1c>
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <SD_disk_write+0x20>
 8000f58:	2304      	movs	r3, #4
 8000f5a:	e06b      	b.n	8001034 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f5c:	4b37      	ldr	r3, [pc, #220]	; (800103c <SD_disk_write+0x100>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SD_disk_write+0x32>
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e062      	b.n	8001034 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000f6e:	4b33      	ldr	r3, [pc, #204]	; (800103c <SD_disk_write+0x100>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SD_disk_write+0x44>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e059      	b.n	8001034 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f80:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <SD_disk_write+0x104>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <SD_disk_write+0x56>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	025b      	lsls	r3, r3, #9
 8000f90:	607b      	str	r3, [r7, #4]

	SELECT();
 8000f92:	f7ff fcb9 	bl	8000908 <SELECT>

	if (count == 1)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d110      	bne.n	8000fbe <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	2058      	movs	r0, #88	; 0x58
 8000fa0:	f7ff fe11 	bl	8000bc6 <SD_SendCmd>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d13a      	bne.n	8001020 <SD_disk_write+0xe4>
 8000faa:	21fe      	movs	r1, #254	; 0xfe
 8000fac:	68b8      	ldr	r0, [r7, #8]
 8000fae:	f7ff fdc7 	bl	8000b40 <SD_TxDataBlock>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d033      	beq.n	8001020 <SD_disk_write+0xe4>
			count = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	e030      	b.n	8001020 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000fbe:	4b20      	ldr	r3, [pc, #128]	; (8001040 <SD_disk_write+0x104>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d007      	beq.n	8000fda <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2077      	movs	r0, #119	; 0x77
 8000fce:	f7ff fdfa 	bl	8000bc6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000fd2:	6839      	ldr	r1, [r7, #0]
 8000fd4:	2057      	movs	r0, #87	; 0x57
 8000fd6:	f7ff fdf6 	bl	8000bc6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	2059      	movs	r0, #89	; 0x59
 8000fde:	f7ff fdf2 	bl	8000bc6 <SD_SendCmd>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d11b      	bne.n	8001020 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000fe8:	21fc      	movs	r1, #252	; 0xfc
 8000fea:	68b8      	ldr	r0, [r7, #8]
 8000fec:	f7ff fda8 	bl	8000b40 <SD_TxDataBlock>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00a      	beq.n	800100c <SD_disk_write+0xd0>
				buff += 512;
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ffc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	3b01      	subs	r3, #1
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1ee      	bne.n	8000fe8 <SD_disk_write+0xac>
 800100a:	e000      	b.n	800100e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800100c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800100e:	21fd      	movs	r1, #253	; 0xfd
 8001010:	2000      	movs	r0, #0
 8001012:	f7ff fd95 	bl	8000b40 <SD_TxDataBlock>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <SD_disk_write+0xe4>
			{
				count = 1;
 800101c:	2301      	movs	r3, #1
 800101e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001020:	f7ff fc80 	bl	8000924 <DESELECT>
	SPI_RxByte();
 8001024:	f7ff fcc0 	bl	80009a8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	bf14      	ite	ne
 800102e:	2301      	movne	r3, #1
 8001030:	2300      	moveq	r3, #0
 8001032:	b2db      	uxtb	r3, r3
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000
 8001040:	20000084 	.word	0x20000084

08001044 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b08b      	sub	sp, #44	; 0x2c
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	603a      	str	r2, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	460b      	mov	r3, r1
 8001052:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SD_disk_ioctl+0x1e>
 800105e:	2304      	movs	r3, #4
 8001060:	e113      	b.n	800128a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	2b05      	cmp	r3, #5
 800106c:	d121      	bne.n	80010b2 <SD_disk_ioctl+0x6e>
	{
		switch (*ptr)
 800106e:	6a3b      	ldr	r3, [r7, #32]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d009      	beq.n	800108a <SD_disk_ioctl+0x46>
 8001076:	2b02      	cmp	r3, #2
 8001078:	d00d      	beq.n	8001096 <SD_disk_ioctl+0x52>
 800107a:	2b00      	cmp	r3, #0
 800107c:	d115      	bne.n	80010aa <SD_disk_ioctl+0x66>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800107e:	f7ff fd19 	bl	8000ab4 <SD_PowerOff>
			res = RES_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001088:	e0fd      	b.n	8001286 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 800108a:	f7ff fcd1 	bl	8000a30 <SD_PowerOn>
			res = RES_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001094:	e0f7      	b.n	8001286 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001096:	6a3b      	ldr	r3, [r7, #32]
 8001098:	1c5c      	adds	r4, r3, #1
 800109a:	f7ff fd17 	bl	8000acc <SD_CheckPower>
 800109e:	4603      	mov	r3, r0
 80010a0:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80010a2:	2300      	movs	r3, #0
 80010a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80010a8:	e0ed      	b.n	8001286 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80010aa:	2304      	movs	r3, #4
 80010ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010b0:	e0e9      	b.n	8001286 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80010b2:	4b78      	ldr	r3, [pc, #480]	; (8001294 <SD_disk_ioctl+0x250>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SD_disk_ioctl+0x80>
 80010c0:	2303      	movs	r3, #3
 80010c2:	e0e2      	b.n	800128a <SD_disk_ioctl+0x246>

		SELECT();
 80010c4:	f7ff fc20 	bl	8000908 <SELECT>

		switch (ctrl)
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	2b0d      	cmp	r3, #13
 80010cc:	f200 80cc 	bhi.w	8001268 <SD_disk_ioctl+0x224>
 80010d0:	a201      	add	r2, pc, #4	; (adr r2, 80010d8 <SD_disk_ioctl+0x94>)
 80010d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d6:	bf00      	nop
 80010d8:	080011d3 	.word	0x080011d3
 80010dc:	08001111 	.word	0x08001111
 80010e0:	080011c3 	.word	0x080011c3
 80010e4:	08001269 	.word	0x08001269
 80010e8:	08001269 	.word	0x08001269
 80010ec:	08001269 	.word	0x08001269
 80010f0:	08001269 	.word	0x08001269
 80010f4:	08001269 	.word	0x08001269
 80010f8:	08001269 	.word	0x08001269
 80010fc:	08001269 	.word	0x08001269
 8001100:	08001269 	.word	0x08001269
 8001104:	080011e5 	.word	0x080011e5
 8001108:	08001209 	.word	0x08001209
 800110c:	0800122d 	.word	0x0800122d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001110:	2100      	movs	r1, #0
 8001112:	2049      	movs	r0, #73	; 0x49
 8001114:	f7ff fd57 	bl	8000bc6 <SD_SendCmd>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	f040 80a8 	bne.w	8001270 <SD_disk_ioctl+0x22c>
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2110      	movs	r1, #16
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fcdc 	bl	8000ae4 <SD_RxDataBlock>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 809e 	beq.w	8001270 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001134:	7b3b      	ldrb	r3, [r7, #12]
 8001136:	099b      	lsrs	r3, r3, #6
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d10e      	bne.n	800115c <SD_disk_ioctl+0x118>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800113e:	7d7b      	ldrb	r3, [r7, #21]
 8001140:	b29a      	uxth	r2, r3
 8001142:	7d3b      	ldrb	r3, [r7, #20]
 8001144:	b29b      	uxth	r3, r3
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b29b      	uxth	r3, r3
 800114a:	4413      	add	r3, r2
 800114c:	b29b      	uxth	r3, r3
 800114e:	3301      	adds	r3, #1
 8001150:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001152:	8bfb      	ldrh	r3, [r7, #30]
 8001154:	029a      	lsls	r2, r3, #10
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e02e      	b.n	80011ba <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800115c:	7c7b      	ldrb	r3, [r7, #17]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	b2da      	uxtb	r2, r3
 8001164:	7dbb      	ldrb	r3, [r7, #22]
 8001166:	09db      	lsrs	r3, r3, #7
 8001168:	b2db      	uxtb	r3, r3
 800116a:	4413      	add	r3, r2
 800116c:	b2da      	uxtb	r2, r3
 800116e:	7d7b      	ldrb	r3, [r7, #21]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f003 0306 	and.w	r3, r3, #6
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4413      	add	r3, r2
 800117c:	b2db      	uxtb	r3, r3
 800117e:	3302      	adds	r3, #2
 8001180:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001184:	7d3b      	ldrb	r3, [r7, #20]
 8001186:	099b      	lsrs	r3, r3, #6
 8001188:	b2db      	uxtb	r3, r3
 800118a:	b29a      	uxth	r2, r3
 800118c:	7cfb      	ldrb	r3, [r7, #19]
 800118e:	b29b      	uxth	r3, r3
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	b29b      	uxth	r3, r3
 8001194:	4413      	add	r3, r2
 8001196:	b29a      	uxth	r2, r3
 8001198:	7cbb      	ldrb	r3, [r7, #18]
 800119a:	029b      	lsls	r3, r3, #10
 800119c:	b29b      	uxth	r3, r3
 800119e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	4413      	add	r3, r2
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	3301      	adds	r3, #1
 80011aa:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80011ac:	8bfa      	ldrh	r2, [r7, #30]
 80011ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011b2:	3b09      	subs	r3, #9
 80011b4:	409a      	lsls	r2, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80011c0:	e056      	b.n	8001270 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80011d0:	e055      	b.n	800127e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80011d2:	f7ff fc13 	bl	80009fc <SD_ReadyWait>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2bff      	cmp	r3, #255	; 0xff
 80011da:	d14b      	bne.n	8001274 <SD_disk_ioctl+0x230>
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80011e2:	e047      	b.n	8001274 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011e4:	2100      	movs	r1, #0
 80011e6:	2049      	movs	r0, #73	; 0x49
 80011e8:	f7ff fced 	bl	8000bc6 <SD_SendCmd>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d142      	bne.n	8001278 <SD_disk_ioctl+0x234>
 80011f2:	2110      	movs	r1, #16
 80011f4:	6a38      	ldr	r0, [r7, #32]
 80011f6:	f7ff fc75 	bl	8000ae4 <SD_RxDataBlock>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d03b      	beq.n	8001278 <SD_disk_ioctl+0x234>
 8001200:	2300      	movs	r3, #0
 8001202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001206:	e037      	b.n	8001278 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001208:	2100      	movs	r1, #0
 800120a:	204a      	movs	r0, #74	; 0x4a
 800120c:	f7ff fcdb 	bl	8000bc6 <SD_SendCmd>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d132      	bne.n	800127c <SD_disk_ioctl+0x238>
 8001216:	2110      	movs	r1, #16
 8001218:	6a38      	ldr	r0, [r7, #32]
 800121a:	f7ff fc63 	bl	8000ae4 <SD_RxDataBlock>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d02b      	beq.n	800127c <SD_disk_ioctl+0x238>
 8001224:	2300      	movs	r3, #0
 8001226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800122a:	e027      	b.n	800127c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800122c:	2100      	movs	r1, #0
 800122e:	207a      	movs	r0, #122	; 0x7a
 8001230:	f7ff fcc9 	bl	8000bc6 <SD_SendCmd>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d116      	bne.n	8001268 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800123a:	2300      	movs	r3, #0
 800123c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001240:	e00b      	b.n	800125a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001242:	6a3c      	ldr	r4, [r7, #32]
 8001244:	1c63      	adds	r3, r4, #1
 8001246:	623b      	str	r3, [r7, #32]
 8001248:	f7ff fbae 	bl	80009a8 <SPI_RxByte>
 800124c:	4603      	mov	r3, r0
 800124e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001250:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001254:	3301      	adds	r3, #1
 8001256:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800125a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800125e:	2b03      	cmp	r3, #3
 8001260:	d9ef      	bls.n	8001242 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001268:	2304      	movs	r3, #4
 800126a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800126e:	e006      	b.n	800127e <SD_disk_ioctl+0x23a>
			break;
 8001270:	bf00      	nop
 8001272:	e004      	b.n	800127e <SD_disk_ioctl+0x23a>
			break;
 8001274:	bf00      	nop
 8001276:	e002      	b.n	800127e <SD_disk_ioctl+0x23a>
			break;
 8001278:	bf00      	nop
 800127a:	e000      	b.n	800127e <SD_disk_ioctl+0x23a>
			break;
 800127c:	bf00      	nop
		}

		DESELECT();
 800127e:	f7ff fb51 	bl	8000924 <DESELECT>
		SPI_RxByte();
 8001282:	f7ff fb91 	bl	80009a8 <SPI_RxByte>
	}

	return res;
 8001286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800128a:	4618      	mov	r0, r3
 800128c:	372c      	adds	r7, #44	; 0x2c
 800128e:	46bd      	mov	sp, r7
 8001290:	bd90      	pop	{r4, r7, pc}
 8001292:	bf00      	nop
 8001294:	20000000 	.word	0x20000000

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129c:	f000 fcc0 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a0:	f000 f826 	bl	80012f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a4:	f000 f8f2 	bl	800148c <MX_GPIO_Init>
  MX_FSMC_Init();
 80012a8:	f000 f9ba 	bl	8001620 <MX_FSMC_Init>
  MX_I2C1_Init();
 80012ac:	f000 f88a 	bl	80013c4 <MX_I2C1_Init>
  MX_SPI3_Init();
 80012b0:	f000 f8b6 	bl	8001420 <MX_SPI3_Init>
  MX_FATFS_Init();
 80012b4:	f003 fa94 	bl	80047e0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 80012b8:	20c8      	movs	r0, #200	; 0xc8
 80012ba:	f000 fd23 	bl	8001d04 <HAL_Delay>

  LcdInit();
 80012be:	f7ff f923 	bl	8000508 <LcdInit>
  FIFO_REN_L();
 80012c2:	2200      	movs	r2, #0
 80012c4:	2110      	movs	r1, #16
 80012c6:	4808      	ldr	r0, [pc, #32]	; (80012e8 <main+0x50>)
 80012c8:	f000 ffea 	bl	80022a0 <HAL_GPIO_WritePin>
  FIFO_WE_H();
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <main+0x50>)
 80012d4:	f000 ffe4 	bl	80022a0 <HAL_GPIO_WritePin>
  Vsync=0;
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <main+0x54>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
  ov7670_init();
 80012de:	f7ff fa89 	bl	80007f4 <ov7670_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Camera2LCD();
 80012e2:	f000 f9fd 	bl	80016e0 <Camera2LCD>
  {
 80012e6:	e7fc      	b.n	80012e2 <main+0x4a>
 80012e8:	40020800 	.word	0x40020800
 80012ec:	20000086 	.word	0x20000086

080012f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b094      	sub	sp, #80	; 0x50
 80012f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	2230      	movs	r2, #48	; 0x30
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f005 fc72 	bl	8006be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <SystemClock_Config+0xcc>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	4a27      	ldr	r2, [pc, #156]	; (80013bc <SystemClock_Config+0xcc>)
 800131e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001322:	6413      	str	r3, [r2, #64]	; 0x40
 8001324:	4b25      	ldr	r3, [pc, #148]	; (80013bc <SystemClock_Config+0xcc>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <SystemClock_Config+0xd0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a21      	ldr	r2, [pc, #132]	; (80013c0 <SystemClock_Config+0xd0>)
 800133a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <SystemClock_Config+0xd0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800134c:	2301      	movs	r3, #1
 800134e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001350:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001356:	2302      	movs	r3, #2
 8001358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800135a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800135e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001360:	2304      	movs	r3, #4
 8001362:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001364:	23a8      	movs	r3, #168	; 0xa8
 8001366:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001368:	2302      	movs	r3, #2
 800136a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800136c:	2304      	movs	r3, #4
 800136e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001370:	f107 0320 	add.w	r3, r7, #32
 8001374:	4618      	mov	r0, r3
 8001376:	f002 f8eb 	bl	8003550 <HAL_RCC_OscConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001380:	f000 fa8e 	bl	80018a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001384:	230f      	movs	r3, #15
 8001386:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001388:	2302      	movs	r3, #2
 800138a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001390:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001394:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2105      	movs	r1, #5
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 fb44 	bl	8003a30 <HAL_RCC_ClockConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013ae:	f000 fa77 	bl	80018a0 <Error_Handler>
  }
}
 80013b2:	bf00      	nop
 80013b4:	3750      	adds	r7, #80	; 0x50
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40007000 	.word	0x40007000

080013c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_I2C1_Init+0x50>)
 80013ca:	4a13      	ldr	r2, [pc, #76]	; (8001418 <MX_I2C1_Init+0x54>)
 80013cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_I2C1_Init+0x50>)
 80013d0:	4a12      	ldr	r2, [pc, #72]	; (800141c <MX_I2C1_Init+0x58>)
 80013d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_I2C1_Init+0x50>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_I2C1_Init+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_I2C1_Init+0x50>)
 80013e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <MX_I2C1_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_I2C1_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <MX_I2C1_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_I2C1_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_I2C1_Init+0x50>)
 8001402:	f000 ff8b 	bl	800231c <HAL_I2C_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800140c:	f000 fa48 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200002f4 	.word	0x200002f4
 8001418:	40005400 	.word	0x40005400
 800141c:	000186a0 	.word	0x000186a0

08001420 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_SPI3_Init+0x64>)
 8001426:	4a18      	ldr	r2, [pc, #96]	; (8001488 <MX_SPI3_Init+0x68>)
 8001428:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_SPI3_Init+0x64>)
 800142c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001430:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_SPI3_Init+0x64>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_SPI3_Init+0x64>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_SPI3_Init+0x64>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_SPI3_Init+0x64>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_SPI3_Init+0x64>)
 800144c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001450:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_SPI3_Init+0x64>)
 8001454:	2200      	movs	r2, #0
 8001456:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <MX_SPI3_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_SPI3_Init+0x64>)
 8001460:	2200      	movs	r2, #0
 8001462:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <MX_SPI3_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_SPI3_Init+0x64>)
 800146c:	220a      	movs	r2, #10
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_SPI3_Init+0x64>)
 8001472:	f002 fcbb 	bl	8003dec <HAL_SPI_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800147c:	f000 fa10 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000039c 	.word	0x2000039c
 8001488:	40003c00 	.word	0x40003c00

0800148c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08c      	sub	sp, #48	; 0x30
 8001490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
 80014a6:	4b58      	ldr	r3, [pc, #352]	; (8001608 <MX_GPIO_Init+0x17c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a57      	ldr	r2, [pc, #348]	; (8001608 <MX_GPIO_Init+0x17c>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b55      	ldr	r3, [pc, #340]	; (8001608 <MX_GPIO_Init+0x17c>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	4b51      	ldr	r3, [pc, #324]	; (8001608 <MX_GPIO_Init+0x17c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a50      	ldr	r2, [pc, #320]	; (8001608 <MX_GPIO_Init+0x17c>)
 80014c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b4e      	ldr	r3, [pc, #312]	; (8001608 <MX_GPIO_Init+0x17c>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	4b4a      	ldr	r3, [pc, #296]	; (8001608 <MX_GPIO_Init+0x17c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a49      	ldr	r2, [pc, #292]	; (8001608 <MX_GPIO_Init+0x17c>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b47      	ldr	r3, [pc, #284]	; (8001608 <MX_GPIO_Init+0x17c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b43      	ldr	r3, [pc, #268]	; (8001608 <MX_GPIO_Init+0x17c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a42      	ldr	r2, [pc, #264]	; (8001608 <MX_GPIO_Init+0x17c>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b40      	ldr	r3, [pc, #256]	; (8001608 <MX_GPIO_Init+0x17c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	4b3c      	ldr	r3, [pc, #240]	; (8001608 <MX_GPIO_Init+0x17c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a3b      	ldr	r2, [pc, #236]	; (8001608 <MX_GPIO_Init+0x17c>)
 800151c:	f043 0310 	orr.w	r3, r3, #16
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b39      	ldr	r3, [pc, #228]	; (8001608 <MX_GPIO_Init+0x17c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	4b35      	ldr	r3, [pc, #212]	; (8001608 <MX_GPIO_Init+0x17c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a34      	ldr	r2, [pc, #208]	; (8001608 <MX_GPIO_Init+0x17c>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b32      	ldr	r3, [pc, #200]	; (8001608 <MX_GPIO_Init+0x17c>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 800154a:	2200      	movs	r2, #0
 800154c:	f24e 0130 	movw	r1, #57392	; 0xe030
 8001550:	482e      	ldr	r0, [pc, #184]	; (800160c <MX_GPIO_Init+0x180>)
 8001552:	f000 fea5 	bl	80022a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2101      	movs	r1, #1
 800155a:	482d      	ldr	r0, [pc, #180]	; (8001610 <MX_GPIO_Init+0x184>)
 800155c:	f000 fea0 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	2104      	movs	r1, #4
 8001564:	482b      	ldr	r0, [pc, #172]	; (8001614 <MX_GPIO_Init+0x188>)
 8001566:	f000 fe9b 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 800156a:	f24e 0330 	movw	r3, #57392	; 0xe030
 800156e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	4822      	ldr	r0, [pc, #136]	; (800160c <MX_GPIO_Init+0x180>)
 8001584:	f000 fcf2 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001588:	23ff      	movs	r3, #255	; 0xff
 800158a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	4619      	mov	r1, r3
 800159a:	481f      	ldr	r0, [pc, #124]	; (8001618 <MX_GPIO_Init+0x18c>)
 800159c:	f000 fce6 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	4816      	ldr	r0, [pc, #88]	; (8001610 <MX_GPIO_Init+0x184>)
 80015b8:	f000 fcd8 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015bc:	2302      	movs	r3, #2
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <MX_GPIO_Init+0x190>)
 80015c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4619      	mov	r1, r3
 80015ce:	4810      	ldr	r0, [pc, #64]	; (8001610 <MX_GPIO_Init+0x184>)
 80015d0:	f000 fccc 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015d4:	2304      	movs	r3, #4
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	480a      	ldr	r0, [pc, #40]	; (8001614 <MX_GPIO_Init+0x188>)
 80015ec:	f000 fcbe 	bl	8001f6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	2007      	movs	r0, #7
 80015f6:	f000 fc82 	bl	8001efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015fa:	2007      	movs	r0, #7
 80015fc:	f000 fc9b 	bl	8001f36 <HAL_NVIC_EnableIRQ>

}
 8001600:	bf00      	nop
 8001602:	3730      	adds	r7, #48	; 0x30
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40023800 	.word	0x40023800
 800160c:	40020800 	.word	0x40020800
 8001610:	40020400 	.word	0x40020400
 8001614:	40020c00 	.word	0x40020c00
 8001618:	40020000 	.word	0x40020000
 800161c:	10110000 	.word	0x10110000

08001620 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	615a      	str	r2, [r3, #20]
 8001636:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <MX_FSMC_Init+0xb8>)
 800163a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800163e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <MX_FSMC_Init+0xb8>)
 8001642:	4a26      	ldr	r2, [pc, #152]	; (80016dc <MX_FSMC_Init+0xbc>)
 8001644:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001646:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <MX_FSMC_Init+0xb8>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <MX_FSMC_Init+0xb8>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <MX_FSMC_Init+0xb8>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <MX_FSMC_Init+0xb8>)
 800165a:	2210      	movs	r2, #16
 800165c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <MX_FSMC_Init+0xb8>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <MX_FSMC_Init+0xb8>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <MX_FSMC_Init+0xb8>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <MX_FSMC_Init+0xb8>)
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <MX_FSMC_Init+0xb8>)
 8001678:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800167c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <MX_FSMC_Init+0xb8>)
 8001680:	2200      	movs	r2, #0
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <MX_FSMC_Init+0xb8>)
 8001686:	2200      	movs	r2, #0
 8001688:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <MX_FSMC_Init+0xb8>)
 800168c:	2200      	movs	r2, #0
 800168e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_FSMC_Init+0xb8>)
 8001692:	2200      	movs	r2, #0
 8001694:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <MX_FSMC_Init+0xb8>)
 8001698:	2200      	movs	r2, #0
 800169a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 6;
 800169c:	2306      	movs	r3, #6
 800169e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80016a0:	230f      	movs	r3, #15
 80016a2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 6;
 80016a4:	2306      	movs	r3, #6
 80016a6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80016ac:	2310      	movs	r3, #16
 80016ae:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80016b0:	2311      	movs	r3, #17
 80016b2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	4619      	mov	r1, r3
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <MX_FSMC_Init+0xb8>)
 80016c0:	f002 ff7a 	bl	80045b8 <HAL_SRAM_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80016ca:	f000 f8e9 	bl	80018a0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80016ce:	bf00      	nop
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000034c 	.word	0x2000034c
 80016dc:	a0000104 	.word	0xa0000104

080016e0 <Camera2LCD>:

/* USER CODE BEGIN 4 */
void Camera2LCD(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
 80016e6:	af00      	add	r7, sp, #0
	char CAM_Data[2];
	short CAMdata;
	int stopTime,startTime;
	uint8_t HorizantalData[CAM_H * 2];

	if(Vsync == 2)
 80016e8:	4b64      	ldr	r3, [pc, #400]	; (800187c <Camera2LCD+0x19c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	f040 80bf 	bne.w	8001870 <Camera2LCD+0x190>
	{
		startTime = HAL_GetTick();
 80016f2:	f000 fafb 	bl	8001cec <HAL_GetTick>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c

		res = f_open(&file, "image.bmp", FA_CREATE_ALWAYS  | FA_WRITE);
 80016fc:	220a      	movs	r2, #10
 80016fe:	4960      	ldr	r1, [pc, #384]	; (8001880 <Camera2LCD+0x1a0>)
 8001700:	4860      	ldr	r0, [pc, #384]	; (8001884 <Camera2LCD+0x1a4>)
 8001702:	f004 fe16 	bl	8006332 <f_open>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	4b5f      	ldr	r3, [pc, #380]	; (8001888 <Camera2LCD+0x1a8>)
 800170c:	701a      	strb	r2, [r3, #0]
		f_write(&file, bmp_header, sizeof(bmp_header), &brw);
 800170e:	4b5f      	ldr	r3, [pc, #380]	; (800188c <Camera2LCD+0x1ac>)
 8001710:	2242      	movs	r2, #66	; 0x42
 8001712:	495f      	ldr	r1, [pc, #380]	; (8001890 <Camera2LCD+0x1b0>)
 8001714:	485b      	ldr	r0, [pc, #364]	; (8001884 <Camera2LCD+0x1a4>)
 8001716:	f004 ffca 	bl	80066ae <f_write>


		FIFO_RRST_L();
 800171a:	2200      	movs	r2, #0
 800171c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001720:	485c      	ldr	r0, [pc, #368]	; (8001894 <Camera2LCD+0x1b4>)
 8001722:	f000 fdbd 	bl	80022a0 <HAL_GPIO_WritePin>
		FIFO_RCLK_L();
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172c:	4859      	ldr	r0, [pc, #356]	; (8001894 <Camera2LCD+0x1b4>)
 800172e:	f000 fdb7 	bl	80022a0 <HAL_GPIO_WritePin>
		FIFO_RCLK_H();
 8001732:	2201      	movs	r2, #1
 8001734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001738:	4856      	ldr	r0, [pc, #344]	; (8001894 <Camera2LCD+0x1b4>)
 800173a:	f000 fdb1 	bl	80022a0 <HAL_GPIO_WritePin>
		FIFO_RCLK_L();
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001744:	4853      	ldr	r0, [pc, #332]	; (8001894 <Camera2LCD+0x1b4>)
 8001746:	f000 fdab 	bl	80022a0 <HAL_GPIO_WritePin>
		FIFO_RRST_H();
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001750:	4850      	ldr	r0, [pc, #320]	; (8001894 <Camera2LCD+0x1b4>)
 8001752:	f000 fda5 	bl	80022a0 <HAL_GPIO_WritePin>
		FIFO_RCLK_H();
 8001756:	2201      	movs	r2, #1
 8001758:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800175c:	484d      	ldr	r0, [pc, #308]	; (8001894 <Camera2LCD+0x1b4>)
 800175e:	f000 fd9f 	bl	80022a0 <HAL_GPIO_WritePin>

		x=0;
 8001762:	2300      	movs	r3, #0
 8001764:	f8a7 328a 	strh.w	r3, [r7, #650]	; 0x28a
		y=0;
 8001768:	2300      	movs	r3, #0
 800176a:	f8a7 3292 	strh.w	r3, [r7, #658]	; 0x292

	    for(count2 = 0;count2 < CAM_V; count2++)
 800176e:	2300      	movs	r3, #0
 8001770:	f8a7 3294 	strh.w	r3, [r7, #660]	; 0x294
 8001774:	e06a      	b.n	800184c <Camera2LCD+0x16c>
	    {
	    	Set_Address(x,y++,CAM_H,CAM_V);
 8001776:	f9b7 1292 	ldrsh.w	r1, [r7, #658]	; 0x292
 800177a:	b28b      	uxth	r3, r1
 800177c:	3301      	adds	r3, #1
 800177e:	b29b      	uxth	r3, r3
 8001780:	f8a7 3292 	strh.w	r3, [r7, #658]	; 0x292
 8001784:	f9b7 028a 	ldrsh.w	r0, [r7, #650]	; 0x28a
 8001788:	23f0      	movs	r3, #240	; 0xf0
 800178a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800178e:	f7fe ffe5 	bl	800075c <Set_Address>

		   for( count = 0; count < CAM_H; count++ )
 8001792:	2300      	movs	r3, #0
 8001794:	f8a7 3296 	strh.w	r3, [r7, #662]	; 0x296
 8001798:	e045      	b.n	8001826 <Camera2LCD+0x146>
	        {
				FIFO_RCLK_L();
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a0:	483c      	ldr	r0, [pc, #240]	; (8001894 <Camera2LCD+0x1b4>)
 80017a2:	f000 fd7d 	bl	80022a0 <HAL_GPIO_WritePin>
				CAM_Data[1] = (GPIOA->IDR);	  /* GPIO_ReadInputData(GPIOA) */
 80017a6:	4b3c      	ldr	r3, [pc, #240]	; (8001898 <Camera2LCD+0x1b8>)
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f887 3281 	strb.w	r3, [r7, #641]	; 0x281
				FIFO_RCLK_H();
 80017b0:	2201      	movs	r2, #1
 80017b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b6:	4837      	ldr	r0, [pc, #220]	; (8001894 <Camera2LCD+0x1b4>)
 80017b8:	f000 fd72 	bl	80022a0 <HAL_GPIO_WritePin>

				FIFO_RCLK_L();
 80017bc:	2200      	movs	r2, #0
 80017be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c2:	4834      	ldr	r0, [pc, #208]	; (8001894 <Camera2LCD+0x1b4>)
 80017c4:	f000 fd6c 	bl	80022a0 <HAL_GPIO_WritePin>
				CAM_Data[0] = (GPIOA->IDR);	  /* GPIO_ReadInputData(GPIOA) */
 80017c8:	4b33      	ldr	r3, [pc, #204]	; (8001898 <Camera2LCD+0x1b8>)
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f887 3280 	strb.w	r3, [r7, #640]	; 0x280
				FIFO_RCLK_H();
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d8:	482e      	ldr	r0, [pc, #184]	; (8001894 <Camera2LCD+0x1b4>)
 80017da:	f000 fd61 	bl	80022a0 <HAL_GPIO_WritePin>

				CAMdata = (CAM_Data[1]<<8) | (CAM_Data[0]);
 80017de:	f897 3281 	ldrb.w	r3, [r7, #641]	; 0x281
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	b21a      	sxth	r2, r3
 80017e6:	f897 3280 	ldrb.w	r3, [r7, #640]	; 0x280
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	4313      	orrs	r3, r2
 80017ee:	f8a7 3282 	strh.w	r3, [r7, #642]	; 0x282

				LCD_RAM = CAMdata;
 80017f2:	4b2a      	ldr	r3, [pc, #168]	; (800189c <Camera2LCD+0x1bc>)
 80017f4:	f8b7 2282 	ldrh.w	r2, [r7, #642]	; 0x282
 80017f8:	801a      	strh	r2, [r3, #0]

				HorizantalData[2*count]   = CAM_Data[0];
 80017fa:	f9b7 3296 	ldrsh.w	r3, [r7, #662]	; 0x296
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	f897 1280 	ldrb.w	r1, [r7, #640]	; 0x280
 8001804:	463a      	mov	r2, r7
 8001806:	54d1      	strb	r1, [r2, r3]
				HorizantalData[2*count-1] = CAM_Data[1];
 8001808:	f9b7 3296 	ldrsh.w	r3, [r7, #662]	; 0x296
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	3b01      	subs	r3, #1
 8001810:	f897 1281 	ldrb.w	r1, [r7, #641]	; 0x281
 8001814:	463a      	mov	r2, r7
 8001816:	54d1      	strb	r1, [r2, r3]
		   for( count = 0; count < CAM_H; count++ )
 8001818:	f9b7 3296 	ldrsh.w	r3, [r7, #662]	; 0x296
 800181c:	b29b      	uxth	r3, r3
 800181e:	3301      	adds	r3, #1
 8001820:	b29b      	uxth	r3, r3
 8001822:	f8a7 3296 	strh.w	r3, [r7, #662]	; 0x296
 8001826:	f9b7 3296 	ldrsh.w	r3, [r7, #662]	; 0x296
 800182a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800182e:	dbb4      	blt.n	800179a <Camera2LCD+0xba>
			}

		   f_write(&file, HorizantalData, sizeof(HorizantalData), &brw);
 8001830:	4639      	mov	r1, r7
 8001832:	4b16      	ldr	r3, [pc, #88]	; (800188c <Camera2LCD+0x1ac>)
 8001834:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001838:	4812      	ldr	r0, [pc, #72]	; (8001884 <Camera2LCD+0x1a4>)
 800183a:	f004 ff38 	bl	80066ae <f_write>
	    for(count2 = 0;count2 < CAM_V; count2++)
 800183e:	f9b7 3294 	ldrsh.w	r3, [r7, #660]	; 0x294
 8001842:	b29b      	uxth	r3, r3
 8001844:	3301      	adds	r3, #1
 8001846:	b29b      	uxth	r3, r3
 8001848:	f8a7 3294 	strh.w	r3, [r7, #660]	; 0x294
 800184c:	f9b7 3294 	ldrsh.w	r3, [r7, #660]	; 0x294
 8001850:	2bef      	cmp	r3, #239	; 0xef
 8001852:	dd90      	ble.n	8001776 <Camera2LCD+0x96>
		}
	    f_close(&file);
 8001854:	480b      	ldr	r0, [pc, #44]	; (8001884 <Camera2LCD+0x1a4>)
 8001856:	f005 f91d 	bl	8006a94 <f_close>

	    Vsync = 0;
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <Camera2LCD+0x19c>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]

	    stopTime = HAL_GetTick() - startTime;
 8001860:	f000 fa44 	bl	8001cec <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284


	}
}
 8001870:	bf00      	nop
 8001872:	f507 7726 	add.w	r7, r7, #664	; 0x298
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000086 	.word	0x20000086
 8001880:	08006c10 	.word	0x08006c10
 8001884:	200003f4 	.word	0x200003f4
 8001888:	20000688 	.word	0x20000688
 800188c:	20000348 	.word	0x20000348
 8001890:	20000004 	.word	0x20000004
 8001894:	40020800 	.word	0x40020800
 8001898:	40020000 	.word	0x40020000
 800189c:	60020000 	.word	0x60020000

080018a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <Error_Handler+0x6>

080018a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_MspInit+0x4c>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	4a0f      	ldr	r2, [pc, #60]	; (80018f4 <HAL_MspInit+0x4c>)
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018bc:	6453      	str	r3, [r2, #68]	; 0x44
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <HAL_MspInit+0x4c>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	603b      	str	r3, [r7, #0]
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_MspInit+0x4c>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_MspInit+0x4c>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_MspInit+0x4c>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800

080018f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a19      	ldr	r2, [pc, #100]	; (800197c <HAL_I2C_MspInit+0x84>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d12c      	bne.n	8001974 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_I2C_MspInit+0x88>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a17      	ldr	r2, [pc, #92]	; (8001980 <HAL_I2C_MspInit+0x88>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_I2C_MspInit+0x88>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001936:	f44f 7340 	mov.w	r3, #768	; 0x300
 800193a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800193c:	2312      	movs	r3, #18
 800193e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001940:	2301      	movs	r3, #1
 8001942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001948:	2304      	movs	r3, #4
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	480c      	ldr	r0, [pc, #48]	; (8001984 <HAL_I2C_MspInit+0x8c>)
 8001954:	f000 fb0a 	bl	8001f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <HAL_I2C_MspInit+0x88>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	4a07      	ldr	r2, [pc, #28]	; (8001980 <HAL_I2C_MspInit+0x88>)
 8001962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001966:	6413      	str	r3, [r2, #64]	; 0x40
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_I2C_MspInit+0x88>)
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001974:	bf00      	nop
 8001976:	3728      	adds	r7, #40	; 0x28
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40005400 	.word	0x40005400
 8001980:	40023800 	.word	0x40023800
 8001984:	40020400 	.word	0x40020400

08001988 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <HAL_SPI_MspInit+0x84>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d12c      	bne.n	8001a04 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_SPI_MspInit+0x88>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <HAL_SPI_MspInit+0x88>)
 80019b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_SPI_MspInit+0x88>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_SPI_MspInit+0x88>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <HAL_SPI_MspInit+0x88>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_SPI_MspInit+0x88>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80019e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019f4:	2306      	movs	r3, #6
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <HAL_SPI_MspInit+0x8c>)
 8001a00:	f000 fab4 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a04:	bf00      	nop
 8001a06:	3728      	adds	r7, #40	; 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40003c00 	.word	0x40003c00
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020800 	.word	0x40020800

08001a18 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001a2c:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <HAL_FSMC_MspInit+0x88>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d131      	bne.n	8001a98 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001a34:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <HAL_FSMC_MspInit+0x88>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_FSMC_MspInit+0x8c>)
 8001a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a42:	4a18      	ldr	r2, [pc, #96]	; (8001aa4 <HAL_FSMC_MspInit+0x8c>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6393      	str	r3, [r2, #56]	; 0x38
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_FSMC_MspInit+0x8c>)
 8001a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001a56:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001a5a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a64:	2303      	movs	r3, #3
 8001a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a68:	230c      	movs	r3, #12
 8001a6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <HAL_FSMC_MspInit+0x90>)
 8001a72:	f000 fa7b 	bl	8001f6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a76:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001a7a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a88:	230c      	movs	r3, #12
 8001a8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4806      	ldr	r0, [pc, #24]	; (8001aac <HAL_FSMC_MspInit+0x94>)
 8001a92:	f000 fa6b 	bl	8001f6c <HAL_GPIO_Init>
 8001a96:	e000      	b.n	8001a9a <HAL_FSMC_MspInit+0x82>
    return;
 8001a98:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000088 	.word	0x20000088
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40020c00 	.word	0x40020c00

08001ab0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001ab8:	f7ff ffae 	bl	8001a18 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <NMI_Handler+0x4>

08001aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <BusFault_Handler+0x4>

08001adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <UsageFault_Handler+0x4>

08001ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b10:	f000 f8d8 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b1e:	2002      	movs	r0, #2
 8001b20:	f000 fbd8 	bl	80022d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  if( Vsync == 0 )
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <EXTI1_IRQHandler+0x7c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d121      	bne.n	8001b70 <EXTI1_IRQHandler+0x58>
  {
	  FIFO_WRST_H();
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2101      	movs	r1, #1
 8001b30:	4819      	ldr	r0, [pc, #100]	; (8001b98 <EXTI1_IRQHandler+0x80>)
 8001b32:	f000 fbb5 	bl	80022a0 <HAL_GPIO_WritePin>
	  FIFO_WRST_L();
 8001b36:	2200      	movs	r2, #0
 8001b38:	2101      	movs	r1, #1
 8001b3a:	4817      	ldr	r0, [pc, #92]	; (8001b98 <EXTI1_IRQHandler+0x80>)
 8001b3c:	f000 fbb0 	bl	80022a0 <HAL_GPIO_WritePin>

	  for(char i=0; i<10; i++);
 8001b40:	2300      	movs	r3, #0
 8001b42:	71fb      	strb	r3, [r7, #7]
 8001b44:	e002      	b.n	8001b4c <EXTI1_IRQHandler+0x34>
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	71fb      	strb	r3, [r7, #7]
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	2b09      	cmp	r3, #9
 8001b50:	d9f9      	bls.n	8001b46 <EXTI1_IRQHandler+0x2e>

	  FIFO_WRST_H();
 8001b52:	2201      	movs	r2, #1
 8001b54:	2101      	movs	r1, #1
 8001b56:	4810      	ldr	r0, [pc, #64]	; (8001b98 <EXTI1_IRQHandler+0x80>)
 8001b58:	f000 fba2 	bl	80022a0 <HAL_GPIO_WritePin>
      FIFO_WE_H();
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b62:	480e      	ldr	r0, [pc, #56]	; (8001b9c <EXTI1_IRQHandler+0x84>)
 8001b64:	f000 fb9c 	bl	80022a0 <HAL_GPIO_WritePin>
      Vsync = 1;
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <EXTI1_IRQHandler+0x7c>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	701a      	strb	r2, [r3, #0]
   {
      FIFO_WE_L();
      Vsync = 2;
   }
  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b6e:	e00c      	b.n	8001b8a <EXTI1_IRQHandler+0x72>
   else if( Vsync == 1 )
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <EXTI1_IRQHandler+0x7c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d108      	bne.n	8001b8a <EXTI1_IRQHandler+0x72>
      FIFO_WE_L();
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b7e:	4807      	ldr	r0, [pc, #28]	; (8001b9c <EXTI1_IRQHandler+0x84>)
 8001b80:	f000 fb8e 	bl	80022a0 <HAL_GPIO_WritePin>
      Vsync = 2;
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <EXTI1_IRQHandler+0x7c>)
 8001b86:	2202      	movs	r2, #2
 8001b88:	701a      	strb	r2, [r3, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000086 	.word	0x20000086
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	40020800 	.word	0x40020800

08001ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <SystemInit+0x28>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001baa:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <SystemInit+0x28>)
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <SystemInit+0x28>)
 8001bb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bba:	609a      	str	r2, [r3, #8]
#endif
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bd2:	e003      	b.n	8001bdc <LoopCopyDataInit>

08001bd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bda:	3104      	adds	r1, #4

08001bdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bdc:	480b      	ldr	r0, [pc, #44]	; (8001c0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001be0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001be2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001be4:	d3f6      	bcc.n	8001bd4 <CopyDataInit>
  ldr  r2, =_sbss
 8001be6:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001be8:	e002      	b.n	8001bf0 <LoopFillZerobss>

08001bea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bec:	f842 3b04 	str.w	r3, [r2], #4

08001bf0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bf2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bf4:	d3f9      	bcc.n	8001bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bf6:	f7ff ffd3 	bl	8001ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f004 ffd1 	bl	8006ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfe:	f7ff fb4b 	bl	8001298 <main>
  bx  lr    
 8001c02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c08:	08006d60 	.word	0x08006d60
  ldr  r0, =_sdata
 8001c0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c10:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8001c14:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8001c18:	20000b2c 	.word	0x20000b2c

08001c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC_IRQHandler>
	...

08001c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <HAL_Init+0x40>)
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_Init+0x40>)
 8001c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <HAL_Init+0x40>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 f94d 	bl	8001ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f000 f808 	bl	8001c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c54:	f7ff fe28 	bl	80018a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_InitTick+0x54>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f965 	bl	8001f52 <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f000 f92d 	bl	8001efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <HAL_InitTick+0x5c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000048 	.word	0x20000048
 8001cbc:	20000050 	.word	0x20000050
 8001cc0:	2000004c 	.word	0x2000004c

08001cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000050 	.word	0x20000050
 8001ce8:	200006c0 	.word	0x200006c0

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	200006c0 	.word	0x200006c0

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d005      	beq.n	8001d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_Delay+0x40>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d2a:	bf00      	nop
 8001d2c:	f7ff ffde 	bl	8001cec <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f7      	bhi.n	8001d2c <HAL_Delay+0x28>
  {
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000050 	.word	0x20000050

08001d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d64:	4013      	ands	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	60d3      	str	r3, [r2, #12]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <__NVIC_GetPriorityGrouping+0x18>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f003 0307 	and.w	r3, r3, #7
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	db0b      	blt.n	8001dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	4907      	ldr	r1, [pc, #28]	; (8001de4 <__NVIC_EnableIRQ+0x38>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	2001      	movs	r0, #1
 8001dce:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000e100 	.word	0xe000e100

08001de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	db0a      	blt.n	8001e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	490c      	ldr	r1, [pc, #48]	; (8001e34 <__NVIC_SetPriority+0x4c>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	0112      	lsls	r2, r2, #4
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e10:	e00a      	b.n	8001e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4908      	ldr	r1, [pc, #32]	; (8001e38 <__NVIC_SetPriority+0x50>)
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	3b04      	subs	r3, #4
 8001e20:	0112      	lsls	r2, r2, #4
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	440b      	add	r3, r1
 8001e26:	761a      	strb	r2, [r3, #24]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000e100 	.word	0xe000e100
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f1c3 0307 	rsb	r3, r3, #7
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	bf28      	it	cs
 8001e5a:	2304      	movcs	r3, #4
 8001e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d902      	bls.n	8001e6c <NVIC_EncodePriority+0x30>
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3b03      	subs	r3, #3
 8001e6a:	e000      	b.n	8001e6e <NVIC_EncodePriority+0x32>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	401a      	ands	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e84:	f04f 31ff 	mov.w	r1, #4294967295
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	43d9      	mvns	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	4313      	orrs	r3, r2
         );
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb4:	d301      	bcc.n	8001eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00f      	b.n	8001eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <SysTick_Config+0x40>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f7ff ff8e 	bl	8001de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <SysTick_Config+0x40>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed2:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <SysTick_Config+0x40>)
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	e000e010 	.word	0xe000e010

08001ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ff29 	bl	8001d48 <__NVIC_SetPriorityGrouping>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f10:	f7ff ff3e 	bl	8001d90 <__NVIC_GetPriorityGrouping>
 8001f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	6978      	ldr	r0, [r7, #20]
 8001f1c:	f7ff ff8e 	bl	8001e3c <NVIC_EncodePriority>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff5d 	bl	8001de8 <__NVIC_SetPriority>
}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff31 	bl	8001dac <__NVIC_EnableIRQ>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffa2 	bl	8001ea4 <SysTick_Config>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	e16b      	b.n	8002260 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f88:	2201      	movs	r2, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	f040 815a 	bne.w	800225a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d00b      	beq.n	8001fc6 <HAL_GPIO_Init+0x5a>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d007      	beq.n	8001fc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fba:	2b11      	cmp	r3, #17
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b12      	cmp	r3, #18
 8001fc4:	d130      	bne.n	8002028 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 0201 	and.w	r2, r3, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0xfc>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b12      	cmp	r3, #18
 8002066:	d123      	bne.n	80020b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	08da      	lsrs	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3208      	adds	r2, #8
 8002070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	220f      	movs	r2, #15
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	08da      	lsrs	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3208      	adds	r2, #8
 80020aa:	69b9      	ldr	r1, [r7, #24]
 80020ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0203 	and.w	r2, r3, #3
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80b4 	beq.w	800225a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b5f      	ldr	r3, [pc, #380]	; (8002274 <HAL_GPIO_Init+0x308>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	4a5e      	ldr	r2, [pc, #376]	; (8002274 <HAL_GPIO_Init+0x308>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002100:	6453      	str	r3, [r2, #68]	; 0x44
 8002102:	4b5c      	ldr	r3, [pc, #368]	; (8002274 <HAL_GPIO_Init+0x308>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210e:	4a5a      	ldr	r2, [pc, #360]	; (8002278 <HAL_GPIO_Init+0x30c>)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	3302      	adds	r3, #2
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	220f      	movs	r2, #15
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a51      	ldr	r2, [pc, #324]	; (800227c <HAL_GPIO_Init+0x310>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d02b      	beq.n	8002192 <HAL_GPIO_Init+0x226>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a50      	ldr	r2, [pc, #320]	; (8002280 <HAL_GPIO_Init+0x314>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d025      	beq.n	800218e <HAL_GPIO_Init+0x222>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a4f      	ldr	r2, [pc, #316]	; (8002284 <HAL_GPIO_Init+0x318>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d01f      	beq.n	800218a <HAL_GPIO_Init+0x21e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a4e      	ldr	r2, [pc, #312]	; (8002288 <HAL_GPIO_Init+0x31c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d019      	beq.n	8002186 <HAL_GPIO_Init+0x21a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4d      	ldr	r2, [pc, #308]	; (800228c <HAL_GPIO_Init+0x320>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_GPIO_Init+0x216>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4c      	ldr	r2, [pc, #304]	; (8002290 <HAL_GPIO_Init+0x324>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00d      	beq.n	800217e <HAL_GPIO_Init+0x212>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4b      	ldr	r2, [pc, #300]	; (8002294 <HAL_GPIO_Init+0x328>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d007      	beq.n	800217a <HAL_GPIO_Init+0x20e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4a      	ldr	r2, [pc, #296]	; (8002298 <HAL_GPIO_Init+0x32c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d101      	bne.n	8002176 <HAL_GPIO_Init+0x20a>
 8002172:	2307      	movs	r3, #7
 8002174:	e00e      	b.n	8002194 <HAL_GPIO_Init+0x228>
 8002176:	2308      	movs	r3, #8
 8002178:	e00c      	b.n	8002194 <HAL_GPIO_Init+0x228>
 800217a:	2306      	movs	r3, #6
 800217c:	e00a      	b.n	8002194 <HAL_GPIO_Init+0x228>
 800217e:	2305      	movs	r3, #5
 8002180:	e008      	b.n	8002194 <HAL_GPIO_Init+0x228>
 8002182:	2304      	movs	r3, #4
 8002184:	e006      	b.n	8002194 <HAL_GPIO_Init+0x228>
 8002186:	2303      	movs	r3, #3
 8002188:	e004      	b.n	8002194 <HAL_GPIO_Init+0x228>
 800218a:	2302      	movs	r3, #2
 800218c:	e002      	b.n	8002194 <HAL_GPIO_Init+0x228>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <HAL_GPIO_Init+0x228>
 8002192:	2300      	movs	r3, #0
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	f002 0203 	and.w	r2, r2, #3
 800219a:	0092      	lsls	r2, r2, #2
 800219c:	4093      	lsls	r3, r2
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a4:	4934      	ldr	r1, [pc, #208]	; (8002278 <HAL_GPIO_Init+0x30c>)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	089b      	lsrs	r3, r3, #2
 80021aa:	3302      	adds	r3, #2
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021b2:	4b3a      	ldr	r3, [pc, #232]	; (800229c <HAL_GPIO_Init+0x330>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d6:	4a31      	ldr	r2, [pc, #196]	; (800229c <HAL_GPIO_Init+0x330>)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021dc:	4b2f      	ldr	r3, [pc, #188]	; (800229c <HAL_GPIO_Init+0x330>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002200:	4a26      	ldr	r2, [pc, #152]	; (800229c <HAL_GPIO_Init+0x330>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002206:	4b25      	ldr	r3, [pc, #148]	; (800229c <HAL_GPIO_Init+0x330>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800222a:	4a1c      	ldr	r2, [pc, #112]	; (800229c <HAL_GPIO_Init+0x330>)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_GPIO_Init+0x330>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002254:	4a11      	ldr	r2, [pc, #68]	; (800229c <HAL_GPIO_Init+0x330>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3301      	adds	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2b0f      	cmp	r3, #15
 8002264:	f67f ae90 	bls.w	8001f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002268:	bf00      	nop
 800226a:	3724      	adds	r7, #36	; 0x24
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40023800 	.word	0x40023800
 8002278:	40013800 	.word	0x40013800
 800227c:	40020000 	.word	0x40020000
 8002280:	40020400 	.word	0x40020400
 8002284:	40020800 	.word	0x40020800
 8002288:	40020c00 	.word	0x40020c00
 800228c:	40021000 	.word	0x40021000
 8002290:	40021400 	.word	0x40021400
 8002294:	40021800 	.word	0x40021800
 8002298:	40021c00 	.word	0x40021c00
 800229c:	40013c00 	.word	0x40013c00

080022a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
 80022ac:	4613      	mov	r3, r2
 80022ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b0:	787b      	ldrb	r3, [r7, #1]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022bc:	e003      	b.n	80022c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022be:	887b      	ldrh	r3, [r7, #2]
 80022c0:	041a      	lsls	r2, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	619a      	str	r2, [r3, #24]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022de:	4b08      	ldr	r3, [pc, #32]	; (8002300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d006      	beq.n	80022f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022ea:	4a05      	ldr	r2, [pc, #20]	; (8002300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f806 	bl	8002304 <HAL_GPIO_EXTI_Callback>
  }
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40013c00 	.word	0x40013c00

08002304 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e11f      	b.n	800256e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff fad8 	bl	80018f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2224      	movs	r2, #36	; 0x24
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800236e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800237e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002380:	f001 fd20 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8002384:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4a7b      	ldr	r2, [pc, #492]	; (8002578 <HAL_I2C_Init+0x25c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d807      	bhi.n	80023a0 <HAL_I2C_Init+0x84>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4a7a      	ldr	r2, [pc, #488]	; (800257c <HAL_I2C_Init+0x260>)
 8002394:	4293      	cmp	r3, r2
 8002396:	bf94      	ite	ls
 8002398:	2301      	movls	r3, #1
 800239a:	2300      	movhi	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	e006      	b.n	80023ae <HAL_I2C_Init+0x92>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4a77      	ldr	r2, [pc, #476]	; (8002580 <HAL_I2C_Init+0x264>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	bf94      	ite	ls
 80023a8:	2301      	movls	r3, #1
 80023aa:	2300      	movhi	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0db      	b.n	800256e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4a72      	ldr	r2, [pc, #456]	; (8002584 <HAL_I2C_Init+0x268>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	0c9b      	lsrs	r3, r3, #18
 80023c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4a64      	ldr	r2, [pc, #400]	; (8002578 <HAL_I2C_Init+0x25c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d802      	bhi.n	80023f0 <HAL_I2C_Init+0xd4>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	3301      	adds	r3, #1
 80023ee:	e009      	b.n	8002404 <HAL_I2C_Init+0xe8>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023f6:	fb02 f303 	mul.w	r3, r2, r3
 80023fa:	4a63      	ldr	r2, [pc, #396]	; (8002588 <HAL_I2C_Init+0x26c>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	099b      	lsrs	r3, r3, #6
 8002402:	3301      	adds	r3, #1
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	430b      	orrs	r3, r1
 800240a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002416:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4956      	ldr	r1, [pc, #344]	; (8002578 <HAL_I2C_Init+0x25c>)
 8002420:	428b      	cmp	r3, r1
 8002422:	d80d      	bhi.n	8002440 <HAL_I2C_Init+0x124>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1e59      	subs	r1, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002432:	3301      	adds	r3, #1
 8002434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002438:	2b04      	cmp	r3, #4
 800243a:	bf38      	it	cc
 800243c:	2304      	movcc	r3, #4
 800243e:	e04f      	b.n	80024e0 <HAL_I2C_Init+0x1c4>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d111      	bne.n	800246c <HAL_I2C_Init+0x150>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1e58      	subs	r0, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6859      	ldr	r1, [r3, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	440b      	add	r3, r1
 8002456:	fbb0 f3f3 	udiv	r3, r0, r3
 800245a:	3301      	adds	r3, #1
 800245c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf0c      	ite	eq
 8002464:	2301      	moveq	r3, #1
 8002466:	2300      	movne	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e012      	b.n	8002492 <HAL_I2C_Init+0x176>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1e58      	subs	r0, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	0099      	lsls	r1, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002482:	3301      	adds	r3, #1
 8002484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_I2C_Init+0x17e>
 8002496:	2301      	movs	r3, #1
 8002498:	e022      	b.n	80024e0 <HAL_I2C_Init+0x1c4>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10e      	bne.n	80024c0 <HAL_I2C_Init+0x1a4>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1e58      	subs	r0, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6859      	ldr	r1, [r3, #4]
 80024aa:	460b      	mov	r3, r1
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	440b      	add	r3, r1
 80024b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024be:	e00f      	b.n	80024e0 <HAL_I2C_Init+0x1c4>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1e58      	subs	r0, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6859      	ldr	r1, [r3, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	0099      	lsls	r1, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d6:	3301      	adds	r3, #1
 80024d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	6809      	ldr	r1, [r1, #0]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69da      	ldr	r2, [r3, #28]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800250e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6911      	ldr	r1, [r2, #16]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68d2      	ldr	r2, [r2, #12]
 800251a:	4311      	orrs	r1, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	430b      	orrs	r3, r1
 8002522:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	000186a0 	.word	0x000186a0
 800257c:	001e847f 	.word	0x001e847f
 8002580:	003d08ff 	.word	0x003d08ff
 8002584:	431bde83 	.word	0x431bde83
 8002588:	10624dd3 	.word	0x10624dd3

0800258c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af02      	add	r7, sp, #8
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	461a      	mov	r2, r3
 8002598:	460b      	mov	r3, r1
 800259a:	817b      	strh	r3, [r7, #10]
 800259c:	4613      	mov	r3, r2
 800259e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025a0:	f7ff fba4 	bl	8001cec <HAL_GetTick>
 80025a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	f040 80e0 	bne.w	8002774 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2319      	movs	r3, #25
 80025ba:	2201      	movs	r2, #1
 80025bc:	4970      	ldr	r1, [pc, #448]	; (8002780 <HAL_I2C_Master_Transmit+0x1f4>)
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fde8 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025ca:	2302      	movs	r3, #2
 80025cc:	e0d3      	b.n	8002776 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_I2C_Master_Transmit+0x50>
 80025d8:	2302      	movs	r3, #2
 80025da:	e0cc      	b.n	8002776 <HAL_I2C_Master_Transmit+0x1ea>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d007      	beq.n	8002602 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002610:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2221      	movs	r2, #33	; 0x21
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2210      	movs	r2, #16
 800261e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	893a      	ldrh	r2, [r7, #8]
 8002632:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a50      	ldr	r2, [pc, #320]	; (8002784 <HAL_I2C_Master_Transmit+0x1f8>)
 8002642:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002644:	8979      	ldrh	r1, [r7, #10]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	6a3a      	ldr	r2, [r7, #32]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 fbbc 	bl	8002dc8 <I2C_MasterRequestWrite>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e08d      	b.n	8002776 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002670:	e066      	b.n	8002740 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	6a39      	ldr	r1, [r7, #32]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fe62 	bl	8003340 <I2C_WaitOnTXEFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00d      	beq.n	800269e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	2b04      	cmp	r3, #4
 8002688:	d107      	bne.n	800269a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002698:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e06b      	b.n	8002776 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	781a      	ldrb	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d11b      	bne.n	8002714 <HAL_I2C_Master_Transmit+0x188>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d017      	beq.n	8002714 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	781a      	ldrb	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	6a39      	ldr	r1, [r7, #32]
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 fe52 	bl	80033c2 <I2C_WaitOnBTFFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00d      	beq.n	8002740 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	2b04      	cmp	r3, #4
 800272a:	d107      	bne.n	800273c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e01a      	b.n	8002776 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002744:	2b00      	cmp	r3, #0
 8002746:	d194      	bne.n	8002672 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	e000      	b.n	8002776 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002774:	2302      	movs	r3, #2
  }
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	00100002 	.word	0x00100002
 8002784:	ffff0000 	.word	0xffff0000

08002788 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08c      	sub	sp, #48	; 0x30
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	461a      	mov	r2, r3
 8002794:	460b      	mov	r3, r1
 8002796:	817b      	strh	r3, [r7, #10]
 8002798:	4613      	mov	r3, r2
 800279a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800279c:	f7ff faa6 	bl	8001cec <HAL_GetTick>
 80027a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b20      	cmp	r3, #32
 80027ac:	f040 820b 	bne.w	8002bc6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2319      	movs	r3, #25
 80027b6:	2201      	movs	r2, #1
 80027b8:	497c      	ldr	r1, [pc, #496]	; (80029ac <HAL_I2C_Master_Receive+0x224>)
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 fcea 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80027c6:	2302      	movs	r3, #2
 80027c8:	e1fe      	b.n	8002bc8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_I2C_Master_Receive+0x50>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e1f7      	b.n	8002bc8 <HAL_I2C_Master_Receive+0x440>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d007      	beq.n	80027fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0201 	orr.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2222      	movs	r2, #34	; 0x22
 8002812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2210      	movs	r2, #16
 800281a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	893a      	ldrh	r2, [r7, #8]
 800282e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4a5c      	ldr	r2, [pc, #368]	; (80029b0 <HAL_I2C_Master_Receive+0x228>)
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002840:	8979      	ldrh	r1, [r7, #10]
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fb40 	bl	8002ecc <I2C_MasterRequestRead>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e1b8      	b.n	8002bc8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	2b00      	cmp	r3, #0
 800285c:	d113      	bne.n	8002886 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	623b      	str	r3, [r7, #32]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	623b      	str	r3, [r7, #32]
 8002872:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e18c      	b.n	8002ba0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	2b01      	cmp	r3, #1
 800288c:	d11b      	bne.n	80028c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800289c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e16c      	b.n	8002ba0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d11b      	bne.n	8002906 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	e14c      	b.n	8002ba0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002914:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800292c:	e138      	b.n	8002ba0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002932:	2b03      	cmp	r3, #3
 8002934:	f200 80f1 	bhi.w	8002b1a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293c:	2b01      	cmp	r3, #1
 800293e:	d123      	bne.n	8002988 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002942:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 fd7d 	bl	8003444 <I2C_WaitOnRXNEFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e139      	b.n	8002bc8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002986:	e10b      	b.n	8002ba0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298c:	2b02      	cmp	r3, #2
 800298e:	d14e      	bne.n	8002a2e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002996:	2200      	movs	r2, #0
 8002998:	4906      	ldr	r1, [pc, #24]	; (80029b4 <HAL_I2C_Master_Receive+0x22c>)
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fbfa 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d008      	beq.n	80029b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e10e      	b.n	8002bc8 <HAL_I2C_Master_Receive+0x440>
 80029aa:	bf00      	nop
 80029ac:	00100002 	.word	0x00100002
 80029b0:	ffff0000 	.word	0xffff0000
 80029b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a2c:	e0b8      	b.n	8002ba0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	2200      	movs	r2, #0
 8002a36:	4966      	ldr	r1, [pc, #408]	; (8002bd0 <HAL_I2C_Master_Receive+0x448>)
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 fbab 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0bf      	b.n	8002bc8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	2200      	movs	r2, #0
 8002a92:	494f      	ldr	r1, [pc, #316]	; (8002bd0 <HAL_I2C_Master_Receive+0x448>)
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 fb7d 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e091      	b.n	8002bc8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b18:	e042      	b.n	8002ba0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 fc90 	bl	8003444 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e04c      	b.n	8002bc8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d118      	bne.n	8002ba0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f47f aec2 	bne.w	800292e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e000      	b.n	8002bc8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002bc6:	2302      	movs	r3, #2
  }
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3728      	adds	r7, #40	; 0x28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	00010004 	.word	0x00010004

08002bd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	4608      	mov	r0, r1
 8002bde:	4611      	mov	r1, r2
 8002be0:	461a      	mov	r2, r3
 8002be2:	4603      	mov	r3, r0
 8002be4:	817b      	strh	r3, [r7, #10]
 8002be6:	460b      	mov	r3, r1
 8002be8:	813b      	strh	r3, [r7, #8]
 8002bea:	4613      	mov	r3, r2
 8002bec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bee:	f7ff f87d 	bl	8001cec <HAL_GetTick>
 8002bf2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	f040 80d9 	bne.w	8002db4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	2319      	movs	r3, #25
 8002c08:	2201      	movs	r2, #1
 8002c0a:	496d      	ldr	r1, [pc, #436]	; (8002dc0 <HAL_I2C_Mem_Write+0x1ec>)
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 fac1 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e0cc      	b.n	8002db6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_I2C_Mem_Write+0x56>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e0c5      	b.n	8002db6 <HAL_I2C_Mem_Write+0x1e2>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d007      	beq.n	8002c50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2221      	movs	r2, #33	; 0x21
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2240      	movs	r2, #64	; 0x40
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a3a      	ldr	r2, [r7, #32]
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a4d      	ldr	r2, [pc, #308]	; (8002dc4 <HAL_I2C_Mem_Write+0x1f0>)
 8002c90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c92:	88f8      	ldrh	r0, [r7, #6]
 8002c94:	893a      	ldrh	r2, [r7, #8]
 8002c96:	8979      	ldrh	r1, [r7, #10]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f9e0 	bl	8003068 <I2C_RequestMemoryWrite>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d052      	beq.n	8002d54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e081      	b.n	8002db6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fb42 	bl	8003340 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00d      	beq.n	8002cde <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d107      	bne.n	8002cda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e06b      	b.n	8002db6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	781a      	ldrb	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d11b      	bne.n	8002d54 <HAL_I2C_Mem_Write+0x180>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d017      	beq.n	8002d54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1aa      	bne.n	8002cb2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fb2e 	bl	80033c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00d      	beq.n	8002d88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d107      	bne.n	8002d84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e016      	b.n	8002db6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	e000      	b.n	8002db6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002db4:	2302      	movs	r3, #2
  }
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	00100002 	.word	0x00100002
 8002dc4:	ffff0000 	.word	0xffff0000

08002dc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d006      	beq.n	8002df2 <I2C_MasterRequestWrite+0x2a>
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d003      	beq.n	8002df2 <I2C_MasterRequestWrite+0x2a>
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002df0:	d108      	bne.n	8002e04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	e00b      	b.n	8002e1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	2b12      	cmp	r3, #18
 8002e0a:	d107      	bne.n	8002e1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f9b3 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e42:	d103      	bne.n	8002e4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e035      	b.n	8002ebc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e58:	d108      	bne.n	8002e6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e5a:	897b      	ldrh	r3, [r7, #10]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e68:	611a      	str	r2, [r3, #16]
 8002e6a:	e01b      	b.n	8002ea4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e6c:	897b      	ldrh	r3, [r7, #10]
 8002e6e:	11db      	asrs	r3, r3, #7
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f003 0306 	and.w	r3, r3, #6
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f063 030f 	orn	r3, r3, #15
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	490e      	ldr	r1, [pc, #56]	; (8002ec4 <I2C_MasterRequestWrite+0xfc>)
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f9d9 	bl	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e010      	b.n	8002ebc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e9a:	897b      	ldrh	r3, [r7, #10]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4907      	ldr	r1, [pc, #28]	; (8002ec8 <I2C_MasterRequestWrite+0x100>)
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f9c9 	bl	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	00010008 	.word	0x00010008
 8002ec8:	00010002 	.word	0x00010002

08002ecc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ef0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d006      	beq.n	8002f06 <I2C_MasterRequestRead+0x3a>
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d003      	beq.n	8002f06 <I2C_MasterRequestRead+0x3a>
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f04:	d108      	bne.n	8002f18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	e00b      	b.n	8002f30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	2b11      	cmp	r3, #17
 8002f1e:	d107      	bne.n	8002f30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f929 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00d      	beq.n	8002f64 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f56:	d103      	bne.n	8002f60 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e079      	b.n	8003058 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f6c:	d108      	bne.n	8002f80 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f6e:	897b      	ldrh	r3, [r7, #10]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f043 0301 	orr.w	r3, r3, #1
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	611a      	str	r2, [r3, #16]
 8002f7e:	e05f      	b.n	8003040 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f80:	897b      	ldrh	r3, [r7, #10]
 8002f82:	11db      	asrs	r3, r3, #7
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	f003 0306 	and.w	r3, r3, #6
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	f063 030f 	orn	r3, r3, #15
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4930      	ldr	r1, [pc, #192]	; (8003060 <I2C_MasterRequestRead+0x194>)
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f94f 	bl	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e054      	b.n	8003058 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fae:	897b      	ldrh	r3, [r7, #10]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4929      	ldr	r1, [pc, #164]	; (8003064 <I2C_MasterRequestRead+0x198>)
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f93f 	bl	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e044      	b.n	8003058 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ff2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f8c7 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00d      	beq.n	8003028 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800301a:	d103      	bne.n	8003024 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e017      	b.n	8003058 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003028:	897b      	ldrh	r3, [r7, #10]
 800302a:	11db      	asrs	r3, r3, #7
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f003 0306 	and.w	r3, r3, #6
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f063 030e 	orn	r3, r3, #14
 8003038:	b2da      	uxtb	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	4907      	ldr	r1, [pc, #28]	; (8003064 <I2C_MasterRequestRead+0x198>)
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f8fb 	bl	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	00010008 	.word	0x00010008
 8003064:	00010002 	.word	0x00010002

08003068 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	461a      	mov	r2, r3
 8003076:	4603      	mov	r3, r0
 8003078:	817b      	strh	r3, [r7, #10]
 800307a:	460b      	mov	r3, r1
 800307c:	813b      	strh	r3, [r7, #8]
 800307e:	4613      	mov	r3, r2
 8003080:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003090:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	2200      	movs	r2, #0
 800309a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f878 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b8:	d103      	bne.n	80030c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e05f      	b.n	8003186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030c6:	897b      	ldrh	r3, [r7, #10]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	6a3a      	ldr	r2, [r7, #32]
 80030da:	492d      	ldr	r1, [pc, #180]	; (8003190 <I2C_RequestMemoryWrite+0x128>)
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f8b0 	bl	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e04c      	b.n	8003186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003104:	6a39      	ldr	r1, [r7, #32]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f91a 	bl	8003340 <I2C_WaitOnTXEFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00d      	beq.n	800312e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2b04      	cmp	r3, #4
 8003118:	d107      	bne.n	800312a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003128:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e02b      	b.n	8003186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d105      	bne.n	8003140 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003134:	893b      	ldrh	r3, [r7, #8]
 8003136:	b2da      	uxtb	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	611a      	str	r2, [r3, #16]
 800313e:	e021      	b.n	8003184 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003140:	893b      	ldrh	r3, [r7, #8]
 8003142:	0a1b      	lsrs	r3, r3, #8
 8003144:	b29b      	uxth	r3, r3
 8003146:	b2da      	uxtb	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003150:	6a39      	ldr	r1, [r7, #32]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f8f4 	bl	8003340 <I2C_WaitOnTXEFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00d      	beq.n	800317a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b04      	cmp	r3, #4
 8003164:	d107      	bne.n	8003176 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003174:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e005      	b.n	8003186 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800317a:	893b      	ldrh	r3, [r7, #8]
 800317c:	b2da      	uxtb	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	00010002 	.word	0x00010002

08003194 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a4:	e025      	b.n	80031f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d021      	beq.n	80031f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ae:	f7fe fd9d 	bl	8001cec <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d302      	bcc.n	80031c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d116      	bne.n	80031f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f043 0220 	orr.w	r2, r3, #32
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e023      	b.n	800323a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d10d      	bne.n	8003218 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	43da      	mvns	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4013      	ands	r3, r2
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	bf0c      	ite	eq
 800320e:	2301      	moveq	r3, #1
 8003210:	2300      	movne	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	e00c      	b.n	8003232 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	43da      	mvns	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4013      	ands	r3, r2
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	bf0c      	ite	eq
 800322a:	2301      	moveq	r3, #1
 800322c:	2300      	movne	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	429a      	cmp	r2, r3
 8003236:	d0b6      	beq.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003250:	e051      	b.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003260:	d123      	bne.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003270:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800327a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f043 0204 	orr.w	r2, r3, #4
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e046      	b.n	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b0:	d021      	beq.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b2:	f7fe fd1b 	bl	8001cec <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d302      	bcc.n	80032c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d116      	bne.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f043 0220 	orr.w	r2, r3, #32
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e020      	b.n	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	0c1b      	lsrs	r3, r3, #16
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d10c      	bne.n	800331a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	43da      	mvns	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4013      	ands	r3, r2
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	bf14      	ite	ne
 8003312:	2301      	movne	r3, #1
 8003314:	2300      	moveq	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	e00b      	b.n	8003332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	43da      	mvns	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	4013      	ands	r3, r2
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d18d      	bne.n	8003252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800334c:	e02d      	b.n	80033aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f8ce 	bl	80034f0 <I2C_IsAcknowledgeFailed>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e02d      	b.n	80033ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d021      	beq.n	80033aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003366:	f7fe fcc1 	bl	8001cec <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	d302      	bcc.n	800337c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d116      	bne.n	80033aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f043 0220 	orr.w	r2, r3, #32
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e007      	b.n	80033ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b4:	2b80      	cmp	r3, #128	; 0x80
 80033b6:	d1ca      	bne.n	800334e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033ce:	e02d      	b.n	800342c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f88d 	bl	80034f0 <I2C_IsAcknowledgeFailed>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e02d      	b.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e6:	d021      	beq.n	800342c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e8:	f7fe fc80 	bl	8001cec <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d302      	bcc.n	80033fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e007      	b.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b04      	cmp	r3, #4
 8003438:	d1ca      	bne.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003450:	e042      	b.n	80034d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	2b10      	cmp	r3, #16
 800345e:	d119      	bne.n	8003494 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0210 	mvn.w	r2, #16
 8003468:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e029      	b.n	80034e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003494:	f7fe fc2a 	bl	8001cec <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d302      	bcc.n	80034aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d116      	bne.n	80034d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f043 0220 	orr.w	r2, r3, #32
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e007      	b.n	80034e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e2:	2b40      	cmp	r3, #64	; 0x40
 80034e4:	d1b5      	bne.n	8003452 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003506:	d11b      	bne.n	8003540 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003510:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	f043 0204 	orr.w	r2, r3, #4
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e25b      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d075      	beq.n	800365a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800356e:	4ba3      	ldr	r3, [pc, #652]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	2b04      	cmp	r3, #4
 8003578:	d00c      	beq.n	8003594 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357a:	4ba0      	ldr	r3, [pc, #640]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003582:	2b08      	cmp	r3, #8
 8003584:	d112      	bne.n	80035ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003586:	4b9d      	ldr	r3, [pc, #628]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003592:	d10b      	bne.n	80035ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003594:	4b99      	ldr	r3, [pc, #612]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d05b      	beq.n	8003658 <HAL_RCC_OscConfig+0x108>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d157      	bne.n	8003658 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e236      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b4:	d106      	bne.n	80035c4 <HAL_RCC_OscConfig+0x74>
 80035b6:	4b91      	ldr	r3, [pc, #580]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a90      	ldr	r2, [pc, #576]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e01d      	b.n	8003600 <HAL_RCC_OscConfig+0xb0>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035cc:	d10c      	bne.n	80035e8 <HAL_RCC_OscConfig+0x98>
 80035ce:	4b8b      	ldr	r3, [pc, #556]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a8a      	ldr	r2, [pc, #552]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4b88      	ldr	r3, [pc, #544]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a87      	ldr	r2, [pc, #540]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	e00b      	b.n	8003600 <HAL_RCC_OscConfig+0xb0>
 80035e8:	4b84      	ldr	r3, [pc, #528]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a83      	ldr	r2, [pc, #524]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80035ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	4b81      	ldr	r3, [pc, #516]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a80      	ldr	r2, [pc, #512]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80035fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d013      	beq.n	8003630 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7fe fb70 	bl	8001cec <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003610:	f7fe fb6c 	bl	8001cec <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	; 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e1fb      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	4b76      	ldr	r3, [pc, #472]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0xc0>
 800362e:	e014      	b.n	800365a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003630:	f7fe fb5c 	bl	8001cec <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003638:	f7fe fb58 	bl	8001cec <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e1e7      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364a:	4b6c      	ldr	r3, [pc, #432]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0xe8>
 8003656:	e000      	b.n	800365a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d063      	beq.n	800372e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003666:	4b65      	ldr	r3, [pc, #404]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00b      	beq.n	800368a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003672:	4b62      	ldr	r3, [pc, #392]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800367a:	2b08      	cmp	r3, #8
 800367c:	d11c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800367e:	4b5f      	ldr	r3, [pc, #380]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d116      	bne.n	80036b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368a:	4b5c      	ldr	r3, [pc, #368]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <HAL_RCC_OscConfig+0x152>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d001      	beq.n	80036a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e1bb      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a2:	4b56      	ldr	r3, [pc, #344]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4952      	ldr	r1, [pc, #328]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b6:	e03a      	b.n	800372e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d020      	beq.n	8003702 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c0:	4b4f      	ldr	r3, [pc, #316]	; (8003800 <HAL_RCC_OscConfig+0x2b0>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c6:	f7fe fb11 	bl	8001cec <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ce:	f7fe fb0d 	bl	8001cec <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e19c      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e0:	4b46      	ldr	r3, [pc, #280]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ec:	4b43      	ldr	r3, [pc, #268]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4940      	ldr	r1, [pc, #256]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	600b      	str	r3, [r1, #0]
 8003700:	e015      	b.n	800372e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003702:	4b3f      	ldr	r3, [pc, #252]	; (8003800 <HAL_RCC_OscConfig+0x2b0>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fe faf0 	bl	8001cec <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003710:	f7fe faec 	bl	8001cec <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e17b      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003722:	4b36      	ldr	r3, [pc, #216]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d030      	beq.n	800379c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d016      	beq.n	8003770 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003742:	4b30      	ldr	r3, [pc, #192]	; (8003804 <HAL_RCC_OscConfig+0x2b4>)
 8003744:	2201      	movs	r2, #1
 8003746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fe fad0 	bl	8001cec <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003750:	f7fe facc 	bl	8001cec <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e15b      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003762:	4b26      	ldr	r3, [pc, #152]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 8003764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0x200>
 800376e:	e015      	b.n	800379c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003770:	4b24      	ldr	r3, [pc, #144]	; (8003804 <HAL_RCC_OscConfig+0x2b4>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003776:	f7fe fab9 	bl	8001cec <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800377e:	f7fe fab5 	bl	8001cec <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e144      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 8003792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f0      	bne.n	800377e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80a0 	beq.w	80038ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037aa:	2300      	movs	r3, #0
 80037ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ae:	4b13      	ldr	r3, [pc, #76]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10f      	bne.n	80037da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	4a0e      	ldr	r2, [pc, #56]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80037c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ca:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d6:	2301      	movs	r3, #1
 80037d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037da:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <HAL_RCC_OscConfig+0x2b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d121      	bne.n	800382a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e6:	4b08      	ldr	r3, [pc, #32]	; (8003808 <HAL_RCC_OscConfig+0x2b8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a07      	ldr	r2, [pc, #28]	; (8003808 <HAL_RCC_OscConfig+0x2b8>)
 80037ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f2:	f7fe fa7b 	bl	8001cec <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f8:	e011      	b.n	800381e <HAL_RCC_OscConfig+0x2ce>
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800
 8003800:	42470000 	.word	0x42470000
 8003804:	42470e80 	.word	0x42470e80
 8003808:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380c:	f7fe fa6e 	bl	8001cec <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e0fd      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381e:	4b81      	ldr	r3, [pc, #516]	; (8003a24 <HAL_RCC_OscConfig+0x4d4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d106      	bne.n	8003840 <HAL_RCC_OscConfig+0x2f0>
 8003832:	4b7d      	ldr	r3, [pc, #500]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	4a7c      	ldr	r2, [pc, #496]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	6713      	str	r3, [r2, #112]	; 0x70
 800383e:	e01c      	b.n	800387a <HAL_RCC_OscConfig+0x32a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b05      	cmp	r3, #5
 8003846:	d10c      	bne.n	8003862 <HAL_RCC_OscConfig+0x312>
 8003848:	4b77      	ldr	r3, [pc, #476]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384c:	4a76      	ldr	r2, [pc, #472]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 800384e:	f043 0304 	orr.w	r3, r3, #4
 8003852:	6713      	str	r3, [r2, #112]	; 0x70
 8003854:	4b74      	ldr	r3, [pc, #464]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 8003856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003858:	4a73      	ldr	r2, [pc, #460]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	6713      	str	r3, [r2, #112]	; 0x70
 8003860:	e00b      	b.n	800387a <HAL_RCC_OscConfig+0x32a>
 8003862:	4b71      	ldr	r3, [pc, #452]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	4a70      	ldr	r2, [pc, #448]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	6713      	str	r3, [r2, #112]	; 0x70
 800386e:	4b6e      	ldr	r3, [pc, #440]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	4a6d      	ldr	r2, [pc, #436]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 8003874:	f023 0304 	bic.w	r3, r3, #4
 8003878:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d015      	beq.n	80038ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003882:	f7fe fa33 	bl	8001cec <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003888:	e00a      	b.n	80038a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7fe fa2f 	bl	8001cec <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f241 3288 	movw	r2, #5000	; 0x1388
 8003898:	4293      	cmp	r3, r2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e0bc      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a0:	4b61      	ldr	r3, [pc, #388]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 80038a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0ee      	beq.n	800388a <HAL_RCC_OscConfig+0x33a>
 80038ac:	e014      	b.n	80038d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ae:	f7fe fa1d 	bl	8001cec <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b4:	e00a      	b.n	80038cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b6:	f7fe fa19 	bl	8001cec <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e0a6      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038cc:	4b56      	ldr	r3, [pc, #344]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1ee      	bne.n	80038b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d105      	bne.n	80038ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038de:	4b52      	ldr	r3, [pc, #328]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	4a51      	ldr	r2, [pc, #324]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 80038e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8092 	beq.w	8003a18 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038f4:	4b4c      	ldr	r3, [pc, #304]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 030c 	and.w	r3, r3, #12
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d05c      	beq.n	80039ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d141      	bne.n	800398c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003908:	4b48      	ldr	r3, [pc, #288]	; (8003a2c <HAL_RCC_OscConfig+0x4dc>)
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390e:	f7fe f9ed 	bl	8001cec <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003916:	f7fe f9e9 	bl	8001cec <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e078      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003928:	4b3f      	ldr	r3, [pc, #252]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1f0      	bne.n	8003916 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	019b      	lsls	r3, r3, #6
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	3b01      	subs	r3, #1
 800394e:	041b      	lsls	r3, r3, #16
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003956:	061b      	lsls	r3, r3, #24
 8003958:	4933      	ldr	r1, [pc, #204]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 800395a:	4313      	orrs	r3, r2
 800395c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800395e:	4b33      	ldr	r3, [pc, #204]	; (8003a2c <HAL_RCC_OscConfig+0x4dc>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7fe f9c2 	bl	8001cec <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396c:	f7fe f9be 	bl	8001cec <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e04d      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397e:	4b2a      	ldr	r3, [pc, #168]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x41c>
 800398a:	e045      	b.n	8003a18 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398c:	4b27      	ldr	r3, [pc, #156]	; (8003a2c <HAL_RCC_OscConfig+0x4dc>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003992:	f7fe f9ab 	bl	8001cec <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399a:	f7fe f9a7 	bl	8001cec <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e036      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ac:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f0      	bne.n	800399a <HAL_RCC_OscConfig+0x44a>
 80039b8:	e02e      	b.n	8003a18 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e029      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039c6:	4b18      	ldr	r3, [pc, #96]	; (8003a28 <HAL_RCC_OscConfig+0x4d8>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d11c      	bne.n	8003a14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d115      	bne.n	8003a14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039ee:	4013      	ands	r3, r2
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d10d      	bne.n	8003a14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d106      	bne.n	8003a14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40007000 	.word	0x40007000
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	42470060 	.word	0x42470060

08003a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0cc      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a44:	4b68      	ldr	r3, [pc, #416]	; (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 030f 	and.w	r3, r3, #15
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d90c      	bls.n	8003a6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b65      	ldr	r3, [pc, #404]	; (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b63      	ldr	r3, [pc, #396]	; (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0b8      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d020      	beq.n	8003aba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a84:	4b59      	ldr	r3, [pc, #356]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4a58      	ldr	r2, [pc, #352]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a9c:	4b53      	ldr	r3, [pc, #332]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	4a52      	ldr	r2, [pc, #328]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa8:	4b50      	ldr	r3, [pc, #320]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	494d      	ldr	r1, [pc, #308]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d044      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d107      	bne.n	8003ade <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	4b47      	ldr	r3, [pc, #284]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d119      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e07f      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d003      	beq.n	8003aee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d107      	bne.n	8003afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aee:	4b3f      	ldr	r3, [pc, #252]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e06f      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afe:	4b3b      	ldr	r3, [pc, #236]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e067      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b0e:	4b37      	ldr	r3, [pc, #220]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f023 0203 	bic.w	r2, r3, #3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4934      	ldr	r1, [pc, #208]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b20:	f7fe f8e4 	bl	8001cec <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b28:	f7fe f8e0 	bl	8001cec <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e04f      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3e:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 020c 	and.w	r2, r3, #12
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d1eb      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b50:	4b25      	ldr	r3, [pc, #148]	; (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d20c      	bcs.n	8003b78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b22      	ldr	r3, [pc, #136]	; (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e032      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b84:	4b19      	ldr	r3, [pc, #100]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4916      	ldr	r1, [pc, #88]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d009      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ba2:	4b12      	ldr	r3, [pc, #72]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	490e      	ldr	r1, [pc, #56]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bb6:	f000 f821 	bl	8003bfc <HAL_RCC_GetSysClockFreq>
 8003bba:	4601      	mov	r1, r0
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc8:	5cd3      	ldrb	r3, [r2, r3]
 8003bca:	fa21 f303 	lsr.w	r3, r1, r3
 8003bce:	4a09      	ldr	r2, [pc, #36]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bd2:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe f844 	bl	8001c64 <HAL_InitTick>

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40023c00 	.word	0x40023c00
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	08006cb8 	.word	0x08006cb8
 8003bf4:	20000048 	.word	0x20000048
 8003bf8:	2000004c 	.word	0x2000004c

08003bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c12:	4b63      	ldr	r3, [pc, #396]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d007      	beq.n	8003c2e <HAL_RCC_GetSysClockFreq+0x32>
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d008      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x38>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f040 80b4 	bne.w	8003d90 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c28:	4b5e      	ldr	r3, [pc, #376]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c2a:	60bb      	str	r3, [r7, #8]
       break;
 8003c2c:	e0b3      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c2e:	4b5e      	ldr	r3, [pc, #376]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003c30:	60bb      	str	r3, [r7, #8]
      break;
 8003c32:	e0b0      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c34:	4b5a      	ldr	r3, [pc, #360]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c3e:	4b58      	ldr	r3, [pc, #352]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d04a      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c4a:	4b55      	ldr	r3, [pc, #340]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	099b      	lsrs	r3, r3, #6
 8003c50:	f04f 0400 	mov.w	r4, #0
 8003c54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	ea03 0501 	and.w	r5, r3, r1
 8003c60:	ea04 0602 	and.w	r6, r4, r2
 8003c64:	4629      	mov	r1, r5
 8003c66:	4632      	mov	r2, r6
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	f04f 0400 	mov.w	r4, #0
 8003c70:	0154      	lsls	r4, r2, #5
 8003c72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c76:	014b      	lsls	r3, r1, #5
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4622      	mov	r2, r4
 8003c7c:	1b49      	subs	r1, r1, r5
 8003c7e:	eb62 0206 	sbc.w	r2, r2, r6
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	f04f 0400 	mov.w	r4, #0
 8003c8a:	0194      	lsls	r4, r2, #6
 8003c8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c90:	018b      	lsls	r3, r1, #6
 8003c92:	1a5b      	subs	r3, r3, r1
 8003c94:	eb64 0402 	sbc.w	r4, r4, r2
 8003c98:	f04f 0100 	mov.w	r1, #0
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	00e2      	lsls	r2, r4, #3
 8003ca2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ca6:	00d9      	lsls	r1, r3, #3
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4614      	mov	r4, r2
 8003cac:	195b      	adds	r3, r3, r5
 8003cae:	eb44 0406 	adc.w	r4, r4, r6
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	0262      	lsls	r2, r4, #9
 8003cbc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003cc0:	0259      	lsls	r1, r3, #9
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4614      	mov	r4, r2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	4621      	mov	r1, r4
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f04f 0400 	mov.w	r4, #0
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4623      	mov	r3, r4
 8003cd4:	f7fc fa78 	bl	80001c8 <__aeabi_uldivmod>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	460c      	mov	r4, r1
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	e049      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce0:	4b2f      	ldr	r3, [pc, #188]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	099b      	lsrs	r3, r3, #6
 8003ce6:	f04f 0400 	mov.w	r4, #0
 8003cea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	ea03 0501 	and.w	r5, r3, r1
 8003cf6:	ea04 0602 	and.w	r6, r4, r2
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	4632      	mov	r2, r6
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	f04f 0400 	mov.w	r4, #0
 8003d06:	0154      	lsls	r4, r2, #5
 8003d08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d0c:	014b      	lsls	r3, r1, #5
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4622      	mov	r2, r4
 8003d12:	1b49      	subs	r1, r1, r5
 8003d14:	eb62 0206 	sbc.w	r2, r2, r6
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	f04f 0400 	mov.w	r4, #0
 8003d20:	0194      	lsls	r4, r2, #6
 8003d22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d26:	018b      	lsls	r3, r1, #6
 8003d28:	1a5b      	subs	r3, r3, r1
 8003d2a:	eb64 0402 	sbc.w	r4, r4, r2
 8003d2e:	f04f 0100 	mov.w	r1, #0
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	00e2      	lsls	r2, r4, #3
 8003d38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d3c:	00d9      	lsls	r1, r3, #3
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4614      	mov	r4, r2
 8003d42:	195b      	adds	r3, r3, r5
 8003d44:	eb44 0406 	adc.w	r4, r4, r6
 8003d48:	f04f 0100 	mov.w	r1, #0
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	02a2      	lsls	r2, r4, #10
 8003d52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d56:	0299      	lsls	r1, r3, #10
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4614      	mov	r4, r2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	4621      	mov	r1, r4
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f04f 0400 	mov.w	r4, #0
 8003d66:	461a      	mov	r2, r3
 8003d68:	4623      	mov	r3, r4
 8003d6a:	f7fc fa2d 	bl	80001c8 <__aeabi_uldivmod>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	460c      	mov	r4, r1
 8003d72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d74:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	60bb      	str	r3, [r7, #8]
      break;
 8003d8e:	e002      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d90:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d92:	60bb      	str	r3, [r7, #8]
      break;
 8003d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d96:	68bb      	ldr	r3, [r7, #8]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da0:	40023800 	.word	0x40023800
 8003da4:	00f42400 	.word	0x00f42400
 8003da8:	007a1200 	.word	0x007a1200

08003dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db0:	4b03      	ldr	r3, [pc, #12]	; (8003dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20000048 	.word	0x20000048

08003dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dc8:	f7ff fff0 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003dcc:	4601      	mov	r1, r0
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	0a9b      	lsrs	r3, r3, #10
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4a03      	ldr	r2, [pc, #12]	; (8003de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dda:	5cd3      	ldrb	r3, [r2, r3]
 8003ddc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	08006cc8 	.word	0x08006cc8

08003dec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e056      	b.n	8003eac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d106      	bne.n	8003e1e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7fd fdb5 	bl	8001988 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2202      	movs	r2, #2
 8003e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e34:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	431a      	orrs	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	ea42 0103 	orr.w	r1, r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	0c1b      	lsrs	r3, r3, #16
 8003e7c:	f003 0104 	and.w	r1, r3, #4
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_SPI_Transmit+0x22>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e11e      	b.n	8004114 <HAL_SPI_Transmit+0x260>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ede:	f7fd ff05 	bl	8001cec <HAL_GetTick>
 8003ee2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d002      	beq.n	8003efa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ef8:	e103      	b.n	8004102 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_SPI_Transmit+0x52>
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d102      	bne.n	8003f0c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f0a:	e0fa      	b.n	8004102 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2203      	movs	r2, #3
 8003f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	88fa      	ldrh	r2, [r7, #6]
 8003f24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	88fa      	ldrh	r2, [r7, #6]
 8003f2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f52:	d107      	bne.n	8003f64 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b40      	cmp	r3, #64	; 0x40
 8003f70:	d007      	beq.n	8003f82 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f8a:	d14b      	bne.n	8004024 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_SPI_Transmit+0xe6>
 8003f94:	8afb      	ldrh	r3, [r7, #22]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d13e      	bne.n	8004018 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	881a      	ldrh	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	1c9a      	adds	r2, r3, #2
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fbe:	e02b      	b.n	8004018 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d112      	bne.n	8003ff4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	881a      	ldrh	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	1c9a      	adds	r2, r3, #2
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ff2:	e011      	b.n	8004018 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ff4:	f7fd fe7a 	bl	8001cec <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d803      	bhi.n	800400c <HAL_SPI_Transmit+0x158>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	d102      	bne.n	8004012 <HAL_SPI_Transmit+0x15e>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004016:	e074      	b.n	8004102 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1ce      	bne.n	8003fc0 <HAL_SPI_Transmit+0x10c>
 8004022:	e04c      	b.n	80040be <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <HAL_SPI_Transmit+0x17e>
 800402c:	8afb      	ldrh	r3, [r7, #22]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d140      	bne.n	80040b4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	330c      	adds	r3, #12
 800403c:	7812      	ldrb	r2, [r2, #0]
 800403e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004058:	e02c      	b.n	80040b4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b02      	cmp	r3, #2
 8004066:	d113      	bne.n	8004090 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	7812      	ldrb	r2, [r2, #0]
 8004074:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	86da      	strh	r2, [r3, #54]	; 0x36
 800408e:	e011      	b.n	80040b4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004090:	f7fd fe2c 	bl	8001cec <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d803      	bhi.n	80040a8 <HAL_SPI_Transmit+0x1f4>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a6:	d102      	bne.n	80040ae <HAL_SPI_Transmit+0x1fa>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d102      	bne.n	80040b4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040b2:	e026      	b.n	8004102 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1cd      	bne.n	800405a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	6839      	ldr	r1, [r7, #0]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fa36 	bl	8004534 <SPI_EndRxTxTransaction>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2220      	movs	r2, #32
 80040d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040dc:	2300      	movs	r3, #0
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	77fb      	strb	r3, [r7, #31]
 80040fe:	e000      	b.n	8004102 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004100:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004112:	7ffb      	ldrb	r3, [r7, #31]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3720      	adds	r7, #32
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08c      	sub	sp, #48	; 0x30
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800412a:	2301      	movs	r3, #1
 800412c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_SPI_TransmitReceive+0x26>
 800413e:	2302      	movs	r3, #2
 8004140:	e18a      	b.n	8004458 <HAL_SPI_TransmitReceive+0x33c>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800414a:	f7fd fdcf 	bl	8001cec <HAL_GetTick>
 800414e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004160:	887b      	ldrh	r3, [r7, #2]
 8004162:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004164:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004168:	2b01      	cmp	r3, #1
 800416a:	d00f      	beq.n	800418c <HAL_SPI_TransmitReceive+0x70>
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004172:	d107      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d103      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x68>
 800417c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004180:	2b04      	cmp	r3, #4
 8004182:	d003      	beq.n	800418c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004184:	2302      	movs	r3, #2
 8004186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800418a:	e15b      	b.n	8004444 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_SPI_TransmitReceive+0x82>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <HAL_SPI_TransmitReceive+0x82>
 8004198:	887b      	ldrh	r3, [r7, #2]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d103      	bne.n	80041a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041a4:	e14e      	b.n	8004444 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d003      	beq.n	80041ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2205      	movs	r2, #5
 80041b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	887a      	ldrh	r2, [r7, #2]
 80041ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	887a      	ldrh	r2, [r7, #2]
 80041d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	887a      	ldrh	r2, [r7, #2]
 80041dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	887a      	ldrh	r2, [r7, #2]
 80041e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d007      	beq.n	800420e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800420c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004216:	d178      	bne.n	800430a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <HAL_SPI_TransmitReceive+0x10a>
 8004220:	8b7b      	ldrh	r3, [r7, #26]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d166      	bne.n	80042f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	881a      	ldrh	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	1c9a      	adds	r2, r3, #2
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800424a:	e053      	b.n	80042f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b02      	cmp	r3, #2
 8004258:	d11b      	bne.n	8004292 <HAL_SPI_TransmitReceive+0x176>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800425e:	b29b      	uxth	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d016      	beq.n	8004292 <HAL_SPI_TransmitReceive+0x176>
 8004264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004266:	2b01      	cmp	r3, #1
 8004268:	d113      	bne.n	8004292 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	881a      	ldrh	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	1c9a      	adds	r2, r3, #2
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b01      	cmp	r3, #1
 800429e:	d119      	bne.n	80042d4 <HAL_SPI_TransmitReceive+0x1b8>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d014      	beq.n	80042d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	b292      	uxth	r2, r2
 80042b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	1c9a      	adds	r2, r3, #2
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042d0:	2301      	movs	r3, #1
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042d4:	f7fd fd0a 	bl	8001cec <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d807      	bhi.n	80042f4 <HAL_SPI_TransmitReceive+0x1d8>
 80042e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ea:	d003      	beq.n	80042f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80042f2:	e0a7      	b.n	8004444 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1a6      	bne.n	800424c <HAL_SPI_TransmitReceive+0x130>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1a1      	bne.n	800424c <HAL_SPI_TransmitReceive+0x130>
 8004308:	e07c      	b.n	8004404 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_SPI_TransmitReceive+0x1fc>
 8004312:	8b7b      	ldrh	r3, [r7, #26]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d16b      	bne.n	80043f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	330c      	adds	r3, #12
 8004322:	7812      	ldrb	r2, [r2, #0]
 8004324:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800433e:	e057      	b.n	80043f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b02      	cmp	r3, #2
 800434c:	d11c      	bne.n	8004388 <HAL_SPI_TransmitReceive+0x26c>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d017      	beq.n	8004388 <HAL_SPI_TransmitReceive+0x26c>
 8004358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435a:	2b01      	cmp	r3, #1
 800435c:	d114      	bne.n	8004388 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	330c      	adds	r3, #12
 8004368:	7812      	ldrb	r2, [r2, #0]
 800436a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b01      	cmp	r3, #1
 8004394:	d119      	bne.n	80043ca <HAL_SPI_TransmitReceive+0x2ae>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d014      	beq.n	80043ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043c6:	2301      	movs	r3, #1
 80043c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043ca:	f7fd fc8f 	bl	8001cec <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d803      	bhi.n	80043e2 <HAL_SPI_TransmitReceive+0x2c6>
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d102      	bne.n	80043e8 <HAL_SPI_TransmitReceive+0x2cc>
 80043e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d103      	bne.n	80043f0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80043ee:	e029      	b.n	8004444 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1a2      	bne.n	8004340 <HAL_SPI_TransmitReceive+0x224>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d19d      	bne.n	8004340 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004406:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f893 	bl	8004534 <SPI_EndRxTxTransaction>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d006      	beq.n	8004422 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004420:	e010      	b.n	8004444 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10b      	bne.n	8004442 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	e000      	b.n	8004444 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004442:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004454:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004458:	4618      	mov	r0, r3
 800445a:	3730      	adds	r7, #48	; 0x30
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004470:	e04c      	b.n	800450c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d048      	beq.n	800450c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800447a:	f7fd fc37 	bl	8001cec <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d902      	bls.n	8004490 <SPI_WaitFlagStateUntilTimeout+0x30>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d13d      	bne.n	800450c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800449e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044a8:	d111      	bne.n	80044ce <SPI_WaitFlagStateUntilTimeout+0x6e>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b2:	d004      	beq.n	80044be <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044bc:	d107      	bne.n	80044ce <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d6:	d10f      	bne.n	80044f8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e00f      	b.n	800452c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4013      	ands	r3, r2
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	429a      	cmp	r2, r3
 800451a:	bf0c      	ite	eq
 800451c:	2301      	moveq	r3, #1
 800451e:	2300      	movne	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	429a      	cmp	r2, r3
 8004528:	d1a3      	bne.n	8004472 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004540:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <SPI_EndRxTxTransaction+0x7c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a1b      	ldr	r2, [pc, #108]	; (80045b4 <SPI_EndRxTxTransaction+0x80>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	0d5b      	lsrs	r3, r3, #21
 800454c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004550:	fb02 f303 	mul.w	r3, r2, r3
 8004554:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800455e:	d112      	bne.n	8004586 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2200      	movs	r2, #0
 8004568:	2180      	movs	r1, #128	; 0x80
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f7ff ff78 	bl	8004460 <SPI_WaitFlagStateUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d016      	beq.n	80045a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	f043 0220 	orr.w	r2, r3, #32
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e00f      	b.n	80045a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	3b01      	subs	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459c:	2b80      	cmp	r3, #128	; 0x80
 800459e:	d0f2      	beq.n	8004586 <SPI_EndRxTxTransaction+0x52>
 80045a0:	e000      	b.n	80045a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80045a2:	bf00      	nop
  }

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000048 	.word	0x20000048
 80045b4:	165e9f81 	.word	0x165e9f81

080045b8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e034      	b.n	8004638 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f7fd fa64 	bl	8001ab0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3308      	adds	r3, #8
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f000 f824 	bl	8004640 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	461a      	mov	r2, r3
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	f000 f86e 	bl	80046e4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6858      	ldr	r0, [r3, #4]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	f000 f8a3 	bl	8004760 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	6892      	ldr	r2, [r2, #8]
 8004622:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	6892      	ldr	r2, [r2, #8]
 800462e:	f041 0101 	orr.w	r1, r1, #1
 8004632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004658:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <FSMC_NORSRAM_Init+0xa0>)
 800465e:	4013      	ands	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800466a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004670:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8004676:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800467c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8004682:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8004688:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800468e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8004694:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800469a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80046a0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80046a6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80046ac:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d103      	bne.n	80046c4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046c2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	fff00080 	.word	0xfff00080

080046e4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046fe:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004706:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004712:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800471a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004722:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	3b01      	subs	r3, #1
 800472a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800472c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	3b02      	subs	r3, #2
 8004734:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004736:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800473c:	4313      	orrs	r3, r2
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6979      	ldr	r1, [r7, #20]
 800474c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004778:	d122      	bne.n	80047c0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004782:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4b15      	ldr	r3, [pc, #84]	; (80047dc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004788:	4013      	ands	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004796:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800479e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80047a6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80047ac:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6979      	ldr	r1, [r7, #20]
 80047ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80047be:	e005      	b.n	80047cc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80047c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	cff00000 	.word	0xcff00000

080047e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80047e4:	4904      	ldr	r1, [pc, #16]	; (80047f8 <MX_FATFS_Init+0x18>)
 80047e6:	4805      	ldr	r0, [pc, #20]	; (80047fc <MX_FATFS_Init+0x1c>)
 80047e8:	f002 f9ca 	bl	8006b80 <FATFS_LinkDriver>
 80047ec:	4603      	mov	r3, r0
 80047ee:	461a      	mov	r2, r3
 80047f0:	4b03      	ldr	r3, [pc, #12]	; (8004800 <MX_FATFS_Init+0x20>)
 80047f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80047f4:	bf00      	nop
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	200006c4 	.word	0x200006c4
 80047fc:	20000054 	.word	0x20000054
 8004800:	200006c8 	.word	0x200006c8

08004804 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004808:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800480a:	4618      	mov	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	4618      	mov	r0, r3
 8004822:	f7fc fa25 	bl	8000c70 <SD_disk_initialize>
 8004826:	4603      	mov	r3, r0
 8004828:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
 8004838:	4603      	mov	r3, r0
 800483a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fc fafc 	bl	8000e3c <SD_disk_status>
 8004844:	4603      	mov	r3, r0
 8004846:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004848:	4618      	mov	r0, r3
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	4603      	mov	r3, r0
 800485e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8004860:	7bf8      	ldrb	r0, [r7, #15]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	f7fc fafe 	bl	8000e68 <SD_disk_read>
 800486c:	4603      	mov	r3, r0
 800486e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	4603      	mov	r3, r0
 8004886:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8004888:	7bf8      	ldrb	r0, [r7, #15]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	f7fc fb54 	bl	8000f3c <SD_disk_write>
 8004894:	4603      	mov	r3, r0
 8004896:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	603a      	str	r2, [r7, #0]
 80048aa:	71fb      	strb	r3, [r7, #7]
 80048ac:	460b      	mov	r3, r1
 80048ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80048b0:	79fb      	ldrb	r3, [r7, #7]
 80048b2:	79b9      	ldrb	r1, [r7, #6]
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fc fbc4 	bl	8001044 <SD_disk_ioctl>
 80048bc:	4603      	mov	r3, r0
 80048be:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	4a08      	ldr	r2, [pc, #32]	; (80048f8 <disk_status+0x30>)
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	79fa      	ldrb	r2, [r7, #7]
 80048e0:	4905      	ldr	r1, [pc, #20]	; (80048f8 <disk_status+0x30>)
 80048e2:	440a      	add	r2, r1
 80048e4:	7a12      	ldrb	r2, [r2, #8]
 80048e6:	4610      	mov	r0, r2
 80048e8:	4798      	blx	r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	200000b4 	.word	0x200000b4

080048fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	4a0d      	ldr	r2, [pc, #52]	; (8004944 <disk_initialize+0x48>)
 800490e:	5cd3      	ldrb	r3, [r2, r3]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d111      	bne.n	8004938 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	4a0b      	ldr	r2, [pc, #44]	; (8004944 <disk_initialize+0x48>)
 8004918:	2101      	movs	r1, #1
 800491a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800491c:	79fb      	ldrb	r3, [r7, #7]
 800491e:	4a09      	ldr	r2, [pc, #36]	; (8004944 <disk_initialize+0x48>)
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	79fa      	ldrb	r2, [r7, #7]
 800492a:	4906      	ldr	r1, [pc, #24]	; (8004944 <disk_initialize+0x48>)
 800492c:	440a      	add	r2, r1
 800492e:	7a12      	ldrb	r2, [r2, #8]
 8004930:	4610      	mov	r0, r2
 8004932:	4798      	blx	r3
 8004934:	4603      	mov	r3, r0
 8004936:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004938:	7bfb      	ldrb	r3, [r7, #15]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	200000b4 	.word	0x200000b4

08004948 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4603      	mov	r3, r0
 8004956:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <disk_read+0x3c>)
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	689c      	ldr	r4, [r3, #8]
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	4a07      	ldr	r2, [pc, #28]	; (8004984 <disk_read+0x3c>)
 8004968:	4413      	add	r3, r2
 800496a:	7a18      	ldrb	r0, [r3, #8]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	47a0      	blx	r4
 8004974:	4603      	mov	r3, r0
 8004976:	75fb      	strb	r3, [r7, #23]
  return res;
 8004978:	7dfb      	ldrb	r3, [r7, #23]
}
 800497a:	4618      	mov	r0, r3
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	bd90      	pop	{r4, r7, pc}
 8004982:	bf00      	nop
 8004984:	200000b4 	.word	0x200000b4

08004988 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004988:	b590      	push	{r4, r7, lr}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	4603      	mov	r3, r0
 8004996:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <disk_write+0x3c>)
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	68dc      	ldr	r4, [r3, #12]
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	4a07      	ldr	r2, [pc, #28]	; (80049c4 <disk_write+0x3c>)
 80049a8:	4413      	add	r3, r2
 80049aa:	7a18      	ldrb	r0, [r3, #8]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	47a0      	blx	r4
 80049b4:	4603      	mov	r3, r0
 80049b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80049b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd90      	pop	{r4, r7, pc}
 80049c2:	bf00      	nop
 80049c4:	200000b4 	.word	0x200000b4

080049c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	603a      	str	r2, [r7, #0]
 80049d2:	71fb      	strb	r3, [r7, #7]
 80049d4:	460b      	mov	r3, r1
 80049d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	4a09      	ldr	r2, [pc, #36]	; (8004a00 <disk_ioctl+0x38>)
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	79fa      	ldrb	r2, [r7, #7]
 80049e6:	4906      	ldr	r1, [pc, #24]	; (8004a00 <disk_ioctl+0x38>)
 80049e8:	440a      	add	r2, r1
 80049ea:	7a10      	ldrb	r0, [r2, #8]
 80049ec:	79b9      	ldrb	r1, [r7, #6]
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	4798      	blx	r3
 80049f2:	4603      	mov	r3, r0
 80049f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	200000b4 	.word	0x200000b4

08004a04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004a14:	89fb      	ldrh	r3, [r7, #14]
 8004a16:	021b      	lsls	r3, r3, #8
 8004a18:	b21a      	sxth	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	b21b      	sxth	r3, r3
 8004a20:	4313      	orrs	r3, r2
 8004a22:	b21b      	sxth	r3, r3
 8004a24:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004a26:	89fb      	ldrh	r3, [r7, #14]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3303      	adds	r3, #3
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	021b      	lsls	r3, r3, #8
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	3202      	adds	r2, #2
 8004a4c:	7812      	ldrb	r2, [r2, #0]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	3201      	adds	r2, #1
 8004a5a:	7812      	ldrb	r2, [r2, #0]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	7812      	ldrb	r2, [r2, #0]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
	return rv;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	460b      	mov	r3, r1
 8004a84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	887a      	ldrh	r2, [r7, #2]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	887b      	ldrh	r3, [r7, #2]
 8004a94:	0a1b      	lsrs	r3, r3, #8
 8004a96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	887a      	ldrh	r2, [r7, #2]
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	607a      	str	r2, [r7, #4]
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	701a      	strb	r2, [r3, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	607a      	str	r2, [r7, #4]
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00d      	beq.n	8004b3e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	1c53      	adds	r3, r2, #1
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	1c59      	adds	r1, r3, #1
 8004b2c:	6179      	str	r1, [r7, #20]
 8004b2e:	7812      	ldrb	r2, [r2, #0]
 8004b30:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	607b      	str	r3, [r7, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f1      	bne.n	8004b22 <mem_cpy+0x1a>
	}
}
 8004b3e:	bf00      	nop
 8004b40:	371c      	adds	r7, #28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004b4a:	b480      	push	{r7}
 8004b4c:	b087      	sub	sp, #28
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	617a      	str	r2, [r7, #20]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	607b      	str	r3, [r7, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f3      	bne.n	8004b5a <mem_set+0x10>
}
 8004b72:	bf00      	nop
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004b7e:	b480      	push	{r7}
 8004b80:	b089      	sub	sp, #36	; 0x24
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	61fa      	str	r2, [r7, #28]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	61ba      	str	r2, [r7, #24]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	1acb      	subs	r3, r1, r3
 8004baa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	607b      	str	r3, [r7, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <mem_cmp+0x40>
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0eb      	beq.n	8004b96 <mem_cmp+0x18>

	return r;
 8004bbe:	697b      	ldr	r3, [r7, #20]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3724      	adds	r7, #36	; 0x24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004bd6:	e002      	b.n	8004bde <chk_chr+0x12>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	607b      	str	r3, [r7, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d005      	beq.n	8004bf2 <chk_chr+0x26>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d1f2      	bne.n	8004bd8 <chk_chr+0xc>
	return *str;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
	...

08004c04 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60bb      	str	r3, [r7, #8]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e029      	b.n	8004c6c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004c18:	4a27      	ldr	r2, [pc, #156]	; (8004cb8 <chk_lock+0xb4>)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	4413      	add	r3, r2
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01d      	beq.n	8004c62 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004c26:	4a24      	ldr	r2, [pc, #144]	; (8004cb8 <chk_lock+0xb4>)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	4413      	add	r3, r2
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d116      	bne.n	8004c66 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004c38:	4a1f      	ldr	r2, [pc, #124]	; (8004cb8 <chk_lock+0xb4>)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	4413      	add	r3, r2
 8004c40:	3304      	adds	r3, #4
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d10c      	bne.n	8004c66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004c4c:	4a1a      	ldr	r2, [pc, #104]	; (8004cb8 <chk_lock+0xb4>)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	4413      	add	r3, r2
 8004c54:	3308      	adds	r3, #8
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d102      	bne.n	8004c66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004c60:	e007      	b.n	8004c72 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004c62:	2301      	movs	r3, #1
 8004c64:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d9d2      	bls.n	8004c18 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d109      	bne.n	8004c8c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d102      	bne.n	8004c84 <chk_lock+0x80>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d101      	bne.n	8004c88 <chk_lock+0x84>
 8004c84:	2300      	movs	r3, #0
 8004c86:	e010      	b.n	8004caa <chk_lock+0xa6>
 8004c88:	2312      	movs	r3, #18
 8004c8a:	e00e      	b.n	8004caa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d108      	bne.n	8004ca4 <chk_lock+0xa0>
 8004c92:	4a09      	ldr	r2, [pc, #36]	; (8004cb8 <chk_lock+0xb4>)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	4413      	add	r3, r2
 8004c9a:	330c      	adds	r3, #12
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca2:	d101      	bne.n	8004ca8 <chk_lock+0xa4>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	e000      	b.n	8004caa <chk_lock+0xa6>
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20000094 	.word	0x20000094

08004cbc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	607b      	str	r3, [r7, #4]
 8004cc6:	e002      	b.n	8004cce <enq_lock+0x12>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	607b      	str	r3, [r7, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d806      	bhi.n	8004ce2 <enq_lock+0x26>
 8004cd4:	4a09      	ldr	r2, [pc, #36]	; (8004cfc <enq_lock+0x40>)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	4413      	add	r3, r2
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f2      	bne.n	8004cc8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	bf14      	ite	ne
 8004ce8:	2301      	movne	r3, #1
 8004cea:	2300      	moveq	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000094 	.word	0x20000094

08004d00 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	e01f      	b.n	8004d50 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004d10:	4a41      	ldr	r2, [pc, #260]	; (8004e18 <inc_lock+0x118>)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	4413      	add	r3, r2
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d113      	bne.n	8004d4a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004d22:	4a3d      	ldr	r2, [pc, #244]	; (8004e18 <inc_lock+0x118>)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	4413      	add	r3, r2
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d109      	bne.n	8004d4a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004d36:	4a38      	ldr	r2, [pc, #224]	; (8004e18 <inc_lock+0x118>)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	4413      	add	r3, r2
 8004d3e:	3308      	adds	r3, #8
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d006      	beq.n	8004d58 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d9dc      	bls.n	8004d10 <inc_lock+0x10>
 8004d56:	e000      	b.n	8004d5a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004d58:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d132      	bne.n	8004dc6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	e002      	b.n	8004d6c <inc_lock+0x6c>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d806      	bhi.n	8004d80 <inc_lock+0x80>
 8004d72:	4a29      	ldr	r2, [pc, #164]	; (8004e18 <inc_lock+0x118>)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	4413      	add	r3, r2
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f2      	bne.n	8004d66 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d101      	bne.n	8004d8a <inc_lock+0x8a>
 8004d86:	2300      	movs	r3, #0
 8004d88:	e040      	b.n	8004e0c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	4922      	ldr	r1, [pc, #136]	; (8004e18 <inc_lock+0x118>)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	440b      	add	r3, r1
 8004d96:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	491e      	ldr	r1, [pc, #120]	; (8004e18 <inc_lock+0x118>)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	440b      	add	r3, r1
 8004da4:	3304      	adds	r3, #4
 8004da6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	491a      	ldr	r1, [pc, #104]	; (8004e18 <inc_lock+0x118>)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	440b      	add	r3, r1
 8004db4:	3308      	adds	r3, #8
 8004db6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004db8:	4a17      	ldr	r2, [pc, #92]	; (8004e18 <inc_lock+0x118>)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	4413      	add	r3, r2
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d009      	beq.n	8004de0 <inc_lock+0xe0>
 8004dcc:	4a12      	ldr	r2, [pc, #72]	; (8004e18 <inc_lock+0x118>)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	4413      	add	r3, r2
 8004dd4:	330c      	adds	r3, #12
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <inc_lock+0xe0>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e015      	b.n	8004e0c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d108      	bne.n	8004df8 <inc_lock+0xf8>
 8004de6:	4a0c      	ldr	r2, [pc, #48]	; (8004e18 <inc_lock+0x118>)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	4413      	add	r3, r2
 8004dee:	330c      	adds	r3, #12
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	3301      	adds	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	e001      	b.n	8004dfc <inc_lock+0xfc>
 8004df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dfc:	4906      	ldr	r1, [pc, #24]	; (8004e18 <inc_lock+0x118>)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	440b      	add	r3, r1
 8004e04:	330c      	adds	r3, #12
 8004e06:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3301      	adds	r3, #1
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	20000094 	.word	0x20000094

08004e1c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	607b      	str	r3, [r7, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d825      	bhi.n	8004e7c <dec_lock+0x60>
		n = Files[i].ctr;
 8004e30:	4a17      	ldr	r2, [pc, #92]	; (8004e90 <dec_lock+0x74>)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	4413      	add	r3, r2
 8004e38:	330c      	adds	r3, #12
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004e3e:	89fb      	ldrh	r3, [r7, #14]
 8004e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e44:	d101      	bne.n	8004e4a <dec_lock+0x2e>
 8004e46:	2300      	movs	r3, #0
 8004e48:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004e4a:	89fb      	ldrh	r3, [r7, #14]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <dec_lock+0x3a>
 8004e50:	89fb      	ldrh	r3, [r7, #14]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004e56:	4a0e      	ldr	r2, [pc, #56]	; (8004e90 <dec_lock+0x74>)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	4413      	add	r3, r2
 8004e5e:	330c      	adds	r3, #12
 8004e60:	89fa      	ldrh	r2, [r7, #14]
 8004e62:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004e64:	89fb      	ldrh	r3, [r7, #14]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d105      	bne.n	8004e76 <dec_lock+0x5a>
 8004e6a:	4a09      	ldr	r2, [pc, #36]	; (8004e90 <dec_lock+0x74>)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	4413      	add	r3, r2
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	737b      	strb	r3, [r7, #13]
 8004e7a:	e001      	b.n	8004e80 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004e80:	7b7b      	ldrb	r3, [r7, #13]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000094 	.word	0x20000094

08004e94 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	e010      	b.n	8004ec4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004ea2:	4a0d      	ldr	r2, [pc, #52]	; (8004ed8 <clear_lock+0x44>)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	4413      	add	r3, r2
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d105      	bne.n	8004ebe <clear_lock+0x2a>
 8004eb2:	4a09      	ldr	r2, [pc, #36]	; (8004ed8 <clear_lock+0x44>)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	4413      	add	r3, r2
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d9eb      	bls.n	8004ea2 <clear_lock+0xe>
	}
}
 8004eca:	bf00      	nop
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000094 	.word	0x20000094

08004edc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	78db      	ldrb	r3, [r3, #3]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d034      	beq.n	8004f5a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	7858      	ldrb	r0, [r3, #1]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004f00:	2301      	movs	r3, #1
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	f7ff fd40 	bl	8004988 <disk_write>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	73fb      	strb	r3, [r7, #15]
 8004f12:	e022      	b.n	8004f5a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	1ad2      	subs	r2, r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d217      	bcs.n	8004f5a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	789b      	ldrb	r3, [r3, #2]
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	e010      	b.n	8004f54 <sync_window+0x78>
					wsect += fs->fsize;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4413      	add	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	7858      	ldrb	r0, [r3, #1]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004f46:	2301      	movs	r3, #1
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	f7ff fd1d 	bl	8004988 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d8eb      	bhi.n	8004f32 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d01b      	beq.n	8004fb4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff ffad 	bl	8004edc <sync_window>
 8004f82:	4603      	mov	r3, r0
 8004f84:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d113      	bne.n	8004fb4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	7858      	ldrb	r0, [r3, #1]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004f96:	2301      	movs	r3, #1
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	f7ff fcd5 	bl	8004948 <disk_read>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d004      	beq.n	8004fae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff ff87 	bl	8004edc <sync_window>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d158      	bne.n	800508a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d148      	bne.n	8005072 <sync_fs+0xb2>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	791b      	ldrb	r3, [r3, #4]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d144      	bne.n	8005072 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3330      	adds	r3, #48	; 0x30
 8004fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff fda9 	bl	8004b4a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3330      	adds	r3, #48	; 0x30
 8004ffc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005000:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff fd38 	bl	8004a7a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3330      	adds	r3, #48	; 0x30
 800500e:	4921      	ldr	r1, [pc, #132]	; (8005094 <sync_fs+0xd4>)
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff fd4d 	bl	8004ab0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3330      	adds	r3, #48	; 0x30
 800501a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800501e:	491e      	ldr	r1, [pc, #120]	; (8005098 <sync_fs+0xd8>)
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff fd45 	bl	8004ab0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3330      	adds	r3, #48	; 0x30
 800502a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	4619      	mov	r1, r3
 8005034:	4610      	mov	r0, r2
 8005036:	f7ff fd3b 	bl	8004ab0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3330      	adds	r3, #48	; 0x30
 800503e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	4619      	mov	r1, r3
 8005048:	4610      	mov	r0, r2
 800504a:	f7ff fd31 	bl	8004ab0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	7858      	ldrb	r0, [r3, #1]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005066:	2301      	movs	r3, #1
 8005068:	f7ff fc8e 	bl	8004988 <disk_write>
			fs->fsi_flag = 0;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	785b      	ldrb	r3, [r3, #1]
 8005076:	2200      	movs	r2, #0
 8005078:	2100      	movs	r1, #0
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fca4 	bl	80049c8 <disk_ioctl>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <sync_fs+0xca>
 8005086:	2301      	movs	r3, #1
 8005088:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800508a:	7bfb      	ldrb	r3, [r7, #15]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	41615252 	.word	0x41615252
 8005098:	61417272 	.word	0x61417272

0800509c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	3b02      	subs	r3, #2
 80050aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	3b02      	subs	r3, #2
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d301      	bcc.n	80050bc <clust2sect+0x20>
 80050b8:	2300      	movs	r3, #0
 80050ba:	e008      	b.n	80050ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	895b      	ldrh	r3, [r3, #10]
 80050c0:	461a      	mov	r2, r3
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	fb03 f202 	mul.w	r2, r3, r2
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	4413      	add	r3, r2
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b086      	sub	sp, #24
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d904      	bls.n	80050fa <get_fat+0x20>
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d302      	bcc.n	8005100 <get_fat+0x26>
		val = 1;	/* Internal error */
 80050fa:	2301      	movs	r3, #1
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	e08c      	b.n	800521a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005100:	f04f 33ff 	mov.w	r3, #4294967295
 8005104:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d045      	beq.n	800519a <get_fat+0xc0>
 800510e:	2b03      	cmp	r3, #3
 8005110:	d05d      	beq.n	80051ce <get_fat+0xf4>
 8005112:	2b01      	cmp	r3, #1
 8005114:	d177      	bne.n	8005206 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	085b      	lsrs	r3, r3, #1
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4413      	add	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	6a1a      	ldr	r2, [r3, #32]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	0a5b      	lsrs	r3, r3, #9
 800512c:	4413      	add	r3, r2
 800512e:	4619      	mov	r1, r3
 8005130:	6938      	ldr	r0, [r7, #16]
 8005132:	f7ff ff17 	bl	8004f64 <move_window>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d167      	bne.n	800520c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	60fa      	str	r2, [r7, #12]
 8005142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4413      	add	r3, r2
 800514a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800514e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	6a1a      	ldr	r2, [r3, #32]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	0a5b      	lsrs	r3, r3, #9
 8005158:	4413      	add	r3, r2
 800515a:	4619      	mov	r1, r3
 800515c:	6938      	ldr	r0, [r7, #16]
 800515e:	f7ff ff01 	bl	8004f64 <move_window>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d153      	bne.n	8005210 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4413      	add	r3, r2
 8005172:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	461a      	mov	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4313      	orrs	r3, r2
 800517e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <get_fat+0xb6>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	e002      	b.n	8005196 <get_fat+0xbc>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005196:	617b      	str	r3, [r7, #20]
			break;
 8005198:	e03f      	b.n	800521a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	6a1a      	ldr	r2, [r3, #32]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	0a1b      	lsrs	r3, r3, #8
 80051a2:	4413      	add	r3, r2
 80051a4:	4619      	mov	r1, r3
 80051a6:	6938      	ldr	r0, [r7, #16]
 80051a8:	f7ff fedc 	bl	8004f64 <move_window>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d130      	bne.n	8005214 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80051c0:	4413      	add	r3, r2
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7ff fc1e 	bl	8004a04 <ld_word>
 80051c8:	4603      	mov	r3, r0
 80051ca:	617b      	str	r3, [r7, #20]
			break;
 80051cc:	e025      	b.n	800521a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	6a1a      	ldr	r2, [r3, #32]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	09db      	lsrs	r3, r3, #7
 80051d6:	4413      	add	r3, r2
 80051d8:	4619      	mov	r1, r3
 80051da:	6938      	ldr	r0, [r7, #16]
 80051dc:	f7ff fec2 	bl	8004f64 <move_window>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d118      	bne.n	8005218 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80051f4:	4413      	add	r3, r2
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff fc1c 	bl	8004a34 <ld_dword>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005202:	617b      	str	r3, [r7, #20]
			break;
 8005204:	e009      	b.n	800521a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005206:	2301      	movs	r3, #1
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	e006      	b.n	800521a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800520c:	bf00      	nop
 800520e:	e004      	b.n	800521a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005210:	bf00      	nop
 8005212:	e002      	b.n	800521a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005214:	bf00      	nop
 8005216:	e000      	b.n	800521a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005218:	bf00      	nop
		}
	}

	return val;
 800521a:	697b      	ldr	r3, [r7, #20]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005224:	b590      	push	{r4, r7, lr}
 8005226:	b089      	sub	sp, #36	; 0x24
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005230:	2302      	movs	r3, #2
 8005232:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b01      	cmp	r3, #1
 8005238:	f240 80d6 	bls.w	80053e8 <put_fat+0x1c4>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	429a      	cmp	r2, r3
 8005244:	f080 80d0 	bcs.w	80053e8 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d073      	beq.n	8005338 <put_fat+0x114>
 8005250:	2b03      	cmp	r3, #3
 8005252:	f000 8091 	beq.w	8005378 <put_fat+0x154>
 8005256:	2b01      	cmp	r3, #1
 8005258:	f040 80c6 	bne.w	80053e8 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	61bb      	str	r3, [r7, #24]
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	085b      	lsrs	r3, r3, #1
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	4413      	add	r3, r2
 8005268:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a1a      	ldr	r2, [r3, #32]
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	0a5b      	lsrs	r3, r3, #9
 8005272:	4413      	add	r3, r2
 8005274:	4619      	mov	r1, r3
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f7ff fe74 	bl	8004f64 <move_window>
 800527c:	4603      	mov	r3, r0
 800527e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005280:	7ffb      	ldrb	r3, [r7, #31]
 8005282:	2b00      	cmp	r3, #0
 8005284:	f040 80a9 	bne.w	80053da <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	1c59      	adds	r1, r3, #1
 8005292:	61b9      	str	r1, [r7, #24]
 8005294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005298:	4413      	add	r3, r2
 800529a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00d      	beq.n	80052c2 <put_fat+0x9e>
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	b25b      	sxtb	r3, r3
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	b25a      	sxtb	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	b25b      	sxtb	r3, r3
 80052ba:	4313      	orrs	r3, r2
 80052bc:	b25b      	sxtb	r3, r3
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	e001      	b.n	80052c6 <put_fat+0xa2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a1a      	ldr	r2, [r3, #32]
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	0a5b      	lsrs	r3, r3, #9
 80052d8:	4413      	add	r3, r2
 80052da:	4619      	mov	r1, r3
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f7ff fe41 	bl	8004f64 <move_window>
 80052e2:	4603      	mov	r3, r0
 80052e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052e6:	7ffb      	ldrb	r3, [r7, #31]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d178      	bne.n	80053de <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f8:	4413      	add	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <put_fat+0xea>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	091b      	lsrs	r3, r3, #4
 800530a:	b2db      	uxtb	r3, r3
 800530c:	e00e      	b.n	800532c <put_fat+0x108>
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	b25b      	sxtb	r3, r3
 8005314:	f023 030f 	bic.w	r3, r3, #15
 8005318:	b25a      	sxtb	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	0a1b      	lsrs	r3, r3, #8
 800531e:	b25b      	sxtb	r3, r3
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	b25b      	sxtb	r3, r3
 8005326:	4313      	orrs	r3, r2
 8005328:	b25b      	sxtb	r3, r3
 800532a:	b2db      	uxtb	r3, r3
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2201      	movs	r2, #1
 8005334:	70da      	strb	r2, [r3, #3]
			break;
 8005336:	e057      	b.n	80053e8 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a1a      	ldr	r2, [r3, #32]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	0a1b      	lsrs	r3, r3, #8
 8005340:	4413      	add	r3, r2
 8005342:	4619      	mov	r1, r3
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f7ff fe0d 	bl	8004f64 <move_window>
 800534a:	4603      	mov	r3, r0
 800534c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800534e:	7ffb      	ldrb	r3, [r7, #31]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d146      	bne.n	80053e2 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005362:	4413      	add	r3, r2
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	b292      	uxth	r2, r2
 8005368:	4611      	mov	r1, r2
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fb85 	bl	8004a7a <st_word>
			fs->wflag = 1;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	70da      	strb	r2, [r3, #3]
			break;
 8005376:	e037      	b.n	80053e8 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a1a      	ldr	r2, [r3, #32]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	09db      	lsrs	r3, r3, #7
 8005380:	4413      	add	r3, r2
 8005382:	4619      	mov	r1, r3
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f7ff fded 	bl	8004f64 <move_window>
 800538a:	4603      	mov	r3, r0
 800538c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800538e:	7ffb      	ldrb	r3, [r7, #31]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d128      	bne.n	80053e6 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80053a8:	4413      	add	r3, r2
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff fb42 	bl	8004a34 <ld_dword>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80053b6:	4323      	orrs	r3, r4
 80053b8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80053c8:	4413      	add	r3, r2
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff fb6f 	bl	8004ab0 <st_dword>
			fs->wflag = 1;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	70da      	strb	r2, [r3, #3]
			break;
 80053d8:	e006      	b.n	80053e8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80053da:	bf00      	nop
 80053dc:	e004      	b.n	80053e8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80053de:	bf00      	nop
 80053e0:	e002      	b.n	80053e8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80053e2:	bf00      	nop
 80053e4:	e000      	b.n	80053e8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80053e6:	bf00      	nop
		}
	}
	return res;
 80053e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3724      	adds	r7, #36	; 0x24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd90      	pop	{r4, r7, pc}

080053f2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b088      	sub	sp, #32
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d904      	bls.n	8005418 <remove_chain+0x26>
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	429a      	cmp	r2, r3
 8005416:	d301      	bcc.n	800541c <remove_chain+0x2a>
 8005418:	2302      	movs	r3, #2
 800541a:	e04b      	b.n	80054b4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00c      	beq.n	800543c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005422:	f04f 32ff 	mov.w	r2, #4294967295
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	69b8      	ldr	r0, [r7, #24]
 800542a:	f7ff fefb 	bl	8005224 <put_fat>
 800542e:	4603      	mov	r3, r0
 8005430:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005432:	7ffb      	ldrb	r3, [r7, #31]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <remove_chain+0x4a>
 8005438:	7ffb      	ldrb	r3, [r7, #31]
 800543a:	e03b      	b.n	80054b4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f7ff fe4b 	bl	80050da <get_fat>
 8005444:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d031      	beq.n	80054b0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <remove_chain+0x64>
 8005452:	2302      	movs	r3, #2
 8005454:	e02e      	b.n	80054b4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545c:	d101      	bne.n	8005462 <remove_chain+0x70>
 800545e:	2301      	movs	r3, #1
 8005460:	e028      	b.n	80054b4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005462:	2200      	movs	r2, #0
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	69b8      	ldr	r0, [r7, #24]
 8005468:	f7ff fedc 	bl	8005224 <put_fat>
 800546c:	4603      	mov	r3, r0
 800546e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005470:	7ffb      	ldrb	r3, [r7, #31]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <remove_chain+0x88>
 8005476:	7ffb      	ldrb	r3, [r7, #31]
 8005478:	e01c      	b.n	80054b4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	3b02      	subs	r3, #2
 8005484:	429a      	cmp	r2, r3
 8005486:	d20b      	bcs.n	80054a0 <remove_chain+0xae>
			fs->free_clst++;
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	791b      	ldrb	r3, [r3, #4]
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	b2da      	uxtb	r2, r3
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d3c6      	bcc.n	800543c <remove_chain+0x4a>
 80054ae:	e000      	b.n	80054b2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80054b0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3720      	adds	r7, #32
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10d      	bne.n	80054ee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <create_chain+0x2c>
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d31b      	bcc.n	8005520 <create_chain+0x64>
 80054e8:	2301      	movs	r3, #1
 80054ea:	61bb      	str	r3, [r7, #24]
 80054ec:	e018      	b.n	8005520 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80054ee:	6839      	ldr	r1, [r7, #0]
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff fdf2 	bl	80050da <get_fat>
 80054f6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d801      	bhi.n	8005502 <create_chain+0x46>
 80054fe:	2301      	movs	r3, #1
 8005500:	e070      	b.n	80055e4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005508:	d101      	bne.n	800550e <create_chain+0x52>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	e06a      	b.n	80055e4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	429a      	cmp	r2, r3
 8005516:	d201      	bcs.n	800551c <create_chain+0x60>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	e063      	b.n	80055e4 <create_chain+0x128>
		scl = clst;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	3301      	adds	r3, #1
 8005528:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	429a      	cmp	r2, r3
 8005532:	d307      	bcc.n	8005544 <create_chain+0x88>
				ncl = 2;
 8005534:	2302      	movs	r3, #2
 8005536:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	429a      	cmp	r2, r3
 800553e:	d901      	bls.n	8005544 <create_chain+0x88>
 8005540:	2300      	movs	r3, #0
 8005542:	e04f      	b.n	80055e4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005544:	69f9      	ldr	r1, [r7, #28]
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7ff fdc7 	bl	80050da <get_fat>
 800554c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00e      	beq.n	8005572 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d003      	beq.n	8005562 <create_chain+0xa6>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005560:	d101      	bne.n	8005566 <create_chain+0xaa>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	e03e      	b.n	80055e4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	429a      	cmp	r2, r3
 800556c:	d1da      	bne.n	8005524 <create_chain+0x68>
 800556e:	2300      	movs	r3, #0
 8005570:	e038      	b.n	80055e4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005572:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005574:	f04f 32ff 	mov.w	r2, #4294967295
 8005578:	69f9      	ldr	r1, [r7, #28]
 800557a:	6938      	ldr	r0, [r7, #16]
 800557c:	f7ff fe52 	bl	8005224 <put_fat>
 8005580:	4603      	mov	r3, r0
 8005582:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005584:	7dfb      	ldrb	r3, [r7, #23]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d109      	bne.n	800559e <create_chain+0xe2>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d006      	beq.n	800559e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	6938      	ldr	r0, [r7, #16]
 8005596:	f7ff fe45 	bl	8005224 <put_fat>
 800559a:	4603      	mov	r3, r0
 800559c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800559e:	7dfb      	ldrb	r3, [r7, #23]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d116      	bne.n	80055d2 <create_chain+0x116>
		fs->last_clst = ncl;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	3b02      	subs	r3, #2
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d804      	bhi.n	80055c2 <create_chain+0x106>
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	1e5a      	subs	r2, r3, #1
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	791b      	ldrb	r3, [r3, #4]
 80055c6:	f043 0301 	orr.w	r3, r3, #1
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	711a      	strb	r2, [r3, #4]
 80055d0:	e007      	b.n	80055e2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80055d2:	7dfb      	ldrb	r3, [r7, #23]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d102      	bne.n	80055de <create_chain+0x122>
 80055d8:	f04f 33ff 	mov.w	r3, #4294967295
 80055dc:	e000      	b.n	80055e0 <create_chain+0x124>
 80055de:	2301      	movs	r3, #1
 80055e0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80055e2:	69fb      	ldr	r3, [r7, #28]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	3304      	adds	r3, #4
 8005602:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	0a5b      	lsrs	r3, r3, #9
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	8952      	ldrh	r2, [r2, #10]
 800560c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005610:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1d1a      	adds	r2, r3, #4
 8005616:	613a      	str	r2, [r7, #16]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <clmt_clust+0x3a>
 8005622:	2300      	movs	r3, #0
 8005624:	e010      	b.n	8005648 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	429a      	cmp	r2, r3
 800562c:	d307      	bcc.n	800563e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	3304      	adds	r3, #4
 800563a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800563c:	e7e9      	b.n	8005612 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800563e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	4413      	add	r3, r2
}
 8005648:	4618      	mov	r0, r3
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800566a:	d204      	bcs.n	8005676 <dir_sdi+0x22>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	f003 031f 	and.w	r3, r3, #31
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <dir_sdi+0x26>
		return FR_INT_ERR;
 8005676:	2302      	movs	r3, #2
 8005678:	e063      	b.n	8005742 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d106      	bne.n	800569a <dir_sdi+0x46>
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d902      	bls.n	800569a <dir_sdi+0x46>
		clst = fs->dirbase;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10c      	bne.n	80056ba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	8912      	ldrh	r2, [r2, #8]
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d301      	bcc.n	80056b0 <dir_sdi+0x5c>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e048      	b.n	8005742 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	61da      	str	r2, [r3, #28]
 80056b8:	e029      	b.n	800570e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	895b      	ldrh	r3, [r3, #10]
 80056be:	025b      	lsls	r3, r3, #9
 80056c0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80056c2:	e019      	b.n	80056f8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6979      	ldr	r1, [r7, #20]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff fd06 	bl	80050da <get_fat>
 80056ce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d101      	bne.n	80056dc <dir_sdi+0x88>
 80056d8:	2301      	movs	r3, #1
 80056da:	e032      	b.n	8005742 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d904      	bls.n	80056ec <dir_sdi+0x98>
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d301      	bcc.n	80056f0 <dir_sdi+0x9c>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e028      	b.n	8005742 <dir_sdi+0xee>
			ofs -= csz;
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d2e1      	bcs.n	80056c4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005700:	6979      	ldr	r1, [r7, #20]
 8005702:	6938      	ldr	r0, [r7, #16]
 8005704:	f7ff fcca 	bl	800509c <clust2sect>
 8005708:	4602      	mov	r2, r0
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <dir_sdi+0xcc>
 800571c:	2302      	movs	r3, #2
 800571e:	e010      	b.n	8005742 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69da      	ldr	r2, [r3, #28]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	0a5b      	lsrs	r3, r3, #9
 8005728:	441a      	add	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573a:	441a      	add	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b086      	sub	sp, #24
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	3320      	adds	r3, #32
 8005760:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <dir_next+0x28>
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005770:	d301      	bcc.n	8005776 <dir_next+0x2c>
 8005772:	2304      	movs	r3, #4
 8005774:	e0aa      	b.n	80058cc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577c:	2b00      	cmp	r3, #0
 800577e:	f040 8098 	bne.w	80058b2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10b      	bne.n	80057ac <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	8912      	ldrh	r2, [r2, #8]
 800579c:	4293      	cmp	r3, r2
 800579e:	f0c0 8088 	bcc.w	80058b2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	61da      	str	r2, [r3, #28]
 80057a8:	2304      	movs	r3, #4
 80057aa:	e08f      	b.n	80058cc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	0a5b      	lsrs	r3, r3, #9
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	8952      	ldrh	r2, [r2, #10]
 80057b4:	3a01      	subs	r2, #1
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d17a      	bne.n	80058b2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	4619      	mov	r1, r3
 80057c4:	4610      	mov	r0, r2
 80057c6:	f7ff fc88 	bl	80050da <get_fat>
 80057ca:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d801      	bhi.n	80057d6 <dir_next+0x8c>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e07a      	b.n	80058cc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057dc:	d101      	bne.n	80057e2 <dir_next+0x98>
 80057de:	2301      	movs	r3, #1
 80057e0:	e074      	b.n	80058cc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d358      	bcc.n	800589e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d104      	bne.n	80057fc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	61da      	str	r2, [r3, #28]
 80057f8:	2304      	movs	r3, #4
 80057fa:	e067      	b.n	80058cc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	4619      	mov	r1, r3
 8005804:	4610      	mov	r0, r2
 8005806:	f7ff fe59 	bl	80054bc <create_chain>
 800580a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <dir_next+0xcc>
 8005812:	2307      	movs	r3, #7
 8005814:	e05a      	b.n	80058cc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <dir_next+0xd6>
 800581c:	2302      	movs	r3, #2
 800581e:	e055      	b.n	80058cc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005826:	d101      	bne.n	800582c <dir_next+0xe2>
 8005828:	2301      	movs	r3, #1
 800582a:	e04f      	b.n	80058cc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f7ff fb55 	bl	8004edc <sync_window>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <dir_next+0xf2>
 8005838:	2301      	movs	r3, #1
 800583a:	e047      	b.n	80058cc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3330      	adds	r3, #48	; 0x30
 8005840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005844:	2100      	movs	r1, #0
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff f97f 	bl	8004b4a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800584c:	2300      	movs	r3, #0
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	6979      	ldr	r1, [r7, #20]
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f7ff fc22 	bl	800509c <clust2sect>
 8005858:	4602      	mov	r2, r0
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	62da      	str	r2, [r3, #44]	; 0x2c
 800585e:	e012      	b.n	8005886 <dir_next+0x13c>
						fs->wflag = 1;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff fb38 	bl	8004edc <sync_window>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <dir_next+0x12c>
 8005872:	2301      	movs	r3, #1
 8005874:	e02a      	b.n	80058cc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	3301      	adds	r3, #1
 800587a:	613b      	str	r3, [r7, #16]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	62da      	str	r2, [r3, #44]	; 0x2c
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	895b      	ldrh	r3, [r3, #10]
 800588a:	461a      	mov	r2, r3
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4293      	cmp	r3, r2
 8005890:	d3e6      	bcc.n	8005860 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad2      	subs	r2, r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80058a4:	6979      	ldr	r1, [r7, #20]
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff fbf8 	bl	800509c <clust2sect>
 80058ac:	4602      	mov	r2, r0
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c4:	441a      	add	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80058e4:	2100      	movs	r1, #0
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff feb4 	bl	8005654 <dir_sdi>
 80058ec:	4603      	mov	r3, r0
 80058ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80058f0:	7dfb      	ldrb	r3, [r7, #23]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d12b      	bne.n	800594e <dir_alloc+0x7a>
		n = 0;
 80058f6:	2300      	movs	r3, #0
 80058f8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	4619      	mov	r1, r3
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f7ff fb2f 	bl	8004f64 <move_window>
 8005906:	4603      	mov	r3, r0
 8005908:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800590a:	7dfb      	ldrb	r3, [r7, #23]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d11d      	bne.n	800594c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2be5      	cmp	r3, #229	; 0xe5
 8005918:	d004      	beq.n	8005924 <dir_alloc+0x50>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d107      	bne.n	8005934 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	3301      	adds	r3, #1
 8005928:	613b      	str	r3, [r7, #16]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d102      	bne.n	8005938 <dir_alloc+0x64>
 8005932:	e00c      	b.n	800594e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005934:	2300      	movs	r3, #0
 8005936:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005938:	2101      	movs	r1, #1
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff ff05 	bl	800574a <dir_next>
 8005940:	4603      	mov	r3, r0
 8005942:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005944:	7dfb      	ldrb	r3, [r7, #23]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0d7      	beq.n	80058fa <dir_alloc+0x26>
 800594a:	e000      	b.n	800594e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800594c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800594e:	7dfb      	ldrb	r3, [r7, #23]
 8005950:	2b04      	cmp	r3, #4
 8005952:	d101      	bne.n	8005958 <dir_alloc+0x84>
 8005954:	2307      	movs	r3, #7
 8005956:	75fb      	strb	r3, [r7, #23]
	return res;
 8005958:	7dfb      	ldrb	r3, [r7, #23]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	331a      	adds	r3, #26
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff f847 	bl	8004a04 <ld_word>
 8005976:	4603      	mov	r3, r0
 8005978:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b03      	cmp	r3, #3
 8005980:	d109      	bne.n	8005996 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	3314      	adds	r3, #20
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff f83c 	bl	8004a04 <ld_word>
 800598c:	4603      	mov	r3, r0
 800598e:	041b      	lsls	r3, r3, #16
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005996:	68fb      	ldr	r3, [r7, #12]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	331a      	adds	r3, #26
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	b292      	uxth	r2, r2
 80059b4:	4611      	mov	r1, r2
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff f85f 	bl	8004a7a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	d109      	bne.n	80059d8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f103 0214 	add.w	r2, r3, #20
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	0c1b      	lsrs	r3, r3, #16
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	4619      	mov	r1, r3
 80059d2:	4610      	mov	r0, r2
 80059d4:	f7ff f851 	bl	8004a7a <st_word>
	}
}
 80059d8:	bf00      	nop
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80059ee:	2100      	movs	r1, #0
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7ff fe2f 	bl	8005654 <dir_sdi>
 80059f6:	4603      	mov	r3, r0
 80059f8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80059fa:	7dfb      	ldrb	r3, [r7, #23]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <dir_find+0x24>
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
 8005a02:	e03e      	b.n	8005a82 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6938      	ldr	r0, [r7, #16]
 8005a0c:	f7ff faaa 	bl	8004f64 <move_window>
 8005a10:	4603      	mov	r3, r0
 8005a12:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005a14:	7dfb      	ldrb	r3, [r7, #23]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d12f      	bne.n	8005a7a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d102      	bne.n	8005a2e <dir_find+0x4e>
 8005a28:	2304      	movs	r3, #4
 8005a2a:	75fb      	strb	r3, [r7, #23]
 8005a2c:	e028      	b.n	8005a80 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	330b      	adds	r3, #11
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	330b      	adds	r3, #11
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <dir_find+0x86>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a18      	ldr	r0, [r3, #32]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3324      	adds	r3, #36	; 0x24
 8005a58:	220b      	movs	r2, #11
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f7ff f88f 	bl	8004b7e <mem_cmp>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00b      	beq.n	8005a7e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005a66:	2100      	movs	r1, #0
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff fe6e 	bl	800574a <dir_next>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005a72:	7dfb      	ldrb	r3, [r7, #23]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0c5      	beq.n	8005a04 <dir_find+0x24>
 8005a78:	e002      	b.n	8005a80 <dir_find+0xa0>
		if (res != FR_OK) break;
 8005a7a:	bf00      	nop
 8005a7c:	e000      	b.n	8005a80 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005a7e:	bf00      	nop

	return res;
 8005a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005a98:	2101      	movs	r1, #1
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff ff1a 	bl	80058d4 <dir_alloc>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d11c      	bne.n	8005ae4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	68b8      	ldr	r0, [r7, #8]
 8005ab2:	f7ff fa57 	bl	8004f64 <move_window>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d111      	bne.n	8005ae4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff f83e 	bl	8004b4a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a18      	ldr	r0, [r3, #32]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3324      	adds	r3, #36	; 0x24
 8005ad6:	220b      	movs	r2, #11
 8005ad8:	4619      	mov	r1, r3
 8005ada:	f7ff f815 	bl	8004b08 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3324      	adds	r3, #36	; 0x24
 8005b04:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005b06:	220b      	movs	r2, #11
 8005b08:	2120      	movs	r1, #32
 8005b0a:	68b8      	ldr	r0, [r7, #8]
 8005b0c:	f7ff f81d 	bl	8004b4a <mem_set>
	si = i = 0; ni = 8;
 8005b10:	2300      	movs	r3, #0
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	2308      	movs	r3, #8
 8005b1a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	617a      	str	r2, [r7, #20]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4413      	add	r3, r2
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005b2a:	7ffb      	ldrb	r3, [r7, #31]
 8005b2c:	2b20      	cmp	r3, #32
 8005b2e:	d94e      	bls.n	8005bce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005b30:	7ffb      	ldrb	r3, [r7, #31]
 8005b32:	2b2f      	cmp	r3, #47	; 0x2f
 8005b34:	d006      	beq.n	8005b44 <create_name+0x54>
 8005b36:	7ffb      	ldrb	r3, [r7, #31]
 8005b38:	2b5c      	cmp	r3, #92	; 0x5c
 8005b3a:	d110      	bne.n	8005b5e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005b3c:	e002      	b.n	8005b44 <create_name+0x54>
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	3301      	adds	r3, #1
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	4413      	add	r3, r2
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b2f      	cmp	r3, #47	; 0x2f
 8005b4e:	d0f6      	beq.n	8005b3e <create_name+0x4e>
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	4413      	add	r3, r2
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b5c      	cmp	r3, #92	; 0x5c
 8005b5a:	d0f0      	beq.n	8005b3e <create_name+0x4e>
			break;
 8005b5c:	e038      	b.n	8005bd0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005b5e:	7ffb      	ldrb	r3, [r7, #31]
 8005b60:	2b2e      	cmp	r3, #46	; 0x2e
 8005b62:	d003      	beq.n	8005b6c <create_name+0x7c>
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d30c      	bcc.n	8005b86 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	2b0b      	cmp	r3, #11
 8005b70:	d002      	beq.n	8005b78 <create_name+0x88>
 8005b72:	7ffb      	ldrb	r3, [r7, #31]
 8005b74:	2b2e      	cmp	r3, #46	; 0x2e
 8005b76:	d001      	beq.n	8005b7c <create_name+0x8c>
 8005b78:	2306      	movs	r3, #6
 8005b7a:	e044      	b.n	8005c06 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	230b      	movs	r3, #11
 8005b82:	61bb      	str	r3, [r7, #24]
			continue;
 8005b84:	e022      	b.n	8005bcc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005b86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	da04      	bge.n	8005b98 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005b8e:	7ffb      	ldrb	r3, [r7, #31]
 8005b90:	3b80      	subs	r3, #128	; 0x80
 8005b92:	4a1f      	ldr	r2, [pc, #124]	; (8005c10 <create_name+0x120>)
 8005b94:	5cd3      	ldrb	r3, [r2, r3]
 8005b96:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005b98:	7ffb      	ldrb	r3, [r7, #31]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	481d      	ldr	r0, [pc, #116]	; (8005c14 <create_name+0x124>)
 8005b9e:	f7ff f815 	bl	8004bcc <chk_chr>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <create_name+0xbc>
 8005ba8:	2306      	movs	r3, #6
 8005baa:	e02c      	b.n	8005c06 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005bac:	7ffb      	ldrb	r3, [r7, #31]
 8005bae:	2b60      	cmp	r3, #96	; 0x60
 8005bb0:	d905      	bls.n	8005bbe <create_name+0xce>
 8005bb2:	7ffb      	ldrb	r3, [r7, #31]
 8005bb4:	2b7a      	cmp	r3, #122	; 0x7a
 8005bb6:	d802      	bhi.n	8005bbe <create_name+0xce>
 8005bb8:	7ffb      	ldrb	r3, [r7, #31]
 8005bba:	3b20      	subs	r3, #32
 8005bbc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	613a      	str	r2, [r7, #16]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	7ffa      	ldrb	r2, [r7, #31]
 8005bca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005bcc:	e7a6      	b.n	8005b1c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005bce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	441a      	add	r2, r3
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <create_name+0xf4>
 8005be0:	2306      	movs	r3, #6
 8005be2:	e010      	b.n	8005c06 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2be5      	cmp	r3, #229	; 0xe5
 8005bea:	d102      	bne.n	8005bf2 <create_name+0x102>
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2205      	movs	r2, #5
 8005bf0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005bf2:	7ffb      	ldrb	r3, [r7, #31]
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	d801      	bhi.n	8005bfc <create_name+0x10c>
 8005bf8:	2204      	movs	r2, #4
 8005bfa:	e000      	b.n	8005bfe <create_name+0x10e>
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	330b      	adds	r3, #11
 8005c02:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005c04:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3720      	adds	r7, #32
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	08006cd0 	.word	0x08006cd0
 8005c14:	08006c1c 	.word	0x08006c1c

08005c18 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005c2c:	e002      	b.n	8005c34 <follow_path+0x1c>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	3301      	adds	r3, #1
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b2f      	cmp	r3, #47	; 0x2f
 8005c3a:	d0f8      	beq.n	8005c2e <follow_path+0x16>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2b5c      	cmp	r3, #92	; 0x5c
 8005c42:	d0f4      	beq.n	8005c2e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	2200      	movs	r2, #0
 8005c48:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b1f      	cmp	r3, #31
 8005c50:	d80a      	bhi.n	8005c68 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2280      	movs	r2, #128	; 0x80
 8005c56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff fcf9 	bl	8005654 <dir_sdi>
 8005c62:	4603      	mov	r3, r0
 8005c64:	75fb      	strb	r3, [r7, #23]
 8005c66:	e043      	b.n	8005cf0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005c68:	463b      	mov	r3, r7
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff ff3f 	bl	8005af0 <create_name>
 8005c72:	4603      	mov	r3, r0
 8005c74:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c76:	7dfb      	ldrb	r3, [r7, #23]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d134      	bne.n	8005ce6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff feaf 	bl	80059e0 <dir_find>
 8005c82:	4603      	mov	r3, r0
 8005c84:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005c8c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005c8e:	7dfb      	ldrb	r3, [r7, #23]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00a      	beq.n	8005caa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d127      	bne.n	8005cea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005c9a:	7afb      	ldrb	r3, [r7, #11]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d122      	bne.n	8005cea <follow_path+0xd2>
 8005ca4:	2305      	movs	r3, #5
 8005ca6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005ca8:	e01f      	b.n	8005cea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005caa:	7afb      	ldrb	r3, [r7, #11]
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d11c      	bne.n	8005cee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	799b      	ldrb	r3, [r3, #6]
 8005cb8:	f003 0310 	and.w	r3, r3, #16
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d102      	bne.n	8005cc6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005cc0:	2305      	movs	r3, #5
 8005cc2:	75fb      	strb	r3, [r7, #23]
 8005cc4:	e014      	b.n	8005cf0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd4:	4413      	add	r3, r2
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f7ff fe42 	bl	8005962 <ld_clust>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005ce4:	e7c0      	b.n	8005c68 <follow_path+0x50>
			if (res != FR_OK) break;
 8005ce6:	bf00      	nop
 8005ce8:	e002      	b.n	8005cf0 <follow_path+0xd8>
				break;
 8005cea:	bf00      	nop
 8005cec:	e000      	b.n	8005cf0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005cee:	bf00      	nop
			}
		}
	}

	return res;
 8005cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3718      	adds	r7, #24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b087      	sub	sp, #28
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005d02:	f04f 33ff 	mov.w	r3, #4294967295
 8005d06:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d031      	beq.n	8005d74 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	e002      	b.n	8005d1e <get_ldnumber+0x24>
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b20      	cmp	r3, #32
 8005d24:	d903      	bls.n	8005d2e <get_ldnumber+0x34>
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b3a      	cmp	r3, #58	; 0x3a
 8005d2c:	d1f4      	bne.n	8005d18 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b3a      	cmp	r3, #58	; 0x3a
 8005d34:	d11c      	bne.n	8005d70 <get_ldnumber+0x76>
			tp = *path;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	60fa      	str	r2, [r7, #12]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	3b30      	subs	r3, #48	; 0x30
 8005d46:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b09      	cmp	r3, #9
 8005d4c:	d80e      	bhi.n	8005d6c <get_ldnumber+0x72>
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d10a      	bne.n	8005d6c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d107      	bne.n	8005d6c <get_ldnumber+0x72>
					vol = (int)i;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	3301      	adds	r3, #1
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	e002      	b.n	8005d76 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005d70:	2300      	movs	r3, #0
 8005d72:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005d74:	693b      	ldr	r3, [r7, #16]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
	...

08005d84 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	70da      	strb	r2, [r3, #3]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff f8e0 	bl	8004f64 <move_window>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <check_fs+0x2a>
 8005daa:	2304      	movs	r3, #4
 8005dac:	e038      	b.n	8005e20 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	3330      	adds	r3, #48	; 0x30
 8005db2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe fe24 	bl	8004a04 <ld_word>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d001      	beq.n	8005dcc <check_fs+0x48>
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e029      	b.n	8005e20 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dd2:	2be9      	cmp	r3, #233	; 0xe9
 8005dd4:	d009      	beq.n	8005dea <check_fs+0x66>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ddc:	2beb      	cmp	r3, #235	; 0xeb
 8005dde:	d11e      	bne.n	8005e1e <check_fs+0x9a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005de6:	2b90      	cmp	r3, #144	; 0x90
 8005de8:	d119      	bne.n	8005e1e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3330      	adds	r3, #48	; 0x30
 8005dee:	3336      	adds	r3, #54	; 0x36
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fe fe1f 	bl	8004a34 <ld_dword>
 8005df6:	4603      	mov	r3, r0
 8005df8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005dfc:	4a0a      	ldr	r2, [pc, #40]	; (8005e28 <check_fs+0xa4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d101      	bne.n	8005e06 <check_fs+0x82>
 8005e02:	2300      	movs	r3, #0
 8005e04:	e00c      	b.n	8005e20 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	3330      	adds	r3, #48	; 0x30
 8005e0a:	3352      	adds	r3, #82	; 0x52
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fe fe11 	bl	8004a34 <ld_dword>
 8005e12:	4602      	mov	r2, r0
 8005e14:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <check_fs+0xa8>)
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d101      	bne.n	8005e1e <check_fs+0x9a>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e000      	b.n	8005e20 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005e1e:	2302      	movs	r3, #2
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	00544146 	.word	0x00544146
 8005e2c:	33544146 	.word	0x33544146

08005e30 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b096      	sub	sp, #88	; 0x58
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f7ff ff58 	bl	8005cfa <get_ldnumber>
 8005e4a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	da01      	bge.n	8005e56 <find_volume+0x26>
 8005e52:	230b      	movs	r3, #11
 8005e54:	e22e      	b.n	80062b4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005e56:	4aa8      	ldr	r2, [pc, #672]	; (80060f8 <find_volume+0x2c8>)
 8005e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e5e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <find_volume+0x3a>
 8005e66:	230c      	movs	r3, #12
 8005e68:	e224      	b.n	80062b4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e6e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	f023 0301 	bic.w	r3, r3, #1
 8005e76:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d01a      	beq.n	8005eb6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fe fd1f 	bl	80048c8 <disk_status>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005e90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10c      	bne.n	8005eb6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d007      	beq.n	8005eb2 <find_volume+0x82>
 8005ea2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005eae:	230a      	movs	r3, #10
 8005eb0:	e200      	b.n	80062b4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e1fe      	b.n	80062b4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	2200      	movs	r2, #0
 8005eba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	785b      	ldrb	r3, [r3, #1]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe fd17 	bl	80048fc <disk_initialize>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005ed4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e1e7      	b.n	80062b4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005ee4:	79fb      	ldrb	r3, [r7, #7]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <find_volume+0xca>
 8005eea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005eee:	f003 0304 	and.w	r3, r3, #4
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005ef6:	230a      	movs	r3, #10
 8005ef8:	e1dc      	b.n	80062b4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005efe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f02:	f7ff ff3f 	bl	8005d84 <check_fs>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005f0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d14b      	bne.n	8005fac <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f14:	2300      	movs	r3, #0
 8005f16:	643b      	str	r3, [r7, #64]	; 0x40
 8005f18:	e01f      	b.n	8005f5a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005f28:	4413      	add	r3, r2
 8005f2a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	3304      	adds	r3, #4
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d006      	beq.n	8005f44 <find_volume+0x114>
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	3308      	adds	r3, #8
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fe fd7a 	bl	8004a34 <ld_dword>
 8005f40:	4602      	mov	r2, r0
 8005f42:	e000      	b.n	8005f46 <find_volume+0x116>
 8005f44:	2200      	movs	r2, #0
 8005f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005f4e:	440b      	add	r3, r1
 8005f50:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f56:	3301      	adds	r3, #1
 8005f58:	643b      	str	r3, [r7, #64]	; 0x40
 8005f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	d9dc      	bls.n	8005f1a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005f60:	2300      	movs	r3, #0
 8005f62:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <find_volume+0x140>
 8005f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005f78:	4413      	add	r3, r2
 8005f7a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005f7e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d005      	beq.n	8005f92 <find_volume+0x162>
 8005f86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f8a:	f7ff fefb 	bl	8005d84 <check_fs>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	e000      	b.n	8005f94 <find_volume+0x164>
 8005f92:	2303      	movs	r3, #3
 8005f94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005f98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d905      	bls.n	8005fac <find_volume+0x17c>
 8005fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d9e1      	bls.n	8005f70 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005fac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d101      	bne.n	8005fb8 <find_volume+0x188>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e17d      	b.n	80062b4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005fb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d901      	bls.n	8005fc4 <find_volume+0x194>
 8005fc0:	230d      	movs	r3, #13
 8005fc2:	e177      	b.n	80062b4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc6:	3330      	adds	r3, #48	; 0x30
 8005fc8:	330b      	adds	r3, #11
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fe fd1a 	bl	8004a04 <ld_word>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fd6:	d001      	beq.n	8005fdc <find_volume+0x1ac>
 8005fd8:	230d      	movs	r3, #13
 8005fda:	e16b      	b.n	80062b4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fde:	3330      	adds	r3, #48	; 0x30
 8005fe0:	3316      	adds	r3, #22
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fe fd0e 	bl	8004a04 <ld_word>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <find_volume+0x1d0>
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	3330      	adds	r3, #48	; 0x30
 8005ff6:	3324      	adds	r3, #36	; 0x24
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fe fd1b 	bl	8004a34 <ld_dword>
 8005ffe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006002:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006004:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006008:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	789b      	ldrb	r3, [r3, #2]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d005      	beq.n	8006024 <find_volume+0x1f4>
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	789b      	ldrb	r3, [r3, #2]
 800601c:	2b02      	cmp	r3, #2
 800601e:	d001      	beq.n	8006024 <find_volume+0x1f4>
 8006020:	230d      	movs	r3, #13
 8006022:	e147      	b.n	80062b4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	789b      	ldrb	r3, [r3, #2]
 8006028:	461a      	mov	r2, r3
 800602a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800602c:	fb02 f303 	mul.w	r3, r2, r3
 8006030:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006038:	b29a      	uxth	r2, r3
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006040:	895b      	ldrh	r3, [r3, #10]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d008      	beq.n	8006058 <find_volume+0x228>
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	895b      	ldrh	r3, [r3, #10]
 800604a:	461a      	mov	r2, r3
 800604c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604e:	895b      	ldrh	r3, [r3, #10]
 8006050:	3b01      	subs	r3, #1
 8006052:	4013      	ands	r3, r2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <find_volume+0x22c>
 8006058:	230d      	movs	r3, #13
 800605a:	e12b      	b.n	80062b4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800605c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605e:	3330      	adds	r3, #48	; 0x30
 8006060:	3311      	adds	r3, #17
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe fcce 	bl	8004a04 <ld_word>
 8006068:	4603      	mov	r3, r0
 800606a:	461a      	mov	r2, r3
 800606c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	891b      	ldrh	r3, [r3, #8]
 8006074:	f003 030f 	and.w	r3, r3, #15
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <find_volume+0x252>
 800607e:	230d      	movs	r3, #13
 8006080:	e118      	b.n	80062b4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	3330      	adds	r3, #48	; 0x30
 8006086:	3313      	adds	r3, #19
 8006088:	4618      	mov	r0, r3
 800608a:	f7fe fcbb 	bl	8004a04 <ld_word>
 800608e:	4603      	mov	r3, r0
 8006090:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006094:	2b00      	cmp	r3, #0
 8006096:	d106      	bne.n	80060a6 <find_volume+0x276>
 8006098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609a:	3330      	adds	r3, #48	; 0x30
 800609c:	3320      	adds	r3, #32
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fe fcc8 	bl	8004a34 <ld_dword>
 80060a4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80060a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a8:	3330      	adds	r3, #48	; 0x30
 80060aa:	330e      	adds	r3, #14
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fe fca9 	bl	8004a04 <ld_word>
 80060b2:	4603      	mov	r3, r0
 80060b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80060b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <find_volume+0x290>
 80060bc:	230d      	movs	r3, #13
 80060be:	e0f9      	b.n	80062b4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80060c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80060c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c4:	4413      	add	r3, r2
 80060c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060c8:	8912      	ldrh	r2, [r2, #8]
 80060ca:	0912      	lsrs	r2, r2, #4
 80060cc:	b292      	uxth	r2, r2
 80060ce:	4413      	add	r3, r2
 80060d0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80060d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d201      	bcs.n	80060de <find_volume+0x2ae>
 80060da:	230d      	movs	r3, #13
 80060dc:	e0ea      	b.n	80062b4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80060de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060e6:	8952      	ldrh	r2, [r2, #10]
 80060e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d103      	bne.n	80060fc <find_volume+0x2cc>
 80060f4:	230d      	movs	r3, #13
 80060f6:	e0dd      	b.n	80062b4 <find_volume+0x484>
 80060f8:	2000008c 	.word	0x2000008c
		fmt = FS_FAT32;
 80060fc:	2303      	movs	r3, #3
 80060fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006108:	4293      	cmp	r3, r2
 800610a:	d802      	bhi.n	8006112 <find_volume+0x2e2>
 800610c:	2302      	movs	r3, #2
 800610e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006118:	4293      	cmp	r3, r2
 800611a:	d802      	bhi.n	8006122 <find_volume+0x2f2>
 800611c:	2301      	movs	r3, #1
 800611e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	1c9a      	adds	r2, r3, #2
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800612e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006130:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006134:	441a      	add	r2, r3
 8006136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006138:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800613a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613e:	441a      	add	r2, r3
 8006140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006142:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006148:	2b03      	cmp	r3, #3
 800614a:	d11e      	bne.n	800618a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614e:	3330      	adds	r3, #48	; 0x30
 8006150:	332a      	adds	r3, #42	; 0x2a
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe fc56 	bl	8004a04 <ld_word>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <find_volume+0x332>
 800615e:	230d      	movs	r3, #13
 8006160:	e0a8      	b.n	80062b4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	891b      	ldrh	r3, [r3, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <find_volume+0x33e>
 800616a:	230d      	movs	r3, #13
 800616c:	e0a2      	b.n	80062b4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006170:	3330      	adds	r3, #48	; 0x30
 8006172:	332c      	adds	r3, #44	; 0x2c
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe fc5d 	bl	8004a34 <ld_dword>
 800617a:	4602      	mov	r2, r0
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	647b      	str	r3, [r7, #68]	; 0x44
 8006188:	e01f      	b.n	80061ca <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800618a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618c:	891b      	ldrh	r3, [r3, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <find_volume+0x366>
 8006192:	230d      	movs	r3, #13
 8006194:	e08e      	b.n	80062b4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006198:	6a1a      	ldr	r2, [r3, #32]
 800619a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800619c:	441a      	add	r2, r3
 800619e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80061a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d103      	bne.n	80061b2 <find_volume+0x382>
 80061aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	e00a      	b.n	80061c8 <find_volume+0x398>
 80061b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b4:	695a      	ldr	r2, [r3, #20]
 80061b6:	4613      	mov	r3, r2
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	4413      	add	r3, r2
 80061bc:	085a      	lsrs	r2, r3, #1
 80061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80061c8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80061ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80061d4:	0a5b      	lsrs	r3, r3, #9
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d201      	bcs.n	80061de <find_volume+0x3ae>
 80061da:	230d      	movs	r3, #13
 80061dc:	e06a      	b.n	80062b4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	f04f 32ff 	mov.w	r2, #4294967295
 80061e4:	611a      	str	r2, [r3, #16]
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	691a      	ldr	r2, [r3, #16]
 80061ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ec:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	2280      	movs	r2, #128	; 0x80
 80061f2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80061f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d149      	bne.n	8006290 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	3330      	adds	r3, #48	; 0x30
 8006200:	3330      	adds	r3, #48	; 0x30
 8006202:	4618      	mov	r0, r3
 8006204:	f7fe fbfe 	bl	8004a04 <ld_word>
 8006208:	4603      	mov	r3, r0
 800620a:	2b01      	cmp	r3, #1
 800620c:	d140      	bne.n	8006290 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800620e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006210:	3301      	adds	r3, #1
 8006212:	4619      	mov	r1, r3
 8006214:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006216:	f7fe fea5 	bl	8004f64 <move_window>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d137      	bne.n	8006290 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8006220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006222:	2200      	movs	r2, #0
 8006224:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006228:	3330      	adds	r3, #48	; 0x30
 800622a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800622e:	4618      	mov	r0, r3
 8006230:	f7fe fbe8 	bl	8004a04 <ld_word>
 8006234:	4603      	mov	r3, r0
 8006236:	461a      	mov	r2, r3
 8006238:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800623c:	429a      	cmp	r2, r3
 800623e:	d127      	bne.n	8006290 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006242:	3330      	adds	r3, #48	; 0x30
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe fbf5 	bl	8004a34 <ld_dword>
 800624a:	4602      	mov	r2, r0
 800624c:	4b1b      	ldr	r3, [pc, #108]	; (80062bc <find_volume+0x48c>)
 800624e:	429a      	cmp	r2, r3
 8006250:	d11e      	bne.n	8006290 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006254:	3330      	adds	r3, #48	; 0x30
 8006256:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800625a:	4618      	mov	r0, r3
 800625c:	f7fe fbea 	bl	8004a34 <ld_dword>
 8006260:	4602      	mov	r2, r0
 8006262:	4b17      	ldr	r3, [pc, #92]	; (80062c0 <find_volume+0x490>)
 8006264:	429a      	cmp	r2, r3
 8006266:	d113      	bne.n	8006290 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	3330      	adds	r3, #48	; 0x30
 800626c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006270:	4618      	mov	r0, r3
 8006272:	f7fe fbdf 	bl	8004a34 <ld_dword>
 8006276:	4602      	mov	r2, r0
 8006278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800627c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627e:	3330      	adds	r3, #48	; 0x30
 8006280:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe fbd5 	bl	8004a34 <ld_dword>
 800628a:	4602      	mov	r2, r0
 800628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006292:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006296:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006298:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <find_volume+0x494>)
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	3301      	adds	r3, #1
 800629e:	b29a      	uxth	r2, r3
 80062a0:	4b08      	ldr	r3, [pc, #32]	; (80062c4 <find_volume+0x494>)
 80062a2:	801a      	strh	r2, [r3, #0]
 80062a4:	4b07      	ldr	r3, [pc, #28]	; (80062c4 <find_volume+0x494>)
 80062a6:	881a      	ldrh	r2, [r3, #0]
 80062a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062aa:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80062ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062ae:	f7fe fdf1 	bl	8004e94 <clear_lock>
#endif
	return FR_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3758      	adds	r7, #88	; 0x58
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	41615252 	.word	0x41615252
 80062c0:	61417272 	.word	0x61417272
 80062c4:	20000090 	.word	0x20000090

080062c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80062d2:	2309      	movs	r3, #9
 80062d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01c      	beq.n	8006316 <validate+0x4e>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d018      	beq.n	8006316 <validate+0x4e>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d013      	beq.n	8006316 <validate+0x4e>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	889a      	ldrh	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	88db      	ldrh	r3, [r3, #6]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d10c      	bne.n	8006316 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	4618      	mov	r0, r3
 8006304:	f7fe fae0 	bl	80048c8 <disk_status>
 8006308:	4603      	mov	r3, r0
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <validate+0x4e>
			res = FR_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <validate+0x5a>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	e000      	b.n	8006324 <validate+0x5c>
 8006322:	2300      	movs	r3, #0
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	6013      	str	r3, [r2, #0]
	return res;
 8006328:	7bfb      	ldrb	r3, [r7, #15]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b098      	sub	sp, #96	; 0x60
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	4613      	mov	r3, r2
 800633e:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <f_open+0x18>
 8006346:	2309      	movs	r3, #9
 8006348:	e1ad      	b.n	80066a6 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006350:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006352:	79fa      	ldrb	r2, [r7, #7]
 8006354:	f107 0110 	add.w	r1, r7, #16
 8006358:	f107 0308 	add.w	r3, r7, #8
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff fd67 	bl	8005e30 <find_volume>
 8006362:	4603      	mov	r3, r0
 8006364:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006368:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800636c:	2b00      	cmp	r3, #0
 800636e:	f040 8191 	bne.w	8006694 <f_open+0x362>
		dj.obj.fs = fs;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	f107 0314 	add.w	r3, r7, #20
 800637c:	4611      	mov	r1, r2
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff fc4a 	bl	8005c18 <follow_path>
 8006384:	4603      	mov	r3, r0
 8006386:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800638a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800638e:	2b00      	cmp	r3, #0
 8006390:	d11a      	bne.n	80063c8 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006392:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006396:	b25b      	sxtb	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	da03      	bge.n	80063a4 <f_open+0x72>
				res = FR_INVALID_NAME;
 800639c:	2306      	movs	r3, #6
 800639e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80063a2:	e011      	b.n	80063c8 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80063a4:	79fb      	ldrb	r3, [r7, #7]
 80063a6:	f023 0301 	bic.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	bf14      	ite	ne
 80063ae:	2301      	movne	r3, #1
 80063b0:	2300      	moveq	r3, #0
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	461a      	mov	r2, r3
 80063b6:	f107 0314 	add.w	r3, r7, #20
 80063ba:	4611      	mov	r1, r2
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fe fc21 	bl	8004c04 <chk_lock>
 80063c2:	4603      	mov	r3, r0
 80063c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	f003 031c 	and.w	r3, r3, #28
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d07f      	beq.n	80064d2 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80063d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d017      	beq.n	800640a <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80063da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d10e      	bne.n	8006400 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80063e2:	f7fe fc6b 	bl	8004cbc <enq_lock>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d006      	beq.n	80063fa <f_open+0xc8>
 80063ec:	f107 0314 	add.w	r3, r7, #20
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7ff fb4a 	bl	8005a8a <dir_register>
 80063f6:	4603      	mov	r3, r0
 80063f8:	e000      	b.n	80063fc <f_open+0xca>
 80063fa:	2312      	movs	r3, #18
 80063fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	f043 0308 	orr.w	r3, r3, #8
 8006406:	71fb      	strb	r3, [r7, #7]
 8006408:	e010      	b.n	800642c <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800640a:	7ebb      	ldrb	r3, [r7, #26]
 800640c:	f003 0311 	and.w	r3, r3, #17
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <f_open+0xea>
					res = FR_DENIED;
 8006414:	2307      	movs	r3, #7
 8006416:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800641a:	e007      	b.n	800642c <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <f_open+0xfa>
 8006426:	2308      	movs	r3, #8
 8006428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800642c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006430:	2b00      	cmp	r3, #0
 8006432:	d168      	bne.n	8006506 <f_open+0x1d4>
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d063      	beq.n	8006506 <f_open+0x1d4>
				dw = GET_FATTIME();
 800643e:	f7fe f9e1 	bl	8004804 <get_fattime>
 8006442:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006446:	330e      	adds	r3, #14
 8006448:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800644a:	4618      	mov	r0, r3
 800644c:	f7fe fb30 	bl	8004ab0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006452:	3316      	adds	r3, #22
 8006454:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe fb2a 	bl	8004ab0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800645c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645e:	330b      	adds	r3, #11
 8006460:	2220      	movs	r2, #32
 8006462:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006468:	4611      	mov	r1, r2
 800646a:	4618      	mov	r0, r3
 800646c:	f7ff fa79 	bl	8005962 <ld_clust>
 8006470:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006476:	2200      	movs	r2, #0
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff fa91 	bl	80059a0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006480:	331c      	adds	r3, #28
 8006482:	2100      	movs	r1, #0
 8006484:	4618      	mov	r0, r3
 8006486:	f7fe fb13 	bl	8004ab0 <st_dword>
					fs->wflag = 1;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2201      	movs	r2, #1
 800648e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006492:	2b00      	cmp	r3, #0
 8006494:	d037      	beq.n	8006506 <f_open+0x1d4>
						dw = fs->winsect;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800649c:	f107 0314 	add.w	r3, r7, #20
 80064a0:	2200      	movs	r2, #0
 80064a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fe ffa4 	bl	80053f2 <remove_chain>
 80064aa:	4603      	mov	r3, r0
 80064ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80064b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d126      	bne.n	8006506 <f_open+0x1d4>
							res = move_window(fs, dw);
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fe fd51 	bl	8004f64 <move_window>
 80064c2:	4603      	mov	r3, r0
 80064c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064cc:	3a01      	subs	r2, #1
 80064ce:	60da      	str	r2, [r3, #12]
 80064d0:	e019      	b.n	8006506 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80064d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d115      	bne.n	8006506 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80064da:	7ebb      	ldrb	r3, [r7, #26]
 80064dc:	f003 0310 	and.w	r3, r3, #16
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <f_open+0x1ba>
					res = FR_NO_FILE;
 80064e4:	2304      	movs	r3, #4
 80064e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80064ea:	e00c      	b.n	8006506 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d007      	beq.n	8006506 <f_open+0x1d4>
 80064f6:	7ebb      	ldrb	r3, [r7, #26]
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <f_open+0x1d4>
						res = FR_DENIED;
 8006500:	2307      	movs	r3, #7
 8006502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006506:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800650a:	2b00      	cmp	r3, #0
 800650c:	d128      	bne.n	8006560 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	f003 0308 	and.w	r3, r3, #8
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006518:	79fb      	ldrb	r3, [r7, #7]
 800651a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800651e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	f023 0301 	bic.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	bf14      	ite	ne
 8006538:	2301      	movne	r3, #1
 800653a:	2300      	moveq	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	461a      	mov	r2, r3
 8006540:	f107 0314 	add.w	r3, r7, #20
 8006544:	4611      	mov	r1, r2
 8006546:	4618      	mov	r0, r3
 8006548:	f7fe fbda 	bl	8004d00 <inc_lock>
 800654c:	4602      	mov	r2, r0
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d102      	bne.n	8006560 <f_open+0x22e>
 800655a:	2302      	movs	r3, #2
 800655c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006560:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006564:	2b00      	cmp	r3, #0
 8006566:	f040 8095 	bne.w	8006694 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800656e:	4611      	mov	r1, r2
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff f9f6 	bl	8005962 <ld_clust>
 8006576:	4602      	mov	r2, r0
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800657c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657e:	331c      	adds	r3, #28
 8006580:	4618      	mov	r0, r3
 8006582:	f7fe fa57 	bl	8004a34 <ld_dword>
 8006586:	4602      	mov	r2, r0
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	88da      	ldrh	r2, [r3, #6]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	79fa      	ldrb	r2, [r7, #7]
 80065a4:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3330      	adds	r3, #48	; 0x30
 80065bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe fac1 	bl	8004b4a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80065c8:	79fb      	ldrb	r3, [r7, #7]
 80065ca:	f003 0320 	and.w	r3, r3, #32
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d060      	beq.n	8006694 <f_open+0x362>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d05c      	beq.n	8006694 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	895b      	ldrh	r3, [r3, #10]
 80065e6:	025b      	lsls	r3, r3, #9
 80065e8:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	657b      	str	r3, [r7, #84]	; 0x54
 80065f6:	e016      	b.n	8006626 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fe fd6c 	bl	80050da <get_fat>
 8006602:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006606:	2b01      	cmp	r3, #1
 8006608:	d802      	bhi.n	8006610 <f_open+0x2de>
 800660a:	2302      	movs	r3, #2
 800660c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006610:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006616:	d102      	bne.n	800661e <f_open+0x2ec>
 8006618:	2301      	movs	r3, #1
 800661a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800661e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	657b      	str	r3, [r7, #84]	; 0x54
 8006626:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800662a:	2b00      	cmp	r3, #0
 800662c:	d103      	bne.n	8006636 <f_open+0x304>
 800662e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006632:	429a      	cmp	r2, r3
 8006634:	d8e0      	bhi.n	80065f8 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800663a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800663c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006640:	2b00      	cmp	r3, #0
 8006642:	d127      	bne.n	8006694 <f_open+0x362>
 8006644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800664a:	2b00      	cmp	r3, #0
 800664c:	d022      	beq.n	8006694 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006652:	4618      	mov	r0, r3
 8006654:	f7fe fd22 	bl	800509c <clust2sect>
 8006658:	6478      	str	r0, [r7, #68]	; 0x44
 800665a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800665c:	2b00      	cmp	r3, #0
 800665e:	d103      	bne.n	8006668 <f_open+0x336>
						res = FR_INT_ERR;
 8006660:	2302      	movs	r3, #2
 8006662:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006666:	e015      	b.n	8006694 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800666a:	0a5a      	lsrs	r2, r3, #9
 800666c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800666e:	441a      	add	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	7858      	ldrb	r0, [r3, #1]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1a      	ldr	r2, [r3, #32]
 8006682:	2301      	movs	r3, #1
 8006684:	f7fe f960 	bl	8004948 <disk_read>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <f_open+0x362>
 800668e:	2301      	movs	r3, #1
 8006690:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <f_open+0x370>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80066a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3760      	adds	r7, #96	; 0x60
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b08c      	sub	sp, #48	; 0x30
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	607a      	str	r2, [r7, #4]
 80066ba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f107 0210 	add.w	r2, r7, #16
 80066cc:	4611      	mov	r1, r2
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff fdfa 	bl	80062c8 <validate>
 80066d4:	4603      	mov	r3, r0
 80066d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80066da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d107      	bne.n	80066f2 <f_write+0x44>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	7d5b      	ldrb	r3, [r3, #21]
 80066e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80066ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <f_write+0x4a>
 80066f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066f6:	e14b      	b.n	8006990 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	7d1b      	ldrb	r3, [r3, #20]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <f_write+0x5a>
 8006704:	2307      	movs	r3, #7
 8006706:	e143      	b.n	8006990 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	699a      	ldr	r2, [r3, #24]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	441a      	add	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	429a      	cmp	r2, r3
 8006716:	f080 812d 	bcs.w	8006974 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	43db      	mvns	r3, r3
 8006720:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006722:	e127      	b.n	8006974 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800672c:	2b00      	cmp	r3, #0
 800672e:	f040 80e3 	bne.w	80068f8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	0a5b      	lsrs	r3, r3, #9
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	8952      	ldrh	r2, [r2, #10]
 800673c:	3a01      	subs	r2, #1
 800673e:	4013      	ands	r3, r2
 8006740:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d143      	bne.n	80067d0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10c      	bne.n	800676a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006758:	2b00      	cmp	r3, #0
 800675a:	d11a      	bne.n	8006792 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2100      	movs	r1, #0
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe feab 	bl	80054bc <create_chain>
 8006766:	62b8      	str	r0, [r7, #40]	; 0x28
 8006768:	e013      	b.n	8006792 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	2b00      	cmp	r3, #0
 8006770:	d007      	beq.n	8006782 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	4619      	mov	r1, r3
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7fe ff37 	bl	80055ec <clmt_clust>
 800677e:	62b8      	str	r0, [r7, #40]	; 0x28
 8006780:	e007      	b.n	8006792 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	4619      	mov	r1, r3
 800678a:	4610      	mov	r0, r2
 800678c:	f7fe fe96 	bl	80054bc <create_chain>
 8006790:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 80f2 	beq.w	800697e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800679a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679c:	2b01      	cmp	r3, #1
 800679e:	d104      	bne.n	80067aa <f_write+0xfc>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2202      	movs	r2, #2
 80067a4:	755a      	strb	r2, [r3, #21]
 80067a6:	2302      	movs	r3, #2
 80067a8:	e0f2      	b.n	8006990 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b0:	d104      	bne.n	80067bc <f_write+0x10e>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	755a      	strb	r2, [r3, #21]
 80067b8:	2301      	movs	r3, #1
 80067ba:	e0e9      	b.n	8006990 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067c0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d102      	bne.n	80067d0 <f_write+0x122>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ce:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	7d1b      	ldrb	r3, [r3, #20]
 80067d4:	b25b      	sxtb	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	da18      	bge.n	800680c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	7858      	ldrb	r0, [r3, #1]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6a1a      	ldr	r2, [r3, #32]
 80067e8:	2301      	movs	r3, #1
 80067ea:	f7fe f8cd 	bl	8004988 <disk_write>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d004      	beq.n	80067fe <f_write+0x150>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2201      	movs	r2, #1
 80067f8:	755a      	strb	r2, [r3, #21]
 80067fa:	2301      	movs	r3, #1
 80067fc:	e0c8      	b.n	8006990 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	7d1b      	ldrb	r3, [r3, #20]
 8006802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006806:	b2da      	uxtb	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	4619      	mov	r1, r3
 8006814:	4610      	mov	r0, r2
 8006816:	f7fe fc41 	bl	800509c <clust2sect>
 800681a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d104      	bne.n	800682c <f_write+0x17e>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2202      	movs	r2, #2
 8006826:	755a      	strb	r2, [r3, #21]
 8006828:	2302      	movs	r3, #2
 800682a:	e0b1      	b.n	8006990 <f_write+0x2e2>
			sect += csect;
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	4413      	add	r3, r2
 8006832:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	0a5b      	lsrs	r3, r3, #9
 8006838:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d03c      	beq.n	80068ba <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	4413      	add	r3, r2
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	8952      	ldrh	r2, [r2, #10]
 800684a:	4293      	cmp	r3, r2
 800684c:	d905      	bls.n	800685a <f_write+0x1ac>
					cc = fs->csize - csect;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	895b      	ldrh	r3, [r3, #10]
 8006852:	461a      	mov	r2, r3
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	7858      	ldrb	r0, [r3, #1]
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	69f9      	ldr	r1, [r7, #28]
 8006864:	f7fe f890 	bl	8004988 <disk_write>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d004      	beq.n	8006878 <f_write+0x1ca>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2201      	movs	r2, #1
 8006872:	755a      	strb	r2, [r3, #21]
 8006874:	2301      	movs	r3, #1
 8006876:	e08b      	b.n	8006990 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a1a      	ldr	r2, [r3, #32]
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	6a3a      	ldr	r2, [r7, #32]
 8006882:	429a      	cmp	r2, r3
 8006884:	d915      	bls.n	80068b2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a1a      	ldr	r2, [r3, #32]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	025b      	lsls	r3, r3, #9
 8006896:	69fa      	ldr	r2, [r7, #28]
 8006898:	4413      	add	r3, r2
 800689a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800689e:	4619      	mov	r1, r3
 80068a0:	f7fe f932 	bl	8004b08 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	7d1b      	ldrb	r3, [r3, #20]
 80068a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	025b      	lsls	r3, r3, #9
 80068b6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80068b8:	e03f      	b.n	800693a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d016      	beq.n	80068f2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	699a      	ldr	r2, [r3, #24]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d210      	bcs.n	80068f2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	7858      	ldrb	r0, [r3, #1]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80068da:	2301      	movs	r3, #1
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	f7fe f833 	bl	8004948 <disk_read>
 80068e2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d004      	beq.n	80068f2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2201      	movs	r2, #1
 80068ec:	755a      	strb	r2, [r3, #21]
 80068ee:	2301      	movs	r3, #1
 80068f0:	e04e      	b.n	8006990 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006900:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006904:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	429a      	cmp	r2, r3
 800690c:	d901      	bls.n	8006912 <f_write+0x264>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006920:	4413      	add	r3, r2
 8006922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006924:	69f9      	ldr	r1, [r7, #28]
 8006926:	4618      	mov	r0, r3
 8006928:	f7fe f8ee 	bl	8004b08 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	7d1b      	ldrb	r3, [r3, #20]
 8006930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006934:	b2da      	uxtb	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	4413      	add	r3, r2
 8006940:	61fb      	str	r3, [r7, #28]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	441a      	add	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	619a      	str	r2, [r3, #24]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	429a      	cmp	r2, r3
 8006958:	bf38      	it	cc
 800695a:	461a      	movcc	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	60da      	str	r2, [r3, #12]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	441a      	add	r2, r3
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	f47f aed4 	bne.w	8006724 <f_write+0x76>
 800697c:	e000      	b.n	8006980 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800697e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	7d1b      	ldrb	r3, [r3, #20]
 8006984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006988:	b2da      	uxtb	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3730      	adds	r7, #48	; 0x30
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f107 0208 	add.w	r2, r7, #8
 80069a6:	4611      	mov	r1, r2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff fc8d 	bl	80062c8 <validate>
 80069ae:	4603      	mov	r3, r0
 80069b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80069b2:	7dfb      	ldrb	r3, [r7, #23]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d168      	bne.n	8006a8a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	7d1b      	ldrb	r3, [r3, #20]
 80069bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d062      	beq.n	8006a8a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	7d1b      	ldrb	r3, [r3, #20]
 80069c8:	b25b      	sxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	da15      	bge.n	80069fa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	7858      	ldrb	r0, [r3, #1]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a1a      	ldr	r2, [r3, #32]
 80069dc:	2301      	movs	r3, #1
 80069de:	f7fd ffd3 	bl	8004988 <disk_write>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d001      	beq.n	80069ec <f_sync+0x54>
 80069e8:	2301      	movs	r3, #1
 80069ea:	e04f      	b.n	8006a8c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	7d1b      	ldrb	r3, [r3, #20]
 80069f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80069fa:	f7fd ff03 	bl	8004804 <get_fattime>
 80069fe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	4619      	mov	r1, r3
 8006a08:	4610      	mov	r0, r2
 8006a0a:	f7fe faab 	bl	8004f64 <move_window>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d138      	bne.n	8006a8a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	330b      	adds	r3, #11
 8006a22:	781a      	ldrb	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	330b      	adds	r3, #11
 8006a28:	f042 0220 	orr.w	r2, r2, #32
 8006a2c:	b2d2      	uxtb	r2, r2
 8006a2e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6818      	ldr	r0, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	68f9      	ldr	r1, [r7, #12]
 8006a3c:	f7fe ffb0 	bl	80059a0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f103 021c 	add.w	r2, r3, #28
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	f7fe f82f 	bl	8004ab0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3316      	adds	r3, #22
 8006a56:	6939      	ldr	r1, [r7, #16]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fe f829 	bl	8004ab0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3312      	adds	r3, #18
 8006a62:	2100      	movs	r1, #0
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fe f808 	bl	8004a7a <st_word>
					fs->wflag = 1;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe faa4 	bl	8004fc0 <sync_fs>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	7d1b      	ldrb	r3, [r3, #20]
 8006a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7ff ff7b 	bl	8006998 <f_sync>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d118      	bne.n	8006ade <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f107 0208 	add.w	r2, r7, #8
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff fc07 	bl	80062c8 <validate>
 8006aba:	4603      	mov	r3, r0
 8006abc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10c      	bne.n	8006ade <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe f9a7 	bl	8004e1c <dec_lock>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d102      	bne.n	8006ade <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	4613      	mov	r3, r2
 8006af4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006af6:	2301      	movs	r3, #1
 8006af8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006afe:	4b1f      	ldr	r3, [pc, #124]	; (8006b7c <FATFS_LinkDriverEx+0x94>)
 8006b00:	7a5b      	ldrb	r3, [r3, #9]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d131      	bne.n	8006b6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006b08:	4b1c      	ldr	r3, [pc, #112]	; (8006b7c <FATFS_LinkDriverEx+0x94>)
 8006b0a:	7a5b      	ldrb	r3, [r3, #9]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	4b1a      	ldr	r3, [pc, #104]	; (8006b7c <FATFS_LinkDriverEx+0x94>)
 8006b12:	2100      	movs	r1, #0
 8006b14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006b16:	4b19      	ldr	r3, [pc, #100]	; (8006b7c <FATFS_LinkDriverEx+0x94>)
 8006b18:	7a5b      	ldrb	r3, [r3, #9]
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	4a17      	ldr	r2, [pc, #92]	; (8006b7c <FATFS_LinkDriverEx+0x94>)
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006b26:	4b15      	ldr	r3, [pc, #84]	; (8006b7c <FATFS_LinkDriverEx+0x94>)
 8006b28:	7a5b      	ldrb	r3, [r3, #9]
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	4b13      	ldr	r3, [pc, #76]	; (8006b7c <FATFS_LinkDriverEx+0x94>)
 8006b30:	4413      	add	r3, r2
 8006b32:	79fa      	ldrb	r2, [r7, #7]
 8006b34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006b36:	4b11      	ldr	r3, [pc, #68]	; (8006b7c <FATFS_LinkDriverEx+0x94>)
 8006b38:	7a5b      	ldrb	r3, [r3, #9]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	b2d1      	uxtb	r1, r2
 8006b40:	4a0e      	ldr	r2, [pc, #56]	; (8006b7c <FATFS_LinkDriverEx+0x94>)
 8006b42:	7251      	strb	r1, [r2, #9]
 8006b44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006b46:	7dbb      	ldrb	r3, [r7, #22]
 8006b48:	3330      	adds	r3, #48	; 0x30
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	3301      	adds	r3, #1
 8006b54:	223a      	movs	r2, #58	; 0x3a
 8006b56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	3302      	adds	r3, #2
 8006b5c:	222f      	movs	r2, #47	; 0x2f
 8006b5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	3303      	adds	r3, #3
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	200000b4 	.word	0x200000b4

08006b80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff ffaa 	bl	8006ae8 <FATFS_LinkDriverEx>
 8006b94:	4603      	mov	r3, r0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <__libc_init_array>:
 8006ba0:	b570      	push	{r4, r5, r6, lr}
 8006ba2:	4e0d      	ldr	r6, [pc, #52]	; (8006bd8 <__libc_init_array+0x38>)
 8006ba4:	4c0d      	ldr	r4, [pc, #52]	; (8006bdc <__libc_init_array+0x3c>)
 8006ba6:	1ba4      	subs	r4, r4, r6
 8006ba8:	10a4      	asrs	r4, r4, #2
 8006baa:	2500      	movs	r5, #0
 8006bac:	42a5      	cmp	r5, r4
 8006bae:	d109      	bne.n	8006bc4 <__libc_init_array+0x24>
 8006bb0:	4e0b      	ldr	r6, [pc, #44]	; (8006be0 <__libc_init_array+0x40>)
 8006bb2:	4c0c      	ldr	r4, [pc, #48]	; (8006be4 <__libc_init_array+0x44>)
 8006bb4:	f000 f820 	bl	8006bf8 <_init>
 8006bb8:	1ba4      	subs	r4, r4, r6
 8006bba:	10a4      	asrs	r4, r4, #2
 8006bbc:	2500      	movs	r5, #0
 8006bbe:	42a5      	cmp	r5, r4
 8006bc0:	d105      	bne.n	8006bce <__libc_init_array+0x2e>
 8006bc2:	bd70      	pop	{r4, r5, r6, pc}
 8006bc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bc8:	4798      	blx	r3
 8006bca:	3501      	adds	r5, #1
 8006bcc:	e7ee      	b.n	8006bac <__libc_init_array+0xc>
 8006bce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bd2:	4798      	blx	r3
 8006bd4:	3501      	adds	r5, #1
 8006bd6:	e7f2      	b.n	8006bbe <__libc_init_array+0x1e>
 8006bd8:	08006d58 	.word	0x08006d58
 8006bdc:	08006d58 	.word	0x08006d58
 8006be0:	08006d58 	.word	0x08006d58
 8006be4:	08006d5c 	.word	0x08006d5c

08006be8 <memset>:
 8006be8:	4402      	add	r2, r0
 8006bea:	4603      	mov	r3, r0
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d100      	bne.n	8006bf2 <memset+0xa>
 8006bf0:	4770      	bx	lr
 8006bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8006bf6:	e7f9      	b.n	8006bec <memset+0x4>

08006bf8 <_init>:
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	bf00      	nop
 8006bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfe:	bc08      	pop	{r3}
 8006c00:	469e      	mov	lr, r3
 8006c02:	4770      	bx	lr

08006c04 <_fini>:
 8006c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c06:	bf00      	nop
 8006c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0a:	bc08      	pop	{r3}
 8006c0c:	469e      	mov	lr, r3
 8006c0e:	4770      	bx	lr
