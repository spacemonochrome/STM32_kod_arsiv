
STM32_Parser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004058  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080041e8  080041e8  000141e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004498  08004498  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  08004498  08004498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044a0  080044a0  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044a0  080044a0  000144a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044a4  080044a4  000144a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  080044a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000228  080046d0  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  080046d0  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000437d  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e45  00000000  00000000  000245d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003c0  00000000  00000000  00025420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000338  00000000  00000000  000257e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f9af  00000000  00000000  00025b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003d5f  00000000  00000000  000454c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bf941  00000000  00000000  00049226  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00108b67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000190c  00000000  00000000  00108be4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080041d0 	.word	0x080041d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	080041d0 	.word	0x080041d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b972 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4688      	mov	r8, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14b      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4615      	mov	r5, r2
 8000bfe:	d967      	bls.n	8000cd0 <__udivmoddi4+0xe4>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0720 	rsb	r7, r2, #32
 8000c0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c12:	4095      	lsls	r5, r2
 8000c14:	ea47 0803 	orr.w	r8, r7, r3
 8000c18:	4094      	lsls	r4, r2
 8000c1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c24:	fa1f fc85 	uxth.w	ip, r5
 8000c28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c30:	fb07 f10c 	mul.w	r1, r7, ip
 8000c34:	4299      	cmp	r1, r3
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x60>
 8000c38:	18eb      	adds	r3, r5, r3
 8000c3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3e:	f080 811b 	bcs.w	8000e78 <__udivmoddi4+0x28c>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 8118 	bls.w	8000e78 <__udivmoddi4+0x28c>
 8000c48:	3f02      	subs	r7, #2
 8000c4a:	442b      	add	r3, r5
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c60:	45a4      	cmp	ip, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x8c>
 8000c64:	192c      	adds	r4, r5, r4
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c6e:	45a4      	cmp	ip, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c74:	3802      	subs	r0, #2
 8000c76:	442c      	add	r4, r5
 8000c78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c7c:	eba4 040c 	sub.w	r4, r4, ip
 8000c80:	2700      	movs	r7, #0
 8000c82:	b11e      	cbz	r6, 8000c8c <__udivmoddi4+0xa0>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8c:	4639      	mov	r1, r7
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xbe>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80eb 	beq.w	8000e72 <__udivmoddi4+0x286>
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ca2:	4638      	mov	r0, r7
 8000ca4:	4639      	mov	r1, r7
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f783 	clz	r7, r3
 8000cae:	2f00      	cmp	r7, #0
 8000cb0:	d147      	bne.n	8000d42 <__udivmoddi4+0x156>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd0>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2c4>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	4698      	mov	r8, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa0>
 8000cca:	e9c6 4800 	strd	r4, r8, [r6]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xe8>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 808f 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cde:	1b49      	subs	r1, r1, r5
 8000ce0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce4:	fa1f f885 	uxth.w	r8, r5
 8000ce8:	2701      	movs	r7, #1
 8000cea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cee:	0c23      	lsrs	r3, r4, #16
 8000cf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000d00:	18eb      	adds	r3, r5, r3
 8000d02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	f200 80cd 	bhi.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d0e:	4684      	mov	ip, r0
 8000d10:	1a59      	subs	r1, r3, r1
 8000d12:	b2a3      	uxth	r3, r4
 8000d14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d20:	fb08 f800 	mul.w	r8, r8, r0
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x14c>
 8000d28:	192c      	adds	r4, r5, r4
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x14a>
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	f200 80b6 	bhi.w	8000ea2 <__udivmoddi4+0x2b6>
 8000d36:	4618      	mov	r0, r3
 8000d38:	eba4 0408 	sub.w	r4, r4, r8
 8000d3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d40:	e79f      	b.n	8000c82 <__udivmoddi4+0x96>
 8000d42:	f1c7 0c20 	rsb	ip, r7, #32
 8000d46:	40bb      	lsls	r3, r7
 8000d48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d50:	fa01 f407 	lsl.w	r4, r1, r7
 8000d54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d60:	4325      	orrs	r5, r4
 8000d62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d66:	0c2c      	lsrs	r4, r5, #16
 8000d68:	fb08 3319 	mls	r3, r8, r9, r3
 8000d6c:	fa1f fa8e 	uxth.w	sl, lr
 8000d70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d74:	fb09 f40a 	mul.w	r4, r9, sl
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1e 0303 	adds.w	r3, lr, r3
 8000d88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d8c:	f080 8087 	bcs.w	8000e9e <__udivmoddi4+0x2b2>
 8000d90:	429c      	cmp	r4, r3
 8000d92:	f240 8084 	bls.w	8000e9e <__udivmoddi4+0x2b2>
 8000d96:	f1a9 0902 	sub.w	r9, r9, #2
 8000d9a:	4473      	add	r3, lr
 8000d9c:	1b1b      	subs	r3, r3, r4
 8000d9e:	b2ad      	uxth	r5, r5
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3310 	mls	r3, r8, r0, r3
 8000da8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000db0:	45a2      	cmp	sl, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1e 0404 	adds.w	r4, lr, r4
 8000db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dbc:	d26b      	bcs.n	8000e96 <__udivmoddi4+0x2aa>
 8000dbe:	45a2      	cmp	sl, r4
 8000dc0:	d969      	bls.n	8000e96 <__udivmoddi4+0x2aa>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4474      	add	r4, lr
 8000dc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dca:	fba0 8902 	umull	r8, r9, r0, r2
 8000dce:	eba4 040a 	sub.w	r4, r4, sl
 8000dd2:	454c      	cmp	r4, r9
 8000dd4:	46c2      	mov	sl, r8
 8000dd6:	464b      	mov	r3, r9
 8000dd8:	d354      	bcc.n	8000e84 <__udivmoddi4+0x298>
 8000dda:	d051      	beq.n	8000e80 <__udivmoddi4+0x294>
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d069      	beq.n	8000eb4 <__udivmoddi4+0x2c8>
 8000de0:	ebb1 050a 	subs.w	r5, r1, sl
 8000de4:	eb64 0403 	sbc.w	r4, r4, r3
 8000de8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dec:	40fd      	lsrs	r5, r7
 8000dee:	40fc      	lsrs	r4, r7
 8000df0:	ea4c 0505 	orr.w	r5, ip, r5
 8000df4:	e9c6 5400 	strd	r5, r4, [r6]
 8000df8:	2700      	movs	r7, #0
 8000dfa:	e747      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f703 	lsr.w	r7, r0, r3
 8000e04:	4095      	lsls	r5, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e12:	4338      	orrs	r0, r7
 8000e14:	0c01      	lsrs	r1, r0, #16
 8000e16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e1a:	fa1f f885 	uxth.w	r8, r5
 8000e1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e26:	fb07 f308 	mul.w	r3, r7, r8
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x256>
 8000e32:	1869      	adds	r1, r5, r1
 8000e34:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e38:	d22f      	bcs.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d92d      	bls.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3e:	3f02      	subs	r7, #2
 8000e40:	4429      	add	r1, r5
 8000e42:	1acb      	subs	r3, r1, r3
 8000e44:	b281      	uxth	r1, r0
 8000e46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb00 f308 	mul.w	r3, r0, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x27e>
 8000e5a:	1869      	adds	r1, r5, r1
 8000e5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e60:	d217      	bcs.n	8000e92 <__udivmoddi4+0x2a6>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d915      	bls.n	8000e92 <__udivmoddi4+0x2a6>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4429      	add	r1, r5
 8000e6a:	1ac9      	subs	r1, r1, r3
 8000e6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e70:	e73b      	b.n	8000cea <__udivmoddi4+0xfe>
 8000e72:	4637      	mov	r7, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e709      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000e78:	4607      	mov	r7, r0
 8000e7a:	e6e7      	b.n	8000c4c <__udivmoddi4+0x60>
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x8c>
 8000e80:	4541      	cmp	r1, r8
 8000e82:	d2ab      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e88:	eb69 020e 	sbc.w	r2, r9, lr
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	4613      	mov	r3, r2
 8000e90:	e7a4      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e92:	4660      	mov	r0, ip
 8000e94:	e7e9      	b.n	8000e6a <__udivmoddi4+0x27e>
 8000e96:	4618      	mov	r0, r3
 8000e98:	e795      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9a:	4667      	mov	r7, ip
 8000e9c:	e7d1      	b.n	8000e42 <__udivmoddi4+0x256>
 8000e9e:	4681      	mov	r9, r0
 8000ea0:	e77c      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	442c      	add	r4, r5
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0x14c>
 8000ea8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eac:	442b      	add	r3, r5
 8000eae:	e72f      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xda>
 8000eb4:	4637      	mov	r7, r6
 8000eb6:	e6e9      	b.n	8000c8c <__udivmoddi4+0xa0>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec0:	f000 f9bc 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec4:	f000 f83c 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec8:	f000 f8a4 	bl	8001014 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  parser(&str,&Array[0][0],&delim);
 8000ecc:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <main+0x60>)
 8000ece:	4914      	ldr	r1, [pc, #80]	; (8000f20 <main+0x64>)
 8000ed0:	4814      	ldr	r0, [pc, #80]	; (8000f24 <main+0x68>)
 8000ed2:	f000 f8b9 	bl	8001048 <parser>

	  Time      = atof(&Array[1][0]);
 8000ed6:	4814      	ldr	r0, [pc, #80]	; (8000f28 <main+0x6c>)
 8000ed8:	f000 ff58 	bl	8001d8c <atof>
 8000edc:	eeb0 7a40 	vmov.f32	s14, s0
 8000ee0:	eef0 7a60 	vmov.f32	s15, s1
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <main+0x70>)
 8000ee6:	ed83 7b00 	vstr	d7, [r3]
	  Latitude  = atof(&Array[2][0]);
 8000eea:	4811      	ldr	r0, [pc, #68]	; (8000f30 <main+0x74>)
 8000eec:	f000 ff4e 	bl	8001d8c <atof>
 8000ef0:	eeb0 7a40 	vmov.f32	s14, s0
 8000ef4:	eef0 7a60 	vmov.f32	s15, s1
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <main+0x78>)
 8000efa:	ed83 7b00 	vstr	d7, [r3]
	  Longitude = atof(&Array[4][0]);
 8000efe:	480e      	ldr	r0, [pc, #56]	; (8000f38 <main+0x7c>)
 8000f00:	f000 ff44 	bl	8001d8c <atof>
 8000f04:	eeb0 7a40 	vmov.f32	s14, s0
 8000f08:	eef0 7a60 	vmov.f32	s15, s1
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <main+0x80>)
 8000f0e:	ed83 7b00 	vstr	d7, [r3]

	  HAL_Delay(100);
 8000f12:	2064      	movs	r0, #100	; 0x64
 8000f14:	f000 fa04 	bl	8001320 <HAL_Delay>
  {
 8000f18:	e7d8      	b.n	8000ecc <main+0x10>
 8000f1a:	bf00      	nop
 8000f1c:	20000048 	.word	0x20000048
 8000f20:	20000250 	.word	0x20000250
 8000f24:	20000000 	.word	0x20000000
 8000f28:	2000025b 	.word	0x2000025b
 8000f2c:	20000308 	.word	0x20000308
 8000f30:	20000266 	.word	0x20000266
 8000f34:	200002f8 	.word	0x200002f8
 8000f38:	2000027c 	.word	0x2000027c
 8000f3c:	20000300 	.word	0x20000300

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b094      	sub	sp, #80	; 0x50
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	2230      	movs	r2, #48	; 0x30
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 ff4a 	bl	8001de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	4b28      	ldr	r3, [pc, #160]	; (800100c <SystemClock_Config+0xcc>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	4a27      	ldr	r2, [pc, #156]	; (800100c <SystemClock_Config+0xcc>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f72:	6413      	str	r3, [r2, #64]	; 0x40
 8000f74:	4b25      	ldr	r3, [pc, #148]	; (800100c <SystemClock_Config+0xcc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <SystemClock_Config+0xd0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a21      	ldr	r2, [pc, #132]	; (8001010 <SystemClock_Config+0xd0>)
 8000f8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <SystemClock_Config+0xd0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000faa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fb4:	23a8      	movs	r3, #168	; 0xa8
 8000fb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc0:	f107 0320 	add.w	r3, r7, #32
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fab3 	bl	8001530 <HAL_RCC_OscConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fd0:	f000 f867 	bl	80010a2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fe4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2105      	movs	r1, #5
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fd0c 	bl	8001a10 <HAL_RCC_ClockConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ffe:	f000 f850 	bl	80010a2 <Error_Handler>
  }
}
 8001002:	bf00      	nop
 8001004:	3750      	adds	r7, #80	; 0x50
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40007000 	.word	0x40007000

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_GPIO_Init+0x30>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <MX_GPIO_Init+0x30>)
 8001024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_GPIO_Init+0x30>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <parser>:

/* USER CODE BEGIN 4 */
int parser(char *str, char *Array, char *delim)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
	char i=0;
 8001054:	2300      	movs	r3, #0
 8001056:	75fb      	strb	r3, [r7, #23]

	char *ptr = strtok(str, delim);
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f001 fd10 	bl	8002a80 <strtok>
 8001060:	4603      	mov	r3, r0
 8001062:	613b      	str	r3, [r7, #16]

	while(ptr != NULL)
 8001064:	e015      	b.n	8001092 <parser+0x4a>
	{
		sprintf(Array+(i*11),ptr);
 8001066:	7dfa      	ldrb	r2, [r7, #23]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	461a      	mov	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4413      	add	r3, r2
 8001078:	6939      	ldr	r1, [r7, #16]
 800107a:	4618      	mov	r0, r3
 800107c:	f000 febc 	bl	8001df8 <siprintf>
		ptr = strtok(NULL, delim);
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	2000      	movs	r0, #0
 8001084:	f001 fcfc 	bl	8002a80 <strtok>
 8001088:	4603      	mov	r3, r0
 800108a:	613b      	str	r3, [r7, #16]
		i++;
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	3301      	adds	r3, #1
 8001090:	75fb      	strb	r3, [r7, #23]
	while(ptr != NULL)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1e6      	bne.n	8001066 <parser+0x1e>
	}

	return 0;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a6:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x6>
	...

080010ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <HAL_MspInit+0x4c>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <HAL_MspInit+0x4c>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_MspInit+0x4c>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_MspInit+0x4c>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <HAL_MspInit+0x4c>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_MspInit+0x4c>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <NMI_Handler+0x4>

08001102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <MemManage_Handler+0x4>

0800110e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler+0x4>

0800111a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001148:	f000 f8ca 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <_sbrk+0x5c>)
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <_sbrk+0x60>)
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <_sbrk+0x64>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <_sbrk+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	429a      	cmp	r2, r3
 800117e:	d207      	bcs.n	8001190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001180:	f000 fe08 	bl	8001d94 <__errno>
 8001184:	4602      	mov	r2, r0
 8001186:	230c      	movs	r3, #12
 8001188:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e009      	b.n	80011a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_sbrk+0x64>)
 80011a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20020000 	.word	0x20020000
 80011b0:	00000400 	.word	0x00000400
 80011b4:	20000244 	.word	0x20000244
 80011b8:	20000318 	.word	0x20000318

080011bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <SystemInit+0x28>)
 80011c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c6:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <SystemInit+0x28>)
 80011c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SystemInit+0x28>)
 80011d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011d6:	609a      	str	r2, [r3, #8]
#endif
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001220 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011ee:	e003      	b.n	80011f8 <LoopCopyDataInit>

080011f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011f6:	3104      	adds	r1, #4

080011f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011f8:	480b      	ldr	r0, [pc, #44]	; (8001228 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001200:	d3f6      	bcc.n	80011f0 <CopyDataInit>
  ldr  r2, =_sbss
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001204:	e002      	b.n	800120c <LoopFillZerobss>

08001206 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001206:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001208:	f842 3b04 	str.w	r3, [r2], #4

0800120c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800120e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001210:	d3f9      	bcc.n	8001206 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001212:	f7ff ffd3 	bl	80011bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001216:	f000 fdc3 	bl	8001da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121a:	f7ff fe4f 	bl	8000ebc <main>
  bx  lr    
 800121e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001220:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001224:	080044a8 	.word	0x080044a8
  ldr  r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800122c:	20000228 	.word	0x20000228
  ldr  r2, =_sbss
 8001230:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 8001234:	20000318 	.word	0x20000318

08001238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC_IRQHandler>
	...

0800123c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <HAL_Init+0x40>)
 8001246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0a      	ldr	r2, [pc, #40]	; (800127c <HAL_Init+0x40>)
 8001252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a07      	ldr	r2, [pc, #28]	; (800127c <HAL_Init+0x40>)
 800125e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001264:	2003      	movs	r0, #3
 8001266:	f000 f92f 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126a:	2000      	movs	r0, #0
 800126c:	f000 f808 	bl	8001280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001270:	f7ff ff1c 	bl	80010ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023c00 	.word	0x40023c00

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_InitTick+0x54>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_InitTick+0x58>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	fbb3 f3f1 	udiv	r3, r3, r1
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f939 	bl	8001516 <HAL_SYSTICK_Config>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00e      	b.n	80012cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d80a      	bhi.n	80012ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f000 f90f 	bl	80014de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c0:	4a06      	ldr	r2, [pc, #24]	; (80012dc <HAL_InitTick+0x5c>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e000      	b.n	80012cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000004c 	.word	0x2000004c
 80012d8:	20000054 	.word	0x20000054
 80012dc:	20000050 	.word	0x20000050

080012e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_IncTick+0x20>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_IncTick+0x24>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <HAL_IncTick+0x24>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000054 	.word	0x20000054
 8001304:	20000310 	.word	0x20000310

08001308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <HAL_GetTick+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000310 	.word	0x20000310

08001320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff ffee 	bl	8001308 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d005      	beq.n	8001346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_Delay+0x40>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001346:	bf00      	nop
 8001348:	f7ff ffde 	bl	8001308 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8f7      	bhi.n	8001348 <HAL_Delay+0x28>
  {
  }
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000054 	.word	0x20000054

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800138c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db0a      	blt.n	80013f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	490c      	ldr	r1, [pc, #48]	; (8001414 <__NVIC_SetPriority+0x4c>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	440b      	add	r3, r1
 80013ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f0:	e00a      	b.n	8001408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4908      	ldr	r1, [pc, #32]	; (8001418 <__NVIC_SetPriority+0x50>)
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	3b04      	subs	r3, #4
 8001400:	0112      	lsls	r2, r2, #4
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	440b      	add	r3, r1
 8001406:	761a      	strb	r2, [r3, #24]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f1c3 0307 	rsb	r3, r3, #7
 8001436:	2b04      	cmp	r3, #4
 8001438:	bf28      	it	cs
 800143a:	2304      	movcs	r3, #4
 800143c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3304      	adds	r3, #4
 8001442:	2b06      	cmp	r3, #6
 8001444:	d902      	bls.n	800144c <NVIC_EncodePriority+0x30>
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3b03      	subs	r3, #3
 800144a:	e000      	b.n	800144e <NVIC_EncodePriority+0x32>
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	f04f 32ff 	mov.w	r2, #4294967295
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	401a      	ands	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001464:	f04f 31ff 	mov.w	r1, #4294967295
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	43d9      	mvns	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	4313      	orrs	r3, r2
         );
}
 8001476:	4618      	mov	r0, r3
 8001478:	3724      	adds	r7, #36	; 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001494:	d301      	bcc.n	800149a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001496:	2301      	movs	r3, #1
 8001498:	e00f      	b.n	80014ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <SysTick_Config+0x40>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a2:	210f      	movs	r1, #15
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f7ff ff8e 	bl	80013c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SysTick_Config+0x40>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <SysTick_Config+0x40>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff47 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff5c 	bl	80013ac <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff8e 	bl	800141c <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff5d 	bl	80013c8 <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffb0 	bl	8001484 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e25b      	b.n	80019fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d075      	beq.n	800163a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800154e:	4ba3      	ldr	r3, [pc, #652]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b04      	cmp	r3, #4
 8001558:	d00c      	beq.n	8001574 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800155a:	4ba0      	ldr	r3, [pc, #640]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001562:	2b08      	cmp	r3, #8
 8001564:	d112      	bne.n	800158c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001566:	4b9d      	ldr	r3, [pc, #628]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001572:	d10b      	bne.n	800158c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001574:	4b99      	ldr	r3, [pc, #612]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d05b      	beq.n	8001638 <HAL_RCC_OscConfig+0x108>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d157      	bne.n	8001638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e236      	b.n	80019fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001594:	d106      	bne.n	80015a4 <HAL_RCC_OscConfig+0x74>
 8001596:	4b91      	ldr	r3, [pc, #580]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a90      	ldr	r2, [pc, #576]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 800159c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e01d      	b.n	80015e0 <HAL_RCC_OscConfig+0xb0>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x98>
 80015ae:	4b8b      	ldr	r3, [pc, #556]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a8a      	ldr	r2, [pc, #552]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b88      	ldr	r3, [pc, #544]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a87      	ldr	r2, [pc, #540]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e00b      	b.n	80015e0 <HAL_RCC_OscConfig+0xb0>
 80015c8:	4b84      	ldr	r3, [pc, #528]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a83      	ldr	r2, [pc, #524]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 80015ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b81      	ldr	r3, [pc, #516]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a80      	ldr	r2, [pc, #512]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 80015da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d013      	beq.n	8001610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fe8e 	bl	8001308 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fe8a 	bl	8001308 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e1fb      	b.n	80019fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	4b76      	ldr	r3, [pc, #472]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0xc0>
 800160e:	e014      	b.n	800163a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fe7a 	bl	8001308 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff fe76 	bl	8001308 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	; 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e1e7      	b.n	80019fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162a:	4b6c      	ldr	r3, [pc, #432]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0xe8>
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d063      	beq.n	800170e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001646:	4b65      	ldr	r3, [pc, #404]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00b      	beq.n	800166a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001652:	4b62      	ldr	r3, [pc, #392]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800165a:	2b08      	cmp	r3, #8
 800165c:	d11c      	bne.n	8001698 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165e:	4b5f      	ldr	r3, [pc, #380]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d116      	bne.n	8001698 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166a:	4b5c      	ldr	r3, [pc, #368]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d005      	beq.n	8001682 <HAL_RCC_OscConfig+0x152>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d001      	beq.n	8001682 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e1bb      	b.n	80019fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001682:	4b56      	ldr	r3, [pc, #344]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4952      	ldr	r1, [pc, #328]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001696:	e03a      	b.n	800170e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d020      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a0:	4b4f      	ldr	r3, [pc, #316]	; (80017e0 <HAL_RCC_OscConfig+0x2b0>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a6:	f7ff fe2f 	bl	8001308 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ae:	f7ff fe2b 	bl	8001308 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e19c      	b.n	80019fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c0:	4b46      	ldr	r3, [pc, #280]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016cc:	4b43      	ldr	r3, [pc, #268]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4940      	ldr	r1, [pc, #256]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	600b      	str	r3, [r1, #0]
 80016e0:	e015      	b.n	800170e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e2:	4b3f      	ldr	r3, [pc, #252]	; (80017e0 <HAL_RCC_OscConfig+0x2b0>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fe0e 	bl	8001308 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f0:	f7ff fe0a 	bl	8001308 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e17b      	b.n	80019fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001702:	4b36      	ldr	r3, [pc, #216]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d030      	beq.n	800177c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d016      	beq.n	8001750 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001722:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <HAL_RCC_OscConfig+0x2b4>)
 8001724:	2201      	movs	r2, #1
 8001726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff fdee 	bl	8001308 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff fdea 	bl	8001308 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e15b      	b.n	80019fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001742:	4b26      	ldr	r3, [pc, #152]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 8001744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x200>
 800174e:	e015      	b.n	800177c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001750:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <HAL_RCC_OscConfig+0x2b4>)
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7ff fdd7 	bl	8001308 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800175e:	f7ff fdd3 	bl	8001308 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e144      	b.n	80019fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001770:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 8001772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f0      	bne.n	800175e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 80a0 	beq.w	80018ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178a:	2300      	movs	r3, #0
 800178c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10f      	bne.n	80017ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_RCC_OscConfig+0x2ac>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b6:	2301      	movs	r3, #1
 80017b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_RCC_OscConfig+0x2b8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d121      	bne.n	800180a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_RCC_OscConfig+0x2b8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_RCC_OscConfig+0x2b8>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d2:	f7ff fd99 	bl	8001308 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d8:	e011      	b.n	80017fe <HAL_RCC_OscConfig+0x2ce>
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	42470000 	.word	0x42470000
 80017e4:	42470e80 	.word	0x42470e80
 80017e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ec:	f7ff fd8c 	bl	8001308 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e0fd      	b.n	80019fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fe:	4b81      	ldr	r3, [pc, #516]	; (8001a04 <HAL_RCC_OscConfig+0x4d4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d106      	bne.n	8001820 <HAL_RCC_OscConfig+0x2f0>
 8001812:	4b7d      	ldr	r3, [pc, #500]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001816:	4a7c      	ldr	r2, [pc, #496]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6713      	str	r3, [r2, #112]	; 0x70
 800181e:	e01c      	b.n	800185a <HAL_RCC_OscConfig+0x32a>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b05      	cmp	r3, #5
 8001826:	d10c      	bne.n	8001842 <HAL_RCC_OscConfig+0x312>
 8001828:	4b77      	ldr	r3, [pc, #476]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 800182a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182c:	4a76      	ldr	r2, [pc, #472]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	6713      	str	r3, [r2, #112]	; 0x70
 8001834:	4b74      	ldr	r3, [pc, #464]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 8001836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001838:	4a73      	ldr	r2, [pc, #460]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6713      	str	r3, [r2, #112]	; 0x70
 8001840:	e00b      	b.n	800185a <HAL_RCC_OscConfig+0x32a>
 8001842:	4b71      	ldr	r3, [pc, #452]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 8001844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001846:	4a70      	ldr	r2, [pc, #448]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	6713      	str	r3, [r2, #112]	; 0x70
 800184e:	4b6e      	ldr	r3, [pc, #440]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 8001850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001852:	4a6d      	ldr	r2, [pc, #436]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 8001854:	f023 0304 	bic.w	r3, r3, #4
 8001858:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d015      	beq.n	800188e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001862:	f7ff fd51 	bl	8001308 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001868:	e00a      	b.n	8001880 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186a:	f7ff fd4d 	bl	8001308 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	f241 3288 	movw	r2, #5000	; 0x1388
 8001878:	4293      	cmp	r3, r2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e0bc      	b.n	80019fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001880:	4b61      	ldr	r3, [pc, #388]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 8001882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0ee      	beq.n	800186a <HAL_RCC_OscConfig+0x33a>
 800188c:	e014      	b.n	80018b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188e:	f7ff fd3b 	bl	8001308 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001894:	e00a      	b.n	80018ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7ff fd37 	bl	8001308 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e0a6      	b.n	80019fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ac:	4b56      	ldr	r3, [pc, #344]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1ee      	bne.n	8001896 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d105      	bne.n	80018ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018be:	4b52      	ldr	r3, [pc, #328]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a51      	ldr	r2, [pc, #324]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 80018c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8092 	beq.w	80019f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018d4:	4b4c      	ldr	r3, [pc, #304]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d05c      	beq.n	800199a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d141      	bne.n	800196c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e8:	4b48      	ldr	r3, [pc, #288]	; (8001a0c <HAL_RCC_OscConfig+0x4dc>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7ff fd0b 	bl	8001308 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f6:	f7ff fd07 	bl	8001308 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e078      	b.n	80019fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001908:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f0      	bne.n	80018f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69da      	ldr	r2, [r3, #28]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	019b      	lsls	r3, r3, #6
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	085b      	lsrs	r3, r3, #1
 800192c:	3b01      	subs	r3, #1
 800192e:	041b      	lsls	r3, r3, #16
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	061b      	lsls	r3, r3, #24
 8001938:	4933      	ldr	r1, [pc, #204]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 800193a:	4313      	orrs	r3, r2
 800193c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800193e:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <HAL_RCC_OscConfig+0x4dc>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fce0 	bl	8001308 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff fcdc 	bl	8001308 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e04d      	b.n	80019fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x41c>
 800196a:	e045      	b.n	80019f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196c:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_RCC_OscConfig+0x4dc>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001972:	f7ff fcc9 	bl	8001308 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197a:	f7ff fcc5 	bl	8001308 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e036      	b.n	80019fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198c:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f0      	bne.n	800197a <HAL_RCC_OscConfig+0x44a>
 8001998:	e02e      	b.n	80019f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e029      	b.n	80019fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_RCC_OscConfig+0x4d8>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d11c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d115      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019ce:	4013      	ands	r3, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d10d      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d106      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40007000 	.word	0x40007000
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	42470060 	.word	0x42470060

08001a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0cc      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a24:	4b68      	ldr	r3, [pc, #416]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d90c      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b65      	ldr	r3, [pc, #404]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0b8      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a64:	4b59      	ldr	r3, [pc, #356]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a7c:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a52      	ldr	r2, [pc, #328]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	494d      	ldr	r1, [pc, #308]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d044      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d119      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e07f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ace:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e06f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e067      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aee:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f023 0203 	bic.w	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4934      	ldr	r1, [pc, #208]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b00:	f7ff fc02 	bl	8001308 <HAL_GetTick>
 8001b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b08:	f7ff fbfe 	bl	8001308 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e04f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 020c 	and.w	r2, r3, #12
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1eb      	bne.n	8001b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d20c      	bcs.n	8001b58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e032      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4916      	ldr	r1, [pc, #88]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	490e      	ldr	r1, [pc, #56]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b96:	f000 f821 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8001b9a:	4601      	mov	r1, r0
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	5cd3      	ldrb	r3, [r2, r3]
 8001baa:	fa21 f303 	lsr.w	r3, r1, r3
 8001bae:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fb62 	bl	8001280 <HAL_InitTick>

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023c00 	.word	0x40023c00
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	080041e8 	.word	0x080041e8
 8001bd4:	2000004c 	.word	0x2000004c
 8001bd8:	20000050 	.word	0x20000050

08001bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	2300      	movs	r3, #0
 8001bec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf2:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d007      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x32>
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d008      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x38>
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f040 80b4 	bne.w	8001d70 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c08:	4b5e      	ldr	r3, [pc, #376]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c0a:	60bb      	str	r3, [r7, #8]
       break;
 8001c0c:	e0b3      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c0e:	4b5e      	ldr	r3, [pc, #376]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001c10:	60bb      	str	r3, [r7, #8]
      break;
 8001c12:	e0b0      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c14:	4b5a      	ldr	r3, [pc, #360]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c1e:	4b58      	ldr	r3, [pc, #352]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d04a      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2a:	4b55      	ldr	r3, [pc, #340]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	099b      	lsrs	r3, r3, #6
 8001c30:	f04f 0400 	mov.w	r4, #0
 8001c34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	ea03 0501 	and.w	r5, r3, r1
 8001c40:	ea04 0602 	and.w	r6, r4, r2
 8001c44:	4629      	mov	r1, r5
 8001c46:	4632      	mov	r2, r6
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	f04f 0400 	mov.w	r4, #0
 8001c50:	0154      	lsls	r4, r2, #5
 8001c52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c56:	014b      	lsls	r3, r1, #5
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4622      	mov	r2, r4
 8001c5c:	1b49      	subs	r1, r1, r5
 8001c5e:	eb62 0206 	sbc.w	r2, r2, r6
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	f04f 0400 	mov.w	r4, #0
 8001c6a:	0194      	lsls	r4, r2, #6
 8001c6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c70:	018b      	lsls	r3, r1, #6
 8001c72:	1a5b      	subs	r3, r3, r1
 8001c74:	eb64 0402 	sbc.w	r4, r4, r2
 8001c78:	f04f 0100 	mov.w	r1, #0
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	00e2      	lsls	r2, r4, #3
 8001c82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c86:	00d9      	lsls	r1, r3, #3
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4614      	mov	r4, r2
 8001c8c:	195b      	adds	r3, r3, r5
 8001c8e:	eb44 0406 	adc.w	r4, r4, r6
 8001c92:	f04f 0100 	mov.w	r1, #0
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	0262      	lsls	r2, r4, #9
 8001c9c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ca0:	0259      	lsls	r1, r3, #9
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4614      	mov	r4, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	4621      	mov	r1, r4
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f04f 0400 	mov.w	r4, #0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	f7fe ff82 	bl	8000bbc <__aeabi_uldivmod>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	460c      	mov	r4, r1
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	e049      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	099b      	lsrs	r3, r3, #6
 8001cc6:	f04f 0400 	mov.w	r4, #0
 8001cca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	ea03 0501 	and.w	r5, r3, r1
 8001cd6:	ea04 0602 	and.w	r6, r4, r2
 8001cda:	4629      	mov	r1, r5
 8001cdc:	4632      	mov	r2, r6
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	f04f 0400 	mov.w	r4, #0
 8001ce6:	0154      	lsls	r4, r2, #5
 8001ce8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cec:	014b      	lsls	r3, r1, #5
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4622      	mov	r2, r4
 8001cf2:	1b49      	subs	r1, r1, r5
 8001cf4:	eb62 0206 	sbc.w	r2, r2, r6
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	f04f 0400 	mov.w	r4, #0
 8001d00:	0194      	lsls	r4, r2, #6
 8001d02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d06:	018b      	lsls	r3, r1, #6
 8001d08:	1a5b      	subs	r3, r3, r1
 8001d0a:	eb64 0402 	sbc.w	r4, r4, r2
 8001d0e:	f04f 0100 	mov.w	r1, #0
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	00e2      	lsls	r2, r4, #3
 8001d18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d1c:	00d9      	lsls	r1, r3, #3
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4614      	mov	r4, r2
 8001d22:	195b      	adds	r3, r3, r5
 8001d24:	eb44 0406 	adc.w	r4, r4, r6
 8001d28:	f04f 0100 	mov.w	r1, #0
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	02a2      	lsls	r2, r4, #10
 8001d32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d36:	0299      	lsls	r1, r3, #10
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4614      	mov	r4, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	4621      	mov	r1, r4
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f04f 0400 	mov.w	r4, #0
 8001d46:	461a      	mov	r2, r3
 8001d48:	4623      	mov	r3, r4
 8001d4a:	f7fe ff37 	bl	8000bbc <__aeabi_uldivmod>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	460c      	mov	r4, r1
 8001d52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6c:	60bb      	str	r3, [r7, #8]
      break;
 8001d6e:	e002      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d72:	60bb      	str	r3, [r7, #8]
      break;
 8001d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d76:	68bb      	ldr	r3, [r7, #8]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	00f42400 	.word	0x00f42400
 8001d88:	007a1200 	.word	0x007a1200

08001d8c <atof>:
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	f000 be63 	b.w	8002a58 <strtod>
	...

08001d94 <__errno>:
 8001d94:	4b01      	ldr	r3, [pc, #4]	; (8001d9c <__errno+0x8>)
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000058 	.word	0x20000058

08001da0 <__libc_init_array>:
 8001da0:	b570      	push	{r4, r5, r6, lr}
 8001da2:	4e0d      	ldr	r6, [pc, #52]	; (8001dd8 <__libc_init_array+0x38>)
 8001da4:	4c0d      	ldr	r4, [pc, #52]	; (8001ddc <__libc_init_array+0x3c>)
 8001da6:	1ba4      	subs	r4, r4, r6
 8001da8:	10a4      	asrs	r4, r4, #2
 8001daa:	2500      	movs	r5, #0
 8001dac:	42a5      	cmp	r5, r4
 8001dae:	d109      	bne.n	8001dc4 <__libc_init_array+0x24>
 8001db0:	4e0b      	ldr	r6, [pc, #44]	; (8001de0 <__libc_init_array+0x40>)
 8001db2:	4c0c      	ldr	r4, [pc, #48]	; (8001de4 <__libc_init_array+0x44>)
 8001db4:	f002 fa0c 	bl	80041d0 <_init>
 8001db8:	1ba4      	subs	r4, r4, r6
 8001dba:	10a4      	asrs	r4, r4, #2
 8001dbc:	2500      	movs	r5, #0
 8001dbe:	42a5      	cmp	r5, r4
 8001dc0:	d105      	bne.n	8001dce <__libc_init_array+0x2e>
 8001dc2:	bd70      	pop	{r4, r5, r6, pc}
 8001dc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dc8:	4798      	blx	r3
 8001dca:	3501      	adds	r5, #1
 8001dcc:	e7ee      	b.n	8001dac <__libc_init_array+0xc>
 8001dce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dd2:	4798      	blx	r3
 8001dd4:	3501      	adds	r5, #1
 8001dd6:	e7f2      	b.n	8001dbe <__libc_init_array+0x1e>
 8001dd8:	080044a0 	.word	0x080044a0
 8001ddc:	080044a0 	.word	0x080044a0
 8001de0:	080044a0 	.word	0x080044a0
 8001de4:	080044a4 	.word	0x080044a4

08001de8 <memset>:
 8001de8:	4402      	add	r2, r0
 8001dea:	4603      	mov	r3, r0
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d100      	bne.n	8001df2 <memset+0xa>
 8001df0:	4770      	bx	lr
 8001df2:	f803 1b01 	strb.w	r1, [r3], #1
 8001df6:	e7f9      	b.n	8001dec <memset+0x4>

08001df8 <siprintf>:
 8001df8:	b40e      	push	{r1, r2, r3}
 8001dfa:	b500      	push	{lr}
 8001dfc:	b09c      	sub	sp, #112	; 0x70
 8001dfe:	ab1d      	add	r3, sp, #116	; 0x74
 8001e00:	9002      	str	r0, [sp, #8]
 8001e02:	9006      	str	r0, [sp, #24]
 8001e04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001e08:	4809      	ldr	r0, [pc, #36]	; (8001e30 <siprintf+0x38>)
 8001e0a:	9107      	str	r1, [sp, #28]
 8001e0c:	9104      	str	r1, [sp, #16]
 8001e0e:	4909      	ldr	r1, [pc, #36]	; (8001e34 <siprintf+0x3c>)
 8001e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e14:	9105      	str	r1, [sp, #20]
 8001e16:	6800      	ldr	r0, [r0, #0]
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	a902      	add	r1, sp, #8
 8001e1c:	f001 fee0 	bl	8003be0 <_svfiprintf_r>
 8001e20:	9b02      	ldr	r3, [sp, #8]
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
 8001e26:	b01c      	add	sp, #112	; 0x70
 8001e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e2c:	b003      	add	sp, #12
 8001e2e:	4770      	bx	lr
 8001e30:	20000058 	.word	0x20000058
 8001e34:	ffff0208 	.word	0xffff0208

08001e38 <sulp>:
 8001e38:	b570      	push	{r4, r5, r6, lr}
 8001e3a:	4604      	mov	r4, r0
 8001e3c:	460d      	mov	r5, r1
 8001e3e:	ec45 4b10 	vmov	d0, r4, r5
 8001e42:	4616      	mov	r6, r2
 8001e44:	f001 fc88 	bl	8003758 <__ulp>
 8001e48:	ec51 0b10 	vmov	r0, r1, d0
 8001e4c:	b17e      	cbz	r6, 8001e6e <sulp+0x36>
 8001e4e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8001e52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	dd09      	ble.n	8001e6e <sulp+0x36>
 8001e5a:	051b      	lsls	r3, r3, #20
 8001e5c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8001e60:	2400      	movs	r4, #0
 8001e62:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8001e66:	4622      	mov	r2, r4
 8001e68:	462b      	mov	r3, r5
 8001e6a:	f7fe fbc5 	bl	80005f8 <__aeabi_dmul>
 8001e6e:	bd70      	pop	{r4, r5, r6, pc}

08001e70 <_strtod_l>:
 8001e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e74:	461f      	mov	r7, r3
 8001e76:	b0a1      	sub	sp, #132	; 0x84
 8001e78:	2300      	movs	r3, #0
 8001e7a:	4681      	mov	r9, r0
 8001e7c:	4638      	mov	r0, r7
 8001e7e:	460e      	mov	r6, r1
 8001e80:	9217      	str	r2, [sp, #92]	; 0x5c
 8001e82:	931c      	str	r3, [sp, #112]	; 0x70
 8001e84:	f001 f976 	bl	8003174 <__localeconv_l>
 8001e88:	4680      	mov	r8, r0
 8001e8a:	6800      	ldr	r0, [r0, #0]
 8001e8c:	f7fe f9a0 	bl	80001d0 <strlen>
 8001e90:	f04f 0a00 	mov.w	sl, #0
 8001e94:	4604      	mov	r4, r0
 8001e96:	f04f 0b00 	mov.w	fp, #0
 8001e9a:	961b      	str	r6, [sp, #108]	; 0x6c
 8001e9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001e9e:	781a      	ldrb	r2, [r3, #0]
 8001ea0:	2a0d      	cmp	r2, #13
 8001ea2:	d832      	bhi.n	8001f0a <_strtod_l+0x9a>
 8001ea4:	2a09      	cmp	r2, #9
 8001ea6:	d236      	bcs.n	8001f16 <_strtod_l+0xa6>
 8001ea8:	2a00      	cmp	r2, #0
 8001eaa:	d03e      	beq.n	8001f2a <_strtod_l+0xba>
 8001eac:	2300      	movs	r3, #0
 8001eae:	930d      	str	r3, [sp, #52]	; 0x34
 8001eb0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001eb2:	782b      	ldrb	r3, [r5, #0]
 8001eb4:	2b30      	cmp	r3, #48	; 0x30
 8001eb6:	f040 80ac 	bne.w	8002012 <_strtod_l+0x1a2>
 8001eba:	786b      	ldrb	r3, [r5, #1]
 8001ebc:	2b58      	cmp	r3, #88	; 0x58
 8001ebe:	d001      	beq.n	8001ec4 <_strtod_l+0x54>
 8001ec0:	2b78      	cmp	r3, #120	; 0x78
 8001ec2:	d167      	bne.n	8001f94 <_strtod_l+0x124>
 8001ec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	ab1c      	add	r3, sp, #112	; 0x70
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	9702      	str	r7, [sp, #8]
 8001ece:	ab1d      	add	r3, sp, #116	; 0x74
 8001ed0:	4a88      	ldr	r2, [pc, #544]	; (80020f4 <_strtod_l+0x284>)
 8001ed2:	a91b      	add	r1, sp, #108	; 0x6c
 8001ed4:	4648      	mov	r0, r9
 8001ed6:	f000 fe76 	bl	8002bc6 <__gethex>
 8001eda:	f010 0407 	ands.w	r4, r0, #7
 8001ede:	4606      	mov	r6, r0
 8001ee0:	d005      	beq.n	8001eee <_strtod_l+0x7e>
 8001ee2:	2c06      	cmp	r4, #6
 8001ee4:	d12b      	bne.n	8001f3e <_strtod_l+0xce>
 8001ee6:	3501      	adds	r5, #1
 8001ee8:	2300      	movs	r3, #0
 8001eea:	951b      	str	r5, [sp, #108]	; 0x6c
 8001eec:	930d      	str	r3, [sp, #52]	; 0x34
 8001eee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f040 859a 	bne.w	8002a2a <_strtod_l+0xbba>
 8001ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001ef8:	b1e3      	cbz	r3, 8001f34 <_strtod_l+0xc4>
 8001efa:	4652      	mov	r2, sl
 8001efc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8001f00:	ec43 2b10 	vmov	d0, r2, r3
 8001f04:	b021      	add	sp, #132	; 0x84
 8001f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f0a:	2a2b      	cmp	r2, #43	; 0x2b
 8001f0c:	d015      	beq.n	8001f3a <_strtod_l+0xca>
 8001f0e:	2a2d      	cmp	r2, #45	; 0x2d
 8001f10:	d004      	beq.n	8001f1c <_strtod_l+0xac>
 8001f12:	2a20      	cmp	r2, #32
 8001f14:	d1ca      	bne.n	8001eac <_strtod_l+0x3c>
 8001f16:	3301      	adds	r3, #1
 8001f18:	931b      	str	r3, [sp, #108]	; 0x6c
 8001f1a:	e7bf      	b.n	8001e9c <_strtod_l+0x2c>
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	920d      	str	r2, [sp, #52]	; 0x34
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	921b      	str	r2, [sp, #108]	; 0x6c
 8001f24:	785b      	ldrb	r3, [r3, #1]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1c2      	bne.n	8001eb0 <_strtod_l+0x40>
 8001f2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001f2c:	961b      	str	r6, [sp, #108]	; 0x6c
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f040 8579 	bne.w	8002a26 <_strtod_l+0xbb6>
 8001f34:	4652      	mov	r2, sl
 8001f36:	465b      	mov	r3, fp
 8001f38:	e7e2      	b.n	8001f00 <_strtod_l+0x90>
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	e7ef      	b.n	8001f1e <_strtod_l+0xae>
 8001f3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001f40:	b13a      	cbz	r2, 8001f52 <_strtod_l+0xe2>
 8001f42:	2135      	movs	r1, #53	; 0x35
 8001f44:	a81e      	add	r0, sp, #120	; 0x78
 8001f46:	f001 fcff 	bl	8003948 <__copybits>
 8001f4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001f4c:	4648      	mov	r0, r9
 8001f4e:	f001 f96c 	bl	800322a <_Bfree>
 8001f52:	3c01      	subs	r4, #1
 8001f54:	2c04      	cmp	r4, #4
 8001f56:	d806      	bhi.n	8001f66 <_strtod_l+0xf6>
 8001f58:	e8df f004 	tbb	[pc, r4]
 8001f5c:	1714030a 	.word	0x1714030a
 8001f60:	0a          	.byte	0x0a
 8001f61:	00          	.byte	0x00
 8001f62:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8001f66:	0730      	lsls	r0, r6, #28
 8001f68:	d5c1      	bpl.n	8001eee <_strtod_l+0x7e>
 8001f6a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8001f6e:	e7be      	b.n	8001eee <_strtod_l+0x7e>
 8001f70:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8001f74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001f76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f7a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8001f7e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8001f82:	e7f0      	b.n	8001f66 <_strtod_l+0xf6>
 8001f84:	f8df b170 	ldr.w	fp, [pc, #368]	; 80020f8 <_strtod_l+0x288>
 8001f88:	e7ed      	b.n	8001f66 <_strtod_l+0xf6>
 8001f8a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8001f8e:	f04f 3aff 	mov.w	sl, #4294967295
 8001f92:	e7e8      	b.n	8001f66 <_strtod_l+0xf6>
 8001f94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	921b      	str	r2, [sp, #108]	; 0x6c
 8001f9a:	785b      	ldrb	r3, [r3, #1]
 8001f9c:	2b30      	cmp	r3, #48	; 0x30
 8001f9e:	d0f9      	beq.n	8001f94 <_strtod_l+0x124>
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0a4      	beq.n	8001eee <_strtod_l+0x7e>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	2500      	movs	r5, #0
 8001fa8:	9306      	str	r3, [sp, #24]
 8001faa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001fac:	9308      	str	r3, [sp, #32]
 8001fae:	9507      	str	r5, [sp, #28]
 8001fb0:	9505      	str	r5, [sp, #20]
 8001fb2:	220a      	movs	r2, #10
 8001fb4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001fb6:	7807      	ldrb	r7, [r0, #0]
 8001fb8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8001fbc:	b2d9      	uxtb	r1, r3
 8001fbe:	2909      	cmp	r1, #9
 8001fc0:	d929      	bls.n	8002016 <_strtod_l+0x1a6>
 8001fc2:	4622      	mov	r2, r4
 8001fc4:	f8d8 1000 	ldr.w	r1, [r8]
 8001fc8:	f002 f89a 	bl	8004100 <strncmp>
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d031      	beq.n	8002034 <_strtod_l+0x1c4>
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	9c05      	ldr	r4, [sp, #20]
 8001fd4:	9004      	str	r0, [sp, #16]
 8001fd6:	463b      	mov	r3, r7
 8001fd8:	4602      	mov	r2, r0
 8001fda:	2b65      	cmp	r3, #101	; 0x65
 8001fdc:	d001      	beq.n	8001fe2 <_strtod_l+0x172>
 8001fde:	2b45      	cmp	r3, #69	; 0x45
 8001fe0:	d114      	bne.n	800200c <_strtod_l+0x19c>
 8001fe2:	b924      	cbnz	r4, 8001fee <_strtod_l+0x17e>
 8001fe4:	b910      	cbnz	r0, 8001fec <_strtod_l+0x17c>
 8001fe6:	9b06      	ldr	r3, [sp, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d09e      	beq.n	8001f2a <_strtod_l+0xba>
 8001fec:	2400      	movs	r4, #0
 8001fee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8001ff0:	1c73      	adds	r3, r6, #1
 8001ff2:	931b      	str	r3, [sp, #108]	; 0x6c
 8001ff4:	7873      	ldrb	r3, [r6, #1]
 8001ff6:	2b2b      	cmp	r3, #43	; 0x2b
 8001ff8:	d078      	beq.n	80020ec <_strtod_l+0x27c>
 8001ffa:	2b2d      	cmp	r3, #45	; 0x2d
 8001ffc:	d070      	beq.n	80020e0 <_strtod_l+0x270>
 8001ffe:	f04f 0c00 	mov.w	ip, #0
 8002002:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8002006:	2f09      	cmp	r7, #9
 8002008:	d97c      	bls.n	8002104 <_strtod_l+0x294>
 800200a:	961b      	str	r6, [sp, #108]	; 0x6c
 800200c:	f04f 0e00 	mov.w	lr, #0
 8002010:	e09a      	b.n	8002148 <_strtod_l+0x2d8>
 8002012:	2300      	movs	r3, #0
 8002014:	e7c7      	b.n	8001fa6 <_strtod_l+0x136>
 8002016:	9905      	ldr	r1, [sp, #20]
 8002018:	2908      	cmp	r1, #8
 800201a:	bfdd      	ittte	le
 800201c:	9907      	ldrle	r1, [sp, #28]
 800201e:	fb02 3301 	mlale	r3, r2, r1, r3
 8002022:	9307      	strle	r3, [sp, #28]
 8002024:	fb02 3505 	mlagt	r5, r2, r5, r3
 8002028:	9b05      	ldr	r3, [sp, #20]
 800202a:	3001      	adds	r0, #1
 800202c:	3301      	adds	r3, #1
 800202e:	9305      	str	r3, [sp, #20]
 8002030:	901b      	str	r0, [sp, #108]	; 0x6c
 8002032:	e7bf      	b.n	8001fb4 <_strtod_l+0x144>
 8002034:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002036:	191a      	adds	r2, r3, r4
 8002038:	921b      	str	r2, [sp, #108]	; 0x6c
 800203a:	9a05      	ldr	r2, [sp, #20]
 800203c:	5d1b      	ldrb	r3, [r3, r4]
 800203e:	2a00      	cmp	r2, #0
 8002040:	d037      	beq.n	80020b2 <_strtod_l+0x242>
 8002042:	9c05      	ldr	r4, [sp, #20]
 8002044:	4602      	mov	r2, r0
 8002046:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800204a:	2909      	cmp	r1, #9
 800204c:	d913      	bls.n	8002076 <_strtod_l+0x206>
 800204e:	2101      	movs	r1, #1
 8002050:	9104      	str	r1, [sp, #16]
 8002052:	e7c2      	b.n	8001fda <_strtod_l+0x16a>
 8002054:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	921b      	str	r2, [sp, #108]	; 0x6c
 800205a:	785b      	ldrb	r3, [r3, #1]
 800205c:	3001      	adds	r0, #1
 800205e:	2b30      	cmp	r3, #48	; 0x30
 8002060:	d0f8      	beq.n	8002054 <_strtod_l+0x1e4>
 8002062:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8002066:	2a08      	cmp	r2, #8
 8002068:	f200 84e4 	bhi.w	8002a34 <_strtod_l+0xbc4>
 800206c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800206e:	9208      	str	r2, [sp, #32]
 8002070:	4602      	mov	r2, r0
 8002072:	2000      	movs	r0, #0
 8002074:	4604      	mov	r4, r0
 8002076:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800207a:	f100 0101 	add.w	r1, r0, #1
 800207e:	d012      	beq.n	80020a6 <_strtod_l+0x236>
 8002080:	440a      	add	r2, r1
 8002082:	eb00 0c04 	add.w	ip, r0, r4
 8002086:	4621      	mov	r1, r4
 8002088:	270a      	movs	r7, #10
 800208a:	458c      	cmp	ip, r1
 800208c:	d113      	bne.n	80020b6 <_strtod_l+0x246>
 800208e:	1821      	adds	r1, r4, r0
 8002090:	2908      	cmp	r1, #8
 8002092:	f104 0401 	add.w	r4, r4, #1
 8002096:	4404      	add	r4, r0
 8002098:	dc19      	bgt.n	80020ce <_strtod_l+0x25e>
 800209a:	9b07      	ldr	r3, [sp, #28]
 800209c:	210a      	movs	r1, #10
 800209e:	fb01 e303 	mla	r3, r1, r3, lr
 80020a2:	9307      	str	r3, [sp, #28]
 80020a4:	2100      	movs	r1, #0
 80020a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80020a8:	1c58      	adds	r0, r3, #1
 80020aa:	901b      	str	r0, [sp, #108]	; 0x6c
 80020ac:	785b      	ldrb	r3, [r3, #1]
 80020ae:	4608      	mov	r0, r1
 80020b0:	e7c9      	b.n	8002046 <_strtod_l+0x1d6>
 80020b2:	9805      	ldr	r0, [sp, #20]
 80020b4:	e7d3      	b.n	800205e <_strtod_l+0x1ee>
 80020b6:	2908      	cmp	r1, #8
 80020b8:	f101 0101 	add.w	r1, r1, #1
 80020bc:	dc03      	bgt.n	80020c6 <_strtod_l+0x256>
 80020be:	9b07      	ldr	r3, [sp, #28]
 80020c0:	437b      	muls	r3, r7
 80020c2:	9307      	str	r3, [sp, #28]
 80020c4:	e7e1      	b.n	800208a <_strtod_l+0x21a>
 80020c6:	2910      	cmp	r1, #16
 80020c8:	bfd8      	it	le
 80020ca:	437d      	mulle	r5, r7
 80020cc:	e7dd      	b.n	800208a <_strtod_l+0x21a>
 80020ce:	2c10      	cmp	r4, #16
 80020d0:	bfdc      	itt	le
 80020d2:	210a      	movle	r1, #10
 80020d4:	fb01 e505 	mlale	r5, r1, r5, lr
 80020d8:	e7e4      	b.n	80020a4 <_strtod_l+0x234>
 80020da:	2301      	movs	r3, #1
 80020dc:	9304      	str	r3, [sp, #16]
 80020de:	e781      	b.n	8001fe4 <_strtod_l+0x174>
 80020e0:	f04f 0c01 	mov.w	ip, #1
 80020e4:	1cb3      	adds	r3, r6, #2
 80020e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80020e8:	78b3      	ldrb	r3, [r6, #2]
 80020ea:	e78a      	b.n	8002002 <_strtod_l+0x192>
 80020ec:	f04f 0c00 	mov.w	ip, #0
 80020f0:	e7f8      	b.n	80020e4 <_strtod_l+0x274>
 80020f2:	bf00      	nop
 80020f4:	08004204 	.word	0x08004204
 80020f8:	7ff00000 	.word	0x7ff00000
 80020fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80020fe:	1c5f      	adds	r7, r3, #1
 8002100:	971b      	str	r7, [sp, #108]	; 0x6c
 8002102:	785b      	ldrb	r3, [r3, #1]
 8002104:	2b30      	cmp	r3, #48	; 0x30
 8002106:	d0f9      	beq.n	80020fc <_strtod_l+0x28c>
 8002108:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800210c:	2f08      	cmp	r7, #8
 800210e:	f63f af7d 	bhi.w	800200c <_strtod_l+0x19c>
 8002112:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8002116:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002118:	930a      	str	r3, [sp, #40]	; 0x28
 800211a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800211c:	1c5f      	adds	r7, r3, #1
 800211e:	971b      	str	r7, [sp, #108]	; 0x6c
 8002120:	785b      	ldrb	r3, [r3, #1]
 8002122:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8002126:	f1b8 0f09 	cmp.w	r8, #9
 800212a:	d937      	bls.n	800219c <_strtod_l+0x32c>
 800212c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800212e:	1a7f      	subs	r7, r7, r1
 8002130:	2f08      	cmp	r7, #8
 8002132:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8002136:	dc37      	bgt.n	80021a8 <_strtod_l+0x338>
 8002138:	45be      	cmp	lr, r7
 800213a:	bfa8      	it	ge
 800213c:	46be      	movge	lr, r7
 800213e:	f1bc 0f00 	cmp.w	ip, #0
 8002142:	d001      	beq.n	8002148 <_strtod_l+0x2d8>
 8002144:	f1ce 0e00 	rsb	lr, lr, #0
 8002148:	2c00      	cmp	r4, #0
 800214a:	d151      	bne.n	80021f0 <_strtod_l+0x380>
 800214c:	2800      	cmp	r0, #0
 800214e:	f47f aece 	bne.w	8001eee <_strtod_l+0x7e>
 8002152:	9a06      	ldr	r2, [sp, #24]
 8002154:	2a00      	cmp	r2, #0
 8002156:	f47f aeca 	bne.w	8001eee <_strtod_l+0x7e>
 800215a:	9a04      	ldr	r2, [sp, #16]
 800215c:	2a00      	cmp	r2, #0
 800215e:	f47f aee4 	bne.w	8001f2a <_strtod_l+0xba>
 8002162:	2b4e      	cmp	r3, #78	; 0x4e
 8002164:	d027      	beq.n	80021b6 <_strtod_l+0x346>
 8002166:	dc21      	bgt.n	80021ac <_strtod_l+0x33c>
 8002168:	2b49      	cmp	r3, #73	; 0x49
 800216a:	f47f aede 	bne.w	8001f2a <_strtod_l+0xba>
 800216e:	49a0      	ldr	r1, [pc, #640]	; (80023f0 <_strtod_l+0x580>)
 8002170:	a81b      	add	r0, sp, #108	; 0x6c
 8002172:	f000 ff5b 	bl	800302c <__match>
 8002176:	2800      	cmp	r0, #0
 8002178:	f43f aed7 	beq.w	8001f2a <_strtod_l+0xba>
 800217c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800217e:	499d      	ldr	r1, [pc, #628]	; (80023f4 <_strtod_l+0x584>)
 8002180:	3b01      	subs	r3, #1
 8002182:	a81b      	add	r0, sp, #108	; 0x6c
 8002184:	931b      	str	r3, [sp, #108]	; 0x6c
 8002186:	f000 ff51 	bl	800302c <__match>
 800218a:	b910      	cbnz	r0, 8002192 <_strtod_l+0x322>
 800218c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800218e:	3301      	adds	r3, #1
 8002190:	931b      	str	r3, [sp, #108]	; 0x6c
 8002192:	f8df b274 	ldr.w	fp, [pc, #628]	; 8002408 <_strtod_l+0x598>
 8002196:	f04f 0a00 	mov.w	sl, #0
 800219a:	e6a8      	b.n	8001eee <_strtod_l+0x7e>
 800219c:	210a      	movs	r1, #10
 800219e:	fb01 3e0e 	mla	lr, r1, lr, r3
 80021a2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80021a6:	e7b8      	b.n	800211a <_strtod_l+0x2aa>
 80021a8:	46be      	mov	lr, r7
 80021aa:	e7c8      	b.n	800213e <_strtod_l+0x2ce>
 80021ac:	2b69      	cmp	r3, #105	; 0x69
 80021ae:	d0de      	beq.n	800216e <_strtod_l+0x2fe>
 80021b0:	2b6e      	cmp	r3, #110	; 0x6e
 80021b2:	f47f aeba 	bne.w	8001f2a <_strtod_l+0xba>
 80021b6:	4990      	ldr	r1, [pc, #576]	; (80023f8 <_strtod_l+0x588>)
 80021b8:	a81b      	add	r0, sp, #108	; 0x6c
 80021ba:	f000 ff37 	bl	800302c <__match>
 80021be:	2800      	cmp	r0, #0
 80021c0:	f43f aeb3 	beq.w	8001f2a <_strtod_l+0xba>
 80021c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b28      	cmp	r3, #40	; 0x28
 80021ca:	d10e      	bne.n	80021ea <_strtod_l+0x37a>
 80021cc:	aa1e      	add	r2, sp, #120	; 0x78
 80021ce:	498b      	ldr	r1, [pc, #556]	; (80023fc <_strtod_l+0x58c>)
 80021d0:	a81b      	add	r0, sp, #108	; 0x6c
 80021d2:	f000 ff3f 	bl	8003054 <__hexnan>
 80021d6:	2805      	cmp	r0, #5
 80021d8:	d107      	bne.n	80021ea <_strtod_l+0x37a>
 80021da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80021dc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80021e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80021e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80021e8:	e681      	b.n	8001eee <_strtod_l+0x7e>
 80021ea:	f8df b224 	ldr.w	fp, [pc, #548]	; 8002410 <_strtod_l+0x5a0>
 80021ee:	e7d2      	b.n	8002196 <_strtod_l+0x326>
 80021f0:	ebae 0302 	sub.w	r3, lr, r2
 80021f4:	9306      	str	r3, [sp, #24]
 80021f6:	9b05      	ldr	r3, [sp, #20]
 80021f8:	9807      	ldr	r0, [sp, #28]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf08      	it	eq
 80021fe:	4623      	moveq	r3, r4
 8002200:	2c10      	cmp	r4, #16
 8002202:	9305      	str	r3, [sp, #20]
 8002204:	46a0      	mov	r8, r4
 8002206:	bfa8      	it	ge
 8002208:	f04f 0810 	movge.w	r8, #16
 800220c:	f7fe f97a 	bl	8000504 <__aeabi_ui2d>
 8002210:	2c09      	cmp	r4, #9
 8002212:	4682      	mov	sl, r0
 8002214:	468b      	mov	fp, r1
 8002216:	dc13      	bgt.n	8002240 <_strtod_l+0x3d0>
 8002218:	9b06      	ldr	r3, [sp, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f43f ae67 	beq.w	8001eee <_strtod_l+0x7e>
 8002220:	9b06      	ldr	r3, [sp, #24]
 8002222:	dd7a      	ble.n	800231a <_strtod_l+0x4aa>
 8002224:	2b16      	cmp	r3, #22
 8002226:	dc61      	bgt.n	80022ec <_strtod_l+0x47c>
 8002228:	4a75      	ldr	r2, [pc, #468]	; (8002400 <_strtod_l+0x590>)
 800222a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800222e:	e9de 0100 	ldrd	r0, r1, [lr]
 8002232:	4652      	mov	r2, sl
 8002234:	465b      	mov	r3, fp
 8002236:	f7fe f9df 	bl	80005f8 <__aeabi_dmul>
 800223a:	4682      	mov	sl, r0
 800223c:	468b      	mov	fp, r1
 800223e:	e656      	b.n	8001eee <_strtod_l+0x7e>
 8002240:	4b6f      	ldr	r3, [pc, #444]	; (8002400 <_strtod_l+0x590>)
 8002242:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8002246:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800224a:	f7fe f9d5 	bl	80005f8 <__aeabi_dmul>
 800224e:	4606      	mov	r6, r0
 8002250:	4628      	mov	r0, r5
 8002252:	460f      	mov	r7, r1
 8002254:	f7fe f956 	bl	8000504 <__aeabi_ui2d>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4630      	mov	r0, r6
 800225e:	4639      	mov	r1, r7
 8002260:	f7fe f814 	bl	800028c <__adddf3>
 8002264:	2c0f      	cmp	r4, #15
 8002266:	4682      	mov	sl, r0
 8002268:	468b      	mov	fp, r1
 800226a:	ddd5      	ble.n	8002218 <_strtod_l+0x3a8>
 800226c:	9b06      	ldr	r3, [sp, #24]
 800226e:	eba4 0808 	sub.w	r8, r4, r8
 8002272:	4498      	add	r8, r3
 8002274:	f1b8 0f00 	cmp.w	r8, #0
 8002278:	f340 8096 	ble.w	80023a8 <_strtod_l+0x538>
 800227c:	f018 030f 	ands.w	r3, r8, #15
 8002280:	d00a      	beq.n	8002298 <_strtod_l+0x428>
 8002282:	495f      	ldr	r1, [pc, #380]	; (8002400 <_strtod_l+0x590>)
 8002284:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8002288:	4652      	mov	r2, sl
 800228a:	465b      	mov	r3, fp
 800228c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002290:	f7fe f9b2 	bl	80005f8 <__aeabi_dmul>
 8002294:	4682      	mov	sl, r0
 8002296:	468b      	mov	fp, r1
 8002298:	f038 080f 	bics.w	r8, r8, #15
 800229c:	d073      	beq.n	8002386 <_strtod_l+0x516>
 800229e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80022a2:	dd47      	ble.n	8002334 <_strtod_l+0x4c4>
 80022a4:	2400      	movs	r4, #0
 80022a6:	46a0      	mov	r8, r4
 80022a8:	9407      	str	r4, [sp, #28]
 80022aa:	9405      	str	r4, [sp, #20]
 80022ac:	2322      	movs	r3, #34	; 0x22
 80022ae:	f8df b158 	ldr.w	fp, [pc, #344]	; 8002408 <_strtod_l+0x598>
 80022b2:	f8c9 3000 	str.w	r3, [r9]
 80022b6:	f04f 0a00 	mov.w	sl, #0
 80022ba:	9b07      	ldr	r3, [sp, #28]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f43f ae16 	beq.w	8001eee <_strtod_l+0x7e>
 80022c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80022c4:	4648      	mov	r0, r9
 80022c6:	f000 ffb0 	bl	800322a <_Bfree>
 80022ca:	9905      	ldr	r1, [sp, #20]
 80022cc:	4648      	mov	r0, r9
 80022ce:	f000 ffac 	bl	800322a <_Bfree>
 80022d2:	4641      	mov	r1, r8
 80022d4:	4648      	mov	r0, r9
 80022d6:	f000 ffa8 	bl	800322a <_Bfree>
 80022da:	9907      	ldr	r1, [sp, #28]
 80022dc:	4648      	mov	r0, r9
 80022de:	f000 ffa4 	bl	800322a <_Bfree>
 80022e2:	4621      	mov	r1, r4
 80022e4:	4648      	mov	r0, r9
 80022e6:	f000 ffa0 	bl	800322a <_Bfree>
 80022ea:	e600      	b.n	8001eee <_strtod_l+0x7e>
 80022ec:	9a06      	ldr	r2, [sp, #24]
 80022ee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80022f2:	4293      	cmp	r3, r2
 80022f4:	dbba      	blt.n	800226c <_strtod_l+0x3fc>
 80022f6:	4d42      	ldr	r5, [pc, #264]	; (8002400 <_strtod_l+0x590>)
 80022f8:	f1c4 040f 	rsb	r4, r4, #15
 80022fc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8002300:	4652      	mov	r2, sl
 8002302:	465b      	mov	r3, fp
 8002304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002308:	f7fe f976 	bl	80005f8 <__aeabi_dmul>
 800230c:	9b06      	ldr	r3, [sp, #24]
 800230e:	1b1c      	subs	r4, r3, r4
 8002310:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8002314:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002318:	e78d      	b.n	8002236 <_strtod_l+0x3c6>
 800231a:	f113 0f16 	cmn.w	r3, #22
 800231e:	dba5      	blt.n	800226c <_strtod_l+0x3fc>
 8002320:	4a37      	ldr	r2, [pc, #220]	; (8002400 <_strtod_l+0x590>)
 8002322:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8002326:	e9d2 2300 	ldrd	r2, r3, [r2]
 800232a:	4650      	mov	r0, sl
 800232c:	4659      	mov	r1, fp
 800232e:	f7fe fa8d 	bl	800084c <__aeabi_ddiv>
 8002332:	e782      	b.n	800223a <_strtod_l+0x3ca>
 8002334:	2300      	movs	r3, #0
 8002336:	4e33      	ldr	r6, [pc, #204]	; (8002404 <_strtod_l+0x594>)
 8002338:	ea4f 1828 	mov.w	r8, r8, asr #4
 800233c:	4650      	mov	r0, sl
 800233e:	4659      	mov	r1, fp
 8002340:	461d      	mov	r5, r3
 8002342:	f1b8 0f01 	cmp.w	r8, #1
 8002346:	dc21      	bgt.n	800238c <_strtod_l+0x51c>
 8002348:	b10b      	cbz	r3, 800234e <_strtod_l+0x4de>
 800234a:	4682      	mov	sl, r0
 800234c:	468b      	mov	fp, r1
 800234e:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <_strtod_l+0x594>)
 8002350:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8002354:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8002358:	4652      	mov	r2, sl
 800235a:	465b      	mov	r3, fp
 800235c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002360:	f7fe f94a 	bl	80005f8 <__aeabi_dmul>
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <_strtod_l+0x598>)
 8002366:	460a      	mov	r2, r1
 8002368:	400b      	ands	r3, r1
 800236a:	4928      	ldr	r1, [pc, #160]	; (800240c <_strtod_l+0x59c>)
 800236c:	428b      	cmp	r3, r1
 800236e:	4682      	mov	sl, r0
 8002370:	d898      	bhi.n	80022a4 <_strtod_l+0x434>
 8002372:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8002376:	428b      	cmp	r3, r1
 8002378:	bf86      	itte	hi
 800237a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8002414 <_strtod_l+0x5a4>
 800237e:	f04f 3aff 	movhi.w	sl, #4294967295
 8002382:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8002386:	2300      	movs	r3, #0
 8002388:	9304      	str	r3, [sp, #16]
 800238a:	e077      	b.n	800247c <_strtod_l+0x60c>
 800238c:	f018 0f01 	tst.w	r8, #1
 8002390:	d006      	beq.n	80023a0 <_strtod_l+0x530>
 8002392:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8002396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239a:	f7fe f92d 	bl	80005f8 <__aeabi_dmul>
 800239e:	2301      	movs	r3, #1
 80023a0:	3501      	adds	r5, #1
 80023a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80023a6:	e7cc      	b.n	8002342 <_strtod_l+0x4d2>
 80023a8:	d0ed      	beq.n	8002386 <_strtod_l+0x516>
 80023aa:	f1c8 0800 	rsb	r8, r8, #0
 80023ae:	f018 020f 	ands.w	r2, r8, #15
 80023b2:	d00a      	beq.n	80023ca <_strtod_l+0x55a>
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <_strtod_l+0x590>)
 80023b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80023ba:	4650      	mov	r0, sl
 80023bc:	4659      	mov	r1, fp
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	f7fe fa43 	bl	800084c <__aeabi_ddiv>
 80023c6:	4682      	mov	sl, r0
 80023c8:	468b      	mov	fp, r1
 80023ca:	ea5f 1828 	movs.w	r8, r8, asr #4
 80023ce:	d0da      	beq.n	8002386 <_strtod_l+0x516>
 80023d0:	f1b8 0f1f 	cmp.w	r8, #31
 80023d4:	dd20      	ble.n	8002418 <_strtod_l+0x5a8>
 80023d6:	2400      	movs	r4, #0
 80023d8:	46a0      	mov	r8, r4
 80023da:	9407      	str	r4, [sp, #28]
 80023dc:	9405      	str	r4, [sp, #20]
 80023de:	2322      	movs	r3, #34	; 0x22
 80023e0:	f04f 0a00 	mov.w	sl, #0
 80023e4:	f04f 0b00 	mov.w	fp, #0
 80023e8:	f8c9 3000 	str.w	r3, [r9]
 80023ec:	e765      	b.n	80022ba <_strtod_l+0x44a>
 80023ee:	bf00      	nop
 80023f0:	080041f8 	.word	0x080041f8
 80023f4:	080041fb 	.word	0x080041fb
 80023f8:	08004201 	.word	0x08004201
 80023fc:	08004218 	.word	0x08004218
 8002400:	08004290 	.word	0x08004290
 8002404:	08004268 	.word	0x08004268
 8002408:	7ff00000 	.word	0x7ff00000
 800240c:	7ca00000 	.word	0x7ca00000
 8002410:	fff80000 	.word	0xfff80000
 8002414:	7fefffff 	.word	0x7fefffff
 8002418:	f018 0310 	ands.w	r3, r8, #16
 800241c:	bf18      	it	ne
 800241e:	236a      	movne	r3, #106	; 0x6a
 8002420:	4da0      	ldr	r5, [pc, #640]	; (80026a4 <_strtod_l+0x834>)
 8002422:	9304      	str	r3, [sp, #16]
 8002424:	4650      	mov	r0, sl
 8002426:	4659      	mov	r1, fp
 8002428:	2300      	movs	r3, #0
 800242a:	f1b8 0f00 	cmp.w	r8, #0
 800242e:	f300 810a 	bgt.w	8002646 <_strtod_l+0x7d6>
 8002432:	b10b      	cbz	r3, 8002438 <_strtod_l+0x5c8>
 8002434:	4682      	mov	sl, r0
 8002436:	468b      	mov	fp, r1
 8002438:	9b04      	ldr	r3, [sp, #16]
 800243a:	b1bb      	cbz	r3, 800246c <_strtod_l+0x5fc>
 800243c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8002440:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8002444:	2b00      	cmp	r3, #0
 8002446:	4659      	mov	r1, fp
 8002448:	dd10      	ble.n	800246c <_strtod_l+0x5fc>
 800244a:	2b1f      	cmp	r3, #31
 800244c:	f340 8107 	ble.w	800265e <_strtod_l+0x7ee>
 8002450:	2b34      	cmp	r3, #52	; 0x34
 8002452:	bfde      	ittt	le
 8002454:	3b20      	suble	r3, #32
 8002456:	f04f 32ff 	movle.w	r2, #4294967295
 800245a:	fa02 f303 	lslle.w	r3, r2, r3
 800245e:	f04f 0a00 	mov.w	sl, #0
 8002462:	bfcc      	ite	gt
 8002464:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8002468:	ea03 0b01 	andle.w	fp, r3, r1
 800246c:	2200      	movs	r2, #0
 800246e:	2300      	movs	r3, #0
 8002470:	4650      	mov	r0, sl
 8002472:	4659      	mov	r1, fp
 8002474:	f7fe fb28 	bl	8000ac8 <__aeabi_dcmpeq>
 8002478:	2800      	cmp	r0, #0
 800247a:	d1ac      	bne.n	80023d6 <_strtod_l+0x566>
 800247c:	9b07      	ldr	r3, [sp, #28]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	9a05      	ldr	r2, [sp, #20]
 8002482:	9908      	ldr	r1, [sp, #32]
 8002484:	4623      	mov	r3, r4
 8002486:	4648      	mov	r0, r9
 8002488:	f000 ff21 	bl	80032ce <__s2b>
 800248c:	9007      	str	r0, [sp, #28]
 800248e:	2800      	cmp	r0, #0
 8002490:	f43f af08 	beq.w	80022a4 <_strtod_l+0x434>
 8002494:	9a06      	ldr	r2, [sp, #24]
 8002496:	9b06      	ldr	r3, [sp, #24]
 8002498:	2a00      	cmp	r2, #0
 800249a:	f1c3 0300 	rsb	r3, r3, #0
 800249e:	bfa8      	it	ge
 80024a0:	2300      	movge	r3, #0
 80024a2:	930e      	str	r3, [sp, #56]	; 0x38
 80024a4:	2400      	movs	r4, #0
 80024a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80024aa:	9316      	str	r3, [sp, #88]	; 0x58
 80024ac:	46a0      	mov	r8, r4
 80024ae:	9b07      	ldr	r3, [sp, #28]
 80024b0:	4648      	mov	r0, r9
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	f000 fe85 	bl	80031c2 <_Balloc>
 80024b8:	9005      	str	r0, [sp, #20]
 80024ba:	2800      	cmp	r0, #0
 80024bc:	f43f aef6 	beq.w	80022ac <_strtod_l+0x43c>
 80024c0:	9b07      	ldr	r3, [sp, #28]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	3202      	adds	r2, #2
 80024c6:	f103 010c 	add.w	r1, r3, #12
 80024ca:	0092      	lsls	r2, r2, #2
 80024cc:	300c      	adds	r0, #12
 80024ce:	f000 fe6d 	bl	80031ac <memcpy>
 80024d2:	aa1e      	add	r2, sp, #120	; 0x78
 80024d4:	a91d      	add	r1, sp, #116	; 0x74
 80024d6:	ec4b ab10 	vmov	d0, sl, fp
 80024da:	4648      	mov	r0, r9
 80024dc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80024e0:	f001 f9b0 	bl	8003844 <__d2b>
 80024e4:	901c      	str	r0, [sp, #112]	; 0x70
 80024e6:	2800      	cmp	r0, #0
 80024e8:	f43f aee0 	beq.w	80022ac <_strtod_l+0x43c>
 80024ec:	2101      	movs	r1, #1
 80024ee:	4648      	mov	r0, r9
 80024f0:	f000 ff79 	bl	80033e6 <__i2b>
 80024f4:	4680      	mov	r8, r0
 80024f6:	2800      	cmp	r0, #0
 80024f8:	f43f aed8 	beq.w	80022ac <_strtod_l+0x43c>
 80024fc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80024fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002500:	2e00      	cmp	r6, #0
 8002502:	bfab      	itete	ge
 8002504:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8002506:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8002508:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800250a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800250c:	bfac      	ite	ge
 800250e:	18f7      	addge	r7, r6, r3
 8002510:	1b9d      	sublt	r5, r3, r6
 8002512:	9b04      	ldr	r3, [sp, #16]
 8002514:	1af6      	subs	r6, r6, r3
 8002516:	4416      	add	r6, r2
 8002518:	4b63      	ldr	r3, [pc, #396]	; (80026a8 <_strtod_l+0x838>)
 800251a:	3e01      	subs	r6, #1
 800251c:	429e      	cmp	r6, r3
 800251e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8002522:	f280 80af 	bge.w	8002684 <_strtod_l+0x814>
 8002526:	1b9b      	subs	r3, r3, r6
 8002528:	2b1f      	cmp	r3, #31
 800252a:	eba2 0203 	sub.w	r2, r2, r3
 800252e:	f04f 0101 	mov.w	r1, #1
 8002532:	f300 809b 	bgt.w	800266c <_strtod_l+0x7fc>
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	930f      	str	r3, [sp, #60]	; 0x3c
 800253c:	2300      	movs	r3, #0
 800253e:	930a      	str	r3, [sp, #40]	; 0x28
 8002540:	18be      	adds	r6, r7, r2
 8002542:	9b04      	ldr	r3, [sp, #16]
 8002544:	42b7      	cmp	r7, r6
 8002546:	4415      	add	r5, r2
 8002548:	441d      	add	r5, r3
 800254a:	463b      	mov	r3, r7
 800254c:	bfa8      	it	ge
 800254e:	4633      	movge	r3, r6
 8002550:	42ab      	cmp	r3, r5
 8002552:	bfa8      	it	ge
 8002554:	462b      	movge	r3, r5
 8002556:	2b00      	cmp	r3, #0
 8002558:	bfc2      	ittt	gt
 800255a:	1af6      	subgt	r6, r6, r3
 800255c:	1aed      	subgt	r5, r5, r3
 800255e:	1aff      	subgt	r7, r7, r3
 8002560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002562:	b1bb      	cbz	r3, 8002594 <_strtod_l+0x724>
 8002564:	4641      	mov	r1, r8
 8002566:	461a      	mov	r2, r3
 8002568:	4648      	mov	r0, r9
 800256a:	f000 ffdb 	bl	8003524 <__pow5mult>
 800256e:	4680      	mov	r8, r0
 8002570:	2800      	cmp	r0, #0
 8002572:	f43f ae9b 	beq.w	80022ac <_strtod_l+0x43c>
 8002576:	4601      	mov	r1, r0
 8002578:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800257a:	4648      	mov	r0, r9
 800257c:	f000 ff3c 	bl	80033f8 <__multiply>
 8002580:	900c      	str	r0, [sp, #48]	; 0x30
 8002582:	2800      	cmp	r0, #0
 8002584:	f43f ae92 	beq.w	80022ac <_strtod_l+0x43c>
 8002588:	991c      	ldr	r1, [sp, #112]	; 0x70
 800258a:	4648      	mov	r0, r9
 800258c:	f000 fe4d 	bl	800322a <_Bfree>
 8002590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002592:	931c      	str	r3, [sp, #112]	; 0x70
 8002594:	2e00      	cmp	r6, #0
 8002596:	dc7a      	bgt.n	800268e <_strtod_l+0x81e>
 8002598:	9b06      	ldr	r3, [sp, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	dd08      	ble.n	80025b0 <_strtod_l+0x740>
 800259e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80025a0:	9905      	ldr	r1, [sp, #20]
 80025a2:	4648      	mov	r0, r9
 80025a4:	f000 ffbe 	bl	8003524 <__pow5mult>
 80025a8:	9005      	str	r0, [sp, #20]
 80025aa:	2800      	cmp	r0, #0
 80025ac:	f43f ae7e 	beq.w	80022ac <_strtod_l+0x43c>
 80025b0:	2d00      	cmp	r5, #0
 80025b2:	dd08      	ble.n	80025c6 <_strtod_l+0x756>
 80025b4:	462a      	mov	r2, r5
 80025b6:	9905      	ldr	r1, [sp, #20]
 80025b8:	4648      	mov	r0, r9
 80025ba:	f001 f801 	bl	80035c0 <__lshift>
 80025be:	9005      	str	r0, [sp, #20]
 80025c0:	2800      	cmp	r0, #0
 80025c2:	f43f ae73 	beq.w	80022ac <_strtod_l+0x43c>
 80025c6:	2f00      	cmp	r7, #0
 80025c8:	dd08      	ble.n	80025dc <_strtod_l+0x76c>
 80025ca:	4641      	mov	r1, r8
 80025cc:	463a      	mov	r2, r7
 80025ce:	4648      	mov	r0, r9
 80025d0:	f000 fff6 	bl	80035c0 <__lshift>
 80025d4:	4680      	mov	r8, r0
 80025d6:	2800      	cmp	r0, #0
 80025d8:	f43f ae68 	beq.w	80022ac <_strtod_l+0x43c>
 80025dc:	9a05      	ldr	r2, [sp, #20]
 80025de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80025e0:	4648      	mov	r0, r9
 80025e2:	f001 f85b 	bl	800369c <__mdiff>
 80025e6:	4604      	mov	r4, r0
 80025e8:	2800      	cmp	r0, #0
 80025ea:	f43f ae5f 	beq.w	80022ac <_strtod_l+0x43c>
 80025ee:	68c3      	ldr	r3, [r0, #12]
 80025f0:	930c      	str	r3, [sp, #48]	; 0x30
 80025f2:	2300      	movs	r3, #0
 80025f4:	60c3      	str	r3, [r0, #12]
 80025f6:	4641      	mov	r1, r8
 80025f8:	f001 f836 	bl	8003668 <__mcmp>
 80025fc:	2800      	cmp	r0, #0
 80025fe:	da55      	bge.n	80026ac <_strtod_l+0x83c>
 8002600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002602:	b9e3      	cbnz	r3, 800263e <_strtod_l+0x7ce>
 8002604:	f1ba 0f00 	cmp.w	sl, #0
 8002608:	d119      	bne.n	800263e <_strtod_l+0x7ce>
 800260a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800260e:	b9b3      	cbnz	r3, 800263e <_strtod_l+0x7ce>
 8002610:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8002614:	0d1b      	lsrs	r3, r3, #20
 8002616:	051b      	lsls	r3, r3, #20
 8002618:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800261c:	d90f      	bls.n	800263e <_strtod_l+0x7ce>
 800261e:	6963      	ldr	r3, [r4, #20]
 8002620:	b913      	cbnz	r3, 8002628 <_strtod_l+0x7b8>
 8002622:	6923      	ldr	r3, [r4, #16]
 8002624:	2b01      	cmp	r3, #1
 8002626:	dd0a      	ble.n	800263e <_strtod_l+0x7ce>
 8002628:	4621      	mov	r1, r4
 800262a:	2201      	movs	r2, #1
 800262c:	4648      	mov	r0, r9
 800262e:	f000 ffc7 	bl	80035c0 <__lshift>
 8002632:	4641      	mov	r1, r8
 8002634:	4604      	mov	r4, r0
 8002636:	f001 f817 	bl	8003668 <__mcmp>
 800263a:	2800      	cmp	r0, #0
 800263c:	dc67      	bgt.n	800270e <_strtod_l+0x89e>
 800263e:	9b04      	ldr	r3, [sp, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d171      	bne.n	8002728 <_strtod_l+0x8b8>
 8002644:	e63d      	b.n	80022c2 <_strtod_l+0x452>
 8002646:	f018 0f01 	tst.w	r8, #1
 800264a:	d004      	beq.n	8002656 <_strtod_l+0x7e6>
 800264c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002650:	f7fd ffd2 	bl	80005f8 <__aeabi_dmul>
 8002654:	2301      	movs	r3, #1
 8002656:	ea4f 0868 	mov.w	r8, r8, asr #1
 800265a:	3508      	adds	r5, #8
 800265c:	e6e5      	b.n	800242a <_strtod_l+0x5ba>
 800265e:	f04f 32ff 	mov.w	r2, #4294967295
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	ea03 0a0a 	and.w	sl, r3, sl
 800266a:	e6ff      	b.n	800246c <_strtod_l+0x5fc>
 800266c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8002670:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8002674:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8002678:	36e2      	adds	r6, #226	; 0xe2
 800267a:	fa01 f306 	lsl.w	r3, r1, r6
 800267e:	930a      	str	r3, [sp, #40]	; 0x28
 8002680:	910f      	str	r1, [sp, #60]	; 0x3c
 8002682:	e75d      	b.n	8002540 <_strtod_l+0x6d0>
 8002684:	2300      	movs	r3, #0
 8002686:	930a      	str	r3, [sp, #40]	; 0x28
 8002688:	2301      	movs	r3, #1
 800268a:	930f      	str	r3, [sp, #60]	; 0x3c
 800268c:	e758      	b.n	8002540 <_strtod_l+0x6d0>
 800268e:	4632      	mov	r2, r6
 8002690:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002692:	4648      	mov	r0, r9
 8002694:	f000 ff94 	bl	80035c0 <__lshift>
 8002698:	901c      	str	r0, [sp, #112]	; 0x70
 800269a:	2800      	cmp	r0, #0
 800269c:	f47f af7c 	bne.w	8002598 <_strtod_l+0x728>
 80026a0:	e604      	b.n	80022ac <_strtod_l+0x43c>
 80026a2:	bf00      	nop
 80026a4:	08004230 	.word	0x08004230
 80026a8:	fffffc02 	.word	0xfffffc02
 80026ac:	465d      	mov	r5, fp
 80026ae:	f040 8086 	bne.w	80027be <_strtod_l+0x94e>
 80026b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80026b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80026b8:	b32a      	cbz	r2, 8002706 <_strtod_l+0x896>
 80026ba:	4aaf      	ldr	r2, [pc, #700]	; (8002978 <_strtod_l+0xb08>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d153      	bne.n	8002768 <_strtod_l+0x8f8>
 80026c0:	9b04      	ldr	r3, [sp, #16]
 80026c2:	4650      	mov	r0, sl
 80026c4:	b1d3      	cbz	r3, 80026fc <_strtod_l+0x88c>
 80026c6:	4aad      	ldr	r2, [pc, #692]	; (800297c <_strtod_l+0xb0c>)
 80026c8:	402a      	ands	r2, r5
 80026ca:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80026ce:	f04f 31ff 	mov.w	r1, #4294967295
 80026d2:	d816      	bhi.n	8002702 <_strtod_l+0x892>
 80026d4:	0d12      	lsrs	r2, r2, #20
 80026d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80026da:	fa01 f303 	lsl.w	r3, r1, r3
 80026de:	4298      	cmp	r0, r3
 80026e0:	d142      	bne.n	8002768 <_strtod_l+0x8f8>
 80026e2:	4ba7      	ldr	r3, [pc, #668]	; (8002980 <_strtod_l+0xb10>)
 80026e4:	429d      	cmp	r5, r3
 80026e6:	d102      	bne.n	80026ee <_strtod_l+0x87e>
 80026e8:	3001      	adds	r0, #1
 80026ea:	f43f addf 	beq.w	80022ac <_strtod_l+0x43c>
 80026ee:	4ba3      	ldr	r3, [pc, #652]	; (800297c <_strtod_l+0xb0c>)
 80026f0:	402b      	ands	r3, r5
 80026f2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80026f6:	f04f 0a00 	mov.w	sl, #0
 80026fa:	e7a0      	b.n	800263e <_strtod_l+0x7ce>
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002700:	e7ed      	b.n	80026de <_strtod_l+0x86e>
 8002702:	460b      	mov	r3, r1
 8002704:	e7eb      	b.n	80026de <_strtod_l+0x86e>
 8002706:	bb7b      	cbnz	r3, 8002768 <_strtod_l+0x8f8>
 8002708:	f1ba 0f00 	cmp.w	sl, #0
 800270c:	d12c      	bne.n	8002768 <_strtod_l+0x8f8>
 800270e:	9904      	ldr	r1, [sp, #16]
 8002710:	4a9a      	ldr	r2, [pc, #616]	; (800297c <_strtod_l+0xb0c>)
 8002712:	465b      	mov	r3, fp
 8002714:	b1f1      	cbz	r1, 8002754 <_strtod_l+0x8e4>
 8002716:	ea02 010b 	and.w	r1, r2, fp
 800271a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800271e:	dc19      	bgt.n	8002754 <_strtod_l+0x8e4>
 8002720:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8002724:	f77f ae5b 	ble.w	80023de <_strtod_l+0x56e>
 8002728:	4a96      	ldr	r2, [pc, #600]	; (8002984 <_strtod_l+0xb14>)
 800272a:	2300      	movs	r3, #0
 800272c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8002730:	4650      	mov	r0, sl
 8002732:	4659      	mov	r1, fp
 8002734:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8002738:	f7fd ff5e 	bl	80005f8 <__aeabi_dmul>
 800273c:	4682      	mov	sl, r0
 800273e:	468b      	mov	fp, r1
 8002740:	2900      	cmp	r1, #0
 8002742:	f47f adbe 	bne.w	80022c2 <_strtod_l+0x452>
 8002746:	2800      	cmp	r0, #0
 8002748:	f47f adbb 	bne.w	80022c2 <_strtod_l+0x452>
 800274c:	2322      	movs	r3, #34	; 0x22
 800274e:	f8c9 3000 	str.w	r3, [r9]
 8002752:	e5b6      	b.n	80022c2 <_strtod_l+0x452>
 8002754:	4013      	ands	r3, r2
 8002756:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800275a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800275e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8002762:	f04f 3aff 	mov.w	sl, #4294967295
 8002766:	e76a      	b.n	800263e <_strtod_l+0x7ce>
 8002768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800276a:	b193      	cbz	r3, 8002792 <_strtod_l+0x922>
 800276c:	422b      	tst	r3, r5
 800276e:	f43f af66 	beq.w	800263e <_strtod_l+0x7ce>
 8002772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002774:	9a04      	ldr	r2, [sp, #16]
 8002776:	4650      	mov	r0, sl
 8002778:	4659      	mov	r1, fp
 800277a:	b173      	cbz	r3, 800279a <_strtod_l+0x92a>
 800277c:	f7ff fb5c 	bl	8001e38 <sulp>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002788:	f7fd fd80 	bl	800028c <__adddf3>
 800278c:	4682      	mov	sl, r0
 800278e:	468b      	mov	fp, r1
 8002790:	e755      	b.n	800263e <_strtod_l+0x7ce>
 8002792:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002794:	ea13 0f0a 	tst.w	r3, sl
 8002798:	e7e9      	b.n	800276e <_strtod_l+0x8fe>
 800279a:	f7ff fb4d 	bl	8001e38 <sulp>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80027a6:	f7fd fd6f 	bl	8000288 <__aeabi_dsub>
 80027aa:	2200      	movs	r2, #0
 80027ac:	2300      	movs	r3, #0
 80027ae:	4682      	mov	sl, r0
 80027b0:	468b      	mov	fp, r1
 80027b2:	f7fe f989 	bl	8000ac8 <__aeabi_dcmpeq>
 80027b6:	2800      	cmp	r0, #0
 80027b8:	f47f ae11 	bne.w	80023de <_strtod_l+0x56e>
 80027bc:	e73f      	b.n	800263e <_strtod_l+0x7ce>
 80027be:	4641      	mov	r1, r8
 80027c0:	4620      	mov	r0, r4
 80027c2:	f001 f88e 	bl	80038e2 <__ratio>
 80027c6:	ec57 6b10 	vmov	r6, r7, d0
 80027ca:	2200      	movs	r2, #0
 80027cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027d0:	ee10 0a10 	vmov	r0, s0
 80027d4:	4639      	mov	r1, r7
 80027d6:	f7fe f98b 	bl	8000af0 <__aeabi_dcmple>
 80027da:	2800      	cmp	r0, #0
 80027dc:	d077      	beq.n	80028ce <_strtod_l+0xa5e>
 80027de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d04a      	beq.n	800287a <_strtod_l+0xa0a>
 80027e4:	4b68      	ldr	r3, [pc, #416]	; (8002988 <_strtod_l+0xb18>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80027ec:	4f66      	ldr	r7, [pc, #408]	; (8002988 <_strtod_l+0xb18>)
 80027ee:	2600      	movs	r6, #0
 80027f0:	4b62      	ldr	r3, [pc, #392]	; (800297c <_strtod_l+0xb0c>)
 80027f2:	402b      	ands	r3, r5
 80027f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80027f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80027f8:	4b64      	ldr	r3, [pc, #400]	; (800298c <_strtod_l+0xb1c>)
 80027fa:	429a      	cmp	r2, r3
 80027fc:	f040 80ce 	bne.w	800299c <_strtod_l+0xb2c>
 8002800:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002804:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002808:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800280c:	ec4b ab10 	vmov	d0, sl, fp
 8002810:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8002814:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002818:	f000 ff9e 	bl	8003758 <__ulp>
 800281c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002820:	ec53 2b10 	vmov	r2, r3, d0
 8002824:	f7fd fee8 	bl	80005f8 <__aeabi_dmul>
 8002828:	4652      	mov	r2, sl
 800282a:	465b      	mov	r3, fp
 800282c:	f7fd fd2e 	bl	800028c <__adddf3>
 8002830:	460b      	mov	r3, r1
 8002832:	4952      	ldr	r1, [pc, #328]	; (800297c <_strtod_l+0xb0c>)
 8002834:	4a56      	ldr	r2, [pc, #344]	; (8002990 <_strtod_l+0xb20>)
 8002836:	4019      	ands	r1, r3
 8002838:	4291      	cmp	r1, r2
 800283a:	4682      	mov	sl, r0
 800283c:	d95b      	bls.n	80028f6 <_strtod_l+0xa86>
 800283e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002840:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8002844:	4293      	cmp	r3, r2
 8002846:	d103      	bne.n	8002850 <_strtod_l+0x9e0>
 8002848:	9b08      	ldr	r3, [sp, #32]
 800284a:	3301      	adds	r3, #1
 800284c:	f43f ad2e 	beq.w	80022ac <_strtod_l+0x43c>
 8002850:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8002980 <_strtod_l+0xb10>
 8002854:	f04f 3aff 	mov.w	sl, #4294967295
 8002858:	991c      	ldr	r1, [sp, #112]	; 0x70
 800285a:	4648      	mov	r0, r9
 800285c:	f000 fce5 	bl	800322a <_Bfree>
 8002860:	9905      	ldr	r1, [sp, #20]
 8002862:	4648      	mov	r0, r9
 8002864:	f000 fce1 	bl	800322a <_Bfree>
 8002868:	4641      	mov	r1, r8
 800286a:	4648      	mov	r0, r9
 800286c:	f000 fcdd 	bl	800322a <_Bfree>
 8002870:	4621      	mov	r1, r4
 8002872:	4648      	mov	r0, r9
 8002874:	f000 fcd9 	bl	800322a <_Bfree>
 8002878:	e619      	b.n	80024ae <_strtod_l+0x63e>
 800287a:	f1ba 0f00 	cmp.w	sl, #0
 800287e:	d11a      	bne.n	80028b6 <_strtod_l+0xa46>
 8002880:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002884:	b9eb      	cbnz	r3, 80028c2 <_strtod_l+0xa52>
 8002886:	2200      	movs	r2, #0
 8002888:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <_strtod_l+0xb18>)
 800288a:	4630      	mov	r0, r6
 800288c:	4639      	mov	r1, r7
 800288e:	f7fe f925 	bl	8000adc <__aeabi_dcmplt>
 8002892:	b9c8      	cbnz	r0, 80028c8 <_strtod_l+0xa58>
 8002894:	4630      	mov	r0, r6
 8002896:	4639      	mov	r1, r7
 8002898:	2200      	movs	r2, #0
 800289a:	4b3e      	ldr	r3, [pc, #248]	; (8002994 <_strtod_l+0xb24>)
 800289c:	f7fd feac 	bl	80005f8 <__aeabi_dmul>
 80028a0:	4606      	mov	r6, r0
 80028a2:	460f      	mov	r7, r1
 80028a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80028a8:	9618      	str	r6, [sp, #96]	; 0x60
 80028aa:	9319      	str	r3, [sp, #100]	; 0x64
 80028ac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80028b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80028b4:	e79c      	b.n	80027f0 <_strtod_l+0x980>
 80028b6:	f1ba 0f01 	cmp.w	sl, #1
 80028ba:	d102      	bne.n	80028c2 <_strtod_l+0xa52>
 80028bc:	2d00      	cmp	r5, #0
 80028be:	f43f ad8e 	beq.w	80023de <_strtod_l+0x56e>
 80028c2:	2200      	movs	r2, #0
 80028c4:	4b34      	ldr	r3, [pc, #208]	; (8002998 <_strtod_l+0xb28>)
 80028c6:	e78f      	b.n	80027e8 <_strtod_l+0x978>
 80028c8:	2600      	movs	r6, #0
 80028ca:	4f32      	ldr	r7, [pc, #200]	; (8002994 <_strtod_l+0xb24>)
 80028cc:	e7ea      	b.n	80028a4 <_strtod_l+0xa34>
 80028ce:	4b31      	ldr	r3, [pc, #196]	; (8002994 <_strtod_l+0xb24>)
 80028d0:	4630      	mov	r0, r6
 80028d2:	4639      	mov	r1, r7
 80028d4:	2200      	movs	r2, #0
 80028d6:	f7fd fe8f 	bl	80005f8 <__aeabi_dmul>
 80028da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80028dc:	4606      	mov	r6, r0
 80028de:	460f      	mov	r7, r1
 80028e0:	b933      	cbnz	r3, 80028f0 <_strtod_l+0xa80>
 80028e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80028e6:	9010      	str	r0, [sp, #64]	; 0x40
 80028e8:	9311      	str	r3, [sp, #68]	; 0x44
 80028ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80028ee:	e7df      	b.n	80028b0 <_strtod_l+0xa40>
 80028f0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80028f4:	e7f9      	b.n	80028ea <_strtod_l+0xa7a>
 80028f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80028fa:	9b04      	ldr	r3, [sp, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1ab      	bne.n	8002858 <_strtod_l+0x9e8>
 8002900:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8002904:	0d1b      	lsrs	r3, r3, #20
 8002906:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002908:	051b      	lsls	r3, r3, #20
 800290a:	429a      	cmp	r2, r3
 800290c:	465d      	mov	r5, fp
 800290e:	d1a3      	bne.n	8002858 <_strtod_l+0x9e8>
 8002910:	4639      	mov	r1, r7
 8002912:	4630      	mov	r0, r6
 8002914:	f7fe f90a 	bl	8000b2c <__aeabi_d2iz>
 8002918:	f7fd fe04 	bl	8000524 <__aeabi_i2d>
 800291c:	460b      	mov	r3, r1
 800291e:	4602      	mov	r2, r0
 8002920:	4639      	mov	r1, r7
 8002922:	4630      	mov	r0, r6
 8002924:	f7fd fcb0 	bl	8000288 <__aeabi_dsub>
 8002928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800292a:	4606      	mov	r6, r0
 800292c:	460f      	mov	r7, r1
 800292e:	b933      	cbnz	r3, 800293e <_strtod_l+0xace>
 8002930:	f1ba 0f00 	cmp.w	sl, #0
 8002934:	d103      	bne.n	800293e <_strtod_l+0xace>
 8002936:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800293a:	2d00      	cmp	r5, #0
 800293c:	d06d      	beq.n	8002a1a <_strtod_l+0xbaa>
 800293e:	a30a      	add	r3, pc, #40	; (adr r3, 8002968 <_strtod_l+0xaf8>)
 8002940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002944:	4630      	mov	r0, r6
 8002946:	4639      	mov	r1, r7
 8002948:	f7fe f8c8 	bl	8000adc <__aeabi_dcmplt>
 800294c:	2800      	cmp	r0, #0
 800294e:	f47f acb8 	bne.w	80022c2 <_strtod_l+0x452>
 8002952:	a307      	add	r3, pc, #28	; (adr r3, 8002970 <_strtod_l+0xb00>)
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	4630      	mov	r0, r6
 800295a:	4639      	mov	r1, r7
 800295c:	f7fe f8dc 	bl	8000b18 <__aeabi_dcmpgt>
 8002960:	2800      	cmp	r0, #0
 8002962:	f43f af79 	beq.w	8002858 <_strtod_l+0x9e8>
 8002966:	e4ac      	b.n	80022c2 <_strtod_l+0x452>
 8002968:	94a03595 	.word	0x94a03595
 800296c:	3fdfffff 	.word	0x3fdfffff
 8002970:	35afe535 	.word	0x35afe535
 8002974:	3fe00000 	.word	0x3fe00000
 8002978:	000fffff 	.word	0x000fffff
 800297c:	7ff00000 	.word	0x7ff00000
 8002980:	7fefffff 	.word	0x7fefffff
 8002984:	39500000 	.word	0x39500000
 8002988:	3ff00000 	.word	0x3ff00000
 800298c:	7fe00000 	.word	0x7fe00000
 8002990:	7c9fffff 	.word	0x7c9fffff
 8002994:	3fe00000 	.word	0x3fe00000
 8002998:	bff00000 	.word	0xbff00000
 800299c:	9b04      	ldr	r3, [sp, #16]
 800299e:	b333      	cbz	r3, 80029ee <_strtod_l+0xb7e>
 80029a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80029a2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80029a6:	d822      	bhi.n	80029ee <_strtod_l+0xb7e>
 80029a8:	a327      	add	r3, pc, #156	; (adr r3, 8002a48 <_strtod_l+0xbd8>)
 80029aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ae:	4630      	mov	r0, r6
 80029b0:	4639      	mov	r1, r7
 80029b2:	f7fe f89d 	bl	8000af0 <__aeabi_dcmple>
 80029b6:	b1a0      	cbz	r0, 80029e2 <_strtod_l+0xb72>
 80029b8:	4639      	mov	r1, r7
 80029ba:	4630      	mov	r0, r6
 80029bc:	f7fe f8de 	bl	8000b7c <__aeabi_d2uiz>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	bf08      	it	eq
 80029c4:	2001      	moveq	r0, #1
 80029c6:	f7fd fd9d 	bl	8000504 <__aeabi_ui2d>
 80029ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80029cc:	4606      	mov	r6, r0
 80029ce:	460f      	mov	r7, r1
 80029d0:	bb03      	cbnz	r3, 8002a14 <_strtod_l+0xba4>
 80029d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80029d6:	9012      	str	r0, [sp, #72]	; 0x48
 80029d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80029da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80029de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80029e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80029e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80029e6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80029ee:	ed9d 0b08 	vldr	d0, [sp, #32]
 80029f2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80029f6:	f000 feaf 	bl	8003758 <__ulp>
 80029fa:	4650      	mov	r0, sl
 80029fc:	ec53 2b10 	vmov	r2, r3, d0
 8002a00:	4659      	mov	r1, fp
 8002a02:	f7fd fdf9 	bl	80005f8 <__aeabi_dmul>
 8002a06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002a0a:	f7fd fc3f 	bl	800028c <__adddf3>
 8002a0e:	4682      	mov	sl, r0
 8002a10:	468b      	mov	fp, r1
 8002a12:	e772      	b.n	80028fa <_strtod_l+0xa8a>
 8002a14:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8002a18:	e7df      	b.n	80029da <_strtod_l+0xb6a>
 8002a1a:	a30d      	add	r3, pc, #52	; (adr r3, 8002a50 <_strtod_l+0xbe0>)
 8002a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a20:	f7fe f85c 	bl	8000adc <__aeabi_dcmplt>
 8002a24:	e79c      	b.n	8002960 <_strtod_l+0xaf0>
 8002a26:	2300      	movs	r3, #0
 8002a28:	930d      	str	r3, [sp, #52]	; 0x34
 8002a2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002a2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	f7ff ba61 	b.w	8001ef6 <_strtod_l+0x86>
 8002a34:	2b65      	cmp	r3, #101	; 0x65
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f43f ab4e 	beq.w	80020da <_strtod_l+0x26a>
 8002a3e:	2101      	movs	r1, #1
 8002a40:	4614      	mov	r4, r2
 8002a42:	9104      	str	r1, [sp, #16]
 8002a44:	f7ff bacb 	b.w	8001fde <_strtod_l+0x16e>
 8002a48:	ffc00000 	.word	0xffc00000
 8002a4c:	41dfffff 	.word	0x41dfffff
 8002a50:	94a03595 	.word	0x94a03595
 8002a54:	3fcfffff 	.word	0x3fcfffff

08002a58 <strtod>:
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <strtod+0x20>)
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <strtod+0x24>)
 8002a5c:	b410      	push	{r4}
 8002a5e:	681c      	ldr	r4, [r3, #0]
 8002a60:	6a23      	ldr	r3, [r4, #32]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bf08      	it	eq
 8002a66:	4613      	moveq	r3, r2
 8002a68:	460a      	mov	r2, r1
 8002a6a:	4601      	mov	r1, r0
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a72:	f7ff b9fd 	b.w	8001e70 <_strtod_l>
 8002a76:	bf00      	nop
 8002a78:	20000058 	.word	0x20000058
 8002a7c:	200000bc 	.word	0x200000bc

08002a80 <strtok>:
 8002a80:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <strtok+0x50>)
 8002a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a86:	681d      	ldr	r5, [r3, #0]
 8002a88:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8002a8a:	4606      	mov	r6, r0
 8002a8c:	460f      	mov	r7, r1
 8002a8e:	b9b4      	cbnz	r4, 8002abe <strtok+0x3e>
 8002a90:	2050      	movs	r0, #80	; 0x50
 8002a92:	f000 fb71 	bl	8003178 <malloc>
 8002a96:	65a8      	str	r0, [r5, #88]	; 0x58
 8002a98:	e9c0 4400 	strd	r4, r4, [r0]
 8002a9c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8002aa0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8002aa4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8002aa8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8002aac:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8002ab0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8002ab4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8002ab8:	6184      	str	r4, [r0, #24]
 8002aba:	7704      	strb	r4, [r0, #28]
 8002abc:	6244      	str	r4, [r0, #36]	; 0x24
 8002abe:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8002ac0:	4639      	mov	r1, r7
 8002ac2:	4630      	mov	r0, r6
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002aca:	f000 b803 	b.w	8002ad4 <__strtok_r>
 8002ace:	bf00      	nop
 8002ad0:	20000058 	.word	0x20000058

08002ad4 <__strtok_r>:
 8002ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ad6:	b918      	cbnz	r0, 8002ae0 <__strtok_r+0xc>
 8002ad8:	6810      	ldr	r0, [r2, #0]
 8002ada:	b908      	cbnz	r0, 8002ae0 <__strtok_r+0xc>
 8002adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ade:	4620      	mov	r0, r4
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	460f      	mov	r7, r1
 8002ae4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002ae8:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002aec:	b91e      	cbnz	r6, 8002af6 <__strtok_r+0x22>
 8002aee:	b96d      	cbnz	r5, 8002b0c <__strtok_r+0x38>
 8002af0:	6015      	str	r5, [r2, #0]
 8002af2:	4628      	mov	r0, r5
 8002af4:	e7f2      	b.n	8002adc <__strtok_r+0x8>
 8002af6:	42b5      	cmp	r5, r6
 8002af8:	d1f6      	bne.n	8002ae8 <__strtok_r+0x14>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1ef      	bne.n	8002ade <__strtok_r+0xa>
 8002afe:	6014      	str	r4, [r2, #0]
 8002b00:	7003      	strb	r3, [r0, #0]
 8002b02:	e7eb      	b.n	8002adc <__strtok_r+0x8>
 8002b04:	462b      	mov	r3, r5
 8002b06:	e00d      	b.n	8002b24 <__strtok_r+0x50>
 8002b08:	b926      	cbnz	r6, 8002b14 <__strtok_r+0x40>
 8002b0a:	461c      	mov	r4, r3
 8002b0c:	4623      	mov	r3, r4
 8002b0e:	460f      	mov	r7, r1
 8002b10:	f813 5b01 	ldrb.w	r5, [r3], #1
 8002b14:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002b18:	42b5      	cmp	r5, r6
 8002b1a:	d1f5      	bne.n	8002b08 <__strtok_r+0x34>
 8002b1c:	2d00      	cmp	r5, #0
 8002b1e:	d0f1      	beq.n	8002b04 <__strtok_r+0x30>
 8002b20:	2100      	movs	r1, #0
 8002b22:	7021      	strb	r1, [r4, #0]
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e7d9      	b.n	8002adc <__strtok_r+0x8>

08002b28 <rshift>:
 8002b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b2a:	6906      	ldr	r6, [r0, #16]
 8002b2c:	114b      	asrs	r3, r1, #5
 8002b2e:	429e      	cmp	r6, r3
 8002b30:	f100 0414 	add.w	r4, r0, #20
 8002b34:	dd30      	ble.n	8002b98 <rshift+0x70>
 8002b36:	f011 011f 	ands.w	r1, r1, #31
 8002b3a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8002b3e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8002b42:	d108      	bne.n	8002b56 <rshift+0x2e>
 8002b44:	4621      	mov	r1, r4
 8002b46:	42b2      	cmp	r2, r6
 8002b48:	460b      	mov	r3, r1
 8002b4a:	d211      	bcs.n	8002b70 <rshift+0x48>
 8002b4c:	f852 3b04 	ldr.w	r3, [r2], #4
 8002b50:	f841 3b04 	str.w	r3, [r1], #4
 8002b54:	e7f7      	b.n	8002b46 <rshift+0x1e>
 8002b56:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8002b5a:	f1c1 0c20 	rsb	ip, r1, #32
 8002b5e:	40cd      	lsrs	r5, r1
 8002b60:	3204      	adds	r2, #4
 8002b62:	4623      	mov	r3, r4
 8002b64:	42b2      	cmp	r2, r6
 8002b66:	4617      	mov	r7, r2
 8002b68:	d30c      	bcc.n	8002b84 <rshift+0x5c>
 8002b6a:	601d      	str	r5, [r3, #0]
 8002b6c:	b105      	cbz	r5, 8002b70 <rshift+0x48>
 8002b6e:	3304      	adds	r3, #4
 8002b70:	1b1a      	subs	r2, r3, r4
 8002b72:	42a3      	cmp	r3, r4
 8002b74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8002b78:	bf08      	it	eq
 8002b7a:	2300      	moveq	r3, #0
 8002b7c:	6102      	str	r2, [r0, #16]
 8002b7e:	bf08      	it	eq
 8002b80:	6143      	streq	r3, [r0, #20]
 8002b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b84:	683f      	ldr	r7, [r7, #0]
 8002b86:	fa07 f70c 	lsl.w	r7, r7, ip
 8002b8a:	433d      	orrs	r5, r7
 8002b8c:	f843 5b04 	str.w	r5, [r3], #4
 8002b90:	f852 5b04 	ldr.w	r5, [r2], #4
 8002b94:	40cd      	lsrs	r5, r1
 8002b96:	e7e5      	b.n	8002b64 <rshift+0x3c>
 8002b98:	4623      	mov	r3, r4
 8002b9a:	e7e9      	b.n	8002b70 <rshift+0x48>

08002b9c <__hexdig_fun>:
 8002b9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8002ba0:	2b09      	cmp	r3, #9
 8002ba2:	d802      	bhi.n	8002baa <__hexdig_fun+0xe>
 8002ba4:	3820      	subs	r0, #32
 8002ba6:	b2c0      	uxtb	r0, r0
 8002ba8:	4770      	bx	lr
 8002baa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d801      	bhi.n	8002bb6 <__hexdig_fun+0x1a>
 8002bb2:	3847      	subs	r0, #71	; 0x47
 8002bb4:	e7f7      	b.n	8002ba6 <__hexdig_fun+0xa>
 8002bb6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8002bba:	2b05      	cmp	r3, #5
 8002bbc:	d801      	bhi.n	8002bc2 <__hexdig_fun+0x26>
 8002bbe:	3827      	subs	r0, #39	; 0x27
 8002bc0:	e7f1      	b.n	8002ba6 <__hexdig_fun+0xa>
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	4770      	bx	lr

08002bc6 <__gethex>:
 8002bc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bca:	b08b      	sub	sp, #44	; 0x2c
 8002bcc:	468a      	mov	sl, r1
 8002bce:	9002      	str	r0, [sp, #8]
 8002bd0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8002bd2:	9306      	str	r3, [sp, #24]
 8002bd4:	4690      	mov	r8, r2
 8002bd6:	f000 facd 	bl	8003174 <__localeconv_l>
 8002bda:	6803      	ldr	r3, [r0, #0]
 8002bdc:	9303      	str	r3, [sp, #12]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd faf6 	bl	80001d0 <strlen>
 8002be4:	9b03      	ldr	r3, [sp, #12]
 8002be6:	9001      	str	r0, [sp, #4]
 8002be8:	4403      	add	r3, r0
 8002bea:	f04f 0b00 	mov.w	fp, #0
 8002bee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8002bf2:	9307      	str	r3, [sp, #28]
 8002bf4:	f8da 3000 	ldr.w	r3, [sl]
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	461f      	mov	r7, r3
 8002bfc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8002c00:	2830      	cmp	r0, #48	; 0x30
 8002c02:	d06c      	beq.n	8002cde <__gethex+0x118>
 8002c04:	f7ff ffca 	bl	8002b9c <__hexdig_fun>
 8002c08:	4604      	mov	r4, r0
 8002c0a:	2800      	cmp	r0, #0
 8002c0c:	d16a      	bne.n	8002ce4 <__gethex+0x11e>
 8002c0e:	9a01      	ldr	r2, [sp, #4]
 8002c10:	9903      	ldr	r1, [sp, #12]
 8002c12:	4638      	mov	r0, r7
 8002c14:	f001 fa74 	bl	8004100 <strncmp>
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	d166      	bne.n	8002cea <__gethex+0x124>
 8002c1c:	9b01      	ldr	r3, [sp, #4]
 8002c1e:	5cf8      	ldrb	r0, [r7, r3]
 8002c20:	18fe      	adds	r6, r7, r3
 8002c22:	f7ff ffbb 	bl	8002b9c <__hexdig_fun>
 8002c26:	2800      	cmp	r0, #0
 8002c28:	d062      	beq.n	8002cf0 <__gethex+0x12a>
 8002c2a:	4633      	mov	r3, r6
 8002c2c:	7818      	ldrb	r0, [r3, #0]
 8002c2e:	2830      	cmp	r0, #48	; 0x30
 8002c30:	461f      	mov	r7, r3
 8002c32:	f103 0301 	add.w	r3, r3, #1
 8002c36:	d0f9      	beq.n	8002c2c <__gethex+0x66>
 8002c38:	f7ff ffb0 	bl	8002b9c <__hexdig_fun>
 8002c3c:	fab0 f580 	clz	r5, r0
 8002c40:	096d      	lsrs	r5, r5, #5
 8002c42:	4634      	mov	r4, r6
 8002c44:	f04f 0b01 	mov.w	fp, #1
 8002c48:	463a      	mov	r2, r7
 8002c4a:	4616      	mov	r6, r2
 8002c4c:	3201      	adds	r2, #1
 8002c4e:	7830      	ldrb	r0, [r6, #0]
 8002c50:	f7ff ffa4 	bl	8002b9c <__hexdig_fun>
 8002c54:	2800      	cmp	r0, #0
 8002c56:	d1f8      	bne.n	8002c4a <__gethex+0x84>
 8002c58:	9a01      	ldr	r2, [sp, #4]
 8002c5a:	9903      	ldr	r1, [sp, #12]
 8002c5c:	4630      	mov	r0, r6
 8002c5e:	f001 fa4f 	bl	8004100 <strncmp>
 8002c62:	b950      	cbnz	r0, 8002c7a <__gethex+0xb4>
 8002c64:	b954      	cbnz	r4, 8002c7c <__gethex+0xb6>
 8002c66:	9b01      	ldr	r3, [sp, #4]
 8002c68:	18f4      	adds	r4, r6, r3
 8002c6a:	4622      	mov	r2, r4
 8002c6c:	4616      	mov	r6, r2
 8002c6e:	3201      	adds	r2, #1
 8002c70:	7830      	ldrb	r0, [r6, #0]
 8002c72:	f7ff ff93 	bl	8002b9c <__hexdig_fun>
 8002c76:	2800      	cmp	r0, #0
 8002c78:	d1f8      	bne.n	8002c6c <__gethex+0xa6>
 8002c7a:	b10c      	cbz	r4, 8002c80 <__gethex+0xba>
 8002c7c:	1ba4      	subs	r4, r4, r6
 8002c7e:	00a4      	lsls	r4, r4, #2
 8002c80:	7833      	ldrb	r3, [r6, #0]
 8002c82:	2b50      	cmp	r3, #80	; 0x50
 8002c84:	d001      	beq.n	8002c8a <__gethex+0xc4>
 8002c86:	2b70      	cmp	r3, #112	; 0x70
 8002c88:	d140      	bne.n	8002d0c <__gethex+0x146>
 8002c8a:	7873      	ldrb	r3, [r6, #1]
 8002c8c:	2b2b      	cmp	r3, #43	; 0x2b
 8002c8e:	d031      	beq.n	8002cf4 <__gethex+0x12e>
 8002c90:	2b2d      	cmp	r3, #45	; 0x2d
 8002c92:	d033      	beq.n	8002cfc <__gethex+0x136>
 8002c94:	1c71      	adds	r1, r6, #1
 8002c96:	f04f 0900 	mov.w	r9, #0
 8002c9a:	7808      	ldrb	r0, [r1, #0]
 8002c9c:	f7ff ff7e 	bl	8002b9c <__hexdig_fun>
 8002ca0:	1e43      	subs	r3, r0, #1
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b18      	cmp	r3, #24
 8002ca6:	d831      	bhi.n	8002d0c <__gethex+0x146>
 8002ca8:	f1a0 0210 	sub.w	r2, r0, #16
 8002cac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8002cb0:	f7ff ff74 	bl	8002b9c <__hexdig_fun>
 8002cb4:	1e43      	subs	r3, r0, #1
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b18      	cmp	r3, #24
 8002cba:	d922      	bls.n	8002d02 <__gethex+0x13c>
 8002cbc:	f1b9 0f00 	cmp.w	r9, #0
 8002cc0:	d000      	beq.n	8002cc4 <__gethex+0xfe>
 8002cc2:	4252      	negs	r2, r2
 8002cc4:	4414      	add	r4, r2
 8002cc6:	f8ca 1000 	str.w	r1, [sl]
 8002cca:	b30d      	cbz	r5, 8002d10 <__gethex+0x14a>
 8002ccc:	f1bb 0f00 	cmp.w	fp, #0
 8002cd0:	bf0c      	ite	eq
 8002cd2:	2706      	moveq	r7, #6
 8002cd4:	2700      	movne	r7, #0
 8002cd6:	4638      	mov	r0, r7
 8002cd8:	b00b      	add	sp, #44	; 0x2c
 8002cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cde:	f10b 0b01 	add.w	fp, fp, #1
 8002ce2:	e78a      	b.n	8002bfa <__gethex+0x34>
 8002ce4:	2500      	movs	r5, #0
 8002ce6:	462c      	mov	r4, r5
 8002ce8:	e7ae      	b.n	8002c48 <__gethex+0x82>
 8002cea:	463e      	mov	r6, r7
 8002cec:	2501      	movs	r5, #1
 8002cee:	e7c7      	b.n	8002c80 <__gethex+0xba>
 8002cf0:	4604      	mov	r4, r0
 8002cf2:	e7fb      	b.n	8002cec <__gethex+0x126>
 8002cf4:	f04f 0900 	mov.w	r9, #0
 8002cf8:	1cb1      	adds	r1, r6, #2
 8002cfa:	e7ce      	b.n	8002c9a <__gethex+0xd4>
 8002cfc:	f04f 0901 	mov.w	r9, #1
 8002d00:	e7fa      	b.n	8002cf8 <__gethex+0x132>
 8002d02:	230a      	movs	r3, #10
 8002d04:	fb03 0202 	mla	r2, r3, r2, r0
 8002d08:	3a10      	subs	r2, #16
 8002d0a:	e7cf      	b.n	8002cac <__gethex+0xe6>
 8002d0c:	4631      	mov	r1, r6
 8002d0e:	e7da      	b.n	8002cc6 <__gethex+0x100>
 8002d10:	1bf3      	subs	r3, r6, r7
 8002d12:	3b01      	subs	r3, #1
 8002d14:	4629      	mov	r1, r5
 8002d16:	2b07      	cmp	r3, #7
 8002d18:	dc49      	bgt.n	8002dae <__gethex+0x1e8>
 8002d1a:	9802      	ldr	r0, [sp, #8]
 8002d1c:	f000 fa51 	bl	80031c2 <_Balloc>
 8002d20:	9b01      	ldr	r3, [sp, #4]
 8002d22:	f100 0914 	add.w	r9, r0, #20
 8002d26:	f04f 0b00 	mov.w	fp, #0
 8002d2a:	f1c3 0301 	rsb	r3, r3, #1
 8002d2e:	4605      	mov	r5, r0
 8002d30:	f8cd 9010 	str.w	r9, [sp, #16]
 8002d34:	46da      	mov	sl, fp
 8002d36:	9308      	str	r3, [sp, #32]
 8002d38:	42b7      	cmp	r7, r6
 8002d3a:	d33b      	bcc.n	8002db4 <__gethex+0x1ee>
 8002d3c:	9804      	ldr	r0, [sp, #16]
 8002d3e:	f840 ab04 	str.w	sl, [r0], #4
 8002d42:	eba0 0009 	sub.w	r0, r0, r9
 8002d46:	1080      	asrs	r0, r0, #2
 8002d48:	6128      	str	r0, [r5, #16]
 8002d4a:	0147      	lsls	r7, r0, #5
 8002d4c:	4650      	mov	r0, sl
 8002d4e:	f000 fafc 	bl	800334a <__hi0bits>
 8002d52:	f8d8 6000 	ldr.w	r6, [r8]
 8002d56:	1a3f      	subs	r7, r7, r0
 8002d58:	42b7      	cmp	r7, r6
 8002d5a:	dd64      	ble.n	8002e26 <__gethex+0x260>
 8002d5c:	1bbf      	subs	r7, r7, r6
 8002d5e:	4639      	mov	r1, r7
 8002d60:	4628      	mov	r0, r5
 8002d62:	f000 fe0b 	bl	800397c <__any_on>
 8002d66:	4682      	mov	sl, r0
 8002d68:	b178      	cbz	r0, 8002d8a <__gethex+0x1c4>
 8002d6a:	1e7b      	subs	r3, r7, #1
 8002d6c:	1159      	asrs	r1, r3, #5
 8002d6e:	f003 021f 	and.w	r2, r3, #31
 8002d72:	f04f 0a01 	mov.w	sl, #1
 8002d76:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8002d7a:	fa0a f202 	lsl.w	r2, sl, r2
 8002d7e:	420a      	tst	r2, r1
 8002d80:	d003      	beq.n	8002d8a <__gethex+0x1c4>
 8002d82:	4553      	cmp	r3, sl
 8002d84:	dc46      	bgt.n	8002e14 <__gethex+0x24e>
 8002d86:	f04f 0a02 	mov.w	sl, #2
 8002d8a:	4639      	mov	r1, r7
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	f7ff fecb 	bl	8002b28 <rshift>
 8002d92:	443c      	add	r4, r7
 8002d94:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002d98:	42a3      	cmp	r3, r4
 8002d9a:	da52      	bge.n	8002e42 <__gethex+0x27c>
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	9802      	ldr	r0, [sp, #8]
 8002da0:	f000 fa43 	bl	800322a <_Bfree>
 8002da4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8002da6:	2300      	movs	r3, #0
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	27a3      	movs	r7, #163	; 0xa3
 8002dac:	e793      	b.n	8002cd6 <__gethex+0x110>
 8002dae:	3101      	adds	r1, #1
 8002db0:	105b      	asrs	r3, r3, #1
 8002db2:	e7b0      	b.n	8002d16 <__gethex+0x150>
 8002db4:	1e73      	subs	r3, r6, #1
 8002db6:	9305      	str	r3, [sp, #20]
 8002db8:	9a07      	ldr	r2, [sp, #28]
 8002dba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d018      	beq.n	8002df4 <__gethex+0x22e>
 8002dc2:	f1bb 0f20 	cmp.w	fp, #32
 8002dc6:	d107      	bne.n	8002dd8 <__gethex+0x212>
 8002dc8:	9b04      	ldr	r3, [sp, #16]
 8002dca:	f8c3 a000 	str.w	sl, [r3]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	f04f 0a00 	mov.w	sl, #0
 8002dd4:	9304      	str	r3, [sp, #16]
 8002dd6:	46d3      	mov	fp, sl
 8002dd8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8002ddc:	f7ff fede 	bl	8002b9c <__hexdig_fun>
 8002de0:	f000 000f 	and.w	r0, r0, #15
 8002de4:	fa00 f00b 	lsl.w	r0, r0, fp
 8002de8:	ea4a 0a00 	orr.w	sl, sl, r0
 8002dec:	f10b 0b04 	add.w	fp, fp, #4
 8002df0:	9b05      	ldr	r3, [sp, #20]
 8002df2:	e00d      	b.n	8002e10 <__gethex+0x24a>
 8002df4:	9b05      	ldr	r3, [sp, #20]
 8002df6:	9a08      	ldr	r2, [sp, #32]
 8002df8:	4413      	add	r3, r2
 8002dfa:	42bb      	cmp	r3, r7
 8002dfc:	d3e1      	bcc.n	8002dc2 <__gethex+0x1fc>
 8002dfe:	4618      	mov	r0, r3
 8002e00:	9a01      	ldr	r2, [sp, #4]
 8002e02:	9903      	ldr	r1, [sp, #12]
 8002e04:	9309      	str	r3, [sp, #36]	; 0x24
 8002e06:	f001 f97b 	bl	8004100 <strncmp>
 8002e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e0c:	2800      	cmp	r0, #0
 8002e0e:	d1d8      	bne.n	8002dc2 <__gethex+0x1fc>
 8002e10:	461e      	mov	r6, r3
 8002e12:	e791      	b.n	8002d38 <__gethex+0x172>
 8002e14:	1eb9      	subs	r1, r7, #2
 8002e16:	4628      	mov	r0, r5
 8002e18:	f000 fdb0 	bl	800397c <__any_on>
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	d0b2      	beq.n	8002d86 <__gethex+0x1c0>
 8002e20:	f04f 0a03 	mov.w	sl, #3
 8002e24:	e7b1      	b.n	8002d8a <__gethex+0x1c4>
 8002e26:	da09      	bge.n	8002e3c <__gethex+0x276>
 8002e28:	1bf7      	subs	r7, r6, r7
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	463a      	mov	r2, r7
 8002e2e:	9802      	ldr	r0, [sp, #8]
 8002e30:	f000 fbc6 	bl	80035c0 <__lshift>
 8002e34:	1be4      	subs	r4, r4, r7
 8002e36:	4605      	mov	r5, r0
 8002e38:	f100 0914 	add.w	r9, r0, #20
 8002e3c:	f04f 0a00 	mov.w	sl, #0
 8002e40:	e7a8      	b.n	8002d94 <__gethex+0x1ce>
 8002e42:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8002e46:	42a0      	cmp	r0, r4
 8002e48:	dd6a      	ble.n	8002f20 <__gethex+0x35a>
 8002e4a:	1b04      	subs	r4, r0, r4
 8002e4c:	42a6      	cmp	r6, r4
 8002e4e:	dc2e      	bgt.n	8002eae <__gethex+0x2e8>
 8002e50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d022      	beq.n	8002e9e <__gethex+0x2d8>
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d024      	beq.n	8002ea6 <__gethex+0x2e0>
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d115      	bne.n	8002e8c <__gethex+0x2c6>
 8002e60:	42a6      	cmp	r6, r4
 8002e62:	d113      	bne.n	8002e8c <__gethex+0x2c6>
 8002e64:	2e01      	cmp	r6, #1
 8002e66:	dc0b      	bgt.n	8002e80 <__gethex+0x2ba>
 8002e68:	9a06      	ldr	r2, [sp, #24]
 8002e6a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	2301      	movs	r3, #1
 8002e72:	612b      	str	r3, [r5, #16]
 8002e74:	f8c9 3000 	str.w	r3, [r9]
 8002e78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002e7a:	2762      	movs	r7, #98	; 0x62
 8002e7c:	601d      	str	r5, [r3, #0]
 8002e7e:	e72a      	b.n	8002cd6 <__gethex+0x110>
 8002e80:	1e71      	subs	r1, r6, #1
 8002e82:	4628      	mov	r0, r5
 8002e84:	f000 fd7a 	bl	800397c <__any_on>
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	d1ed      	bne.n	8002e68 <__gethex+0x2a2>
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	9802      	ldr	r0, [sp, #8]
 8002e90:	f000 f9cb 	bl	800322a <_Bfree>
 8002e94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8002e96:	2300      	movs	r3, #0
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	2750      	movs	r7, #80	; 0x50
 8002e9c:	e71b      	b.n	8002cd6 <__gethex+0x110>
 8002e9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0e1      	beq.n	8002e68 <__gethex+0x2a2>
 8002ea4:	e7f2      	b.n	8002e8c <__gethex+0x2c6>
 8002ea6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1dd      	bne.n	8002e68 <__gethex+0x2a2>
 8002eac:	e7ee      	b.n	8002e8c <__gethex+0x2c6>
 8002eae:	1e67      	subs	r7, r4, #1
 8002eb0:	f1ba 0f00 	cmp.w	sl, #0
 8002eb4:	d131      	bne.n	8002f1a <__gethex+0x354>
 8002eb6:	b127      	cbz	r7, 8002ec2 <__gethex+0x2fc>
 8002eb8:	4639      	mov	r1, r7
 8002eba:	4628      	mov	r0, r5
 8002ebc:	f000 fd5e 	bl	800397c <__any_on>
 8002ec0:	4682      	mov	sl, r0
 8002ec2:	117a      	asrs	r2, r7, #5
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f007 071f 	and.w	r7, r7, #31
 8002eca:	fa03 f707 	lsl.w	r7, r3, r7
 8002ece:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	421f      	tst	r7, r3
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	bf18      	it	ne
 8002eda:	f04a 0a02 	orrne.w	sl, sl, #2
 8002ede:	1b36      	subs	r6, r6, r4
 8002ee0:	f7ff fe22 	bl	8002b28 <rshift>
 8002ee4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8002ee8:	2702      	movs	r7, #2
 8002eea:	f1ba 0f00 	cmp.w	sl, #0
 8002eee:	d048      	beq.n	8002f82 <__gethex+0x3bc>
 8002ef0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d015      	beq.n	8002f24 <__gethex+0x35e>
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d017      	beq.n	8002f2c <__gethex+0x366>
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d109      	bne.n	8002f14 <__gethex+0x34e>
 8002f00:	f01a 0f02 	tst.w	sl, #2
 8002f04:	d006      	beq.n	8002f14 <__gethex+0x34e>
 8002f06:	f8d9 3000 	ldr.w	r3, [r9]
 8002f0a:	ea4a 0a03 	orr.w	sl, sl, r3
 8002f0e:	f01a 0f01 	tst.w	sl, #1
 8002f12:	d10e      	bne.n	8002f32 <__gethex+0x36c>
 8002f14:	f047 0710 	orr.w	r7, r7, #16
 8002f18:	e033      	b.n	8002f82 <__gethex+0x3bc>
 8002f1a:	f04f 0a01 	mov.w	sl, #1
 8002f1e:	e7d0      	b.n	8002ec2 <__gethex+0x2fc>
 8002f20:	2701      	movs	r7, #1
 8002f22:	e7e2      	b.n	8002eea <__gethex+0x324>
 8002f24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002f26:	f1c3 0301 	rsb	r3, r3, #1
 8002f2a:	9315      	str	r3, [sp, #84]	; 0x54
 8002f2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <__gethex+0x34e>
 8002f32:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8002f36:	f105 0314 	add.w	r3, r5, #20
 8002f3a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8002f3e:	eb03 010a 	add.w	r1, r3, sl
 8002f42:	f04f 0c00 	mov.w	ip, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f4c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8002f50:	d01c      	beq.n	8002f8c <__gethex+0x3c6>
 8002f52:	3201      	adds	r2, #1
 8002f54:	6002      	str	r2, [r0, #0]
 8002f56:	2f02      	cmp	r7, #2
 8002f58:	f105 0314 	add.w	r3, r5, #20
 8002f5c:	d138      	bne.n	8002fd0 <__gethex+0x40a>
 8002f5e:	f8d8 2000 	ldr.w	r2, [r8]
 8002f62:	3a01      	subs	r2, #1
 8002f64:	42b2      	cmp	r2, r6
 8002f66:	d10a      	bne.n	8002f7e <__gethex+0x3b8>
 8002f68:	1171      	asrs	r1, r6, #5
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f006 061f 	and.w	r6, r6, #31
 8002f70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f74:	fa02 f606 	lsl.w	r6, r2, r6
 8002f78:	421e      	tst	r6, r3
 8002f7a:	bf18      	it	ne
 8002f7c:	4617      	movne	r7, r2
 8002f7e:	f047 0720 	orr.w	r7, r7, #32
 8002f82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002f84:	601d      	str	r5, [r3, #0]
 8002f86:	9b06      	ldr	r3, [sp, #24]
 8002f88:	601c      	str	r4, [r3, #0]
 8002f8a:	e6a4      	b.n	8002cd6 <__gethex+0x110>
 8002f8c:	4299      	cmp	r1, r3
 8002f8e:	f843 cc04 	str.w	ip, [r3, #-4]
 8002f92:	d8d8      	bhi.n	8002f46 <__gethex+0x380>
 8002f94:	68ab      	ldr	r3, [r5, #8]
 8002f96:	4599      	cmp	r9, r3
 8002f98:	db12      	blt.n	8002fc0 <__gethex+0x3fa>
 8002f9a:	6869      	ldr	r1, [r5, #4]
 8002f9c:	9802      	ldr	r0, [sp, #8]
 8002f9e:	3101      	adds	r1, #1
 8002fa0:	f000 f90f 	bl	80031c2 <_Balloc>
 8002fa4:	692a      	ldr	r2, [r5, #16]
 8002fa6:	3202      	adds	r2, #2
 8002fa8:	f105 010c 	add.w	r1, r5, #12
 8002fac:	4683      	mov	fp, r0
 8002fae:	0092      	lsls	r2, r2, #2
 8002fb0:	300c      	adds	r0, #12
 8002fb2:	f000 f8fb 	bl	80031ac <memcpy>
 8002fb6:	4629      	mov	r1, r5
 8002fb8:	9802      	ldr	r0, [sp, #8]
 8002fba:	f000 f936 	bl	800322a <_Bfree>
 8002fbe:	465d      	mov	r5, fp
 8002fc0:	692b      	ldr	r3, [r5, #16]
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002fc8:	612a      	str	r2, [r5, #16]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	615a      	str	r2, [r3, #20]
 8002fce:	e7c2      	b.n	8002f56 <__gethex+0x390>
 8002fd0:	692a      	ldr	r2, [r5, #16]
 8002fd2:	454a      	cmp	r2, r9
 8002fd4:	dd0b      	ble.n	8002fee <__gethex+0x428>
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	4628      	mov	r0, r5
 8002fda:	f7ff fda5 	bl	8002b28 <rshift>
 8002fde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002fe2:	3401      	adds	r4, #1
 8002fe4:	42a3      	cmp	r3, r4
 8002fe6:	f6ff aed9 	blt.w	8002d9c <__gethex+0x1d6>
 8002fea:	2701      	movs	r7, #1
 8002fec:	e7c7      	b.n	8002f7e <__gethex+0x3b8>
 8002fee:	f016 061f 	ands.w	r6, r6, #31
 8002ff2:	d0fa      	beq.n	8002fea <__gethex+0x424>
 8002ff4:	449a      	add	sl, r3
 8002ff6:	f1c6 0620 	rsb	r6, r6, #32
 8002ffa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8002ffe:	f000 f9a4 	bl	800334a <__hi0bits>
 8003002:	42b0      	cmp	r0, r6
 8003004:	dbe7      	blt.n	8002fd6 <__gethex+0x410>
 8003006:	e7f0      	b.n	8002fea <__gethex+0x424>

08003008 <L_shift>:
 8003008:	f1c2 0208 	rsb	r2, r2, #8
 800300c:	0092      	lsls	r2, r2, #2
 800300e:	b570      	push	{r4, r5, r6, lr}
 8003010:	f1c2 0620 	rsb	r6, r2, #32
 8003014:	6843      	ldr	r3, [r0, #4]
 8003016:	6804      	ldr	r4, [r0, #0]
 8003018:	fa03 f506 	lsl.w	r5, r3, r6
 800301c:	432c      	orrs	r4, r5
 800301e:	40d3      	lsrs	r3, r2
 8003020:	6004      	str	r4, [r0, #0]
 8003022:	f840 3f04 	str.w	r3, [r0, #4]!
 8003026:	4288      	cmp	r0, r1
 8003028:	d3f4      	bcc.n	8003014 <L_shift+0xc>
 800302a:	bd70      	pop	{r4, r5, r6, pc}

0800302c <__match>:
 800302c:	b530      	push	{r4, r5, lr}
 800302e:	6803      	ldr	r3, [r0, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003036:	b914      	cbnz	r4, 800303e <__match+0x12>
 8003038:	6003      	str	r3, [r0, #0]
 800303a:	2001      	movs	r0, #1
 800303c:	bd30      	pop	{r4, r5, pc}
 800303e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003042:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8003046:	2d19      	cmp	r5, #25
 8003048:	bf98      	it	ls
 800304a:	3220      	addls	r2, #32
 800304c:	42a2      	cmp	r2, r4
 800304e:	d0f0      	beq.n	8003032 <__match+0x6>
 8003050:	2000      	movs	r0, #0
 8003052:	e7f3      	b.n	800303c <__match+0x10>

08003054 <__hexnan>:
 8003054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003058:	680b      	ldr	r3, [r1, #0]
 800305a:	6801      	ldr	r1, [r0, #0]
 800305c:	115f      	asrs	r7, r3, #5
 800305e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8003062:	f013 031f 	ands.w	r3, r3, #31
 8003066:	b087      	sub	sp, #28
 8003068:	bf18      	it	ne
 800306a:	3704      	addne	r7, #4
 800306c:	2500      	movs	r5, #0
 800306e:	1f3e      	subs	r6, r7, #4
 8003070:	4682      	mov	sl, r0
 8003072:	4690      	mov	r8, r2
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	f847 5c04 	str.w	r5, [r7, #-4]
 800307a:	46b1      	mov	r9, r6
 800307c:	4634      	mov	r4, r6
 800307e:	9502      	str	r5, [sp, #8]
 8003080:	46ab      	mov	fp, r5
 8003082:	784a      	ldrb	r2, [r1, #1]
 8003084:	1c4b      	adds	r3, r1, #1
 8003086:	9303      	str	r3, [sp, #12]
 8003088:	b342      	cbz	r2, 80030dc <__hexnan+0x88>
 800308a:	4610      	mov	r0, r2
 800308c:	9105      	str	r1, [sp, #20]
 800308e:	9204      	str	r2, [sp, #16]
 8003090:	f7ff fd84 	bl	8002b9c <__hexdig_fun>
 8003094:	2800      	cmp	r0, #0
 8003096:	d143      	bne.n	8003120 <__hexnan+0xcc>
 8003098:	9a04      	ldr	r2, [sp, #16]
 800309a:	9905      	ldr	r1, [sp, #20]
 800309c:	2a20      	cmp	r2, #32
 800309e:	d818      	bhi.n	80030d2 <__hexnan+0x7e>
 80030a0:	9b02      	ldr	r3, [sp, #8]
 80030a2:	459b      	cmp	fp, r3
 80030a4:	dd13      	ble.n	80030ce <__hexnan+0x7a>
 80030a6:	454c      	cmp	r4, r9
 80030a8:	d206      	bcs.n	80030b8 <__hexnan+0x64>
 80030aa:	2d07      	cmp	r5, #7
 80030ac:	dc04      	bgt.n	80030b8 <__hexnan+0x64>
 80030ae:	462a      	mov	r2, r5
 80030b0:	4649      	mov	r1, r9
 80030b2:	4620      	mov	r0, r4
 80030b4:	f7ff ffa8 	bl	8003008 <L_shift>
 80030b8:	4544      	cmp	r4, r8
 80030ba:	d944      	bls.n	8003146 <__hexnan+0xf2>
 80030bc:	2300      	movs	r3, #0
 80030be:	f1a4 0904 	sub.w	r9, r4, #4
 80030c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80030c6:	f8cd b008 	str.w	fp, [sp, #8]
 80030ca:	464c      	mov	r4, r9
 80030cc:	461d      	mov	r5, r3
 80030ce:	9903      	ldr	r1, [sp, #12]
 80030d0:	e7d7      	b.n	8003082 <__hexnan+0x2e>
 80030d2:	2a29      	cmp	r2, #41	; 0x29
 80030d4:	d14a      	bne.n	800316c <__hexnan+0x118>
 80030d6:	3102      	adds	r1, #2
 80030d8:	f8ca 1000 	str.w	r1, [sl]
 80030dc:	f1bb 0f00 	cmp.w	fp, #0
 80030e0:	d044      	beq.n	800316c <__hexnan+0x118>
 80030e2:	454c      	cmp	r4, r9
 80030e4:	d206      	bcs.n	80030f4 <__hexnan+0xa0>
 80030e6:	2d07      	cmp	r5, #7
 80030e8:	dc04      	bgt.n	80030f4 <__hexnan+0xa0>
 80030ea:	462a      	mov	r2, r5
 80030ec:	4649      	mov	r1, r9
 80030ee:	4620      	mov	r0, r4
 80030f0:	f7ff ff8a 	bl	8003008 <L_shift>
 80030f4:	4544      	cmp	r4, r8
 80030f6:	d928      	bls.n	800314a <__hexnan+0xf6>
 80030f8:	4643      	mov	r3, r8
 80030fa:	f854 2b04 	ldr.w	r2, [r4], #4
 80030fe:	f843 2b04 	str.w	r2, [r3], #4
 8003102:	42a6      	cmp	r6, r4
 8003104:	d2f9      	bcs.n	80030fa <__hexnan+0xa6>
 8003106:	2200      	movs	r2, #0
 8003108:	f843 2b04 	str.w	r2, [r3], #4
 800310c:	429e      	cmp	r6, r3
 800310e:	d2fb      	bcs.n	8003108 <__hexnan+0xb4>
 8003110:	6833      	ldr	r3, [r6, #0]
 8003112:	b91b      	cbnz	r3, 800311c <__hexnan+0xc8>
 8003114:	4546      	cmp	r6, r8
 8003116:	d127      	bne.n	8003168 <__hexnan+0x114>
 8003118:	2301      	movs	r3, #1
 800311a:	6033      	str	r3, [r6, #0]
 800311c:	2005      	movs	r0, #5
 800311e:	e026      	b.n	800316e <__hexnan+0x11a>
 8003120:	3501      	adds	r5, #1
 8003122:	2d08      	cmp	r5, #8
 8003124:	f10b 0b01 	add.w	fp, fp, #1
 8003128:	dd06      	ble.n	8003138 <__hexnan+0xe4>
 800312a:	4544      	cmp	r4, r8
 800312c:	d9cf      	bls.n	80030ce <__hexnan+0x7a>
 800312e:	2300      	movs	r3, #0
 8003130:	f844 3c04 	str.w	r3, [r4, #-4]
 8003134:	2501      	movs	r5, #1
 8003136:	3c04      	subs	r4, #4
 8003138:	6822      	ldr	r2, [r4, #0]
 800313a:	f000 000f 	and.w	r0, r0, #15
 800313e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8003142:	6020      	str	r0, [r4, #0]
 8003144:	e7c3      	b.n	80030ce <__hexnan+0x7a>
 8003146:	2508      	movs	r5, #8
 8003148:	e7c1      	b.n	80030ce <__hexnan+0x7a>
 800314a:	9b01      	ldr	r3, [sp, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0df      	beq.n	8003110 <__hexnan+0xbc>
 8003150:	f04f 32ff 	mov.w	r2, #4294967295
 8003154:	f1c3 0320 	rsb	r3, r3, #32
 8003158:	fa22 f303 	lsr.w	r3, r2, r3
 800315c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8003160:	401a      	ands	r2, r3
 8003162:	f847 2c04 	str.w	r2, [r7, #-4]
 8003166:	e7d3      	b.n	8003110 <__hexnan+0xbc>
 8003168:	3e04      	subs	r6, #4
 800316a:	e7d1      	b.n	8003110 <__hexnan+0xbc>
 800316c:	2004      	movs	r0, #4
 800316e:	b007      	add	sp, #28
 8003170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003174 <__localeconv_l>:
 8003174:	30f0      	adds	r0, #240	; 0xf0
 8003176:	4770      	bx	lr

08003178 <malloc>:
 8003178:	4b02      	ldr	r3, [pc, #8]	; (8003184 <malloc+0xc>)
 800317a:	4601      	mov	r1, r0
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	f000 bc7b 	b.w	8003a78 <_malloc_r>
 8003182:	bf00      	nop
 8003184:	20000058 	.word	0x20000058

08003188 <__ascii_mbtowc>:
 8003188:	b082      	sub	sp, #8
 800318a:	b901      	cbnz	r1, 800318e <__ascii_mbtowc+0x6>
 800318c:	a901      	add	r1, sp, #4
 800318e:	b142      	cbz	r2, 80031a2 <__ascii_mbtowc+0x1a>
 8003190:	b14b      	cbz	r3, 80031a6 <__ascii_mbtowc+0x1e>
 8003192:	7813      	ldrb	r3, [r2, #0]
 8003194:	600b      	str	r3, [r1, #0]
 8003196:	7812      	ldrb	r2, [r2, #0]
 8003198:	1c10      	adds	r0, r2, #0
 800319a:	bf18      	it	ne
 800319c:	2001      	movne	r0, #1
 800319e:	b002      	add	sp, #8
 80031a0:	4770      	bx	lr
 80031a2:	4610      	mov	r0, r2
 80031a4:	e7fb      	b.n	800319e <__ascii_mbtowc+0x16>
 80031a6:	f06f 0001 	mvn.w	r0, #1
 80031aa:	e7f8      	b.n	800319e <__ascii_mbtowc+0x16>

080031ac <memcpy>:
 80031ac:	b510      	push	{r4, lr}
 80031ae:	1e43      	subs	r3, r0, #1
 80031b0:	440a      	add	r2, r1
 80031b2:	4291      	cmp	r1, r2
 80031b4:	d100      	bne.n	80031b8 <memcpy+0xc>
 80031b6:	bd10      	pop	{r4, pc}
 80031b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031c0:	e7f7      	b.n	80031b2 <memcpy+0x6>

080031c2 <_Balloc>:
 80031c2:	b570      	push	{r4, r5, r6, lr}
 80031c4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80031c6:	4604      	mov	r4, r0
 80031c8:	460e      	mov	r6, r1
 80031ca:	b93d      	cbnz	r5, 80031dc <_Balloc+0x1a>
 80031cc:	2010      	movs	r0, #16
 80031ce:	f7ff ffd3 	bl	8003178 <malloc>
 80031d2:	6260      	str	r0, [r4, #36]	; 0x24
 80031d4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80031d8:	6005      	str	r5, [r0, #0]
 80031da:	60c5      	str	r5, [r0, #12]
 80031dc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80031de:	68eb      	ldr	r3, [r5, #12]
 80031e0:	b183      	cbz	r3, 8003204 <_Balloc+0x42>
 80031e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80031ea:	b9b8      	cbnz	r0, 800321c <_Balloc+0x5a>
 80031ec:	2101      	movs	r1, #1
 80031ee:	fa01 f506 	lsl.w	r5, r1, r6
 80031f2:	1d6a      	adds	r2, r5, #5
 80031f4:	0092      	lsls	r2, r2, #2
 80031f6:	4620      	mov	r0, r4
 80031f8:	f000 fbe1 	bl	80039be <_calloc_r>
 80031fc:	b160      	cbz	r0, 8003218 <_Balloc+0x56>
 80031fe:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003202:	e00e      	b.n	8003222 <_Balloc+0x60>
 8003204:	2221      	movs	r2, #33	; 0x21
 8003206:	2104      	movs	r1, #4
 8003208:	4620      	mov	r0, r4
 800320a:	f000 fbd8 	bl	80039be <_calloc_r>
 800320e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003210:	60e8      	str	r0, [r5, #12]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e4      	bne.n	80031e2 <_Balloc+0x20>
 8003218:	2000      	movs	r0, #0
 800321a:	bd70      	pop	{r4, r5, r6, pc}
 800321c:	6802      	ldr	r2, [r0, #0]
 800321e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003222:	2300      	movs	r3, #0
 8003224:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003228:	e7f7      	b.n	800321a <_Balloc+0x58>

0800322a <_Bfree>:
 800322a:	b570      	push	{r4, r5, r6, lr}
 800322c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800322e:	4606      	mov	r6, r0
 8003230:	460d      	mov	r5, r1
 8003232:	b93c      	cbnz	r4, 8003244 <_Bfree+0x1a>
 8003234:	2010      	movs	r0, #16
 8003236:	f7ff ff9f 	bl	8003178 <malloc>
 800323a:	6270      	str	r0, [r6, #36]	; 0x24
 800323c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003240:	6004      	str	r4, [r0, #0]
 8003242:	60c4      	str	r4, [r0, #12]
 8003244:	b13d      	cbz	r5, 8003256 <_Bfree+0x2c>
 8003246:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003248:	686a      	ldr	r2, [r5, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003250:	6029      	str	r1, [r5, #0]
 8003252:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003256:	bd70      	pop	{r4, r5, r6, pc}

08003258 <__multadd>:
 8003258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800325c:	690d      	ldr	r5, [r1, #16]
 800325e:	461f      	mov	r7, r3
 8003260:	4606      	mov	r6, r0
 8003262:	460c      	mov	r4, r1
 8003264:	f101 0c14 	add.w	ip, r1, #20
 8003268:	2300      	movs	r3, #0
 800326a:	f8dc 0000 	ldr.w	r0, [ip]
 800326e:	b281      	uxth	r1, r0
 8003270:	fb02 7101 	mla	r1, r2, r1, r7
 8003274:	0c0f      	lsrs	r7, r1, #16
 8003276:	0c00      	lsrs	r0, r0, #16
 8003278:	fb02 7000 	mla	r0, r2, r0, r7
 800327c:	b289      	uxth	r1, r1
 800327e:	3301      	adds	r3, #1
 8003280:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003284:	429d      	cmp	r5, r3
 8003286:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800328a:	f84c 1b04 	str.w	r1, [ip], #4
 800328e:	dcec      	bgt.n	800326a <__multadd+0x12>
 8003290:	b1d7      	cbz	r7, 80032c8 <__multadd+0x70>
 8003292:	68a3      	ldr	r3, [r4, #8]
 8003294:	42ab      	cmp	r3, r5
 8003296:	dc12      	bgt.n	80032be <__multadd+0x66>
 8003298:	6861      	ldr	r1, [r4, #4]
 800329a:	4630      	mov	r0, r6
 800329c:	3101      	adds	r1, #1
 800329e:	f7ff ff90 	bl	80031c2 <_Balloc>
 80032a2:	6922      	ldr	r2, [r4, #16]
 80032a4:	3202      	adds	r2, #2
 80032a6:	f104 010c 	add.w	r1, r4, #12
 80032aa:	4680      	mov	r8, r0
 80032ac:	0092      	lsls	r2, r2, #2
 80032ae:	300c      	adds	r0, #12
 80032b0:	f7ff ff7c 	bl	80031ac <memcpy>
 80032b4:	4621      	mov	r1, r4
 80032b6:	4630      	mov	r0, r6
 80032b8:	f7ff ffb7 	bl	800322a <_Bfree>
 80032bc:	4644      	mov	r4, r8
 80032be:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80032c2:	3501      	adds	r5, #1
 80032c4:	615f      	str	r7, [r3, #20]
 80032c6:	6125      	str	r5, [r4, #16]
 80032c8:	4620      	mov	r0, r4
 80032ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080032ce <__s2b>:
 80032ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032d2:	460c      	mov	r4, r1
 80032d4:	4615      	mov	r5, r2
 80032d6:	461f      	mov	r7, r3
 80032d8:	2209      	movs	r2, #9
 80032da:	3308      	adds	r3, #8
 80032dc:	4606      	mov	r6, r0
 80032de:	fb93 f3f2 	sdiv	r3, r3, r2
 80032e2:	2100      	movs	r1, #0
 80032e4:	2201      	movs	r2, #1
 80032e6:	429a      	cmp	r2, r3
 80032e8:	db20      	blt.n	800332c <__s2b+0x5e>
 80032ea:	4630      	mov	r0, r6
 80032ec:	f7ff ff69 	bl	80031c2 <_Balloc>
 80032f0:	9b08      	ldr	r3, [sp, #32]
 80032f2:	6143      	str	r3, [r0, #20]
 80032f4:	2d09      	cmp	r5, #9
 80032f6:	f04f 0301 	mov.w	r3, #1
 80032fa:	6103      	str	r3, [r0, #16]
 80032fc:	dd19      	ble.n	8003332 <__s2b+0x64>
 80032fe:	f104 0809 	add.w	r8, r4, #9
 8003302:	46c1      	mov	r9, r8
 8003304:	442c      	add	r4, r5
 8003306:	f819 3b01 	ldrb.w	r3, [r9], #1
 800330a:	4601      	mov	r1, r0
 800330c:	3b30      	subs	r3, #48	; 0x30
 800330e:	220a      	movs	r2, #10
 8003310:	4630      	mov	r0, r6
 8003312:	f7ff ffa1 	bl	8003258 <__multadd>
 8003316:	45a1      	cmp	r9, r4
 8003318:	d1f5      	bne.n	8003306 <__s2b+0x38>
 800331a:	eb08 0405 	add.w	r4, r8, r5
 800331e:	3c08      	subs	r4, #8
 8003320:	1b2d      	subs	r5, r5, r4
 8003322:	1963      	adds	r3, r4, r5
 8003324:	42bb      	cmp	r3, r7
 8003326:	db07      	blt.n	8003338 <__s2b+0x6a>
 8003328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800332c:	0052      	lsls	r2, r2, #1
 800332e:	3101      	adds	r1, #1
 8003330:	e7d9      	b.n	80032e6 <__s2b+0x18>
 8003332:	340a      	adds	r4, #10
 8003334:	2509      	movs	r5, #9
 8003336:	e7f3      	b.n	8003320 <__s2b+0x52>
 8003338:	f814 3b01 	ldrb.w	r3, [r4], #1
 800333c:	4601      	mov	r1, r0
 800333e:	3b30      	subs	r3, #48	; 0x30
 8003340:	220a      	movs	r2, #10
 8003342:	4630      	mov	r0, r6
 8003344:	f7ff ff88 	bl	8003258 <__multadd>
 8003348:	e7eb      	b.n	8003322 <__s2b+0x54>

0800334a <__hi0bits>:
 800334a:	0c02      	lsrs	r2, r0, #16
 800334c:	0412      	lsls	r2, r2, #16
 800334e:	4603      	mov	r3, r0
 8003350:	b9b2      	cbnz	r2, 8003380 <__hi0bits+0x36>
 8003352:	0403      	lsls	r3, r0, #16
 8003354:	2010      	movs	r0, #16
 8003356:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800335a:	bf04      	itt	eq
 800335c:	021b      	lsleq	r3, r3, #8
 800335e:	3008      	addeq	r0, #8
 8003360:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003364:	bf04      	itt	eq
 8003366:	011b      	lsleq	r3, r3, #4
 8003368:	3004      	addeq	r0, #4
 800336a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800336e:	bf04      	itt	eq
 8003370:	009b      	lsleq	r3, r3, #2
 8003372:	3002      	addeq	r0, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	db06      	blt.n	8003386 <__hi0bits+0x3c>
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	d503      	bpl.n	8003384 <__hi0bits+0x3a>
 800337c:	3001      	adds	r0, #1
 800337e:	4770      	bx	lr
 8003380:	2000      	movs	r0, #0
 8003382:	e7e8      	b.n	8003356 <__hi0bits+0xc>
 8003384:	2020      	movs	r0, #32
 8003386:	4770      	bx	lr

08003388 <__lo0bits>:
 8003388:	6803      	ldr	r3, [r0, #0]
 800338a:	f013 0207 	ands.w	r2, r3, #7
 800338e:	4601      	mov	r1, r0
 8003390:	d00b      	beq.n	80033aa <__lo0bits+0x22>
 8003392:	07da      	lsls	r2, r3, #31
 8003394:	d423      	bmi.n	80033de <__lo0bits+0x56>
 8003396:	0798      	lsls	r0, r3, #30
 8003398:	bf49      	itett	mi
 800339a:	085b      	lsrmi	r3, r3, #1
 800339c:	089b      	lsrpl	r3, r3, #2
 800339e:	2001      	movmi	r0, #1
 80033a0:	600b      	strmi	r3, [r1, #0]
 80033a2:	bf5c      	itt	pl
 80033a4:	600b      	strpl	r3, [r1, #0]
 80033a6:	2002      	movpl	r0, #2
 80033a8:	4770      	bx	lr
 80033aa:	b298      	uxth	r0, r3
 80033ac:	b9a8      	cbnz	r0, 80033da <__lo0bits+0x52>
 80033ae:	0c1b      	lsrs	r3, r3, #16
 80033b0:	2010      	movs	r0, #16
 80033b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80033b6:	bf04      	itt	eq
 80033b8:	0a1b      	lsreq	r3, r3, #8
 80033ba:	3008      	addeq	r0, #8
 80033bc:	071a      	lsls	r2, r3, #28
 80033be:	bf04      	itt	eq
 80033c0:	091b      	lsreq	r3, r3, #4
 80033c2:	3004      	addeq	r0, #4
 80033c4:	079a      	lsls	r2, r3, #30
 80033c6:	bf04      	itt	eq
 80033c8:	089b      	lsreq	r3, r3, #2
 80033ca:	3002      	addeq	r0, #2
 80033cc:	07da      	lsls	r2, r3, #31
 80033ce:	d402      	bmi.n	80033d6 <__lo0bits+0x4e>
 80033d0:	085b      	lsrs	r3, r3, #1
 80033d2:	d006      	beq.n	80033e2 <__lo0bits+0x5a>
 80033d4:	3001      	adds	r0, #1
 80033d6:	600b      	str	r3, [r1, #0]
 80033d8:	4770      	bx	lr
 80033da:	4610      	mov	r0, r2
 80033dc:	e7e9      	b.n	80033b2 <__lo0bits+0x2a>
 80033de:	2000      	movs	r0, #0
 80033e0:	4770      	bx	lr
 80033e2:	2020      	movs	r0, #32
 80033e4:	4770      	bx	lr

080033e6 <__i2b>:
 80033e6:	b510      	push	{r4, lr}
 80033e8:	460c      	mov	r4, r1
 80033ea:	2101      	movs	r1, #1
 80033ec:	f7ff fee9 	bl	80031c2 <_Balloc>
 80033f0:	2201      	movs	r2, #1
 80033f2:	6144      	str	r4, [r0, #20]
 80033f4:	6102      	str	r2, [r0, #16]
 80033f6:	bd10      	pop	{r4, pc}

080033f8 <__multiply>:
 80033f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033fc:	4614      	mov	r4, r2
 80033fe:	690a      	ldr	r2, [r1, #16]
 8003400:	6923      	ldr	r3, [r4, #16]
 8003402:	429a      	cmp	r2, r3
 8003404:	bfb8      	it	lt
 8003406:	460b      	movlt	r3, r1
 8003408:	4688      	mov	r8, r1
 800340a:	bfbc      	itt	lt
 800340c:	46a0      	movlt	r8, r4
 800340e:	461c      	movlt	r4, r3
 8003410:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003414:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003418:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800341c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003420:	eb07 0609 	add.w	r6, r7, r9
 8003424:	42b3      	cmp	r3, r6
 8003426:	bfb8      	it	lt
 8003428:	3101      	addlt	r1, #1
 800342a:	f7ff feca 	bl	80031c2 <_Balloc>
 800342e:	f100 0514 	add.w	r5, r0, #20
 8003432:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8003436:	462b      	mov	r3, r5
 8003438:	2200      	movs	r2, #0
 800343a:	4573      	cmp	r3, lr
 800343c:	d316      	bcc.n	800346c <__multiply+0x74>
 800343e:	f104 0214 	add.w	r2, r4, #20
 8003442:	f108 0114 	add.w	r1, r8, #20
 8003446:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800344a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	9b00      	ldr	r3, [sp, #0]
 8003452:	9201      	str	r2, [sp, #4]
 8003454:	4293      	cmp	r3, r2
 8003456:	d80c      	bhi.n	8003472 <__multiply+0x7a>
 8003458:	2e00      	cmp	r6, #0
 800345a:	dd03      	ble.n	8003464 <__multiply+0x6c>
 800345c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003460:	2b00      	cmp	r3, #0
 8003462:	d05d      	beq.n	8003520 <__multiply+0x128>
 8003464:	6106      	str	r6, [r0, #16]
 8003466:	b003      	add	sp, #12
 8003468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800346c:	f843 2b04 	str.w	r2, [r3], #4
 8003470:	e7e3      	b.n	800343a <__multiply+0x42>
 8003472:	f8b2 b000 	ldrh.w	fp, [r2]
 8003476:	f1bb 0f00 	cmp.w	fp, #0
 800347a:	d023      	beq.n	80034c4 <__multiply+0xcc>
 800347c:	4689      	mov	r9, r1
 800347e:	46ac      	mov	ip, r5
 8003480:	f04f 0800 	mov.w	r8, #0
 8003484:	f859 4b04 	ldr.w	r4, [r9], #4
 8003488:	f8dc a000 	ldr.w	sl, [ip]
 800348c:	b2a3      	uxth	r3, r4
 800348e:	fa1f fa8a 	uxth.w	sl, sl
 8003492:	fb0b a303 	mla	r3, fp, r3, sl
 8003496:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800349a:	f8dc 4000 	ldr.w	r4, [ip]
 800349e:	4443      	add	r3, r8
 80034a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80034a4:	fb0b 840a 	mla	r4, fp, sl, r8
 80034a8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80034ac:	46e2      	mov	sl, ip
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80034b4:	454f      	cmp	r7, r9
 80034b6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80034ba:	f84a 3b04 	str.w	r3, [sl], #4
 80034be:	d82b      	bhi.n	8003518 <__multiply+0x120>
 80034c0:	f8cc 8004 	str.w	r8, [ip, #4]
 80034c4:	9b01      	ldr	r3, [sp, #4]
 80034c6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80034ca:	3204      	adds	r2, #4
 80034cc:	f1ba 0f00 	cmp.w	sl, #0
 80034d0:	d020      	beq.n	8003514 <__multiply+0x11c>
 80034d2:	682b      	ldr	r3, [r5, #0]
 80034d4:	4689      	mov	r9, r1
 80034d6:	46a8      	mov	r8, r5
 80034d8:	f04f 0b00 	mov.w	fp, #0
 80034dc:	f8b9 c000 	ldrh.w	ip, [r9]
 80034e0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80034e4:	fb0a 440c 	mla	r4, sl, ip, r4
 80034e8:	445c      	add	r4, fp
 80034ea:	46c4      	mov	ip, r8
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80034f2:	f84c 3b04 	str.w	r3, [ip], #4
 80034f6:	f859 3b04 	ldr.w	r3, [r9], #4
 80034fa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	fb0a b303 	mla	r3, sl, r3, fp
 8003504:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003508:	454f      	cmp	r7, r9
 800350a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800350e:	d805      	bhi.n	800351c <__multiply+0x124>
 8003510:	f8c8 3004 	str.w	r3, [r8, #4]
 8003514:	3504      	adds	r5, #4
 8003516:	e79b      	b.n	8003450 <__multiply+0x58>
 8003518:	46d4      	mov	ip, sl
 800351a:	e7b3      	b.n	8003484 <__multiply+0x8c>
 800351c:	46e0      	mov	r8, ip
 800351e:	e7dd      	b.n	80034dc <__multiply+0xe4>
 8003520:	3e01      	subs	r6, #1
 8003522:	e799      	b.n	8003458 <__multiply+0x60>

08003524 <__pow5mult>:
 8003524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003528:	4615      	mov	r5, r2
 800352a:	f012 0203 	ands.w	r2, r2, #3
 800352e:	4606      	mov	r6, r0
 8003530:	460f      	mov	r7, r1
 8003532:	d007      	beq.n	8003544 <__pow5mult+0x20>
 8003534:	3a01      	subs	r2, #1
 8003536:	4c21      	ldr	r4, [pc, #132]	; (80035bc <__pow5mult+0x98>)
 8003538:	2300      	movs	r3, #0
 800353a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800353e:	f7ff fe8b 	bl	8003258 <__multadd>
 8003542:	4607      	mov	r7, r0
 8003544:	10ad      	asrs	r5, r5, #2
 8003546:	d035      	beq.n	80035b4 <__pow5mult+0x90>
 8003548:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800354a:	b93c      	cbnz	r4, 800355c <__pow5mult+0x38>
 800354c:	2010      	movs	r0, #16
 800354e:	f7ff fe13 	bl	8003178 <malloc>
 8003552:	6270      	str	r0, [r6, #36]	; 0x24
 8003554:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003558:	6004      	str	r4, [r0, #0]
 800355a:	60c4      	str	r4, [r0, #12]
 800355c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003560:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003564:	b94c      	cbnz	r4, 800357a <__pow5mult+0x56>
 8003566:	f240 2171 	movw	r1, #625	; 0x271
 800356a:	4630      	mov	r0, r6
 800356c:	f7ff ff3b 	bl	80033e6 <__i2b>
 8003570:	2300      	movs	r3, #0
 8003572:	f8c8 0008 	str.w	r0, [r8, #8]
 8003576:	4604      	mov	r4, r0
 8003578:	6003      	str	r3, [r0, #0]
 800357a:	f04f 0800 	mov.w	r8, #0
 800357e:	07eb      	lsls	r3, r5, #31
 8003580:	d50a      	bpl.n	8003598 <__pow5mult+0x74>
 8003582:	4639      	mov	r1, r7
 8003584:	4622      	mov	r2, r4
 8003586:	4630      	mov	r0, r6
 8003588:	f7ff ff36 	bl	80033f8 <__multiply>
 800358c:	4639      	mov	r1, r7
 800358e:	4681      	mov	r9, r0
 8003590:	4630      	mov	r0, r6
 8003592:	f7ff fe4a 	bl	800322a <_Bfree>
 8003596:	464f      	mov	r7, r9
 8003598:	106d      	asrs	r5, r5, #1
 800359a:	d00b      	beq.n	80035b4 <__pow5mult+0x90>
 800359c:	6820      	ldr	r0, [r4, #0]
 800359e:	b938      	cbnz	r0, 80035b0 <__pow5mult+0x8c>
 80035a0:	4622      	mov	r2, r4
 80035a2:	4621      	mov	r1, r4
 80035a4:	4630      	mov	r0, r6
 80035a6:	f7ff ff27 	bl	80033f8 <__multiply>
 80035aa:	6020      	str	r0, [r4, #0]
 80035ac:	f8c0 8000 	str.w	r8, [r0]
 80035b0:	4604      	mov	r4, r0
 80035b2:	e7e4      	b.n	800357e <__pow5mult+0x5a>
 80035b4:	4638      	mov	r0, r7
 80035b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ba:	bf00      	nop
 80035bc:	08004358 	.word	0x08004358

080035c0 <__lshift>:
 80035c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035c4:	460c      	mov	r4, r1
 80035c6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80035ca:	6923      	ldr	r3, [r4, #16]
 80035cc:	6849      	ldr	r1, [r1, #4]
 80035ce:	eb0a 0903 	add.w	r9, sl, r3
 80035d2:	68a3      	ldr	r3, [r4, #8]
 80035d4:	4607      	mov	r7, r0
 80035d6:	4616      	mov	r6, r2
 80035d8:	f109 0501 	add.w	r5, r9, #1
 80035dc:	42ab      	cmp	r3, r5
 80035de:	db32      	blt.n	8003646 <__lshift+0x86>
 80035e0:	4638      	mov	r0, r7
 80035e2:	f7ff fdee 	bl	80031c2 <_Balloc>
 80035e6:	2300      	movs	r3, #0
 80035e8:	4680      	mov	r8, r0
 80035ea:	f100 0114 	add.w	r1, r0, #20
 80035ee:	461a      	mov	r2, r3
 80035f0:	4553      	cmp	r3, sl
 80035f2:	db2b      	blt.n	800364c <__lshift+0x8c>
 80035f4:	6920      	ldr	r0, [r4, #16]
 80035f6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80035fa:	f104 0314 	add.w	r3, r4, #20
 80035fe:	f016 021f 	ands.w	r2, r6, #31
 8003602:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003606:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800360a:	d025      	beq.n	8003658 <__lshift+0x98>
 800360c:	f1c2 0e20 	rsb	lr, r2, #32
 8003610:	2000      	movs	r0, #0
 8003612:	681e      	ldr	r6, [r3, #0]
 8003614:	468a      	mov	sl, r1
 8003616:	4096      	lsls	r6, r2
 8003618:	4330      	orrs	r0, r6
 800361a:	f84a 0b04 	str.w	r0, [sl], #4
 800361e:	f853 0b04 	ldr.w	r0, [r3], #4
 8003622:	459c      	cmp	ip, r3
 8003624:	fa20 f00e 	lsr.w	r0, r0, lr
 8003628:	d814      	bhi.n	8003654 <__lshift+0x94>
 800362a:	6048      	str	r0, [r1, #4]
 800362c:	b108      	cbz	r0, 8003632 <__lshift+0x72>
 800362e:	f109 0502 	add.w	r5, r9, #2
 8003632:	3d01      	subs	r5, #1
 8003634:	4638      	mov	r0, r7
 8003636:	f8c8 5010 	str.w	r5, [r8, #16]
 800363a:	4621      	mov	r1, r4
 800363c:	f7ff fdf5 	bl	800322a <_Bfree>
 8003640:	4640      	mov	r0, r8
 8003642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003646:	3101      	adds	r1, #1
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	e7c7      	b.n	80035dc <__lshift+0x1c>
 800364c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003650:	3301      	adds	r3, #1
 8003652:	e7cd      	b.n	80035f0 <__lshift+0x30>
 8003654:	4651      	mov	r1, sl
 8003656:	e7dc      	b.n	8003612 <__lshift+0x52>
 8003658:	3904      	subs	r1, #4
 800365a:	f853 2b04 	ldr.w	r2, [r3], #4
 800365e:	f841 2f04 	str.w	r2, [r1, #4]!
 8003662:	459c      	cmp	ip, r3
 8003664:	d8f9      	bhi.n	800365a <__lshift+0x9a>
 8003666:	e7e4      	b.n	8003632 <__lshift+0x72>

08003668 <__mcmp>:
 8003668:	6903      	ldr	r3, [r0, #16]
 800366a:	690a      	ldr	r2, [r1, #16]
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	b530      	push	{r4, r5, lr}
 8003670:	d10c      	bne.n	800368c <__mcmp+0x24>
 8003672:	0092      	lsls	r2, r2, #2
 8003674:	3014      	adds	r0, #20
 8003676:	3114      	adds	r1, #20
 8003678:	1884      	adds	r4, r0, r2
 800367a:	4411      	add	r1, r2
 800367c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003680:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003684:	4295      	cmp	r5, r2
 8003686:	d003      	beq.n	8003690 <__mcmp+0x28>
 8003688:	d305      	bcc.n	8003696 <__mcmp+0x2e>
 800368a:	2301      	movs	r3, #1
 800368c:	4618      	mov	r0, r3
 800368e:	bd30      	pop	{r4, r5, pc}
 8003690:	42a0      	cmp	r0, r4
 8003692:	d3f3      	bcc.n	800367c <__mcmp+0x14>
 8003694:	e7fa      	b.n	800368c <__mcmp+0x24>
 8003696:	f04f 33ff 	mov.w	r3, #4294967295
 800369a:	e7f7      	b.n	800368c <__mcmp+0x24>

0800369c <__mdiff>:
 800369c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a0:	460d      	mov	r5, r1
 80036a2:	4607      	mov	r7, r0
 80036a4:	4611      	mov	r1, r2
 80036a6:	4628      	mov	r0, r5
 80036a8:	4614      	mov	r4, r2
 80036aa:	f7ff ffdd 	bl	8003668 <__mcmp>
 80036ae:	1e06      	subs	r6, r0, #0
 80036b0:	d108      	bne.n	80036c4 <__mdiff+0x28>
 80036b2:	4631      	mov	r1, r6
 80036b4:	4638      	mov	r0, r7
 80036b6:	f7ff fd84 	bl	80031c2 <_Balloc>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80036c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c4:	bfa4      	itt	ge
 80036c6:	4623      	movge	r3, r4
 80036c8:	462c      	movge	r4, r5
 80036ca:	4638      	mov	r0, r7
 80036cc:	6861      	ldr	r1, [r4, #4]
 80036ce:	bfa6      	itte	ge
 80036d0:	461d      	movge	r5, r3
 80036d2:	2600      	movge	r6, #0
 80036d4:	2601      	movlt	r6, #1
 80036d6:	f7ff fd74 	bl	80031c2 <_Balloc>
 80036da:	692b      	ldr	r3, [r5, #16]
 80036dc:	60c6      	str	r6, [r0, #12]
 80036de:	6926      	ldr	r6, [r4, #16]
 80036e0:	f105 0914 	add.w	r9, r5, #20
 80036e4:	f104 0214 	add.w	r2, r4, #20
 80036e8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80036ec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80036f0:	f100 0514 	add.w	r5, r0, #20
 80036f4:	f04f 0e00 	mov.w	lr, #0
 80036f8:	f852 ab04 	ldr.w	sl, [r2], #4
 80036fc:	f859 4b04 	ldr.w	r4, [r9], #4
 8003700:	fa1e f18a 	uxtah	r1, lr, sl
 8003704:	b2a3      	uxth	r3, r4
 8003706:	1ac9      	subs	r1, r1, r3
 8003708:	0c23      	lsrs	r3, r4, #16
 800370a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800370e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003712:	b289      	uxth	r1, r1
 8003714:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8003718:	45c8      	cmp	r8, r9
 800371a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800371e:	4694      	mov	ip, r2
 8003720:	f845 3b04 	str.w	r3, [r5], #4
 8003724:	d8e8      	bhi.n	80036f8 <__mdiff+0x5c>
 8003726:	45bc      	cmp	ip, r7
 8003728:	d304      	bcc.n	8003734 <__mdiff+0x98>
 800372a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800372e:	b183      	cbz	r3, 8003752 <__mdiff+0xb6>
 8003730:	6106      	str	r6, [r0, #16]
 8003732:	e7c5      	b.n	80036c0 <__mdiff+0x24>
 8003734:	f85c 1b04 	ldr.w	r1, [ip], #4
 8003738:	fa1e f381 	uxtah	r3, lr, r1
 800373c:	141a      	asrs	r2, r3, #16
 800373e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003742:	b29b      	uxth	r3, r3
 8003744:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003748:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800374c:	f845 3b04 	str.w	r3, [r5], #4
 8003750:	e7e9      	b.n	8003726 <__mdiff+0x8a>
 8003752:	3e01      	subs	r6, #1
 8003754:	e7e9      	b.n	800372a <__mdiff+0x8e>
	...

08003758 <__ulp>:
 8003758:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <__ulp+0x4c>)
 800375a:	ee10 2a90 	vmov	r2, s1
 800375e:	401a      	ands	r2, r3
 8003760:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8003764:	2b00      	cmp	r3, #0
 8003766:	dd04      	ble.n	8003772 <__ulp+0x1a>
 8003768:	2000      	movs	r0, #0
 800376a:	4619      	mov	r1, r3
 800376c:	ec41 0b10 	vmov	d0, r0, r1
 8003770:	4770      	bx	lr
 8003772:	425b      	negs	r3, r3
 8003774:	151b      	asrs	r3, r3, #20
 8003776:	2b13      	cmp	r3, #19
 8003778:	f04f 0000 	mov.w	r0, #0
 800377c:	f04f 0100 	mov.w	r1, #0
 8003780:	dc04      	bgt.n	800378c <__ulp+0x34>
 8003782:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003786:	fa42 f103 	asr.w	r1, r2, r3
 800378a:	e7ef      	b.n	800376c <__ulp+0x14>
 800378c:	3b14      	subs	r3, #20
 800378e:	2b1e      	cmp	r3, #30
 8003790:	f04f 0201 	mov.w	r2, #1
 8003794:	bfda      	itte	le
 8003796:	f1c3 031f 	rsble	r3, r3, #31
 800379a:	fa02 f303 	lslle.w	r3, r2, r3
 800379e:	4613      	movgt	r3, r2
 80037a0:	4618      	mov	r0, r3
 80037a2:	e7e3      	b.n	800376c <__ulp+0x14>
 80037a4:	7ff00000 	.word	0x7ff00000

080037a8 <__b2d>:
 80037a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037aa:	6905      	ldr	r5, [r0, #16]
 80037ac:	f100 0714 	add.w	r7, r0, #20
 80037b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80037b4:	1f2e      	subs	r6, r5, #4
 80037b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80037ba:	4620      	mov	r0, r4
 80037bc:	f7ff fdc5 	bl	800334a <__hi0bits>
 80037c0:	f1c0 0320 	rsb	r3, r0, #32
 80037c4:	280a      	cmp	r0, #10
 80037c6:	600b      	str	r3, [r1, #0]
 80037c8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8003840 <__b2d+0x98>
 80037cc:	dc14      	bgt.n	80037f8 <__b2d+0x50>
 80037ce:	f1c0 0e0b 	rsb	lr, r0, #11
 80037d2:	fa24 f10e 	lsr.w	r1, r4, lr
 80037d6:	42b7      	cmp	r7, r6
 80037d8:	ea41 030c 	orr.w	r3, r1, ip
 80037dc:	bf34      	ite	cc
 80037de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80037e2:	2100      	movcs	r1, #0
 80037e4:	3015      	adds	r0, #21
 80037e6:	fa04 f000 	lsl.w	r0, r4, r0
 80037ea:	fa21 f10e 	lsr.w	r1, r1, lr
 80037ee:	ea40 0201 	orr.w	r2, r0, r1
 80037f2:	ec43 2b10 	vmov	d0, r2, r3
 80037f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037f8:	42b7      	cmp	r7, r6
 80037fa:	bf3a      	itte	cc
 80037fc:	f1a5 0608 	subcc.w	r6, r5, #8
 8003800:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8003804:	2100      	movcs	r1, #0
 8003806:	380b      	subs	r0, #11
 8003808:	d015      	beq.n	8003836 <__b2d+0x8e>
 800380a:	4084      	lsls	r4, r0
 800380c:	f1c0 0520 	rsb	r5, r0, #32
 8003810:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8003814:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8003818:	42be      	cmp	r6, r7
 800381a:	fa21 fc05 	lsr.w	ip, r1, r5
 800381e:	ea44 030c 	orr.w	r3, r4, ip
 8003822:	bf8c      	ite	hi
 8003824:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8003828:	2400      	movls	r4, #0
 800382a:	fa01 f000 	lsl.w	r0, r1, r0
 800382e:	40ec      	lsrs	r4, r5
 8003830:	ea40 0204 	orr.w	r2, r0, r4
 8003834:	e7dd      	b.n	80037f2 <__b2d+0x4a>
 8003836:	ea44 030c 	orr.w	r3, r4, ip
 800383a:	460a      	mov	r2, r1
 800383c:	e7d9      	b.n	80037f2 <__b2d+0x4a>
 800383e:	bf00      	nop
 8003840:	3ff00000 	.word	0x3ff00000

08003844 <__d2b>:
 8003844:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003848:	460e      	mov	r6, r1
 800384a:	2101      	movs	r1, #1
 800384c:	ec59 8b10 	vmov	r8, r9, d0
 8003850:	4615      	mov	r5, r2
 8003852:	f7ff fcb6 	bl	80031c2 <_Balloc>
 8003856:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800385a:	4607      	mov	r7, r0
 800385c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003860:	bb34      	cbnz	r4, 80038b0 <__d2b+0x6c>
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	f1b8 0300 	subs.w	r3, r8, #0
 8003868:	d027      	beq.n	80038ba <__d2b+0x76>
 800386a:	a802      	add	r0, sp, #8
 800386c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8003870:	f7ff fd8a 	bl	8003388 <__lo0bits>
 8003874:	9900      	ldr	r1, [sp, #0]
 8003876:	b1f0      	cbz	r0, 80038b6 <__d2b+0x72>
 8003878:	9a01      	ldr	r2, [sp, #4]
 800387a:	f1c0 0320 	rsb	r3, r0, #32
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	430b      	orrs	r3, r1
 8003884:	40c2      	lsrs	r2, r0
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	9201      	str	r2, [sp, #4]
 800388a:	9b01      	ldr	r3, [sp, #4]
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf14      	ite	ne
 8003892:	2102      	movne	r1, #2
 8003894:	2101      	moveq	r1, #1
 8003896:	6139      	str	r1, [r7, #16]
 8003898:	b1c4      	cbz	r4, 80038cc <__d2b+0x88>
 800389a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800389e:	4404      	add	r4, r0
 80038a0:	6034      	str	r4, [r6, #0]
 80038a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80038a6:	6028      	str	r0, [r5, #0]
 80038a8:	4638      	mov	r0, r7
 80038aa:	b003      	add	sp, #12
 80038ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038b4:	e7d5      	b.n	8003862 <__d2b+0x1e>
 80038b6:	6179      	str	r1, [r7, #20]
 80038b8:	e7e7      	b.n	800388a <__d2b+0x46>
 80038ba:	a801      	add	r0, sp, #4
 80038bc:	f7ff fd64 	bl	8003388 <__lo0bits>
 80038c0:	9b01      	ldr	r3, [sp, #4]
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	2101      	movs	r1, #1
 80038c6:	6139      	str	r1, [r7, #16]
 80038c8:	3020      	adds	r0, #32
 80038ca:	e7e5      	b.n	8003898 <__d2b+0x54>
 80038cc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80038d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80038d4:	6030      	str	r0, [r6, #0]
 80038d6:	6918      	ldr	r0, [r3, #16]
 80038d8:	f7ff fd37 	bl	800334a <__hi0bits>
 80038dc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80038e0:	e7e1      	b.n	80038a6 <__d2b+0x62>

080038e2 <__ratio>:
 80038e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e6:	4688      	mov	r8, r1
 80038e8:	4669      	mov	r1, sp
 80038ea:	4681      	mov	r9, r0
 80038ec:	f7ff ff5c 	bl	80037a8 <__b2d>
 80038f0:	a901      	add	r1, sp, #4
 80038f2:	4640      	mov	r0, r8
 80038f4:	ec57 6b10 	vmov	r6, r7, d0
 80038f8:	f7ff ff56 	bl	80037a8 <__b2d>
 80038fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003900:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8003904:	eba3 0c02 	sub.w	ip, r3, r2
 8003908:	e9dd 3200 	ldrd	r3, r2, [sp]
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8003912:	ec5b ab10 	vmov	sl, fp, d0
 8003916:	2b00      	cmp	r3, #0
 8003918:	bfce      	itee	gt
 800391a:	463a      	movgt	r2, r7
 800391c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8003920:	465a      	movle	r2, fp
 8003922:	4659      	mov	r1, fp
 8003924:	463d      	mov	r5, r7
 8003926:	bfd4      	ite	le
 8003928:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800392c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8003930:	4630      	mov	r0, r6
 8003932:	ee10 2a10 	vmov	r2, s0
 8003936:	460b      	mov	r3, r1
 8003938:	4629      	mov	r1, r5
 800393a:	f7fc ff87 	bl	800084c <__aeabi_ddiv>
 800393e:	ec41 0b10 	vmov	d0, r0, r1
 8003942:	b003      	add	sp, #12
 8003944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003948 <__copybits>:
 8003948:	3901      	subs	r1, #1
 800394a:	b510      	push	{r4, lr}
 800394c:	1149      	asrs	r1, r1, #5
 800394e:	6914      	ldr	r4, [r2, #16]
 8003950:	3101      	adds	r1, #1
 8003952:	f102 0314 	add.w	r3, r2, #20
 8003956:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800395a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800395e:	42a3      	cmp	r3, r4
 8003960:	4602      	mov	r2, r0
 8003962:	d303      	bcc.n	800396c <__copybits+0x24>
 8003964:	2300      	movs	r3, #0
 8003966:	428a      	cmp	r2, r1
 8003968:	d305      	bcc.n	8003976 <__copybits+0x2e>
 800396a:	bd10      	pop	{r4, pc}
 800396c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003970:	f840 2b04 	str.w	r2, [r0], #4
 8003974:	e7f3      	b.n	800395e <__copybits+0x16>
 8003976:	f842 3b04 	str.w	r3, [r2], #4
 800397a:	e7f4      	b.n	8003966 <__copybits+0x1e>

0800397c <__any_on>:
 800397c:	f100 0214 	add.w	r2, r0, #20
 8003980:	6900      	ldr	r0, [r0, #16]
 8003982:	114b      	asrs	r3, r1, #5
 8003984:	4298      	cmp	r0, r3
 8003986:	b510      	push	{r4, lr}
 8003988:	db11      	blt.n	80039ae <__any_on+0x32>
 800398a:	dd0a      	ble.n	80039a2 <__any_on+0x26>
 800398c:	f011 011f 	ands.w	r1, r1, #31
 8003990:	d007      	beq.n	80039a2 <__any_on+0x26>
 8003992:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003996:	fa24 f001 	lsr.w	r0, r4, r1
 800399a:	fa00 f101 	lsl.w	r1, r0, r1
 800399e:	428c      	cmp	r4, r1
 80039a0:	d10b      	bne.n	80039ba <__any_on+0x3e>
 80039a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d803      	bhi.n	80039b2 <__any_on+0x36>
 80039aa:	2000      	movs	r0, #0
 80039ac:	bd10      	pop	{r4, pc}
 80039ae:	4603      	mov	r3, r0
 80039b0:	e7f7      	b.n	80039a2 <__any_on+0x26>
 80039b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80039b6:	2900      	cmp	r1, #0
 80039b8:	d0f5      	beq.n	80039a6 <__any_on+0x2a>
 80039ba:	2001      	movs	r0, #1
 80039bc:	e7f6      	b.n	80039ac <__any_on+0x30>

080039be <_calloc_r>:
 80039be:	b538      	push	{r3, r4, r5, lr}
 80039c0:	fb02 f401 	mul.w	r4, r2, r1
 80039c4:	4621      	mov	r1, r4
 80039c6:	f000 f857 	bl	8003a78 <_malloc_r>
 80039ca:	4605      	mov	r5, r0
 80039cc:	b118      	cbz	r0, 80039d6 <_calloc_r+0x18>
 80039ce:	4622      	mov	r2, r4
 80039d0:	2100      	movs	r1, #0
 80039d2:	f7fe fa09 	bl	8001de8 <memset>
 80039d6:	4628      	mov	r0, r5
 80039d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080039dc <_free_r>:
 80039dc:	b538      	push	{r3, r4, r5, lr}
 80039de:	4605      	mov	r5, r0
 80039e0:	2900      	cmp	r1, #0
 80039e2:	d045      	beq.n	8003a70 <_free_r+0x94>
 80039e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039e8:	1f0c      	subs	r4, r1, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bfb8      	it	lt
 80039ee:	18e4      	addlt	r4, r4, r3
 80039f0:	f000 fbbe 	bl	8004170 <__malloc_lock>
 80039f4:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <_free_r+0x98>)
 80039f6:	6813      	ldr	r3, [r2, #0]
 80039f8:	4610      	mov	r0, r2
 80039fa:	b933      	cbnz	r3, 8003a0a <_free_r+0x2e>
 80039fc:	6063      	str	r3, [r4, #4]
 80039fe:	6014      	str	r4, [r2, #0]
 8003a00:	4628      	mov	r0, r5
 8003a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a06:	f000 bbb4 	b.w	8004172 <__malloc_unlock>
 8003a0a:	42a3      	cmp	r3, r4
 8003a0c:	d90c      	bls.n	8003a28 <_free_r+0x4c>
 8003a0e:	6821      	ldr	r1, [r4, #0]
 8003a10:	1862      	adds	r2, r4, r1
 8003a12:	4293      	cmp	r3, r2
 8003a14:	bf04      	itt	eq
 8003a16:	681a      	ldreq	r2, [r3, #0]
 8003a18:	685b      	ldreq	r3, [r3, #4]
 8003a1a:	6063      	str	r3, [r4, #4]
 8003a1c:	bf04      	itt	eq
 8003a1e:	1852      	addeq	r2, r2, r1
 8003a20:	6022      	streq	r2, [r4, #0]
 8003a22:	6004      	str	r4, [r0, #0]
 8003a24:	e7ec      	b.n	8003a00 <_free_r+0x24>
 8003a26:	4613      	mov	r3, r2
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	b10a      	cbz	r2, 8003a30 <_free_r+0x54>
 8003a2c:	42a2      	cmp	r2, r4
 8003a2e:	d9fa      	bls.n	8003a26 <_free_r+0x4a>
 8003a30:	6819      	ldr	r1, [r3, #0]
 8003a32:	1858      	adds	r0, r3, r1
 8003a34:	42a0      	cmp	r0, r4
 8003a36:	d10b      	bne.n	8003a50 <_free_r+0x74>
 8003a38:	6820      	ldr	r0, [r4, #0]
 8003a3a:	4401      	add	r1, r0
 8003a3c:	1858      	adds	r0, r3, r1
 8003a3e:	4282      	cmp	r2, r0
 8003a40:	6019      	str	r1, [r3, #0]
 8003a42:	d1dd      	bne.n	8003a00 <_free_r+0x24>
 8003a44:	6810      	ldr	r0, [r2, #0]
 8003a46:	6852      	ldr	r2, [r2, #4]
 8003a48:	605a      	str	r2, [r3, #4]
 8003a4a:	4401      	add	r1, r0
 8003a4c:	6019      	str	r1, [r3, #0]
 8003a4e:	e7d7      	b.n	8003a00 <_free_r+0x24>
 8003a50:	d902      	bls.n	8003a58 <_free_r+0x7c>
 8003a52:	230c      	movs	r3, #12
 8003a54:	602b      	str	r3, [r5, #0]
 8003a56:	e7d3      	b.n	8003a00 <_free_r+0x24>
 8003a58:	6820      	ldr	r0, [r4, #0]
 8003a5a:	1821      	adds	r1, r4, r0
 8003a5c:	428a      	cmp	r2, r1
 8003a5e:	bf04      	itt	eq
 8003a60:	6811      	ldreq	r1, [r2, #0]
 8003a62:	6852      	ldreq	r2, [r2, #4]
 8003a64:	6062      	str	r2, [r4, #4]
 8003a66:	bf04      	itt	eq
 8003a68:	1809      	addeq	r1, r1, r0
 8003a6a:	6021      	streq	r1, [r4, #0]
 8003a6c:	605c      	str	r4, [r3, #4]
 8003a6e:	e7c7      	b.n	8003a00 <_free_r+0x24>
 8003a70:	bd38      	pop	{r3, r4, r5, pc}
 8003a72:	bf00      	nop
 8003a74:	20000248 	.word	0x20000248

08003a78 <_malloc_r>:
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	1ccd      	adds	r5, r1, #3
 8003a7c:	f025 0503 	bic.w	r5, r5, #3
 8003a80:	3508      	adds	r5, #8
 8003a82:	2d0c      	cmp	r5, #12
 8003a84:	bf38      	it	cc
 8003a86:	250c      	movcc	r5, #12
 8003a88:	2d00      	cmp	r5, #0
 8003a8a:	4606      	mov	r6, r0
 8003a8c:	db01      	blt.n	8003a92 <_malloc_r+0x1a>
 8003a8e:	42a9      	cmp	r1, r5
 8003a90:	d903      	bls.n	8003a9a <_malloc_r+0x22>
 8003a92:	230c      	movs	r3, #12
 8003a94:	6033      	str	r3, [r6, #0]
 8003a96:	2000      	movs	r0, #0
 8003a98:	bd70      	pop	{r4, r5, r6, pc}
 8003a9a:	f000 fb69 	bl	8004170 <__malloc_lock>
 8003a9e:	4a21      	ldr	r2, [pc, #132]	; (8003b24 <_malloc_r+0xac>)
 8003aa0:	6814      	ldr	r4, [r2, #0]
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	b991      	cbnz	r1, 8003acc <_malloc_r+0x54>
 8003aa6:	4c20      	ldr	r4, [pc, #128]	; (8003b28 <_malloc_r+0xb0>)
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	b91b      	cbnz	r3, 8003ab4 <_malloc_r+0x3c>
 8003aac:	4630      	mov	r0, r6
 8003aae:	f000 fb17 	bl	80040e0 <_sbrk_r>
 8003ab2:	6020      	str	r0, [r4, #0]
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	f000 fb12 	bl	80040e0 <_sbrk_r>
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d124      	bne.n	8003b0a <_malloc_r+0x92>
 8003ac0:	230c      	movs	r3, #12
 8003ac2:	6033      	str	r3, [r6, #0]
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	f000 fb54 	bl	8004172 <__malloc_unlock>
 8003aca:	e7e4      	b.n	8003a96 <_malloc_r+0x1e>
 8003acc:	680b      	ldr	r3, [r1, #0]
 8003ace:	1b5b      	subs	r3, r3, r5
 8003ad0:	d418      	bmi.n	8003b04 <_malloc_r+0x8c>
 8003ad2:	2b0b      	cmp	r3, #11
 8003ad4:	d90f      	bls.n	8003af6 <_malloc_r+0x7e>
 8003ad6:	600b      	str	r3, [r1, #0]
 8003ad8:	50cd      	str	r5, [r1, r3]
 8003ada:	18cc      	adds	r4, r1, r3
 8003adc:	4630      	mov	r0, r6
 8003ade:	f000 fb48 	bl	8004172 <__malloc_unlock>
 8003ae2:	f104 000b 	add.w	r0, r4, #11
 8003ae6:	1d23      	adds	r3, r4, #4
 8003ae8:	f020 0007 	bic.w	r0, r0, #7
 8003aec:	1ac3      	subs	r3, r0, r3
 8003aee:	d0d3      	beq.n	8003a98 <_malloc_r+0x20>
 8003af0:	425a      	negs	r2, r3
 8003af2:	50e2      	str	r2, [r4, r3]
 8003af4:	e7d0      	b.n	8003a98 <_malloc_r+0x20>
 8003af6:	428c      	cmp	r4, r1
 8003af8:	684b      	ldr	r3, [r1, #4]
 8003afa:	bf16      	itet	ne
 8003afc:	6063      	strne	r3, [r4, #4]
 8003afe:	6013      	streq	r3, [r2, #0]
 8003b00:	460c      	movne	r4, r1
 8003b02:	e7eb      	b.n	8003adc <_malloc_r+0x64>
 8003b04:	460c      	mov	r4, r1
 8003b06:	6849      	ldr	r1, [r1, #4]
 8003b08:	e7cc      	b.n	8003aa4 <_malloc_r+0x2c>
 8003b0a:	1cc4      	adds	r4, r0, #3
 8003b0c:	f024 0403 	bic.w	r4, r4, #3
 8003b10:	42a0      	cmp	r0, r4
 8003b12:	d005      	beq.n	8003b20 <_malloc_r+0xa8>
 8003b14:	1a21      	subs	r1, r4, r0
 8003b16:	4630      	mov	r0, r6
 8003b18:	f000 fae2 	bl	80040e0 <_sbrk_r>
 8003b1c:	3001      	adds	r0, #1
 8003b1e:	d0cf      	beq.n	8003ac0 <_malloc_r+0x48>
 8003b20:	6025      	str	r5, [r4, #0]
 8003b22:	e7db      	b.n	8003adc <_malloc_r+0x64>
 8003b24:	20000248 	.word	0x20000248
 8003b28:	2000024c 	.word	0x2000024c

08003b2c <__ssputs_r>:
 8003b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b30:	688e      	ldr	r6, [r1, #8]
 8003b32:	429e      	cmp	r6, r3
 8003b34:	4682      	mov	sl, r0
 8003b36:	460c      	mov	r4, r1
 8003b38:	4690      	mov	r8, r2
 8003b3a:	4699      	mov	r9, r3
 8003b3c:	d837      	bhi.n	8003bae <__ssputs_r+0x82>
 8003b3e:	898a      	ldrh	r2, [r1, #12]
 8003b40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b44:	d031      	beq.n	8003baa <__ssputs_r+0x7e>
 8003b46:	6825      	ldr	r5, [r4, #0]
 8003b48:	6909      	ldr	r1, [r1, #16]
 8003b4a:	1a6f      	subs	r7, r5, r1
 8003b4c:	6965      	ldr	r5, [r4, #20]
 8003b4e:	2302      	movs	r3, #2
 8003b50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b54:	fb95 f5f3 	sdiv	r5, r5, r3
 8003b58:	f109 0301 	add.w	r3, r9, #1
 8003b5c:	443b      	add	r3, r7
 8003b5e:	429d      	cmp	r5, r3
 8003b60:	bf38      	it	cc
 8003b62:	461d      	movcc	r5, r3
 8003b64:	0553      	lsls	r3, r2, #21
 8003b66:	d530      	bpl.n	8003bca <__ssputs_r+0x9e>
 8003b68:	4629      	mov	r1, r5
 8003b6a:	f7ff ff85 	bl	8003a78 <_malloc_r>
 8003b6e:	4606      	mov	r6, r0
 8003b70:	b950      	cbnz	r0, 8003b88 <__ssputs_r+0x5c>
 8003b72:	230c      	movs	r3, #12
 8003b74:	f8ca 3000 	str.w	r3, [sl]
 8003b78:	89a3      	ldrh	r3, [r4, #12]
 8003b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b7e:	81a3      	strh	r3, [r4, #12]
 8003b80:	f04f 30ff 	mov.w	r0, #4294967295
 8003b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b88:	463a      	mov	r2, r7
 8003b8a:	6921      	ldr	r1, [r4, #16]
 8003b8c:	f7ff fb0e 	bl	80031ac <memcpy>
 8003b90:	89a3      	ldrh	r3, [r4, #12]
 8003b92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9a:	81a3      	strh	r3, [r4, #12]
 8003b9c:	6126      	str	r6, [r4, #16]
 8003b9e:	6165      	str	r5, [r4, #20]
 8003ba0:	443e      	add	r6, r7
 8003ba2:	1bed      	subs	r5, r5, r7
 8003ba4:	6026      	str	r6, [r4, #0]
 8003ba6:	60a5      	str	r5, [r4, #8]
 8003ba8:	464e      	mov	r6, r9
 8003baa:	454e      	cmp	r6, r9
 8003bac:	d900      	bls.n	8003bb0 <__ssputs_r+0x84>
 8003bae:	464e      	mov	r6, r9
 8003bb0:	4632      	mov	r2, r6
 8003bb2:	4641      	mov	r1, r8
 8003bb4:	6820      	ldr	r0, [r4, #0]
 8003bb6:	f000 fac2 	bl	800413e <memmove>
 8003bba:	68a3      	ldr	r3, [r4, #8]
 8003bbc:	1b9b      	subs	r3, r3, r6
 8003bbe:	60a3      	str	r3, [r4, #8]
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	441e      	add	r6, r3
 8003bc4:	6026      	str	r6, [r4, #0]
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	e7dc      	b.n	8003b84 <__ssputs_r+0x58>
 8003bca:	462a      	mov	r2, r5
 8003bcc:	f000 fad2 	bl	8004174 <_realloc_r>
 8003bd0:	4606      	mov	r6, r0
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	d1e2      	bne.n	8003b9c <__ssputs_r+0x70>
 8003bd6:	6921      	ldr	r1, [r4, #16]
 8003bd8:	4650      	mov	r0, sl
 8003bda:	f7ff feff 	bl	80039dc <_free_r>
 8003bde:	e7c8      	b.n	8003b72 <__ssputs_r+0x46>

08003be0 <_svfiprintf_r>:
 8003be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be4:	461d      	mov	r5, r3
 8003be6:	898b      	ldrh	r3, [r1, #12]
 8003be8:	061f      	lsls	r7, r3, #24
 8003bea:	b09d      	sub	sp, #116	; 0x74
 8003bec:	4680      	mov	r8, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	4616      	mov	r6, r2
 8003bf2:	d50f      	bpl.n	8003c14 <_svfiprintf_r+0x34>
 8003bf4:	690b      	ldr	r3, [r1, #16]
 8003bf6:	b96b      	cbnz	r3, 8003c14 <_svfiprintf_r+0x34>
 8003bf8:	2140      	movs	r1, #64	; 0x40
 8003bfa:	f7ff ff3d 	bl	8003a78 <_malloc_r>
 8003bfe:	6020      	str	r0, [r4, #0]
 8003c00:	6120      	str	r0, [r4, #16]
 8003c02:	b928      	cbnz	r0, 8003c10 <_svfiprintf_r+0x30>
 8003c04:	230c      	movs	r3, #12
 8003c06:	f8c8 3000 	str.w	r3, [r8]
 8003c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0e:	e0c8      	b.n	8003da2 <_svfiprintf_r+0x1c2>
 8003c10:	2340      	movs	r3, #64	; 0x40
 8003c12:	6163      	str	r3, [r4, #20]
 8003c14:	2300      	movs	r3, #0
 8003c16:	9309      	str	r3, [sp, #36]	; 0x24
 8003c18:	2320      	movs	r3, #32
 8003c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c1e:	2330      	movs	r3, #48	; 0x30
 8003c20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c24:	9503      	str	r5, [sp, #12]
 8003c26:	f04f 0b01 	mov.w	fp, #1
 8003c2a:	4637      	mov	r7, r6
 8003c2c:	463d      	mov	r5, r7
 8003c2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c32:	b10b      	cbz	r3, 8003c38 <_svfiprintf_r+0x58>
 8003c34:	2b25      	cmp	r3, #37	; 0x25
 8003c36:	d13e      	bne.n	8003cb6 <_svfiprintf_r+0xd6>
 8003c38:	ebb7 0a06 	subs.w	sl, r7, r6
 8003c3c:	d00b      	beq.n	8003c56 <_svfiprintf_r+0x76>
 8003c3e:	4653      	mov	r3, sl
 8003c40:	4632      	mov	r2, r6
 8003c42:	4621      	mov	r1, r4
 8003c44:	4640      	mov	r0, r8
 8003c46:	f7ff ff71 	bl	8003b2c <__ssputs_r>
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	f000 80a4 	beq.w	8003d98 <_svfiprintf_r+0x1b8>
 8003c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c52:	4453      	add	r3, sl
 8003c54:	9309      	str	r3, [sp, #36]	; 0x24
 8003c56:	783b      	ldrb	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 809d 	beq.w	8003d98 <_svfiprintf_r+0x1b8>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f04f 32ff 	mov.w	r2, #4294967295
 8003c64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c68:	9304      	str	r3, [sp, #16]
 8003c6a:	9307      	str	r3, [sp, #28]
 8003c6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c70:	931a      	str	r3, [sp, #104]	; 0x68
 8003c72:	462f      	mov	r7, r5
 8003c74:	2205      	movs	r2, #5
 8003c76:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003c7a:	4850      	ldr	r0, [pc, #320]	; (8003dbc <_svfiprintf_r+0x1dc>)
 8003c7c:	f7fc fab0 	bl	80001e0 <memchr>
 8003c80:	9b04      	ldr	r3, [sp, #16]
 8003c82:	b9d0      	cbnz	r0, 8003cba <_svfiprintf_r+0xda>
 8003c84:	06d9      	lsls	r1, r3, #27
 8003c86:	bf44      	itt	mi
 8003c88:	2220      	movmi	r2, #32
 8003c8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c8e:	071a      	lsls	r2, r3, #28
 8003c90:	bf44      	itt	mi
 8003c92:	222b      	movmi	r2, #43	; 0x2b
 8003c94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c98:	782a      	ldrb	r2, [r5, #0]
 8003c9a:	2a2a      	cmp	r2, #42	; 0x2a
 8003c9c:	d015      	beq.n	8003cca <_svfiprintf_r+0xea>
 8003c9e:	9a07      	ldr	r2, [sp, #28]
 8003ca0:	462f      	mov	r7, r5
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	250a      	movs	r5, #10
 8003ca6:	4639      	mov	r1, r7
 8003ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cac:	3b30      	subs	r3, #48	; 0x30
 8003cae:	2b09      	cmp	r3, #9
 8003cb0:	d94d      	bls.n	8003d4e <_svfiprintf_r+0x16e>
 8003cb2:	b1b8      	cbz	r0, 8003ce4 <_svfiprintf_r+0x104>
 8003cb4:	e00f      	b.n	8003cd6 <_svfiprintf_r+0xf6>
 8003cb6:	462f      	mov	r7, r5
 8003cb8:	e7b8      	b.n	8003c2c <_svfiprintf_r+0x4c>
 8003cba:	4a40      	ldr	r2, [pc, #256]	; (8003dbc <_svfiprintf_r+0x1dc>)
 8003cbc:	1a80      	subs	r0, r0, r2
 8003cbe:	fa0b f000 	lsl.w	r0, fp, r0
 8003cc2:	4318      	orrs	r0, r3
 8003cc4:	9004      	str	r0, [sp, #16]
 8003cc6:	463d      	mov	r5, r7
 8003cc8:	e7d3      	b.n	8003c72 <_svfiprintf_r+0x92>
 8003cca:	9a03      	ldr	r2, [sp, #12]
 8003ccc:	1d11      	adds	r1, r2, #4
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	9103      	str	r1, [sp, #12]
 8003cd2:	2a00      	cmp	r2, #0
 8003cd4:	db01      	blt.n	8003cda <_svfiprintf_r+0xfa>
 8003cd6:	9207      	str	r2, [sp, #28]
 8003cd8:	e004      	b.n	8003ce4 <_svfiprintf_r+0x104>
 8003cda:	4252      	negs	r2, r2
 8003cdc:	f043 0302 	orr.w	r3, r3, #2
 8003ce0:	9207      	str	r2, [sp, #28]
 8003ce2:	9304      	str	r3, [sp, #16]
 8003ce4:	783b      	ldrb	r3, [r7, #0]
 8003ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ce8:	d10c      	bne.n	8003d04 <_svfiprintf_r+0x124>
 8003cea:	787b      	ldrb	r3, [r7, #1]
 8003cec:	2b2a      	cmp	r3, #42	; 0x2a
 8003cee:	d133      	bne.n	8003d58 <_svfiprintf_r+0x178>
 8003cf0:	9b03      	ldr	r3, [sp, #12]
 8003cf2:	1d1a      	adds	r2, r3, #4
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	9203      	str	r2, [sp, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bfb8      	it	lt
 8003cfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d00:	3702      	adds	r7, #2
 8003d02:	9305      	str	r3, [sp, #20]
 8003d04:	4d2e      	ldr	r5, [pc, #184]	; (8003dc0 <_svfiprintf_r+0x1e0>)
 8003d06:	7839      	ldrb	r1, [r7, #0]
 8003d08:	2203      	movs	r2, #3
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	f7fc fa68 	bl	80001e0 <memchr>
 8003d10:	b138      	cbz	r0, 8003d22 <_svfiprintf_r+0x142>
 8003d12:	2340      	movs	r3, #64	; 0x40
 8003d14:	1b40      	subs	r0, r0, r5
 8003d16:	fa03 f000 	lsl.w	r0, r3, r0
 8003d1a:	9b04      	ldr	r3, [sp, #16]
 8003d1c:	4303      	orrs	r3, r0
 8003d1e:	3701      	adds	r7, #1
 8003d20:	9304      	str	r3, [sp, #16]
 8003d22:	7839      	ldrb	r1, [r7, #0]
 8003d24:	4827      	ldr	r0, [pc, #156]	; (8003dc4 <_svfiprintf_r+0x1e4>)
 8003d26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d2a:	2206      	movs	r2, #6
 8003d2c:	1c7e      	adds	r6, r7, #1
 8003d2e:	f7fc fa57 	bl	80001e0 <memchr>
 8003d32:	2800      	cmp	r0, #0
 8003d34:	d038      	beq.n	8003da8 <_svfiprintf_r+0x1c8>
 8003d36:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <_svfiprintf_r+0x1e8>)
 8003d38:	bb13      	cbnz	r3, 8003d80 <_svfiprintf_r+0x1a0>
 8003d3a:	9b03      	ldr	r3, [sp, #12]
 8003d3c:	3307      	adds	r3, #7
 8003d3e:	f023 0307 	bic.w	r3, r3, #7
 8003d42:	3308      	adds	r3, #8
 8003d44:	9303      	str	r3, [sp, #12]
 8003d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d48:	444b      	add	r3, r9
 8003d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d4c:	e76d      	b.n	8003c2a <_svfiprintf_r+0x4a>
 8003d4e:	fb05 3202 	mla	r2, r5, r2, r3
 8003d52:	2001      	movs	r0, #1
 8003d54:	460f      	mov	r7, r1
 8003d56:	e7a6      	b.n	8003ca6 <_svfiprintf_r+0xc6>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	3701      	adds	r7, #1
 8003d5c:	9305      	str	r3, [sp, #20]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	250a      	movs	r5, #10
 8003d62:	4638      	mov	r0, r7
 8003d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d68:	3a30      	subs	r2, #48	; 0x30
 8003d6a:	2a09      	cmp	r2, #9
 8003d6c:	d903      	bls.n	8003d76 <_svfiprintf_r+0x196>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0c8      	beq.n	8003d04 <_svfiprintf_r+0x124>
 8003d72:	9105      	str	r1, [sp, #20]
 8003d74:	e7c6      	b.n	8003d04 <_svfiprintf_r+0x124>
 8003d76:	fb05 2101 	mla	r1, r5, r1, r2
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	4607      	mov	r7, r0
 8003d7e:	e7f0      	b.n	8003d62 <_svfiprintf_r+0x182>
 8003d80:	ab03      	add	r3, sp, #12
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	4622      	mov	r2, r4
 8003d86:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <_svfiprintf_r+0x1ec>)
 8003d88:	a904      	add	r1, sp, #16
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	f3af 8000 	nop.w
 8003d90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d94:	4681      	mov	r9, r0
 8003d96:	d1d6      	bne.n	8003d46 <_svfiprintf_r+0x166>
 8003d98:	89a3      	ldrh	r3, [r4, #12]
 8003d9a:	065b      	lsls	r3, r3, #25
 8003d9c:	f53f af35 	bmi.w	8003c0a <_svfiprintf_r+0x2a>
 8003da0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003da2:	b01d      	add	sp, #116	; 0x74
 8003da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da8:	ab03      	add	r3, sp, #12
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	4622      	mov	r2, r4
 8003dae:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <_svfiprintf_r+0x1ec>)
 8003db0:	a904      	add	r1, sp, #16
 8003db2:	4640      	mov	r0, r8
 8003db4:	f000 f882 	bl	8003ebc <_printf_i>
 8003db8:	e7ea      	b.n	8003d90 <_svfiprintf_r+0x1b0>
 8003dba:	bf00      	nop
 8003dbc:	08004364 	.word	0x08004364
 8003dc0:	0800436a 	.word	0x0800436a
 8003dc4:	0800436e 	.word	0x0800436e
 8003dc8:	00000000 	.word	0x00000000
 8003dcc:	08003b2d 	.word	0x08003b2d

08003dd0 <_printf_common>:
 8003dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd4:	4691      	mov	r9, r2
 8003dd6:	461f      	mov	r7, r3
 8003dd8:	688a      	ldr	r2, [r1, #8]
 8003dda:	690b      	ldr	r3, [r1, #16]
 8003ddc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003de0:	4293      	cmp	r3, r2
 8003de2:	bfb8      	it	lt
 8003de4:	4613      	movlt	r3, r2
 8003de6:	f8c9 3000 	str.w	r3, [r9]
 8003dea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dee:	4606      	mov	r6, r0
 8003df0:	460c      	mov	r4, r1
 8003df2:	b112      	cbz	r2, 8003dfa <_printf_common+0x2a>
 8003df4:	3301      	adds	r3, #1
 8003df6:	f8c9 3000 	str.w	r3, [r9]
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	0699      	lsls	r1, r3, #26
 8003dfe:	bf42      	ittt	mi
 8003e00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e04:	3302      	addmi	r3, #2
 8003e06:	f8c9 3000 	strmi.w	r3, [r9]
 8003e0a:	6825      	ldr	r5, [r4, #0]
 8003e0c:	f015 0506 	ands.w	r5, r5, #6
 8003e10:	d107      	bne.n	8003e22 <_printf_common+0x52>
 8003e12:	f104 0a19 	add.w	sl, r4, #25
 8003e16:	68e3      	ldr	r3, [r4, #12]
 8003e18:	f8d9 2000 	ldr.w	r2, [r9]
 8003e1c:	1a9b      	subs	r3, r3, r2
 8003e1e:	42ab      	cmp	r3, r5
 8003e20:	dc28      	bgt.n	8003e74 <_printf_common+0xa4>
 8003e22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e26:	6822      	ldr	r2, [r4, #0]
 8003e28:	3300      	adds	r3, #0
 8003e2a:	bf18      	it	ne
 8003e2c:	2301      	movne	r3, #1
 8003e2e:	0692      	lsls	r2, r2, #26
 8003e30:	d42d      	bmi.n	8003e8e <_printf_common+0xbe>
 8003e32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e36:	4639      	mov	r1, r7
 8003e38:	4630      	mov	r0, r6
 8003e3a:	47c0      	blx	r8
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	d020      	beq.n	8003e82 <_printf_common+0xb2>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	68e5      	ldr	r5, [r4, #12]
 8003e44:	f8d9 2000 	ldr.w	r2, [r9]
 8003e48:	f003 0306 	and.w	r3, r3, #6
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	bf08      	it	eq
 8003e50:	1aad      	subeq	r5, r5, r2
 8003e52:	68a3      	ldr	r3, [r4, #8]
 8003e54:	6922      	ldr	r2, [r4, #16]
 8003e56:	bf0c      	ite	eq
 8003e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e5c:	2500      	movne	r5, #0
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	bfc4      	itt	gt
 8003e62:	1a9b      	subgt	r3, r3, r2
 8003e64:	18ed      	addgt	r5, r5, r3
 8003e66:	f04f 0900 	mov.w	r9, #0
 8003e6a:	341a      	adds	r4, #26
 8003e6c:	454d      	cmp	r5, r9
 8003e6e:	d11a      	bne.n	8003ea6 <_printf_common+0xd6>
 8003e70:	2000      	movs	r0, #0
 8003e72:	e008      	b.n	8003e86 <_printf_common+0xb6>
 8003e74:	2301      	movs	r3, #1
 8003e76:	4652      	mov	r2, sl
 8003e78:	4639      	mov	r1, r7
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	47c0      	blx	r8
 8003e7e:	3001      	adds	r0, #1
 8003e80:	d103      	bne.n	8003e8a <_printf_common+0xba>
 8003e82:	f04f 30ff 	mov.w	r0, #4294967295
 8003e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e8a:	3501      	adds	r5, #1
 8003e8c:	e7c3      	b.n	8003e16 <_printf_common+0x46>
 8003e8e:	18e1      	adds	r1, r4, r3
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	2030      	movs	r0, #48	; 0x30
 8003e94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e98:	4422      	add	r2, r4
 8003e9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ea2:	3302      	adds	r3, #2
 8003ea4:	e7c5      	b.n	8003e32 <_printf_common+0x62>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	4622      	mov	r2, r4
 8003eaa:	4639      	mov	r1, r7
 8003eac:	4630      	mov	r0, r6
 8003eae:	47c0      	blx	r8
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	d0e6      	beq.n	8003e82 <_printf_common+0xb2>
 8003eb4:	f109 0901 	add.w	r9, r9, #1
 8003eb8:	e7d8      	b.n	8003e6c <_printf_common+0x9c>
	...

08003ebc <_printf_i>:
 8003ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ec0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	7e09      	ldrb	r1, [r1, #24]
 8003ec8:	b085      	sub	sp, #20
 8003eca:	296e      	cmp	r1, #110	; 0x6e
 8003ecc:	4617      	mov	r7, r2
 8003ece:	4606      	mov	r6, r0
 8003ed0:	4698      	mov	r8, r3
 8003ed2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ed4:	f000 80b3 	beq.w	800403e <_printf_i+0x182>
 8003ed8:	d822      	bhi.n	8003f20 <_printf_i+0x64>
 8003eda:	2963      	cmp	r1, #99	; 0x63
 8003edc:	d036      	beq.n	8003f4c <_printf_i+0x90>
 8003ede:	d80a      	bhi.n	8003ef6 <_printf_i+0x3a>
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	f000 80b9 	beq.w	8004058 <_printf_i+0x19c>
 8003ee6:	2958      	cmp	r1, #88	; 0x58
 8003ee8:	f000 8083 	beq.w	8003ff2 <_printf_i+0x136>
 8003eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ef0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003ef4:	e032      	b.n	8003f5c <_printf_i+0xa0>
 8003ef6:	2964      	cmp	r1, #100	; 0x64
 8003ef8:	d001      	beq.n	8003efe <_printf_i+0x42>
 8003efa:	2969      	cmp	r1, #105	; 0x69
 8003efc:	d1f6      	bne.n	8003eec <_printf_i+0x30>
 8003efe:	6820      	ldr	r0, [r4, #0]
 8003f00:	6813      	ldr	r3, [r2, #0]
 8003f02:	0605      	lsls	r5, r0, #24
 8003f04:	f103 0104 	add.w	r1, r3, #4
 8003f08:	d52a      	bpl.n	8003f60 <_printf_i+0xa4>
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6011      	str	r1, [r2, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	da03      	bge.n	8003f1a <_printf_i+0x5e>
 8003f12:	222d      	movs	r2, #45	; 0x2d
 8003f14:	425b      	negs	r3, r3
 8003f16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f1a:	486f      	ldr	r0, [pc, #444]	; (80040d8 <_printf_i+0x21c>)
 8003f1c:	220a      	movs	r2, #10
 8003f1e:	e039      	b.n	8003f94 <_printf_i+0xd8>
 8003f20:	2973      	cmp	r1, #115	; 0x73
 8003f22:	f000 809d 	beq.w	8004060 <_printf_i+0x1a4>
 8003f26:	d808      	bhi.n	8003f3a <_printf_i+0x7e>
 8003f28:	296f      	cmp	r1, #111	; 0x6f
 8003f2a:	d020      	beq.n	8003f6e <_printf_i+0xb2>
 8003f2c:	2970      	cmp	r1, #112	; 0x70
 8003f2e:	d1dd      	bne.n	8003eec <_printf_i+0x30>
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	f043 0320 	orr.w	r3, r3, #32
 8003f36:	6023      	str	r3, [r4, #0]
 8003f38:	e003      	b.n	8003f42 <_printf_i+0x86>
 8003f3a:	2975      	cmp	r1, #117	; 0x75
 8003f3c:	d017      	beq.n	8003f6e <_printf_i+0xb2>
 8003f3e:	2978      	cmp	r1, #120	; 0x78
 8003f40:	d1d4      	bne.n	8003eec <_printf_i+0x30>
 8003f42:	2378      	movs	r3, #120	; 0x78
 8003f44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f48:	4864      	ldr	r0, [pc, #400]	; (80040dc <_printf_i+0x220>)
 8003f4a:	e055      	b.n	8003ff8 <_printf_i+0x13c>
 8003f4c:	6813      	ldr	r3, [r2, #0]
 8003f4e:	1d19      	adds	r1, r3, #4
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6011      	str	r1, [r2, #0]
 8003f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e08c      	b.n	800407a <_printf_i+0x1be>
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6011      	str	r1, [r2, #0]
 8003f64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f68:	bf18      	it	ne
 8003f6a:	b21b      	sxthne	r3, r3
 8003f6c:	e7cf      	b.n	8003f0e <_printf_i+0x52>
 8003f6e:	6813      	ldr	r3, [r2, #0]
 8003f70:	6825      	ldr	r5, [r4, #0]
 8003f72:	1d18      	adds	r0, r3, #4
 8003f74:	6010      	str	r0, [r2, #0]
 8003f76:	0628      	lsls	r0, r5, #24
 8003f78:	d501      	bpl.n	8003f7e <_printf_i+0xc2>
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	e002      	b.n	8003f84 <_printf_i+0xc8>
 8003f7e:	0668      	lsls	r0, r5, #25
 8003f80:	d5fb      	bpl.n	8003f7a <_printf_i+0xbe>
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	4854      	ldr	r0, [pc, #336]	; (80040d8 <_printf_i+0x21c>)
 8003f86:	296f      	cmp	r1, #111	; 0x6f
 8003f88:	bf14      	ite	ne
 8003f8a:	220a      	movne	r2, #10
 8003f8c:	2208      	moveq	r2, #8
 8003f8e:	2100      	movs	r1, #0
 8003f90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f94:	6865      	ldr	r5, [r4, #4]
 8003f96:	60a5      	str	r5, [r4, #8]
 8003f98:	2d00      	cmp	r5, #0
 8003f9a:	f2c0 8095 	blt.w	80040c8 <_printf_i+0x20c>
 8003f9e:	6821      	ldr	r1, [r4, #0]
 8003fa0:	f021 0104 	bic.w	r1, r1, #4
 8003fa4:	6021      	str	r1, [r4, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d13d      	bne.n	8004026 <_printf_i+0x16a>
 8003faa:	2d00      	cmp	r5, #0
 8003fac:	f040 808e 	bne.w	80040cc <_printf_i+0x210>
 8003fb0:	4665      	mov	r5, ip
 8003fb2:	2a08      	cmp	r2, #8
 8003fb4:	d10b      	bne.n	8003fce <_printf_i+0x112>
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	07db      	lsls	r3, r3, #31
 8003fba:	d508      	bpl.n	8003fce <_printf_i+0x112>
 8003fbc:	6923      	ldr	r3, [r4, #16]
 8003fbe:	6862      	ldr	r2, [r4, #4]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	bfde      	ittt	le
 8003fc4:	2330      	movle	r3, #48	; 0x30
 8003fc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fce:	ebac 0305 	sub.w	r3, ip, r5
 8003fd2:	6123      	str	r3, [r4, #16]
 8003fd4:	f8cd 8000 	str.w	r8, [sp]
 8003fd8:	463b      	mov	r3, r7
 8003fda:	aa03      	add	r2, sp, #12
 8003fdc:	4621      	mov	r1, r4
 8003fde:	4630      	mov	r0, r6
 8003fe0:	f7ff fef6 	bl	8003dd0 <_printf_common>
 8003fe4:	3001      	adds	r0, #1
 8003fe6:	d14d      	bne.n	8004084 <_printf_i+0x1c8>
 8003fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fec:	b005      	add	sp, #20
 8003fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ff2:	4839      	ldr	r0, [pc, #228]	; (80040d8 <_printf_i+0x21c>)
 8003ff4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ff8:	6813      	ldr	r3, [r2, #0]
 8003ffa:	6821      	ldr	r1, [r4, #0]
 8003ffc:	1d1d      	adds	r5, r3, #4
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6015      	str	r5, [r2, #0]
 8004002:	060a      	lsls	r2, r1, #24
 8004004:	d50b      	bpl.n	800401e <_printf_i+0x162>
 8004006:	07ca      	lsls	r2, r1, #31
 8004008:	bf44      	itt	mi
 800400a:	f041 0120 	orrmi.w	r1, r1, #32
 800400e:	6021      	strmi	r1, [r4, #0]
 8004010:	b91b      	cbnz	r3, 800401a <_printf_i+0x15e>
 8004012:	6822      	ldr	r2, [r4, #0]
 8004014:	f022 0220 	bic.w	r2, r2, #32
 8004018:	6022      	str	r2, [r4, #0]
 800401a:	2210      	movs	r2, #16
 800401c:	e7b7      	b.n	8003f8e <_printf_i+0xd2>
 800401e:	064d      	lsls	r5, r1, #25
 8004020:	bf48      	it	mi
 8004022:	b29b      	uxthmi	r3, r3
 8004024:	e7ef      	b.n	8004006 <_printf_i+0x14a>
 8004026:	4665      	mov	r5, ip
 8004028:	fbb3 f1f2 	udiv	r1, r3, r2
 800402c:	fb02 3311 	mls	r3, r2, r1, r3
 8004030:	5cc3      	ldrb	r3, [r0, r3]
 8004032:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004036:	460b      	mov	r3, r1
 8004038:	2900      	cmp	r1, #0
 800403a:	d1f5      	bne.n	8004028 <_printf_i+0x16c>
 800403c:	e7b9      	b.n	8003fb2 <_printf_i+0xf6>
 800403e:	6813      	ldr	r3, [r2, #0]
 8004040:	6825      	ldr	r5, [r4, #0]
 8004042:	6961      	ldr	r1, [r4, #20]
 8004044:	1d18      	adds	r0, r3, #4
 8004046:	6010      	str	r0, [r2, #0]
 8004048:	0628      	lsls	r0, r5, #24
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	d501      	bpl.n	8004052 <_printf_i+0x196>
 800404e:	6019      	str	r1, [r3, #0]
 8004050:	e002      	b.n	8004058 <_printf_i+0x19c>
 8004052:	066a      	lsls	r2, r5, #25
 8004054:	d5fb      	bpl.n	800404e <_printf_i+0x192>
 8004056:	8019      	strh	r1, [r3, #0]
 8004058:	2300      	movs	r3, #0
 800405a:	6123      	str	r3, [r4, #16]
 800405c:	4665      	mov	r5, ip
 800405e:	e7b9      	b.n	8003fd4 <_printf_i+0x118>
 8004060:	6813      	ldr	r3, [r2, #0]
 8004062:	1d19      	adds	r1, r3, #4
 8004064:	6011      	str	r1, [r2, #0]
 8004066:	681d      	ldr	r5, [r3, #0]
 8004068:	6862      	ldr	r2, [r4, #4]
 800406a:	2100      	movs	r1, #0
 800406c:	4628      	mov	r0, r5
 800406e:	f7fc f8b7 	bl	80001e0 <memchr>
 8004072:	b108      	cbz	r0, 8004078 <_printf_i+0x1bc>
 8004074:	1b40      	subs	r0, r0, r5
 8004076:	6060      	str	r0, [r4, #4]
 8004078:	6863      	ldr	r3, [r4, #4]
 800407a:	6123      	str	r3, [r4, #16]
 800407c:	2300      	movs	r3, #0
 800407e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004082:	e7a7      	b.n	8003fd4 <_printf_i+0x118>
 8004084:	6923      	ldr	r3, [r4, #16]
 8004086:	462a      	mov	r2, r5
 8004088:	4639      	mov	r1, r7
 800408a:	4630      	mov	r0, r6
 800408c:	47c0      	blx	r8
 800408e:	3001      	adds	r0, #1
 8004090:	d0aa      	beq.n	8003fe8 <_printf_i+0x12c>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	079b      	lsls	r3, r3, #30
 8004096:	d413      	bmi.n	80040c0 <_printf_i+0x204>
 8004098:	68e0      	ldr	r0, [r4, #12]
 800409a:	9b03      	ldr	r3, [sp, #12]
 800409c:	4298      	cmp	r0, r3
 800409e:	bfb8      	it	lt
 80040a0:	4618      	movlt	r0, r3
 80040a2:	e7a3      	b.n	8003fec <_printf_i+0x130>
 80040a4:	2301      	movs	r3, #1
 80040a6:	464a      	mov	r2, r9
 80040a8:	4639      	mov	r1, r7
 80040aa:	4630      	mov	r0, r6
 80040ac:	47c0      	blx	r8
 80040ae:	3001      	adds	r0, #1
 80040b0:	d09a      	beq.n	8003fe8 <_printf_i+0x12c>
 80040b2:	3501      	adds	r5, #1
 80040b4:	68e3      	ldr	r3, [r4, #12]
 80040b6:	9a03      	ldr	r2, [sp, #12]
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	42ab      	cmp	r3, r5
 80040bc:	dcf2      	bgt.n	80040a4 <_printf_i+0x1e8>
 80040be:	e7eb      	b.n	8004098 <_printf_i+0x1dc>
 80040c0:	2500      	movs	r5, #0
 80040c2:	f104 0919 	add.w	r9, r4, #25
 80040c6:	e7f5      	b.n	80040b4 <_printf_i+0x1f8>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ac      	bne.n	8004026 <_printf_i+0x16a>
 80040cc:	7803      	ldrb	r3, [r0, #0]
 80040ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040d6:	e76c      	b.n	8003fb2 <_printf_i+0xf6>
 80040d8:	08004375 	.word	0x08004375
 80040dc:	08004386 	.word	0x08004386

080040e0 <_sbrk_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	4c06      	ldr	r4, [pc, #24]	; (80040fc <_sbrk_r+0x1c>)
 80040e4:	2300      	movs	r3, #0
 80040e6:	4605      	mov	r5, r0
 80040e8:	4608      	mov	r0, r1
 80040ea:	6023      	str	r3, [r4, #0]
 80040ec:	f7fd f830 	bl	8001150 <_sbrk>
 80040f0:	1c43      	adds	r3, r0, #1
 80040f2:	d102      	bne.n	80040fa <_sbrk_r+0x1a>
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	b103      	cbz	r3, 80040fa <_sbrk_r+0x1a>
 80040f8:	602b      	str	r3, [r5, #0]
 80040fa:	bd38      	pop	{r3, r4, r5, pc}
 80040fc:	20000314 	.word	0x20000314

08004100 <strncmp>:
 8004100:	b510      	push	{r4, lr}
 8004102:	b16a      	cbz	r2, 8004120 <strncmp+0x20>
 8004104:	3901      	subs	r1, #1
 8004106:	1884      	adds	r4, r0, r2
 8004108:	f810 3b01 	ldrb.w	r3, [r0], #1
 800410c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004110:	4293      	cmp	r3, r2
 8004112:	d103      	bne.n	800411c <strncmp+0x1c>
 8004114:	42a0      	cmp	r0, r4
 8004116:	d001      	beq.n	800411c <strncmp+0x1c>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f5      	bne.n	8004108 <strncmp+0x8>
 800411c:	1a98      	subs	r0, r3, r2
 800411e:	bd10      	pop	{r4, pc}
 8004120:	4610      	mov	r0, r2
 8004122:	e7fc      	b.n	800411e <strncmp+0x1e>

08004124 <__ascii_wctomb>:
 8004124:	b149      	cbz	r1, 800413a <__ascii_wctomb+0x16>
 8004126:	2aff      	cmp	r2, #255	; 0xff
 8004128:	bf85      	ittet	hi
 800412a:	238a      	movhi	r3, #138	; 0x8a
 800412c:	6003      	strhi	r3, [r0, #0]
 800412e:	700a      	strbls	r2, [r1, #0]
 8004130:	f04f 30ff 	movhi.w	r0, #4294967295
 8004134:	bf98      	it	ls
 8004136:	2001      	movls	r0, #1
 8004138:	4770      	bx	lr
 800413a:	4608      	mov	r0, r1
 800413c:	4770      	bx	lr

0800413e <memmove>:
 800413e:	4288      	cmp	r0, r1
 8004140:	b510      	push	{r4, lr}
 8004142:	eb01 0302 	add.w	r3, r1, r2
 8004146:	d807      	bhi.n	8004158 <memmove+0x1a>
 8004148:	1e42      	subs	r2, r0, #1
 800414a:	4299      	cmp	r1, r3
 800414c:	d00a      	beq.n	8004164 <memmove+0x26>
 800414e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004152:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004156:	e7f8      	b.n	800414a <memmove+0xc>
 8004158:	4283      	cmp	r3, r0
 800415a:	d9f5      	bls.n	8004148 <memmove+0xa>
 800415c:	1881      	adds	r1, r0, r2
 800415e:	1ad2      	subs	r2, r2, r3
 8004160:	42d3      	cmn	r3, r2
 8004162:	d100      	bne.n	8004166 <memmove+0x28>
 8004164:	bd10      	pop	{r4, pc}
 8004166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800416a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800416e:	e7f7      	b.n	8004160 <memmove+0x22>

08004170 <__malloc_lock>:
 8004170:	4770      	bx	lr

08004172 <__malloc_unlock>:
 8004172:	4770      	bx	lr

08004174 <_realloc_r>:
 8004174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004176:	4607      	mov	r7, r0
 8004178:	4614      	mov	r4, r2
 800417a:	460e      	mov	r6, r1
 800417c:	b921      	cbnz	r1, 8004188 <_realloc_r+0x14>
 800417e:	4611      	mov	r1, r2
 8004180:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004184:	f7ff bc78 	b.w	8003a78 <_malloc_r>
 8004188:	b922      	cbnz	r2, 8004194 <_realloc_r+0x20>
 800418a:	f7ff fc27 	bl	80039dc <_free_r>
 800418e:	4625      	mov	r5, r4
 8004190:	4628      	mov	r0, r5
 8004192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004194:	f000 f814 	bl	80041c0 <_malloc_usable_size_r>
 8004198:	42a0      	cmp	r0, r4
 800419a:	d20f      	bcs.n	80041bc <_realloc_r+0x48>
 800419c:	4621      	mov	r1, r4
 800419e:	4638      	mov	r0, r7
 80041a0:	f7ff fc6a 	bl	8003a78 <_malloc_r>
 80041a4:	4605      	mov	r5, r0
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d0f2      	beq.n	8004190 <_realloc_r+0x1c>
 80041aa:	4631      	mov	r1, r6
 80041ac:	4622      	mov	r2, r4
 80041ae:	f7fe fffd 	bl	80031ac <memcpy>
 80041b2:	4631      	mov	r1, r6
 80041b4:	4638      	mov	r0, r7
 80041b6:	f7ff fc11 	bl	80039dc <_free_r>
 80041ba:	e7e9      	b.n	8004190 <_realloc_r+0x1c>
 80041bc:	4635      	mov	r5, r6
 80041be:	e7e7      	b.n	8004190 <_realloc_r+0x1c>

080041c0 <_malloc_usable_size_r>:
 80041c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041c4:	1f18      	subs	r0, r3, #4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bfbc      	itt	lt
 80041ca:	580b      	ldrlt	r3, [r1, r0]
 80041cc:	18c0      	addlt	r0, r0, r3
 80041ce:	4770      	bx	lr

080041d0 <_init>:
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	bf00      	nop
 80041d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d6:	bc08      	pop	{r3}
 80041d8:	469e      	mov	lr, r3
 80041da:	4770      	bx	lr

080041dc <_fini>:
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041de:	bf00      	nop
 80041e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e2:	bc08      	pop	{r3}
 80041e4:	469e      	mov	lr, r3
 80041e6:	4770      	bx	lr
