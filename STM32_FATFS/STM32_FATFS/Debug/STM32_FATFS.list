
STM32_FATFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f00  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005088  08005088  00015088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005178  08005178  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  08005178  08005178  00015178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005180  08005180  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005184  08005184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08005188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e8  20000058  080051e0  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  080051e0  00020a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d190  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e78  00000000  00000000  0002d218  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000978  00000000  00000000  0002f090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000880  00000000  00000000  0002fa08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021308  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009abb  00000000  00000000  00051590  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c20f3  00000000  00000000  0005b04b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d13e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002538  00000000  00000000  0011d1bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000058 	.word	0x20000058
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005070 	.word	0x08005070

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000005c 	.word	0x2000005c
 80001c4:	08005070 	.word	0x08005070

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d2:	4804      	ldr	r0, [pc, #16]	; (80004e4 <SELECT+0x1c>)
 80004d4:	f001 fa0c 	bl	80018f0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004d8:	2001      	movs	r0, #1
 80004da:	f000 ff67 	bl	80013ac <HAL_Delay>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020400 	.word	0x40020400

080004e8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f2:	4804      	ldr	r0, [pc, #16]	; (8000504 <DESELECT+0x1c>)
 80004f4:	f001 f9fc 	bl	80018f0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004f8:	2001      	movs	r0, #1
 80004fa:	f000 ff57 	bl	80013ac <HAL_Delay>
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40020400 	.word	0x40020400

08000508 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000512:	bf00      	nop
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <SPI_TxByte+0x30>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	2b02      	cmp	r3, #2
 8000520:	d1f8      	bne.n	8000514 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000522:	1df9      	adds	r1, r7, #7
 8000524:	2364      	movs	r3, #100	; 0x64
 8000526:	2201      	movs	r2, #1
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <SPI_TxByte+0x30>)
 800052a:	f001 fe8d 	bl	8002248 <HAL_SPI_Transmit>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000b0 	.word	0x200000b0

0800053c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000548:	bf00      	nop
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <SPI_TxBuffer+0x30>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	f003 0302 	and.w	r3, r3, #2
 8000554:	2b02      	cmp	r3, #2
 8000556:	d1f8      	bne.n	800054a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000558:	887a      	ldrh	r2, [r7, #2]
 800055a:	2364      	movs	r3, #100	; 0x64
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	4803      	ldr	r0, [pc, #12]	; (800056c <SPI_TxBuffer+0x30>)
 8000560:	f001 fe72 	bl	8002248 <HAL_SPI_Transmit>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	200000b0 	.word	0x200000b0

08000570 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000576:	23ff      	movs	r3, #255	; 0xff
 8000578:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800057a:	bf00      	nop
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <SPI_RxByte+0x34>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	2b02      	cmp	r3, #2
 8000588:	d1f8      	bne.n	800057c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800058a:	1dba      	adds	r2, r7, #6
 800058c:	1df9      	adds	r1, r7, #7
 800058e:	2364      	movs	r3, #100	; 0x64
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2301      	movs	r3, #1
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <SPI_RxByte+0x34>)
 8000596:	f001 ff8b 	bl	80024b0 <HAL_SPI_TransmitReceive>

	return data;
 800059a:	79bb      	ldrb	r3, [r7, #6]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000b0 	.word	0x200000b0

080005a8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005b0:	f7ff ffde 	bl	8000570 <SPI_RxByte>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	701a      	strb	r2, [r3, #0]
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <SD_ReadyWait+0x30>)
 80005cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005d2:	f7ff ffcd 	bl	8000570 <SPI_RxByte>
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2bff      	cmp	r3, #255	; 0xff
 80005de:	d003      	beq.n	80005e8 <SD_ReadyWait+0x24>
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <SD_ReadyWait+0x30>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1f4      	bne.n	80005d2 <SD_ReadyWait+0xe>

	return res;
 80005e8:	79fb      	ldrb	r3, [r7, #7]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200000ac 	.word	0x200000ac

080005f8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80005fe:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000602:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000604:	f7ff ff70 	bl	80004e8 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	e005      	b.n	800061a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800060e:	20ff      	movs	r0, #255	; 0xff
 8000610:	f7ff ff7a 	bl	8000508 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	3301      	adds	r3, #1
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	2b09      	cmp	r3, #9
 800061e:	ddf6      	ble.n	800060e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000620:	f7ff ff52 	bl	80004c8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000624:	2340      	movs	r3, #64	; 0x40
 8000626:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000638:	2395      	movs	r3, #149	; 0x95
 800063a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800063c:	463b      	mov	r3, r7
 800063e:	2106      	movs	r1, #6
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff7b 	bl	800053c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000646:	e002      	b.n	800064e <SD_PowerOn+0x56>
	{
		cnt--;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3b01      	subs	r3, #1
 800064c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800064e:	f7ff ff8f 	bl	8000570 <SPI_RxByte>
 8000652:	4603      	mov	r3, r0
 8000654:	2b01      	cmp	r3, #1
 8000656:	d002      	beq.n	800065e <SD_PowerOn+0x66>
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1f4      	bne.n	8000648 <SD_PowerOn+0x50>
	}

	DESELECT();
 800065e:	f7ff ff43 	bl	80004e8 <DESELECT>
	SPI_TxByte(0XFF);
 8000662:	20ff      	movs	r0, #255	; 0xff
 8000664:	f7ff ff50 	bl	8000508 <SPI_TxByte>

	PowerFlag = 1;
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <SD_PowerOn+0x80>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000075 	.word	0x20000075

0800067c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <SD_PowerOff+0x14>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	20000075 	.word	0x20000075

08000694 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <SD_CheckPower+0x14>)
 800069a:	781b      	ldrb	r3, [r3, #0]
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000075 	.word	0x20000075

080006ac <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <SD_RxDataBlock+0x58>)
 80006b8:	22c8      	movs	r2, #200	; 0xc8
 80006ba:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006bc:	f7ff ff58 	bl	8000570 <SPI_RxByte>
 80006c0:	4603      	mov	r3, r0
 80006c2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	2bff      	cmp	r3, #255	; 0xff
 80006c8:	d103      	bne.n	80006d2 <SD_RxDataBlock+0x26>
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <SD_RxDataBlock+0x58>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1f4      	bne.n	80006bc <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	2bfe      	cmp	r3, #254	; 0xfe
 80006d6:	d001      	beq.n	80006dc <SD_RxDataBlock+0x30>
 80006d8:	2300      	movs	r3, #0
 80006da:	e00f      	b.n	80006fc <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	607a      	str	r2, [r7, #4]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff60 	bl	80005a8 <SPI_RxBytePtr>
	} while(len--);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	1e5a      	subs	r2, r3, #1
 80006ec:	603a      	str	r2, [r7, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1f4      	bne.n	80006dc <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80006f2:	f7ff ff3d 	bl	8000570 <SPI_RxByte>
	SPI_RxByte();
 80006f6:	f7ff ff3b 	bl	8000570 <SPI_RxByte>

	return TRUE;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000ae 	.word	0x200000ae

08000708 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000718:	f7ff ff54 	bl	80005c4 <SD_ReadyWait>
 800071c:	4603      	mov	r3, r0
 800071e:	2bff      	cmp	r3, #255	; 0xff
 8000720:	d001      	beq.n	8000726 <SD_TxDataBlock+0x1e>
 8000722:	2300      	movs	r3, #0
 8000724:	e02f      	b.n	8000786 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff feed 	bl	8000508 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	2bfd      	cmp	r3, #253	; 0xfd
 8000732:	d020      	beq.n	8000776 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000734:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff feff 	bl	800053c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800073e:	f7ff ff17 	bl	8000570 <SPI_RxByte>
		SPI_RxByte();
 8000742:	f7ff ff15 	bl	8000570 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000746:	e00b      	b.n	8000760 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000748:	f7ff ff12 	bl	8000570 <SPI_RxByte>
 800074c:	4603      	mov	r3, r0
 800074e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	f003 031f 	and.w	r3, r3, #31
 8000756:	2b05      	cmp	r3, #5
 8000758:	d006      	beq.n	8000768 <SD_TxDataBlock+0x60>
			i++;
 800075a:	7bbb      	ldrb	r3, [r7, #14]
 800075c:	3301      	adds	r3, #1
 800075e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	2b40      	cmp	r3, #64	; 0x40
 8000764:	d9f0      	bls.n	8000748 <SD_TxDataBlock+0x40>
 8000766:	e000      	b.n	800076a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000768:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800076a:	bf00      	nop
 800076c:	f7ff ff00 	bl	8000570 <SPI_RxByte>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d0fa      	beq.n	800076c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	f003 031f 	and.w	r3, r3, #31
 800077c:	2b05      	cmp	r3, #5
 800077e:	d101      	bne.n	8000784 <SD_TxDataBlock+0x7c>
 8000780:	2301      	movs	r3, #1
 8000782:	e000      	b.n	8000786 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b084      	sub	sp, #16
 8000792:	af00      	add	r7, sp, #0
 8000794:	4603      	mov	r3, r0
 8000796:	6039      	str	r1, [r7, #0]
 8000798:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800079a:	f7ff ff13 	bl	80005c4 <SD_ReadyWait>
 800079e:	4603      	mov	r3, r0
 80007a0:	2bff      	cmp	r3, #255	; 0xff
 80007a2:	d001      	beq.n	80007a8 <SD_SendCmd+0x1a>
 80007a4:	23ff      	movs	r3, #255	; 0xff
 80007a6:	e042      	b.n	800082e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff feac 	bl	8000508 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	0e1b      	lsrs	r3, r3, #24
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fea6 	bl	8000508 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	0c1b      	lsrs	r3, r3, #16
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fea0 	bl	8000508 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	0a1b      	lsrs	r3, r3, #8
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fe9a 	bl	8000508 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fe95 	bl	8000508 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b40      	cmp	r3, #64	; 0x40
 80007e2:	d102      	bne.n	80007ea <SD_SendCmd+0x5c>
 80007e4:	2395      	movs	r3, #149	; 0x95
 80007e6:	73fb      	strb	r3, [r7, #15]
 80007e8:	e007      	b.n	80007fa <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b48      	cmp	r3, #72	; 0x48
 80007ee:	d102      	bne.n	80007f6 <SD_SendCmd+0x68>
 80007f0:	2387      	movs	r3, #135	; 0x87
 80007f2:	73fb      	strb	r3, [r7, #15]
 80007f4:	e001      	b.n	80007fa <SD_SendCmd+0x6c>
	else crc = 1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fe83 	bl	8000508 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b4c      	cmp	r3, #76	; 0x4c
 8000806:	d101      	bne.n	800080c <SD_SendCmd+0x7e>
 8000808:	f7ff feb2 	bl	8000570 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800080c:	230a      	movs	r3, #10
 800080e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000810:	f7ff feae 	bl	8000570 <SPI_RxByte>
 8000814:	4603      	mov	r3, r0
 8000816:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000818:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800081c:	2b00      	cmp	r3, #0
 800081e:	da05      	bge.n	800082c <SD_SendCmd+0x9e>
 8000820:	7bbb      	ldrb	r3, [r7, #14]
 8000822:	3b01      	subs	r3, #1
 8000824:	73bb      	strb	r3, [r7, #14]
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f1      	bne.n	8000810 <SD_SendCmd+0x82>

	return res;
 800082c:	7b7b      	ldrb	r3, [r7, #13]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SD_disk_initialize+0x14>
 8000848:	2301      	movs	r3, #1
 800084a:	e0d1      	b.n	80009f0 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800084c:	4b6a      	ldr	r3, [pc, #424]	; (80009f8 <SD_disk_initialize+0x1c0>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <SD_disk_initialize+0x2a>
 800085a:	4b67      	ldr	r3, [pc, #412]	; (80009f8 <SD_disk_initialize+0x1c0>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	e0c6      	b.n	80009f0 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000862:	f7ff fec9 	bl	80005f8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000866:	f7ff fe2f 	bl	80004c8 <SELECT>

	/* check disk type */
	type = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800086e:	2100      	movs	r1, #0
 8000870:	2040      	movs	r0, #64	; 0x40
 8000872:	f7ff ff8c 	bl	800078e <SD_SendCmd>
 8000876:	4603      	mov	r3, r0
 8000878:	2b01      	cmp	r3, #1
 800087a:	f040 80a1 	bne.w	80009c0 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800087e:	4b5f      	ldr	r3, [pc, #380]	; (80009fc <SD_disk_initialize+0x1c4>)
 8000880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000884:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000886:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800088a:	2048      	movs	r0, #72	; 0x48
 800088c:	f7ff ff7f 	bl	800078e <SD_SendCmd>
 8000890:	4603      	mov	r3, r0
 8000892:	2b01      	cmp	r3, #1
 8000894:	d155      	bne.n	8000942 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000896:	2300      	movs	r3, #0
 8000898:	73fb      	strb	r3, [r7, #15]
 800089a:	e00c      	b.n	80008b6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800089c:	7bfc      	ldrb	r4, [r7, #15]
 800089e:	f7ff fe67 	bl	8000570 <SPI_RxByte>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	4423      	add	r3, r4
 80008ac:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	3301      	adds	r3, #1
 80008b4:	73fb      	strb	r3, [r7, #15]
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d9ef      	bls.n	800089c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008bc:	7abb      	ldrb	r3, [r7, #10]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d17e      	bne.n	80009c0 <SD_disk_initialize+0x188>
 80008c2:	7afb      	ldrb	r3, [r7, #11]
 80008c4:	2baa      	cmp	r3, #170	; 0xaa
 80008c6:	d17b      	bne.n	80009c0 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008c8:	2100      	movs	r1, #0
 80008ca:	2077      	movs	r0, #119	; 0x77
 80008cc:	f7ff ff5f 	bl	800078e <SD_SendCmd>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d807      	bhi.n	80008e6 <SD_disk_initialize+0xae>
 80008d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008da:	2069      	movs	r0, #105	; 0x69
 80008dc:	f7ff ff57 	bl	800078e <SD_SendCmd>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d004      	beq.n	80008f0 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80008e6:	4b45      	ldr	r3, [pc, #276]	; (80009fc <SD_disk_initialize+0x1c4>)
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1ec      	bne.n	80008c8 <SD_disk_initialize+0x90>
 80008ee:	e000      	b.n	80008f2 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008f0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80008f2:	4b42      	ldr	r3, [pc, #264]	; (80009fc <SD_disk_initialize+0x1c4>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d062      	beq.n	80009c0 <SD_disk_initialize+0x188>
 80008fa:	2100      	movs	r1, #0
 80008fc:	207a      	movs	r0, #122	; 0x7a
 80008fe:	f7ff ff46 	bl	800078e <SD_SendCmd>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d15b      	bne.n	80009c0 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000908:	2300      	movs	r3, #0
 800090a:	73fb      	strb	r3, [r7, #15]
 800090c:	e00c      	b.n	8000928 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800090e:	7bfc      	ldrb	r4, [r7, #15]
 8000910:	f7ff fe2e 	bl	8000570 <SPI_RxByte>
 8000914:	4603      	mov	r3, r0
 8000916:	461a      	mov	r2, r3
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4423      	add	r3, r4
 800091e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	3301      	adds	r3, #1
 8000926:	73fb      	strb	r3, [r7, #15]
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	2b03      	cmp	r3, #3
 800092c:	d9ef      	bls.n	800090e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800092e:	7a3b      	ldrb	r3, [r7, #8]
 8000930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SD_disk_initialize+0x104>
 8000938:	230c      	movs	r3, #12
 800093a:	e000      	b.n	800093e <SD_disk_initialize+0x106>
 800093c:	2304      	movs	r3, #4
 800093e:	73bb      	strb	r3, [r7, #14]
 8000940:	e03e      	b.n	80009c0 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000942:	2100      	movs	r1, #0
 8000944:	2077      	movs	r0, #119	; 0x77
 8000946:	f7ff ff22 	bl	800078e <SD_SendCmd>
 800094a:	4603      	mov	r3, r0
 800094c:	2b01      	cmp	r3, #1
 800094e:	d808      	bhi.n	8000962 <SD_disk_initialize+0x12a>
 8000950:	2100      	movs	r1, #0
 8000952:	2069      	movs	r0, #105	; 0x69
 8000954:	f7ff ff1b 	bl	800078e <SD_SendCmd>
 8000958:	4603      	mov	r3, r0
 800095a:	2b01      	cmp	r3, #1
 800095c:	d801      	bhi.n	8000962 <SD_disk_initialize+0x12a>
 800095e:	2302      	movs	r3, #2
 8000960:	e000      	b.n	8000964 <SD_disk_initialize+0x12c>
 8000962:	2301      	movs	r3, #1
 8000964:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000966:	7bbb      	ldrb	r3, [r7, #14]
 8000968:	2b02      	cmp	r3, #2
 800096a:	d10e      	bne.n	800098a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800096c:	2100      	movs	r1, #0
 800096e:	2077      	movs	r0, #119	; 0x77
 8000970:	f7ff ff0d 	bl	800078e <SD_SendCmd>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d80e      	bhi.n	8000998 <SD_disk_initialize+0x160>
 800097a:	2100      	movs	r1, #0
 800097c:	2069      	movs	r0, #105	; 0x69
 800097e:	f7ff ff06 	bl	800078e <SD_SendCmd>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d107      	bne.n	8000998 <SD_disk_initialize+0x160>
 8000988:	e00c      	b.n	80009a4 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800098a:	2100      	movs	r1, #0
 800098c:	2041      	movs	r0, #65	; 0x41
 800098e:	f7ff fefe 	bl	800078e <SD_SendCmd>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d004      	beq.n	80009a2 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <SD_disk_initialize+0x1c4>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d1e2      	bne.n	8000966 <SD_disk_initialize+0x12e>
 80009a0:	e000      	b.n	80009a4 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009a2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <SD_disk_initialize+0x1c4>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d007      	beq.n	80009bc <SD_disk_initialize+0x184>
 80009ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b0:	2050      	movs	r0, #80	; 0x50
 80009b2:	f7ff feec 	bl	800078e <SD_SendCmd>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SD_disk_initialize+0x188>
 80009bc:	2300      	movs	r3, #0
 80009be:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009c0:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <SD_disk_initialize+0x1c8>)
 80009c2:	7bbb      	ldrb	r3, [r7, #14]
 80009c4:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009c6:	f7ff fd8f 	bl	80004e8 <DESELECT>
	SPI_RxByte();
 80009ca:	f7ff fdd1 	bl	8000570 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009ce:	7bbb      	ldrb	r3, [r7, #14]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d008      	beq.n	80009e6 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <SD_disk_initialize+0x1c0>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f023 0301 	bic.w	r3, r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <SD_disk_initialize+0x1c0>)
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	e001      	b.n	80009ea <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80009e6:	f7ff fe49 	bl	800067c <SD_PowerOff>
	}

	return Stat;
 80009ea:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <SD_disk_initialize+0x1c0>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b2db      	uxtb	r3, r3
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	200000ae 	.word	0x200000ae
 8000a00:	20000074 	.word	0x20000074

08000a04 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SD_disk_status+0x14>
 8000a14:	2301      	movs	r3, #1
 8000a16:	e002      	b.n	8000a1e <SD_disk_status+0x1a>
	return Stat;
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SD_disk_status+0x28>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000000 	.word	0x20000000

08000a30 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d102      	bne.n	8000a4c <SD_disk_read+0x1c>
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d101      	bne.n	8000a50 <SD_disk_read+0x20>
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	e051      	b.n	8000af4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a50:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <SD_disk_read+0xcc>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SD_disk_read+0x32>
 8000a5e:	2303      	movs	r3, #3
 8000a60:	e048      	b.n	8000af4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a62:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <SD_disk_read+0xd0>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d102      	bne.n	8000a74 <SD_disk_read+0x44>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	025b      	lsls	r3, r3, #9
 8000a72:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a74:	f7ff fd28 	bl	80004c8 <SELECT>

	if (count == 1)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d111      	bne.n	8000aa2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	2051      	movs	r0, #81	; 0x51
 8000a82:	f7ff fe84 	bl	800078e <SD_SendCmd>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d129      	bne.n	8000ae0 <SD_disk_read+0xb0>
 8000a8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a90:	68b8      	ldr	r0, [r7, #8]
 8000a92:	f7ff fe0b 	bl	80006ac <SD_RxDataBlock>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d021      	beq.n	8000ae0 <SD_disk_read+0xb0>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	e01e      	b.n	8000ae0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	2052      	movs	r0, #82	; 0x52
 8000aa6:	f7ff fe72 	bl	800078e <SD_SendCmd>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d117      	bne.n	8000ae0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ab0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab4:	68b8      	ldr	r0, [r7, #8]
 8000ab6:	f7ff fdf9 	bl	80006ac <SD_RxDataBlock>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00a      	beq.n	8000ad6 <SD_disk_read+0xa6>
				buff += 512;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ac6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1ed      	bne.n	8000ab0 <SD_disk_read+0x80>
 8000ad4:	e000      	b.n	8000ad8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ad6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	204c      	movs	r0, #76	; 0x4c
 8000adc:	f7ff fe57 	bl	800078e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000ae0:	f7ff fd02 	bl	80004e8 <DESELECT>
	SPI_RxByte();
 8000ae4:	f7ff fd44 	bl	8000570 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf14      	ite	ne
 8000aee:	2301      	movne	r3, #1
 8000af0:	2300      	moveq	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000074 	.word	0x20000074

08000b04 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <SD_disk_write+0x1c>
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <SD_disk_write+0x20>
 8000b20:	2304      	movs	r3, #4
 8000b22:	e06b      	b.n	8000bfc <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b24:	4b37      	ldr	r3, [pc, #220]	; (8000c04 <SD_disk_write+0x100>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SD_disk_write+0x32>
 8000b32:	2303      	movs	r3, #3
 8000b34:	e062      	b.n	8000bfc <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b36:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <SD_disk_write+0x100>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SD_disk_write+0x44>
 8000b44:	2302      	movs	r3, #2
 8000b46:	e059      	b.n	8000bfc <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b48:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <SD_disk_write+0x104>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <SD_disk_write+0x56>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	025b      	lsls	r3, r3, #9
 8000b58:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b5a:	f7ff fcb5 	bl	80004c8 <SELECT>

	if (count == 1)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d110      	bne.n	8000b86 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b64:	6879      	ldr	r1, [r7, #4]
 8000b66:	2058      	movs	r0, #88	; 0x58
 8000b68:	f7ff fe11 	bl	800078e <SD_SendCmd>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d13a      	bne.n	8000be8 <SD_disk_write+0xe4>
 8000b72:	21fe      	movs	r1, #254	; 0xfe
 8000b74:	68b8      	ldr	r0, [r7, #8]
 8000b76:	f7ff fdc7 	bl	8000708 <SD_TxDataBlock>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d033      	beq.n	8000be8 <SD_disk_write+0xe4>
			count = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	e030      	b.n	8000be8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b86:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <SD_disk_write+0x104>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d007      	beq.n	8000ba2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2077      	movs	r0, #119	; 0x77
 8000b96:	f7ff fdfa 	bl	800078e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b9a:	6839      	ldr	r1, [r7, #0]
 8000b9c:	2057      	movs	r0, #87	; 0x57
 8000b9e:	f7ff fdf6 	bl	800078e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	2059      	movs	r0, #89	; 0x59
 8000ba6:	f7ff fdf2 	bl	800078e <SD_SendCmd>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d11b      	bne.n	8000be8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bb0:	21fc      	movs	r1, #252	; 0xfc
 8000bb2:	68b8      	ldr	r0, [r7, #8]
 8000bb4:	f7ff fda8 	bl	8000708 <SD_TxDataBlock>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d00a      	beq.n	8000bd4 <SD_disk_write+0xd0>
				buff += 512;
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bc4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1ee      	bne.n	8000bb0 <SD_disk_write+0xac>
 8000bd2:	e000      	b.n	8000bd6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bd4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000bd6:	21fd      	movs	r1, #253	; 0xfd
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff fd95 	bl	8000708 <SD_TxDataBlock>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d101      	bne.n	8000be8 <SD_disk_write+0xe4>
			{
				count = 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000be8:	f7ff fc7e 	bl	80004e8 <DESELECT>
	SPI_RxByte();
 8000bec:	f7ff fcc0 	bl	8000570 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf14      	ite	ne
 8000bf6:	2301      	movne	r3, #1
 8000bf8:	2300      	moveq	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000074 	.word	0x20000074

08000c0c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b08b      	sub	sp, #44	; 0x2c
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	603a      	str	r2, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SD_disk_ioctl+0x1e>
 8000c26:	2304      	movs	r3, #4
 8000c28:	e113      	b.n	8000e52 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000c30:	79bb      	ldrb	r3, [r7, #6]
 8000c32:	2b05      	cmp	r3, #5
 8000c34:	d121      	bne.n	8000c7a <SD_disk_ioctl+0x6e>
	{
		switch (*ptr)
 8000c36:	6a3b      	ldr	r3, [r7, #32]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d009      	beq.n	8000c52 <SD_disk_ioctl+0x46>
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d00d      	beq.n	8000c5e <SD_disk_ioctl+0x52>
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d115      	bne.n	8000c72 <SD_disk_ioctl+0x66>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c46:	f7ff fd19 	bl	800067c <SD_PowerOff>
			res = RES_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c50:	e0fd      	b.n	8000e4e <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c52:	f7ff fcd1 	bl	80005f8 <SD_PowerOn>
			res = RES_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c5c:	e0f7      	b.n	8000e4e <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c5e:	6a3b      	ldr	r3, [r7, #32]
 8000c60:	1c5c      	adds	r4, r3, #1
 8000c62:	f7ff fd17 	bl	8000694 <SD_CheckPower>
 8000c66:	4603      	mov	r3, r0
 8000c68:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c70:	e0ed      	b.n	8000e4e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000c72:	2304      	movs	r3, #4
 8000c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c78:	e0e9      	b.n	8000e4e <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c7a:	4b78      	ldr	r3, [pc, #480]	; (8000e5c <SD_disk_ioctl+0x250>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SD_disk_ioctl+0x80>
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e0e2      	b.n	8000e52 <SD_disk_ioctl+0x246>

		SELECT();
 8000c8c:	f7ff fc1c 	bl	80004c8 <SELECT>

		switch (ctrl)
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	2b0d      	cmp	r3, #13
 8000c94:	f200 80cc 	bhi.w	8000e30 <SD_disk_ioctl+0x224>
 8000c98:	a201      	add	r2, pc, #4	; (adr r2, 8000ca0 <SD_disk_ioctl+0x94>)
 8000c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9e:	bf00      	nop
 8000ca0:	08000d9b 	.word	0x08000d9b
 8000ca4:	08000cd9 	.word	0x08000cd9
 8000ca8:	08000d8b 	.word	0x08000d8b
 8000cac:	08000e31 	.word	0x08000e31
 8000cb0:	08000e31 	.word	0x08000e31
 8000cb4:	08000e31 	.word	0x08000e31
 8000cb8:	08000e31 	.word	0x08000e31
 8000cbc:	08000e31 	.word	0x08000e31
 8000cc0:	08000e31 	.word	0x08000e31
 8000cc4:	08000e31 	.word	0x08000e31
 8000cc8:	08000e31 	.word	0x08000e31
 8000ccc:	08000dad 	.word	0x08000dad
 8000cd0:	08000dd1 	.word	0x08000dd1
 8000cd4:	08000df5 	.word	0x08000df5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2049      	movs	r0, #73	; 0x49
 8000cdc:	f7ff fd57 	bl	800078e <SD_SendCmd>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 80a8 	bne.w	8000e38 <SD_disk_ioctl+0x22c>
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	2110      	movs	r1, #16
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fcdc 	bl	80006ac <SD_RxDataBlock>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 809e 	beq.w	8000e38 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000cfc:	7b3b      	ldrb	r3, [r7, #12]
 8000cfe:	099b      	lsrs	r3, r3, #6
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d10e      	bne.n	8000d24 <SD_disk_ioctl+0x118>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d06:	7d7b      	ldrb	r3, [r7, #21]
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	7d3b      	ldrb	r3, [r7, #20]
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	021b      	lsls	r3, r3, #8
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4413      	add	r3, r2
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	3301      	adds	r3, #1
 8000d18:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d1a:	8bfb      	ldrh	r3, [r7, #30]
 8000d1c:	029a      	lsls	r2, r3, #10
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	e02e      	b.n	8000d82 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d24:	7c7b      	ldrb	r3, [r7, #17]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	7dbb      	ldrb	r3, [r7, #22]
 8000d2e:	09db      	lsrs	r3, r3, #7
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	4413      	add	r3, r2
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	7d7b      	ldrb	r3, [r7, #21]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	f003 0306 	and.w	r3, r3, #6
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4413      	add	r3, r2
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	3302      	adds	r3, #2
 8000d48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d4c:	7d3b      	ldrb	r3, [r7, #20]
 8000d4e:	099b      	lsrs	r3, r3, #6
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	7cfb      	ldrb	r3, [r7, #19]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	7cbb      	ldrb	r3, [r7, #18]
 8000d62:	029b      	lsls	r3, r3, #10
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	3301      	adds	r3, #1
 8000d72:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d74:	8bfa      	ldrh	r2, [r7, #30]
 8000d76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d7a:	3b09      	subs	r3, #9
 8000d7c:	409a      	lsls	r2, r3
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000d88:	e056      	b.n	8000e38 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d90:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d98:	e055      	b.n	8000e46 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000d9a:	f7ff fc13 	bl	80005c4 <SD_ReadyWait>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2bff      	cmp	r3, #255	; 0xff
 8000da2:	d14b      	bne.n	8000e3c <SD_disk_ioctl+0x230>
 8000da4:	2300      	movs	r3, #0
 8000da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000daa:	e047      	b.n	8000e3c <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dac:	2100      	movs	r1, #0
 8000dae:	2049      	movs	r0, #73	; 0x49
 8000db0:	f7ff fced 	bl	800078e <SD_SendCmd>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d142      	bne.n	8000e40 <SD_disk_ioctl+0x234>
 8000dba:	2110      	movs	r1, #16
 8000dbc:	6a38      	ldr	r0, [r7, #32]
 8000dbe:	f7ff fc75 	bl	80006ac <SD_RxDataBlock>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d03b      	beq.n	8000e40 <SD_disk_ioctl+0x234>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dce:	e037      	b.n	8000e40 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	204a      	movs	r0, #74	; 0x4a
 8000dd4:	f7ff fcdb 	bl	800078e <SD_SendCmd>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d132      	bne.n	8000e44 <SD_disk_ioctl+0x238>
 8000dde:	2110      	movs	r1, #16
 8000de0:	6a38      	ldr	r0, [r7, #32]
 8000de2:	f7ff fc63 	bl	80006ac <SD_RxDataBlock>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d02b      	beq.n	8000e44 <SD_disk_ioctl+0x238>
 8000dec:	2300      	movs	r3, #0
 8000dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000df2:	e027      	b.n	8000e44 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000df4:	2100      	movs	r1, #0
 8000df6:	207a      	movs	r0, #122	; 0x7a
 8000df8:	f7ff fcc9 	bl	800078e <SD_SendCmd>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d116      	bne.n	8000e30 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e08:	e00b      	b.n	8000e22 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000e0a:	6a3c      	ldr	r4, [r7, #32]
 8000e0c:	1c63      	adds	r3, r4, #1
 8000e0e:	623b      	str	r3, [r7, #32]
 8000e10:	f7ff fbae 	bl	8000570 <SPI_RxByte>
 8000e14:	4603      	mov	r3, r0
 8000e16:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d9ef      	bls.n	8000e0a <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000e30:	2304      	movs	r3, #4
 8000e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e36:	e006      	b.n	8000e46 <SD_disk_ioctl+0x23a>
			break;
 8000e38:	bf00      	nop
 8000e3a:	e004      	b.n	8000e46 <SD_disk_ioctl+0x23a>
			break;
 8000e3c:	bf00      	nop
 8000e3e:	e002      	b.n	8000e46 <SD_disk_ioctl+0x23a>
			break;
 8000e40:	bf00      	nop
 8000e42:	e000      	b.n	8000e46 <SD_disk_ioctl+0x23a>
			break;
 8000e44:	bf00      	nop
		}

		DESELECT();
 8000e46:	f7ff fb4f 	bl	80004e8 <DESELECT>
		SPI_RxByte();
 8000e4a:	f7ff fb91 	bl	8000570 <SPI_RxByte>
	}

	return res;
 8000e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	372c      	adds	r7, #44	; 0x2c
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd90      	pop	{r4, r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000000 	.word	0x20000000

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e64:	f000 fa30 	bl	80012c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e68:	f000 f86c 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6c:	f000 f90a 	bl	8001084 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000e70:	f000 f8d2 	bl	8001018 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000e74:	f001 fd6a 	bl	800294c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  res = f_mount(&fs, "", 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	4929      	ldr	r1, [pc, #164]	; (8000f20 <main+0xc0>)
 8000e7c:	4829      	ldr	r0, [pc, #164]	; (8000f24 <main+0xc4>)
 8000e7e:	f003 fb0f 	bl	80044a0 <f_mount>
 8000e82:	4603      	mov	r3, r0
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <main+0xc8>)
 8000e88:	701a      	strb	r2, [r3, #0]
  if(res != FR_OK)
 8000e8a:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <main+0xc8>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d000      	beq.n	8000e94 <main+0x34>
  {
	  while(1);
 8000e92:	e7fe      	b.n	8000e92 <main+0x32>
  }

  res = f_open(&file, "test.txt", FA_READ);
 8000e94:	2201      	movs	r2, #1
 8000e96:	4925      	ldr	r1, [pc, #148]	; (8000f2c <main+0xcc>)
 8000e98:	4825      	ldr	r0, [pc, #148]	; (8000f30 <main+0xd0>)
 8000e9a:	f003 fb47 	bl	800452c <f_open>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <main+0xc8>)
 8000ea4:	701a      	strb	r2, [r3, #0]
  if(res == FR_OK)
 8000ea6:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <main+0xc8>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d111      	bne.n	8000ed2 <main+0x72>
  {
	  res = f_read(&file, buffer, 25, &brw);
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <main+0xd4>)
 8000eb0:	2219      	movs	r2, #25
 8000eb2:	4921      	ldr	r1, [pc, #132]	; (8000f38 <main+0xd8>)
 8000eb4:	481e      	ldr	r0, [pc, #120]	; (8000f30 <main+0xd0>)
 8000eb6:	f003 fcf7 	bl	80048a8 <f_read>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <main+0xc8>)
 8000ec0:	701a      	strb	r2, [r3, #0]
	  if(res == FR_OK)
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <main+0xc8>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <main+0x6e>
	  {
		  __NOP();
 8000eca:	bf00      	nop
 8000ecc:	e002      	b.n	8000ed4 <main+0x74>
	  }
	  else
	  {
		  __NOP();
 8000ece:	bf00      	nop
 8000ed0:	e000      	b.n	8000ed4 <main+0x74>
	  }
  }
  else
  {
	  __NOP();
 8000ed2:	bf00      	nop
  }
  f_close(&file);
 8000ed4:	4816      	ldr	r0, [pc, #88]	; (8000f30 <main+0xd0>)
 8000ed6:	f004 f819 	bl	8004f0c <f_close>


  res = f_open(&file, "test2.txt", FA_CREATE_ALWAYS  | FA_WRITE);
 8000eda:	220a      	movs	r2, #10
 8000edc:	4917      	ldr	r1, [pc, #92]	; (8000f3c <main+0xdc>)
 8000ede:	4814      	ldr	r0, [pc, #80]	; (8000f30 <main+0xd0>)
 8000ee0:	f003 fb24 	bl	800452c <f_open>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <main+0xc8>)
 8000eea:	701a      	strb	r2, [r3, #0]
  if(res == FR_OK)
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <main+0xc8>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d110      	bne.n	8000f16 <main+0xb6>
  {
	  res = f_write(&file, write_buffer, sizeof(write_buffer), &brw);
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <main+0xd4>)
 8000ef6:	2232      	movs	r2, #50	; 0x32
 8000ef8:	4911      	ldr	r1, [pc, #68]	; (8000f40 <main+0xe0>)
 8000efa:	480d      	ldr	r0, [pc, #52]	; (8000f30 <main+0xd0>)
 8000efc:	f003 fe13 	bl	8004b26 <f_write>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <main+0xc8>)
 8000f06:	701a      	strb	r2, [r3, #0]
	  if(res == FR_OK)
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <main+0xc8>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d101      	bne.n	8000f14 <main+0xb4>
	  {
		  __NOP();
 8000f10:	bf00      	nop
 8000f12:	e000      	b.n	8000f16 <main+0xb6>
	  }
	  else
	  {
		  __NOP();
 8000f14:	bf00      	nop
	  }
  }
  f_close(&file);
 8000f16:	4806      	ldr	r0, [pc, #24]	; (8000f30 <main+0xd0>)
 8000f18:	f003 fff8 	bl	8004f0c <f_close>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <main+0xbc>
 8000f1e:	bf00      	nop
 8000f20:	08005088 	.word	0x08005088
 8000f24:	20000108 	.word	0x20000108
 8000f28:	200005d0 	.word	0x200005d0
 8000f2c:	0800508c 	.word	0x0800508c
 8000f30:	2000033c 	.word	0x2000033c
 8000f34:	20000338 	.word	0x20000338
 8000f38:	2000056c 	.word	0x2000056c
 8000f3c:	08005098 	.word	0x08005098
 8000f40:	20000004 	.word	0x20000004

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b094      	sub	sp, #80	; 0x50
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	2230      	movs	r2, #48	; 0x30
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f004 f884 	bl	8005060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <SystemClock_Config+0xcc>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	4a27      	ldr	r2, [pc, #156]	; (8001010 <SystemClock_Config+0xcc>)
 8000f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f76:	6413      	str	r3, [r2, #64]	; 0x40
 8000f78:	4b25      	ldr	r3, [pc, #148]	; (8001010 <SystemClock_Config+0xcc>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <SystemClock_Config+0xd0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a21      	ldr	r2, [pc, #132]	; (8001014 <SystemClock_Config+0xd0>)
 8000f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <SystemClock_Config+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000faa:	2302      	movs	r3, #2
 8000fac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fb8:	23a8      	movs	r3, #168	; 0xa8
 8000fba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fcab 	bl	8001924 <HAL_RCC_OscConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fd4:	f000 f89a 	bl	800110c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd8:	230f      	movs	r3, #15
 8000fda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fe8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 ff04 	bl	8001e04 <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001002:	f000 f883 	bl	800110c <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3750      	adds	r7, #80	; 0x50
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000

08001018 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <MX_SPI2_Init+0x64>)
 800101e:	4a18      	ldr	r2, [pc, #96]	; (8001080 <MX_SPI2_Init+0x68>)
 8001020:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <MX_SPI2_Init+0x64>)
 8001024:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001028:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_SPI2_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <MX_SPI2_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_SPI2_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_SPI2_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_SPI2_Init+0x64>)
 8001044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001048:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_SPI2_Init+0x64>)
 800104c:	2200      	movs	r2, #0
 800104e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <MX_SPI2_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_SPI2_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <MX_SPI2_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_SPI2_Init+0x64>)
 8001064:	220a      	movs	r2, #10
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <MX_SPI2_Init+0x64>)
 800106a:	f001 f889 	bl	8002180 <HAL_SPI_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001074:	f000 f84a 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200000b0 	.word	0x200000b0
 8001080:	40003800 	.word	0x40003800

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <MX_GPIO_Init+0x80>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a18      	ldr	r2, [pc, #96]	; (8001104 <MX_GPIO_Init+0x80>)
 80010a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <MX_GPIO_Init+0x80>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_GPIO_Init+0x80>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a11      	ldr	r2, [pc, #68]	; (8001104 <MX_GPIO_Init+0x80>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_GPIO_Init+0x80>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d8:	480b      	ldr	r0, [pc, #44]	; (8001108 <MX_GPIO_Init+0x84>)
 80010da:	f000 fc09 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80010de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_GPIO_Init+0x84>)
 80010f8:	f000 fa60 	bl	80015bc <HAL_GPIO_Init>

}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40023800 	.word	0x40023800
 8001108:	40020400 	.word	0x40020400

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001112:	e7fe      	b.n	8001112 <Error_Handler+0x6>

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_MspInit+0x4c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <HAL_MspInit+0x4c>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_MspInit+0x4c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_MspInit+0x4c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <HAL_MspInit+0x4c>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_MspInit+0x4c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800

08001164 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <HAL_SPI_MspInit+0x84>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d12c      	bne.n	80011e0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <HAL_SPI_MspInit+0x88>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_SPI_MspInit+0x88>)
 8001190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_SPI_MspInit+0x88>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_SPI_MspInit+0x88>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <HAL_SPI_MspInit+0x88>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_SPI_MspInit+0x88>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011be:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011d0:	2305      	movs	r3, #5
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <HAL_SPI_MspInit+0x8c>)
 80011dc:	f000 f9ee 	bl	80015bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011e0:	bf00      	nop
 80011e2:	3728      	adds	r7, #40	; 0x28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40003800 	.word	0x40003800
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020400 	.word	0x40020400

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001240:	f000 f894 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <SystemInit+0x28>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001252:	4a07      	ldr	r2, [pc, #28]	; (8001270 <SystemInit+0x28>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SystemInit+0x28>)
 800125e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001262:	609a      	str	r2, [r3, #8]
#endif
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001278:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800127a:	e003      	b.n	8001284 <LoopCopyDataInit>

0800127c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800127e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001280:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001282:	3104      	adds	r1, #4

08001284 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001284:	480b      	ldr	r0, [pc, #44]	; (80012b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001288:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800128a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800128c:	d3f6      	bcc.n	800127c <CopyDataInit>
  ldr  r2, =_sbss
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001290:	e002      	b.n	8001298 <LoopFillZerobss>

08001292 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001292:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001294:	f842 3b04 	str.w	r3, [r2], #4

08001298 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800129a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800129c:	d3f9      	bcc.n	8001292 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800129e:	f7ff ffd3 	bl	8001248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a2:	f003 feb9 	bl	8005018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a6:	f7ff fddb 	bl	8000e60 <main>
  bx  lr    
 80012aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012b0:	08005188 	.word	0x08005188
  ldr  r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012b8:	20000058 	.word	0x20000058
  ldr  r2, =_sbss
 80012bc:	20000058 	.word	0x20000058
  ldr  r3, = _ebss
 80012c0:	20000a40 	.word	0x20000a40

080012c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC_IRQHandler>
	...

080012c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <HAL_Init+0x40>)
 80012d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_Init+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_Init+0x40>)
 80012de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a07      	ldr	r2, [pc, #28]	; (8001308 <HAL_Init+0x40>)
 80012ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 f92f 	bl	8001554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f000 f808 	bl	800130c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012fc:	f7ff ff0a 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023c00 	.word	0x40023c00

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_InitTick+0x54>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x58>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	fbb3 f3f1 	udiv	r3, r3, r1
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f939 	bl	80015a2 <HAL_SYSTICK_Config>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00e      	b.n	8001358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d80a      	bhi.n	8001356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f000 f90f 	bl	800156a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <HAL_InitTick+0x5c>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000038 	.word	0x20000038
 8001364:	20000040 	.word	0x20000040
 8001368:	2000003c 	.word	0x2000003c

0800136c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x20>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x24>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_IncTick+0x24>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000040 	.word	0x20000040
 8001390:	200005d4 	.word	0x200005d4

08001394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_GetTick+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	200005d4 	.word	0x200005d4

080013ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff ffee 	bl	8001394 <HAL_GetTick>
 80013b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d005      	beq.n	80013d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_Delay+0x40>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013d2:	bf00      	nop
 80013d4:	f7ff ffde 	bl	8001394 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8f7      	bhi.n	80013d4 <HAL_Delay+0x28>
  {
  }
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000040 	.word	0x20000040

080013f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800140c:	4013      	ands	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800141c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001422:	4a04      	ldr	r2, [pc, #16]	; (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	60d3      	str	r3, [r2, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <__NVIC_GetPriorityGrouping+0x18>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	f003 0307 	and.w	r3, r3, #7
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	db0a      	blt.n	800147e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	490c      	ldr	r1, [pc, #48]	; (80014a0 <__NVIC_SetPriority+0x4c>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	0112      	lsls	r2, r2, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	440b      	add	r3, r1
 8001478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800147c:	e00a      	b.n	8001494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4908      	ldr	r1, [pc, #32]	; (80014a4 <__NVIC_SetPriority+0x50>)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	3b04      	subs	r3, #4
 800148c:	0112      	lsls	r2, r2, #4
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	440b      	add	r3, r1
 8001492:	761a      	strb	r2, [r3, #24]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	; 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f1c3 0307 	rsb	r3, r3, #7
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	bf28      	it	cs
 80014c6:	2304      	movcs	r3, #4
 80014c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3304      	adds	r3, #4
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d902      	bls.n	80014d8 <NVIC_EncodePriority+0x30>
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3b03      	subs	r3, #3
 80014d6:	e000      	b.n	80014da <NVIC_EncodePriority+0x32>
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	4313      	orrs	r3, r2
         );
}
 8001502:	4618      	mov	r0, r3
 8001504:	3724      	adds	r7, #36	; 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001520:	d301      	bcc.n	8001526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001522:	2301      	movs	r3, #1
 8001524:	e00f      	b.n	8001546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <SysTick_Config+0x40>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152e:	210f      	movs	r1, #15
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f7ff ff8e 	bl	8001454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <SysTick_Config+0x40>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <SysTick_Config+0x40>)
 8001540:	2207      	movs	r2, #7
 8001542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	e000e010 	.word	0xe000e010

08001554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ff47 	bl	80013f0 <__NVIC_SetPriorityGrouping>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800157c:	f7ff ff5c 	bl	8001438 <__NVIC_GetPriorityGrouping>
 8001580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	6978      	ldr	r0, [r7, #20]
 8001588:	f7ff ff8e 	bl	80014a8 <NVIC_EncodePriority>
 800158c:	4602      	mov	r2, r0
 800158e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff5d 	bl	8001454 <__NVIC_SetPriority>
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ffb0 	bl	8001510 <SysTick_Config>
 80015b0:	4603      	mov	r3, r0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	e16b      	b.n	80018b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d8:	2201      	movs	r2, #1
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	f040 815a 	bne.w	80018aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d00b      	beq.n	8001616 <HAL_GPIO_Init+0x5a>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d007      	beq.n	8001616 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800160a:	2b11      	cmp	r3, #17
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b12      	cmp	r3, #18
 8001614:	d130      	bne.n	8001678 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	2203      	movs	r2, #3
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800164c:	2201      	movs	r2, #1
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	f003 0201 	and.w	r2, r3, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0xfc>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b12      	cmp	r3, #18
 80016b6:	d123      	bne.n	8001700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	08da      	lsrs	r2, r3, #3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3208      	adds	r2, #8
 80016c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	08da      	lsrs	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3208      	adds	r2, #8
 80016fa:	69b9      	ldr	r1, [r7, #24]
 80016fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0203 	and.w	r2, r3, #3
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80b4 	beq.w	80018aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <HAL_GPIO_Init+0x308>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a5e      	ldr	r2, [pc, #376]	; (80018c4 <HAL_GPIO_Init+0x308>)
 800174c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
 8001752:	4b5c      	ldr	r3, [pc, #368]	; (80018c4 <HAL_GPIO_Init+0x308>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800175e:	4a5a      	ldr	r2, [pc, #360]	; (80018c8 <HAL_GPIO_Init+0x30c>)
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	3302      	adds	r3, #2
 8001766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a51      	ldr	r2, [pc, #324]	; (80018cc <HAL_GPIO_Init+0x310>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d02b      	beq.n	80017e2 <HAL_GPIO_Init+0x226>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a50      	ldr	r2, [pc, #320]	; (80018d0 <HAL_GPIO_Init+0x314>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d025      	beq.n	80017de <HAL_GPIO_Init+0x222>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4f      	ldr	r2, [pc, #316]	; (80018d4 <HAL_GPIO_Init+0x318>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01f      	beq.n	80017da <HAL_GPIO_Init+0x21e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4e      	ldr	r2, [pc, #312]	; (80018d8 <HAL_GPIO_Init+0x31c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d019      	beq.n	80017d6 <HAL_GPIO_Init+0x21a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4d      	ldr	r2, [pc, #308]	; (80018dc <HAL_GPIO_Init+0x320>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x216>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4c      	ldr	r2, [pc, #304]	; (80018e0 <HAL_GPIO_Init+0x324>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x212>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4b      	ldr	r2, [pc, #300]	; (80018e4 <HAL_GPIO_Init+0x328>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x20e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4a      	ldr	r2, [pc, #296]	; (80018e8 <HAL_GPIO_Init+0x32c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x20a>
 80017c2:	2307      	movs	r3, #7
 80017c4:	e00e      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017c6:	2308      	movs	r3, #8
 80017c8:	e00c      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017ca:	2306      	movs	r3, #6
 80017cc:	e00a      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017ce:	2305      	movs	r3, #5
 80017d0:	e008      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017d2:	2304      	movs	r3, #4
 80017d4:	e006      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017d6:	2303      	movs	r3, #3
 80017d8:	e004      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017da:	2302      	movs	r3, #2
 80017dc:	e002      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017e2:	2300      	movs	r3, #0
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	f002 0203 	and.w	r2, r2, #3
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	4093      	lsls	r3, r2
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f4:	4934      	ldr	r1, [pc, #208]	; (80018c8 <HAL_GPIO_Init+0x30c>)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3302      	adds	r3, #2
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001802:	4b3a      	ldr	r3, [pc, #232]	; (80018ec <HAL_GPIO_Init+0x330>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001826:	4a31      	ldr	r2, [pc, #196]	; (80018ec <HAL_GPIO_Init+0x330>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800182c:	4b2f      	ldr	r3, [pc, #188]	; (80018ec <HAL_GPIO_Init+0x330>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001850:	4a26      	ldr	r2, [pc, #152]	; (80018ec <HAL_GPIO_Init+0x330>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001856:	4b25      	ldr	r3, [pc, #148]	; (80018ec <HAL_GPIO_Init+0x330>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800187a:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <HAL_GPIO_Init+0x330>)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001880:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <HAL_GPIO_Init+0x330>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a4:	4a11      	ldr	r2, [pc, #68]	; (80018ec <HAL_GPIO_Init+0x330>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3301      	adds	r3, #1
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	2b0f      	cmp	r3, #15
 80018b4:	f67f ae90 	bls.w	80015d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b8:	bf00      	nop
 80018ba:	3724      	adds	r7, #36	; 0x24
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40013800 	.word	0x40013800
 80018cc:	40020000 	.word	0x40020000
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40020800 	.word	0x40020800
 80018d8:	40020c00 	.word	0x40020c00
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40021400 	.word	0x40021400
 80018e4:	40021800 	.word	0x40021800
 80018e8:	40021c00 	.word	0x40021c00
 80018ec:	40013c00 	.word	0x40013c00

080018f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
 80018fc:	4613      	mov	r3, r2
 80018fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001900:	787b      	ldrb	r3, [r7, #1]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001906:	887a      	ldrh	r2, [r7, #2]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800190c:	e003      	b.n	8001916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800190e:	887b      	ldrh	r3, [r7, #2]
 8001910:	041a      	lsls	r2, r3, #16
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	619a      	str	r2, [r3, #24]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e25b      	b.n	8001dee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d075      	beq.n	8001a2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001942:	4ba3      	ldr	r3, [pc, #652]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b04      	cmp	r3, #4
 800194c:	d00c      	beq.n	8001968 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800194e:	4ba0      	ldr	r3, [pc, #640]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001956:	2b08      	cmp	r3, #8
 8001958:	d112      	bne.n	8001980 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800195a:	4b9d      	ldr	r3, [pc, #628]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001966:	d10b      	bne.n	8001980 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001968:	4b99      	ldr	r3, [pc, #612]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d05b      	beq.n	8001a2c <HAL_RCC_OscConfig+0x108>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d157      	bne.n	8001a2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e236      	b.n	8001dee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001988:	d106      	bne.n	8001998 <HAL_RCC_OscConfig+0x74>
 800198a:	4b91      	ldr	r3, [pc, #580]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a90      	ldr	r2, [pc, #576]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e01d      	b.n	80019d4 <HAL_RCC_OscConfig+0xb0>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a0:	d10c      	bne.n	80019bc <HAL_RCC_OscConfig+0x98>
 80019a2:	4b8b      	ldr	r3, [pc, #556]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a8a      	ldr	r2, [pc, #552]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b88      	ldr	r3, [pc, #544]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a87      	ldr	r2, [pc, #540]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e00b      	b.n	80019d4 <HAL_RCC_OscConfig+0xb0>
 80019bc:	4b84      	ldr	r3, [pc, #528]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a83      	ldr	r2, [pc, #524]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 80019c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b81      	ldr	r3, [pc, #516]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a80      	ldr	r2, [pc, #512]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 80019ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d013      	beq.n	8001a04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff fcda 	bl	8001394 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e4:	f7ff fcd6 	bl	8001394 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b64      	cmp	r3, #100	; 0x64
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e1fb      	b.n	8001dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	4b76      	ldr	r3, [pc, #472]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0xc0>
 8001a02:	e014      	b.n	8001a2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff fcc6 	bl	8001394 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fcc2 	bl	8001394 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e1e7      	b.n	8001dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	4b6c      	ldr	r3, [pc, #432]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0xe8>
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d063      	beq.n	8001b02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a3a:	4b65      	ldr	r3, [pc, #404]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00b      	beq.n	8001a5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a46:	4b62      	ldr	r3, [pc, #392]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d11c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a52:	4b5f      	ldr	r3, [pc, #380]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d116      	bne.n	8001a8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5e:	4b5c      	ldr	r3, [pc, #368]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <HAL_RCC_OscConfig+0x152>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d001      	beq.n	8001a76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e1bb      	b.n	8001dee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a76:	4b56      	ldr	r3, [pc, #344]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4952      	ldr	r1, [pc, #328]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8a:	e03a      	b.n	8001b02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d020      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a94:	4b4f      	ldr	r3, [pc, #316]	; (8001bd4 <HAL_RCC_OscConfig+0x2b0>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9a:	f7ff fc7b 	bl	8001394 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa2:	f7ff fc77 	bl	8001394 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e19c      	b.n	8001dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab4:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4b43      	ldr	r3, [pc, #268]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4940      	ldr	r1, [pc, #256]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
 8001ad4:	e015      	b.n	8001b02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad6:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <HAL_RCC_OscConfig+0x2b0>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff fc5a 	bl	8001394 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fc56 	bl	8001394 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e17b      	b.n	8001dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af6:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d030      	beq.n	8001b70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d016      	beq.n	8001b44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b16:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <HAL_RCC_OscConfig+0x2b4>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fc3a 	bl	8001394 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff fc36 	bl	8001394 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e15b      	b.n	8001dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b36:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x200>
 8001b42:	e015      	b.n	8001b70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_RCC_OscConfig+0x2b4>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fc23 	bl	8001394 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b52:	f7ff fc1f 	bl	8001394 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e144      	b.n	8001dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f0      	bne.n	8001b52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80a0 	beq.w	8001cbe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b82:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10f      	bne.n	8001bae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001baa:	2301      	movs	r3, #1
 8001bac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_RCC_OscConfig+0x2b8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d121      	bne.n	8001bfe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <HAL_RCC_OscConfig+0x2b8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <HAL_RCC_OscConfig+0x2b8>)
 8001bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc6:	f7ff fbe5 	bl	8001394 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bcc:	e011      	b.n	8001bf2 <HAL_RCC_OscConfig+0x2ce>
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	42470000 	.word	0x42470000
 8001bd8:	42470e80 	.word	0x42470e80
 8001bdc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be0:	f7ff fbd8 	bl	8001394 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e0fd      	b.n	8001dee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf2:	4b81      	ldr	r3, [pc, #516]	; (8001df8 <HAL_RCC_OscConfig+0x4d4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d106      	bne.n	8001c14 <HAL_RCC_OscConfig+0x2f0>
 8001c06:	4b7d      	ldr	r3, [pc, #500]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0a:	4a7c      	ldr	r2, [pc, #496]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6713      	str	r3, [r2, #112]	; 0x70
 8001c12:	e01c      	b.n	8001c4e <HAL_RCC_OscConfig+0x32a>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d10c      	bne.n	8001c36 <HAL_RCC_OscConfig+0x312>
 8001c1c:	4b77      	ldr	r3, [pc, #476]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c20:	4a76      	ldr	r2, [pc, #472]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	6713      	str	r3, [r2, #112]	; 0x70
 8001c28:	4b74      	ldr	r3, [pc, #464]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2c:	4a73      	ldr	r2, [pc, #460]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6713      	str	r3, [r2, #112]	; 0x70
 8001c34:	e00b      	b.n	8001c4e <HAL_RCC_OscConfig+0x32a>
 8001c36:	4b71      	ldr	r3, [pc, #452]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3a:	4a70      	ldr	r2, [pc, #448]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001c3c:	f023 0301 	bic.w	r3, r3, #1
 8001c40:	6713      	str	r3, [r2, #112]	; 0x70
 8001c42:	4b6e      	ldr	r3, [pc, #440]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c46:	4a6d      	ldr	r2, [pc, #436]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001c48:	f023 0304 	bic.w	r3, r3, #4
 8001c4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d015      	beq.n	8001c82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c56:	f7ff fb9d 	bl	8001394 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff fb99 	bl	8001394 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e0bc      	b.n	8001dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	4b61      	ldr	r3, [pc, #388]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0ee      	beq.n	8001c5e <HAL_RCC_OscConfig+0x33a>
 8001c80:	e014      	b.n	8001cac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7ff fb87 	bl	8001394 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff fb83 	bl	8001394 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0a6      	b.n	8001dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca0:	4b56      	ldr	r3, [pc, #344]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1ee      	bne.n	8001c8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d105      	bne.n	8001cbe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb2:	4b52      	ldr	r3, [pc, #328]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a51      	ldr	r2, [pc, #324]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 8092 	beq.w	8001dec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cc8:	4b4c      	ldr	r3, [pc, #304]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d05c      	beq.n	8001d8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d141      	bne.n	8001d60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cdc:	4b48      	ldr	r3, [pc, #288]	; (8001e00 <HAL_RCC_OscConfig+0x4dc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7ff fb57 	bl	8001394 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cea:	f7ff fb53 	bl	8001394 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e078      	b.n	8001dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cfc:	4b3f      	ldr	r3, [pc, #252]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f0      	bne.n	8001cea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69da      	ldr	r2, [r3, #28]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	019b      	lsls	r3, r3, #6
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1e:	085b      	lsrs	r3, r3, #1
 8001d20:	3b01      	subs	r3, #1
 8001d22:	041b      	lsls	r3, r3, #16
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	061b      	lsls	r3, r3, #24
 8001d2c:	4933      	ldr	r1, [pc, #204]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d32:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <HAL_RCC_OscConfig+0x4dc>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff fb2c 	bl	8001394 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff fb28 	bl	8001394 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e04d      	b.n	8001dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d52:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x41c>
 8001d5e:	e045      	b.n	8001dec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d60:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_RCC_OscConfig+0x4dc>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff fb15 	bl	8001394 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7ff fb11 	bl	8001394 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e036      	b.n	8001dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d80:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f0      	bne.n	8001d6e <HAL_RCC_OscConfig+0x44a>
 8001d8c:	e02e      	b.n	8001dec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e029      	b.n	8001dee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_RCC_OscConfig+0x4d8>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d11c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d115      	bne.n	8001de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d10d      	bne.n	8001de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d106      	bne.n	8001de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	42470060 	.word	0x42470060

08001e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0cc      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e18:	4b68      	ldr	r3, [pc, #416]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d90c      	bls.n	8001e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b65      	ldr	r3, [pc, #404]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0b8      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d020      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e58:	4b59      	ldr	r3, [pc, #356]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4a58      	ldr	r2, [pc, #352]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e70:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	4a52      	ldr	r2, [pc, #328]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7c:	4b50      	ldr	r3, [pc, #320]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	494d      	ldr	r1, [pc, #308]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d044      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d119      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e07f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d003      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e06f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e067      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b37      	ldr	r3, [pc, #220]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4934      	ldr	r1, [pc, #208]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef4:	f7ff fa4e 	bl	8001394 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7ff fa4a 	bl	8001394 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e04f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d20c      	bcs.n	8001f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e032      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f58:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4916      	ldr	r1, [pc, #88]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d009      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f8a:	f000 f821 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001f8e:	4601      	mov	r1, r0
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	fa21 f303 	lsr.w	r3, r1, r3
 8001fa2:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCC_ClockConfig+0x1c8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f9ae 	bl	800130c <HAL_InitTick>

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023c00 	.word	0x40023c00
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	080050e8 	.word	0x080050e8
 8001fc8:	20000038 	.word	0x20000038
 8001fcc:	2000003c 	.word	0x2000003c

08001fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe6:	4b63      	ldr	r3, [pc, #396]	; (8002174 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d007      	beq.n	8002002 <HAL_RCC_GetSysClockFreq+0x32>
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d008      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0x38>
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 80b4 	bne.w	8002164 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ffc:	4b5e      	ldr	r3, [pc, #376]	; (8002178 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ffe:	60bb      	str	r3, [r7, #8]
       break;
 8002000:	e0b3      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002002:	4b5e      	ldr	r3, [pc, #376]	; (800217c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002004:	60bb      	str	r3, [r7, #8]
      break;
 8002006:	e0b0      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002008:	4b5a      	ldr	r3, [pc, #360]	; (8002174 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002010:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002012:	4b58      	ldr	r3, [pc, #352]	; (8002174 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d04a      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201e:	4b55      	ldr	r3, [pc, #340]	; (8002174 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	099b      	lsrs	r3, r3, #6
 8002024:	f04f 0400 	mov.w	r4, #0
 8002028:	f240 11ff 	movw	r1, #511	; 0x1ff
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	ea03 0501 	and.w	r5, r3, r1
 8002034:	ea04 0602 	and.w	r6, r4, r2
 8002038:	4629      	mov	r1, r5
 800203a:	4632      	mov	r2, r6
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	f04f 0400 	mov.w	r4, #0
 8002044:	0154      	lsls	r4, r2, #5
 8002046:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800204a:	014b      	lsls	r3, r1, #5
 800204c:	4619      	mov	r1, r3
 800204e:	4622      	mov	r2, r4
 8002050:	1b49      	subs	r1, r1, r5
 8002052:	eb62 0206 	sbc.w	r2, r2, r6
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	f04f 0400 	mov.w	r4, #0
 800205e:	0194      	lsls	r4, r2, #6
 8002060:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002064:	018b      	lsls	r3, r1, #6
 8002066:	1a5b      	subs	r3, r3, r1
 8002068:	eb64 0402 	sbc.w	r4, r4, r2
 800206c:	f04f 0100 	mov.w	r1, #0
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	00e2      	lsls	r2, r4, #3
 8002076:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800207a:	00d9      	lsls	r1, r3, #3
 800207c:	460b      	mov	r3, r1
 800207e:	4614      	mov	r4, r2
 8002080:	195b      	adds	r3, r3, r5
 8002082:	eb44 0406 	adc.w	r4, r4, r6
 8002086:	f04f 0100 	mov.w	r1, #0
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	0262      	lsls	r2, r4, #9
 8002090:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002094:	0259      	lsls	r1, r3, #9
 8002096:	460b      	mov	r3, r1
 8002098:	4614      	mov	r4, r2
 800209a:	4618      	mov	r0, r3
 800209c:	4621      	mov	r1, r4
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f04f 0400 	mov.w	r4, #0
 80020a4:	461a      	mov	r2, r3
 80020a6:	4623      	mov	r3, r4
 80020a8:	f7fe f88e 	bl	80001c8 <__aeabi_uldivmod>
 80020ac:	4603      	mov	r3, r0
 80020ae:	460c      	mov	r4, r1
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	e049      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b4:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	099b      	lsrs	r3, r3, #6
 80020ba:	f04f 0400 	mov.w	r4, #0
 80020be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	ea03 0501 	and.w	r5, r3, r1
 80020ca:	ea04 0602 	and.w	r6, r4, r2
 80020ce:	4629      	mov	r1, r5
 80020d0:	4632      	mov	r2, r6
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	f04f 0400 	mov.w	r4, #0
 80020da:	0154      	lsls	r4, r2, #5
 80020dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020e0:	014b      	lsls	r3, r1, #5
 80020e2:	4619      	mov	r1, r3
 80020e4:	4622      	mov	r2, r4
 80020e6:	1b49      	subs	r1, r1, r5
 80020e8:	eb62 0206 	sbc.w	r2, r2, r6
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	f04f 0400 	mov.w	r4, #0
 80020f4:	0194      	lsls	r4, r2, #6
 80020f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020fa:	018b      	lsls	r3, r1, #6
 80020fc:	1a5b      	subs	r3, r3, r1
 80020fe:	eb64 0402 	sbc.w	r4, r4, r2
 8002102:	f04f 0100 	mov.w	r1, #0
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	00e2      	lsls	r2, r4, #3
 800210c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002110:	00d9      	lsls	r1, r3, #3
 8002112:	460b      	mov	r3, r1
 8002114:	4614      	mov	r4, r2
 8002116:	195b      	adds	r3, r3, r5
 8002118:	eb44 0406 	adc.w	r4, r4, r6
 800211c:	f04f 0100 	mov.w	r1, #0
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	02a2      	lsls	r2, r4, #10
 8002126:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800212a:	0299      	lsls	r1, r3, #10
 800212c:	460b      	mov	r3, r1
 800212e:	4614      	mov	r4, r2
 8002130:	4618      	mov	r0, r3
 8002132:	4621      	mov	r1, r4
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f04f 0400 	mov.w	r4, #0
 800213a:	461a      	mov	r2, r3
 800213c:	4623      	mov	r3, r4
 800213e:	f7fe f843 	bl	80001c8 <__aeabi_uldivmod>
 8002142:	4603      	mov	r3, r0
 8002144:	460c      	mov	r4, r1
 8002146:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002148:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	0c1b      	lsrs	r3, r3, #16
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	3301      	adds	r3, #1
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002160:	60bb      	str	r3, [r7, #8]
      break;
 8002162:	e002      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002166:	60bb      	str	r3, [r7, #8]
      break;
 8002168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800216a:	68bb      	ldr	r3, [r7, #8]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002174:	40023800 	.word	0x40023800
 8002178:	00f42400 	.word	0x00f42400
 800217c:	007a1200 	.word	0x007a1200

08002180 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e056      	b.n	8002240 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d106      	bne.n	80021b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7fe ffd9 	bl	8001164 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2202      	movs	r2, #2
 80021b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	ea42 0103 	orr.w	r1, r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	0c1b      	lsrs	r3, r3, #16
 8002210:	f003 0104 	and.w	r1, r3, #4
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	69da      	ldr	r2, [r3, #28]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800222e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_SPI_Transmit+0x22>
 8002266:	2302      	movs	r3, #2
 8002268:	e11e      	b.n	80024a8 <HAL_SPI_Transmit+0x260>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002272:	f7ff f88f 	bl	8001394 <HAL_GetTick>
 8002276:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d002      	beq.n	800228e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002288:	2302      	movs	r3, #2
 800228a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800228c:	e103      	b.n	8002496 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <HAL_SPI_Transmit+0x52>
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d102      	bne.n	80022a0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800229e:	e0fa      	b.n	8002496 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2203      	movs	r2, #3
 80022a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	88fa      	ldrh	r2, [r7, #6]
 80022b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	88fa      	ldrh	r2, [r7, #6]
 80022be:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022e6:	d107      	bne.n	80022f8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002302:	2b40      	cmp	r3, #64	; 0x40
 8002304:	d007      	beq.n	8002316 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002314:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800231e:	d14b      	bne.n	80023b8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <HAL_SPI_Transmit+0xe6>
 8002328:	8afb      	ldrh	r3, [r7, #22]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d13e      	bne.n	80023ac <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	881a      	ldrh	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	1c9a      	adds	r2, r3, #2
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002348:	b29b      	uxth	r3, r3
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002352:	e02b      	b.n	80023ac <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d112      	bne.n	8002388 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	881a      	ldrh	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	1c9a      	adds	r2, r3, #2
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	86da      	strh	r2, [r3, #54]	; 0x36
 8002386:	e011      	b.n	80023ac <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002388:	f7ff f804 	bl	8001394 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d803      	bhi.n	80023a0 <HAL_SPI_Transmit+0x158>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239e:	d102      	bne.n	80023a6 <HAL_SPI_Transmit+0x15e>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d102      	bne.n	80023ac <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023aa:	e074      	b.n	8002496 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1ce      	bne.n	8002354 <HAL_SPI_Transmit+0x10c>
 80023b6:	e04c      	b.n	8002452 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <HAL_SPI_Transmit+0x17e>
 80023c0:	8afb      	ldrh	r3, [r7, #22]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d140      	bne.n	8002448 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	330c      	adds	r3, #12
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023ec:	e02c      	b.n	8002448 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d113      	bne.n	8002424 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	330c      	adds	r3, #12
 8002406:	7812      	ldrb	r2, [r2, #0]
 8002408:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	86da      	strh	r2, [r3, #54]	; 0x36
 8002422:	e011      	b.n	8002448 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002424:	f7fe ffb6 	bl	8001394 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d803      	bhi.n	800243c <HAL_SPI_Transmit+0x1f4>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243a:	d102      	bne.n	8002442 <HAL_SPI_Transmit+0x1fa>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002446:	e026      	b.n	8002496 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1cd      	bne.n	80023ee <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	6839      	ldr	r1, [r7, #0]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fa36 	bl	80028c8 <SPI_EndRxTxTransaction>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2220      	movs	r2, #32
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10a      	bne.n	8002486 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002470:	2300      	movs	r3, #0
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	77fb      	strb	r3, [r7, #31]
 8002492:	e000      	b.n	8002496 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002494:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3720      	adds	r7, #32
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	; 0x30
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024be:	2301      	movs	r3, #1
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_SPI_TransmitReceive+0x26>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e18a      	b.n	80027ec <HAL_SPI_TransmitReceive+0x33c>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024de:	f7fe ff59 	bl	8001394 <HAL_GetTick>
 80024e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024f4:	887b      	ldrh	r3, [r7, #2]
 80024f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d00f      	beq.n	8002520 <HAL_SPI_TransmitReceive+0x70>
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002506:	d107      	bne.n	8002518 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d103      	bne.n	8002518 <HAL_SPI_TransmitReceive+0x68>
 8002510:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002514:	2b04      	cmp	r3, #4
 8002516:	d003      	beq.n	8002520 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002518:	2302      	movs	r3, #2
 800251a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800251e:	e15b      	b.n	80027d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_SPI_TransmitReceive+0x82>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <HAL_SPI_TransmitReceive+0x82>
 800252c:	887b      	ldrh	r3, [r7, #2]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002538:	e14e      	b.n	80027d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b04      	cmp	r3, #4
 8002544:	d003      	beq.n	800254e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2205      	movs	r2, #5
 800254a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	887a      	ldrh	r2, [r7, #2]
 800255e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	887a      	ldrh	r2, [r7, #2]
 8002564:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	887a      	ldrh	r2, [r7, #2]
 8002570:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	887a      	ldrh	r2, [r7, #2]
 8002576:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	2b40      	cmp	r3, #64	; 0x40
 8002590:	d007      	beq.n	80025a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025aa:	d178      	bne.n	800269e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <HAL_SPI_TransmitReceive+0x10a>
 80025b4:	8b7b      	ldrh	r3, [r7, #26]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d166      	bne.n	8002688 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	881a      	ldrh	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	1c9a      	adds	r2, r3, #2
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025de:	e053      	b.n	8002688 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d11b      	bne.n	8002626 <HAL_SPI_TransmitReceive+0x176>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d016      	beq.n	8002626 <HAL_SPI_TransmitReceive+0x176>
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d113      	bne.n	8002626 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	881a      	ldrh	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	1c9a      	adds	r2, r3, #2
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	d119      	bne.n	8002668 <HAL_SPI_TransmitReceive+0x1b8>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d014      	beq.n	8002668 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002648:	b292      	uxth	r2, r2
 800264a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002650:	1c9a      	adds	r2, r3, #2
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002664:	2301      	movs	r3, #1
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002668:	f7fe fe94 	bl	8001394 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002674:	429a      	cmp	r2, r3
 8002676:	d807      	bhi.n	8002688 <HAL_SPI_TransmitReceive+0x1d8>
 8002678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267e:	d003      	beq.n	8002688 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002686:	e0a7      	b.n	80027d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1a6      	bne.n	80025e0 <HAL_SPI_TransmitReceive+0x130>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002696:	b29b      	uxth	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1a1      	bne.n	80025e0 <HAL_SPI_TransmitReceive+0x130>
 800269c:	e07c      	b.n	8002798 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_SPI_TransmitReceive+0x1fc>
 80026a6:	8b7b      	ldrh	r3, [r7, #26]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d16b      	bne.n	8002784 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	330c      	adds	r3, #12
 80026b6:	7812      	ldrb	r2, [r2, #0]
 80026b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026d2:	e057      	b.n	8002784 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d11c      	bne.n	800271c <HAL_SPI_TransmitReceive+0x26c>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d017      	beq.n	800271c <HAL_SPI_TransmitReceive+0x26c>
 80026ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d114      	bne.n	800271c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	330c      	adds	r3, #12
 80026fc:	7812      	ldrb	r2, [r2, #0]
 80026fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b01      	cmp	r3, #1
 8002728:	d119      	bne.n	800275e <HAL_SPI_TransmitReceive+0x2ae>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d014      	beq.n	800275e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800275a:	2301      	movs	r3, #1
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800275e:	f7fe fe19 	bl	8001394 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800276a:	429a      	cmp	r2, r3
 800276c:	d803      	bhi.n	8002776 <HAL_SPI_TransmitReceive+0x2c6>
 800276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d102      	bne.n	800277c <HAL_SPI_TransmitReceive+0x2cc>
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	2b00      	cmp	r3, #0
 800277a:	d103      	bne.n	8002784 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002782:	e029      	b.n	80027d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1a2      	bne.n	80026d4 <HAL_SPI_TransmitReceive+0x224>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d19d      	bne.n	80026d4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 f893 	bl	80028c8 <SPI_EndRxTxTransaction>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d006      	beq.n	80027b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2220      	movs	r2, #32
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027b4:	e010      	b.n	80027d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10b      	bne.n	80027d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	e000      	b.n	80027d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80027d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3730      	adds	r7, #48	; 0x30
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002804:	e04c      	b.n	80028a0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d048      	beq.n	80028a0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800280e:	f7fe fdc1 	bl	8001394 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d902      	bls.n	8002824 <SPI_WaitFlagStateUntilTimeout+0x30>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d13d      	bne.n	80028a0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002832:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800283c:	d111      	bne.n	8002862 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002846:	d004      	beq.n	8002852 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002850:	d107      	bne.n	8002862 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002860:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286a:	d10f      	bne.n	800288c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800288a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e00f      	b.n	80028c0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	4013      	ands	r3, r2
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d1a3      	bne.n	8002806 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <SPI_EndRxTxTransaction+0x7c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <SPI_EndRxTxTransaction+0x80>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	0d5b      	lsrs	r3, r3, #21
 80028e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028e4:	fb02 f303 	mul.w	r3, r2, r3
 80028e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028f2:	d112      	bne.n	800291a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2200      	movs	r2, #0
 80028fc:	2180      	movs	r1, #128	; 0x80
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f7ff ff78 	bl	80027f4 <SPI_WaitFlagStateUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290e:	f043 0220 	orr.w	r2, r3, #32
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e00f      	b.n	800293a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	3b01      	subs	r3, #1
 8002924:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002930:	2b80      	cmp	r3, #128	; 0x80
 8002932:	d0f2      	beq.n	800291a <SPI_EndRxTxTransaction+0x52>
 8002934:	e000      	b.n	8002938 <SPI_EndRxTxTransaction+0x70>
        break;
 8002936:	bf00      	nop
  }

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000038 	.word	0x20000038
 8002948:	165e9f81 	.word	0x165e9f81

0800294c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&SD_Driver, USERPath);
 8002950:	4904      	ldr	r1, [pc, #16]	; (8002964 <MX_FATFS_Init+0x18>)
 8002952:	4805      	ldr	r0, [pc, #20]	; (8002968 <MX_FATFS_Init+0x1c>)
 8002954:	f002 fb50 	bl	8004ff8 <FATFS_LinkDriver>
 8002958:	4603      	mov	r3, r0
 800295a:	461a      	mov	r2, r3
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <MX_FATFS_Init+0x20>)
 800295e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}
 8002964:	200005d8 	.word	0x200005d8
 8002968:	20000044 	.word	0x20000044
 800296c:	200005dc 	.word	0x200005dc

08002970 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002974:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd ff53 	bl	8000838 <SD_disk_initialize>
 8002992:	4603      	mov	r3, r0
 8002994:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe f82a 	bl	8000a04 <SD_disk_status>
 80029b0:	4603      	mov	r3, r0
 80029b2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4603      	mov	r3, r0
 80029ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80029cc:	7bf8      	ldrb	r0, [r7, #15]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	f7fe f82c 	bl	8000a30 <SD_disk_read>
 80029d8:	4603      	mov	r3, r0
 80029da:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	4603      	mov	r3, r0
 80029f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80029f4:	7bf8      	ldrb	r0, [r7, #15]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	f7fe f882 	bl	8000b04 <SD_disk_write>
 8002a00:	4603      	mov	r3, r0
 8002a02:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	603a      	str	r2, [r7, #0]
 8002a16:	71fb      	strb	r3, [r7, #7]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	79b9      	ldrb	r1, [r7, #6]
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe f8f2 	bl	8000c0c <SD_disk_ioctl>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	4a08      	ldr	r2, [pc, #32]	; (8002a64 <disk_status+0x30>)
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	79fa      	ldrb	r2, [r7, #7]
 8002a4c:	4905      	ldr	r1, [pc, #20]	; (8002a64 <disk_status+0x30>)
 8002a4e:	440a      	add	r2, r1
 8002a50:	7a12      	ldrb	r2, [r2, #8]
 8002a52:	4610      	mov	r0, r2
 8002a54:	4798      	blx	r3
 8002a56:	4603      	mov	r3, r0
 8002a58:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	200000a0 	.word	0x200000a0

08002a68 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <disk_initialize+0x48>)
 8002a7a:	5cd3      	ldrb	r3, [r2, r3]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d111      	bne.n	8002aa4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <disk_initialize+0x48>)
 8002a84:	2101      	movs	r1, #1
 8002a86:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <disk_initialize+0x48>)
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	79fa      	ldrb	r2, [r7, #7]
 8002a96:	4906      	ldr	r1, [pc, #24]	; (8002ab0 <disk_initialize+0x48>)
 8002a98:	440a      	add	r2, r1
 8002a9a:	7a12      	ldrb	r2, [r2, #8]
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4798      	blx	r3
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	200000a0 	.word	0x200000a0

08002ab4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <disk_read+0x3c>)
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	689c      	ldr	r4, [r3, #8]
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <disk_read+0x3c>)
 8002ad4:	4413      	add	r3, r2
 8002ad6:	7a18      	ldrb	r0, [r3, #8]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	47a0      	blx	r4
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	75fb      	strb	r3, [r7, #23]
  return res;
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd90      	pop	{r4, r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200000a0 	.word	0x200000a0

08002af4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002af4:	b590      	push	{r4, r7, lr}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	4603      	mov	r3, r0
 8002b02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <disk_write+0x3c>)
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	68dc      	ldr	r4, [r3, #12]
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <disk_write+0x3c>)
 8002b14:	4413      	add	r3, r2
 8002b16:	7a18      	ldrb	r0, [r3, #8]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	47a0      	blx	r4
 8002b20:	4603      	mov	r3, r0
 8002b22:	75fb      	strb	r3, [r7, #23]
  return res;
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd90      	pop	{r4, r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	200000a0 	.word	0x200000a0

08002b34 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	603a      	str	r2, [r7, #0]
 8002b3e:	71fb      	strb	r3, [r7, #7]
 8002b40:	460b      	mov	r3, r1
 8002b42:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <disk_ioctl+0x38>)
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	79fa      	ldrb	r2, [r7, #7]
 8002b52:	4906      	ldr	r1, [pc, #24]	; (8002b6c <disk_ioctl+0x38>)
 8002b54:	440a      	add	r2, r1
 8002b56:	7a10      	ldrb	r0, [r2, #8]
 8002b58:	79b9      	ldrb	r1, [r7, #6]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	4798      	blx	r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	73fb      	strb	r3, [r7, #15]
  return res;
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	200000a0 	.word	0x200000a0

08002b70 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002b80:	89fb      	ldrh	r3, [r7, #14]
 8002b82:	021b      	lsls	r3, r3, #8
 8002b84:	b21a      	sxth	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	b21b      	sxth	r3, r3
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	b21b      	sxth	r3, r3
 8002b90:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002b92:	89fb      	ldrh	r3, [r7, #14]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3303      	adds	r3, #3
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	3202      	adds	r2, #2
 8002bb8:	7812      	ldrb	r2, [r2, #0]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	3201      	adds	r2, #1
 8002bc6:	7812      	ldrb	r2, [r2, #0]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	7812      	ldrb	r2, [r2, #0]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
	return rv;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	887a      	ldrh	r2, [r7, #2]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	887b      	ldrh	r3, [r7, #2]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	887a      	ldrh	r2, [r7, #2]
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	701a      	strb	r2, [r3, #0]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	701a      	strb	r2, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	0a1b      	lsrs	r3, r3, #8
 8002c48:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	0a1b      	lsrs	r3, r3, #8
 8002c5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	701a      	strb	r2, [r3, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00d      	beq.n	8002caa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	1c53      	adds	r3, r2, #1
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	1c59      	adds	r1, r3, #1
 8002c98:	6179      	str	r1, [r7, #20]
 8002c9a:	7812      	ldrb	r2, [r2, #0]
 8002c9c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f1      	bne.n	8002c8e <mem_cpy+0x1a>
	}
}
 8002caa:	bf00      	nop
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002cb6:	b480      	push	{r7}
 8002cb8:	b087      	sub	sp, #28
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	617a      	str	r2, [r7, #20]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f3      	bne.n	8002cc6 <mem_set+0x10>
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002cea:	b480      	push	{r7}
 8002cec:	b089      	sub	sp, #36	; 0x24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	61fa      	str	r2, [r7, #28]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	61ba      	str	r2, [r7, #24]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	1acb      	subs	r3, r1, r3
 8002d16:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <mem_cmp+0x40>
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0eb      	beq.n	8002d02 <mem_cmp+0x18>

	return r;
 8002d2a:	697b      	ldr	r3, [r7, #20]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3724      	adds	r7, #36	; 0x24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002d42:	e002      	b.n	8002d4a <chk_chr+0x12>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3301      	adds	r3, #1
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <chk_chr+0x26>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d1f2      	bne.n	8002d44 <chk_chr+0xc>
	return *str;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	781b      	ldrb	r3, [r3, #0]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	e029      	b.n	8002dd8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8002d84:	4a27      	ldr	r2, [pc, #156]	; (8002e24 <chk_lock+0xb4>)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	4413      	add	r3, r2
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01d      	beq.n	8002dce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002d92:	4a24      	ldr	r2, [pc, #144]	; (8002e24 <chk_lock+0xb4>)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	4413      	add	r3, r2
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d116      	bne.n	8002dd2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8002da4:	4a1f      	ldr	r2, [pc, #124]	; (8002e24 <chk_lock+0xb4>)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	4413      	add	r3, r2
 8002dac:	3304      	adds	r3, #4
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d10c      	bne.n	8002dd2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002db8:	4a1a      	ldr	r2, [pc, #104]	; (8002e24 <chk_lock+0xb4>)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d102      	bne.n	8002dd2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002dcc:	e007      	b.n	8002dde <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d9d2      	bls.n	8002d84 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d109      	bne.n	8002df8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d102      	bne.n	8002df0 <chk_lock+0x80>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d101      	bne.n	8002df4 <chk_lock+0x84>
 8002df0:	2300      	movs	r3, #0
 8002df2:	e010      	b.n	8002e16 <chk_lock+0xa6>
 8002df4:	2312      	movs	r3, #18
 8002df6:	e00e      	b.n	8002e16 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d108      	bne.n	8002e10 <chk_lock+0xa0>
 8002dfe:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <chk_lock+0xb4>)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	4413      	add	r3, r2
 8002e06:	330c      	adds	r3, #12
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e0e:	d101      	bne.n	8002e14 <chk_lock+0xa4>
 8002e10:	2310      	movs	r3, #16
 8002e12:	e000      	b.n	8002e16 <chk_lock+0xa6>
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000080 	.word	0x20000080

08002e28 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	e002      	b.n	8002e3a <enq_lock+0x12>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3301      	adds	r3, #1
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d806      	bhi.n	8002e4e <enq_lock+0x26>
 8002e40:	4a09      	ldr	r2, [pc, #36]	; (8002e68 <enq_lock+0x40>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	4413      	add	r3, r2
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f2      	bne.n	8002e34 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	bf14      	ite	ne
 8002e54:	2301      	movne	r3, #1
 8002e56:	2300      	moveq	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000080 	.word	0x20000080

08002e6c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	e01f      	b.n	8002ebc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8002e7c:	4a41      	ldr	r2, [pc, #260]	; (8002f84 <inc_lock+0x118>)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	4413      	add	r3, r2
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d113      	bne.n	8002eb6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8002e8e:	4a3d      	ldr	r2, [pc, #244]	; (8002f84 <inc_lock+0x118>)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	4413      	add	r3, r2
 8002e96:	3304      	adds	r3, #4
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d109      	bne.n	8002eb6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8002ea2:	4a38      	ldr	r2, [pc, #224]	; (8002f84 <inc_lock+0x118>)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3308      	adds	r3, #8
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d006      	beq.n	8002ec4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d9dc      	bls.n	8002e7c <inc_lock+0x10>
 8002ec2:	e000      	b.n	8002ec6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8002ec4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d132      	bne.n	8002f32 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	e002      	b.n	8002ed8 <inc_lock+0x6c>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d806      	bhi.n	8002eec <inc_lock+0x80>
 8002ede:	4a29      	ldr	r2, [pc, #164]	; (8002f84 <inc_lock+0x118>)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	4413      	add	r3, r2
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f2      	bne.n	8002ed2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d101      	bne.n	8002ef6 <inc_lock+0x8a>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e040      	b.n	8002f78 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4922      	ldr	r1, [pc, #136]	; (8002f84 <inc_lock+0x118>)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	440b      	add	r3, r1
 8002f02:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	491e      	ldr	r1, [pc, #120]	; (8002f84 <inc_lock+0x118>)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	440b      	add	r3, r1
 8002f10:	3304      	adds	r3, #4
 8002f12:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	491a      	ldr	r1, [pc, #104]	; (8002f84 <inc_lock+0x118>)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	440b      	add	r3, r1
 8002f20:	3308      	adds	r3, #8
 8002f22:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8002f24:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <inc_lock+0x118>)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	4413      	add	r3, r2
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	2200      	movs	r2, #0
 8002f30:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d009      	beq.n	8002f4c <inc_lock+0xe0>
 8002f38:	4a12      	ldr	r2, [pc, #72]	; (8002f84 <inc_lock+0x118>)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	4413      	add	r3, r2
 8002f40:	330c      	adds	r3, #12
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <inc_lock+0xe0>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e015      	b.n	8002f78 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d108      	bne.n	8002f64 <inc_lock+0xf8>
 8002f52:	4a0c      	ldr	r2, [pc, #48]	; (8002f84 <inc_lock+0x118>)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	4413      	add	r3, r2
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	e001      	b.n	8002f68 <inc_lock+0xfc>
 8002f64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f68:	4906      	ldr	r1, [pc, #24]	; (8002f84 <inc_lock+0x118>)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	440b      	add	r3, r1
 8002f70:	330c      	adds	r3, #12
 8002f72:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	3301      	adds	r3, #1
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	20000080 	.word	0x20000080

08002f88 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d825      	bhi.n	8002fe8 <dec_lock+0x60>
		n = Files[i].ctr;
 8002f9c:	4a17      	ldr	r2, [pc, #92]	; (8002ffc <dec_lock+0x74>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	4413      	add	r3, r2
 8002fa4:	330c      	adds	r3, #12
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002faa:	89fb      	ldrh	r3, [r7, #14]
 8002fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb0:	d101      	bne.n	8002fb6 <dec_lock+0x2e>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8002fb6:	89fb      	ldrh	r3, [r7, #14]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <dec_lock+0x3a>
 8002fbc:	89fb      	ldrh	r3, [r7, #14]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8002fc2:	4a0e      	ldr	r2, [pc, #56]	; (8002ffc <dec_lock+0x74>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	4413      	add	r3, r2
 8002fca:	330c      	adds	r3, #12
 8002fcc:	89fa      	ldrh	r2, [r7, #14]
 8002fce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002fd0:	89fb      	ldrh	r3, [r7, #14]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d105      	bne.n	8002fe2 <dec_lock+0x5a>
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <dec_lock+0x74>)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	4413      	add	r3, r2
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	737b      	strb	r3, [r7, #13]
 8002fe6:	e001      	b.n	8002fec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002fe8:	2302      	movs	r3, #2
 8002fea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8002fec:	7b7b      	ldrb	r3, [r7, #13]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	20000080 	.word	0x20000080

08003000 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	e010      	b.n	8003030 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800300e:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <clear_lock+0x44>)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	4413      	add	r3, r2
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	429a      	cmp	r2, r3
 800301c:	d105      	bne.n	800302a <clear_lock+0x2a>
 800301e:	4a09      	ldr	r2, [pc, #36]	; (8003044 <clear_lock+0x44>)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	4413      	add	r3, r2
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3301      	adds	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d9eb      	bls.n	800300e <clear_lock+0xe>
	}
}
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000080 	.word	0x20000080

08003048 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	78db      	ldrb	r3, [r3, #3]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d034      	beq.n	80030c6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7858      	ldrb	r0, [r3, #1]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800306c:	2301      	movs	r3, #1
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	f7ff fd40 	bl	8002af4 <disk_write>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <sync_window+0x38>
			res = FR_DISK_ERR;
 800307a:	2301      	movs	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
 800307e:	e022      	b.n	80030c6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	1ad2      	subs	r2, r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	429a      	cmp	r2, r3
 8003094:	d217      	bcs.n	80030c6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	789b      	ldrb	r3, [r3, #2]
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	e010      	b.n	80030c0 <sync_window+0x78>
					wsect += fs->fsize;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4413      	add	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7858      	ldrb	r0, [r3, #1]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80030b2:	2301      	movs	r3, #1
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	f7ff fd1d 	bl	8002af4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	3b01      	subs	r3, #1
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d8eb      	bhi.n	800309e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d01b      	beq.n	8003120 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff ffad 	bl	8003048 <sync_window>
 80030ee:	4603      	mov	r3, r0
 80030f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d113      	bne.n	8003120 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	7858      	ldrb	r0, [r3, #1]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003102:	2301      	movs	r3, #1
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	f7ff fcd5 	bl	8002ab4 <disk_read>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d004      	beq.n	800311a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003110:	f04f 33ff 	mov.w	r3, #4294967295
 8003114:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003120:	7bfb      	ldrb	r3, [r7, #15]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff ff87 	bl	8003048 <sync_window>
 800313a:	4603      	mov	r3, r0
 800313c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d158      	bne.n	80031f6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b03      	cmp	r3, #3
 800314a:	d148      	bne.n	80031de <sync_fs+0xb2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	791b      	ldrb	r3, [r3, #4]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d144      	bne.n	80031de <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3330      	adds	r3, #48	; 0x30
 8003158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fda9 	bl	8002cb6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3330      	adds	r3, #48	; 0x30
 8003168:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800316c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fd38 	bl	8002be6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3330      	adds	r3, #48	; 0x30
 800317a:	4921      	ldr	r1, [pc, #132]	; (8003200 <sync_fs+0xd4>)
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fd4d 	bl	8002c1c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3330      	adds	r3, #48	; 0x30
 8003186:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800318a:	491e      	ldr	r1, [pc, #120]	; (8003204 <sync_fs+0xd8>)
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fd45 	bl	8002c1c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3330      	adds	r3, #48	; 0x30
 8003196:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	4619      	mov	r1, r3
 80031a0:	4610      	mov	r0, r2
 80031a2:	f7ff fd3b 	bl	8002c1c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3330      	adds	r3, #48	; 0x30
 80031aa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	4619      	mov	r1, r3
 80031b4:	4610      	mov	r0, r2
 80031b6:	f7ff fd31 	bl	8002c1c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	7858      	ldrb	r0, [r3, #1]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d2:	2301      	movs	r3, #1
 80031d4:	f7ff fc8e 	bl	8002af4 <disk_write>
			fs->fsi_flag = 0;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	785b      	ldrb	r3, [r3, #1]
 80031e2:	2200      	movs	r2, #0
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fca4 	bl	8002b34 <disk_ioctl>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <sync_fs+0xca>
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	41615252 	.word	0x41615252
 8003204:	61417272 	.word	0x61417272

08003208 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	3b02      	subs	r3, #2
 8003216:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	3b02      	subs	r3, #2
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d301      	bcc.n	8003228 <clust2sect+0x20>
 8003224:	2300      	movs	r3, #0
 8003226:	e008      	b.n	800323a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	895b      	ldrh	r3, [r3, #10]
 800322c:	461a      	mov	r2, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	fb03 f202 	mul.w	r2, r3, r2
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	4413      	add	r3, r2
}
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b086      	sub	sp, #24
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d904      	bls.n	8003266 <get_fat+0x20>
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d302      	bcc.n	800326c <get_fat+0x26>
		val = 1;	/* Internal error */
 8003266:	2301      	movs	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	e08c      	b.n	8003386 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800326c:	f04f 33ff 	mov.w	r3, #4294967295
 8003270:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d045      	beq.n	8003306 <get_fat+0xc0>
 800327a:	2b03      	cmp	r3, #3
 800327c:	d05d      	beq.n	800333a <get_fat+0xf4>
 800327e:	2b01      	cmp	r3, #1
 8003280:	d177      	bne.n	8003372 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	085b      	lsrs	r3, r3, #1
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4413      	add	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	6a1a      	ldr	r2, [r3, #32]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	0a5b      	lsrs	r3, r3, #9
 8003298:	4413      	add	r3, r2
 800329a:	4619      	mov	r1, r3
 800329c:	6938      	ldr	r0, [r7, #16]
 800329e:	f7ff ff17 	bl	80030d0 <move_window>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d167      	bne.n	8003378 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	60fa      	str	r2, [r7, #12]
 80032ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4413      	add	r3, r2
 80032b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ba:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	6a1a      	ldr	r2, [r3, #32]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	0a5b      	lsrs	r3, r3, #9
 80032c4:	4413      	add	r3, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	6938      	ldr	r0, [r7, #16]
 80032ca:	f7ff ff01 	bl	80030d0 <move_window>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d153      	bne.n	800337c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4413      	add	r3, r2
 80032de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	461a      	mov	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <get_fat+0xb6>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	e002      	b.n	8003302 <get_fat+0xbc>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003302:	617b      	str	r3, [r7, #20]
			break;
 8003304:	e03f      	b.n	8003386 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	6a1a      	ldr	r2, [r3, #32]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	4413      	add	r3, r2
 8003310:	4619      	mov	r1, r3
 8003312:	6938      	ldr	r0, [r7, #16]
 8003314:	f7ff fedc 	bl	80030d0 <move_window>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d130      	bne.n	8003380 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800332c:	4413      	add	r3, r2
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fc1e 	bl	8002b70 <ld_word>
 8003334:	4603      	mov	r3, r0
 8003336:	617b      	str	r3, [r7, #20]
			break;
 8003338:	e025      	b.n	8003386 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	6a1a      	ldr	r2, [r3, #32]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	09db      	lsrs	r3, r3, #7
 8003342:	4413      	add	r3, r2
 8003344:	4619      	mov	r1, r3
 8003346:	6938      	ldr	r0, [r7, #16]
 8003348:	f7ff fec2 	bl	80030d0 <move_window>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d118      	bne.n	8003384 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003360:	4413      	add	r3, r2
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fc1c 	bl	8002ba0 <ld_dword>
 8003368:	4603      	mov	r3, r0
 800336a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800336e:	617b      	str	r3, [r7, #20]
			break;
 8003370:	e009      	b.n	8003386 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003372:	2301      	movs	r3, #1
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	e006      	b.n	8003386 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003378:	bf00      	nop
 800337a:	e004      	b.n	8003386 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800337c:	bf00      	nop
 800337e:	e002      	b.n	8003386 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003380:	bf00      	nop
 8003382:	e000      	b.n	8003386 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003384:	bf00      	nop
		}
	}

	return val;
 8003386:	697b      	ldr	r3, [r7, #20]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800339c:	2302      	movs	r3, #2
 800339e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	f240 80d6 	bls.w	8003554 <put_fat+0x1c4>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	f080 80d0 	bcs.w	8003554 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d073      	beq.n	80034a4 <put_fat+0x114>
 80033bc:	2b03      	cmp	r3, #3
 80033be:	f000 8091 	beq.w	80034e4 <put_fat+0x154>
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	f040 80c6 	bne.w	8003554 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	61bb      	str	r3, [r7, #24]
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4413      	add	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a1a      	ldr	r2, [r3, #32]
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	0a5b      	lsrs	r3, r3, #9
 80033de:	4413      	add	r3, r2
 80033e0:	4619      	mov	r1, r3
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f7ff fe74 	bl	80030d0 <move_window>
 80033e8:	4603      	mov	r3, r0
 80033ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80033ec:	7ffb      	ldrb	r3, [r7, #31]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 80a9 	bne.w	8003546 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	1c59      	adds	r1, r3, #1
 80033fe:	61b9      	str	r1, [r7, #24]
 8003400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003404:	4413      	add	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00d      	beq.n	800342e <put_fat+0x9e>
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	b25b      	sxtb	r3, r3
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	b25a      	sxtb	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	b25b      	sxtb	r3, r3
 8003426:	4313      	orrs	r3, r2
 8003428:	b25b      	sxtb	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	e001      	b.n	8003432 <put_fat+0xa2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a1a      	ldr	r2, [r3, #32]
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	0a5b      	lsrs	r3, r3, #9
 8003444:	4413      	add	r3, r2
 8003446:	4619      	mov	r1, r3
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f7ff fe41 	bl	80030d0 <move_window>
 800344e:	4603      	mov	r3, r0
 8003450:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003452:	7ffb      	ldrb	r3, [r7, #31]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d178      	bne.n	800354a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003464:	4413      	add	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <put_fat+0xea>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	b2db      	uxtb	r3, r3
 8003478:	e00e      	b.n	8003498 <put_fat+0x108>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	b25b      	sxtb	r3, r3
 8003480:	f023 030f 	bic.w	r3, r3, #15
 8003484:	b25a      	sxtb	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	b25b      	sxtb	r3, r3
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	b25b      	sxtb	r3, r3
 8003492:	4313      	orrs	r3, r2
 8003494:	b25b      	sxtb	r3, r3
 8003496:	b2db      	uxtb	r3, r3
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	70da      	strb	r2, [r3, #3]
			break;
 80034a2:	e057      	b.n	8003554 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a1a      	ldr	r2, [r3, #32]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	0a1b      	lsrs	r3, r3, #8
 80034ac:	4413      	add	r3, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f7ff fe0d 	bl	80030d0 <move_window>
 80034b6:	4603      	mov	r3, r0
 80034b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80034ba:	7ffb      	ldrb	r3, [r7, #31]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d146      	bne.n	800354e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80034ce:	4413      	add	r3, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	b292      	uxth	r2, r2
 80034d4:	4611      	mov	r1, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fb85 	bl	8002be6 <st_word>
			fs->wflag = 1;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	70da      	strb	r2, [r3, #3]
			break;
 80034e2:	e037      	b.n	8003554 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a1a      	ldr	r2, [r3, #32]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	09db      	lsrs	r3, r3, #7
 80034ec:	4413      	add	r3, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f7ff fded 	bl	80030d0 <move_window>
 80034f6:	4603      	mov	r3, r0
 80034f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80034fa:	7ffb      	ldrb	r3, [r7, #31]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d128      	bne.n	8003552 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003514:	4413      	add	r3, r2
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fb42 	bl	8002ba0 <ld_dword>
 800351c:	4603      	mov	r3, r0
 800351e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003522:	4323      	orrs	r3, r4
 8003524:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003534:	4413      	add	r3, r2
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fb6f 	bl	8002c1c <st_dword>
			fs->wflag = 1;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	70da      	strb	r2, [r3, #3]
			break;
 8003544:	e006      	b.n	8003554 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8003546:	bf00      	nop
 8003548:	e004      	b.n	8003554 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800354a:	bf00      	nop
 800354c:	e002      	b.n	8003554 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800354e:	bf00      	nop
 8003550:	e000      	b.n	8003554 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8003552:	bf00      	nop
		}
	}
	return res;
 8003554:	7ffb      	ldrb	r3, [r7, #31]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3724      	adds	r7, #36	; 0x24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd90      	pop	{r4, r7, pc}

0800355e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b088      	sub	sp, #32
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d904      	bls.n	8003584 <remove_chain+0x26>
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	429a      	cmp	r2, r3
 8003582:	d301      	bcc.n	8003588 <remove_chain+0x2a>
 8003584:	2302      	movs	r3, #2
 8003586:	e04b      	b.n	8003620 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00c      	beq.n	80035a8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800358e:	f04f 32ff 	mov.w	r2, #4294967295
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	69b8      	ldr	r0, [r7, #24]
 8003596:	f7ff fefb 	bl	8003390 <put_fat>
 800359a:	4603      	mov	r3, r0
 800359c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800359e:	7ffb      	ldrb	r3, [r7, #31]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <remove_chain+0x4a>
 80035a4:	7ffb      	ldrb	r3, [r7, #31]
 80035a6:	e03b      	b.n	8003620 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f7ff fe4b 	bl	8003246 <get_fat>
 80035b0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d031      	beq.n	800361c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <remove_chain+0x64>
 80035be:	2302      	movs	r3, #2
 80035c0:	e02e      	b.n	8003620 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d101      	bne.n	80035ce <remove_chain+0x70>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e028      	b.n	8003620 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80035ce:	2200      	movs	r2, #0
 80035d0:	68b9      	ldr	r1, [r7, #8]
 80035d2:	69b8      	ldr	r0, [r7, #24]
 80035d4:	f7ff fedc 	bl	8003390 <put_fat>
 80035d8:	4603      	mov	r3, r0
 80035da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80035dc:	7ffb      	ldrb	r3, [r7, #31]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <remove_chain+0x88>
 80035e2:	7ffb      	ldrb	r3, [r7, #31]
 80035e4:	e01c      	b.n	8003620 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	3b02      	subs	r3, #2
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d20b      	bcs.n	800360c <remove_chain+0xae>
			fs->free_clst++;
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	791b      	ldrb	r3, [r3, #4]
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	b2da      	uxtb	r2, r3
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	d3c6      	bcc.n	80035a8 <remove_chain+0x4a>
 800361a:	e000      	b.n	800361e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800361c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3720      	adds	r7, #32
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10d      	bne.n	800365a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d004      	beq.n	8003654 <create_chain+0x2c>
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	429a      	cmp	r2, r3
 8003652:	d31b      	bcc.n	800368c <create_chain+0x64>
 8003654:	2301      	movs	r3, #1
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	e018      	b.n	800368c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800365a:	6839      	ldr	r1, [r7, #0]
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff fdf2 	bl	8003246 <get_fat>
 8003662:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d801      	bhi.n	800366e <create_chain+0x46>
 800366a:	2301      	movs	r3, #1
 800366c:	e070      	b.n	8003750 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d101      	bne.n	800367a <create_chain+0x52>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	e06a      	b.n	8003750 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	429a      	cmp	r2, r3
 8003682:	d201      	bcs.n	8003688 <create_chain+0x60>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	e063      	b.n	8003750 <create_chain+0x128>
		scl = clst;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	3301      	adds	r3, #1
 8003694:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	429a      	cmp	r2, r3
 800369e:	d307      	bcc.n	80036b0 <create_chain+0x88>
				ncl = 2;
 80036a0:	2302      	movs	r3, #2
 80036a2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d901      	bls.n	80036b0 <create_chain+0x88>
 80036ac:	2300      	movs	r3, #0
 80036ae:	e04f      	b.n	8003750 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80036b0:	69f9      	ldr	r1, [r7, #28]
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff fdc7 	bl	8003246 <get_fat>
 80036b8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00e      	beq.n	80036de <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d003      	beq.n	80036ce <create_chain+0xa6>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d101      	bne.n	80036d2 <create_chain+0xaa>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	e03e      	b.n	8003750 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d1da      	bne.n	8003690 <create_chain+0x68>
 80036da:	2300      	movs	r3, #0
 80036dc:	e038      	b.n	8003750 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80036de:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80036e0:	f04f 32ff 	mov.w	r2, #4294967295
 80036e4:	69f9      	ldr	r1, [r7, #28]
 80036e6:	6938      	ldr	r0, [r7, #16]
 80036e8:	f7ff fe52 	bl	8003390 <put_fat>
 80036ec:	4603      	mov	r3, r0
 80036ee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <create_chain+0xe2>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d006      	beq.n	800370a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	6839      	ldr	r1, [r7, #0]
 8003700:	6938      	ldr	r0, [r7, #16]
 8003702:	f7ff fe45 	bl	8003390 <put_fat>
 8003706:	4603      	mov	r3, r0
 8003708:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800370a:	7dfb      	ldrb	r3, [r7, #23]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d116      	bne.n	800373e <create_chain+0x116>
		fs->last_clst = ncl;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	3b02      	subs	r3, #2
 8003720:	429a      	cmp	r2, r3
 8003722:	d804      	bhi.n	800372e <create_chain+0x106>
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	1e5a      	subs	r2, r3, #1
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	791b      	ldrb	r3, [r3, #4]
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	b2da      	uxtb	r2, r3
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	711a      	strb	r2, [r3, #4]
 800373c:	e007      	b.n	800374e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800373e:	7dfb      	ldrb	r3, [r7, #23]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d102      	bne.n	800374a <create_chain+0x122>
 8003744:	f04f 33ff 	mov.w	r3, #4294967295
 8003748:	e000      	b.n	800374c <create_chain+0x124>
 800374a:	2301      	movs	r3, #1
 800374c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800374e:	69fb      	ldr	r3, [r7, #28]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3720      	adds	r7, #32
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	3304      	adds	r3, #4
 800376e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	0a5b      	lsrs	r3, r3, #9
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	8952      	ldrh	r2, [r2, #10]
 8003778:	fbb3 f3f2 	udiv	r3, r3, r2
 800377c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1d1a      	adds	r2, r3, #4
 8003782:	613a      	str	r2, [r7, #16]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <clmt_clust+0x3a>
 800378e:	2300      	movs	r3, #0
 8003790:	e010      	b.n	80037b4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	429a      	cmp	r2, r3
 8003798:	d307      	bcc.n	80037aa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	3304      	adds	r3, #4
 80037a6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80037a8:	e7e9      	b.n	800377e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80037aa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	4413      	add	r3, r2
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	371c      	adds	r7, #28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037d6:	d204      	bcs.n	80037e2 <dir_sdi+0x22>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	f003 031f 	and.w	r3, r3, #31
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80037e2:	2302      	movs	r3, #2
 80037e4:	e063      	b.n	80038ae <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <dir_sdi+0x46>
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d902      	bls.n	8003806 <dir_sdi+0x46>
		clst = fs->dirbase;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10c      	bne.n	8003826 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	8912      	ldrh	r2, [r2, #8]
 8003814:	4293      	cmp	r3, r2
 8003816:	d301      	bcc.n	800381c <dir_sdi+0x5c>
 8003818:	2302      	movs	r3, #2
 800381a:	e048      	b.n	80038ae <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	61da      	str	r2, [r3, #28]
 8003824:	e029      	b.n	800387a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	895b      	ldrh	r3, [r3, #10]
 800382a:	025b      	lsls	r3, r3, #9
 800382c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800382e:	e019      	b.n	8003864 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6979      	ldr	r1, [r7, #20]
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff fd06 	bl	8003246 <get_fat>
 800383a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003842:	d101      	bne.n	8003848 <dir_sdi+0x88>
 8003844:	2301      	movs	r3, #1
 8003846:	e032      	b.n	80038ae <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d904      	bls.n	8003858 <dir_sdi+0x98>
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	429a      	cmp	r2, r3
 8003856:	d301      	bcc.n	800385c <dir_sdi+0x9c>
 8003858:	2302      	movs	r3, #2
 800385a:	e028      	b.n	80038ae <dir_sdi+0xee>
			ofs -= csz;
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	429a      	cmp	r2, r3
 800386a:	d2e1      	bcs.n	8003830 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800386c:	6979      	ldr	r1, [r7, #20]
 800386e:	6938      	ldr	r0, [r7, #16]
 8003870:	f7ff fcca 	bl	8003208 <clust2sect>
 8003874:	4602      	mov	r2, r0
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <dir_sdi+0xcc>
 8003888:	2302      	movs	r3, #2
 800388a:	e010      	b.n	80038ae <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	0a5b      	lsrs	r3, r3, #9
 8003894:	441a      	add	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a6:	441a      	add	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b086      	sub	sp, #24
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	3320      	adds	r3, #32
 80038cc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <dir_next+0x28>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038dc:	d301      	bcc.n	80038e2 <dir_next+0x2c>
 80038de:	2304      	movs	r3, #4
 80038e0:	e0aa      	b.n	8003a38 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f040 8098 	bne.w	8003a1e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10b      	bne.n	8003918 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	8912      	ldrh	r2, [r2, #8]
 8003908:	4293      	cmp	r3, r2
 800390a:	f0c0 8088 	bcc.w	8003a1e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	61da      	str	r2, [r3, #28]
 8003914:	2304      	movs	r3, #4
 8003916:	e08f      	b.n	8003a38 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	0a5b      	lsrs	r3, r3, #9
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	8952      	ldrh	r2, [r2, #10]
 8003920:	3a01      	subs	r2, #1
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d17a      	bne.n	8003a1e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	4619      	mov	r1, r3
 8003930:	4610      	mov	r0, r2
 8003932:	f7ff fc88 	bl	8003246 <get_fat>
 8003936:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d801      	bhi.n	8003942 <dir_next+0x8c>
 800393e:	2302      	movs	r3, #2
 8003940:	e07a      	b.n	8003a38 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d101      	bne.n	800394e <dir_next+0x98>
 800394a:	2301      	movs	r3, #1
 800394c:	e074      	b.n	8003a38 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	429a      	cmp	r2, r3
 8003956:	d358      	bcc.n	8003a0a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d104      	bne.n	8003968 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	61da      	str	r2, [r3, #28]
 8003964:	2304      	movs	r3, #4
 8003966:	e067      	b.n	8003a38 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	4619      	mov	r1, r3
 8003970:	4610      	mov	r0, r2
 8003972:	f7ff fe59 	bl	8003628 <create_chain>
 8003976:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <dir_next+0xcc>
 800397e:	2307      	movs	r3, #7
 8003980:	e05a      	b.n	8003a38 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <dir_next+0xd6>
 8003988:	2302      	movs	r3, #2
 800398a:	e055      	b.n	8003a38 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d101      	bne.n	8003998 <dir_next+0xe2>
 8003994:	2301      	movs	r3, #1
 8003996:	e04f      	b.n	8003a38 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f7ff fb55 	bl	8003048 <sync_window>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <dir_next+0xf2>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e047      	b.n	8003a38 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	3330      	adds	r3, #48	; 0x30
 80039ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff f97f 	bl	8002cb6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80039b8:	2300      	movs	r3, #0
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	6979      	ldr	r1, [r7, #20]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f7ff fc22 	bl	8003208 <clust2sect>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80039ca:	e012      	b.n	80039f2 <dir_next+0x13c>
						fs->wflag = 1;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2201      	movs	r2, #1
 80039d0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f7ff fb38 	bl	8003048 <sync_window>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <dir_next+0x12c>
 80039de:	2301      	movs	r3, #1
 80039e0:	e02a      	b.n	8003a38 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	3301      	adds	r3, #1
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	895b      	ldrh	r3, [r3, #10]
 80039f6:	461a      	mov	r2, r3
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d3e6      	bcc.n	80039cc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad2      	subs	r2, r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003a10:	6979      	ldr	r1, [r7, #20]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f7ff fbf8 	bl	8003208 <clust2sect>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a30:	441a      	add	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003a50:	2100      	movs	r1, #0
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff feb4 	bl	80037c0 <dir_sdi>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d12b      	bne.n	8003aba <dir_alloc+0x7a>
		n = 0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f7ff fb2f 	bl	80030d0 <move_window>
 8003a72:	4603      	mov	r3, r0
 8003a74:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d11d      	bne.n	8003ab8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2be5      	cmp	r3, #229	; 0xe5
 8003a84:	d004      	beq.n	8003a90 <dir_alloc+0x50>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d107      	bne.n	8003aa0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	3301      	adds	r3, #1
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d102      	bne.n	8003aa4 <dir_alloc+0x64>
 8003a9e:	e00c      	b.n	8003aba <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff ff05 	bl	80038b6 <dir_next>
 8003aac:	4603      	mov	r3, r0
 8003aae:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0d7      	beq.n	8003a66 <dir_alloc+0x26>
 8003ab6:	e000      	b.n	8003aba <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003ab8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d101      	bne.n	8003ac4 <dir_alloc+0x84>
 8003ac0:	2307      	movs	r3, #7
 8003ac2:	75fb      	strb	r3, [r7, #23]
	return res;
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	331a      	adds	r3, #26
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff f847 	bl	8002b70 <ld_word>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d109      	bne.n	8003b02 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	3314      	adds	r3, #20
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff f83c 	bl	8002b70 <ld_word>
 8003af8:	4603      	mov	r3, r0
 8003afa:	041b      	lsls	r3, r3, #16
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003b02:	68fb      	ldr	r3, [r7, #12]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	331a      	adds	r3, #26
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	b292      	uxth	r2, r2
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff f85f 	bl	8002be6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b03      	cmp	r3, #3
 8003b2e:	d109      	bne.n	8003b44 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f103 0214 	add.w	r2, r3, #20
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	f7ff f851 	bl	8002be6 <st_word>
	}
}
 8003b44:	bf00      	nop
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff fe2f 	bl	80037c0 <dir_sdi>
 8003b62:	4603      	mov	r3, r0
 8003b64:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <dir_find+0x24>
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
 8003b6e:	e03e      	b.n	8003bee <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	4619      	mov	r1, r3
 8003b76:	6938      	ldr	r0, [r7, #16]
 8003b78:	f7ff faaa 	bl	80030d0 <move_window>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d12f      	bne.n	8003be6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d102      	bne.n	8003b9a <dir_find+0x4e>
 8003b94:	2304      	movs	r3, #4
 8003b96:	75fb      	strb	r3, [r7, #23]
 8003b98:	e028      	b.n	8003bec <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	330b      	adds	r3, #11
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	330b      	adds	r3, #11
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10a      	bne.n	8003bd2 <dir_find+0x86>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a18      	ldr	r0, [r3, #32]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3324      	adds	r3, #36	; 0x24
 8003bc4:	220b      	movs	r2, #11
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	f7ff f88f 	bl	8002cea <mem_cmp>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff fe6e 	bl	80038b6 <dir_next>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0c5      	beq.n	8003b70 <dir_find+0x24>
 8003be4:	e002      	b.n	8003bec <dir_find+0xa0>
		if (res != FR_OK) break;
 8003be6:	bf00      	nop
 8003be8:	e000      	b.n	8003bec <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003bea:	bf00      	nop

	return res;
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8003c04:	2101      	movs	r1, #1
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff ff1a 	bl	8003a40 <dir_alloc>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d11c      	bne.n	8003c50 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	68b8      	ldr	r0, [r7, #8]
 8003c1e:	f7ff fa57 	bl	80030d0 <move_window>
 8003c22:	4603      	mov	r3, r0
 8003c24:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d111      	bne.n	8003c50 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	2220      	movs	r2, #32
 8003c32:	2100      	movs	r1, #0
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff f83e 	bl	8002cb6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a18      	ldr	r0, [r3, #32]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3324      	adds	r3, #36	; 0x24
 8003c42:	220b      	movs	r2, #11
 8003c44:	4619      	mov	r1, r3
 8003c46:	f7ff f815 	bl	8002c74 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3324      	adds	r3, #36	; 0x24
 8003c70:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8003c72:	220b      	movs	r2, #11
 8003c74:	2120      	movs	r1, #32
 8003c76:	68b8      	ldr	r0, [r7, #8]
 8003c78:	f7ff f81d 	bl	8002cb6 <mem_set>
	si = i = 0; ni = 8;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	2308      	movs	r3, #8
 8003c86:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	617a      	str	r2, [r7, #20]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4413      	add	r3, r2
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003c96:	7ffb      	ldrb	r3, [r7, #31]
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d94e      	bls.n	8003d3a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003c9c:	7ffb      	ldrb	r3, [r7, #31]
 8003c9e:	2b2f      	cmp	r3, #47	; 0x2f
 8003ca0:	d006      	beq.n	8003cb0 <create_name+0x54>
 8003ca2:	7ffb      	ldrb	r3, [r7, #31]
 8003ca4:	2b5c      	cmp	r3, #92	; 0x5c
 8003ca6:	d110      	bne.n	8003cca <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003ca8:	e002      	b.n	8003cb0 <create_name+0x54>
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	3301      	adds	r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b2f      	cmp	r3, #47	; 0x2f
 8003cba:	d0f6      	beq.n	8003caa <create_name+0x4e>
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b5c      	cmp	r3, #92	; 0x5c
 8003cc6:	d0f0      	beq.n	8003caa <create_name+0x4e>
			break;
 8003cc8:	e038      	b.n	8003d3c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8003cca:	7ffb      	ldrb	r3, [r7, #31]
 8003ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8003cce:	d003      	beq.n	8003cd8 <create_name+0x7c>
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d30c      	bcc.n	8003cf2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	2b0b      	cmp	r3, #11
 8003cdc:	d002      	beq.n	8003ce4 <create_name+0x88>
 8003cde:	7ffb      	ldrb	r3, [r7, #31]
 8003ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8003ce2:	d001      	beq.n	8003ce8 <create_name+0x8c>
 8003ce4:	2306      	movs	r3, #6
 8003ce6:	e044      	b.n	8003d72 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8003ce8:	2308      	movs	r3, #8
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	230b      	movs	r3, #11
 8003cee:	61bb      	str	r3, [r7, #24]
			continue;
 8003cf0:	e022      	b.n	8003d38 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8003cf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	da04      	bge.n	8003d04 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003cfa:	7ffb      	ldrb	r3, [r7, #31]
 8003cfc:	3b80      	subs	r3, #128	; 0x80
 8003cfe:	4a1f      	ldr	r2, [pc, #124]	; (8003d7c <create_name+0x120>)
 8003d00:	5cd3      	ldrb	r3, [r2, r3]
 8003d02:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8003d04:	7ffb      	ldrb	r3, [r7, #31]
 8003d06:	4619      	mov	r1, r3
 8003d08:	481d      	ldr	r0, [pc, #116]	; (8003d80 <create_name+0x124>)
 8003d0a:	f7ff f815 	bl	8002d38 <chk_chr>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <create_name+0xbc>
 8003d14:	2306      	movs	r3, #6
 8003d16:	e02c      	b.n	8003d72 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003d18:	7ffb      	ldrb	r3, [r7, #31]
 8003d1a:	2b60      	cmp	r3, #96	; 0x60
 8003d1c:	d905      	bls.n	8003d2a <create_name+0xce>
 8003d1e:	7ffb      	ldrb	r3, [r7, #31]
 8003d20:	2b7a      	cmp	r3, #122	; 0x7a
 8003d22:	d802      	bhi.n	8003d2a <create_name+0xce>
 8003d24:	7ffb      	ldrb	r3, [r7, #31]
 8003d26:	3b20      	subs	r3, #32
 8003d28:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	613a      	str	r2, [r7, #16]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	4413      	add	r3, r2
 8003d34:	7ffa      	ldrb	r2, [r7, #31]
 8003d36:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8003d38:	e7a6      	b.n	8003c88 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003d3a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	441a      	add	r2, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <create_name+0xf4>
 8003d4c:	2306      	movs	r3, #6
 8003d4e:	e010      	b.n	8003d72 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2be5      	cmp	r3, #229	; 0xe5
 8003d56:	d102      	bne.n	8003d5e <create_name+0x102>
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2205      	movs	r2, #5
 8003d5c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003d5e:	7ffb      	ldrb	r3, [r7, #31]
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d801      	bhi.n	8003d68 <create_name+0x10c>
 8003d64:	2204      	movs	r2, #4
 8003d66:	e000      	b.n	8003d6a <create_name+0x10e>
 8003d68:	2200      	movs	r2, #0
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	330b      	adds	r3, #11
 8003d6e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8003d70:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	080050f8 	.word	0x080050f8
 8003d80:	080050a4 	.word	0x080050a4

08003d84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003d98:	e002      	b.n	8003da0 <follow_path+0x1c>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b2f      	cmp	r3, #47	; 0x2f
 8003da6:	d0f8      	beq.n	8003d9a <follow_path+0x16>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b5c      	cmp	r3, #92	; 0x5c
 8003dae:	d0f4      	beq.n	8003d9a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	2200      	movs	r2, #0
 8003db4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b1f      	cmp	r3, #31
 8003dbc:	d80a      	bhi.n	8003dd4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2280      	movs	r2, #128	; 0x80
 8003dc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff fcf9 	bl	80037c0 <dir_sdi>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	75fb      	strb	r3, [r7, #23]
 8003dd2:	e043      	b.n	8003e5c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003dd4:	463b      	mov	r3, r7
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ff3f 	bl	8003c5c <create_name>
 8003dde:	4603      	mov	r3, r0
 8003de0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003de2:	7dfb      	ldrb	r3, [r7, #23]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d134      	bne.n	8003e52 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff feaf 	bl	8003b4c <dir_find>
 8003dee:	4603      	mov	r3, r0
 8003df0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003df8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003dfa:	7dfb      	ldrb	r3, [r7, #23]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d127      	bne.n	8003e56 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003e06:	7afb      	ldrb	r3, [r7, #11]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d122      	bne.n	8003e56 <follow_path+0xd2>
 8003e10:	2305      	movs	r3, #5
 8003e12:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8003e14:	e01f      	b.n	8003e56 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003e16:	7afb      	ldrb	r3, [r7, #11]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d11c      	bne.n	8003e5a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	799b      	ldrb	r3, [r3, #6]
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d102      	bne.n	8003e32 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8003e2c:	2305      	movs	r3, #5
 8003e2e:	75fb      	strb	r3, [r7, #23]
 8003e30:	e014      	b.n	8003e5c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e40:	4413      	add	r3, r2
 8003e42:	4619      	mov	r1, r3
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f7ff fe42 	bl	8003ace <ld_clust>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003e50:	e7c0      	b.n	8003dd4 <follow_path+0x50>
			if (res != FR_OK) break;
 8003e52:	bf00      	nop
 8003e54:	e002      	b.n	8003e5c <follow_path+0xd8>
				break;
 8003e56:	bf00      	nop
 8003e58:	e000      	b.n	8003e5c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003e5a:	bf00      	nop
			}
		}
	}

	return res;
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b087      	sub	sp, #28
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8003e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e72:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d031      	beq.n	8003ee0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	e002      	b.n	8003e8a <get_ldnumber+0x24>
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	3301      	adds	r3, #1
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d903      	bls.n	8003e9a <get_ldnumber+0x34>
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b3a      	cmp	r3, #58	; 0x3a
 8003e98:	d1f4      	bne.n	8003e84 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b3a      	cmp	r3, #58	; 0x3a
 8003ea0:	d11c      	bne.n	8003edc <get_ldnumber+0x76>
			tp = *path;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	60fa      	str	r2, [r7, #12]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	3b30      	subs	r3, #48	; 0x30
 8003eb2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b09      	cmp	r3, #9
 8003eb8:	d80e      	bhi.n	8003ed8 <get_ldnumber+0x72>
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d10a      	bne.n	8003ed8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d107      	bne.n	8003ed8 <get_ldnumber+0x72>
					vol = (int)i;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	e002      	b.n	8003ee2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8003ee0:	693b      	ldr	r3, [r7, #16]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	70da      	strb	r2, [r3, #3]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f04f 32ff 	mov.w	r2, #4294967295
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003f08:	6839      	ldr	r1, [r7, #0]
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7ff f8e0 	bl	80030d0 <move_window>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <check_fs+0x2a>
 8003f16:	2304      	movs	r3, #4
 8003f18:	e038      	b.n	8003f8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3330      	adds	r3, #48	; 0x30
 8003f1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe fe24 	bl	8002b70 <ld_word>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d001      	beq.n	8003f38 <check_fs+0x48>
 8003f34:	2303      	movs	r3, #3
 8003f36:	e029      	b.n	8003f8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f3e:	2be9      	cmp	r3, #233	; 0xe9
 8003f40:	d009      	beq.n	8003f56 <check_fs+0x66>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f48:	2beb      	cmp	r3, #235	; 0xeb
 8003f4a:	d11e      	bne.n	8003f8a <check_fs+0x9a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003f52:	2b90      	cmp	r3, #144	; 0x90
 8003f54:	d119      	bne.n	8003f8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3330      	adds	r3, #48	; 0x30
 8003f5a:	3336      	adds	r3, #54	; 0x36
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fe fe1f 	bl	8002ba0 <ld_dword>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f68:	4a0a      	ldr	r2, [pc, #40]	; (8003f94 <check_fs+0xa4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d101      	bne.n	8003f72 <check_fs+0x82>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e00c      	b.n	8003f8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3330      	adds	r3, #48	; 0x30
 8003f76:	3352      	adds	r3, #82	; 0x52
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fe fe11 	bl	8002ba0 <ld_dword>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <check_fs+0xa8>)
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d101      	bne.n	8003f8a <check_fs+0x9a>
 8003f86:	2300      	movs	r3, #0
 8003f88:	e000      	b.n	8003f8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8003f8a:	2302      	movs	r3, #2
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	00544146 	.word	0x00544146
 8003f98:	33544146 	.word	0x33544146

08003f9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b096      	sub	sp, #88	; 0x58
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7ff ff58 	bl	8003e66 <get_ldnumber>
 8003fb6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	da01      	bge.n	8003fc2 <find_volume+0x26>
 8003fbe:	230b      	movs	r3, #11
 8003fc0:	e22e      	b.n	8004420 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003fc2:	4aa8      	ldr	r2, [pc, #672]	; (8004264 <find_volume+0x2c8>)
 8003fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <find_volume+0x3a>
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	e224      	b.n	8004420 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fda:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01a      	beq.n	8004022 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8003fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fee:	785b      	ldrb	r3, [r3, #1]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe fd1f 	bl	8002a34 <disk_status>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003ffc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10c      	bne.n	8004022 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d007      	beq.n	800401e <find_volume+0x82>
 800400e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800401a:	230a      	movs	r3, #10
 800401c:	e200      	b.n	8004420 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800401e:	2300      	movs	r3, #0
 8004020:	e1fe      	b.n	8004420 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402a:	b2da      	uxtb	r2, r3
 800402c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	785b      	ldrb	r3, [r3, #1]
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe fd17 	bl	8002a68 <disk_initialize>
 800403a:	4603      	mov	r3, r0
 800403c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004040:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800404c:	2303      	movs	r3, #3
 800404e:	e1e7      	b.n	8004420 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <find_volume+0xca>
 8004056:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004062:	230a      	movs	r3, #10
 8004064:	e1dc      	b.n	8004420 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800406a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800406c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800406e:	f7ff ff3f 	bl	8003ef0 <check_fs>
 8004072:	4603      	mov	r3, r0
 8004074:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004078:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800407c:	2b02      	cmp	r3, #2
 800407e:	d14b      	bne.n	8004118 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004080:	2300      	movs	r3, #0
 8004082:	643b      	str	r3, [r7, #64]	; 0x40
 8004084:	e01f      	b.n	80040c6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004088:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800408c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004094:	4413      	add	r3, r2
 8004096:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	3304      	adds	r3, #4
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d006      	beq.n	80040b0 <find_volume+0x114>
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	3308      	adds	r3, #8
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe fd7a 	bl	8002ba0 <ld_dword>
 80040ac:	4602      	mov	r2, r0
 80040ae:	e000      	b.n	80040b2 <find_volume+0x116>
 80040b0:	2200      	movs	r2, #0
 80040b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80040ba:	440b      	add	r3, r1
 80040bc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80040c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c2:	3301      	adds	r3, #1
 80040c4:	643b      	str	r3, [r7, #64]	; 0x40
 80040c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d9dc      	bls.n	8004086 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80040cc:	2300      	movs	r3, #0
 80040ce:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80040d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <find_volume+0x140>
 80040d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d8:	3b01      	subs	r3, #1
 80040da:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80040dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80040e4:	4413      	add	r3, r2
 80040e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80040ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80040ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <find_volume+0x162>
 80040f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80040f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80040f6:	f7ff fefb 	bl	8003ef0 <check_fs>
 80040fa:	4603      	mov	r3, r0
 80040fc:	e000      	b.n	8004100 <find_volume+0x164>
 80040fe:	2303      	movs	r3, #3
 8004100:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004104:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004108:	2b01      	cmp	r3, #1
 800410a:	d905      	bls.n	8004118 <find_volume+0x17c>
 800410c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800410e:	3301      	adds	r3, #1
 8004110:	643b      	str	r3, [r7, #64]	; 0x40
 8004112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004114:	2b03      	cmp	r3, #3
 8004116:	d9e1      	bls.n	80040dc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004118:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800411c:	2b04      	cmp	r3, #4
 800411e:	d101      	bne.n	8004124 <find_volume+0x188>
 8004120:	2301      	movs	r3, #1
 8004122:	e17d      	b.n	8004420 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004124:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004128:	2b01      	cmp	r3, #1
 800412a:	d901      	bls.n	8004130 <find_volume+0x194>
 800412c:	230d      	movs	r3, #13
 800412e:	e177      	b.n	8004420 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004132:	3330      	adds	r3, #48	; 0x30
 8004134:	330b      	adds	r3, #11
 8004136:	4618      	mov	r0, r3
 8004138:	f7fe fd1a 	bl	8002b70 <ld_word>
 800413c:	4603      	mov	r3, r0
 800413e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004142:	d001      	beq.n	8004148 <find_volume+0x1ac>
 8004144:	230d      	movs	r3, #13
 8004146:	e16b      	b.n	8004420 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414a:	3330      	adds	r3, #48	; 0x30
 800414c:	3316      	adds	r3, #22
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe fd0e 	bl	8002b70 <ld_word>
 8004154:	4603      	mov	r3, r0
 8004156:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <find_volume+0x1d0>
 800415e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004160:	3330      	adds	r3, #48	; 0x30
 8004162:	3324      	adds	r3, #36	; 0x24
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe fd1b 	bl	8002ba0 <ld_dword>
 800416a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800416c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004170:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	789b      	ldrb	r3, [r3, #2]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d005      	beq.n	8004190 <find_volume+0x1f4>
 8004184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004186:	789b      	ldrb	r3, [r3, #2]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d001      	beq.n	8004190 <find_volume+0x1f4>
 800418c:	230d      	movs	r3, #13
 800418e:	e147      	b.n	8004420 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004192:	789b      	ldrb	r3, [r3, #2]
 8004194:	461a      	mov	r2, r3
 8004196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004198:	fb02 f303 	mul.w	r3, r2, r3
 800419c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800419e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	895b      	ldrh	r3, [r3, #10]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d008      	beq.n	80041c4 <find_volume+0x228>
 80041b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b4:	895b      	ldrh	r3, [r3, #10]
 80041b6:	461a      	mov	r2, r3
 80041b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ba:	895b      	ldrh	r3, [r3, #10]
 80041bc:	3b01      	subs	r3, #1
 80041be:	4013      	ands	r3, r2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <find_volume+0x22c>
 80041c4:	230d      	movs	r3, #13
 80041c6:	e12b      	b.n	8004420 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80041c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ca:	3330      	adds	r3, #48	; 0x30
 80041cc:	3311      	adds	r3, #17
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fe fcce 	bl	8002b70 <ld_word>
 80041d4:	4603      	mov	r3, r0
 80041d6:	461a      	mov	r2, r3
 80041d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80041dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041de:	891b      	ldrh	r3, [r3, #8]
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <find_volume+0x252>
 80041ea:	230d      	movs	r3, #13
 80041ec:	e118      	b.n	8004420 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	3330      	adds	r3, #48	; 0x30
 80041f2:	3313      	adds	r3, #19
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fcbb 	bl	8002b70 <ld_word>
 80041fa:	4603      	mov	r3, r0
 80041fc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80041fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004200:	2b00      	cmp	r3, #0
 8004202:	d106      	bne.n	8004212 <find_volume+0x276>
 8004204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004206:	3330      	adds	r3, #48	; 0x30
 8004208:	3320      	adds	r3, #32
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe fcc8 	bl	8002ba0 <ld_dword>
 8004210:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004214:	3330      	adds	r3, #48	; 0x30
 8004216:	330e      	adds	r3, #14
 8004218:	4618      	mov	r0, r3
 800421a:	f7fe fca9 	bl	8002b70 <ld_word>
 800421e:	4603      	mov	r3, r0
 8004220:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004222:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <find_volume+0x290>
 8004228:	230d      	movs	r3, #13
 800422a:	e0f9      	b.n	8004420 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800422c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800422e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004230:	4413      	add	r3, r2
 8004232:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004234:	8912      	ldrh	r2, [r2, #8]
 8004236:	0912      	lsrs	r2, r2, #4
 8004238:	b292      	uxth	r2, r2
 800423a:	4413      	add	r3, r2
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800423e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	429a      	cmp	r2, r3
 8004244:	d201      	bcs.n	800424a <find_volume+0x2ae>
 8004246:	230d      	movs	r3, #13
 8004248:	e0ea      	b.n	8004420 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800424a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004252:	8952      	ldrh	r2, [r2, #10]
 8004254:	fbb3 f3f2 	udiv	r3, r3, r2
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	2b00      	cmp	r3, #0
 800425e:	d103      	bne.n	8004268 <find_volume+0x2cc>
 8004260:	230d      	movs	r3, #13
 8004262:	e0dd      	b.n	8004420 <find_volume+0x484>
 8004264:	20000078 	.word	0x20000078
		fmt = FS_FAT32;
 8004268:	2303      	movs	r3, #3
 800426a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004274:	4293      	cmp	r3, r2
 8004276:	d802      	bhi.n	800427e <find_volume+0x2e2>
 8004278:	2302      	movs	r3, #2
 800427a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004284:	4293      	cmp	r3, r2
 8004286:	d802      	bhi.n	800428e <find_volume+0x2f2>
 8004288:	2301      	movs	r3, #1
 800428a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	1c9a      	adds	r2, r3, #2
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800429a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800429c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800429e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a0:	441a      	add	r2, r3
 80042a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80042a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80042a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042aa:	441a      	add	r2, r3
 80042ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ae:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80042b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d11e      	bne.n	80042f6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80042b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ba:	3330      	adds	r3, #48	; 0x30
 80042bc:	332a      	adds	r3, #42	; 0x2a
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fe fc56 	bl	8002b70 <ld_word>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <find_volume+0x332>
 80042ca:	230d      	movs	r3, #13
 80042cc:	e0a8      	b.n	8004420 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80042ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d0:	891b      	ldrh	r3, [r3, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <find_volume+0x33e>
 80042d6:	230d      	movs	r3, #13
 80042d8:	e0a2      	b.n	8004420 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80042da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042dc:	3330      	adds	r3, #48	; 0x30
 80042de:	332c      	adds	r3, #44	; 0x2c
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fe fc5d 	bl	8002ba0 <ld_dword>
 80042e6:	4602      	mov	r2, r0
 80042e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80042ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	647b      	str	r3, [r7, #68]	; 0x44
 80042f4:	e01f      	b.n	8004336 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	891b      	ldrh	r3, [r3, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <find_volume+0x366>
 80042fe:	230d      	movs	r3, #13
 8004300:	e08e      	b.n	8004420 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004304:	6a1a      	ldr	r2, [r3, #32]
 8004306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004308:	441a      	add	r2, r3
 800430a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800430e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004312:	2b02      	cmp	r3, #2
 8004314:	d103      	bne.n	800431e <find_volume+0x382>
 8004316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	e00a      	b.n	8004334 <find_volume+0x398>
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	4613      	mov	r3, r2
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	4413      	add	r3, r2
 8004328:	085a      	lsrs	r2, r3, #1
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004334:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	699a      	ldr	r2, [r3, #24]
 800433a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800433c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004340:	0a5b      	lsrs	r3, r3, #9
 8004342:	429a      	cmp	r2, r3
 8004344:	d201      	bcs.n	800434a <find_volume+0x3ae>
 8004346:	230d      	movs	r3, #13
 8004348:	e06a      	b.n	8004420 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434c:	f04f 32ff 	mov.w	r2, #4294967295
 8004350:	611a      	str	r2, [r3, #16]
 8004352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435c:	2280      	movs	r2, #128	; 0x80
 800435e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004360:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004364:	2b03      	cmp	r3, #3
 8004366:	d149      	bne.n	80043fc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	3330      	adds	r3, #48	; 0x30
 800436c:	3330      	adds	r3, #48	; 0x30
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe fbfe 	bl	8002b70 <ld_word>
 8004374:	4603      	mov	r3, r0
 8004376:	2b01      	cmp	r3, #1
 8004378:	d140      	bne.n	80043fc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800437a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800437c:	3301      	adds	r3, #1
 800437e:	4619      	mov	r1, r3
 8004380:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004382:	f7fe fea5 	bl	80030d0 <move_window>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d137      	bne.n	80043fc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438e:	2200      	movs	r2, #0
 8004390:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	3330      	adds	r3, #48	; 0x30
 8004396:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800439a:	4618      	mov	r0, r3
 800439c:	f7fe fbe8 	bl	8002b70 <ld_word>
 80043a0:	4603      	mov	r3, r0
 80043a2:	461a      	mov	r2, r3
 80043a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d127      	bne.n	80043fc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80043ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ae:	3330      	adds	r3, #48	; 0x30
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fe fbf5 	bl	8002ba0 <ld_dword>
 80043b6:	4602      	mov	r2, r0
 80043b8:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <find_volume+0x48c>)
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d11e      	bne.n	80043fc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	3330      	adds	r3, #48	; 0x30
 80043c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe fbea 	bl	8002ba0 <ld_dword>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4b17      	ldr	r3, [pc, #92]	; (800442c <find_volume+0x490>)
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d113      	bne.n	80043fc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80043d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d6:	3330      	adds	r3, #48	; 0x30
 80043d8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fe fbdf 	bl	8002ba0 <ld_dword>
 80043e2:	4602      	mov	r2, r0
 80043e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80043e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ea:	3330      	adds	r3, #48	; 0x30
 80043ec:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fe fbd5 	bl	8002ba0 <ld_dword>
 80043f6:	4602      	mov	r2, r0
 80043f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fa:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80043fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004402:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <find_volume+0x494>)
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	3301      	adds	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	4b08      	ldr	r3, [pc, #32]	; (8004430 <find_volume+0x494>)
 800440e:	801a      	strh	r2, [r3, #0]
 8004410:	4b07      	ldr	r3, [pc, #28]	; (8004430 <find_volume+0x494>)
 8004412:	881a      	ldrh	r2, [r3, #0]
 8004414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004416:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004418:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800441a:	f7fe fdf1 	bl	8003000 <clear_lock>
#endif
	return FR_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3758      	adds	r7, #88	; 0x58
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	41615252 	.word	0x41615252
 800442c:	61417272 	.word	0x61417272
 8004430:	2000007c 	.word	0x2000007c

08004434 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800443e:	2309      	movs	r3, #9
 8004440:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01c      	beq.n	8004482 <validate+0x4e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d018      	beq.n	8004482 <validate+0x4e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d013      	beq.n	8004482 <validate+0x4e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	889a      	ldrh	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	88db      	ldrh	r3, [r3, #6]
 8004464:	429a      	cmp	r2, r3
 8004466:	d10c      	bne.n	8004482 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	785b      	ldrb	r3, [r3, #1]
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe fae0 	bl	8002a34 <disk_status>
 8004474:	4603      	mov	r3, r0
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <validate+0x4e>
			res = FR_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <validate+0x5a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	e000      	b.n	8004490 <validate+0x5c>
 800448e:	2300      	movs	r3, #0
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	6013      	str	r3, [r2, #0]
	return res;
 8004494:	7bfb      	ldrb	r3, [r7, #15]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	4613      	mov	r3, r2
 80044ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80044b2:	f107 0310 	add.w	r3, r7, #16
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fcd5 	bl	8003e66 <get_ldnumber>
 80044bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	da01      	bge.n	80044c8 <f_mount+0x28>
 80044c4:	230b      	movs	r3, #11
 80044c6:	e02b      	b.n	8004520 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80044c8:	4a17      	ldr	r2, [pc, #92]	; (8004528 <f_mount+0x88>)
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80044d8:	69b8      	ldr	r0, [r7, #24]
 80044da:	f7fe fd91 	bl	8003000 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	490d      	ldr	r1, [pc, #52]	; (8004528 <f_mount+0x88>)
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <f_mount+0x66>
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d001      	beq.n	800450a <f_mount+0x6a>
 8004506:	2300      	movs	r3, #0
 8004508:	e00a      	b.n	8004520 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800450a:	f107 010c 	add.w	r1, r7, #12
 800450e:	f107 0308 	add.w	r3, r7, #8
 8004512:	2200      	movs	r2, #0
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fd41 	bl	8003f9c <find_volume>
 800451a:	4603      	mov	r3, r0
 800451c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800451e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3720      	adds	r7, #32
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20000078 	.word	0x20000078

0800452c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b098      	sub	sp, #96	; 0x60
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	4613      	mov	r3, r2
 8004538:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <f_open+0x18>
 8004540:	2309      	movs	r3, #9
 8004542:	e1ad      	b.n	80048a0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800454a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800454c:	79fa      	ldrb	r2, [r7, #7]
 800454e:	f107 0110 	add.w	r1, r7, #16
 8004552:	f107 0308 	add.w	r3, r7, #8
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fd20 	bl	8003f9c <find_volume>
 800455c:	4603      	mov	r3, r0
 800455e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8004562:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004566:	2b00      	cmp	r3, #0
 8004568:	f040 8191 	bne.w	800488e <f_open+0x362>
		dj.obj.fs = fs;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	f107 0314 	add.w	r3, r7, #20
 8004576:	4611      	mov	r1, r2
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff fc03 	bl	8003d84 <follow_path>
 800457e:	4603      	mov	r3, r0
 8004580:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004584:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004588:	2b00      	cmp	r3, #0
 800458a:	d11a      	bne.n	80045c2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800458c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004590:	b25b      	sxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	da03      	bge.n	800459e <f_open+0x72>
				res = FR_INVALID_NAME;
 8004596:	2306      	movs	r3, #6
 8004598:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800459c:	e011      	b.n	80045c2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	bf14      	ite	ne
 80045a8:	2301      	movne	r3, #1
 80045aa:	2300      	moveq	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	f107 0314 	add.w	r3, r7, #20
 80045b4:	4611      	mov	r1, r2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe fbda 	bl	8002d70 <chk_lock>
 80045bc:	4603      	mov	r3, r0
 80045be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	f003 031c 	and.w	r3, r3, #28
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d07f      	beq.n	80046cc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80045cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d017      	beq.n	8004604 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80045d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d10e      	bne.n	80045fa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80045dc:	f7fe fc24 	bl	8002e28 <enq_lock>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d006      	beq.n	80045f4 <f_open+0xc8>
 80045e6:	f107 0314 	add.w	r3, r7, #20
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff fb03 	bl	8003bf6 <dir_register>
 80045f0:	4603      	mov	r3, r0
 80045f2:	e000      	b.n	80045f6 <f_open+0xca>
 80045f4:	2312      	movs	r3, #18
 80045f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	f043 0308 	orr.w	r3, r3, #8
 8004600:	71fb      	strb	r3, [r7, #7]
 8004602:	e010      	b.n	8004626 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004604:	7ebb      	ldrb	r3, [r7, #26]
 8004606:	f003 0311 	and.w	r3, r3, #17
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <f_open+0xea>
					res = FR_DENIED;
 800460e:	2307      	movs	r3, #7
 8004610:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004614:	e007      	b.n	8004626 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <f_open+0xfa>
 8004620:	2308      	movs	r3, #8
 8004622:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004626:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800462a:	2b00      	cmp	r3, #0
 800462c:	d168      	bne.n	8004700 <f_open+0x1d4>
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d063      	beq.n	8004700 <f_open+0x1d4>
				dw = GET_FATTIME();
 8004638:	f7fe f99a 	bl	8002970 <get_fattime>
 800463c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800463e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004640:	330e      	adds	r3, #14
 8004642:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004644:	4618      	mov	r0, r3
 8004646:	f7fe fae9 	bl	8002c1c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800464a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464c:	3316      	adds	r3, #22
 800464e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004650:	4618      	mov	r0, r3
 8004652:	f7fe fae3 	bl	8002c1c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004658:	330b      	adds	r3, #11
 800465a:	2220      	movs	r2, #32
 800465c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004662:	4611      	mov	r1, r2
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff fa32 	bl	8003ace <ld_clust>
 800466a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004670:	2200      	movs	r2, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff fa4a 	bl	8003b0c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467a:	331c      	adds	r3, #28
 800467c:	2100      	movs	r1, #0
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe facc 	bl	8002c1c <st_dword>
					fs->wflag = 1;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2201      	movs	r2, #1
 8004688:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800468a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800468c:	2b00      	cmp	r3, #0
 800468e:	d037      	beq.n	8004700 <f_open+0x1d4>
						dw = fs->winsect;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8004696:	f107 0314 	add.w	r3, r7, #20
 800469a:	2200      	movs	r2, #0
 800469c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe ff5d 	bl	800355e <remove_chain>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80046aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d126      	bne.n	8004700 <f_open+0x1d4>
							res = move_window(fs, dw);
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fe fd0a 	bl	80030d0 <move_window>
 80046bc:	4603      	mov	r3, r0
 80046be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046c6:	3a01      	subs	r2, #1
 80046c8:	60da      	str	r2, [r3, #12]
 80046ca:	e019      	b.n	8004700 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80046cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d115      	bne.n	8004700 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80046d4:	7ebb      	ldrb	r3, [r7, #26]
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80046de:	2304      	movs	r3, #4
 80046e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80046e4:	e00c      	b.n	8004700 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d007      	beq.n	8004700 <f_open+0x1d4>
 80046f0:	7ebb      	ldrb	r3, [r7, #26]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <f_open+0x1d4>
						res = FR_DENIED;
 80046fa:	2307      	movs	r3, #7
 80046fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8004700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004704:	2b00      	cmp	r3, #0
 8004706:	d128      	bne.n	800475a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004708:	79fb      	ldrb	r3, [r7, #7]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004718:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8004722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	f023 0301 	bic.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	bf14      	ite	ne
 8004732:	2301      	movne	r3, #1
 8004734:	2300      	moveq	r3, #0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	f107 0314 	add.w	r3, r7, #20
 800473e:	4611      	mov	r1, r2
 8004740:	4618      	mov	r0, r3
 8004742:	f7fe fb93 	bl	8002e6c <inc_lock>
 8004746:	4602      	mov	r2, r0
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d102      	bne.n	800475a <f_open+0x22e>
 8004754:	2302      	movs	r3, #2
 8004756:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800475a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800475e:	2b00      	cmp	r3, #0
 8004760:	f040 8095 	bne.w	800488e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff f9af 	bl	8003ace <ld_clust>
 8004770:	4602      	mov	r2, r0
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004778:	331c      	adds	r3, #28
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe fa10 	bl	8002ba0 <ld_dword>
 8004780:	4602      	mov	r2, r0
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	88da      	ldrh	r2, [r3, #6]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	79fa      	ldrb	r2, [r7, #7]
 800479e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3330      	adds	r3, #48	; 0x30
 80047b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ba:	2100      	movs	r1, #0
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe fa7a 	bl	8002cb6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d060      	beq.n	800488e <f_open+0x362>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d05c      	beq.n	800488e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	895b      	ldrh	r3, [r3, #10]
 80047e0:	025b      	lsls	r3, r3, #9
 80047e2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	657b      	str	r3, [r7, #84]	; 0x54
 80047f0:	e016      	b.n	8004820 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe fd25 	bl	8003246 <get_fat>
 80047fc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80047fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004800:	2b01      	cmp	r3, #1
 8004802:	d802      	bhi.n	800480a <f_open+0x2de>
 8004804:	2302      	movs	r3, #2
 8004806:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800480a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d102      	bne.n	8004818 <f_open+0x2ec>
 8004812:	2301      	movs	r3, #1
 8004814:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004818:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800481a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	657b      	str	r3, [r7, #84]	; 0x54
 8004820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004824:	2b00      	cmp	r3, #0
 8004826:	d103      	bne.n	8004830 <f_open+0x304>
 8004828:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800482a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800482c:	429a      	cmp	r2, r3
 800482e:	d8e0      	bhi.n	80047f2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004834:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800483a:	2b00      	cmp	r3, #0
 800483c:	d127      	bne.n	800488e <f_open+0x362>
 800483e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004844:	2b00      	cmp	r3, #0
 8004846:	d022      	beq.n	800488e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800484c:	4618      	mov	r0, r3
 800484e:	f7fe fcdb 	bl	8003208 <clust2sect>
 8004852:	6478      	str	r0, [r7, #68]	; 0x44
 8004854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004856:	2b00      	cmp	r3, #0
 8004858:	d103      	bne.n	8004862 <f_open+0x336>
						res = FR_INT_ERR;
 800485a:	2302      	movs	r3, #2
 800485c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004860:	e015      	b.n	800488e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004864:	0a5a      	lsrs	r2, r3, #9
 8004866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004868:	441a      	add	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	7858      	ldrb	r0, [r3, #1]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a1a      	ldr	r2, [r3, #32]
 800487c:	2301      	movs	r3, #1
 800487e:	f7fe f919 	bl	8002ab4 <disk_read>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <f_open+0x362>
 8004888:	2301      	movs	r3, #1
 800488a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800488e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <f_open+0x370>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800489c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3760      	adds	r7, #96	; 0x60
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08e      	sub	sp, #56	; 0x38
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f107 0214 	add.w	r2, r7, #20
 80048c6:	4611      	mov	r1, r2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff fdb3 	bl	8004434 <validate>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80048d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d107      	bne.n	80048ec <f_read+0x44>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	7d5b      	ldrb	r3, [r3, #21]
 80048e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80048e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <f_read+0x4a>
 80048ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80048f0:	e115      	b.n	8004b1e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	7d1b      	ldrb	r3, [r3, #20]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <f_read+0x5a>
 80048fe:	2307      	movs	r3, #7
 8004900:	e10d      	b.n	8004b1e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	429a      	cmp	r2, r3
 8004914:	f240 80fe 	bls.w	8004b14 <f_read+0x26c>
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800491c:	e0fa      	b.n	8004b14 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004926:	2b00      	cmp	r3, #0
 8004928:	f040 80c6 	bne.w	8004ab8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	0a5b      	lsrs	r3, r3, #9
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	8952      	ldrh	r2, [r2, #10]
 8004936:	3a01      	subs	r2, #1
 8004938:	4013      	ands	r3, r2
 800493a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d12f      	bne.n	80049a2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d103      	bne.n	8004952 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	633b      	str	r3, [r7, #48]	; 0x30
 8004950:	e013      	b.n	800497a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	4619      	mov	r1, r3
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f7fe fef9 	bl	8003758 <clmt_clust>
 8004966:	6338      	str	r0, [r7, #48]	; 0x30
 8004968:	e007      	b.n	800497a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f7fe fc67 	bl	8003246 <get_fat>
 8004978:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	2b01      	cmp	r3, #1
 800497e:	d804      	bhi.n	800498a <f_read+0xe2>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2202      	movs	r2, #2
 8004984:	755a      	strb	r2, [r3, #21]
 8004986:	2302      	movs	r3, #2
 8004988:	e0c9      	b.n	8004b1e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d104      	bne.n	800499c <f_read+0xf4>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2201      	movs	r2, #1
 8004996:	755a      	strb	r2, [r3, #21]
 8004998:	2301      	movs	r3, #1
 800499a:	e0c0      	b.n	8004b1e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f7fe fc2c 	bl	8003208 <clust2sect>
 80049b0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d104      	bne.n	80049c2 <f_read+0x11a>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2202      	movs	r2, #2
 80049bc:	755a      	strb	r2, [r3, #21]
 80049be:	2302      	movs	r3, #2
 80049c0:	e0ad      	b.n	8004b1e <f_read+0x276>
			sect += csect;
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	4413      	add	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	0a5b      	lsrs	r3, r3, #9
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d039      	beq.n	8004a4a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	4413      	add	r3, r2
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	8952      	ldrh	r2, [r2, #10]
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d905      	bls.n	80049f0 <f_read+0x148>
					cc = fs->csize - csect;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	895b      	ldrh	r3, [r3, #10]
 80049e8:	461a      	mov	r2, r3
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	7858      	ldrb	r0, [r3, #1]
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049fa:	f7fe f85b 	bl	8002ab4 <disk_read>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d004      	beq.n	8004a0e <f_read+0x166>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	755a      	strb	r2, [r3, #21]
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e087      	b.n	8004b1e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	7d1b      	ldrb	r3, [r3, #20]
 8004a12:	b25b      	sxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	da14      	bge.n	8004a42 <f_read+0x19a>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a1a      	ldr	r2, [r3, #32]
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d90d      	bls.n	8004a42 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a1a      	ldr	r2, [r3, #32]
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	025b      	lsls	r3, r3, #9
 8004a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a32:	18d0      	adds	r0, r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	3330      	adds	r3, #48	; 0x30
 8004a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	f7fe f919 	bl	8002c74 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	025b      	lsls	r3, r3, #9
 8004a46:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8004a48:	e050      	b.n	8004aec <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d02e      	beq.n	8004ab2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	7d1b      	ldrb	r3, [r3, #20]
 8004a58:	b25b      	sxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	da18      	bge.n	8004a90 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	7858      	ldrb	r0, [r3, #1]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a1a      	ldr	r2, [r3, #32]
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f7fe f841 	bl	8002af4 <disk_write>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d004      	beq.n	8004a82 <f_read+0x1da>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	755a      	strb	r2, [r3, #21]
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e04d      	b.n	8004b1e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	7d1b      	ldrb	r3, [r3, #20]
 8004a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	7858      	ldrb	r0, [r3, #1]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	f7fe f809 	bl	8002ab4 <disk_read>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d004      	beq.n	8004ab2 <f_read+0x20a>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	755a      	strb	r2, [r3, #21]
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e035      	b.n	8004b1e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8004ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d901      	bls.n	8004ad2 <f_read+0x22a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae0:	4413      	add	r3, r2
 8004ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ae8:	f7fe f8c4 	bl	8002c74 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	4413      	add	r3, r2
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	699a      	ldr	r2, [r3, #24]
 8004af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afa:	441a      	add	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	619a      	str	r2, [r3, #24]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b06:	441a      	add	r2, r3
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f47f af01 	bne.w	800491e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3738      	adds	r7, #56	; 0x38
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b08c      	sub	sp, #48	; 0x30
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f107 0210 	add.w	r2, r7, #16
 8004b44:	4611      	mov	r1, r2
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff fc74 	bl	8004434 <validate>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d107      	bne.n	8004b6a <f_write+0x44>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	7d5b      	ldrb	r3, [r3, #21]
 8004b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <f_write+0x4a>
 8004b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b6e:	e14b      	b.n	8004e08 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	7d1b      	ldrb	r3, [r3, #20]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <f_write+0x5a>
 8004b7c:	2307      	movs	r3, #7
 8004b7e:	e143      	b.n	8004e08 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	699a      	ldr	r2, [r3, #24]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	441a      	add	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	f080 812d 	bcs.w	8004dec <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	43db      	mvns	r3, r3
 8004b98:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8004b9a:	e127      	b.n	8004dec <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f040 80e3 	bne.w	8004d70 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	0a5b      	lsrs	r3, r3, #9
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	8952      	ldrh	r2, [r2, #10]
 8004bb4:	3a01      	subs	r2, #1
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d143      	bne.n	8004c48 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10c      	bne.n	8004be2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8004bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d11a      	bne.n	8004c0a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fe fd25 	bl	8003628 <create_chain>
 8004bde:	62b8      	str	r0, [r7, #40]	; 0x28
 8004be0:	e013      	b.n	8004c0a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d007      	beq.n	8004bfa <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f7fe fdb1 	bl	8003758 <clmt_clust>
 8004bf6:	62b8      	str	r0, [r7, #40]	; 0x28
 8004bf8:	e007      	b.n	8004c0a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	4619      	mov	r1, r3
 8004c02:	4610      	mov	r0, r2
 8004c04:	f7fe fd10 	bl	8003628 <create_chain>
 8004c08:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 80f2 	beq.w	8004df6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d104      	bne.n	8004c22 <f_write+0xfc>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	755a      	strb	r2, [r3, #21]
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e0f2      	b.n	8004e08 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d104      	bne.n	8004c34 <f_write+0x10e>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	755a      	strb	r2, [r3, #21]
 8004c30:	2301      	movs	r3, #1
 8004c32:	e0e9      	b.n	8004e08 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c38:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d102      	bne.n	8004c48 <f_write+0x122>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c46:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	7d1b      	ldrb	r3, [r3, #20]
 8004c4c:	b25b      	sxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	da18      	bge.n	8004c84 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	7858      	ldrb	r0, [r3, #1]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a1a      	ldr	r2, [r3, #32]
 8004c60:	2301      	movs	r3, #1
 8004c62:	f7fd ff47 	bl	8002af4 <disk_write>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <f_write+0x150>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	755a      	strb	r2, [r3, #21]
 8004c72:	2301      	movs	r3, #1
 8004c74:	e0c8      	b.n	8004e08 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	7d1b      	ldrb	r3, [r3, #20]
 8004c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	f7fe fabb 	bl	8003208 <clust2sect>
 8004c92:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d104      	bne.n	8004ca4 <f_write+0x17e>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	755a      	strb	r2, [r3, #21]
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e0b1      	b.n	8004e08 <f_write+0x2e2>
			sect += csect;
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	4413      	add	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	0a5b      	lsrs	r3, r3, #9
 8004cb0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d03c      	beq.n	8004d32 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	8952      	ldrh	r2, [r2, #10]
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d905      	bls.n	8004cd2 <f_write+0x1ac>
					cc = fs->csize - csect;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	895b      	ldrh	r3, [r3, #10]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	7858      	ldrb	r0, [r3, #1]
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	69f9      	ldr	r1, [r7, #28]
 8004cdc:	f7fd ff0a 	bl	8002af4 <disk_write>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d004      	beq.n	8004cf0 <f_write+0x1ca>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	755a      	strb	r2, [r3, #21]
 8004cec:	2301      	movs	r3, #1
 8004cee:	e08b      	b.n	8004e08 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1a      	ldr	r2, [r3, #32]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	6a3a      	ldr	r2, [r7, #32]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d915      	bls.n	8004d2a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a1a      	ldr	r2, [r3, #32]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	025b      	lsls	r3, r3, #9
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d16:	4619      	mov	r1, r3
 8004d18:	f7fd ffac 	bl	8002c74 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	7d1b      	ldrb	r3, [r3, #20]
 8004d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	025b      	lsls	r3, r3, #9
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8004d30:	e03f      	b.n	8004db2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d016      	beq.n	8004d6a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	699a      	ldr	r2, [r3, #24]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d210      	bcs.n	8004d6a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	7858      	ldrb	r0, [r3, #1]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004d52:	2301      	movs	r3, #1
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	f7fd fead 	bl	8002ab4 <disk_read>
 8004d5a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d004      	beq.n	8004d6a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2201      	movs	r2, #1
 8004d64:	755a      	strb	r2, [r3, #21]
 8004d66:	2301      	movs	r3, #1
 8004d68:	e04e      	b.n	8004e08 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d78:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8004d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d901      	bls.n	8004d8a <f_write+0x264>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d98:	4413      	add	r3, r2
 8004d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9c:	69f9      	ldr	r1, [r7, #28]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fd ff68 	bl	8002c74 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	7d1b      	ldrb	r3, [r3, #20]
 8004da8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	4413      	add	r3, r2
 8004db8:	61fb      	str	r3, [r7, #28]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	441a      	add	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	619a      	str	r2, [r3, #24]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	bf38      	it	cc
 8004dd2:	461a      	movcc	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	60da      	str	r2, [r3, #12]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	441a      	add	r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f47f aed4 	bne.w	8004b9c <f_write+0x76>
 8004df4:	e000      	b.n	8004df8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004df6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	7d1b      	ldrb	r3, [r3, #20]
 8004dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3730      	adds	r7, #48	; 0x30
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f107 0208 	add.w	r2, r7, #8
 8004e1e:	4611      	mov	r1, r2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fb07 	bl	8004434 <validate>
 8004e26:	4603      	mov	r3, r0
 8004e28:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004e2a:	7dfb      	ldrb	r3, [r7, #23]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d168      	bne.n	8004f02 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	7d1b      	ldrb	r3, [r3, #20]
 8004e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d062      	beq.n	8004f02 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	7d1b      	ldrb	r3, [r3, #20]
 8004e40:	b25b      	sxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	da15      	bge.n	8004e72 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	7858      	ldrb	r0, [r3, #1]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1a      	ldr	r2, [r3, #32]
 8004e54:	2301      	movs	r3, #1
 8004e56:	f7fd fe4d 	bl	8002af4 <disk_write>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <f_sync+0x54>
 8004e60:	2301      	movs	r3, #1
 8004e62:	e04f      	b.n	8004f04 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	7d1b      	ldrb	r3, [r3, #20]
 8004e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8004e72:	f7fd fd7d 	bl	8002970 <get_fattime>
 8004e76:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4610      	mov	r0, r2
 8004e82:	f7fe f925 	bl	80030d0 <move_window>
 8004e86:	4603      	mov	r3, r0
 8004e88:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8004e8a:	7dfb      	ldrb	r3, [r7, #23]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d138      	bne.n	8004f02 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e94:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	330b      	adds	r3, #11
 8004e9a:	781a      	ldrb	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	330b      	adds	r3, #11
 8004ea0:	f042 0220 	orr.w	r2, r2, #32
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	68f9      	ldr	r1, [r7, #12]
 8004eb4:	f7fe fe2a 	bl	8003b0c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f103 021c 	add.w	r2, r3, #28
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f7fd fea9 	bl	8002c1c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3316      	adds	r3, #22
 8004ece:	6939      	ldr	r1, [r7, #16]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fd fea3 	bl	8002c1c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3312      	adds	r3, #18
 8004eda:	2100      	movs	r1, #0
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fd fe82 	bl	8002be6 <st_word>
					fs->wflag = 1;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fe f91e 	bl	800312c <sync_fs>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	7d1b      	ldrb	r3, [r3, #20]
 8004ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8004f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff ff7b 	bl	8004e10 <f_sync>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d118      	bne.n	8004f56 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f107 0208 	add.w	r2, r7, #8
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff fa81 	bl	8004434 <validate>
 8004f32:	4603      	mov	r3, r0
 8004f34:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10c      	bne.n	8004f56 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fe f821 	bl	8002f88 <dec_lock>
 8004f46:	4603      	mov	r3, r0
 8004f48:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d102      	bne.n	8004f56 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004f76:	4b1f      	ldr	r3, [pc, #124]	; (8004ff4 <FATFS_LinkDriverEx+0x94>)
 8004f78:	7a5b      	ldrb	r3, [r3, #9]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d131      	bne.n	8004fe4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004f80:	4b1c      	ldr	r3, [pc, #112]	; (8004ff4 <FATFS_LinkDriverEx+0x94>)
 8004f82:	7a5b      	ldrb	r3, [r3, #9]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <FATFS_LinkDriverEx+0x94>)
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004f8e:	4b19      	ldr	r3, [pc, #100]	; (8004ff4 <FATFS_LinkDriverEx+0x94>)
 8004f90:	7a5b      	ldrb	r3, [r3, #9]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	4a17      	ldr	r2, [pc, #92]	; (8004ff4 <FATFS_LinkDriverEx+0x94>)
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004f9e:	4b15      	ldr	r3, [pc, #84]	; (8004ff4 <FATFS_LinkDriverEx+0x94>)
 8004fa0:	7a5b      	ldrb	r3, [r3, #9]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	4b13      	ldr	r3, [pc, #76]	; (8004ff4 <FATFS_LinkDriverEx+0x94>)
 8004fa8:	4413      	add	r3, r2
 8004faa:	79fa      	ldrb	r2, [r7, #7]
 8004fac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004fae:	4b11      	ldr	r3, [pc, #68]	; (8004ff4 <FATFS_LinkDriverEx+0x94>)
 8004fb0:	7a5b      	ldrb	r3, [r3, #9]
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	b2d1      	uxtb	r1, r2
 8004fb8:	4a0e      	ldr	r2, [pc, #56]	; (8004ff4 <FATFS_LinkDriverEx+0x94>)
 8004fba:	7251      	strb	r1, [r2, #9]
 8004fbc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004fbe:	7dbb      	ldrb	r3, [r7, #22]
 8004fc0:	3330      	adds	r3, #48	; 0x30
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	223a      	movs	r2, #58	; 0x3a
 8004fce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	222f      	movs	r2, #47	; 0x2f
 8004fd6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	3303      	adds	r3, #3
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	200000a0 	.word	0x200000a0

08004ff8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005002:	2200      	movs	r2, #0
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff ffaa 	bl	8004f60 <FATFS_LinkDriverEx>
 800500c:	4603      	mov	r3, r0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <__libc_init_array>:
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	4e0d      	ldr	r6, [pc, #52]	; (8005050 <__libc_init_array+0x38>)
 800501c:	4c0d      	ldr	r4, [pc, #52]	; (8005054 <__libc_init_array+0x3c>)
 800501e:	1ba4      	subs	r4, r4, r6
 8005020:	10a4      	asrs	r4, r4, #2
 8005022:	2500      	movs	r5, #0
 8005024:	42a5      	cmp	r5, r4
 8005026:	d109      	bne.n	800503c <__libc_init_array+0x24>
 8005028:	4e0b      	ldr	r6, [pc, #44]	; (8005058 <__libc_init_array+0x40>)
 800502a:	4c0c      	ldr	r4, [pc, #48]	; (800505c <__libc_init_array+0x44>)
 800502c:	f000 f820 	bl	8005070 <_init>
 8005030:	1ba4      	subs	r4, r4, r6
 8005032:	10a4      	asrs	r4, r4, #2
 8005034:	2500      	movs	r5, #0
 8005036:	42a5      	cmp	r5, r4
 8005038:	d105      	bne.n	8005046 <__libc_init_array+0x2e>
 800503a:	bd70      	pop	{r4, r5, r6, pc}
 800503c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005040:	4798      	blx	r3
 8005042:	3501      	adds	r5, #1
 8005044:	e7ee      	b.n	8005024 <__libc_init_array+0xc>
 8005046:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800504a:	4798      	blx	r3
 800504c:	3501      	adds	r5, #1
 800504e:	e7f2      	b.n	8005036 <__libc_init_array+0x1e>
 8005050:	08005180 	.word	0x08005180
 8005054:	08005180 	.word	0x08005180
 8005058:	08005180 	.word	0x08005180
 800505c:	08005184 	.word	0x08005184

08005060 <memset>:
 8005060:	4402      	add	r2, r0
 8005062:	4603      	mov	r3, r0
 8005064:	4293      	cmp	r3, r2
 8005066:	d100      	bne.n	800506a <memset+0xa>
 8005068:	4770      	bx	lr
 800506a:	f803 1b01 	strb.w	r1, [r3], #1
 800506e:	e7f9      	b.n	8005064 <memset+0x4>

08005070 <_init>:
 8005070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005072:	bf00      	nop
 8005074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005076:	bc08      	pop	{r3}
 8005078:	469e      	mov	lr, r3
 800507a:	4770      	bx	lr

0800507c <_fini>:
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507e:	bf00      	nop
 8005080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005082:	bc08      	pop	{r3}
 8005084:	469e      	mov	lr, r3
 8005086:	4770      	bx	lr
